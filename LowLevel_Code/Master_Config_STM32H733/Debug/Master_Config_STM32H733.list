
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014f74  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08015248  08015248  00025248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015470  08015470  00025470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015478  08015478  00025478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801547c  0801547c  0002547c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08015480  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 RAM_D2        00000034  20000010  08015490  00030010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000ea4  20000044  080154c4  00030044  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000ee8  080154c4  00030ee8  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030044  2**0
                  CONTENTS, READONLY
 11 .debug_info   0004081a  00000000  00000000  00030072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005dad  00000000  00000000  0007088c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001d48  00000000  00000000  00076640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001b50  00000000  00000000  00078388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039746  00000000  00000000  00079ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002bd55  00000000  00000000  000b361e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016ceda  00000000  00000000  000df373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  0024c24d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007e00  00000000  00000000  0024c2a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000044 	.word	0x20000044
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801522c 	.word	0x0801522c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	20000048 	.word	0x20000048
 800030c:	0801522c 	.word	0x0801522c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

float EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000614:	78fb      	ldrb	r3, [r7, #3]
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f000 f8e7 	bl	80007ec <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	89db      	ldrh	r3, [r3, #14]
 8000622:	ee07 3a90 	vmov	s15, r3
 8000626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000648 <EncPulse2Rad_Read+0x40>
 800062e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	edd3 7a07 	vldr	s15, [r3, #28]
 8000638:	ee77 7a67 	vsub.f32	s15, s14, s15
//	return (Enc->Position * 0.000383495f);
}
 800063c:	eeb0 0a67 	vmov.f32	s0, s15
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	39c90fd4 	.word	0x39c90fd4

0800064c <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,float offset) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0
 8000652:	6178      	str	r0, [r7, #20]
 8000654:	6139      	str	r1, [r7, #16]
 8000656:	60fa      	str	r2, [r7, #12]
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	ed87 0a01 	vstr	s0, [r7, #4]
	dev->hspiHandle = hspiHandle;
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	693a      	ldr	r2, [r7, #16]
 8000662:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	68ba      	ldr	r2, [r7, #8]
 8000668:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	68fa      	ldr	r2, [r7, #12]
 800066e:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	8c3a      	ldrh	r2, [r7, #32]
 8000674:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 8000676:	8c3b      	ldrh	r3, [r7, #32]
 8000678:	2201      	movs	r2, #1
 800067a:	4619      	mov	r1, r3
 800067c:	68f8      	ldr	r0, [r7, #12]
 800067e:	f009 fbfb 	bl	8009e78 <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2200      	movs	r2, #0
 8000686:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	2200      	movs	r2, #0
 800068c:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2200      	movs	r2, #0
 8000692:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	2200      	movs	r2, #0
 8000698:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	2200      	movs	r2, #0
 800069e:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	2200      	movs	r2, #0
 80006a4:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2200      	movs	r2, #0
 80006aa:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	2200      	movs	r2, #0
 80006b0:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	2200      	movs	r2, #0
 80006b6:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2200      	movs	r2, #0
 80006bc:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006be:	edd7 7a01 	vldr	s15, [r7, #4]
 80006c2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80006d8 <AS5047U_init+0x8c>
 80006c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80006d0:	bf00      	nop
 80006d2:	3718      	adds	r7, #24
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	39c90fd4 	.word	0x39c90fd4

080006dc <AS5047U_Write>:

/*
 * This function for Non-Volatile Registers (OTP) Only
 */

inline void AS5047U_Write(AS5047U *dev,uint16_t Register_Address, uint16_t Data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	460b      	mov	r3, r1
 80006e6:	807b      	strh	r3, [r7, #2]
 80006e8:	4613      	mov	r3, r2
 80006ea:	803b      	strh	r3, [r7, #0]
	uint8_t Buffer[3] = {};
 80006ec:	4b3e      	ldr	r3, [pc, #248]	; (80007e8 <AS5047U_Write+0x10c>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	723b      	strb	r3, [r7, #8]
 80006f2:	f107 0309 	add.w	r3, r7, #9
 80006f6:	2200      	movs	r2, #0
 80006f8:	801a      	strh	r2, [r3, #0]

	Buffer[0] = ((uint8_t) (Register_Address >> 8)) & 0xBF;
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	b29b      	uxth	r3, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000706:	b2db      	uxtb	r3, r3
 8000708:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Register_Address & 0xFF);
 800070a:	887b      	ldrh	r3, [r7, #2]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f107 0108 	add.w	r1, r7, #8
 8000718:	2202      	movs	r2, #2
 800071a:	4618      	mov	r0, r3
 800071c:	f006 fe3a 	bl	8007394 <HAL_CRC_Calculate>
 8000720:	4603      	mov	r3, r0
 8000722:	b2db      	uxtb	r3, r3
 8000724:	43db      	mvns	r3, r3
 8000726:	b2db      	uxtb	r3, r3
 8000728:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	6898      	ldr	r0, [r3, #8]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	899b      	ldrh	r3, [r3, #12]
 8000732:	2200      	movs	r2, #0
 8000734:	4619      	mov	r1, r3
 8000736:	f009 fb9f 	bl	8009e78 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 800073a:	2300      	movs	r3, #0
 800073c:	81fb      	strh	r3, [r7, #14]
 800073e:	e002      	b.n	8000746 <AS5047U_Write+0x6a>
 8000740:	89fb      	ldrh	r3, [r7, #14]
 8000742:	3301      	adds	r3, #1
 8000744:	81fb      	strh	r3, [r7, #14]
 8000746:	89fb      	ldrh	r3, [r7, #14]
 8000748:	f240 2226 	movw	r2, #550	; 0x226
 800074c:	4293      	cmp	r3, r2
 800074e:	d9f7      	bls.n	8000740 <AS5047U_Write+0x64>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	6818      	ldr	r0, [r3, #0]
 8000754:	f107 0108 	add.w	r1, r7, #8
 8000758:	2301      	movs	r3, #1
 800075a:	2203      	movs	r2, #3
 800075c:	f00e fc76 	bl	800f04c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	6898      	ldr	r0, [r3, #8]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	899b      	ldrh	r3, [r3, #12]
 8000768:	2201      	movs	r2, #1
 800076a:	4619      	mov	r1, r3
 800076c:	f009 fb84 	bl	8009e78 <HAL_GPIO_WritePin>

	Buffer[0] = (uint8_t) (Data >> 8);
 8000770:	883b      	ldrh	r3, [r7, #0]
 8000772:	0a1b      	lsrs	r3, r3, #8
 8000774:	b29b      	uxth	r3, r3
 8000776:	b2db      	uxtb	r3, r3
 8000778:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Data & 0xFF);
 800077a:	883b      	ldrh	r3, [r7, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	f107 0108 	add.w	r1, r7, #8
 8000788:	2202      	movs	r2, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f006 fe02 	bl	8007394 <HAL_CRC_Calculate>
 8000790:	4603      	mov	r3, r0
 8000792:	b2db      	uxtb	r3, r3
 8000794:	43db      	mvns	r3, r3
 8000796:	b2db      	uxtb	r3, r3
 8000798:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6898      	ldr	r0, [r3, #8]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	899b      	ldrh	r3, [r3, #12]
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	f009 fb67 	bl	8009e78 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 80007aa:	2300      	movs	r3, #0
 80007ac:	81bb      	strh	r3, [r7, #12]
 80007ae:	e002      	b.n	80007b6 <AS5047U_Write+0xda>
 80007b0:	89bb      	ldrh	r3, [r7, #12]
 80007b2:	3301      	adds	r3, #1
 80007b4:	81bb      	strh	r3, [r7, #12]
 80007b6:	89bb      	ldrh	r3, [r7, #12]
 80007b8:	f240 2226 	movw	r2, #550	; 0x226
 80007bc:	4293      	cmp	r3, r2
 80007be:	d9f7      	bls.n	80007b0 <AS5047U_Write+0xd4>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	f107 0108 	add.w	r1, r7, #8
 80007c8:	2301      	movs	r3, #1
 80007ca:	2203      	movs	r2, #3
 80007cc:	f00e fc3e 	bl	800f04c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	6898      	ldr	r0, [r3, #8]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	899b      	ldrh	r3, [r3, #12]
 80007d8:	2201      	movs	r2, #1
 80007da:	4619      	mov	r1, r3
 80007dc:	f009 fb4c 	bl	8009e78 <HAL_GPIO_WritePin>
}
 80007e0:	bf00      	nop
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	08015248 	.word	0x08015248

080007ec <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b086      	sub	sp, #24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 80007f8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80007fc:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 80007fe:	2300      	movs	r3, #0
 8000800:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i=0; i <= 400; i++);
 8000802:	2300      	movs	r3, #0
 8000804:	82fb      	strh	r3, [r7, #22]
 8000806:	e002      	b.n	800080e <AS5047U_Position_Highspeed_Read+0x22>
 8000808:	8afb      	ldrh	r3, [r7, #22]
 800080a:	3301      	adds	r3, #1
 800080c:	82fb      	strh	r3, [r7, #22]
 800080e:	8afb      	ldrh	r3, [r7, #22]
 8000810:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000814:	d9f8      	bls.n	8000808 <AS5047U_Position_Highspeed_Read+0x1c>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6898      	ldr	r0, [r3, #8]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	899b      	ldrh	r3, [r3, #12]
 800081e:	2200      	movs	r2, #0
 8000820:	4619      	mov	r1, r3
 8000822:	f009 fb29 	bl	8009e78 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6818      	ldr	r0, [r3, #0]
 800082a:	f107 0110 	add.w	r1, r7, #16
 800082e:	2364      	movs	r3, #100	; 0x64
 8000830:	2202      	movs	r2, #2
 8000832:	f00e fc0b 	bl	800f04c <HAL_SPI_Transmit>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6898      	ldr	r0, [r3, #8]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	899b      	ldrh	r3, [r3, #12]
 800083e:	2201      	movs	r2, #1
 8000840:	4619      	mov	r1, r3
 8000842:	f009 fb19 	bl	8009e78 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 8000846:	2300      	movs	r3, #0
 8000848:	82bb      	strh	r3, [r7, #20]
 800084a:	e002      	b.n	8000852 <AS5047U_Position_Highspeed_Read+0x66>
 800084c:	8abb      	ldrh	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	82bb      	strh	r3, [r7, #20]
 8000852:	8abb      	ldrh	r3, [r7, #20]
 8000854:	f240 2226 	movw	r2, #550	; 0x226
 8000858:	4293      	cmp	r3, r2
 800085a:	d9f7      	bls.n	800084c <AS5047U_Position_Highspeed_Read+0x60>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6898      	ldr	r0, [r3, #8]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	899b      	ldrh	r3, [r3, #12]
 8000864:	2200      	movs	r2, #0
 8000866:	4619      	mov	r1, r3
 8000868:	f009 fb06 	bl	8009e78 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	f107 010c 	add.w	r1, r7, #12
 8000874:	2364      	movs	r3, #100	; 0x64
 8000876:	2202      	movs	r2, #2
 8000878:	f00e fdda 	bl	800f430 <HAL_SPI_Receive>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6898      	ldr	r0, [r3, #8]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	899b      	ldrh	r3, [r3, #12]
 8000884:	2201      	movs	r2, #1
 8000886:	4619      	mov	r1, r3
 8000888:	f009 faf6 	bl	8009e78 <HAL_GPIO_WritePin>
	if (dir == 1){
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d111      	bne.n	80008b6 <AS5047U_Position_Highspeed_Read+0xca>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 8000892:	7b3b      	ldrb	r3, [r7, #12]
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b21b      	sxth	r3, r3
 8000898:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800089c:	b21a      	sxth	r2, r3
 800089e:	7b7b      	ldrb	r3, [r7, #13]
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008ac:	4053      	eors	r3, r2
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	81da      	strh	r2, [r3, #14]
 80008b4:	e00c      	b.n	80008d0 <AS5047U_Position_Highspeed_Read+0xe4>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80008b6:	7b3b      	ldrb	r3, [r7, #12]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008c0:	b21a      	sxth	r2, r3
 80008c2:	7b7b      	ldrb	r3, [r7, #13]
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	89db      	ldrh	r3, [r3, #14]
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3718      	adds	r7, #24
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <TPM75_init>:
 *      Author: thansak Pongpraket
 */

#include <TPM75.h>

void TPM75_init(TPM75 *dev, I2C_HandleTypeDef *i2cHandle, uint8_t A2, uint8_t A1, uint8_t A0) {
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	460b      	mov	r3, r1
 80008ec:	71fb      	strb	r3, [r7, #7]
 80008ee:	4613      	mov	r3, r2
 80008f0:	71bb      	strb	r3, [r7, #6]
	dev->address = 0x92;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2292      	movs	r2, #146	; 0x92
 80008f6:	711a      	strb	r2, [r3, #4]
//	dev->address = 0x92;
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <MX_ADC3_Init>:

ADC_HandleTypeDef hadc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2224      	movs	r2, #36	; 0x24
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f013 fe5d 	bl	80145d0 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 8000916:	4b31      	ldr	r3, [pc, #196]	; (80009dc <MX_ADC3_Init+0xd8>)
 8000918:	4a31      	ldr	r2, [pc, #196]	; (80009e0 <MX_ADC3_Init+0xdc>)
 800091a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 800091c:	4b2f      	ldr	r3, [pc, #188]	; (80009dc <MX_ADC3_Init+0xd8>)
 800091e:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000922:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000924:	4b2d      	ldr	r3, [pc, #180]	; (80009dc <MX_ADC3_Init+0xd8>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800092a:	4b2c      	ldr	r3, [pc, #176]	; (80009dc <MX_ADC3_Init+0xd8>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000930:	4b2a      	ldr	r3, [pc, #168]	; (80009dc <MX_ADC3_Init+0xd8>)
 8000932:	2204      	movs	r2, #4
 8000934:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000936:	4b29      	ldr	r3, [pc, #164]	; (80009dc <MX_ADC3_Init+0xd8>)
 8000938:	2200      	movs	r2, #0
 800093a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800093c:	4b27      	ldr	r3, [pc, #156]	; (80009dc <MX_ADC3_Init+0xd8>)
 800093e:	2200      	movs	r2, #0
 8000940:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000942:	4b26      	ldr	r3, [pc, #152]	; (80009dc <MX_ADC3_Init+0xd8>)
 8000944:	2201      	movs	r2, #1
 8000946:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000948:	4b24      	ldr	r3, [pc, #144]	; (80009dc <MX_ADC3_Init+0xd8>)
 800094a:	2200      	movs	r2, #0
 800094c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_ADC3_Init+0xd8>)
 8000952:	2200      	movs	r2, #0
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_ADC3_Init+0xd8>)
 8000958:	2200      	movs	r2, #0
 800095a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_ADC3_Init+0xd8>)
 800095e:	2200      	movs	r2, #0
 8000960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000964:	4b1d      	ldr	r3, [pc, #116]	; (80009dc <MX_ADC3_Init+0xd8>)
 8000966:	2200      	movs	r2, #0
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_ADC3_Init+0xd8>)
 800096c:	2200      	movs	r2, #0
 800096e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000970:	4b1a      	ldr	r3, [pc, #104]	; (80009dc <MX_ADC3_Init+0xd8>)
 8000972:	2200      	movs	r2, #0
 8000974:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_ADC3_Init+0xd8>)
 8000978:	2200      	movs	r2, #0
 800097a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 800097c:	4b17      	ldr	r3, [pc, #92]	; (80009dc <MX_ADC3_Init+0xd8>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000984:	4815      	ldr	r0, [pc, #84]	; (80009dc <MX_ADC3_Init+0xd8>)
 8000986:	f004 fe23 	bl	80055d0 <HAL_ADC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000990:	f002 fd2c 	bl	80033ec <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000994:	4b13      	ldr	r3, [pc, #76]	; (80009e4 <MX_ADC3_Init+0xe0>)
 8000996:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000998:	2306      	movs	r3, #6
 800099a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 800099c:	2306      	movs	r3, #6
 800099e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009a0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009a4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009a6:	2304      	movs	r3, #4
 80009a8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009ae:	2300      	movs	r3, #0
 80009b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4806      	ldr	r0, [pc, #24]	; (80009dc <MX_ADC3_Init+0xd8>)
 80009c4:	f005 fba8 	bl	8006118 <HAL_ADC_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80009ce:	f002 fd0d 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	; 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000060 	.word	0x20000060
 80009e0:	58026000 	.word	0x58026000
 80009e4:	c7520000 	.word	0xc7520000

080009e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC3)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0e      	ldr	r2, [pc, #56]	; (8000a30 <HAL_ADC_MspInit+0x48>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d116      	bne.n	8000a28 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <HAL_ADC_MspInit+0x4c>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a0c      	ldr	r2, [pc, #48]	; (8000a34 <HAL_ADC_MspInit+0x4c>)
 8000a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <HAL_ADC_MspInit+0x4c>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	207f      	movs	r0, #127	; 0x7f
 8000a1e:	f006 fc20 	bl	8007262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000a22:	207f      	movs	r0, #127	; 0x7f
 8000a24:	f006 fc37 	bl	8007296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a28:	bf00      	nop
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	58026000 	.word	0x58026000
 8000a34:	58024400 	.word	0x58024400

08000a38 <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	683a      	ldr	r2, [r7, #0]
 8000a56:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	8b3a      	ldrh	r2, [r7, #24]
 8000a5c:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000a6c:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	4619      	mov	r1, r3
 8000a78:	4610      	mov	r0, r2
 8000a7a:	f00f fbd5 	bl	8010228 <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	2200      	movs	r2, #0
 8000a92:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a94:	bf00      	nop
 8000a96:	3710      	adds	r7, #16
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <Step_Driver>:


void Step_Driver(SteperParameter *step, float f_driver) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	ed87 0a00 	vstr	s0, [r7]
	float abs_f_driver = fabs(f_driver);
 8000aa8:	edd7 7a00 	vldr	s15, [r7]
 8000aac:	eef0 7ae7 	vabs.f32	s15, s15
 8000ab0:	edc7 7a03 	vstr	s15, [r7, #12]
	uint16_t reg_out;
	if (abs_f_driver <= 5) {
 8000ab4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ab8:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000abc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac4:	d80e      	bhi.n	8000ae4 <Step_Driver+0x48>
		reg_out = 20000;
 8000ac6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000aca:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = 20000;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8000ae2:	e033      	b.n	8000b4c <Step_Driver+0xb0>
	} else if (abs_f_driver < 25) {
 8000ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ae8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af4:	d50f      	bpl.n	8000b16 <Step_Driver+0x7a>
		reg_out = 20000;
 8000af6:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000afa:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	897a      	ldrh	r2, [r7, #10]
 8000b04:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000b06:	897b      	ldrh	r3, [r7, #10]
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	635a      	str	r2, [r3, #52]	; 0x34
 8000b14:	e01a      	b.n	8000b4c <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	89db      	ldrh	r3, [r3, #14]
 8000b1a:	ee07 3a90 	vmov	s15, r3
 8000b1e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b22:	ed97 7a03 	vldr	s14, [r7, #12]
 8000b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b2e:	ee17 3a90 	vmov	r3, s15
 8000b32:	817b      	strh	r3, [r7, #10]
		step->htim->Instance->ARR = reg_out;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	897a      	ldrh	r2, [r7, #10]
 8000b3c:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8000b3e:	897b      	ldrh	r3, [r7, #10]
 8000b40:	085b      	lsrs	r3, r3, #1
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 8000b4c:	edd7 7a00 	vldr	s15, [r7]
 8000b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b58:	db09      	blt.n	8000b6e <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6898      	ldr	r0, [r3, #8]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	8999      	ldrh	r1, [r3, #12]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7c1b      	ldrb	r3, [r3, #16]
 8000b66:	461a      	mov	r2, r3
 8000b68:	f009 f986 	bl	8009e78 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 8000b6c:	e00b      	b.n	8000b86 <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6898      	ldr	r0, [r3, #8]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	8999      	ldrh	r1, [r3, #12]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	7c1b      	ldrb	r3, [r3, #16]
 8000b7a:	f083 0301 	eor.w	r3, r3, #1
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	f009 f979 	bl	8009e78 <HAL_GPIO_WritePin>
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <Traj_Coeff_Cal>:
	uint16_t Pulse_in  =  (uint16_t)(((((int16_t)Deg)+90)*5.55555f) + 999);
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Deg);
}

void Traj_Coeff_Cal(TrajParameter *Traj, float T, float Pos_Final,
		float Pos_Now, float Vel_Now) {
 8000b8e:	b480      	push	{r7}
 8000b90:	b08d      	sub	sp, #52	; 0x34
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6178      	str	r0, [r7, #20]
 8000b96:	ed87 0a04 	vstr	s0, [r7, #16]
 8000b9a:	edc7 0a03 	vstr	s1, [r7, #12]
 8000b9e:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ba2:	edc7 1a01 	vstr	s3, [r7, #4]
	Traj->T = T;
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	619a      	str	r2, [r3, #24]
	float T_P2 = T * T;
 8000bac:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bb0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8000bb4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float T_P3 = T_P2 * T;
 8000bb8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000bbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bc4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float T_P4 = T_P3 * T;
 8000bc8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000bcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bd4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float T_P5 = T_P4 * T;
 8000bd8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000bdc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000be0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000be4:	edc7 7a08 	vstr	s15, [r7, #32]
	float ds = Pos_Now - Pos_Final;
 8000be8:	ed97 7a02 	vldr	s14, [r7, #8]
 8000bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8000bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bf4:	edc7 7a07 	vstr	s15, [r7, #28]
	float tfv0 = T * Vel_Now;
 8000bf8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c04:	edc7 7a06 	vstr	s15, [r7, #24]
	Traj->TrajCoef[0] = Pos_Now;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	68ba      	ldr	r2, [r7, #8]
 8000c0c:	601a      	str	r2, [r3, #0]
	Traj->TrajCoef[1] = Vel_Now;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	605a      	str	r2, [r3, #4]
	Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0)) / T_P3;
 8000c14:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c18:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000c1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c20:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c24:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8000c28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c30:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000c34:	eef1 6a67 	vneg.f32	s13, s15
 8000c38:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8000c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	edc3 7a03 	vstr	s15, [r3, #12]
	Traj->TrajCoef[4] = (15 * ds + 8 * tfv0) / T_P4;
 8000c46:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c4a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8000c4e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c52:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c56:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8000c5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c5e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000c62:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	edc3 7a04 	vstr	s15, [r3, #16]
	Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0)) / T_P5;
 8000c70:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c74:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8000c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c80:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000c84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c88:	eef1 6a67 	vneg.f32	s13, s15
 8000c8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8000c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8000c9a:	bf00      	nop
 8000c9c:	3734      	adds	r7, #52	; 0x34
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <TrajFollow>:
	Traj->TrajCoef[4] = ((15 * ds) + (8 * tfv0)) / T_P4;
	Traj->TrajCoef[5] = -(3 * ((2 * ds) + tfv0)) / T_P5;
}

void TrajFollow(TrajParameter *Traj, float traj_t[5], float *Position,
		float *Velocity) {
 8000ca6:	b480      	push	{r7}
 8000ca8:	b085      	sub	sp, #20
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	60f8      	str	r0, [r7, #12]
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	ed93 7a00 	vldr	s14, [r3]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	edd3 6a01 	vldr	s13, [r3, #4]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	edd3 7a00 	vldr	s15, [r3]
 8000cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cca:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	edd3 6a03 	vldr	s13, [r3, #12]
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	3308      	adds	r3, #8
 8000cd8:	edd3 7a00 	vldr	s15, [r3]
 8000cdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ce0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	edd3 6a04 	vldr	s13, [r3, #16]
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	330c      	adds	r3, #12
 8000cee:	edd3 7a00 	vldr	s15, [r3]
 8000cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000cf6:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (Traj->TrajCoef[5] * traj_t[4]);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	edd3 6a05 	vldr	s13, [r3, #20]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	3310      	adds	r3, #16
 8000d04:	edd3 7a00 	vldr	s15, [r3]
 8000d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	edc3 7a00 	vstr	s15, [r3]
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	edd3 7a01 	vldr	s15, [r3, #4]
 8000d1c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d2a:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000d2e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	3304      	adds	r3, #4
 8000d36:	edd3 7a00 	vldr	s15, [r3]
 8000d3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d3e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d42:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((4.0 * Traj->TrajCoef[4]) * traj_t[2])
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d50:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000d54:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3308      	adds	r3, #8
 8000d5c:	edd3 7a00 	vldr	s15, [r3]
 8000d60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d64:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d68:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((5.0 * Traj->TrajCoef[5]) * traj_t[3]);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d76:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8000d7a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000d7e:	68bb      	ldr	r3, [r7, #8]
 8000d80:	330c      	adds	r3, #12
 8000d82:	edd3 7a00 	vldr	s15, [r3]
 8000d86:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000d8e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d92:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	edc3 7a00 	vstr	s15, [r3]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6178      	str	r0, [r7, #20]
 8000db0:	ed87 0b02 	vstr	d0, [r7, #8]
 8000db4:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 8000db8:	ed97 7b02 	vldr	d7, [r7, #8]
 8000dbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	edc3 7a00 	vstr	s15, [r3]
	kalman->R = R; 			// Adjustable
 8000dc6:	ed97 7b00 	vldr	d7, [r7]
 8000dca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	edc3 7a01 	vstr	s15, [r3, #4]
	kalman->x1 = 0.0;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	f04f 0200 	mov.w	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
	kalman->x2 = 0.0;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	f04f 0200 	mov.w	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
	kalman->p11 = 0.05;
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <Kalman_init+0x60>)
 8000de8:	611a      	str	r2, [r3, #16]
	kalman->p12 = 0.05;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <Kalman_init+0x60>)
 8000dee:	615a      	str	r2, [r3, #20]
	kalman->p21 = 0.05;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <Kalman_init+0x60>)
 8000df4:	619a      	str	r2, [r3, #24]
	kalman->p22 = 0.05;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <Kalman_init+0x60>)
 8000dfa:	61da      	str	r2, [r3, #28]
}
 8000dfc:	bf00      	nop
 8000dfe:	371c      	adds	r7, #28
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	3d4ccccd 	.word	0x3d4ccccd
 8000e0c:	00000000 	.word	0x00000000

08000e10 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 8000e10:	b480      	push	{r7}
 8000e12:	b0a5      	sub	sp, #148	; 0x94
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e26:	ed9f 6bec 	vldr	d6, [pc, #944]	; 80011d8 <KalmanFilter+0x3c8>
 8000e2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e2e:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e3c:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80011d8 <KalmanFilter+0x3c8>
 8000e40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e44:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	edd3 7a00 	vldr	s15, [r3]
 8000e4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e52:	ed9f 6be3 	vldr	d6, [pc, #908]	; 80011e0 <KalmanFilter+0x3d0>
 8000e56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e5a:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 8000e5e:	a3e6      	add	r3, pc, #920	; (adr r3, 80011f8 <KalmanFilter+0x3e8>)
 8000e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e64:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 8000e68:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8000e6c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000e70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	edd3 7a07 	vldr	s15, [r3, #28]
 8000e7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e7e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000e82:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000e90:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000e94:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e9e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ea2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000ea6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000eaa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000eae:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8000eb2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000eb6:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8000eba:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ebe:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8000ec2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ec6:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 8000eca:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000ece:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ed8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000edc:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8000ee0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8000eea:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eee:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	edd3 7a04 	vldr	s15, [r3, #16]
 8000ef8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000efc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f00:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f04:	ed97 7b00 	vldr	d7, [r7]
 8000f08:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000f0c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f10:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8000f14:	ed97 7b00 	vldr	d7, [r7]
 8000f18:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000f1c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f2a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8000f2e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8000f32:	ed9f 5bad 	vldr	d5, [pc, #692]	; 80011e8 <KalmanFilter+0x3d8>
 8000f36:	ee27 5b05 	vmul.f64	d5, d7, d5
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000f48:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f4c:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8000f50:	ed97 7b00 	vldr	d7, [r7]
 8000f54:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000f58:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000f5c:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8000f60:	ed97 7b00 	vldr	d7, [r7]
 8000f64:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000f68:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8000f6c:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8000f70:	ed97 7b00 	vldr	d7, [r7]
 8000f74:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000f78:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8000f7c:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8000f80:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f84:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f92:	ed9f 6b95 	vldr	d6, [pc, #596]	; 80011e8 <KalmanFilter+0x3d8>
 8000f96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f9a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	edd3 7a00 	vldr	s15, [r3]
 8000fa4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fa8:	ed9f 6b91 	vldr	d6, [pc, #580]	; 80011f0 <KalmanFilter+0x3e0>
 8000fac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000fb0:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 8000fb4:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8000fb8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8000fbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000fc0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8000fc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fc8:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	edd3 7a06 	vldr	s15, [r3, #24]
 8000fd2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fd6:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 8000fda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000fde:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	edd3 7a06 	vldr	s15, [r3, #24]
 8000ffc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001000:	ed9f 5b79 	vldr	d5, [pc, #484]	; 80011e8 <KalmanFilter+0x3d8>
 8001004:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001008:	ee36 6b07 	vadd.f64	d6, d6, d7
 800100c:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8001010:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 8001014:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8001018:	ee36 6b07 	vadd.f64	d6, d6, d7
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001022:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001026:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800102a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800102e:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 80011e8 <KalmanFilter+0x3d8>
 8001032:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001036:	ee36 7b07 	vadd.f64	d7, d6, d7
 800103a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	edd3 7a03 	vldr	s15, [r3, #12]
 8001044:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	edd3 7a02 	vldr	s15, [r3, #8]
 800104e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001052:	ed97 7b00 	vldr	d7, [r7]
 8001056:	ee35 5b47 	vsub.f64	d5, d5, d7
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001060:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001064:	ed9f 4b60 	vldr	d4, [pc, #384]	; 80011e8 <KalmanFilter+0x3d8>
 8001068:	ee27 7b04 	vmul.f64	d7, d7, d4
 800106c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001070:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001074:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001078:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 800107c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001080:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001084:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	edd3 7a01 	vldr	s15, [r3, #4]
 800108e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	edd3 7a04 	vldr	s15, [r3, #16]
 8001098:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800109c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80010a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80010a4:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80010a8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80010ac:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80010b0:	ee35 5b07 	vadd.f64	d5, d5, d7
 80010b4:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80010b8:	ee35 5b07 	vadd.f64	d5, d5, d7
 80010bc:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80010c0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80010c4:	ee26 5b07 	vmul.f64	d5, d6, d7
 80010c8:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80010cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80010d0:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	edd3 7a07 	vldr	s15, [r3, #28]
 80010da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010de:	ee37 7b07 	vadd.f64	d7, d7, d7
 80010e2:	ed9f 6b41 	vldr	d6, [pc, #260]	; 80011e8 <KalmanFilter+0x3d8>
 80010e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80010ea:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80010ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010f2:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80010fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001100:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	edd3 7a05 	vldr	s15, [r3, #20]
 800110a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800110e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001112:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001116:	ee35 7b07 	vadd.f64	d7, d5, d7
 800111a:	ee26 5b07 	vmul.f64	d5, d6, d7
 800111e:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001122:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001126:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001130:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001134:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	edd3 7a06 	vldr	s15, [r3, #24]
 800113e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001142:	ee37 5b07 	vadd.f64	d5, d7, d7
 8001146:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800114a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800114e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001152:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001156:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800115a:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	edd3 7a07 	vldr	s15, [r3, #28]
 8001164:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	edd3 7a00 	vldr	s15, [r3]
 800116e:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001172:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001176:	ee25 7b07 	vmul.f64	d7, d5, d7
 800117a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	edd3 7a05 	vldr	s15, [r3, #20]
 8001184:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8001188:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800118c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001190:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001194:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001198:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 800119c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 80011a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80011a4:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 80011a8:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80011ac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	edc3 7a02 	vstr	s15, [r3, #8]
	kalman->x2 = xx2;
 80011b6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80011ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	edc3 7a03 	vstr	s15, [r3, #12]
	kalman->p11 = pp11;
 80011c4:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80011c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	edc3 7a04 	vstr	s15, [r3, #16]
 80011d2:	e015      	b.n	8001200 <KalmanFilter+0x3f0>
 80011d4:	f3af 8000 	nop.w
 80011d8:	47ae147b 	.word	0x47ae147b
 80011dc:	3f947ae1 	.word	0x3f947ae1
 80011e0:	e2308c3b 	.word	0xe2308c3b
 80011e4:	3e05798e 	.word	0x3e05798e
 80011e8:	47ae147b 	.word	0x47ae147b
 80011ec:	3f747ae1 	.word	0x3f747ae1
 80011f0:	a0b5ed8e 	.word	0xa0b5ed8e
 80011f4:	3e80c6f7 	.word	0x3e80c6f7
 80011f8:	eb1c432d 	.word	0xeb1c432d
 80011fc:	3efa36e2 	.word	0x3efa36e2
	kalman->p12 = pp12;
 8001200:	ed97 7b08 	vldr	d7, [r7, #32]
 8001204:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	edc3 7a05 	vstr	s15, [r3, #20]
	kalman->p21 = pp21;
 800120e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001212:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	edc3 7a06 	vstr	s15, [r3, #24]
	kalman->p22 = pp22;
 800121c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001220:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	edc3 7a07 	vstr	s15, [r3, #28]
}
 800122a:	bf00      	nop
 800122c:	3794      	adds	r7, #148	; 0x94
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop

08001238 <PID_init>:

void PID_init(PIDParameter *PID, float Kp, float Ki, float Kd) {
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	ed87 0a02 	vstr	s0, [r7, #8]
 8001244:	edc7 0a01 	vstr	s1, [r7, #4]
 8001248:	ed87 1a00 	vstr	s2, [r7]
	PID->Kp = Kp;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	68ba      	ldr	r2, [r7, #8]
 8001250:	601a      	str	r2, [r3, #0]
	PID->Ki = Ki;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	605a      	str	r2, [r3, #4]
	PID->Kd = Kd;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	609a      	str	r2, [r3, #8]
	PID->ITerm = 0;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
	PID->Setpoint = 0;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f04f 0200 	mov.w	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
	PID->Feedback = 0;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
	PID->Error[0] = 0;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	619a      	str	r2, [r3, #24]
	PID->Error[1] = 0;
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f04f 0200 	mov.w	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
	PID->Output = 0;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
}
 800128e:	bf00      	nop
 8001290:	3714      	adds	r7, #20
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <PID_Control>:

float PID_Control(PIDParameter *PID,float Setpoint,float Feedback){
 800129a:	b480      	push	{r7}
 800129c:	b085      	sub	sp, #20
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	ed87 0a02 	vstr	s0, [r7, #8]
 80012a6:	edc7 0a01 	vstr	s1, [r7, #4]
	PID->Feedback = Feedback; 	// Feedback Input
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	615a      	str	r2, [r3, #20]
	PID->Setpoint = Setpoint;	// Setpoint Input
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	611a      	str	r2, [r3, #16]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	ed93 7a04 	vldr	s14, [r3, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	edd3 7a05 	vldr	s15, [r3, #20]
 80012c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	edc3 7a06 	vstr	s15, [r3, #24]
	PID->ITerm += PID->Error[0];
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80012d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	edc3 7a03 	vstr	s15, [r3, #12]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	ed93 7a00 	vldr	s14, [r3]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	edd3 7a06 	vldr	s15, [r3, #24]
 80012ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80012fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001302:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ (PID->Kd * (PID->Error[0] - PID->Error[1])));
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	edd3 6a02 	vldr	s13, [r3, #8]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	ed93 6a06 	vldr	s12, [r3, #24]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	edd3 7a07 	vldr	s15, [r3, #28]
 8001318:	ee76 7a67 	vsub.f32	s15, s12, s15
 800131c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001320:	ee77 7a27 	vadd.f32	s15, s14, s15
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	edc3 7a08 	vstr	s15, [r3, #32]
	PID->Error[1] = PID->Error[0]; // Update Error
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	699a      	ldr	r2, [r3, #24]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	61da      	str	r2, [r3, #28]
	return PID->Output;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	ee07 3a90 	vmov	s15, r3
}
 800133a:	eeb0 0a67 	vmov.f32	s0, s15
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,float PosP,float PosI,float PosD,float VelP,float VelI,float VelD, float GFeed){
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	61f8      	str	r0, [r7, #28]
 8001350:	ed87 0a06 	vstr	s0, [r7, #24]
 8001354:	edc7 0a05 	vstr	s1, [r7, #20]
 8001358:	ed87 1a04 	vstr	s2, [r7, #16]
 800135c:	edc7 1a03 	vstr	s3, [r7, #12]
 8001360:	ed87 2a02 	vstr	s4, [r7, #8]
 8001364:	edc7 2a01 	vstr	s5, [r7, #4]
 8001368:	ed87 3a00 	vstr	s6, [r7]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	ed97 1a04 	vldr	s2, [r7, #16]
 8001372:	edd7 0a05 	vldr	s1, [r7, #20]
 8001376:	ed97 0a06 	vldr	s0, [r7, #24]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff ff5c 	bl	8001238 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	3330      	adds	r3, #48	; 0x30
 8001384:	ed97 1a01 	vldr	s2, [r7, #4]
 8001388:	edd7 0a02 	vldr	s1, [r7, #8]
 800138c:	ed97 0a03 	vldr	s0, [r7, #12]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff51 	bl	8001238 <PID_init>
	Control->Vel_Gfeed = GFeed;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		float Pos_Feed, float pos_set, float vel_set) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6178      	str	r0, [r7, #20]
 80013ac:	6139      	str	r1, [r7, #16]
 80013ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80013b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80013b6:	ed87 1a01 	vstr	s2, [r7, #4]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	625a      	str	r2, [r3, #36]	; 0x24
	Control->VelocitySetpoint = vel_set;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	655a      	str	r2, [r3, #84]	; 0x54

	/*Kalman Filter*/
	KalmanFilter(kalman, Pos_Feed); /*Kalman filter */
 80013c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013ce:	eeb0 0b47 	vmov.f64	d0, d7
 80013d2:	6938      	ldr	r0, [r7, #16]
 80013d4:	f7ff fd1c 	bl	8000e10 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	68da      	ldr	r2, [r3, #12]
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	65da      	str	r2, [r3, #92]	; 0x5c
	Control->PositionFeedback = kalman->x1;
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	629a      	str	r2, [r3, #40]	; 0x28

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80013f6:	eef0 0a47 	vmov.f32	s1, s14
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	4610      	mov	r0, r2
 8001400:	f7ff ff4b 	bl	800129a <PID_Control>
 8001404:	eef0 7a40 	vmov.f32	s15, s0
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->SumVelocityFeedForward = Control->PositionPIDOutput + Control->VelocitySetpoint;
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800141a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001436:	eef0 0a47 	vmov.f32	s1, s14
 800143a:	eeb0 0a67 	vmov.f32	s0, s15
 800143e:	4610      	mov	r0, r2
 8001440:	f7ff ff2b 	bl	800129a <PID_Control>
 8001444:	eef0 7a40 	vmov.f32	s15, s0
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			Control->SumVelocityFeedForward, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800145a:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ Control->VelocityPIDOutput;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
//	Control->Output = Control->VelocityPIDOutput;
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_CRC_Init+0x50>)
 800147e:	4a13      	ldr	r2, [pc, #76]	; (80014cc <MX_CRC_Init+0x54>)
 8001480:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_CRC_Init+0x50>)
 8001484:	2201      	movs	r2, #1
 8001486:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001488:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_CRC_Init+0x50>)
 800148a:	2201      	movs	r2, #1
 800148c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 800148e:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <MX_CRC_Init+0x50>)
 8001490:	221d      	movs	r2, #29
 8001492:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <MX_CRC_Init+0x50>)
 8001496:	2210      	movs	r2, #16
 8001498:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 800149a:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <MX_CRC_Init+0x50>)
 800149c:	22c4      	movs	r2, #196	; 0xc4
 800149e:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <MX_CRC_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	; (80014c8 <MX_CRC_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80014ac:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <MX_CRC_Init+0x50>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_CRC_Init+0x50>)
 80014b4:	f005 ff0a 	bl	80072cc <HAL_CRC_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 80014be:	f001 ff95 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000d0 	.word	0x200000d0
 80014cc:	58024c00 	.word	0x58024c00

080014d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0b      	ldr	r2, [pc, #44]	; (800150c <HAL_CRC_MspInit+0x3c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10e      	bne.n	8001500 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_CRC_MspInit+0x40>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	4a09      	ldr	r2, [pc, #36]	; (8001510 <HAL_CRC_MspInit+0x40>)
 80014ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_CRC_MspInit+0x40>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	58024c00 	.word	0x58024c00
 8001510:	58024400 	.word	0x58024400

08001514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800151a:	4b15      	ldr	r3, [pc, #84]	; (8001570 <MX_DMA_Init+0x5c>)
 800151c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001520:	4a13      	ldr	r2, [pc, #76]	; (8001570 <MX_DMA_Init+0x5c>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_DMA_Init+0x5c>)
 800152c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	200b      	movs	r0, #11
 800153e:	f005 fe90 	bl	8007262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001542:	200b      	movs	r0, #11
 8001544:	f005 fea7 	bl	8007296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001548:	2200      	movs	r2, #0
 800154a:	2100      	movs	r1, #0
 800154c:	200c      	movs	r0, #12
 800154e:	f005 fe88 	bl	8007262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001552:	200c      	movs	r0, #12
 8001554:	f005 fe9f 	bl	8007296 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	200d      	movs	r0, #13
 800155e:	f005 fe80 	bl	8007262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001562:	200d      	movs	r0, #13
 8001564:	f005 fe97 	bl	8007296 <HAL_NVIC_EnableIRQ>

}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	58024400 	.word	0x58024400

08001574 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_HS_DP
     PA15(JTDI)   ------> S_TIM2_CH1_ETR
     PB3(JTDO/TRACESWO)   ------> S_TIM2_CH2
*/
void MX_GPIO_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	; 0x30
 8001578:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800158a:	4ba2      	ldr	r3, [pc, #648]	; (8001814 <MX_GPIO_Init+0x2a0>)
 800158c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001590:	4aa0      	ldr	r2, [pc, #640]	; (8001814 <MX_GPIO_Init+0x2a0>)
 8001592:	f043 0310 	orr.w	r3, r3, #16
 8001596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159a:	4b9e      	ldr	r3, [pc, #632]	; (8001814 <MX_GPIO_Init+0x2a0>)
 800159c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a8:	4b9a      	ldr	r3, [pc, #616]	; (8001814 <MX_GPIO_Init+0x2a0>)
 80015aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ae:	4a99      	ldr	r2, [pc, #612]	; (8001814 <MX_GPIO_Init+0x2a0>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015b8:	4b96      	ldr	r3, [pc, #600]	; (8001814 <MX_GPIO_Init+0x2a0>)
 80015ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015be:	f003 0304 	and.w	r3, r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015c6:	4b93      	ldr	r3, [pc, #588]	; (8001814 <MX_GPIO_Init+0x2a0>)
 80015c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015cc:	4a91      	ldr	r2, [pc, #580]	; (8001814 <MX_GPIO_Init+0x2a0>)
 80015ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015d6:	4b8f      	ldr	r3, [pc, #572]	; (8001814 <MX_GPIO_Init+0x2a0>)
 80015d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e4:	4b8b      	ldr	r3, [pc, #556]	; (8001814 <MX_GPIO_Init+0x2a0>)
 80015e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ea:	4a8a      	ldr	r2, [pc, #552]	; (8001814 <MX_GPIO_Init+0x2a0>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f4:	4b87      	ldr	r3, [pc, #540]	; (8001814 <MX_GPIO_Init+0x2a0>)
 80015f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	4b84      	ldr	r3, [pc, #528]	; (8001814 <MX_GPIO_Init+0x2a0>)
 8001604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001608:	4a82      	ldr	r2, [pc, #520]	; (8001814 <MX_GPIO_Init+0x2a0>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001612:	4b80      	ldr	r3, [pc, #512]	; (8001814 <MX_GPIO_Init+0x2a0>)
 8001614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001620:	4b7c      	ldr	r3, [pc, #496]	; (8001814 <MX_GPIO_Init+0x2a0>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001626:	4a7b      	ldr	r2, [pc, #492]	; (8001814 <MX_GPIO_Init+0x2a0>)
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001630:	4b78      	ldr	r3, [pc, #480]	; (8001814 <MX_GPIO_Init+0x2a0>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 800163e:	2200      	movs	r2, #0
 8001640:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001644:	4874      	ldr	r0, [pc, #464]	; (8001818 <MX_GPIO_Init+0x2a4>)
 8001646:	f008 fc17 	bl	8009e78 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001650:	4872      	ldr	r0, [pc, #456]	; (800181c <MX_GPIO_Init+0x2a8>)
 8001652:	f008 fc11 	bl	8009e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	21c4      	movs	r1, #196	; 0xc4
 800165a:	4871      	ldr	r0, [pc, #452]	; (8001820 <MX_GPIO_Init+0x2ac>)
 800165c:	f008 fc0c 	bl	8009e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001666:	486f      	ldr	r0, [pc, #444]	; (8001824 <MX_GPIO_Init+0x2b0>)
 8001668:	f008 fc06 	bl	8009e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001672:	486a      	ldr	r0, [pc, #424]	; (800181c <MX_GPIO_Init+0x2a8>)
 8001674:	f008 fc00 	bl	8009e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001678:	2201      	movs	r2, #1
 800167a:	213f      	movs	r1, #63	; 0x3f
 800167c:	4869      	ldr	r0, [pc, #420]	; (8001824 <MX_GPIO_Init+0x2b0>)
 800167e:	f008 fbfb 	bl	8009e78 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001682:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001686:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001694:	f107 031c 	add.w	r3, r7, #28
 8001698:	4619      	mov	r1, r3
 800169a:	485f      	ldr	r0, [pc, #380]	; (8001818 <MX_GPIO_Init+0x2a4>)
 800169c:	f008 fa44 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80016a0:	f24e 032f 	movw	r3, #57391	; 0xe02f
 80016a4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a6:	2303      	movs	r3, #3
 80016a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4859      	ldr	r0, [pc, #356]	; (800181c <MX_GPIO_Init+0x2a8>)
 80016b6:	f008 fa37 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80016ba:	233c      	movs	r3, #60	; 0x3c
 80016bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016be:	2303      	movs	r3, #3
 80016c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	4856      	ldr	r0, [pc, #344]	; (8001828 <MX_GPIO_Init+0x2b4>)
 80016ce:	f008 fa2b 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 80016d2:	f44f 7344 	mov.w	r3, #784	; 0x310
 80016d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d8:	2301      	movs	r3, #1
 80016da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	484c      	ldr	r0, [pc, #304]	; (800181c <MX_GPIO_Init+0x2a8>)
 80016ec:	f008 fa1c 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016f4:	2303      	movs	r3, #3
 80016f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	4847      	ldr	r0, [pc, #284]	; (8001820 <MX_GPIO_Init+0x2ac>)
 8001704:	f008 fa10 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 8001708:	2302      	movs	r3, #2
 800170a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800170c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 8001716:	f107 031c 	add.w	r3, r7, #28
 800171a:	4619      	mov	r1, r3
 800171c:	4840      	ldr	r0, [pc, #256]	; (8001820 <MX_GPIO_Init+0x2ac>)
 800171e:	f008 fa03 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001722:	23c4      	movs	r3, #196	; 0xc4
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001726:	2301      	movs	r3, #1
 8001728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172e:	2300      	movs	r3, #0
 8001730:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	4839      	ldr	r0, [pc, #228]	; (8001820 <MX_GPIO_Init+0x2ac>)
 800173a:	f008 f9f5 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800173e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001744:	2303      	movs	r3, #3
 8001746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800174c:	f107 031c 	add.w	r3, r7, #28
 8001750:	4619      	mov	r1, r3
 8001752:	4831      	ldr	r0, [pc, #196]	; (8001818 <MX_GPIO_Init+0x2a4>)
 8001754:	f008 f9e8 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 8001758:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800175c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800175e:	2303      	movs	r3, #3
 8001760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	482d      	ldr	r0, [pc, #180]	; (8001824 <MX_GPIO_Init+0x2b0>)
 800176e:	f008 f9db 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001772:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001776:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	4826      	ldr	r0, [pc, #152]	; (8001824 <MX_GPIO_Init+0x2b0>)
 800178c:	f008 f9cc 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4820      	ldr	r0, [pc, #128]	; (8001828 <MX_GPIO_Init+0x2b4>)
 80017a6:	f008 f9bf 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	4819      	ldr	r0, [pc, #100]	; (8001828 <MX_GPIO_Init+0x2b4>)
 80017c4:	f008 f9b0 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6A_Pin;
 80017c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017da:	2301      	movs	r3, #1
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 031c 	add.w	r3, r7, #28
 80017e2:	4619      	mov	r1, r3
 80017e4:	4810      	ldr	r0, [pc, #64]	; (8001828 <MX_GPIO_Init+0x2b4>)
 80017e6:	f008 f99f 	bl	8009b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6B_Pin;
 80017ea:	2308      	movs	r3, #8
 80017ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017fa:	2301      	movs	r3, #1
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 80017fe:	f107 031c 	add.w	r3, r7, #28
 8001802:	4619      	mov	r1, r3
 8001804:	4806      	ldr	r0, [pc, #24]	; (8001820 <MX_GPIO_Init+0x2ac>)
 8001806:	f008 f98f 	bl	8009b28 <HAL_GPIO_Init>

}
 800180a:	bf00      	nop
 800180c:	3730      	adds	r7, #48	; 0x30
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	58024400 	.word	0x58024400
 8001818:	58021000 	.word	0x58021000
 800181c:	58020800 	.word	0x58020800
 8001820:	58020400 	.word	0x58020400
 8001824:	58020c00 	.word	0x58020c00
 8001828:	58020000 	.word	0x58020000

0800182c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <MX_I2C2_Init+0x78>)
 8001834:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001838:	4a1b      	ldr	r2, [pc, #108]	; (80018a8 <MX_I2C2_Init+0x7c>)
 800183a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <MX_I2C2_Init+0x74>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001844:	2201      	movs	r2, #1
 8001846:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <MX_I2C2_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_I2C2_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001866:	480e      	ldr	r0, [pc, #56]	; (80018a0 <MX_I2C2_Init+0x74>)
 8001868:	f008 fb3a 	bl	8009ee0 <HAL_I2C_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001872:	f001 fdbb 	bl	80033ec <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001876:	2100      	movs	r1, #0
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <MX_I2C2_Init+0x74>)
 800187a:	f00a fa45 	bl	800bd08 <HAL_I2CEx_ConfigAnalogFilter>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001884:	f001 fdb2 	bl	80033ec <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001888:	2100      	movs	r1, #0
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <MX_I2C2_Init+0x74>)
 800188c:	f00a fa87 	bl	800bd9e <HAL_I2CEx_ConfigDigitalFilter>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001896:	f001 fda9 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800189a:	bf00      	nop
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	200000f4 	.word	0x200000f4
 80018a4:	40005800 	.word	0x40005800
 80018a8:	60404e72 	.word	0x60404e72

080018ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b0b6      	sub	sp, #216	; 0xd8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
 80018be:	609a      	str	r2, [r3, #8]
 80018c0:	60da      	str	r2, [r3, #12]
 80018c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	22b4      	movs	r2, #180	; 0xb4
 80018ca:	2100      	movs	r1, #0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f012 fe7f 	bl	80145d0 <memset>
  if(i2cHandle->Instance==I2C2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a29      	ldr	r2, [pc, #164]	; (800197c <HAL_I2C_MspInit+0xd0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d14a      	bne.n	8001972 <HAL_I2C_MspInit+0xc6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018dc:	2308      	movs	r3, #8
 80018de:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	4618      	mov	r0, r3
 80018ec:	f00b fa16 	bl	800cd1c <HAL_RCCEx_PeriphCLKConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80018f6:	f001 fd79 	bl	80033ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_I2C_MspInit+0xd4>)
 80018fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001900:	4a1f      	ldr	r2, [pc, #124]	; (8001980 <HAL_I2C_MspInit+0xd4>)
 8001902:	f043 0302 	orr.w	r3, r3, #2
 8001906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <HAL_I2C_MspInit+0xd4>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001918:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800191c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001920:	2312      	movs	r3, #18
 8001922:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001926:	2301      	movs	r3, #1
 8001928:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001932:	2304      	movs	r3, #4
 8001934:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800193c:	4619      	mov	r1, r3
 800193e:	4811      	ldr	r0, [pc, #68]	; (8001984 <HAL_I2C_MspInit+0xd8>)
 8001940:	f008 f8f2 	bl	8009b28 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_I2C_MspInit+0xd4>)
 8001946:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <HAL_I2C_MspInit+0xd4>)
 800194c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001950:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_I2C_MspInit+0xd4>)
 8001956:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	2022      	movs	r0, #34	; 0x22
 8001968:	f005 fc7b 	bl	8007262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800196c:	2022      	movs	r0, #34	; 0x22
 800196e:	f005 fc92 	bl	8007296 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001972:	bf00      	nop
 8001974:	37d8      	adds	r7, #216	; 0xd8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40005800 	.word	0x40005800
 8001980:	58024400 	.word	0x58024400
 8001984:	58020400 	.word	0x58020400

08001988 <IVK>:
 */

//Kinematics_StatusTypeDef IVK(float q[3], float chi_dot[3], float qv[4])

Kinematics_StatusTypeDef IVK(float q[4], float chi_dot[3], float qv[4])
{
 8001988:	b580      	push	{r7, lr}
 800198a:	ed2d 8b04 	vpush	{d8-d9}
 800198e:	b096      	sub	sp, #88	; 0x58
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  float qvbar_idx_1;
  float qvbar_idx_2;
  int r1;
  int r2;
  int rtemp;
  qvbar_idx_1 = q[1] + q[2];
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3304      	adds	r3, #4
 800199c:	ed93 7a00 	vldr	s14, [r3]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3308      	adds	r3, #8
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ac:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_2 = sin(qvbar_idx_1);
 80019b0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80019b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019b8:	eeb0 0b47 	vmov.f64	d0, d7
 80019bc:	f012 fe58 	bl	8014670 <sin>
 80019c0:	eeb0 7b40 	vmov.f64	d7, d0
 80019c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019c8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  Jv4_tmp = cos(q[0]);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	edd3 7a00 	vldr	s15, [r3]
 80019d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019d6:	eeb0 0b47 	vmov.f64	d0, d7
 80019da:	f012 fe01 	bl	80145e0 <cos>
 80019de:	eeb0 7b40 	vmov.f64	d7, d0
 80019e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019e6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
  b_Jv4_tmp = sin(q[0]);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edd3 7a00 	vldr	s15, [r3]
 80019f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019f4:	eeb0 0b47 	vmov.f64	d0, d7
 80019f8:	f012 fe3a 	bl	8014670 <sin>
 80019fc:	eeb0 7b40 	vmov.f64	d7, d0
 8001a00:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a04:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  qvbar_idx_1 = 380.0 * cos(qvbar_idx_1);
 8001a08:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a0c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a10:	eeb0 0b47 	vmov.f64	d0, d7
 8001a14:	f012 fde4 	bl	80145e0 <cos>
 8001a18:	eeb0 7b40 	vmov.f64	d7, d0
 8001a1c:	ed9f 6bd6 	vldr	d6, [pc, #856]	; 8001d78 <IVK+0x3f0>
 8001a20:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a24:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a28:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  Jv4_tmp_tmp = 380.0 * sin(q[1]);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a38:	eeb0 0b47 	vmov.f64	d0, d7
 8001a3c:	f012 fe18 	bl	8014670 <sin>
 8001a40:	eeb0 7b40 	vmov.f64	d7, d0
 8001a44:	ed9f 6bcc 	vldr	d6, [pc, #816]	; 8001d78 <IVK+0x3f0>
 8001a48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001a4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a50:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  c_Jv4_tmp = (qvbar_idx_1 + 20.0) - Jv4_tmp_tmp;
 8001a54:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001a58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a5c:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8001a60:	ee37 6b06 	vadd.f64	d6, d7, d6
 8001a64:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001a68:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a6c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a74:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
  Jv4[0] = -b_Jv4_tmp * c_Jv4_tmp;
 8001a78:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001a7c:	eeb1 7a67 	vneg.f32	s14, s15
 8001a80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a88:	edc7 7a04 	vstr	s15, [r7, #16]
  Jv4[3] = -Jv4_tmp * (380.0 * qvbar_idx_2 + 380.0 * cos(q[1]));
 8001a8c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001a90:	eef1 7a67 	vneg.f32	s15, s15
 8001a94:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001a98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001a9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001aa0:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 8001d78 <IVK+0x3f0>
 8001aa4:	ee27 9b06 	vmul.f64	d9, d7, d6
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	3304      	adds	r3, #4
 8001aac:	edd3 7a00 	vldr	s15, [r3]
 8001ab0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ab4:	eeb0 0b47 	vmov.f64	d0, d7
 8001ab8:	f012 fd92 	bl	80145e0 <cos>
 8001abc:	eeb0 7b40 	vmov.f64	d7, d0
 8001ac0:	ed9f 6bad 	vldr	d6, [pc, #692]	; 8001d78 <IVK+0x3f0>
 8001ac4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ac8:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001acc:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001ad0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001ad4:	edc7 7a07 	vstr	s15, [r7, #28]
  Jv4[6] = -380.0 * qvbar_idx_2 * Jv4_tmp;
 8001ad8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001adc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ae0:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 8001d80 <IVK+0x3f8>
 8001ae4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ae8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001aec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001af0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001af4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001af8:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
  Jv4[1] = Jv4_tmp * c_Jv4_tmp;
 8001afc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001b00:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b08:	edc7 7a05 	vstr	s15, [r7, #20]
  Jv4[4] = -sin(q[0]) * (380.0 * sin(q[1] + q[2]) + 380.0 * cos(q[1]));
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	edd3 7a00 	vldr	s15, [r3]
 8001b12:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b16:	eeb0 0b47 	vmov.f64	d0, d7
 8001b1a:	f012 fda9 	bl	8014670 <sin>
 8001b1e:	eeb0 7b40 	vmov.f64	d7, d0
 8001b22:	eeb1 8b47 	vneg.f64	d8, d7
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	ed93 7a00 	vldr	s14, [r3]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	3308      	adds	r3, #8
 8001b32:	edd3 7a00 	vldr	s15, [r3]
 8001b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b3e:	eeb0 0b47 	vmov.f64	d0, d7
 8001b42:	f012 fd95 	bl	8014670 <sin>
 8001b46:	eeb0 7b40 	vmov.f64	d7, d0
 8001b4a:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 8001d78 <IVK+0x3f0>
 8001b4e:	ee27 9b06 	vmul.f64	d9, d7, d6
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3304      	adds	r3, #4
 8001b56:	edd3 7a00 	vldr	s15, [r3]
 8001b5a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b5e:	eeb0 0b47 	vmov.f64	d0, d7
 8001b62:	f012 fd3d 	bl	80145e0 <cos>
 8001b66:	eeb0 7b40 	vmov.f64	d7, d0
 8001b6a:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8001d78 <IVK+0x3f0>
 8001b6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b72:	ee39 7b07 	vadd.f64	d7, d9, d7
 8001b76:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001b7a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b7e:	edc7 7a08 	vstr	s15, [r7, #32]
  Jv4[7] = -380.0 * sin(q[1] + q[2]) * b_Jv4_tmp;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3304      	adds	r3, #4
 8001b86:	ed93 7a00 	vldr	s14, [r3]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	3308      	adds	r3, #8
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b9a:	eeb0 0b47 	vmov.f64	d0, d7
 8001b9e:	f012 fd67 	bl	8014670 <sin>
 8001ba2:	eeb0 7b40 	vmov.f64	d7, d0
 8001ba6:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8001d80 <IVK+0x3f8>
 8001baa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001bae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001bb2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bb6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001bba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bbe:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  Jv4[2] = 0.0;
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	61bb      	str	r3, [r7, #24]
  Jv4[5] = qvbar_idx_1 - Jv4_tmp_tmp;
 8001bc8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001bcc:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001bd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Jv4[8] = qvbar_idx_1;
 8001bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
  r1 = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	657b      	str	r3, [r7, #84]	; 0x54
  r2 = 1;
 8001be0:	2301      	movs	r3, #1
 8001be2:	653b      	str	r3, [r7, #80]	; 0x50
  rtemp = 2;
 8001be4:	2302      	movs	r3, #2
 8001be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (fabs(Jv4[1]) > fabs(Jv4[0])) {
 8001be8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bec:	eeb0 7ae7 	vabs.f32	s14, s15
 8001bf0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bf4:	eef0 7ae7 	vabs.f32	s15, s15
 8001bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	dd03      	ble.n	8001c0a <IVK+0x282>
    r1 = 1;
 8001c02:	2301      	movs	r3, #1
 8001c04:	657b      	str	r3, [r7, #84]	; 0x54
    r2 = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	653b      	str	r3, [r7, #80]	; 0x50
  }
  Jv4[r2] /= Jv4[r1];
 8001c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001c12:	4413      	add	r3, r2
 8001c14:	3b48      	subs	r3, #72	; 0x48
 8001c16:	edd3 6a00 	vldr	s13, [r3]
 8001c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001c22:	4413      	add	r3, r2
 8001c24:	3b48      	subs	r3, #72	; 0x48
 8001c26:	ed93 7a00 	vldr	s14, [r3]
 8001c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001c36:	4413      	add	r3, r2
 8001c38:	3b48      	subs	r3, #72	; 0x48
 8001c3a:	edc3 7a00 	vstr	s15, [r3]
  Jv4[2] = 0.0 / Jv4[r1];
 8001c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001c46:	4413      	add	r3, r2
 8001c48:	3b48      	subs	r3, #72	; 0x48
 8001c4a:	ed93 7a00 	vldr	s14, [r3]
 8001c4e:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8001d88 <IVK+0x400>
 8001c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c56:	edc7 7a06 	vstr	s15, [r7, #24]
  Jv4[r2 + 3] -= Jv4[r2] * Jv4[r1 + 3];
 8001c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c5c:	3303      	adds	r3, #3
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001c64:	4413      	add	r3, r2
 8001c66:	3b48      	subs	r3, #72	; 0x48
 8001c68:	ed93 7a00 	vldr	s14, [r3]
 8001c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001c74:	4413      	add	r3, r2
 8001c76:	3b48      	subs	r3, #72	; 0x48
 8001c78:	edd3 6a00 	vldr	s13, [r3]
 8001c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c7e:	3303      	adds	r3, #3
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001c86:	4413      	add	r3, r2
 8001c88:	3b48      	subs	r3, #72	; 0x48
 8001c8a:	edd3 7a00 	vldr	s15, [r3]
 8001c8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c94:	3303      	adds	r3, #3
 8001c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3b48      	subs	r3, #72	; 0x48
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
  Jv4[5] -= Jv4[2] * Jv4[r1 + 3];
 8001ca8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001cac:	edd7 6a06 	vldr	s13, [r7, #24]
 8001cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb2:	3303      	adds	r3, #3
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001cba:	4413      	add	r3, r2
 8001cbc:	3b48      	subs	r3, #72	; 0x48
 8001cbe:	edd3 7a00 	vldr	s15, [r3]
 8001cc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cca:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  Jv4[r2 + 6] -= Jv4[r2] * Jv4[r1 + 6];
 8001cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cd0:	3306      	adds	r3, #6
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b48      	subs	r3, #72	; 0x48
 8001cdc:	ed93 7a00 	vldr	s14, [r3]
 8001ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b48      	subs	r3, #72	; 0x48
 8001cec:	edd3 6a00 	vldr	s13, [r3]
 8001cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cf2:	3306      	adds	r3, #6
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001cfa:	4413      	add	r3, r2
 8001cfc:	3b48      	subs	r3, #72	; 0x48
 8001cfe:	edd3 7a00 	vldr	s15, [r3]
 8001d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d08:	3306      	adds	r3, #6
 8001d0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d14:	4413      	add	r3, r2
 8001d16:	3b48      	subs	r3, #72	; 0x48
 8001d18:	edc3 7a00 	vstr	s15, [r3]
  Jv4[8] -= Jv4[2] * Jv4[r1 + 6];
 8001d1c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001d20:	edd7 6a06 	vldr	s13, [r7, #24]
 8001d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d26:	3306      	adds	r3, #6
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d2e:	4413      	add	r3, r2
 8001d30:	3b48      	subs	r3, #72	; 0x48
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
  if (fabs(Jv4[5]) > fabs(Jv4[r2 + 3])) {
 8001d42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d46:	eeb0 7ae7 	vabs.f32	s14, s15
 8001d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d4c:	3303      	adds	r3, #3
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d54:	4413      	add	r3, r2
 8001d56:	3b48      	subs	r3, #72	; 0x48
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	eef0 7ae7 	vabs.f32	s15, s15
 8001d60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d68:	dd10      	ble.n	8001d8c <IVK+0x404>
    rtemp = r2;
 8001d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    r2 = 2;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	653b      	str	r3, [r7, #80]	; 0x50
 8001d72:	e00b      	b.n	8001d8c <IVK+0x404>
 8001d74:	f3af 8000 	nop.w
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	4077c000 	.word	0x4077c000
 8001d80:	00000000 	.word	0x00000000
 8001d84:	c077c000 	.word	0xc077c000
 8001d88:	00000000 	.word	0x00000000
  }
  Jv4[rtemp + 3] /= Jv4[r2 + 3];
 8001d8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d8e:	3303      	adds	r3, #3
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001d96:	4413      	add	r3, r2
 8001d98:	3b48      	subs	r3, #72	; 0x48
 8001d9a:	edd3 6a00 	vldr	s13, [r3]
 8001d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001da0:	3303      	adds	r3, #3
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001da8:	4413      	add	r3, r2
 8001daa:	3b48      	subs	r3, #72	; 0x48
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001db2:	3303      	adds	r3, #3
 8001db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b48      	subs	r3, #72	; 0x48
 8001dc2:	edc3 7a00 	vstr	s15, [r3]
  Jv4[rtemp + 6] -= Jv4[rtemp + 3] * Jv4[r2 + 6];
 8001dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dc8:	3306      	adds	r3, #6
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001dd0:	4413      	add	r3, r2
 8001dd2:	3b48      	subs	r3, #72	; 0x48
 8001dd4:	ed93 7a00 	vldr	s14, [r3]
 8001dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dda:	3303      	adds	r3, #3
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001de2:	4413      	add	r3, r2
 8001de4:	3b48      	subs	r3, #72	; 0x48
 8001de6:	edd3 6a00 	vldr	s13, [r3]
 8001dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dec:	3306      	adds	r3, #6
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001df4:	4413      	add	r3, r2
 8001df6:	3b48      	subs	r3, #72	; 0x48
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e02:	3306      	adds	r3, #6
 8001e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001e0e:	4413      	add	r3, r2
 8001e10:	3b48      	subs	r3, #72	; 0x48
 8001e12:	edc3 7a00 	vstr	s15, [r3]
  qvbar_idx_1 = chi_dot[r2] - chi_dot[r1] * Jv4[r2];
 8001e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	ed93 7a00 	vldr	s14, [r3]
 8001e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4413      	add	r3, r2
 8001e2a:	edd3 6a00 	vldr	s13, [r3]
 8001e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001e36:	4413      	add	r3, r2
 8001e38:	3b48      	subs	r3, #72	; 0x48
 8001e3a:	edd3 7a00 	vldr	s15, [r3]
 8001e3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e46:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8001e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	4413      	add	r3, r2
 8001e52:	ed93 7a00 	vldr	s14, [r3]
 8001e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	edd3 6a00 	vldr	s13, [r3]
 8001e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b48      	subs	r3, #72	; 0x48
 8001e6e:	edd3 7a00 	vldr	s15, [r3]
 8001e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e76:	ee37 7a67 	vsub.f32	s14, s14, s15
                 qvbar_idx_1 * Jv4[rtemp + 3]) /
 8001e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001e84:	4413      	add	r3, r2
 8001e86:	3b48      	subs	r3, #72	; 0x48
 8001e88:	edd3 6a00 	vldr	s13, [r3]
 8001e8c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e90:	ee66 7aa7 	vmul.f32	s15, s13, s15
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8001e94:	ee77 6a67 	vsub.f32	s13, s14, s15
                Jv4[rtemp + 6];
 8001e98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e9a:	3306      	adds	r3, #6
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b48      	subs	r3, #72	; 0x48
 8001ea6:	ed93 7a00 	vldr	s14, [r3]
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8001eaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eae:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
  qvbar_idx_1 -= qvbar_idx_2 * Jv4[r2 + 6];
 8001eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb4:	3306      	adds	r3, #6
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3b48      	subs	r3, #72	; 0x48
 8001ec0:	ed93 7a00 	vldr	s14, [r3]
 8001ec4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ec8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ecc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qvbar_idx_1 /= Jv4[r2 + 3];
 8001ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eda:	3303      	adds	r3, #3
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b48      	subs	r3, #72	; 0x48
 8001ee6:	ed93 7a00 	vldr	s14, [r3]
 8001eea:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 8001eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ef2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
  qv[0] =
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8001ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	4413      	add	r3, r2
 8001efe:	ed93 7a00 	vldr	s14, [r3]
 8001f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f04:	3306      	adds	r3, #6
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b48      	subs	r3, #72	; 0x48
 8001f10:	edd3 6a00 	vldr	s13, [r3]
 8001f14:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f22:	3303      	adds	r3, #3
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b48      	subs	r3, #72	; 0x48
 8001f2e:	edd3 6a00 	vldr	s13, [r3]
 8001f32:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f3a:	ee77 6a67 	vsub.f32	s13, s14, s15
      Jv4[r1];
 8001f3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001f46:	4413      	add	r3, r2
 8001f48:	3b48      	subs	r3, #72	; 0x48
 8001f4a:	ed93 7a00 	vldr	s14, [r3]
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8001f4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
  qv[0] =
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	edc3 7a00 	vstr	s15, [r3]
  qv[1] = qvbar_idx_1;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f5e:	601a      	str	r2, [r3, #0]
  qv[2] = qvbar_idx_2;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3308      	adds	r3, #8
 8001f64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f66:	601a      	str	r2, [r3, #0]
  qv[3] = -qvbar_idx_1 - qvbar_idx_2;
 8001f68:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001f6c:	eeb1 7a67 	vneg.f32	s14, s15
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	330c      	adds	r3, #12
 8001f74:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7c:	edc3 7a00 	vstr	s15, [r3]
  return Kinematics_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3758      	adds	r7, #88	; 0x58
 8001f86:	46bd      	mov	sp, r7
 8001f88:	ecbd 8b04 	vpop	{d8-d9}
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop

08001f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f96:	f002 ff8f 	bl	8004eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f9a:	f000 fa3d 	bl	8002418 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f9e:	f000 fab3 	bl	8002508 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fa2:	f7ff fae7 	bl	8001574 <MX_GPIO_Init>
  MX_DMA_Init();
 8001fa6:	f7ff fab5 	bl	8001514 <MX_DMA_Init>
  MX_ADC3_Init();
 8001faa:	f7fe fcab 	bl	8000904 <MX_ADC3_Init>
  MX_TIM1_Init();
 8001fae:	f001 fc97 	bl	80038e0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001fb2:	f001 fd25 	bl	8003a00 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001fb6:	f001 fd9b 	bl	8003af0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001fba:	f001 fdef 	bl	8003b9c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001fbe:	f001 fea9 	bl	8003d14 <MX_TIM8_Init>
  MX_TIM13_Init();
 8001fc2:	f001 ff01 	bl	8003dc8 <MX_TIM13_Init>
  MX_TIM14_Init();
 8001fc6:	f001 ff4f 	bl	8003e68 <MX_TIM14_Init>
  MX_TIM15_Init();
 8001fca:	f001 ff9d 	bl	8003f08 <MX_TIM15_Init>
  MX_TIM16_Init();
 8001fce:	f002 f823 	bl	8004018 <MX_TIM16_Init>
  MX_TIM17_Init();
 8001fd2:	f002 f89d 	bl	8004110 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001fd6:	f002 fd7b 	bl	8004ad0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001fda:	f002 fdc7 	bl	8004b6c <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8001fde:	f001 fa0b 	bl	80033f8 <MX_SPI3_Init>
  MX_SPI4_Init();
 8001fe2:	f001 fa61 	bl	80034a8 <MX_SPI4_Init>
  MX_I2C2_Init();
 8001fe6:	f7ff fc21 	bl	800182c <MX_I2C2_Init>
  MX_CRC_Init();
 8001fea:	f7ff fa45 	bl	8001478 <MX_CRC_Init>
  MX_TIM24_Init();
 8001fee:	f002 f95b 	bl	80042a8 <MX_TIM24_Init>
  MX_TIM23_Init();
 8001ff2:	f002 f909 	bl	8004208 <MX_TIM23_Init>
  MX_TIM6_Init();
 8001ff6:	f001 fe55 	bl	8003ca4 <MX_TIM6_Init>
  MX_UART5_Init();
 8001ffa:	f002 fd17 	bl	8004a2c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  	MX_DMA_Init();
 8001ffe:	f7ff fa89 	bl	8001514 <MX_DMA_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 8002002:	2201      	movs	r2, #1
 8002004:	2140      	movs	r1, #64	; 0x40
 8002006:	48c2      	ldr	r0, [pc, #776]	; (8002310 <main+0x380>)
 8002008:	f007 ff36 	bl	8009e78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 800200c:	2201      	movs	r2, #1
 800200e:	2140      	movs	r1, #64	; 0x40
 8002010:	48c0      	ldr	r0, [pc, #768]	; (8002314 <main+0x384>)
 8002012:	f007 ff31 	bl	8009e78 <HAL_GPIO_WritePin>

	Temp_Calibration = (110.0 - 30.0)	/ (*(unsigned short*) (0x1FF1E840) - *(unsigned short*) (0x1FF1E820));
 8002016:	4bc0      	ldr	r3, [pc, #768]	; (8002318 <main+0x388>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	4bbf      	ldr	r3, [pc, #764]	; (800231c <main+0x38c>)
 800201e:	881b      	ldrh	r3, [r3, #0]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800202a:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 80022f8 <main+0x368>
 800202e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002032:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002036:	4bba      	ldr	r3, [pc, #744]	; (8002320 <main+0x390>)
 8002038:	edc3 7a00 	vstr	s15, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 800203c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002040:	2100      	movs	r1, #0
 8002042:	48b8      	ldr	r0, [pc, #736]	; (8002324 <main+0x394>)
 8002044:	f004 ff9c 	bl	8006f80 <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0,6500);
 8002048:	2301      	movs	r3, #1
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8002328 <main+0x398>
 8002050:	4bb6      	ldr	r3, [pc, #728]	; (800232c <main+0x39c>)
 8002052:	4aaf      	ldr	r2, [pc, #700]	; (8002310 <main+0x380>)
 8002054:	49b6      	ldr	r1, [pc, #728]	; (8002330 <main+0x3a0>)
 8002056:	48b7      	ldr	r0, [pc, #732]	; (8002334 <main+0x3a4>)
 8002058:	f7fe faf8 	bl	800064c <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1,7500);
 800205c:	2302      	movs	r3, #2
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8002338 <main+0x3a8>
 8002064:	4bb1      	ldr	r3, [pc, #708]	; (800232c <main+0x39c>)
 8002066:	4aaa      	ldr	r2, [pc, #680]	; (8002310 <main+0x380>)
 8002068:	49b1      	ldr	r1, [pc, #708]	; (8002330 <main+0x3a0>)
 800206a:	48b4      	ldr	r0, [pc, #720]	; (800233c <main+0x3ac>)
 800206c:	f7fe faee 	bl	800064c <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2,2982);
 8002070:	2304      	movs	r3, #4
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8002340 <main+0x3b0>
 8002078:	4bac      	ldr	r3, [pc, #688]	; (800232c <main+0x39c>)
 800207a:	4aa5      	ldr	r2, [pc, #660]	; (8002310 <main+0x380>)
 800207c:	49ac      	ldr	r1, [pc, #688]	; (8002330 <main+0x3a0>)
 800207e:	48b1      	ldr	r0, [pc, #708]	; (8002344 <main+0x3b4>)
 8002080:	f7fe fae4 	bl	800064c <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3,5000);
 8002084:	2308      	movs	r3, #8
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8002348 <main+0x3b8>
 800208c:	4ba7      	ldr	r3, [pc, #668]	; (800232c <main+0x39c>)
 800208e:	4aa0      	ldr	r2, [pc, #640]	; (8002310 <main+0x380>)
 8002090:	49a7      	ldr	r1, [pc, #668]	; (8002330 <main+0x3a0>)
 8002092:	48ae      	ldr	r0, [pc, #696]	; (800234c <main+0x3bc>)
 8002094:	f7fe fada 	bl	800064c <AS5047U_init>

	HAL_Delay(50);
 8002098:	2032      	movs	r0, #50	; 0x32
 800209a:	f002 ff9f 	bl	8004fdc <HAL_Delay>
//	AS5047U_Write(&Encoder[0], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[1], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[2], 0x0019, 0b00100000);
//	AS5047U_Write(&Encoder[3], 0x0019, 0b00100000);

	AS5047U_Write(&Encoder[0], 0x001A, 0b01000000);
 800209e:	2240      	movs	r2, #64	; 0x40
 80020a0:	211a      	movs	r1, #26
 80020a2:	48a4      	ldr	r0, [pc, #656]	; (8002334 <main+0x3a4>)
 80020a4:	f7fe fb1a 	bl	80006dc <AS5047U_Write>
	AS5047U_Write(&Encoder[1], 0x001A, 0b01000000);
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	211a      	movs	r1, #26
 80020ac:	48a3      	ldr	r0, [pc, #652]	; (800233c <main+0x3ac>)
 80020ae:	f7fe fb15 	bl	80006dc <AS5047U_Write>
	AS5047U_Write(&Encoder[2], 0x001A, 0b01000000);
 80020b2:	2240      	movs	r2, #64	; 0x40
 80020b4:	211a      	movs	r1, #26
 80020b6:	48a3      	ldr	r0, [pc, #652]	; (8002344 <main+0x3b4>)
 80020b8:	f7fe fb10 	bl	80006dc <AS5047U_Write>
	AS5047U_Write(&Encoder[3], 0x001A, 0b01000000);
 80020bc:	2240      	movs	r2, #64	; 0x40
 80020be:	211a      	movs	r1, #26
 80020c0:	48a2      	ldr	r0, [pc, #648]	; (800234c <main+0x3bc>)
 80020c2:	f7fe fb0b 	bl	80006dc <AS5047U_Write>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 2000, 0.003);
 80020c6:	ed9f 1b8e 	vldr	d1, [pc, #568]	; 8002300 <main+0x370>
 80020ca:	ed9f 0b8f 	vldr	d0, [pc, #572]	; 8002308 <main+0x378>
 80020ce:	48a0      	ldr	r0, [pc, #640]	; (8002350 <main+0x3c0>)
 80020d0:	f7fe fe6a 	bl	8000da8 <Kalman_init>
	Kalman_init(&Kalman[1], 2000, 0.003);
 80020d4:	ed9f 1b8a 	vldr	d1, [pc, #552]	; 8002300 <main+0x370>
 80020d8:	ed9f 0b8b 	vldr	d0, [pc, #556]	; 8002308 <main+0x378>
 80020dc:	489d      	ldr	r0, [pc, #628]	; (8002354 <main+0x3c4>)
 80020de:	f7fe fe63 	bl	8000da8 <Kalman_init>
	Kalman_init(&Kalman[2], 2000, 0.003);
 80020e2:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8002300 <main+0x370>
 80020e6:	ed9f 0b88 	vldr	d0, [pc, #544]	; 8002308 <main+0x378>
 80020ea:	489b      	ldr	r0, [pc, #620]	; (8002358 <main+0x3c8>)
 80020ec:	f7fe fe5c 	bl	8000da8 <Kalman_init>
	Kalman_init(&Kalman[3], 2000, 0.003);
 80020f0:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8002300 <main+0x370>
 80020f4:	ed9f 0b84 	vldr	d0, [pc, #528]	; 8002308 <main+0x378>
 80020f8:	4898      	ldr	r0, [pc, #608]	; (800235c <main+0x3cc>)
 80020fa:	f7fe fe55 	bl	8000da8 <Kalman_init>

	/*			CascadeControl			*/
	CascadeControl_init(&Control[0], 0.7, 0, 0, 15, 0.5, 10, 400);
 80020fe:	ed9f 3a98 	vldr	s6, [pc, #608]	; 8002360 <main+0x3d0>
 8002102:	eef2 2a04 	vmov.f32	s5, #36	; 0x41200000  10.0
 8002106:	eeb6 2a00 	vmov.f32	s4, #96	; 0x3f000000  0.5
 800210a:	eef2 1a0e 	vmov.f32	s3, #46	; 0x41700000  15.0
 800210e:	ed9f 1a95 	vldr	s2, [pc, #596]	; 8002364 <main+0x3d4>
 8002112:	eddf 0a94 	vldr	s1, [pc, #592]	; 8002364 <main+0x3d4>
 8002116:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8002368 <main+0x3d8>
 800211a:	4894      	ldr	r0, [pc, #592]	; (800236c <main+0x3dc>)
 800211c:	f7ff f914 	bl	8001348 <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.7, 0, 0, 6, 0.2, 8, 190);
 8002120:	ed9f 3a93 	vldr	s6, [pc, #588]	; 8002370 <main+0x3e0>
 8002124:	eef2 2a00 	vmov.f32	s5, #32	; 0x41000000  8.0
 8002128:	ed9f 2a92 	vldr	s4, [pc, #584]	; 8002374 <main+0x3e4>
 800212c:	eef1 1a08 	vmov.f32	s3, #24	; 0x40c00000  6.0
 8002130:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 8002364 <main+0x3d4>
 8002134:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8002364 <main+0x3d4>
 8002138:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 8002368 <main+0x3d8>
 800213c:	488e      	ldr	r0, [pc, #568]	; (8002378 <main+0x3e8>)
 800213e:	f7ff f903 	bl	8001348 <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.7, 0, 0, 6, 0.20, 8, 190);
 8002142:	ed9f 3a8b 	vldr	s6, [pc, #556]	; 8002370 <main+0x3e0>
 8002146:	eef2 2a00 	vmov.f32	s5, #32	; 0x41000000  8.0
 800214a:	ed9f 2a8a 	vldr	s4, [pc, #552]	; 8002374 <main+0x3e4>
 800214e:	eef1 1a08 	vmov.f32	s3, #24	; 0x40c00000  6.0
 8002152:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8002364 <main+0x3d4>
 8002156:	eddf 0a83 	vldr	s1, [pc, #524]	; 8002364 <main+0x3d4>
 800215a:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8002368 <main+0x3d8>
 800215e:	4887      	ldr	r0, [pc, #540]	; (800237c <main+0x3ec>)
 8002160:	f7ff f8f2 	bl	8001348 <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.7, 0, 0, 6, 0.20, 8, 150);
 8002164:	ed9f 3a86 	vldr	s6, [pc, #536]	; 8002380 <main+0x3f0>
 8002168:	eef2 2a00 	vmov.f32	s5, #32	; 0x41000000  8.0
 800216c:	ed9f 2a81 	vldr	s4, [pc, #516]	; 8002374 <main+0x3e4>
 8002170:	eef1 1a08 	vmov.f32	s3, #24	; 0x40c00000  6.0
 8002174:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8002364 <main+0x3d4>
 8002178:	eddf 0a7a 	vldr	s1, [pc, #488]	; 8002364 <main+0x3d4>
 800217c:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8002368 <main+0x3d8>
 8002180:	4880      	ldr	r0, [pc, #512]	; (8002384 <main+0x3f4>)
 8002182:	f7ff f8e1 	bl	8001348 <CascadeControl_init>
//	CascadeControl_init(&Control[1], 0.7, 0, 0, 10, 0, 0, 9, 70);
//	CascadeControl_init(&Control[2], 0.7, 0, 0, 10, 0, 0, 9, 150);
//	CascadeControl_init(&Control[3], 0.7, 0, 0, 10, 0, 0, 6, 150);

	/*  Power Supply Temperature Sensor */
	TPM75_init(&TempSensor, &hi2c2, 0, 0, 1);
 8002186:	2301      	movs	r3, #1
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2300      	movs	r3, #0
 800218c:	2200      	movs	r2, #0
 800218e:	497e      	ldr	r1, [pc, #504]	; (8002388 <main+0x3f8>)
 8002190:	487e      	ldr	r0, [pc, #504]	; (800238c <main+0x3fc>)
 8002192:	f7fe fba3 	bl	80008dc <TPM75_init>

	SetPoint_Position[0] = EncPulse2Rad_Read(&Encoder[0], 1);
 8002196:	2101      	movs	r1, #1
 8002198:	4866      	ldr	r0, [pc, #408]	; (8002334 <main+0x3a4>)
 800219a:	f7fe fa35 	bl	8000608 <EncPulse2Rad_Read>
 800219e:	eef0 7a40 	vmov.f32	s15, s0
 80021a2:	4b7b      	ldr	r3, [pc, #492]	; (8002390 <main+0x400>)
 80021a4:	edc3 7a00 	vstr	s15, [r3]
	SetPoint_Position[1] = EncPulse2Rad_Read(&Encoder[1], 0);
 80021a8:	2100      	movs	r1, #0
 80021aa:	4864      	ldr	r0, [pc, #400]	; (800233c <main+0x3ac>)
 80021ac:	f7fe fa2c 	bl	8000608 <EncPulse2Rad_Read>
 80021b0:	eef0 7a40 	vmov.f32	s15, s0
 80021b4:	4b76      	ldr	r3, [pc, #472]	; (8002390 <main+0x400>)
 80021b6:	edc3 7a01 	vstr	s15, [r3, #4]
	SetPoint_Position[2] = EncPulse2Rad_Read(&Encoder[2], 0);
 80021ba:	2100      	movs	r1, #0
 80021bc:	4861      	ldr	r0, [pc, #388]	; (8002344 <main+0x3b4>)
 80021be:	f7fe fa23 	bl	8000608 <EncPulse2Rad_Read>
 80021c2:	eef0 7a40 	vmov.f32	s15, s0
 80021c6:	4b72      	ldr	r3, [pc, #456]	; (8002390 <main+0x400>)
 80021c8:	edc3 7a02 	vstr	s15, [r3, #8]
	SetPoint_Position[3] = EncPulse2Rad_Read(&Encoder[3], 0);
 80021cc:	2100      	movs	r1, #0
 80021ce:	485f      	ldr	r0, [pc, #380]	; (800234c <main+0x3bc>)
 80021d0:	f7fe fa1a 	bl	8000608 <EncPulse2Rad_Read>
 80021d4:	eef0 7a40 	vmov.f32	s15, s0
 80021d8:	4b6d      	ldr	r3, [pc, #436]	; (8002390 <main+0x400>)
 80021da:	edc3 7a03 	vstr	s15, [r3, #12]
	SetPoint_Velocity[0] = 0;
 80021de:	4b6d      	ldr	r3, [pc, #436]	; (8002394 <main+0x404>)
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
	SetPoint_Velocity[1] = 0;
 80021e6:	4b6b      	ldr	r3, [pc, #428]	; (8002394 <main+0x404>)
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	605a      	str	r2, [r3, #4]
	SetPoint_Velocity[2] = 0;
 80021ee:	4b69      	ldr	r3, [pc, #420]	; (8002394 <main+0x404>)
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
	SetPoint_Velocity[3] = 0;
 80021f6:	4b67      	ldr	r3, [pc, #412]	; (8002394 <main+0x404>)
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	60da      	str	r2, [r3, #12]

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 80021fe:	2301      	movs	r3, #1
 8002200:	9302      	str	r3, [sp, #8]
 8002202:	4b65      	ldr	r3, [pc, #404]	; (8002398 <main+0x408>)
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	2301      	movs	r3, #1
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	4b42      	ldr	r3, [pc, #264]	; (8002314 <main+0x384>)
 800220c:	2200      	movs	r2, #0
 800220e:	4963      	ldr	r1, [pc, #396]	; (800239c <main+0x40c>)
 8002210:	4863      	ldr	r0, [pc, #396]	; (80023a0 <main+0x410>)
 8002212:	f7fe fc11 	bl	8000a38 <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 1);
 8002216:	2301      	movs	r3, #1
 8002218:	9302      	str	r3, [sp, #8]
 800221a:	4b5f      	ldr	r3, [pc, #380]	; (8002398 <main+0x408>)
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	2302      	movs	r3, #2
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	4b3c      	ldr	r3, [pc, #240]	; (8002314 <main+0x384>)
 8002224:	2200      	movs	r2, #0
 8002226:	495f      	ldr	r1, [pc, #380]	; (80023a4 <main+0x414>)
 8002228:	485f      	ldr	r0, [pc, #380]	; (80023a8 <main+0x418>)
 800222a:	f7fe fc05 	bl	8000a38 <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 0);
 800222e:	2300      	movs	r3, #0
 8002230:	9302      	str	r3, [sp, #8]
 8002232:	4b59      	ldr	r3, [pc, #356]	; (8002398 <main+0x408>)
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	2304      	movs	r3, #4
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	4b36      	ldr	r3, [pc, #216]	; (8002314 <main+0x384>)
 800223c:	2200      	movs	r2, #0
 800223e:	495b      	ldr	r1, [pc, #364]	; (80023ac <main+0x41c>)
 8002240:	485b      	ldr	r0, [pc, #364]	; (80023b0 <main+0x420>)
 8002242:	f7fe fbf9 	bl	8000a38 <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 0);
 8002246:	2300      	movs	r3, #0
 8002248:	9302      	str	r3, [sp, #8]
 800224a:	4b53      	ldr	r3, [pc, #332]	; (8002398 <main+0x408>)
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	2308      	movs	r3, #8
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <main+0x384>)
 8002254:	2200      	movs	r2, #0
 8002256:	4957      	ldr	r1, [pc, #348]	; (80023b4 <main+0x424>)
 8002258:	4857      	ldr	r0, [pc, #348]	; (80023b8 <main+0x428>)
 800225a:	f7fe fbed 	bl	8000a38 <Step_Driver_init>

	/*			Trajectory			*/

	Test_traj_Val[0] = 0;
 800225e:	4b57      	ldr	r3, [pc, #348]	; (80023bc <main+0x42c>)
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	601a      	str	r2, [r3, #0]
	Test_traj_Val[1] = 0;
 8002266:	4b55      	ldr	r3, [pc, #340]	; (80023bc <main+0x42c>)
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	605a      	str	r2, [r3, #4]
	Test_traj_Val[2] = 0;
 800226e:	4b53      	ldr	r3, [pc, #332]	; (80023bc <main+0x42c>)
 8002270:	f04f 0200 	mov.w	r2, #0
 8002274:	609a      	str	r2, [r3, #8]
	Test_traj_Val[3] = 0;
 8002276:	4b51      	ldr	r3, [pc, #324]	; (80023bc <main+0x42c>)
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	60da      	str	r2, [r3, #12]
	Traj_Flag = 0;
 800227e:	4b50      	ldr	r3, [pc, #320]	; (80023c0 <main+0x430>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
	t = 0;
 8002284:	4b4f      	ldr	r3, [pc, #316]	; (80023c4 <main+0x434>)
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 800228c:	484e      	ldr	r0, [pc, #312]	; (80023c8 <main+0x438>)
 800228e:	f00d feed 	bl	801006c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 8002292:	220e      	movs	r2, #14
 8002294:	494d      	ldr	r1, [pc, #308]	; (80023cc <main+0x43c>)
 8002296:	484e      	ldr	r0, [pc, #312]	; (80023d0 <main+0x440>)
 8002298:	f00f fc5c 	bl	8011b54 <HAL_UART_Receive_IT>
//			}
//			Test_traj = 0;
//			Traj_Flag = 1;
//		}

		if (Contorl_Flag) {
 800229c:	4b4d      	ldr	r3, [pc, #308]	; (80023d4 <main+0x444>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <main+0x31e>
			Control_Function();
 80022a4:	f000 ff70 	bl	8003188 <Control_Function>
			Contorl_Flag = 0;    // Clear Control Flag
 80022a8:	4b4a      	ldr	r3, [pc, #296]	; (80023d4 <main+0x444>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 80022ae:	4b4a      	ldr	r3, [pc, #296]	; (80023d8 <main+0x448>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d004      	beq.n	80022c0 <main+0x330>
			Narwhal_Protocol();
 80022b6:	f000 fa0f 	bl	80026d8 <Narwhal_Protocol>
			Protocol_Flag = 0;
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <main+0x448>)
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 10){
 80022c0:	f002 fe80 	bl	8004fc4 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b45      	ldr	r3, [pc, #276]	; (80023dc <main+0x44c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b09      	cmp	r3, #9
 80022ce:	f240 8089 	bls.w	80023e4 <main+0x454>
			Software_Timer_100ms = HAL_GetTick();
 80022d2:	f002 fe77 	bl	8004fc4 <HAL_GetTick>
 80022d6:	4603      	mov	r3, r0
 80022d8:	4a40      	ldr	r2, [pc, #256]	; (80023dc <main+0x44c>)
 80022da:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 							//	read temperature sensor
 80022dc:	4811      	ldr	r0, [pc, #68]	; (8002324 <main+0x394>)
 80022de:	f003 fb7f 	bl	80059e0 <HAL_ADC_Start_IT>
//			TPM75_TempRead(&TempSensor);
			HAL_I2C_Mem_Read_IT(&hi2c2, 0x92, 0x00,
 80022e2:	2302      	movs	r3, #2
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <main+0x450>)
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2301      	movs	r3, #1
 80022ec:	2200      	movs	r2, #0
 80022ee:	2192      	movs	r1, #146	; 0x92
 80022f0:	4825      	ldr	r0, [pc, #148]	; (8002388 <main+0x3f8>)
 80022f2:	f007 fe85 	bl	800a000 <HAL_I2C_Mem_Read_IT>
 80022f6:	e075      	b.n	80023e4 <main+0x454>
 80022f8:	00000000 	.word	0x00000000
 80022fc:	40540000 	.word	0x40540000
 8002300:	bc6a7efa 	.word	0xbc6a7efa
 8002304:	3f689374 	.word	0x3f689374
 8002308:	00000000 	.word	0x00000000
 800230c:	409f4000 	.word	0x409f4000
 8002310:	58020c00 	.word	0x58020c00
 8002314:	58021000 	.word	0x58021000
 8002318:	1ff1e840 	.word	0x1ff1e840
 800231c:	1ff1e820 	.word	0x1ff1e820
 8002320:	200006a0 	.word	0x200006a0
 8002324:	20000060 	.word	0x20000060
 8002328:	45cb2000 	.word	0x45cb2000
 800232c:	200000d0 	.word	0x200000d0
 8002330:	200006d4 	.word	0x200006d4
 8002334:	20000424 	.word	0x20000424
 8002338:	45ea6000 	.word	0x45ea6000
 800233c:	20000444 	.word	0x20000444
 8002340:	453a6000 	.word	0x453a6000
 8002344:	20000464 	.word	0x20000464
 8002348:	459c4000 	.word	0x459c4000
 800234c:	20000484 	.word	0x20000484
 8002350:	2000031c 	.word	0x2000031c
 8002354:	2000033c 	.word	0x2000033c
 8002358:	2000035c 	.word	0x2000035c
 800235c:	2000037c 	.word	0x2000037c
 8002360:	43c80000 	.word	0x43c80000
 8002364:	00000000 	.word	0x00000000
 8002368:	3f333333 	.word	0x3f333333
 800236c:	2000014c 	.word	0x2000014c
 8002370:	433e0000 	.word	0x433e0000
 8002374:	3e4ccccd 	.word	0x3e4ccccd
 8002378:	200001b8 	.word	0x200001b8
 800237c:	20000224 	.word	0x20000224
 8002380:	43160000 	.word	0x43160000
 8002384:	20000290 	.word	0x20000290
 8002388:	200000f4 	.word	0x200000f4
 800238c:	200003a0 	.word	0x200003a0
 8002390:	200006c4 	.word	0x200006c4
 8002394:	200004a8 	.word	0x200004a8
 8002398:	0007a120 	.word	0x0007a120
 800239c:	20000a70 	.word	0x20000a70
 80023a0:	2000064c 	.word	0x2000064c
 80023a4:	20000ba0 	.word	0x20000ba0
 80023a8:	20000660 	.word	0x20000660
 80023ac:	20000940 	.word	0x20000940
 80023b0:	20000674 	.word	0x20000674
 80023b4:	20000bec 	.word	0x20000bec
 80023b8:	20000688 	.word	0x20000688
 80023bc:	200006a4 	.word	0x200006a4
 80023c0:	200004a4 	.word	0x200004a4
 80023c4:	20000140 	.word	0x20000140
 80023c8:	20000b54 	.word	0x20000b54
 80023cc:	20000010 	.word	0x20000010
 80023d0:	20000ccc 	.word	0x20000ccc
 80023d4:	20000148 	.word	0x20000148
 80023d8:	2000069c 	.word	0x2000069c
 80023dc:	200006b4 	.word	0x200006b4
 80023e0:	200003b0 	.word	0x200003b0
				I2C_MEMADD_SIZE_8BIT, Buffer_TPM75, 2);
		}

		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 80023e4:	f002 fdee 	bl	8004fc4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <main+0x480>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023f4:	f4ff af52 	bcc.w	800229c <main+0x30c>
			Software_Timer_1s = HAL_GetTick();
 80023f8:	f002 fde4 	bl	8004fc4 <HAL_GetTick>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4a04      	ldr	r2, [pc, #16]	; (8002410 <main+0x480>)
 8002400:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED2_Pin);
 8002402:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002406:	4803      	ldr	r0, [pc, #12]	; (8002414 <main+0x484>)
 8002408:	f007 fd4f 	bl	8009eaa <HAL_GPIO_TogglePin>
		if (Contorl_Flag) {
 800240c:	e746      	b.n	800229c <main+0x30c>
 800240e:	bf00      	nop
 8002410:	20000304 	.word	0x20000304
 8002414:	58020800 	.word	0x58020800

08002418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b09c      	sub	sp, #112	; 0x70
 800241c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800241e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002422:	224c      	movs	r2, #76	; 0x4c
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f012 f8d2 	bl	80145d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	2220      	movs	r2, #32
 8002430:	2100      	movs	r1, #0
 8002432:	4618      	mov	r0, r3
 8002434:	f012 f8cc 	bl	80145d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002438:	2002      	movs	r0, #2
 800243a:	f009 fcfd 	bl	800be38 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800243e:	2300      	movs	r3, #0
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	4b2f      	ldr	r3, [pc, #188]	; (8002500 <SystemClock_Config+0xe8>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	4a2e      	ldr	r2, [pc, #184]	; (8002500 <SystemClock_Config+0xe8>)
 8002448:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800244c:	6193      	str	r3, [r2, #24]
 800244e:	4b2c      	ldr	r3, [pc, #176]	; (8002500 <SystemClock_Config+0xe8>)
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800245a:	bf00      	nop
 800245c:	4b28      	ldr	r3, [pc, #160]	; (8002500 <SystemClock_Config+0xe8>)
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002464:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002468:	d1f8      	bne.n	800245c <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800246a:	4b26      	ldr	r3, [pc, #152]	; (8002504 <SystemClock_Config+0xec>)
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	4a24      	ldr	r2, [pc, #144]	; (8002504 <SystemClock_Config+0xec>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800247a:	2301      	movs	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800247e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002484:	2302      	movs	r3, #2
 8002486:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002488:	2302      	movs	r3, #2
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800248c:	2302      	movs	r3, #2
 800248e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 8002490:	232c      	movs	r3, #44	; 0x2c
 8002492:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002494:	2301      	movs	r3, #1
 8002496:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002498:	2302      	movs	r3, #2
 800249a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800249c:	2302      	movs	r3, #2
 800249e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80024a0:	230c      	movs	r3, #12
 80024a2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b0:	4618      	mov	r0, r3
 80024b2:	f009 fcfb 	bl	800beac <HAL_RCC_OscConfig>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80024bc:	f000 ff96 	bl	80033ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024c0:	233f      	movs	r3, #63	; 0x3f
 80024c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024c4:	2303      	movs	r3, #3
 80024c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80024cc:	2308      	movs	r3, #8
 80024ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80024d0:	2340      	movs	r3, #64	; 0x40
 80024d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80024d4:	2340      	movs	r3, #64	; 0x40
 80024d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80024d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80024de:	2340      	movs	r3, #64	; 0x40
 80024e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2103      	movs	r1, #3
 80024e6:	4618      	mov	r0, r3
 80024e8:	f00a f88c 	bl	800c604 <HAL_RCC_ClockConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80024f2:	f000 ff7b 	bl	80033ec <Error_Handler>
  }
}
 80024f6:	bf00      	nop
 80024f8:	3770      	adds	r7, #112	; 0x70
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	58024800 	.word	0x58024800
 8002504:	58024400 	.word	0x58024400

08002508 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b0ae      	sub	sp, #184	; 0xb8
 800250c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	22b4      	movs	r2, #180	; 0xb4
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f012 f85b 	bl	80145d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <PeriphCommonClock_Config+0x64>)
 800251c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800251e:	2302      	movs	r3, #2
 8002520:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8002522:	2310      	movs	r3, #16
 8002524:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002526:	2302      	movs	r3, #2
 8002528:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800252a:	2302      	movs	r3, #2
 800252c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800252e:	2302      	movs	r3, #2
 8002530:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002532:	23c0      	movs	r3, #192	; 0xc0
 8002534:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002536:	2300      	movs	r3, #0
 8002538:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800253e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002542:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8002544:	2301      	movs	r3, #1
 8002546:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8002548:	2308      	movs	r3, #8
 800254a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	4618      	mov	r0, r3
 8002556:	f00a fbe1 	bl	800cd1c <HAL_RCCEx_PeriphCLKConfig>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8002560:	f000 ff44 	bl	80033ec <Error_Handler>
  }
}
 8002564:	bf00      	nop
 8002566:	37b8      	adds	r7, #184	; 0xb8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	00082003 	.word	0x00082003

08002570 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a06      	ldr	r2, [pc, #24]	; (8002594 <HAL_UART_RxCpltCallback+0x24>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d102      	bne.n	8002586 <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 8002580:	4b05      	ldr	r3, [pc, #20]	; (8002598 <HAL_UART_RxCpltCallback+0x28>)
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
	}
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	20000ccc 	.word	0x20000ccc
 8002598:	2000069c 	.word	0x2000069c

0800259c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(Neopixel.htim, TIM_CHANNEL_1);
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 80025a6:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00d ff57 	bl	8010460 <HAL_TIM_PWM_Stop_DMA>
}
 80025b2:	bf00      	nop
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200004b8 	.word	0x200004b8

080025c0 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a18      	ldr	r2, [pc, #96]	; (800262c <HAL_ADC_ConvCpltCallback+0x6c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d129      	bne.n	8002624 <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 80025d0:	4816      	ldr	r0, [pc, #88]	; (800262c <HAL_ADC_ConvCpltCallback+0x6c>)
 80025d2:	f003 fb45 	bl	8005c60 <HAL_ADC_GetValue>
 80025d6:	60f8      	str	r0, [r7, #12]
		Temperature = ((Temperature * 9)
 80025d8:	4b15      	ldr	r3, [pc, #84]	; (8002630 <HAL_ADC_ConvCpltCallback+0x70>)
 80025da:	edd3 7a00 	vldr	s15, [r3]
 80025de:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80025e2:	ee27 7a87 	vmul.f32	s14, s15, s14
				+ (Temp_Calibration
						* (float) ((float) ADC_Output
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80025f0:	4b10      	ldr	r3, [pc, #64]	; (8002634 <HAL_ADC_ConvCpltCallback+0x74>)
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	ee07 3a90 	vmov	s15, r3
						* (float) ((float) ADC_Output
 80025f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002600:	4b0d      	ldr	r3, [pc, #52]	; (8002638 <HAL_ADC_ConvCpltCallback+0x78>)
 8002602:	edd3 7a00 	vldr	s15, [r3]
 8002606:	ee66 7aa7 	vmul.f32	s15, s13, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 800260a:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 800260e:	ee77 7aa6 	vadd.f32	s15, s15, s13
				+ (Temp_Calibration
 8002612:	ee37 7a27 	vadd.f32	s14, s14, s15
				/ 10;
 8002616:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800261a:	eec7 7a26 	vdiv.f32	s15, s14, s13
		Temperature = ((Temperature * 9)
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <HAL_ADC_ConvCpltCallback+0x70>)
 8002620:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	20000060 	.word	0x20000060
 8002630:	200002fc 	.word	0x200002fc
 8002634:	1ff1e820 	.word	0x1ff1e820
 8002638:	200006a0 	.word	0x200006a0

0800263c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4a06      	ldr	r2, [pc, #24]	; (8002660 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d102      	bne.n	8002652 <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800264e:	2201      	movs	r2, #1
 8002650:	701a      	strb	r2, [r3, #0]
	}
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000b54 	.word	0x20000b54
 8002664:	20000148 	.word	0x20000148

08002668 <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	461a      	mov	r2, r3
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4805      	ldr	r0, [pc, #20]	; (8002690 <CRC8+0x28>)
 800267c:	f004 fe8a 	bl	8007394 <HAL_CRC_Calculate>
 8002680:	4603      	mov	r3, r0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	b2db      	uxtb	r3, r3
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	200000d0 	.word	0x200000d0

08002694 <SentData>:
inline void SentData(uint8_t range){
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
	UART5_txBuffer[range] = CRC8(UART5_txBuffer, range);
 800269e:	79fc      	ldrb	r4, [r7, #7]
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	4619      	mov	r1, r3
 80026a4:	4809      	ldr	r0, [pc, #36]	; (80026cc <SentData+0x38>)
 80026a6:	f7ff ffdf 	bl	8002668 <CRC8>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <SentData+0x38>)
 80026b0:	551a      	strb	r2, [r3, r4]
	HAL_UART_Transmit_IT(&huart5, UART5_txBuffer, range+1);
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	4903      	ldr	r1, [pc, #12]	; (80026cc <SentData+0x38>)
 80026be:	4804      	ldr	r0, [pc, #16]	; (80026d0 <SentData+0x3c>)
 80026c0:	f00f f9a0 	bl	8011a04 <HAL_UART_Transmit_IT>
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd90      	pop	{r4, r7, pc}
 80026cc:	20000020 	.word	0x20000020
 80026d0:	20000ccc 	.word	0x20000ccc
 80026d4:	00000000 	.word	0x00000000

080026d8 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 80026d8:	b580      	push	{r7, lr}
 80026da:	b0a8      	sub	sp, #160	; 0xa0
 80026dc:	af00      	add	r7, sp, #0
	if (UART5_rxBuffer[0] == 0xFF) {
 80026de:	4baf      	ldr	r3, [pc, #700]	; (800299c <Narwhal_Protocol+0x2c4>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2bff      	cmp	r3, #255	; 0xff
 80026e4:	f040 8533 	bne.w	800314e <Narwhal_Protocol+0xa76>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 80026e8:	210d      	movs	r1, #13
 80026ea:	48ac      	ldr	r0, [pc, #688]	; (800299c <Narwhal_Protocol+0x2c4>)
 80026ec:	f7ff ffbc 	bl	8002668 <CRC8>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
		if (CRC_Cal == UART5_rxBuffer[13]) {
 80026f6:	4ba9      	ldr	r3, [pc, #676]	; (800299c <Narwhal_Protocol+0x2c4>)
 80026f8:	7b5b      	ldrb	r3, [r3, #13]
 80026fa:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
 80026fe:	429a      	cmp	r2, r3
 8002700:	f040 851e 	bne.w	8003140 <Narwhal_Protocol+0xa68>
			UART5_txBuffer[0] = 0xFF;
 8002704:	4ba6      	ldr	r3, [pc, #664]	; (80029a0 <Narwhal_Protocol+0x2c8>)
 8002706:	22ff      	movs	r2, #255	; 0xff
 8002708:	701a      	strb	r2, [r3, #0]

			float q_Feed[4];
			float dq[4];
			float d_Task[3];
			float task[3] = { -500, 300, 50 };
 800270a:	4aa6      	ldr	r2, [pc, #664]	; (80029a4 <Narwhal_Protocol+0x2cc>)
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	ca07      	ldmia	r2, {r0, r1, r2}
 8002712:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			uint16_t Temperature_Protocol = Temperature * 1000;
 8002716:	4ba4      	ldr	r3, [pc, #656]	; (80029a8 <Narwhal_Protocol+0x2d0>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 80029ac <Narwhal_Protocol+0x2d4>
 8002720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002728:	ee17 3a90 	vmov	r3, s15
 800272c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

			/* 		Data to MCU Start	*/
			switch (UART5_rxBuffer[1]) {
 8002730:	4b9a      	ldr	r3, [pc, #616]	; (800299c <Narwhal_Protocol+0x2c4>)
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	3ba0      	subs	r3, #160	; 0xa0
 8002736:	2b5f      	cmp	r3, #95	; 0x5f
 8002738:	f200 84fb 	bhi.w	8003132 <Narwhal_Protocol+0xa5a>
 800273c:	a201      	add	r2, pc, #4	; (adr r2, 8002744 <Narwhal_Protocol+0x6c>)
 800273e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002742:	bf00      	nop
 8002744:	08002e05 	.word	0x08002e05
 8002748:	08002e2b 	.word	0x08002e2b
 800274c:	08002e51 	.word	0x08002e51
 8002750:	08003133 	.word	0x08003133
 8002754:	08003133 	.word	0x08003133
 8002758:	08003133 	.word	0x08003133
 800275c:	08003133 	.word	0x08003133
 8002760:	08003133 	.word	0x08003133
 8002764:	08003133 	.word	0x08003133
 8002768:	08003133 	.word	0x08003133
 800276c:	08002eb5 	.word	0x08002eb5
 8002770:	08002f2b 	.word	0x08002f2b
 8002774:	08003133 	.word	0x08003133
 8002778:	08003133 	.word	0x08003133
 800277c:	08003133 	.word	0x08003133
 8002780:	08002f93 	.word	0x08002f93
 8002784:	08003133 	.word	0x08003133
 8002788:	08003133 	.word	0x08003133
 800278c:	08003133 	.word	0x08003133
 8002790:	08003133 	.word	0x08003133
 8002794:	08003133 	.word	0x08003133
 8002798:	08003133 	.word	0x08003133
 800279c:	08003133 	.word	0x08003133
 80027a0:	08003133 	.word	0x08003133
 80027a4:	08003133 	.word	0x08003133
 80027a8:	08003133 	.word	0x08003133
 80027ac:	08003133 	.word	0x08003133
 80027b0:	08003133 	.word	0x08003133
 80027b4:	08003133 	.word	0x08003133
 80027b8:	08003133 	.word	0x08003133
 80027bc:	08003133 	.word	0x08003133
 80027c0:	08003133 	.word	0x08003133
 80027c4:	08003133 	.word	0x08003133
 80027c8:	08003133 	.word	0x08003133
 80027cc:	08003133 	.word	0x08003133
 80027d0:	08003133 	.word	0x08003133
 80027d4:	08003133 	.word	0x08003133
 80027d8:	08003133 	.word	0x08003133
 80027dc:	08003133 	.word	0x08003133
 80027e0:	08003133 	.word	0x08003133
 80027e4:	08003133 	.word	0x08003133
 80027e8:	08003133 	.word	0x08003133
 80027ec:	08003133 	.word	0x08003133
 80027f0:	08003133 	.word	0x08003133
 80027f4:	08003133 	.word	0x08003133
 80027f8:	08003133 	.word	0x08003133
 80027fc:	08003133 	.word	0x08003133
 8002800:	08003133 	.word	0x08003133
 8002804:	08003133 	.word	0x08003133
 8002808:	08003133 	.word	0x08003133
 800280c:	08003133 	.word	0x08003133
 8002810:	08003133 	.word	0x08003133
 8002814:	08003133 	.word	0x08003133
 8002818:	08003133 	.word	0x08003133
 800281c:	08003133 	.word	0x08003133
 8002820:	08003133 	.word	0x08003133
 8002824:	08003133 	.word	0x08003133
 8002828:	08003133 	.word	0x08003133
 800282c:	08003133 	.word	0x08003133
 8002830:	08003133 	.word	0x08003133
 8002834:	08003133 	.word	0x08003133
 8002838:	08003133 	.word	0x08003133
 800283c:	08003133 	.word	0x08003133
 8002840:	08003133 	.word	0x08003133
 8002844:	08003133 	.word	0x08003133
 8002848:	08003133 	.word	0x08003133
 800284c:	08003133 	.word	0x08003133
 8002850:	08003133 	.word	0x08003133
 8002854:	08003133 	.word	0x08003133
 8002858:	08003133 	.word	0x08003133
 800285c:	08003133 	.word	0x08003133
 8002860:	08003133 	.word	0x08003133
 8002864:	08003133 	.word	0x08003133
 8002868:	08003133 	.word	0x08003133
 800286c:	08003133 	.word	0x08003133
 8002870:	08003133 	.word	0x08003133
 8002874:	08003133 	.word	0x08003133
 8002878:	08003133 	.word	0x08003133
 800287c:	08003133 	.word	0x08003133
 8002880:	08003133 	.word	0x08003133
 8002884:	080028c5 	.word	0x080028c5
 8002888:	080028db 	.word	0x080028db
 800288c:	08003133 	.word	0x08003133
 8002890:	08003133 	.word	0x08003133
 8002894:	08003133 	.word	0x08003133
 8002898:	080028f1 	.word	0x080028f1
 800289c:	08003133 	.word	0x08003133
 80028a0:	08003133 	.word	0x08003133
 80028a4:	08003133 	.word	0x08003133
 80028a8:	08003133 	.word	0x08003133
 80028ac:	0800298b 	.word	0x0800298b
 80028b0:	08002a95 	.word	0x08002a95
 80028b4:	08003133 	.word	0x08003133
 80028b8:	08002bdf 	.word	0x08002bdf
 80028bc:	08002ce3 	.word	0x08002ce3
 80028c0:	08002df1 	.word	0x08002df1
			case 0xF0:
				/* Ping */
				UART5_txBuffer[2] = 0x00;
 80028c4:	4b36      	ldr	r3, [pc, #216]	; (80029a0 <Narwhal_Protocol+0x2c8>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80028ca:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <Narwhal_Protocol+0x2c8>)
 80028cc:	22ff      	movs	r2, #255	; 0xff
 80028ce:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80028d0:	2003      	movs	r0, #3
 80028d2:	f7ff fedf 	bl	8002694 <SentData>
				break;
 80028d6:	f000 bc40 	b.w	800315a <Narwhal_Protocol+0xa82>
			case 0xF1:
				/* Working Mode Set */
				UART5_txBuffer[2] = 0x01;
 80028da:	4b31      	ldr	r3, [pc, #196]	; (80029a0 <Narwhal_Protocol+0x2c8>)
 80028dc:	2201      	movs	r2, #1
 80028de:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80028e0:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <Narwhal_Protocol+0x2c8>)
 80028e2:	22ff      	movs	r2, #255	; 0xff
 80028e4:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80028e6:	2003      	movs	r0, #3
 80028e8:	f7ff fed4 	bl	8002694 <SentData>
				break;
 80028ec:	f000 bc35 	b.w	800315a <Narwhal_Protocol+0xa82>
			case 0xF5:
				/* GoHome */
				if (Traj_Flag == 0) {
 80028f0:	4b2f      	ldr	r3, [pc, #188]	; (80029b0 <Narwhal_Protocol+0x2d8>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d13e      	bne.n	8002976 <Narwhal_Protocol+0x29e>
					t = 0;
 80028f8:	4b2e      	ldr	r3, [pc, #184]	; (80029b4 <Narwhal_Protocol+0x2dc>)
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
					for (int i = 0; i < 4; i++) {
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002906:	e02b      	b.n	8002960 <Narwhal_Protocol+0x288>
						Traj_Coeff_Cal(&Traj[i], 2, 0,
 8002908:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800290c:	4613      	mov	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4a28      	ldr	r2, [pc, #160]	; (80029b8 <Narwhal_Protocol+0x2e0>)
 8002916:	441a      	add	r2, r3
 8002918:	4928      	ldr	r1, [pc, #160]	; (80029bc <Narwhal_Protocol+0x2e4>)
 800291a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800291e:	206c      	movs	r0, #108	; 0x6c
 8002920:	fb00 f303 	mul.w	r3, r0, r3
 8002924:	440b      	add	r3, r1
 8002926:	3328      	adds	r3, #40	; 0x28
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	4923      	ldr	r1, [pc, #140]	; (80029bc <Narwhal_Protocol+0x2e4>)
 800292e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002932:	206c      	movs	r0, #108	; 0x6c
 8002934:	fb00 f303 	mul.w	r3, r0, r3
 8002938:	440b      	add	r3, r1
 800293a:	335c      	adds	r3, #92	; 0x5c
 800293c:	ed93 7a00 	vldr	s14, [r3]
 8002940:	eef0 1a47 	vmov.f32	s3, s14
 8002944:	eeb0 1a67 	vmov.f32	s2, s15
 8002948:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80029c0 <Narwhal_Protocol+0x2e8>
 800294c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8002950:	4610      	mov	r0, r2
 8002952:	f7fe f91c 	bl	8000b8e <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 8002956:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800295a:	3301      	adds	r3, #1
 800295c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002960:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002964:	2b03      	cmp	r3, #3
 8002966:	ddcf      	ble.n	8002908 <Narwhal_Protocol+0x230>
								Control[i].PositionFeedback,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <Narwhal_Protocol+0x2d8>)
 800296a:	220f      	movs	r2, #15
 800296c:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <Narwhal_Protocol+0x2c8>)
 8002970:	2200      	movs	r2, #0
 8002972:	709a      	strb	r2, [r3, #2]
 8002974:	e002      	b.n	800297c <Narwhal_Protocol+0x2a4>
				} else {
					UART5_txBuffer[2] = 0x01;
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <Narwhal_Protocol+0x2c8>)
 8002978:	2201      	movs	r2, #1
 800297a:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <Narwhal_Protocol+0x2c8>)
 800297e:	22ff      	movs	r2, #255	; 0xff
 8002980:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8002982:	2003      	movs	r0, #3
 8002984:	f7ff fe86 	bl	8002694 <SentData>
				break;
 8002988:	e3e7      	b.n	800315a <Narwhal_Protocol+0xa82>
			case 0xFA:
				/* Joint Jog */
				t = 0;
 800298a:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <Narwhal_Protocol+0x2dc>)
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002998:	e06b      	b.n	8002a72 <Narwhal_Protocol+0x39a>
 800299a:	bf00      	nop
 800299c:	20000010 	.word	0x20000010
 80029a0:	20000020 	.word	0x20000020
 80029a4:	0801524c 	.word	0x0801524c
 80029a8:	200002fc 	.word	0x200002fc
 80029ac:	447a0000 	.word	0x447a0000
 80029b0:	200004a4 	.word	0x200004a4
 80029b4:	20000140 	.word	0x20000140
 80029b8:	200003b4 	.word	0x200003b4
 80029bc:	2000014c 	.word	0x2000014c
 80029c0:	00000000 	.word	0x00000000
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80029c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029c8:	3301      	adds	r3, #1
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4ace      	ldr	r2, [pc, #824]	; (8002d08 <Narwhal_Protocol+0x630>)
 80029ce:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 80029d0:	021b      	lsls	r3, r3, #8
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80029d2:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 80029d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	3303      	adds	r3, #3
 80029dc:	49ca      	ldr	r1, [pc, #808]	; (8002d08 <Narwhal_Protocol+0x630>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	b21b      	sxth	r3, r3
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80029e2:	4313      	orrs	r3, r2
 80029e4:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 80029e6:	ee07 3a90 	vmov	s15, r3
 80029ea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80029ee:	ed9f 5bc2 	vldr	d5, [pc, #776]	; 8002cf8 <Narwhal_Protocol+0x620>
 80029f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 80029f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80029fa:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
					Traj_Coeff_Cal(&Traj[i], 0.5,
 80029fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002a02:	4613      	mov	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	1a9b      	subs	r3, r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4ac0      	ldr	r2, [pc, #768]	; (8002d0c <Narwhal_Protocol+0x634>)
 8002a0c:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 8002a0e:	49c0      	ldr	r1, [pc, #768]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a14:	206c      	movs	r0, #108	; 0x6c
 8002a16:	fb00 f303 	mul.w	r3, r0, r3
 8002a1a:	440b      	add	r3, r1
 8002a1c:	3328      	adds	r3, #40	; 0x28
 8002a1e:	ed93 7a00 	vldr	s14, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8002a22:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2a:	49b9      	ldr	r1, [pc, #740]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a30:	206c      	movs	r0, #108	; 0x6c
 8002a32:	fb00 f303 	mul.w	r3, r0, r3
 8002a36:	440b      	add	r3, r1
 8002a38:	3328      	adds	r3, #40	; 0x28
 8002a3a:	ed93 7a00 	vldr	s14, [r3]
 8002a3e:	49b4      	ldr	r1, [pc, #720]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002a40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a44:	206c      	movs	r0, #108	; 0x6c
 8002a46:	fb00 f303 	mul.w	r3, r0, r3
 8002a4a:	440b      	add	r3, r1
 8002a4c:	335c      	adds	r3, #92	; 0x5c
 8002a4e:	edd3 6a00 	vldr	s13, [r3]
 8002a52:	eef0 1a66 	vmov.f32	s3, s13
 8002a56:	eeb0 1a47 	vmov.f32	s2, s14
 8002a5a:	eef0 0a67 	vmov.f32	s1, s15
 8002a5e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002a62:	4610      	mov	r0, r2
 8002a64:	f7fe f893 	bl	8000b8e <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8002a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	dda4      	ble.n	80029c4 <Narwhal_Protocol+0x2ec>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8002a7a:	4ba6      	ldr	r3, [pc, #664]	; (8002d14 <Narwhal_Protocol+0x63c>)
 8002a7c:	220f      	movs	r2, #15
 8002a7e:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8002a80:	4ba5      	ldr	r3, [pc, #660]	; (8002d18 <Narwhal_Protocol+0x640>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8002a86:	4ba4      	ldr	r3, [pc, #656]	; (8002d18 <Narwhal_Protocol+0x640>)
 8002a88:	22ff      	movs	r2, #255	; 0xff
 8002a8a:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f7ff fe01 	bl	8002694 <SentData>
				break;
 8002a92:	e362      	b.n	800315a <Narwhal_Protocol+0xa82>
			case 0xFB:
				/* Cartesian Jog */
				q_Feed[0] = Control[0].PositionFeedback;
 8002a94:	4b9e      	ldr	r3, [pc, #632]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a98:	63fb      	str	r3, [r7, #60]	; 0x3c
				q_Feed[1] = Control[1].PositionFeedback;
 8002a9a:	4b9d      	ldr	r3, [pc, #628]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa0:	643b      	str	r3, [r7, #64]	; 0x40
				q_Feed[2] = Control[2].PositionFeedback;
 8002aa2:	4b9b      	ldr	r3, [pc, #620]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002aa4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
				q_Feed[3] = Control[3].PositionFeedback;
 8002aaa:	4b99      	ldr	r3, [pc, #612]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002aac:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002ab0:	64bb      	str	r3, [r7, #72]	; 0x48
				for (int i = 0; i < 3; i++) {
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ab8:	e028      	b.n	8002b0c <Narwhal_Protocol+0x434>
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002aba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002abe:	3301      	adds	r3, #1
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	4a91      	ldr	r2, [pc, #580]	; (8002d08 <Narwhal_Protocol+0x630>)
 8002ac4:	5cd3      	ldrb	r3, [r2, r3]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8002aca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	3303      	adds	r3, #3
 8002ad2:	498d      	ldr	r1, [pc, #564]	; (8002d08 <Narwhal_Protocol+0x630>)
 8002ad4:	5ccb      	ldrb	r3, [r1, r3]
 8002ad6:	b21b      	sxth	r3, r3
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8002adc:	ee07 3a90 	vmov	s15, r3
 8002ae0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002ae4:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8002d00 <Narwhal_Protocol+0x628>
 8002ae8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002aec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002af0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002afa:	4413      	add	r3, r2
 8002afc:	3b80      	subs	r3, #128	; 0x80
 8002afe:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 3; i++) {
 8002b02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b06:	3301      	adds	r3, #1
 8002b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	ddd2      	ble.n	8002aba <Narwhal_Protocol+0x3e2>
				}
				IVK(q_Feed, d_Task, dq);
 8002b14:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8002b18:	f107 0120 	add.w	r1, r7, #32
 8002b1c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ff31 	bl	8001988 <IVK>
				t = 0;
 8002b26:	4b7d      	ldr	r3, [pc, #500]	; (8002d1c <Narwhal_Protocol+0x644>)
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 3; i++) {
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b34:	e042      	b.n	8002bbc <Narwhal_Protocol+0x4e4>
					float Setpoint = Control[i].PositionFeedback + dq[i];
 8002b36:	4a76      	ldr	r2, [pc, #472]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b3c:	216c      	movs	r1, #108	; 0x6c
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3328      	adds	r3, #40	; 0x28
 8002b46:	ed93 7a00 	vldr	s14, [r3]
 8002b4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002b54:	4413      	add	r3, r2
 8002b56:	3b74      	subs	r3, #116	; 0x74
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b60:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
					Traj_Coeff_Cal(&Traj[i], 0.5, Setpoint,
 8002b64:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4a66      	ldr	r2, [pc, #408]	; (8002d0c <Narwhal_Protocol+0x634>)
 8002b72:	441a      	add	r2, r3
 8002b74:	4966      	ldr	r1, [pc, #408]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002b76:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b7a:	206c      	movs	r0, #108	; 0x6c
 8002b7c:	fb00 f303 	mul.w	r3, r0, r3
 8002b80:	440b      	add	r3, r1
 8002b82:	3328      	adds	r3, #40	; 0x28
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	4961      	ldr	r1, [pc, #388]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b8e:	206c      	movs	r0, #108	; 0x6c
 8002b90:	fb00 f303 	mul.w	r3, r0, r3
 8002b94:	440b      	add	r3, r1
 8002b96:	335c      	adds	r3, #92	; 0x5c
 8002b98:	ed93 7a00 	vldr	s14, [r3]
 8002b9c:	eef0 1a47 	vmov.f32	s3, s14
 8002ba0:	eeb0 1a67 	vmov.f32	s2, s15
 8002ba4:	edd7 0a17 	vldr	s1, [r7, #92]	; 0x5c
 8002ba8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002bac:	4610      	mov	r0, r2
 8002bae:	f7fd ffee 	bl	8000b8e <Traj_Coeff_Cal>
				for (int i = 0; i < 3; i++) {
 8002bb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	ddb8      	ble.n	8002b36 <Narwhal_Protocol+0x45e>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8002bc4:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <Narwhal_Protocol+0x63c>)
 8002bc6:	220f      	movs	r2, #15
 8002bc8:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8002bca:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <Narwhal_Protocol+0x640>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8002bd0:	4b51      	ldr	r3, [pc, #324]	; (8002d18 <Narwhal_Protocol+0x640>)
 8002bd2:	22ff      	movs	r2, #255	; 0xff
 8002bd4:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8002bd6:	2003      	movs	r0, #3
 8002bd8:	f7ff fd5c 	bl	8002694 <SentData>
				break;
 8002bdc:	e2bd      	b.n	800315a <Narwhal_Protocol+0xa82>
			case 0xFD:
				/* Joint Set */
				t = 0;
 8002bde:	4b4f      	ldr	r3, [pc, #316]	; (8002d1c <Narwhal_Protocol+0x644>)
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
				float Joint[4];
				float T;
				for (int i = 0; i < 4; i++) {
 8002be6:	2300      	movs	r3, #0
 8002be8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002bec:	e028      	b.n	8002c40 <Narwhal_Protocol+0x568>
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4a44      	ldr	r2, [pc, #272]	; (8002d08 <Narwhal_Protocol+0x630>)
 8002bf8:	5cd3      	ldrb	r3, [r2, r3]
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8002bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	3303      	adds	r3, #3
 8002c06:	4940      	ldr	r1, [pc, #256]	; (8002d08 <Narwhal_Protocol+0x630>)
 8002c08:	5ccb      	ldrb	r3, [r1, r3]
 8002c0a:	b21b      	sxth	r3, r3
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002c18:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8002cf8 <Narwhal_Protocol+0x620>
 8002c1c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002c20:	eef7 7bc7 	vcvt.f32.f64	s15, d7
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8002c24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002c2e:	4413      	add	r3, r2
 8002c30:	3b9c      	subs	r3, #156	; 0x9c
 8002c32:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 4; i++) {
 8002c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c44:	2b03      	cmp	r3, #3
 8002c46:	ddd2      	ble.n	8002bee <Narwhal_Protocol+0x516>
				}
				T = 0.5;
 8002c48:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002c4c:	663b      	str	r3, [r7, #96]	; 0x60
				for (int i = 0; i < 4; i++) {
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c54:	e034      	b.n	8002cc0 <Narwhal_Protocol+0x5e8>
					Traj_Coeff_Cal(&Traj[i], T, Joint[i],
 8002c56:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <Narwhal_Protocol+0x634>)
 8002c64:	441a      	add	r2, r3
 8002c66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002c70:	440b      	add	r3, r1
 8002c72:	3b9c      	subs	r3, #156	; 0x9c
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	4925      	ldr	r1, [pc, #148]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002c7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c7e:	206c      	movs	r0, #108	; 0x6c
 8002c80:	fb00 f303 	mul.w	r3, r0, r3
 8002c84:	440b      	add	r3, r1
 8002c86:	3328      	adds	r3, #40	; 0x28
 8002c88:	ed93 7a00 	vldr	s14, [r3]
 8002c8c:	4920      	ldr	r1, [pc, #128]	; (8002d10 <Narwhal_Protocol+0x638>)
 8002c8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c92:	206c      	movs	r0, #108	; 0x6c
 8002c94:	fb00 f303 	mul.w	r3, r0, r3
 8002c98:	440b      	add	r3, r1
 8002c9a:	335c      	adds	r3, #92	; 0x5c
 8002c9c:	edd3 6a00 	vldr	s13, [r3]
 8002ca0:	eef0 1a66 	vmov.f32	s3, s13
 8002ca4:	eeb0 1a47 	vmov.f32	s2, s14
 8002ca8:	eef0 0a67 	vmov.f32	s1, s15
 8002cac:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f7fd ff6c 	bl	8000b8e <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8002cb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002cc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	ddc6      	ble.n	8002c56 <Narwhal_Protocol+0x57e>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8002cc8:	4b12      	ldr	r3, [pc, #72]	; (8002d14 <Narwhal_Protocol+0x63c>)
 8002cca:	220f      	movs	r2, #15
 8002ccc:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x03;
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <Narwhal_Protocol+0x640>)
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8002cd4:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <Narwhal_Protocol+0x640>)
 8002cd6:	22ff      	movs	r2, #255	; 0xff
 8002cd8:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8002cda:	2003      	movs	r0, #3
 8002cdc:	f7ff fcda 	bl	8002694 <SentData>
				break;
 8002ce0:	e23b      	b.n	800315a <Narwhal_Protocol+0xa82>
			case 0xFE:
				/* Cartesian Set */
				t = 0;
 8002ce2:	4b0e      	ldr	r3, [pc, #56]	; (8002d1c <Narwhal_Protocol+0x644>)
 8002ce4:	f04f 0200 	mov.w	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
				for (int i = 0; i < 4; i++) {
 8002cea:	2300      	movs	r3, #0
 8002cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cf0:	e06d      	b.n	8002dce <Narwhal_Protocol+0x6f6>
 8002cf2:	bf00      	nop
 8002cf4:	f3af 8000 	nop.w
 8002cf8:	00000000 	.word	0x00000000
 8002cfc:	408f4000 	.word	0x408f4000
 8002d00:	00000000 	.word	0x00000000
 8002d04:	40490000 	.word	0x40490000
 8002d08:	20000010 	.word	0x20000010
 8002d0c:	200003b4 	.word	0x200003b4
 8002d10:	2000014c 	.word	0x2000014c
 8002d14:	200004a4 	.word	0x200004a4
 8002d18:	20000020 	.word	0x20000020
 8002d1c:	20000140 	.word	0x20000140
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8002d20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d24:	3301      	adds	r3, #1
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4ab1      	ldr	r2, [pc, #708]	; (8002ff0 <Narwhal_Protocol+0x918>)
 8002d2a:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8002d2c:	021b      	lsls	r3, r3, #8
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8002d2e:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8002d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	3303      	adds	r3, #3
 8002d38:	49ad      	ldr	r1, [pc, #692]	; (8002ff0 <Narwhal_Protocol+0x918>)
 8002d3a:	5ccb      	ldrb	r3, [r1, r3]
 8002d3c:	b21b      	sxth	r3, r3
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002d4a:	ed9f 5ba7 	vldr	d5, [pc, #668]	; 8002fe8 <Narwhal_Protocol+0x910>
 8002d4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
					float JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8002d52:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002d56:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8002d5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002d5e:	4613      	mov	r3, r2
 8002d60:	00db      	lsls	r3, r3, #3
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4aa3      	ldr	r2, [pc, #652]	; (8002ff4 <Narwhal_Protocol+0x91c>)
 8002d68:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 8002d6a:	49a3      	ldr	r1, [pc, #652]	; (8002ff8 <Narwhal_Protocol+0x920>)
 8002d6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d70:	206c      	movs	r0, #108	; 0x6c
 8002d72:	fb00 f303 	mul.w	r3, r0, r3
 8002d76:	440b      	add	r3, r1
 8002d78:	3328      	adds	r3, #40	; 0x28
 8002d7a:	ed93 7a00 	vldr	s14, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8002d7e:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002d82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d86:	499c      	ldr	r1, [pc, #624]	; (8002ff8 <Narwhal_Protocol+0x920>)
 8002d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d8c:	206c      	movs	r0, #108	; 0x6c
 8002d8e:	fb00 f303 	mul.w	r3, r0, r3
 8002d92:	440b      	add	r3, r1
 8002d94:	3328      	adds	r3, #40	; 0x28
 8002d96:	ed93 7a00 	vldr	s14, [r3]
 8002d9a:	4997      	ldr	r1, [pc, #604]	; (8002ff8 <Narwhal_Protocol+0x920>)
 8002d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da0:	206c      	movs	r0, #108	; 0x6c
 8002da2:	fb00 f303 	mul.w	r3, r0, r3
 8002da6:	440b      	add	r3, r1
 8002da8:	335c      	adds	r3, #92	; 0x5c
 8002daa:	edd3 6a00 	vldr	s13, [r3]
 8002dae:	eef0 1a66 	vmov.f32	s3, s13
 8002db2:	eeb0 1a47 	vmov.f32	s2, s14
 8002db6:	eef0 0a67 	vmov.f32	s1, s15
 8002dba:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f7fd fee5 	bl	8000b8e <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8002dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dc8:	3301      	adds	r3, #1
 8002dca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	dda4      	ble.n	8002d20 <Narwhal_Protocol+0x648>
							Control[i].PositionFeedback,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8002dd6:	4b89      	ldr	r3, [pc, #548]	; (8002ffc <Narwhal_Protocol+0x924>)
 8002dd8:	220f      	movs	r2, #15
 8002dda:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8002ddc:	4b88      	ldr	r3, [pc, #544]	; (8003000 <Narwhal_Protocol+0x928>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8002de2:	4b87      	ldr	r3, [pc, #540]	; (8003000 <Narwhal_Protocol+0x928>)
 8002de4:	22ff      	movs	r2, #255	; 0xff
 8002de6:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8002de8:	2003      	movs	r0, #3
 8002dea:	f7ff fc53 	bl	8002694 <SentData>
				break;
 8002dee:	e1b4      	b.n	800315a <Narwhal_Protocol+0xa82>
			case 0xFF:
				/* Chess Move */
				UART5_txBuffer[2] = 0x05;
 8002df0:	4b83      	ldr	r3, [pc, #524]	; (8003000 <Narwhal_Protocol+0x928>)
 8002df2:	2205      	movs	r2, #5
 8002df4:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8002df6:	4b82      	ldr	r3, [pc, #520]	; (8003000 <Narwhal_Protocol+0x928>)
 8002df8:	22ff      	movs	r2, #255	; 0xff
 8002dfa:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8002dfc:	2003      	movs	r0, #3
 8002dfe:	f7ff fc49 	bl	8002694 <SentData>
				break;
 8002e02:	e1aa      	b.n	800315a <Narwhal_Protocol+0xa82>


				/* 		Sent Data to Master Start 	*/
			case 0xA0:
				/* System Status */
				UART5_txBuffer[1] = 0xEE;
 8002e04:	4b7e      	ldr	r3, [pc, #504]	; (8003000 <Narwhal_Protocol+0x928>)
 8002e06:	22ee      	movs	r2, #238	; 0xee
 8002e08:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8002e0a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002e0e:	0a1b      	lsrs	r3, r3, #8
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	4b7a      	ldr	r3, [pc, #488]	; (8003000 <Narwhal_Protocol+0x928>)
 8002e16:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Temperature_Protocol & 0xFF);
 8002e18:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4b78      	ldr	r3, [pc, #480]	; (8003000 <Narwhal_Protocol+0x928>)
 8002e20:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8002e22:	2004      	movs	r0, #4
 8002e24:	f7ff fc36 	bl	8002694 <SentData>
				break;
 8002e28:	e197      	b.n	800315a <Narwhal_Protocol+0xa82>
			case 0xA1:
				/* Station Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8002e2a:	4b75      	ldr	r3, [pc, #468]	; (8003000 <Narwhal_Protocol+0x928>)
 8002e2c:	22ee      	movs	r2, #238	; 0xee
 8002e2e:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 8002e30:	4b74      	ldr	r3, [pc, #464]	; (8003004 <Narwhal_Protocol+0x92c>)
 8002e32:	89db      	ldrh	r3, [r3, #14]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	4b71      	ldr	r3, [pc, #452]	; (8003000 <Narwhal_Protocol+0x928>)
 8002e3c:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 8002e3e:	4b71      	ldr	r3, [pc, #452]	; (8003004 <Narwhal_Protocol+0x92c>)
 8002e40:	89db      	ldrh	r3, [r3, #14]
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b6e      	ldr	r3, [pc, #440]	; (8003000 <Narwhal_Protocol+0x928>)
 8002e46:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8002e48:	2004      	movs	r0, #4
 8002e4a:	f7ff fc23 	bl	8002694 <SentData>
				break;
 8002e4e:	e184      	b.n	800315a <Narwhal_Protocol+0xa82>
			case 0xA2:
				/* Raw Joint Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8002e50:	4b6b      	ldr	r3, [pc, #428]	; (8003000 <Narwhal_Protocol+0x928>)
 8002e52:	22ee      	movs	r2, #238	; 0xee
 8002e54:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8002e56:	2300      	movs	r3, #0
 8002e58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e5c:	e022      	b.n	8002ea4 <Narwhal_Protocol+0x7cc>
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Encoder[i].Position >> 8)
 8002e5e:	4a69      	ldr	r2, [pc, #420]	; (8003004 <Narwhal_Protocol+0x92c>)
 8002e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e64:	015b      	lsls	r3, r3, #5
 8002e66:	4413      	add	r3, r2
 8002e68:	330e      	adds	r3, #14
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e74:	3301      	adds	r3, #1
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	b2d1      	uxtb	r1, r2
 8002e7a:	4a61      	ldr	r2, [pc, #388]	; (8003000 <Narwhal_Protocol+0x928>)
 8002e7c:	54d1      	strb	r1, [r2, r3]
							& 0xFF);
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Encoder[i].Position & 0xFF);
 8002e7e:	4a61      	ldr	r2, [pc, #388]	; (8003004 <Narwhal_Protocol+0x92c>)
 8002e80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e84:	015b      	lsls	r3, r3, #5
 8002e86:	4413      	add	r3, r2
 8002e88:	330e      	adds	r3, #14
 8002e8a:	881a      	ldrh	r2, [r3, #0]
 8002e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	3303      	adds	r3, #3
 8002e94:	b2d1      	uxtb	r1, r2
 8002e96:	4a5a      	ldr	r2, [pc, #360]	; (8003000 <Narwhal_Protocol+0x928>)
 8002e98:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8002e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	ddd8      	ble.n	8002e5e <Narwhal_Protocol+0x786>
				}
				SentData(12);
 8002eac:	200c      	movs	r0, #12
 8002eae:	f7ff fbf1 	bl	8002694 <SentData>
				break;
 8002eb2:	e152      	b.n	800315a <Narwhal_Protocol+0xa82>
			case 0xAA:
				/* Joint Position */
				UART5_txBuffer[1] = 0xEE;
 8002eb4:	4b52      	ldr	r3, [pc, #328]	; (8003000 <Narwhal_Protocol+0x928>)
 8002eb6:	22ee      	movs	r2, #238	; 0xee
 8002eb8:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8002eba:	2300      	movs	r3, #0
 8002ebc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ebe:	e027      	b.n	8002f10 <Narwhal_Protocol+0x838>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8002ec0:	4a4d      	ldr	r2, [pc, #308]	; (8002ff8 <Narwhal_Protocol+0x920>)
 8002ec2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ec4:	216c      	movs	r1, #108	; 0x6c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3328      	adds	r3, #40	; 0x28
 8002ece:	edd3 7a00 	vldr	s15, [r3]
							* 1000.0f);
 8002ed2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003008 <Narwhal_Protocol+0x930>
 8002ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8002eda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ede:	ee17 3a90 	vmov	r3, s15
 8002ee2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8002ee6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8002eea:	121b      	asrs	r3, r3, #8
 8002eec:	b21a      	sxth	r2, r3
 8002eee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	b2d1      	uxtb	r1, r2
 8002ef6:	4a42      	ldr	r2, [pc, #264]	; (8003000 <Narwhal_Protocol+0x928>)
 8002ef8:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8002efa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	3303      	adds	r3, #3
 8002f00:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002f04:	b2d1      	uxtb	r1, r2
 8002f06:	4a3e      	ldr	r2, [pc, #248]	; (8003000 <Narwhal_Protocol+0x928>)
 8002f08:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8002f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002f10:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	ddd4      	ble.n	8002ec0 <Narwhal_Protocol+0x7e8>
				}
				UART5_txBuffer[10] = 0;
 8002f16:	4b3a      	ldr	r3, [pc, #232]	; (8003000 <Narwhal_Protocol+0x928>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	729a      	strb	r2, [r3, #10]
				UART5_txBuffer[11] = 0;
 8002f1c:	4b38      	ldr	r3, [pc, #224]	; (8003000 <Narwhal_Protocol+0x928>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	72da      	strb	r2, [r3, #11]
				SentData(12);
 8002f22:	200c      	movs	r0, #12
 8002f24:	f7ff fbb6 	bl	8002694 <SentData>
				break;
 8002f28:	e117      	b.n	800315a <Narwhal_Protocol+0xa82>
			case 0xAB:
				/* Task Space Position */
				UART5_txBuffer[1] = 0xEE;
 8002f2a:	4b35      	ldr	r3, [pc, #212]	; (8003000 <Narwhal_Protocol+0x928>)
 8002f2c:	22ee      	movs	r2, #238	; 0xee
 8002f2e:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
//				float task[3] = { -500, 300, 50 };
				for (int i = 0; i < 3; i++) {
 8002f30:	2300      	movs	r3, #0
 8002f32:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f34:	e026      	b.n	8002f84 <Narwhal_Protocol+0x8ac>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 8002f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002f3e:	4413      	add	r3, r2
 8002f40:	3b8c      	subs	r3, #140	; 0x8c
 8002f42:	edd3 7a00 	vldr	s15, [r3]
 8002f46:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f52:	ee17 3a90 	vmov	r3, s15
 8002f56:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8002f5a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8002f5e:	121b      	asrs	r3, r3, #8
 8002f60:	b21a      	sxth	r2, r3
 8002f62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f64:	3301      	adds	r3, #1
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	b2d1      	uxtb	r1, r2
 8002f6a:	4a25      	ldr	r2, [pc, #148]	; (8003000 <Narwhal_Protocol+0x928>)
 8002f6c:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8002f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	3303      	adds	r3, #3
 8002f74:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002f78:	b2d1      	uxtb	r1, r2
 8002f7a:	4a21      	ldr	r2, [pc, #132]	; (8003000 <Narwhal_Protocol+0x928>)
 8002f7c:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 8002f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f80:	3301      	adds	r3, #1
 8002f82:	67bb      	str	r3, [r7, #120]	; 0x78
 8002f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	ddd5      	ble.n	8002f36 <Narwhal_Protocol+0x85e>
				}
				SentData(8);
 8002f8a:	2008      	movs	r0, #8
 8002f8c:	f7ff fb82 	bl	8002694 <SentData>
				break;
 8002f90:	e0e3      	b.n	800315a <Narwhal_Protocol+0xa82>
			case 0xAF:
				/* UI Feedback */
				UART5_txBuffer[1] = 0xEE;
 8002f92:	4b1b      	ldr	r3, [pc, #108]	; (8003000 <Narwhal_Protocol+0x928>)
 8002f94:	22ee      	movs	r2, #238	; 0xee
 8002f96:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
//				float task[3] = { -500, 300, 50 };


				/* Station Encoder */
				UART5_txBuffer[2] = (uint8_t) ((Encoder[0].Position >> 8) & 0xFF);
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <Narwhal_Protocol+0x92c>)
 8002f9a:	89db      	ldrh	r3, [r3, #14]
 8002f9c:	0a1b      	lsrs	r3, r3, #8
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	b2da      	uxtb	r2, r3
 8002fa2:	4b17      	ldr	r3, [pc, #92]	; (8003000 <Narwhal_Protocol+0x928>)
 8002fa4:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Encoder[0].Position & 0xFF);
 8002fa6:	4b17      	ldr	r3, [pc, #92]	; (8003004 <Narwhal_Protocol+0x92c>)
 8002fa8:	89db      	ldrh	r3, [r3, #14]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	4b14      	ldr	r3, [pc, #80]	; (8003000 <Narwhal_Protocol+0x928>)
 8002fae:	70da      	strb	r2, [r3, #3]

				/* Temp */
				UART5_txBuffer[4] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8002fb0:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002fb4:	0a1b      	lsrs	r3, r3, #8
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b11      	ldr	r3, [pc, #68]	; (8003000 <Narwhal_Protocol+0x928>)
 8002fbc:	711a      	strb	r2, [r3, #4]
				UART5_txBuffer[5] = (uint8_t) (Temperature_Protocol & 0xFF);
 8002fbe:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <Narwhal_Protocol+0x928>)
 8002fc6:	715a      	strb	r2, [r3, #5]
				UART5_txBuffer[6] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8002fc8:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002fcc:	0a1b      	lsrs	r3, r3, #8
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	b2da      	uxtb	r2, r3
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <Narwhal_Protocol+0x928>)
 8002fd4:	719a      	strb	r2, [r3, #6]
				UART5_txBuffer[7] = (uint8_t) (Temperature_Protocol & 0xFF);
 8002fd6:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <Narwhal_Protocol+0x928>)
 8002fde:	71da      	strb	r2, [r3, #7]

				/* Joint Current */
				for (int i = 0; i < 4; i++) {
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	677b      	str	r3, [r7, #116]	; 0x74
 8002fe4:	e03a      	b.n	800305c <Narwhal_Protocol+0x984>
 8002fe6:	bf00      	nop
 8002fe8:	00000000 	.word	0x00000000
 8002fec:	408f4000 	.word	0x408f4000
 8002ff0:	20000010 	.word	0x20000010
 8002ff4:	200003b4 	.word	0x200003b4
 8002ff8:	2000014c 	.word	0x2000014c
 8002ffc:	200004a4 	.word	0x200004a4
 8003000:	20000020 	.word	0x20000020
 8003004:	20000424 	.word	0x20000424
 8003008:	447a0000 	.word	0x447a0000
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 800300c:	4a57      	ldr	r2, [pc, #348]	; (800316c <Narwhal_Protocol+0xa94>)
 800300e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003010:	216c      	movs	r1, #108	; 0x6c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	3328      	adds	r3, #40	; 0x28
 800301a:	edd3 7a00 	vldr	s15, [r3]
							* 1000.0f);
 800301e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003170 <Narwhal_Protocol+0xa98>
 8003022:	ee67 7a87 	vmul.f32	s15, s15, s14
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8003026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800302a:	ee17 3a90 	vmov	r3, s15
 800302e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
					UART5_txBuffer[8 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003032:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8003036:	121b      	asrs	r3, r3, #8
 8003038:	b21a      	sxth	r2, r3
 800303a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800303c:	3304      	adds	r3, #4
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	b2d1      	uxtb	r1, r2
 8003042:	4a4c      	ldr	r2, [pc, #304]	; (8003174 <Narwhal_Protocol+0xa9c>)
 8003044:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[9 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8003046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	3309      	adds	r3, #9
 800304c:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8003050:	b2d1      	uxtb	r1, r2
 8003052:	4a48      	ldr	r2, [pc, #288]	; (8003174 <Narwhal_Protocol+0xa9c>)
 8003054:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8003056:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003058:	3301      	adds	r3, #1
 800305a:	677b      	str	r3, [r7, #116]	; 0x74
 800305c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800305e:	2b03      	cmp	r3, #3
 8003060:	ddd4      	ble.n	800300c <Narwhal_Protocol+0x934>
				}
				UART5_txBuffer[16] = 0;
 8003062:	4b44      	ldr	r3, [pc, #272]	; (8003174 <Narwhal_Protocol+0xa9c>)
 8003064:	2200      	movs	r2, #0
 8003066:	741a      	strb	r2, [r3, #16]
				UART5_txBuffer[17] = 0;
 8003068:	4b42      	ldr	r3, [pc, #264]	; (8003174 <Narwhal_Protocol+0xa9c>)
 800306a:	2200      	movs	r2, #0
 800306c:	745a      	strb	r2, [r3, #17]

				/* Joint Set point*/
				for (int i = 0; i < 4; i++) {
 800306e:	2300      	movs	r3, #0
 8003070:	673b      	str	r3, [r7, #112]	; 0x70
 8003072:	e024      	b.n	80030be <Narwhal_Protocol+0x9e6>
					int16_t Buf = (int16_t) (SetPoint_Position[i] * 1000.0f);
 8003074:	4a40      	ldr	r2, [pc, #256]	; (8003178 <Narwhal_Protocol+0xaa0>)
 8003076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	edd3 7a00 	vldr	s15, [r3]
 8003080:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8003170 <Narwhal_Protocol+0xa98>
 8003084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800308c:	ee17 3a90 	vmov	r3, s15
 8003090:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
					UART5_txBuffer[18 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8003094:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8003098:	121b      	asrs	r3, r3, #8
 800309a:	b21a      	sxth	r2, r3
 800309c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800309e:	3309      	adds	r3, #9
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	b2d1      	uxtb	r1, r2
 80030a4:	4a33      	ldr	r2, [pc, #204]	; (8003174 <Narwhal_Protocol+0xa9c>)
 80030a6:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[19 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80030a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	3313      	adds	r3, #19
 80030ae:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80030b2:	b2d1      	uxtb	r1, r2
 80030b4:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <Narwhal_Protocol+0xa9c>)
 80030b6:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 80030b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030ba:	3301      	adds	r3, #1
 80030bc:	673b      	str	r3, [r7, #112]	; 0x70
 80030be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	ddd7      	ble.n	8003074 <Narwhal_Protocol+0x99c>
				}
				UART5_txBuffer[26] = 0;
 80030c4:	4b2b      	ldr	r3, [pc, #172]	; (8003174 <Narwhal_Protocol+0xa9c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	769a      	strb	r2, [r3, #26]
				UART5_txBuffer[27] = 0;
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <Narwhal_Protocol+0xa9c>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	76da      	strb	r2, [r3, #27]

				for (int i = 0; i < 3; i++) {
 80030d0:	2300      	movs	r3, #0
 80030d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030d4:	e026      	b.n	8003124 <Narwhal_Protocol+0xa4c>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 80030d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80030de:	4413      	add	r3, r2
 80030e0:	3b8c      	subs	r3, #140	; 0x8c
 80030e2:	edd3 7a00 	vldr	s15, [r3]
 80030e6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030f2:	ee17 3a90 	vmov	r3, s15
 80030f6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
					UART5_txBuffer[28 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80030fa:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 80030fe:	121b      	asrs	r3, r3, #8
 8003100:	b21a      	sxth	r2, r3
 8003102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003104:	330e      	adds	r3, #14
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	b2d1      	uxtb	r1, r2
 800310a:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <Narwhal_Protocol+0xa9c>)
 800310c:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[29 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 800310e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	331d      	adds	r3, #29
 8003114:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8003118:	b2d1      	uxtb	r1, r2
 800311a:	4a16      	ldr	r2, [pc, #88]	; (8003174 <Narwhal_Protocol+0xa9c>)
 800311c:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 800311e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003120:	3301      	adds	r3, #1
 8003122:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003126:	2b02      	cmp	r3, #2
 8003128:	ddd5      	ble.n	80030d6 <Narwhal_Protocol+0x9fe>
				}
				SentData(34);
 800312a:	2022      	movs	r0, #34	; 0x22
 800312c:	f7ff fab2 	bl	8002694 <SentData>
				break;
 8003130:	e013      	b.n	800315a <Narwhal_Protocol+0xa82>
			default:
				UART5_txBuffer[2] = 0xFF;
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <Narwhal_Protocol+0xa9c>)
 8003134:	22ff      	movs	r2, #255	; 0xff
 8003136:	709a      	strb	r2, [r3, #2]
				SentData(3);
 8003138:	2003      	movs	r0, #3
 800313a:	f7ff faab 	bl	8002694 <SentData>
 800313e:	e00c      	b.n	800315a <Narwhal_Protocol+0xa82>
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			UART5_txBuffer[1] = 0xCC;
 8003140:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <Narwhal_Protocol+0xa9c>)
 8003142:	22cc      	movs	r2, #204	; 0xcc
 8003144:	705a      	strb	r2, [r3, #1]
			SentData(3);
 8003146:	2003      	movs	r0, #3
 8003148:	f7ff faa4 	bl	8002694 <SentData>
 800314c:	e005      	b.n	800315a <Narwhal_Protocol+0xa82>
		}
	} else {
		/*		Header Error	*/
		UART5_txBuffer[1] = 0xAA;
 800314e:	4b09      	ldr	r3, [pc, #36]	; (8003174 <Narwhal_Protocol+0xa9c>)
 8003150:	22aa      	movs	r2, #170	; 0xaa
 8003152:	705a      	strb	r2, [r3, #1]
		SentData(3);
 8003154:	2003      	movs	r0, #3
 8003156:	f7ff fa9d 	bl	8002694 <SentData>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 800315a:	220e      	movs	r2, #14
 800315c:	4907      	ldr	r1, [pc, #28]	; (800317c <Narwhal_Protocol+0xaa4>)
 800315e:	4808      	ldr	r0, [pc, #32]	; (8003180 <Narwhal_Protocol+0xaa8>)
 8003160:	f00e fcf8 	bl	8011b54 <HAL_UART_Receive_IT>
}
 8003164:	bf00      	nop
 8003166:	37a0      	adds	r7, #160	; 0xa0
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	2000014c 	.word	0x2000014c
 8003170:	447a0000 	.word	0x447a0000
 8003174:	20000020 	.word	0x20000020
 8003178:	200006c4 	.word	0x200006c4
 800317c:	20000010 	.word	0x20000010
 8003180:	20000ccc 	.word	0x20000ccc
 8003184:	00000000 	.word	0x00000000

08003188 <Control_Function>:

inline void Control_Function(){
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af00      	add	r7, sp, #0
	/***** Encoder Read *****/
	float J1,J2,J3,J4;
	J1 = EncPulse2Rad_Read(&Encoder[0],1);
 800318e:	2101      	movs	r1, #1
 8003190:	4881      	ldr	r0, [pc, #516]	; (8003398 <Control_Function+0x210>)
 8003192:	f7fd fa39 	bl	8000608 <EncPulse2Rad_Read>
 8003196:	ed87 0a08 	vstr	s0, [r7, #32]
	J2 = EncPulse2Rad_Read(&Encoder[1],0);
 800319a:	2100      	movs	r1, #0
 800319c:	487f      	ldr	r0, [pc, #508]	; (800339c <Control_Function+0x214>)
 800319e:	f7fd fa33 	bl	8000608 <EncPulse2Rad_Read>
 80031a2:	ed87 0a07 	vstr	s0, [r7, #28]
	J3 = EncPulse2Rad_Read(&Encoder[2],0);
 80031a6:	2100      	movs	r1, #0
 80031a8:	487d      	ldr	r0, [pc, #500]	; (80033a0 <Control_Function+0x218>)
 80031aa:	f7fd fa2d 	bl	8000608 <EncPulse2Rad_Read>
 80031ae:	ed87 0a06 	vstr	s0, [r7, #24]
	J4 = EncPulse2Rad_Read(&Encoder[3],0);
 80031b2:	2100      	movs	r1, #0
 80031b4:	487b      	ldr	r0, [pc, #492]	; (80033a4 <Control_Function+0x21c>)
 80031b6:	f7fd fa27 	bl	8000608 <EncPulse2Rad_Read>
 80031ba:	ed87 0a05 	vstr	s0, [r7, #20]

	if(Traj_Flag & 0x0F){
 80031be:	4b7a      	ldr	r3, [pc, #488]	; (80033a8 <Control_Function+0x220>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d07b      	beq.n	80032c2 <Control_Function+0x13a>
		float traj_t_set[5];
		traj_t_set[0] = t;
 80031ca:	4b78      	ldr	r3, [pc, #480]	; (80033ac <Control_Function+0x224>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	603b      	str	r3, [r7, #0]
		traj_t_set[1] = t * t;
 80031d0:	4b76      	ldr	r3, [pc, #472]	; (80033ac <Control_Function+0x224>)
 80031d2:	ed93 7a00 	vldr	s14, [r3]
 80031d6:	4b75      	ldr	r3, [pc, #468]	; (80033ac <Control_Function+0x224>)
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e0:	edc7 7a01 	vstr	s15, [r7, #4]
		traj_t_set[2] = traj_t_set[1] * t;
 80031e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80031e8:	4b70      	ldr	r3, [pc, #448]	; (80033ac <Control_Function+0x224>)
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a02 	vstr	s15, [r7, #8]
		traj_t_set[3] = traj_t_set[2] * t;
 80031f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80031fa:	4b6c      	ldr	r3, [pc, #432]	; (80033ac <Control_Function+0x224>)
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003204:	edc7 7a03 	vstr	s15, [r7, #12]
		traj_t_set[4] = traj_t_set[3] * t;
 8003208:	ed97 7a03 	vldr	s14, [r7, #12]
 800320c:	4b67      	ldr	r3, [pc, #412]	; (80033ac <Control_Function+0x224>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003216:	edc7 7a04 	vstr	s15, [r7, #16]
		for (int i = 0; i < 4; i++) {
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
 800321e:	e03f      	b.n	80032a0 <Control_Function+0x118>
			if (Traj_Flag & (0x01 << i)) {
 8003220:	4b61      	ldr	r3, [pc, #388]	; (80033a8 <Control_Function+0x220>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	461a      	mov	r2, r3
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	fa42 f303 	asr.w	r3, r2, r3
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d032      	beq.n	800329a <Control_Function+0x112>
				TrajFollow(&Traj[i], traj_t_set, &SetPoint_Position[i],
 8003234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003236:	4613      	mov	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4a5c      	ldr	r2, [pc, #368]	; (80033b0 <Control_Function+0x228>)
 8003240:	1898      	adds	r0, r3, r2
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4a5b      	ldr	r2, [pc, #364]	; (80033b4 <Control_Function+0x22c>)
 8003248:	441a      	add	r2, r3
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	495a      	ldr	r1, [pc, #360]	; (80033b8 <Control_Function+0x230>)
 8003250:	440b      	add	r3, r1
 8003252:	4639      	mov	r1, r7
 8003254:	f7fd fd27 	bl	8000ca6 <TrajFollow>
						&SetPoint_Velocity[i]);
				if (t >= Traj[i].T) {
 8003258:	4955      	ldr	r1, [pc, #340]	; (80033b0 <Control_Function+0x228>)
 800325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	3318      	adds	r3, #24
 8003268:	ed93 7a00 	vldr	s14, [r3]
 800326c:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <Control_Function+0x224>)
 800326e:	edd3 7a00 	vldr	s15, [r3]
 8003272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327a:	d80e      	bhi.n	800329a <Control_Function+0x112>
					Traj_Flag &= ((0x01 << i) ^ 0xFF);
 800327c:	2201      	movs	r2, #1
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	b25b      	sxtb	r3, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	b25a      	sxtb	r2, r3
 800328a:	4b47      	ldr	r3, [pc, #284]	; (80033a8 <Control_Function+0x220>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	b25b      	sxtb	r3, r3
 8003290:	4013      	ands	r3, r2
 8003292:	b25b      	sxtb	r3, r3
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4b44      	ldr	r3, [pc, #272]	; (80033a8 <Control_Function+0x220>)
 8003298:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++) {
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	3301      	adds	r3, #1
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	ddbc      	ble.n	8003220 <Control_Function+0x98>
				}
			}
		}
		t += 0.005;
 80032a6:	4b41      	ldr	r3, [pc, #260]	; (80033ac <Control_Function+0x224>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80032b0:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8003390 <Control_Function+0x208>
 80032b4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80032b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80032bc:	4b3b      	ldr	r3, [pc, #236]	; (80033ac <Control_Function+0x224>)
 80032be:	edc3 7a00 	vstr	s15, [r3]
	}

	CascadeControl(&Control[0], &Kalman[0], J1,SetPoint_Position[0],SetPoint_Velocity[0]);
 80032c2:	4b3c      	ldr	r3, [pc, #240]	; (80033b4 <Control_Function+0x22c>)
 80032c4:	edd3 7a00 	vldr	s15, [r3]
 80032c8:	4b3b      	ldr	r3, [pc, #236]	; (80033b8 <Control_Function+0x230>)
 80032ca:	ed93 7a00 	vldr	s14, [r3]
 80032ce:	eeb0 1a47 	vmov.f32	s2, s14
 80032d2:	eef0 0a67 	vmov.f32	s1, s15
 80032d6:	ed97 0a08 	vldr	s0, [r7, #32]
 80032da:	4938      	ldr	r1, [pc, #224]	; (80033bc <Control_Function+0x234>)
 80032dc:	4838      	ldr	r0, [pc, #224]	; (80033c0 <Control_Function+0x238>)
 80032de:	f7fe f861 	bl	80013a4 <CascadeControl>
	CascadeControl(&Control[1], &Kalman[1], J2,SetPoint_Position[1],SetPoint_Velocity[1]);
 80032e2:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <Control_Function+0x22c>)
 80032e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80032e8:	4b33      	ldr	r3, [pc, #204]	; (80033b8 <Control_Function+0x230>)
 80032ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80032ee:	eeb0 1a47 	vmov.f32	s2, s14
 80032f2:	eef0 0a67 	vmov.f32	s1, s15
 80032f6:	ed97 0a07 	vldr	s0, [r7, #28]
 80032fa:	4932      	ldr	r1, [pc, #200]	; (80033c4 <Control_Function+0x23c>)
 80032fc:	4832      	ldr	r0, [pc, #200]	; (80033c8 <Control_Function+0x240>)
 80032fe:	f7fe f851 	bl	80013a4 <CascadeControl>
	CascadeControl(&Control[2], &Kalman[2], J3,SetPoint_Position[2],SetPoint_Velocity[2]);
 8003302:	4b2c      	ldr	r3, [pc, #176]	; (80033b4 <Control_Function+0x22c>)
 8003304:	edd3 7a02 	vldr	s15, [r3, #8]
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <Control_Function+0x230>)
 800330a:	ed93 7a02 	vldr	s14, [r3, #8]
 800330e:	eeb0 1a47 	vmov.f32	s2, s14
 8003312:	eef0 0a67 	vmov.f32	s1, s15
 8003316:	ed97 0a06 	vldr	s0, [r7, #24]
 800331a:	492c      	ldr	r1, [pc, #176]	; (80033cc <Control_Function+0x244>)
 800331c:	482c      	ldr	r0, [pc, #176]	; (80033d0 <Control_Function+0x248>)
 800331e:	f7fe f841 	bl	80013a4 <CascadeControl>
	CascadeControl(&Control[3], &Kalman[3], J4,SetPoint_Position[3],SetPoint_Velocity[3]);
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <Control_Function+0x22c>)
 8003324:	edd3 7a03 	vldr	s15, [r3, #12]
 8003328:	4b23      	ldr	r3, [pc, #140]	; (80033b8 <Control_Function+0x230>)
 800332a:	ed93 7a03 	vldr	s14, [r3, #12]
 800332e:	eeb0 1a47 	vmov.f32	s2, s14
 8003332:	eef0 0a67 	vmov.f32	s1, s15
 8003336:	ed97 0a05 	vldr	s0, [r7, #20]
 800333a:	4926      	ldr	r1, [pc, #152]	; (80033d4 <Control_Function+0x24c>)
 800333c:	4826      	ldr	r0, [pc, #152]	; (80033d8 <Control_Function+0x250>)
 800333e:	f7fe f831 	bl	80013a4 <CascadeControl>

	Step_Driver(&Stepper[0], Control[0].Output);
 8003342:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <Control_Function+0x238>)
 8003344:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8003348:	eeb0 0a67 	vmov.f32	s0, s15
 800334c:	4823      	ldr	r0, [pc, #140]	; (80033dc <Control_Function+0x254>)
 800334e:	f7fd fba5 	bl	8000a9c <Step_Driver>
	Step_Driver(&Stepper[1], Control[1].Output);
 8003352:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <Control_Function+0x238>)
 8003354:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 8003358:	eeb0 0a67 	vmov.f32	s0, s15
 800335c:	4820      	ldr	r0, [pc, #128]	; (80033e0 <Control_Function+0x258>)
 800335e:	f7fd fb9d 	bl	8000a9c <Step_Driver>
	Step_Driver(&Stepper[2], Control[2].Output);
 8003362:	4b17      	ldr	r3, [pc, #92]	; (80033c0 <Control_Function+0x238>)
 8003364:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8003368:	eeb0 0a67 	vmov.f32	s0, s15
 800336c:	481d      	ldr	r0, [pc, #116]	; (80033e4 <Control_Function+0x25c>)
 800336e:	f7fd fb95 	bl	8000a9c <Step_Driver>
	Step_Driver(&Stepper[3], Control[3].Output);
 8003372:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <Control_Function+0x238>)
 8003374:	edd3 7a6b 	vldr	s15, [r3, #428]	; 0x1ac
 8003378:	eeb0 0a67 	vmov.f32	s0, s15
 800337c:	481a      	ldr	r0, [pc, #104]	; (80033e8 <Control_Function+0x260>)
 800337e:	f7fd fb8d 	bl	8000a9c <Step_Driver>
}
 8003382:	bf00      	nop
 8003384:	3728      	adds	r7, #40	; 0x28
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	f3af 8000 	nop.w
 8003390:	47ae147b 	.word	0x47ae147b
 8003394:	3f747ae1 	.word	0x3f747ae1
 8003398:	20000424 	.word	0x20000424
 800339c:	20000444 	.word	0x20000444
 80033a0:	20000464 	.word	0x20000464
 80033a4:	20000484 	.word	0x20000484
 80033a8:	200004a4 	.word	0x200004a4
 80033ac:	20000140 	.word	0x20000140
 80033b0:	200003b4 	.word	0x200003b4
 80033b4:	200006c4 	.word	0x200006c4
 80033b8:	200004a8 	.word	0x200004a8
 80033bc:	2000031c 	.word	0x2000031c
 80033c0:	2000014c 	.word	0x2000014c
 80033c4:	2000033c 	.word	0x2000033c
 80033c8:	200001b8 	.word	0x200001b8
 80033cc:	2000035c 	.word	0x2000035c
 80033d0:	20000224 	.word	0x20000224
 80033d4:	2000037c 	.word	0x2000037c
 80033d8:	20000290 	.word	0x20000290
 80033dc:	2000064c 	.word	0x2000064c
 80033e0:	20000660 	.word	0x20000660
 80033e4:	20000674 	.word	0x20000674
 80033e8:	20000688 	.word	0x20000688

080033ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033f0:	b672      	cpsid	i
}
 80033f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033f4:	e7fe      	b.n	80033f4 <Error_Handler+0x8>
	...

080033f8 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80033fc:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <MX_SPI3_Init+0xa8>)
 80033fe:	4a29      	ldr	r2, [pc, #164]	; (80034a4 <MX_SPI3_Init+0xac>)
 8003400:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003402:	4b27      	ldr	r3, [pc, #156]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003404:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003408:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <MX_SPI3_Init+0xa8>)
 800340c:	2200      	movs	r2, #0
 800340e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003410:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003412:	2207      	movs	r2, #7
 8003414:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003416:	4b22      	ldr	r3, [pc, #136]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003418:	2200      	movs	r2, #0
 800341a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800341c:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <MX_SPI3_Init+0xa8>)
 800341e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003422:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003424:	4b1e      	ldr	r3, [pc, #120]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003426:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800342a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800342c:	4b1c      	ldr	r3, [pc, #112]	; (80034a0 <MX_SPI3_Init+0xa8>)
 800342e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003432:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003434:	4b1a      	ldr	r3, [pc, #104]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003436:	2200      	movs	r2, #0
 8003438:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800343a:	4b19      	ldr	r3, [pc, #100]	; (80034a0 <MX_SPI3_Init+0xa8>)
 800343c:	2200      	movs	r2, #0
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003440:	4b17      	ldr	r3, [pc, #92]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003442:	2200      	movs	r2, #0
 8003444:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003448:	221d      	movs	r2, #29
 800344a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800344c:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <MX_SPI3_Init+0xa8>)
 800344e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003452:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003454:	4b12      	ldr	r3, [pc, #72]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003456:	2200      	movs	r2, #0
 8003458:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <MX_SPI3_Init+0xa8>)
 800345c:	2200      	movs	r2, #0
 800345e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003460:	4b0f      	ldr	r3, [pc, #60]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003462:	2200      	movs	r2, #0
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003466:	4b0e      	ldr	r3, [pc, #56]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003468:	2200      	movs	r2, #0
 800346a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800346c:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <MX_SPI3_Init+0xa8>)
 800346e:	2200      	movs	r2, #0
 8003470:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003472:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003474:	2200      	movs	r2, #0
 8003476:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <MX_SPI3_Init+0xa8>)
 800347a:	2200      	movs	r2, #0
 800347c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800347e:	4b08      	ldr	r3, [pc, #32]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003480:	2200      	movs	r2, #0
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <MX_SPI3_Init+0xa8>)
 8003486:	2200      	movs	r2, #0
 8003488:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800348a:	4805      	ldr	r0, [pc, #20]	; (80034a0 <MX_SPI3_Init+0xa8>)
 800348c:	f00b fcd8 	bl	800ee40 <HAL_SPI_Init>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8003496:	f7ff ffa9 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	200006d4 	.word	0x200006d4
 80034a4:	40003c00 	.word	0x40003c00

080034a8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80034ac:	4b27      	ldr	r3, [pc, #156]	; (800354c <MX_SPI4_Init+0xa4>)
 80034ae:	4a28      	ldr	r2, [pc, #160]	; (8003550 <MX_SPI4_Init+0xa8>)
 80034b0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80034b2:	4b26      	ldr	r3, [pc, #152]	; (800354c <MX_SPI4_Init+0xa4>)
 80034b4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80034b8:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <MX_SPI4_Init+0xa4>)
 80034bc:	2200      	movs	r2, #0
 80034be:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 80034c0:	4b22      	ldr	r3, [pc, #136]	; (800354c <MX_SPI4_Init+0xa4>)
 80034c2:	220f      	movs	r2, #15
 80034c4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80034c6:	4b21      	ldr	r3, [pc, #132]	; (800354c <MX_SPI4_Init+0xa4>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80034cc:	4b1f      	ldr	r3, [pc, #124]	; (800354c <MX_SPI4_Init+0xa4>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80034d2:	4b1e      	ldr	r3, [pc, #120]	; (800354c <MX_SPI4_Init+0xa4>)
 80034d4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80034d8:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80034da:	4b1c      	ldr	r3, [pc, #112]	; (800354c <MX_SPI4_Init+0xa4>)
 80034dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80034e0:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <MX_SPI4_Init+0xa4>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80034e8:	4b18      	ldr	r3, [pc, #96]	; (800354c <MX_SPI4_Init+0xa4>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034ee:	4b17      	ldr	r3, [pc, #92]	; (800354c <MX_SPI4_Init+0xa4>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 80034f4:	4b15      	ldr	r3, [pc, #84]	; (800354c <MX_SPI4_Init+0xa4>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <MX_SPI4_Init+0xa4>)
 80034fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003500:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003502:	4b12      	ldr	r3, [pc, #72]	; (800354c <MX_SPI4_Init+0xa4>)
 8003504:	2200      	movs	r2, #0
 8003506:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003508:	4b10      	ldr	r3, [pc, #64]	; (800354c <MX_SPI4_Init+0xa4>)
 800350a:	2200      	movs	r2, #0
 800350c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <MX_SPI4_Init+0xa4>)
 8003510:	2200      	movs	r2, #0
 8003512:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003514:	4b0d      	ldr	r3, [pc, #52]	; (800354c <MX_SPI4_Init+0xa4>)
 8003516:	2200      	movs	r2, #0
 8003518:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <MX_SPI4_Init+0xa4>)
 800351c:	2200      	movs	r2, #0
 800351e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003520:	4b0a      	ldr	r3, [pc, #40]	; (800354c <MX_SPI4_Init+0xa4>)
 8003522:	2200      	movs	r2, #0
 8003524:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <MX_SPI4_Init+0xa4>)
 8003528:	2200      	movs	r2, #0
 800352a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800352c:	4b07      	ldr	r3, [pc, #28]	; (800354c <MX_SPI4_Init+0xa4>)
 800352e:	2200      	movs	r2, #0
 8003530:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <MX_SPI4_Init+0xa4>)
 8003534:	2200      	movs	r2, #0
 8003536:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003538:	4804      	ldr	r0, [pc, #16]	; (800354c <MX_SPI4_Init+0xa4>)
 800353a:	f00b fc81 	bl	800ee40 <HAL_SPI_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8003544:	f7ff ff52 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003548:	bf00      	nop
 800354a:	bd80      	pop	{r7, pc}
 800354c:	2000075c 	.word	0x2000075c
 8003550:	40013400 	.word	0x40013400

08003554 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b0b8      	sub	sp, #224	; 0xe0
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800355c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800356c:	f107 0318 	add.w	r3, r7, #24
 8003570:	22b4      	movs	r2, #180	; 0xb4
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f011 f82b 	bl	80145d0 <memset>
  if(spiHandle->Instance==SPI3)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a4b      	ldr	r2, [pc, #300]	; (80036ac <HAL_SPI_MspInit+0x158>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d156      	bne.n	8003632 <HAL_SPI_MspInit+0xde>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003588:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 800358a:	2319      	movs	r3, #25
 800358c:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 800358e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003592:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8003594:	2302      	movs	r3, #2
 8003596:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8003598:	2302      	movs	r3, #2
 800359a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800359c:	2302      	movs	r3, #2
 800359e:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80035a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035a8:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80035aa:	2300      	movs	r3, #0
 80035ac:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80035ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035b2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035b4:	f107 0318 	add.w	r3, r7, #24
 80035b8:	4618      	mov	r0, r3
 80035ba:	f009 fbaf 	bl	800cd1c <HAL_RCCEx_PeriphCLKConfig>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 80035c4:	f7ff ff12 	bl	80033ec <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80035c8:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 80035ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035ce:	4a38      	ldr	r2, [pc, #224]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 80035d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035d8:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 80035da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e6:	4b32      	ldr	r3, [pc, #200]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 80035e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ec:	4a30      	ldr	r2, [pc, #192]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 80035ee:	f043 0304 	orr.w	r3, r3, #4
 80035f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035f6:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 80035f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003604:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003608:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360c:	2302      	movs	r3, #2
 800360e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800361e:	2306      	movs	r3, #6
 8003620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003624:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003628:	4619      	mov	r1, r3
 800362a:	4822      	ldr	r0, [pc, #136]	; (80036b4 <HAL_SPI_MspInit+0x160>)
 800362c:	f006 fa7c 	bl	8009b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003630:	e038      	b.n	80036a4 <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a20      	ldr	r2, [pc, #128]	; (80036b8 <HAL_SPI_MspInit+0x164>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d133      	bne.n	80036a4 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800363c:	4b1c      	ldr	r3, [pc, #112]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 800363e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003642:	4a1b      	ldr	r2, [pc, #108]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 8003644:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003648:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800364c:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 800364e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 800365c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003660:	4a13      	ldr	r2, [pc, #76]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 8003662:	f043 0310 	orr.w	r3, r3, #16
 8003666:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <HAL_SPI_MspInit+0x15c>)
 800366c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8003678:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800367c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003680:	2302      	movs	r3, #2
 8003682:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003692:	2305      	movs	r3, #5
 8003694:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003698:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800369c:	4619      	mov	r1, r3
 800369e:	4807      	ldr	r0, [pc, #28]	; (80036bc <HAL_SPI_MspInit+0x168>)
 80036a0:	f006 fa42 	bl	8009b28 <HAL_GPIO_Init>
}
 80036a4:	bf00      	nop
 80036a6:	37e0      	adds	r7, #224	; 0xe0
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40003c00 	.word	0x40003c00
 80036b0:	58024400 	.word	0x58024400
 80036b4:	58020800 	.word	0x58020800
 80036b8:	40013400 	.word	0x40013400
 80036bc:	58021000 	.word	0x58021000

080036c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c6:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <HAL_MspInit+0x30>)
 80036c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036cc:	4a08      	ldr	r2, [pc, #32]	; (80036f0 <HAL_MspInit+0x30>)
 80036ce:	f043 0302 	orr.w	r3, r3, #2
 80036d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_MspInit+0x30>)
 80036d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	58024400 	.word	0x58024400

080036f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80036f8:	e7fe      	b.n	80036f8 <NMI_Handler+0x4>

080036fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036fa:	b480      	push	{r7}
 80036fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036fe:	e7fe      	b.n	80036fe <HardFault_Handler+0x4>

08003700 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003704:	e7fe      	b.n	8003704 <MemManage_Handler+0x4>

08003706 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003706:	b480      	push	{r7}
 8003708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800370a:	e7fe      	b.n	800370a <BusFault_Handler+0x4>

0800370c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003710:	e7fe      	b.n	8003710 <UsageFault_Handler+0x4>

08003712 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003712:	b480      	push	{r7}
 8003714:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003724:	bf00      	nop
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800372e:	b480      	push	{r7}
 8003730:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003732:	bf00      	nop
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003740:	f001 fc2c 	bl	8004f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003744:	bf00      	nop
 8003746:	bd80      	pop	{r7, pc}

08003748 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <DMA1_Stream0_IRQHandler+0x10>)
 800374e:	f005 f877 	bl	8008840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000df4 	.word	0x20000df4

0800375c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8003760:	4802      	ldr	r0, [pc, #8]	; (800376c <DMA1_Stream1_IRQHandler+0x10>)
 8003762:	f005 f86d 	bl	8008840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	20000e6c 	.word	0x20000e6c

08003770 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <DMA1_Stream2_IRQHandler+0x10>)
 8003776:	f005 f863 	bl	8008840 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	20000830 	.word	0x20000830

08003784 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <I2C2_ER_IRQHandler+0x10>)
 800378a:	f006 fccf 	bl	800a12c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	200000f4 	.word	0x200000f4

08003798 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800379c:	4802      	ldr	r0, [pc, #8]	; (80037a8 <USART3_IRQHandler+0x10>)
 800379e:	f00e fa2f 	bl	8011c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037a2:	bf00      	nop
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	20000c38 	.word	0x20000c38

080037ac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80037b0:	4802      	ldr	r0, [pc, #8]	; (80037bc <UART5_IRQHandler+0x10>)
 80037b2:	f00e fa25 	bl	8011c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80037b6:	bf00      	nop
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000ccc 	.word	0x20000ccc

080037c0 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 80037c4:	4802      	ldr	r0, [pc, #8]	; (80037d0 <ADC3_IRQHandler+0x10>)
 80037c6:	f002 fa59 	bl	8005c7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	20000060 	.word	0x20000060

080037d4 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 80037d8:	4802      	ldr	r0, [pc, #8]	; (80037e4 <TIM23_IRQHandler+0x10>)
 80037da:	f00c ffdf 	bl	801079c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 80037de:	bf00      	nop
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000b54 	.word	0x20000b54

080037e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037ec:	4b34      	ldr	r3, [pc, #208]	; (80038c0 <SystemInit+0xd8>)
 80037ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f2:	4a33      	ldr	r2, [pc, #204]	; (80038c0 <SystemInit+0xd8>)
 80037f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037fc:	4b31      	ldr	r3, [pc, #196]	; (80038c4 <SystemInit+0xdc>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	2b06      	cmp	r3, #6
 8003806:	d807      	bhi.n	8003818 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003808:	4b2e      	ldr	r3, [pc, #184]	; (80038c4 <SystemInit+0xdc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f023 030f 	bic.w	r3, r3, #15
 8003810:	4a2c      	ldr	r2, [pc, #176]	; (80038c4 <SystemInit+0xdc>)
 8003812:	f043 0307 	orr.w	r3, r3, #7
 8003816:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003818:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <SystemInit+0xe0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a2a      	ldr	r2, [pc, #168]	; (80038c8 <SystemInit+0xe0>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003824:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <SystemInit+0xe0>)
 8003826:	2200      	movs	r2, #0
 8003828:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800382a:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <SystemInit+0xe0>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	4926      	ldr	r1, [pc, #152]	; (80038c8 <SystemInit+0xe0>)
 8003830:	4b26      	ldr	r3, [pc, #152]	; (80038cc <SystemInit+0xe4>)
 8003832:	4013      	ands	r3, r2
 8003834:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003836:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <SystemInit+0xdc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003842:	4b20      	ldr	r3, [pc, #128]	; (80038c4 <SystemInit+0xdc>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 030f 	bic.w	r3, r3, #15
 800384a:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <SystemInit+0xdc>)
 800384c:	f043 0307 	orr.w	r3, r3, #7
 8003850:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <SystemInit+0xe0>)
 8003854:	2200      	movs	r2, #0
 8003856:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <SystemInit+0xe0>)
 800385a:	2200      	movs	r2, #0
 800385c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800385e:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <SystemInit+0xe0>)
 8003860:	2200      	movs	r2, #0
 8003862:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003864:	4b18      	ldr	r3, [pc, #96]	; (80038c8 <SystemInit+0xe0>)
 8003866:	4a1a      	ldr	r2, [pc, #104]	; (80038d0 <SystemInit+0xe8>)
 8003868:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800386a:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <SystemInit+0xe0>)
 800386c:	4a19      	ldr	r2, [pc, #100]	; (80038d4 <SystemInit+0xec>)
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003870:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <SystemInit+0xe0>)
 8003872:	4a19      	ldr	r2, [pc, #100]	; (80038d8 <SystemInit+0xf0>)
 8003874:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003876:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <SystemInit+0xe0>)
 8003878:	2200      	movs	r2, #0
 800387a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800387c:	4b12      	ldr	r3, [pc, #72]	; (80038c8 <SystemInit+0xe0>)
 800387e:	4a16      	ldr	r2, [pc, #88]	; (80038d8 <SystemInit+0xf0>)
 8003880:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003882:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <SystemInit+0xe0>)
 8003884:	2200      	movs	r2, #0
 8003886:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003888:	4b0f      	ldr	r3, [pc, #60]	; (80038c8 <SystemInit+0xe0>)
 800388a:	4a13      	ldr	r2, [pc, #76]	; (80038d8 <SystemInit+0xf0>)
 800388c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800388e:	4b0e      	ldr	r3, [pc, #56]	; (80038c8 <SystemInit+0xe0>)
 8003890:	2200      	movs	r2, #0
 8003892:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003894:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <SystemInit+0xe0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0b      	ldr	r2, [pc, #44]	; (80038c8 <SystemInit+0xe0>)
 800389a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <SystemInit+0xe0>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038a6:	4b0d      	ldr	r3, [pc, #52]	; (80038dc <SystemInit+0xf4>)
 80038a8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80038ac:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038ae:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <SystemInit+0xd8>)
 80038b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038b4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00
 80038c4:	52002000 	.word	0x52002000
 80038c8:	58024400 	.word	0x58024400
 80038cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80038d0:	02020200 	.word	0x02020200
 80038d4:	01ff0000 	.word	0x01ff0000
 80038d8:	01010280 	.word	0x01010280
 80038dc:	52004000 	.word	0x52004000

080038e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b098      	sub	sp, #96	; 0x60
 80038e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	605a      	str	r2, [r3, #4]
 80038fc:	609a      	str	r2, [r3, #8]
 80038fe:	60da      	str	r2, [r3, #12]
 8003900:	611a      	str	r2, [r3, #16]
 8003902:	615a      	str	r2, [r3, #20]
 8003904:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003906:	1d3b      	adds	r3, r7, #4
 8003908:	2234      	movs	r2, #52	; 0x34
 800390a:	2100      	movs	r1, #0
 800390c:	4618      	mov	r0, r3
 800390e:	f010 fe5f 	bl	80145d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003912:	4b39      	ldr	r3, [pc, #228]	; (80039f8 <MX_TIM1_Init+0x118>)
 8003914:	4a39      	ldr	r2, [pc, #228]	; (80039fc <MX_TIM1_Init+0x11c>)
 8003916:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003918:	4b37      	ldr	r3, [pc, #220]	; (80039f8 <MX_TIM1_Init+0x118>)
 800391a:	2200      	movs	r2, #0
 800391c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800391e:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <MX_TIM1_Init+0x118>)
 8003920:	2200      	movs	r2, #0
 8003922:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 8003924:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <MX_TIM1_Init+0x118>)
 8003926:	f240 1257 	movw	r2, #343	; 0x157
 800392a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800392c:	4b32      	ldr	r3, [pc, #200]	; (80039f8 <MX_TIM1_Init+0x118>)
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <MX_TIM1_Init+0x118>)
 8003934:	2200      	movs	r2, #0
 8003936:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003938:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <MX_TIM1_Init+0x118>)
 800393a:	2280      	movs	r2, #128	; 0x80
 800393c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800393e:	482e      	ldr	r0, [pc, #184]	; (80039f8 <MX_TIM1_Init+0x118>)
 8003940:	f00c fc1a 	bl	8010178 <HAL_TIM_PWM_Init>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800394a:	f7ff fd4f 	bl	80033ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003952:	2300      	movs	r3, #0
 8003954:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003956:	2300      	movs	r3, #0
 8003958:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800395a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800395e:	4619      	mov	r1, r3
 8003960:	4825      	ldr	r0, [pc, #148]	; (80039f8 <MX_TIM1_Init+0x118>)
 8003962:	f00d fea5 	bl	80116b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800396c:	f7ff fd3e 	bl	80033ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003970:	2360      	movs	r3, #96	; 0x60
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003978:	2300      	movs	r3, #0
 800397a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800397c:	2300      	movs	r3, #0
 800397e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8003980:	2304      	movs	r3, #4
 8003982:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003984:	2300      	movs	r3, #0
 8003986:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003988:	2300      	movs	r3, #0
 800398a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800398c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003990:	2200      	movs	r2, #0
 8003992:	4619      	mov	r1, r3
 8003994:	4818      	ldr	r0, [pc, #96]	; (80039f8 <MX_TIM1_Init+0x118>)
 8003996:	f00d f821 	bl	80109dc <HAL_TIM_PWM_ConfigChannel>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80039a0:	f7ff fd24 	bl	80033ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039ac:	2300      	movs	r3, #0
 80039ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80039be:	2300      	movs	r3, #0
 80039c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80039c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	4619      	mov	r1, r3
 80039d8:	4807      	ldr	r0, [pc, #28]	; (80039f8 <MX_TIM1_Init+0x118>)
 80039da:	f00d ff05 	bl	80117e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80039e4:	f7ff fd02 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80039e8:	4803      	ldr	r0, [pc, #12]	; (80039f8 <MX_TIM1_Init+0x118>)
 80039ea:	f000 fecd 	bl	8004788 <HAL_TIM_MspPostInit>

}
 80039ee:	bf00      	nop
 80039f0:	3760      	adds	r7, #96	; 0x60
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000b08 	.word	0x20000b08
 80039fc:	40010000 	.word	0x40010000

08003a00 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08e      	sub	sp, #56	; 0x38
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a14:	f107 031c 	add.w	r3, r7, #28
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	605a      	str	r2, [r3, #4]
 8003a1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a20:	463b      	mov	r3, r7
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	605a      	str	r2, [r3, #4]
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	60da      	str	r2, [r3, #12]
 8003a2c:	611a      	str	r2, [r3, #16]
 8003a2e:	615a      	str	r2, [r3, #20]
 8003a30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a32:	4b2d      	ldr	r3, [pc, #180]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003a34:	4a2d      	ldr	r2, [pc, #180]	; (8003aec <MX_TIM3_Init+0xec>)
 8003a36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a38:	4b2b      	ldr	r3, [pc, #172]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003a44:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a4c:	4b26      	ldr	r3, [pc, #152]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a52:	4b25      	ldr	r3, [pc, #148]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a58:	4823      	ldr	r0, [pc, #140]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003a5a:	f00c fab0 	bl	800ffbe <HAL_TIM_Base_Init>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003a64:	f7ff fcc2 	bl	80033ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a72:	4619      	mov	r1, r3
 8003a74:	481c      	ldr	r0, [pc, #112]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003a76:	f00d f8c5 	bl	8010c04 <HAL_TIM_ConfigClockSource>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003a80:	f7ff fcb4 	bl	80033ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003a84:	4818      	ldr	r0, [pc, #96]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003a86:	f00c fb77 	bl	8010178 <HAL_TIM_PWM_Init>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003a90:	f7ff fcac 	bl	80033ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4811      	ldr	r0, [pc, #68]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003aa4:	f00d fe04 	bl	80116b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003aae:	f7ff fc9d 	bl	80033ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ab2:	2360      	movs	r3, #96	; 0x60
 8003ab4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003aba:	2300      	movs	r3, #0
 8003abc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ac2:	463b      	mov	r3, r7
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4807      	ldr	r0, [pc, #28]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003aca:	f00c ff87 	bl	80109dc <HAL_TIM_PWM_ConfigChannel>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003ad4:	f7ff fc8a 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ad8:	4803      	ldr	r0, [pc, #12]	; (8003ae8 <MX_TIM3_Init+0xe8>)
 8003ada:	f000 fe55 	bl	8004788 <HAL_TIM_MspPostInit>

}
 8003ade:	bf00      	nop
 8003ae0:	3738      	adds	r7, #56	; 0x38
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20000a24 	.word	0x20000a24
 8003aec:	40000400 	.word	0x40000400

08003af0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08c      	sub	sp, #48	; 0x30
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003af6:	f107 030c 	add.w	r3, r7, #12
 8003afa:	2224      	movs	r2, #36	; 0x24
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f010 fd66 	bl	80145d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b04:	463b      	mov	r3, r7
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
 8003b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <MX_TIM4_Init+0xa4>)
 8003b10:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <MX_TIM4_Init+0xa8>)
 8003b12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003b14:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <MX_TIM4_Init+0xa4>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	; (8003b94 <MX_TIM4_Init+0xa4>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8003b20:	4b1c      	ldr	r3, [pc, #112]	; (8003b94 <MX_TIM4_Init+0xa4>)
 8003b22:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8003b26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <MX_TIM4_Init+0xa4>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b2e:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <MX_TIM4_Init+0xa4>)
 8003b30:	2280      	movs	r2, #128	; 0x80
 8003b32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b34:	2303      	movs	r3, #3
 8003b36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b50:	2300      	movs	r3, #0
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003b58:	f107 030c 	add.w	r3, r7, #12
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	480d      	ldr	r0, [pc, #52]	; (8003b94 <MX_TIM4_Init+0xa4>)
 8003b60:	f00c fd76 	bl	8010650 <HAL_TIM_Encoder_Init>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8003b6a:	f7ff fc3f 	bl	80033ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003b76:	463b      	mov	r3, r7
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4806      	ldr	r0, [pc, #24]	; (8003b94 <MX_TIM4_Init+0xa4>)
 8003b7c:	f00d fd98 	bl	80116b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8003b86:	f7ff fc31 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b8a:	bf00      	nop
 8003b8c:	3730      	adds	r7, #48	; 0x30
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200008f4 	.word	0x200008f4
 8003b98:	40000800 	.word	0x40000800

08003b9c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08e      	sub	sp, #56	; 0x38
 8003ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	609a      	str	r2, [r3, #8]
 8003bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003bbc:	463b      	mov	r3, r7
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
 8003bc4:	609a      	str	r2, [r3, #8]
 8003bc6:	60da      	str	r2, [r3, #12]
 8003bc8:	611a      	str	r2, [r3, #16]
 8003bca:	615a      	str	r2, [r3, #20]
 8003bcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003bce:	4b33      	ldr	r3, [pc, #204]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003bd0:	4a33      	ldr	r2, [pc, #204]	; (8003ca0 <MX_TIM5_Init+0x104>)
 8003bd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 8003bd4:	4b31      	ldr	r3, [pc, #196]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003bd6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8003bda:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bdc:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8003be2:	4b2e      	ldr	r3, [pc, #184]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003be4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003be8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bea:	4b2c      	ldr	r3, [pc, #176]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bf0:	4b2a      	ldr	r3, [pc, #168]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003bf6:	4829      	ldr	r0, [pc, #164]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003bf8:	f00c f9e1 	bl	800ffbe <HAL_TIM_Base_Init>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8003c02:	f7ff fbf3 	bl	80033ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003c0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c10:	4619      	mov	r1, r3
 8003c12:	4822      	ldr	r0, [pc, #136]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003c14:	f00c fff6 	bl	8010c04 <HAL_TIM_ConfigClockSource>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8003c1e:	f7ff fbe5 	bl	80033ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003c22:	481e      	ldr	r0, [pc, #120]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003c24:	f00c faa8 	bl	8010178 <HAL_TIM_PWM_Init>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8003c2e:	f7ff fbdd 	bl	80033ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003c3a:	f107 031c 	add.w	r3, r7, #28
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4816      	ldr	r0, [pc, #88]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003c42:	f00d fd35 	bl	80116b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8003c4c:	f7ff fbce 	bl	80033ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c50:	2360      	movs	r3, #96	; 0x60
 8003c52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500-1;
 8003c54:	f240 53db 	movw	r3, #1499	; 0x5db
 8003c58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003c62:	463b      	mov	r3, r7
 8003c64:	2200      	movs	r2, #0
 8003c66:	4619      	mov	r1, r3
 8003c68:	480c      	ldr	r0, [pc, #48]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003c6a:	f00c feb7 	bl	80109dc <HAL_TIM_PWM_ConfigChannel>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d001      	beq.n	8003c78 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8003c74:	f7ff fbba 	bl	80033ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c78:	463b      	mov	r3, r7
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4807      	ldr	r0, [pc, #28]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003c80:	f00c feac 	bl	80109dc <HAL_TIM_PWM_ConfigChannel>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 8003c8a:	f7ff fbaf 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003c8e:	4803      	ldr	r0, [pc, #12]	; (8003c9c <MX_TIM5_Init+0x100>)
 8003c90:	f000 fd7a 	bl	8004788 <HAL_TIM_MspPostInit>

}
 8003c94:	bf00      	nop
 8003c96:	3738      	adds	r7, #56	; 0x38
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	200009d8 	.word	0x200009d8
 8003ca0:	40000c00 	.word	0x40000c00

08003ca4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003caa:	1d3b      	adds	r3, r7, #4
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003cb4:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <MX_TIM6_Init+0x68>)
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <MX_TIM6_Init+0x6c>)
 8003cb8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 8003cba:	4b14      	ldr	r3, [pc, #80]	; (8003d0c <MX_TIM6_Init+0x68>)
 8003cbc:	f44f 7289 	mov.w	r2, #274	; 0x112
 8003cc0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <MX_TIM6_Init+0x68>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003cc8:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <MX_TIM6_Init+0x68>)
 8003cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cd0:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <MX_TIM6_Init+0x68>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003cd6:	480d      	ldr	r0, [pc, #52]	; (8003d0c <MX_TIM6_Init+0x68>)
 8003cd8:	f00c f971 	bl	800ffbe <HAL_TIM_Base_Init>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003ce2:	f7ff fb83 	bl	80033ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003cee:	1d3b      	adds	r3, r7, #4
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4806      	ldr	r0, [pc, #24]	; (8003d0c <MX_TIM6_Init+0x68>)
 8003cf4:	f00d fcdc 	bl	80116b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8003cfe:	f7ff fb75 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000abc 	.word	0x20000abc
 8003d10:	40001000 	.word	0x40001000

08003d14 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b08c      	sub	sp, #48	; 0x30
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003d1a:	f107 030c 	add.w	r3, r7, #12
 8003d1e:	2224      	movs	r2, #36	; 0x24
 8003d20:	2100      	movs	r1, #0
 8003d22:	4618      	mov	r0, r3
 8003d24:	f010 fc54 	bl	80145d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d28:	463b      	mov	r3, r7
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
 8003d30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003d32:	4b23      	ldr	r3, [pc, #140]	; (8003dc0 <MX_TIM8_Init+0xac>)
 8003d34:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <MX_TIM8_Init+0xb0>)
 8003d36:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003d38:	4b21      	ldr	r3, [pc, #132]	; (8003dc0 <MX_TIM8_Init+0xac>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <MX_TIM8_Init+0xac>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8003d44:	4b1e      	ldr	r3, [pc, #120]	; (8003dc0 <MX_TIM8_Init+0xac>)
 8003d46:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8003d4a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d4c:	4b1c      	ldr	r3, [pc, #112]	; (8003dc0 <MX_TIM8_Init+0xac>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003d52:	4b1b      	ldr	r3, [pc, #108]	; (8003dc0 <MX_TIM8_Init+0xac>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d58:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <MX_TIM8_Init+0xac>)
 8003d5a:	2280      	movs	r2, #128	; 0x80
 8003d5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003d62:	2300      	movs	r3, #0
 8003d64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003d66:	2301      	movs	r3, #1
 8003d68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003d76:	2301      	movs	r3, #1
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003d82:	f107 030c 	add.w	r3, r7, #12
 8003d86:	4619      	mov	r1, r3
 8003d88:	480d      	ldr	r0, [pc, #52]	; (8003dc0 <MX_TIM8_Init+0xac>)
 8003d8a:	f00c fc61 	bl	8010650 <HAL_TIM_Encoder_Init>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8003d94:	f7ff fb2a 	bl	80033ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003da0:	2300      	movs	r3, #0
 8003da2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003da4:	463b      	mov	r3, r7
 8003da6:	4619      	mov	r1, r3
 8003da8:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <MX_TIM8_Init+0xac>)
 8003daa:	f00d fc81 	bl	80116b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8003db4:	f7ff fb1a 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003db8:	bf00      	nop
 8003dba:	3730      	adds	r7, #48	; 0x30
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	200008a8 	.word	0x200008a8
 8003dc4:	40010400 	.word	0x40010400

08003dc8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003dce:	1d3b      	adds	r3, r7, #4
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	605a      	str	r2, [r3, #4]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	60da      	str	r2, [r3, #12]
 8003dda:	611a      	str	r2, [r3, #16]
 8003ddc:	615a      	str	r2, [r3, #20]
 8003dde:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003de0:	4b1f      	ldr	r3, [pc, #124]	; (8003e60 <MX_TIM13_Init+0x98>)
 8003de2:	4a20      	ldr	r2, [pc, #128]	; (8003e64 <MX_TIM13_Init+0x9c>)
 8003de4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 8003de6:	4b1e      	ldr	r3, [pc, #120]	; (8003e60 <MX_TIM13_Init+0x98>)
 8003de8:	f240 2225 	movw	r2, #549	; 0x225
 8003dec:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dee:	4b1c      	ldr	r3, [pc, #112]	; (8003e60 <MX_TIM13_Init+0x98>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8003df4:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <MX_TIM13_Init+0x98>)
 8003df6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003dfa:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dfc:	4b18      	ldr	r3, [pc, #96]	; (8003e60 <MX_TIM13_Init+0x98>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e02:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <MX_TIM13_Init+0x98>)
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8003e08:	4815      	ldr	r0, [pc, #84]	; (8003e60 <MX_TIM13_Init+0x98>)
 8003e0a:	f00c f8d8 	bl	800ffbe <HAL_TIM_Base_Init>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8003e14:	f7ff faea 	bl	80033ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8003e18:	4811      	ldr	r0, [pc, #68]	; (8003e60 <MX_TIM13_Init+0x98>)
 8003e1a:	f00c f9ad 	bl	8010178 <HAL_TIM_PWM_Init>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8003e24:	f7ff fae2 	bl	80033ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e28:	2360      	movs	r3, #96	; 0x60
 8003e2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8003e2c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003e30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e3a:	1d3b      	adds	r3, r7, #4
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4807      	ldr	r0, [pc, #28]	; (8003e60 <MX_TIM13_Init+0x98>)
 8003e42:	f00c fdcb 	bl	80109dc <HAL_TIM_PWM_ConfigChannel>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8003e4c:	f7ff face 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8003e50:	4803      	ldr	r0, [pc, #12]	; (8003e60 <MX_TIM13_Init+0x98>)
 8003e52:	f000 fc99 	bl	8004788 <HAL_TIM_MspPostInit>

}
 8003e56:	bf00      	nop
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	20000a70 	.word	0x20000a70
 8003e64:	40001c00 	.word	0x40001c00

08003e68 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e6e:	1d3b      	adds	r3, r7, #4
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
 8003e74:	605a      	str	r2, [r3, #4]
 8003e76:	609a      	str	r2, [r3, #8]
 8003e78:	60da      	str	r2, [r3, #12]
 8003e7a:	611a      	str	r2, [r3, #16]
 8003e7c:	615a      	str	r2, [r3, #20]
 8003e7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003e80:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <MX_TIM14_Init+0x98>)
 8003e82:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <MX_TIM14_Init+0x9c>)
 8003e84:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 8003e86:	4b1e      	ldr	r3, [pc, #120]	; (8003f00 <MX_TIM14_Init+0x98>)
 8003e88:	f240 2225 	movw	r2, #549	; 0x225
 8003e8c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e8e:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <MX_TIM14_Init+0x98>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 8003e94:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <MX_TIM14_Init+0x98>)
 8003e96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e9a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e9c:	4b18      	ldr	r3, [pc, #96]	; (8003f00 <MX_TIM14_Init+0x98>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <MX_TIM14_Init+0x98>)
 8003ea4:	2280      	movs	r2, #128	; 0x80
 8003ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003ea8:	4815      	ldr	r0, [pc, #84]	; (8003f00 <MX_TIM14_Init+0x98>)
 8003eaa:	f00c f888 	bl	800ffbe <HAL_TIM_Base_Init>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 8003eb4:	f7ff fa9a 	bl	80033ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8003eb8:	4811      	ldr	r0, [pc, #68]	; (8003f00 <MX_TIM14_Init+0x98>)
 8003eba:	f00c f95d 	bl	8010178 <HAL_TIM_PWM_Init>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8003ec4:	f7ff fa92 	bl	80033ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ec8:	2360      	movs	r3, #96	; 0x60
 8003eca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8003ecc:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003ed0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	2200      	movs	r2, #0
 8003ede:	4619      	mov	r1, r3
 8003ee0:	4807      	ldr	r0, [pc, #28]	; (8003f00 <MX_TIM14_Init+0x98>)
 8003ee2:	f00c fd7b 	bl	80109dc <HAL_TIM_PWM_ConfigChannel>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8003eec:	f7ff fa7e 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8003ef0:	4803      	ldr	r0, [pc, #12]	; (8003f00 <MX_TIM14_Init+0x98>)
 8003ef2:	f000 fc49 	bl	8004788 <HAL_TIM_MspPostInit>

}
 8003ef6:	bf00      	nop
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000ba0 	.word	0x20000ba0
 8003f04:	40002000 	.word	0x40002000

08003f08 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b098      	sub	sp, #96	; 0x60
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	605a      	str	r2, [r3, #4]
 8003f18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	605a      	str	r2, [r3, #4]
 8003f24:	609a      	str	r2, [r3, #8]
 8003f26:	60da      	str	r2, [r3, #12]
 8003f28:	611a      	str	r2, [r3, #16]
 8003f2a:	615a      	str	r2, [r3, #20]
 8003f2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	2234      	movs	r2, #52	; 0x34
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f010 fb4b 	bl	80145d0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003f3a:	4b35      	ldr	r3, [pc, #212]	; (8004010 <MX_TIM15_Init+0x108>)
 8003f3c:	4a35      	ldr	r2, [pc, #212]	; (8004014 <MX_TIM15_Init+0x10c>)
 8003f3e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 8003f40:	4b33      	ldr	r3, [pc, #204]	; (8004010 <MX_TIM15_Init+0x108>)
 8003f42:	f240 2225 	movw	r2, #549	; 0x225
 8003f46:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f48:	4b31      	ldr	r3, [pc, #196]	; (8004010 <MX_TIM15_Init+0x108>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8003f4e:	4b30      	ldr	r3, [pc, #192]	; (8004010 <MX_TIM15_Init+0x108>)
 8003f50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f54:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f56:	4b2e      	ldr	r3, [pc, #184]	; (8004010 <MX_TIM15_Init+0x108>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003f5c:	4b2c      	ldr	r3, [pc, #176]	; (8004010 <MX_TIM15_Init+0x108>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f62:	4b2b      	ldr	r3, [pc, #172]	; (8004010 <MX_TIM15_Init+0x108>)
 8003f64:	2280      	movs	r2, #128	; 0x80
 8003f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003f68:	4829      	ldr	r0, [pc, #164]	; (8004010 <MX_TIM15_Init+0x108>)
 8003f6a:	f00c f905 	bl	8010178 <HAL_TIM_PWM_Init>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8003f74:	f7ff fa3a 	bl	80033ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003f80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f84:	4619      	mov	r1, r3
 8003f86:	4822      	ldr	r0, [pc, #136]	; (8004010 <MX_TIM15_Init+0x108>)
 8003f88:	f00d fb92 	bl	80116b0 <HAL_TIMEx_MasterConfigSynchronization>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 8003f92:	f7ff fa2b 	bl	80033ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f96:	2360      	movs	r3, #96	; 0x60
 8003f98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 8003f9a:	f240 13f3 	movw	r3, #499	; 0x1f3
 8003f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003fac:	2300      	movs	r3, #0
 8003fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4814      	ldr	r0, [pc, #80]	; (8004010 <MX_TIM15_Init+0x108>)
 8003fbe:	f00c fd0d 	bl	80109dc <HAL_TIM_PWM_ConfigChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 8003fc8:	f7ff fa10 	bl	80033ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003fe0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fe4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003fee:	1d3b      	adds	r3, r7, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4807      	ldr	r0, [pc, #28]	; (8004010 <MX_TIM15_Init+0x108>)
 8003ff4:	f00d fbf8 	bl	80117e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8003ffe:	f7ff f9f5 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004002:	4803      	ldr	r0, [pc, #12]	; (8004010 <MX_TIM15_Init+0x108>)
 8004004:	f000 fbc0 	bl	8004788 <HAL_TIM_MspPostInit>

}
 8004008:	bf00      	nop
 800400a:	3760      	adds	r7, #96	; 0x60
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20000940 	.word	0x20000940
 8004014:	40014000 	.word	0x40014000

08004018 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b094      	sub	sp, #80	; 0x50
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800401e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004022:	2200      	movs	r2, #0
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	609a      	str	r2, [r3, #8]
 800402a:	60da      	str	r2, [r3, #12]
 800402c:	611a      	str	r2, [r3, #16]
 800402e:	615a      	str	r2, [r3, #20]
 8004030:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004032:	463b      	mov	r3, r7
 8004034:	2234      	movs	r2, #52	; 0x34
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f010 fac9 	bl	80145d0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800403e:	4b32      	ldr	r3, [pc, #200]	; (8004108 <MX_TIM16_Init+0xf0>)
 8004040:	4a32      	ldr	r2, [pc, #200]	; (800410c <MX_TIM16_Init+0xf4>)
 8004042:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8004044:	4b30      	ldr	r3, [pc, #192]	; (8004108 <MX_TIM16_Init+0xf0>)
 8004046:	f240 2225 	movw	r2, #549	; 0x225
 800404a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800404c:	4b2e      	ldr	r3, [pc, #184]	; (8004108 <MX_TIM16_Init+0xf0>)
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8004052:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <MX_TIM16_Init+0xf0>)
 8004054:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004058:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800405a:	4b2b      	ldr	r3, [pc, #172]	; (8004108 <MX_TIM16_Init+0xf0>)
 800405c:	2200      	movs	r2, #0
 800405e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004060:	4b29      	ldr	r3, [pc, #164]	; (8004108 <MX_TIM16_Init+0xf0>)
 8004062:	2200      	movs	r2, #0
 8004064:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004066:	4b28      	ldr	r3, [pc, #160]	; (8004108 <MX_TIM16_Init+0xf0>)
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800406c:	4826      	ldr	r0, [pc, #152]	; (8004108 <MX_TIM16_Init+0xf0>)
 800406e:	f00b ffa6 	bl	800ffbe <HAL_TIM_Base_Init>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8004078:	f7ff f9b8 	bl	80033ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800407c:	4822      	ldr	r0, [pc, #136]	; (8004108 <MX_TIM16_Init+0xf0>)
 800407e:	f00c f87b 	bl	8010178 <HAL_TIM_PWM_Init>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8004088:	f7ff f9b0 	bl	80033ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800408c:	2360      	movs	r3, #96	; 0x60
 800408e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8004090:	f240 13f3 	movw	r3, #499	; 0x1f3
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004096:	2300      	movs	r3, #0
 8004098:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800409a:	2300      	movs	r3, #0
 800409c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800409e:	2300      	movs	r3, #0
 80040a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040a2:	2300      	movs	r3, #0
 80040a4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040a6:	2300      	movs	r3, #0
 80040a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040ae:	2200      	movs	r2, #0
 80040b0:	4619      	mov	r1, r3
 80040b2:	4815      	ldr	r0, [pc, #84]	; (8004108 <MX_TIM16_Init+0xf0>)
 80040b4:	f00c fc92 	bl	80109dc <HAL_TIM_PWM_ConfigChannel>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 80040be:	f7ff f995 	bl	80033ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040c2:	2300      	movs	r3, #0
 80040c4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040ca:	2300      	movs	r3, #0
 80040cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040ce:	2300      	movs	r3, #0
 80040d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040d2:	2300      	movs	r3, #0
 80040d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040e0:	2300      	movs	r3, #0
 80040e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80040e4:	463b      	mov	r3, r7
 80040e6:	4619      	mov	r1, r3
 80040e8:	4807      	ldr	r0, [pc, #28]	; (8004108 <MX_TIM16_Init+0xf0>)
 80040ea:	f00d fb7d 	bl	80117e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 80040f4:	f7ff f97a 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80040f8:	4803      	ldr	r0, [pc, #12]	; (8004108 <MX_TIM16_Init+0xf0>)
 80040fa:	f000 fb45 	bl	8004788 <HAL_TIM_MspPostInit>

}
 80040fe:	bf00      	nop
 8004100:	3750      	adds	r7, #80	; 0x50
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	20000bec 	.word	0x20000bec
 800410c:	40014400 	.word	0x40014400

08004110 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b094      	sub	sp, #80	; 0x50
 8004114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004116:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	609a      	str	r2, [r3, #8]
 8004122:	60da      	str	r2, [r3, #12]
 8004124:	611a      	str	r2, [r3, #16]
 8004126:	615a      	str	r2, [r3, #20]
 8004128:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800412a:	463b      	mov	r3, r7
 800412c:	2234      	movs	r2, #52	; 0x34
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f010 fa4d 	bl	80145d0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8004136:	4b32      	ldr	r3, [pc, #200]	; (8004200 <MX_TIM17_Init+0xf0>)
 8004138:	4a32      	ldr	r2, [pc, #200]	; (8004204 <MX_TIM17_Init+0xf4>)
 800413a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 800413c:	4b30      	ldr	r3, [pc, #192]	; (8004200 <MX_TIM17_Init+0xf0>)
 800413e:	f240 2225 	movw	r2, #549	; 0x225
 8004142:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004144:	4b2e      	ldr	r3, [pc, #184]	; (8004200 <MX_TIM17_Init+0xf0>)
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 800414a:	4b2d      	ldr	r3, [pc, #180]	; (8004200 <MX_TIM17_Init+0xf0>)
 800414c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004150:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004152:	4b2b      	ldr	r3, [pc, #172]	; (8004200 <MX_TIM17_Init+0xf0>)
 8004154:	2200      	movs	r2, #0
 8004156:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8004158:	4b29      	ldr	r3, [pc, #164]	; (8004200 <MX_TIM17_Init+0xf0>)
 800415a:	2200      	movs	r2, #0
 800415c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800415e:	4b28      	ldr	r3, [pc, #160]	; (8004200 <MX_TIM17_Init+0xf0>)
 8004160:	2280      	movs	r2, #128	; 0x80
 8004162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8004164:	4826      	ldr	r0, [pc, #152]	; (8004200 <MX_TIM17_Init+0xf0>)
 8004166:	f00b ff2a 	bl	800ffbe <HAL_TIM_Base_Init>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8004170:	f7ff f93c 	bl	80033ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8004174:	4822      	ldr	r0, [pc, #136]	; (8004200 <MX_TIM17_Init+0xf0>)
 8004176:	f00b ffff 	bl	8010178 <HAL_TIM_PWM_Init>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8004180:	f7ff f934 	bl	80033ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004184:	2360      	movs	r3, #96	; 0x60
 8004186:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8004188:	f240 13f3 	movw	r3, #499	; 0x1f3
 800418c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800418e:	2300      	movs	r3, #0
 8004190:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004192:	2300      	movs	r3, #0
 8004194:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004196:	2300      	movs	r3, #0
 8004198:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800419e:	2300      	movs	r3, #0
 80041a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041a6:	2200      	movs	r2, #0
 80041a8:	4619      	mov	r1, r3
 80041aa:	4815      	ldr	r0, [pc, #84]	; (8004200 <MX_TIM17_Init+0xf0>)
 80041ac:	f00c fc16 	bl	80109dc <HAL_TIM_PWM_ConfigChannel>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 80041b6:	f7ff f919 	bl	80033ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041d8:	2300      	movs	r3, #0
 80041da:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80041dc:	463b      	mov	r3, r7
 80041de:	4619      	mov	r1, r3
 80041e0:	4807      	ldr	r0, [pc, #28]	; (8004200 <MX_TIM17_Init+0xf0>)
 80041e2:	f00d fb01 	bl	80117e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 80041ec:	f7ff f8fe 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80041f0:	4803      	ldr	r0, [pc, #12]	; (8004200 <MX_TIM17_Init+0xf0>)
 80041f2:	f000 fac9 	bl	8004788 <HAL_TIM_MspPostInit>

}
 80041f6:	bf00      	nop
 80041f8:	3750      	adds	r7, #80	; 0x50
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	2000098c 	.word	0x2000098c
 8004204:	40014800 	.word	0x40014800

08004208 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800420e:	f107 0310 	add.w	r3, r7, #16
 8004212:	2200      	movs	r2, #0
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800421c:	1d3b      	adds	r3, r7, #4
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	605a      	str	r2, [r3, #4]
 8004224:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8004226:	4b1e      	ldr	r3, [pc, #120]	; (80042a0 <MX_TIM23_Init+0x98>)
 8004228:	4a1e      	ldr	r2, [pc, #120]	; (80042a4 <MX_TIM23_Init+0x9c>)
 800422a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 800422c:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <MX_TIM23_Init+0x98>)
 800422e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8004232:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004234:	4b1a      	ldr	r3, [pc, #104]	; (80042a0 <MX_TIM23_Init+0x98>)
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 5000-1;
 800423a:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <MX_TIM23_Init+0x98>)
 800423c:	f241 3287 	movw	r2, #4999	; 0x1387
 8004240:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004242:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <MX_TIM23_Init+0x98>)
 8004244:	2200      	movs	r2, #0
 8004246:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004248:	4b15      	ldr	r3, [pc, #84]	; (80042a0 <MX_TIM23_Init+0x98>)
 800424a:	2280      	movs	r2, #128	; 0x80
 800424c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800424e:	4814      	ldr	r0, [pc, #80]	; (80042a0 <MX_TIM23_Init+0x98>)
 8004250:	f00b feb5 	bl	800ffbe <HAL_TIM_Base_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800425a:	f7ff f8c7 	bl	80033ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800425e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004262:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8004264:	f107 0310 	add.w	r3, r7, #16
 8004268:	4619      	mov	r1, r3
 800426a:	480d      	ldr	r0, [pc, #52]	; (80042a0 <MX_TIM23_Init+0x98>)
 800426c:	f00c fcca 	bl	8010c04 <HAL_TIM_ConfigClockSource>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8004276:	f7ff f8b9 	bl	80033ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800427e:	2300      	movs	r3, #0
 8004280:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8004282:	1d3b      	adds	r3, r7, #4
 8004284:	4619      	mov	r1, r3
 8004286:	4806      	ldr	r0, [pc, #24]	; (80042a0 <MX_TIM23_Init+0x98>)
 8004288:	f00d fa12 	bl	80116b0 <HAL_TIMEx_MasterConfigSynchronization>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 8004292:	f7ff f8ab 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8004296:	bf00      	nop
 8004298:	3720      	adds	r7, #32
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	20000b54 	.word	0x20000b54
 80042a4:	4000e000 	.word	0x4000e000

080042a8 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b088      	sub	sp, #32
 80042ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80042ae:	f107 0310 	add.w	r3, r7, #16
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	609a      	str	r2, [r3, #8]
 80042ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	605a      	str	r2, [r3, #4]
 80042c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80042c6:	4b1e      	ldr	r3, [pc, #120]	; (8004340 <MX_TIM24_Init+0x98>)
 80042c8:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <MX_TIM24_Init+0x9c>)
 80042ca:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 80042cc:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <MX_TIM24_Init+0x98>)
 80042ce:	f44f 7289 	mov.w	r2, #274	; 0x112
 80042d2:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d4:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <MX_TIM24_Init+0x98>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80042da:	4b19      	ldr	r3, [pc, #100]	; (8004340 <MX_TIM24_Init+0x98>)
 80042dc:	f04f 32ff 	mov.w	r2, #4294967295
 80042e0:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042e2:	4b17      	ldr	r3, [pc, #92]	; (8004340 <MX_TIM24_Init+0x98>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042e8:	4b15      	ldr	r3, [pc, #84]	; (8004340 <MX_TIM24_Init+0x98>)
 80042ea:	2200      	movs	r2, #0
 80042ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80042ee:	4814      	ldr	r0, [pc, #80]	; (8004340 <MX_TIM24_Init+0x98>)
 80042f0:	f00b fe65 	bl	800ffbe <HAL_TIM_Base_Init>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 80042fa:	f7ff f877 	bl	80033ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004302:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8004304:	f107 0310 	add.w	r3, r7, #16
 8004308:	4619      	mov	r1, r3
 800430a:	480d      	ldr	r0, [pc, #52]	; (8004340 <MX_TIM24_Init+0x98>)
 800430c:	f00c fc7a 	bl	8010c04 <HAL_TIM_ConfigClockSource>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8004316:	f7ff f869 	bl	80033ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8004322:	1d3b      	adds	r3, r7, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4806      	ldr	r0, [pc, #24]	; (8004340 <MX_TIM24_Init+0x98>)
 8004328:	f00d f9c2 	bl	80116b0 <HAL_TIMEx_MasterConfigSynchronization>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8004332:	f7ff f85b 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8004336:	bf00      	nop
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200007e4 	.word	0x200007e4
 8004344:	4000e400 	.word	0x4000e400

08004348 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08a      	sub	sp, #40	; 0x28
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	605a      	str	r2, [r3, #4]
 800435a:	609a      	str	r2, [r3, #8]
 800435c:	60da      	str	r2, [r3, #12]
 800435e:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a3c      	ldr	r2, [pc, #240]	; (8004458 <HAL_TIM_PWM_MspInit+0x110>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d15e      	bne.n	8004428 <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800436a:	4b3c      	ldr	r3, [pc, #240]	; (800445c <HAL_TIM_PWM_MspInit+0x114>)
 800436c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004370:	4a3a      	ldr	r2, [pc, #232]	; (800445c <HAL_TIM_PWM_MspInit+0x114>)
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800437a:	4b38      	ldr	r3, [pc, #224]	; (800445c <HAL_TIM_PWM_MspInit+0x114>)
 800437c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004388:	4b34      	ldr	r3, [pc, #208]	; (800445c <HAL_TIM_PWM_MspInit+0x114>)
 800438a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800438e:	4a33      	ldr	r2, [pc, #204]	; (800445c <HAL_TIM_PWM_MspInit+0x114>)
 8004390:	f043 0301 	orr.w	r3, r3, #1
 8004394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004398:	4b30      	ldr	r3, [pc, #192]	; (800445c <HAL_TIM_PWM_MspInit+0x114>)
 800439a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 80043a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ac:	2302      	movs	r3, #2
 80043ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b4:	2300      	movs	r3, #0
 80043b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043b8:	2301      	movs	r3, #1
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 80043bc:	f107 0314 	add.w	r3, r7, #20
 80043c0:	4619      	mov	r1, r3
 80043c2:	4827      	ldr	r0, [pc, #156]	; (8004460 <HAL_TIM_PWM_MspInit+0x118>)
 80043c4:	f005 fbb0 	bl	8009b28 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream2;
 80043c8:	4b26      	ldr	r3, [pc, #152]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 80043ca:	4a27      	ldr	r2, [pc, #156]	; (8004468 <HAL_TIM_PWM_MspInit+0x120>)
 80043cc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80043ce:	4b25      	ldr	r3, [pc, #148]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 80043d0:	220b      	movs	r2, #11
 80043d2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043d4:	4b23      	ldr	r3, [pc, #140]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 80043d6:	2240      	movs	r2, #64	; 0x40
 80043d8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043da:	4b22      	ldr	r3, [pc, #136]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 80043dc:	2200      	movs	r2, #0
 80043de:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80043e0:	4b20      	ldr	r3, [pc, #128]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 80043e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043e6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043e8:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 80043ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043ee:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043f0:	4b1c      	ldr	r3, [pc, #112]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 80043f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80043f6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80043f8:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80043fe:	4b19      	ldr	r3, [pc, #100]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 8004400:	2200      	movs	r2, #0
 8004402:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004404:	4b17      	ldr	r3, [pc, #92]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 8004406:	2200      	movs	r2, #0
 8004408:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800440a:	4816      	ldr	r0, [pc, #88]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 800440c:	f003 f95c 	bl	80076c8 <HAL_DMA_Init>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 8004416:	f7fe ffe9 	bl	80033ec <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a11      	ldr	r2, [pc, #68]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 800441e:	625a      	str	r2, [r3, #36]	; 0x24
 8004420:	4a10      	ldr	r2, [pc, #64]	; (8004464 <HAL_TIM_PWM_MspInit+0x11c>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004426:	e013      	b.n	8004450 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a0f      	ldr	r2, [pc, #60]	; (800446c <HAL_TIM_PWM_MspInit+0x124>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d10e      	bne.n	8004450 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004432:	4b0a      	ldr	r3, [pc, #40]	; (800445c <HAL_TIM_PWM_MspInit+0x114>)
 8004434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004438:	4a08      	ldr	r2, [pc, #32]	; (800445c <HAL_TIM_PWM_MspInit+0x114>)
 800443a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800443e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004442:	4b06      	ldr	r3, [pc, #24]	; (800445c <HAL_TIM_PWM_MspInit+0x114>)
 8004444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444c:	60bb      	str	r3, [r7, #8]
 800444e:	68bb      	ldr	r3, [r7, #8]
}
 8004450:	bf00      	nop
 8004452:	3728      	adds	r7, #40	; 0x28
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40010000 	.word	0x40010000
 800445c:	58024400 	.word	0x58024400
 8004460:	58020000 	.word	0x58020000
 8004464:	20000830 	.word	0x20000830
 8004468:	40020040 	.word	0x40020040
 800446c:	40014000 	.word	0x40014000

08004470 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b092      	sub	sp, #72	; 0x48
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004478:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	60da      	str	r2, [r3, #12]
 8004486:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM3)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a72      	ldr	r2, [pc, #456]	; (8004658 <HAL_TIM_Base_MspInit+0x1e8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d12e      	bne.n	80044f0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004492:	4b72      	ldr	r3, [pc, #456]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004498:	4a70      	ldr	r2, [pc, #448]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 800449a:	f043 0302 	orr.w	r3, r3, #2
 800449e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80044a2:	4b6e      	ldr	r3, [pc, #440]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80044a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	633b      	str	r3, [r7, #48]	; 0x30
 80044ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b0:	4b6a      	ldr	r3, [pc, #424]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80044b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044b6:	4a69      	ldr	r2, [pc, #420]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80044b8:	f043 0302 	orr.w	r3, r3, #2
 80044bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80044c0:	4b66      	ldr	r3, [pc, #408]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80044c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC5B_DIR_Pin;
 80044ce:	2320      	movs	r3, #32
 80044d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044d2:	2302      	movs	r3, #2
 80044d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044da:	2300      	movs	r3, #0
 80044dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044de:	2302      	movs	r3, #2
 80044e0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(ENC5B_DIR_GPIO_Port, &GPIO_InitStruct);
 80044e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80044e6:	4619      	mov	r1, r3
 80044e8:	485d      	ldr	r0, [pc, #372]	; (8004660 <HAL_TIM_Base_MspInit+0x1f0>)
 80044ea:	f005 fb1d 	bl	8009b28 <HAL_GPIO_Init>
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 80044ee:	e0ae      	b.n	800464e <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM5)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a5b      	ldr	r2, [pc, #364]	; (8004664 <HAL_TIM_Base_MspInit+0x1f4>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d10f      	bne.n	800451a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80044fa:	4b58      	ldr	r3, [pc, #352]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80044fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004500:	4a56      	ldr	r2, [pc, #344]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004502:	f043 0308 	orr.w	r3, r3, #8
 8004506:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800450a:	4b54      	ldr	r3, [pc, #336]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 800450c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004518:	e099      	b.n	800464e <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM6)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a52      	ldr	r2, [pc, #328]	; (8004668 <HAL_TIM_Base_MspInit+0x1f8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d10f      	bne.n	8004544 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004524:	4b4d      	ldr	r3, [pc, #308]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004526:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800452a:	4a4c      	ldr	r2, [pc, #304]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 800452c:	f043 0310 	orr.w	r3, r3, #16
 8004530:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004534:	4b49      	ldr	r3, [pc, #292]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800453a:	f003 0310 	and.w	r3, r3, #16
 800453e:	627b      	str	r3, [r7, #36]	; 0x24
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004542:	e084      	b.n	800464e <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM13)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a48      	ldr	r2, [pc, #288]	; (800466c <HAL_TIM_Base_MspInit+0x1fc>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d10f      	bne.n	800456e <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800454e:	4b43      	ldr	r3, [pc, #268]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004554:	4a41      	ldr	r2, [pc, #260]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800455a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800455e:	4b3f      	ldr	r3, [pc, #252]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004568:	623b      	str	r3, [r7, #32]
 800456a:	6a3b      	ldr	r3, [r7, #32]
}
 800456c:	e06f      	b.n	800464e <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM14)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a3f      	ldr	r2, [pc, #252]	; (8004670 <HAL_TIM_Base_MspInit+0x200>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d10f      	bne.n	8004598 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004578:	4b38      	ldr	r3, [pc, #224]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 800457a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800457e:	4a37      	ldr	r2, [pc, #220]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004584:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004588:	4b34      	ldr	r3, [pc, #208]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 800458a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800458e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	69fb      	ldr	r3, [r7, #28]
}
 8004596:	e05a      	b.n	800464e <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM16)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a35      	ldr	r2, [pc, #212]	; (8004674 <HAL_TIM_Base_MspInit+0x204>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10f      	bne.n	80045c2 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80045a2:	4b2e      	ldr	r3, [pc, #184]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80045a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045a8:	4a2c      	ldr	r2, [pc, #176]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80045aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045b2:	4b2a      	ldr	r3, [pc, #168]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80045b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045bc:	61bb      	str	r3, [r7, #24]
 80045be:	69bb      	ldr	r3, [r7, #24]
}
 80045c0:	e045      	b.n	800464e <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM17)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a2c      	ldr	r2, [pc, #176]	; (8004678 <HAL_TIM_Base_MspInit+0x208>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d10f      	bne.n	80045ec <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80045cc:	4b23      	ldr	r3, [pc, #140]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80045ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045d2:	4a22      	ldr	r2, [pc, #136]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80045d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045d8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80045dc:	4b1f      	ldr	r3, [pc, #124]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80045de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	697b      	ldr	r3, [r7, #20]
}
 80045ea:	e030      	b.n	800464e <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM23)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a22      	ldr	r2, [pc, #136]	; (800467c <HAL_TIM_Base_MspInit+0x20c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d117      	bne.n	8004626 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80045f6:	4b19      	ldr	r3, [pc, #100]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80045f8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80045fc:	4a17      	ldr	r2, [pc, #92]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 80045fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004602:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004606:	4b15      	ldr	r3, [pc, #84]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004608:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800460c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004610:	613b      	str	r3, [r7, #16]
 8004612:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8004614:	2200      	movs	r2, #0
 8004616:	2100      	movs	r1, #0
 8004618:	20a1      	movs	r0, #161	; 0xa1
 800461a:	f002 fe22 	bl	8007262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 800461e:	20a1      	movs	r0, #161	; 0xa1
 8004620:	f002 fe39 	bl	8007296 <HAL_NVIC_EnableIRQ>
}
 8004624:	e013      	b.n	800464e <HAL_TIM_Base_MspInit+0x1de>
  else if(tim_baseHandle->Instance==TIM24)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a15      	ldr	r2, [pc, #84]	; (8004680 <HAL_TIM_Base_MspInit+0x210>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d10e      	bne.n	800464e <HAL_TIM_Base_MspInit+0x1de>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004632:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004636:	4a09      	ldr	r2, [pc, #36]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004638:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800463c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <HAL_TIM_Base_MspInit+0x1ec>)
 8004642:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	68fb      	ldr	r3, [r7, #12]
}
 800464e:	bf00      	nop
 8004650:	3748      	adds	r7, #72	; 0x48
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	40000400 	.word	0x40000400
 800465c:	58024400 	.word	0x58024400
 8004660:	58020400 	.word	0x58020400
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40001000 	.word	0x40001000
 800466c:	40001c00 	.word	0x40001c00
 8004670:	40002000 	.word	0x40002000
 8004674:	40014400 	.word	0x40014400
 8004678:	40014800 	.word	0x40014800
 800467c:	4000e000 	.word	0x4000e000
 8004680:	4000e400 	.word	0x4000e400

08004684 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b08c      	sub	sp, #48	; 0x30
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800468c:	f107 031c 	add.w	r3, r7, #28
 8004690:	2200      	movs	r2, #0
 8004692:	601a      	str	r2, [r3, #0]
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	609a      	str	r2, [r3, #8]
 8004698:	60da      	str	r2, [r3, #12]
 800469a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a34      	ldr	r2, [pc, #208]	; (8004774 <HAL_TIM_Encoder_MspInit+0xf0>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d12f      	bne.n	8004706 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80046a6:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 80046a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046ac:	4a32      	ldr	r2, [pc, #200]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 80046ae:	f043 0304 	orr.w	r3, r3, #4
 80046b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80046b6:	4b30      	ldr	r3, [pc, #192]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 80046b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046c4:	4b2c      	ldr	r3, [pc, #176]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 80046c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046ca:	4a2b      	ldr	r2, [pc, #172]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 80046cc:	f043 0308 	orr.w	r3, r3, #8
 80046d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80046d4:	4b28      	ldr	r3, [pc, #160]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 80046d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	697b      	ldr	r3, [r7, #20]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 80046e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80046e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e8:	2302      	movs	r3, #2
 80046ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80046f4:	2302      	movs	r3, #2
 80046f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046f8:	f107 031c 	add.w	r3, r7, #28
 80046fc:	4619      	mov	r1, r3
 80046fe:	481f      	ldr	r0, [pc, #124]	; (800477c <HAL_TIM_Encoder_MspInit+0xf8>)
 8004700:	f005 fa12 	bl	8009b28 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004704:	e032      	b.n	800476c <HAL_TIM_Encoder_MspInit+0xe8>
  else if(tim_encoderHandle->Instance==TIM8)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1d      	ldr	r2, [pc, #116]	; (8004780 <HAL_TIM_Encoder_MspInit+0xfc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d12d      	bne.n	800476c <HAL_TIM_Encoder_MspInit+0xe8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004710:	4b19      	ldr	r3, [pc, #100]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004712:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004716:	4a18      	ldr	r2, [pc, #96]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004718:	f043 0302 	orr.w	r3, r3, #2
 800471c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004720:	4b15      	ldr	r3, [pc, #84]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	613b      	str	r3, [r7, #16]
 800472c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800472e:	4b12      	ldr	r3, [pc, #72]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004734:	4a10      	ldr	r2, [pc, #64]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004736:	f043 0304 	orr.w	r3, r3, #4
 800473a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800473e:	4b0e      	ldr	r3, [pc, #56]	; (8004778 <HAL_TIM_Encoder_MspInit+0xf4>)
 8004740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 800474c:	23c0      	movs	r3, #192	; 0xc0
 800474e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004750:	2302      	movs	r3, #2
 8004752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004758:	2300      	movs	r3, #0
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800475c:	2303      	movs	r3, #3
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004760:	f107 031c 	add.w	r3, r7, #28
 8004764:	4619      	mov	r1, r3
 8004766:	4807      	ldr	r0, [pc, #28]	; (8004784 <HAL_TIM_Encoder_MspInit+0x100>)
 8004768:	f005 f9de 	bl	8009b28 <HAL_GPIO_Init>
}
 800476c:	bf00      	nop
 800476e:	3730      	adds	r7, #48	; 0x30
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40000800 	.word	0x40000800
 8004778:	58024400 	.word	0x58024400
 800477c:	58020c00 	.word	0x58020c00
 8004780:	40010400 	.word	0x40010400
 8004784:	58020800 	.word	0x58020800

08004788 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b090      	sub	sp, #64	; 0x40
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	605a      	str	r2, [r3, #4]
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	60da      	str	r2, [r3, #12]
 800479e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a95      	ldr	r2, [pc, #596]	; (80049fc <HAL_TIM_MspPostInit+0x274>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d120      	bne.n	80047ec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047aa:	4b95      	ldr	r3, [pc, #596]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 80047ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047b0:	4a93      	ldr	r2, [pc, #588]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047ba:	4b91      	ldr	r3, [pc, #580]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 80047bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 80047c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ce:	2302      	movs	r3, #2
 80047d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d2:	2300      	movs	r3, #0
 80047d4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d6:	2300      	movs	r3, #0
 80047d8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80047da:	2301      	movs	r3, #1
 80047dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 80047de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047e2:	4619      	mov	r1, r3
 80047e4:	4887      	ldr	r0, [pc, #540]	; (8004a04 <HAL_TIM_MspPostInit+0x27c>)
 80047e6:	f005 f99f 	bl	8009b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80047ea:	e103      	b.n	80049f4 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM3)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a85      	ldr	r2, [pc, #532]	; (8004a08 <HAL_TIM_MspPostInit+0x280>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d11f      	bne.n	8004836 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047f6:	4b82      	ldr	r3, [pc, #520]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 80047f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047fc:	4a80      	ldr	r2, [pc, #512]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 80047fe:	f043 0302 	orr.w	r3, r3, #2
 8004802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004806:	4b7e      	ldr	r3, [pc, #504]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 8004808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	627b      	str	r3, [r7, #36]	; 0x24
 8004812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = ENC5A_StepGriper_Pin;
 8004814:	2310      	movs	r3, #16
 8004816:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004818:	2302      	movs	r3, #2
 800481a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004820:	2300      	movs	r3, #0
 8004822:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004824:	2302      	movs	r3, #2
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC5A_StepGriper_GPIO_Port, &GPIO_InitStruct);
 8004828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800482c:	4619      	mov	r1, r3
 800482e:	4877      	ldr	r0, [pc, #476]	; (8004a0c <HAL_TIM_MspPostInit+0x284>)
 8004830:	f005 f97a 	bl	8009b28 <HAL_GPIO_Init>
}
 8004834:	e0de      	b.n	80049f4 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM5)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a75      	ldr	r2, [pc, #468]	; (8004a10 <HAL_TIM_MspPostInit+0x288>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d11f      	bne.n	8004880 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004840:	4b6f      	ldr	r3, [pc, #444]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 8004842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004846:	4a6e      	ldr	r2, [pc, #440]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 8004848:	f043 0301 	orr.w	r3, r3, #1
 800484c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004850:	4b6b      	ldr	r3, [pc, #428]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 8004852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	623b      	str	r3, [r7, #32]
 800485c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800485e:	2303      	movs	r3, #3
 8004860:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004862:	2302      	movs	r3, #2
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004866:	2300      	movs	r3, #0
 8004868:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486a:	2300      	movs	r3, #0
 800486c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800486e:	2302      	movs	r3, #2
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004876:	4619      	mov	r1, r3
 8004878:	4862      	ldr	r0, [pc, #392]	; (8004a04 <HAL_TIM_MspPostInit+0x27c>)
 800487a:	f005 f955 	bl	8009b28 <HAL_GPIO_Init>
}
 800487e:	e0b9      	b.n	80049f4 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM13)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a63      	ldr	r2, [pc, #396]	; (8004a14 <HAL_TIM_MspPostInit+0x28c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d11f      	bne.n	80048ca <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800488a:	4b5d      	ldr	r3, [pc, #372]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 800488c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004890:	4a5b      	ldr	r2, [pc, #364]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800489a:	4b59      	ldr	r3, [pc, #356]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 800489c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	61fb      	str	r3, [r7, #28]
 80048a6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 80048a8:	2340      	movs	r3, #64	; 0x40
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ac:	2302      	movs	r3, #2
 80048ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b4:	2300      	movs	r3, #0
 80048b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80048b8:	2309      	movs	r3, #9
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80048bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048c0:	4619      	mov	r1, r3
 80048c2:	4850      	ldr	r0, [pc, #320]	; (8004a04 <HAL_TIM_MspPostInit+0x27c>)
 80048c4:	f005 f930 	bl	8009b28 <HAL_GPIO_Init>
}
 80048c8:	e094      	b.n	80049f4 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM14)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a52      	ldr	r2, [pc, #328]	; (8004a18 <HAL_TIM_MspPostInit+0x290>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d11f      	bne.n	8004914 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048d4:	4b4a      	ldr	r3, [pc, #296]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 80048d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048da:	4a49      	ldr	r2, [pc, #292]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 80048dc:	f043 0301 	orr.w	r3, r3, #1
 80048e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048e4:	4b46      	ldr	r3, [pc, #280]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 80048e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP2_Pin;
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f6:	2302      	movs	r3, #2
 80048f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048fe:	2300      	movs	r3, #0
 8004900:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8004902:	2309      	movs	r3, #9
 8004904:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8004906:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800490a:	4619      	mov	r1, r3
 800490c:	483d      	ldr	r0, [pc, #244]	; (8004a04 <HAL_TIM_MspPostInit+0x27c>)
 800490e:	f005 f90b 	bl	8009b28 <HAL_GPIO_Init>
}
 8004912:	e06f      	b.n	80049f4 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM15)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a40      	ldr	r2, [pc, #256]	; (8004a1c <HAL_TIM_MspPostInit+0x294>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d11f      	bne.n	800495e <HAL_TIM_MspPostInit+0x1d6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800491e:	4b38      	ldr	r3, [pc, #224]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 8004920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004924:	4a36      	ldr	r2, [pc, #216]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 8004926:	f043 0310 	orr.w	r3, r3, #16
 800492a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800492e:	4b34      	ldr	r3, [pc, #208]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 8004930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004934:	f003 0310 	and.w	r3, r3, #16
 8004938:	617b      	str	r3, [r7, #20]
 800493a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800493c:	2320      	movs	r3, #32
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004940:	2302      	movs	r3, #2
 8004942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004944:	2300      	movs	r3, #0
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004948:	2300      	movs	r3, #0
 800494a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800494c:	2304      	movs	r3, #4
 800494e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004950:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004954:	4619      	mov	r1, r3
 8004956:	4832      	ldr	r0, [pc, #200]	; (8004a20 <HAL_TIM_MspPostInit+0x298>)
 8004958:	f005 f8e6 	bl	8009b28 <HAL_GPIO_Init>
}
 800495c:	e04a      	b.n	80049f4 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM16)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a30      	ldr	r2, [pc, #192]	; (8004a24 <HAL_TIM_MspPostInit+0x29c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d120      	bne.n	80049aa <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 800496a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800496e:	4a24      	ldr	r2, [pc, #144]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 8004970:	f043 0302 	orr.w	r3, r3, #2
 8004974:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004978:	4b21      	ldr	r3, [pc, #132]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 800497a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8004986:	f44f 7380 	mov.w	r3, #256	; 0x100
 800498a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498c:	2302      	movs	r3, #2
 800498e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004994:	2300      	movs	r3, #0
 8004996:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8004998:	2301      	movs	r3, #1
 800499a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 800499c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049a0:	4619      	mov	r1, r3
 80049a2:	481a      	ldr	r0, [pc, #104]	; (8004a0c <HAL_TIM_MspPostInit+0x284>)
 80049a4:	f005 f8c0 	bl	8009b28 <HAL_GPIO_Init>
}
 80049a8:	e024      	b.n	80049f4 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM17)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1e      	ldr	r2, [pc, #120]	; (8004a28 <HAL_TIM_MspPostInit+0x2a0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d11f      	bne.n	80049f4 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 80049b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ba:	4a11      	ldr	r2, [pc, #68]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 80049bc:	f043 0302 	orr.w	r3, r3, #2
 80049c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80049c4:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <HAL_TIM_MspPostInit+0x278>)
 80049c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP5_Pin;
 80049d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d8:	2302      	movs	r3, #2
 80049da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049e0:	2300      	movs	r3, #0
 80049e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80049e4:	2301      	movs	r3, #1
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 80049e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80049ec:	4619      	mov	r1, r3
 80049ee:	4807      	ldr	r0, [pc, #28]	; (8004a0c <HAL_TIM_MspPostInit+0x284>)
 80049f0:	f005 f89a 	bl	8009b28 <HAL_GPIO_Init>
}
 80049f4:	bf00      	nop
 80049f6:	3740      	adds	r7, #64	; 0x40
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40010000 	.word	0x40010000
 8004a00:	58024400 	.word	0x58024400
 8004a04:	58020000 	.word	0x58020000
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	58020400 	.word	0x58020400
 8004a10:	40000c00 	.word	0x40000c00
 8004a14:	40001c00 	.word	0x40001c00
 8004a18:	40002000 	.word	0x40002000
 8004a1c:	40014000 	.word	0x40014000
 8004a20:	58021000 	.word	0x58021000
 8004a24:	40014400 	.word	0x40014400
 8004a28:	40014800 	.word	0x40014800

08004a2c <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8004a30:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a32:	4a25      	ldr	r2, [pc, #148]	; (8004ac8 <MX_UART5_Init+0x9c>)
 8004a34:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8004a36:	4b23      	ldr	r3, [pc, #140]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a38:	4a24      	ldr	r2, [pc, #144]	; (8004acc <MX_UART5_Init+0xa0>)
 8004a3a:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8004a3c:	4b21      	ldr	r3, [pc, #132]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8004a42:	4b20      	ldr	r3, [pc, #128]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8004a48:	4b1e      	ldr	r3, [pc, #120]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8004a4e:	4b1d      	ldr	r3, [pc, #116]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a50:	220c      	movs	r2, #12
 8004a52:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a54:	4b1b      	ldr	r3, [pc, #108]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a5a:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004a66:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004a6c:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a6e:	2208      	movs	r2, #8
 8004a70:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004a72:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8004a7a:	4812      	ldr	r0, [pc, #72]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a7c:	f00c ff72 	bl	8011964 <HAL_UART_Init>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 8004a86:	f7fe fcb1 	bl	80033ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	480d      	ldr	r0, [pc, #52]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004a8e:	f00f fcb0 	bl	80143f2 <HAL_UARTEx_SetTxFifoThreshold>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <MX_UART5_Init+0x70>
  {
    Error_Handler();
 8004a98:	f7fe fca8 	bl	80033ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4809      	ldr	r0, [pc, #36]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004aa0:	f00f fce5 	bl	801446e <HAL_UARTEx_SetRxFifoThreshold>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <MX_UART5_Init+0x82>
  {
    Error_Handler();
 8004aaa:	f7fe fc9f 	bl	80033ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8004aae:	4805      	ldr	r0, [pc, #20]	; (8004ac4 <MX_UART5_Init+0x98>)
 8004ab0:	f00f fc66 	bl	8014380 <HAL_UARTEx_DisableFifoMode>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <MX_UART5_Init+0x92>
  {
    Error_Handler();
 8004aba:	f7fe fc97 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000ccc 	.word	0x20000ccc
 8004ac8:	40005000 	.word	0x40005000
 8004acc:	000f4240 	.word	0x000f4240

08004ad0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004ad4:	4b22      	ldr	r3, [pc, #136]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004ad6:	4a23      	ldr	r2, [pc, #140]	; (8004b64 <MX_USART1_UART_Init+0x94>)
 8004ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8004ada:	4b21      	ldr	r3, [pc, #132]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004adc:	4a22      	ldr	r2, [pc, #136]	; (8004b68 <MX_USART1_UART_Init+0x98>)
 8004ade:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004ae0:	4b1f      	ldr	r3, [pc, #124]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004ae6:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004aec:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004af2:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004af4:	220c      	movs	r2, #12
 8004af6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004af8:	4b19      	ldr	r3, [pc, #100]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004afe:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b04:	4b16      	ldr	r3, [pc, #88]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b0a:	4b15      	ldr	r3, [pc, #84]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b10:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004b16:	4812      	ldr	r0, [pc, #72]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004b18:	f00c ff24 	bl	8011964 <HAL_UART_Init>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d001      	beq.n	8004b26 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8004b22:	f7fe fc63 	bl	80033ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b26:	2100      	movs	r1, #0
 8004b28:	480d      	ldr	r0, [pc, #52]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004b2a:	f00f fc62 	bl	80143f2 <HAL_UARTEx_SetTxFifoThreshold>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8004b34:	f7fe fc5a 	bl	80033ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b38:	2100      	movs	r1, #0
 8004b3a:	4809      	ldr	r0, [pc, #36]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004b3c:	f00f fc97 	bl	801446e <HAL_UARTEx_SetRxFifoThreshold>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8004b46:	f7fe fc51 	bl	80033ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004b4a:	4805      	ldr	r0, [pc, #20]	; (8004b60 <MX_USART1_UART_Init+0x90>)
 8004b4c:	f00f fc18 	bl	8014380 <HAL_UARTEx_DisableFifoMode>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8004b56:	f7fe fc49 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004b5a:	bf00      	nop
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000d60 	.word	0x20000d60
 8004b64:	40011000 	.word	0x40011000
 8004b68:	001e8480 	.word	0x001e8480

08004b6c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004b70:	4b22      	ldr	r3, [pc, #136]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004b72:	4a23      	ldr	r2, [pc, #140]	; (8004c00 <MX_USART3_UART_Init+0x94>)
 8004b74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004b76:	4b21      	ldr	r3, [pc, #132]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004b7e:	4b1f      	ldr	r3, [pc, #124]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004b84:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004b8a:	4b1c      	ldr	r3, [pc, #112]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004b90:	4b1a      	ldr	r3, [pc, #104]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004b92:	220c      	movs	r2, #12
 8004b94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b96:	4b19      	ldr	r3, [pc, #100]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b9c:	4b17      	ldr	r3, [pc, #92]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ba2:	4b16      	ldr	r3, [pc, #88]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ba8:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bae:	4b13      	ldr	r3, [pc, #76]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004bb4:	4811      	ldr	r0, [pc, #68]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004bb6:	f00c fed5 	bl	8011964 <HAL_UART_Init>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004bc0:	f7fe fc14 	bl	80033ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	480d      	ldr	r0, [pc, #52]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004bc8:	f00f fc13 	bl	80143f2 <HAL_UARTEx_SetTxFifoThreshold>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004bd2:	f7fe fc0b 	bl	80033ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4808      	ldr	r0, [pc, #32]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004bda:	f00f fc48 	bl	801446e <HAL_UARTEx_SetRxFifoThreshold>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004be4:	f7fe fc02 	bl	80033ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004be8:	4804      	ldr	r0, [pc, #16]	; (8004bfc <MX_USART3_UART_Init+0x90>)
 8004bea:	f00f fbc9 	bl	8014380 <HAL_UARTEx_DisableFifoMode>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004bf4:	f7fe fbfa 	bl	80033ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004bf8:	bf00      	nop
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000c38 	.word	0x20000c38
 8004c00:	40004800 	.word	0x40004800

08004c04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08e      	sub	sp, #56	; 0x38
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	605a      	str	r2, [r3, #4]
 8004c16:	609a      	str	r2, [r3, #8]
 8004c18:	60da      	str	r2, [r3, #12]
 8004c1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a86      	ldr	r2, [pc, #536]	; (8004e3c <HAL_UART_MspInit+0x238>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	f040 8094 	bne.w	8004d50 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8004c28:	4b85      	ldr	r3, [pc, #532]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004c2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c2e:	4a84      	ldr	r2, [pc, #528]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004c30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c38:	4b81      	ldr	r3, [pc, #516]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004c3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c42:	623b      	str	r3, [r7, #32]
 8004c44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c46:	4b7e      	ldr	r3, [pc, #504]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c4c:	4a7c      	ldr	r2, [pc, #496]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004c4e:	f043 0302 	orr.w	r3, r3, #2
 8004c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004c56:	4b7a      	ldr	r3, [pc, #488]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	61fb      	str	r3, [r7, #28]
 8004c62:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8004c64:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c72:	2300      	movs	r3, #0
 8004c74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8004c76:	230e      	movs	r3, #14
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4870      	ldr	r0, [pc, #448]	; (8004e44 <HAL_UART_MspInit+0x240>)
 8004c82:	f004 ff51 	bl	8009b28 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8004c86:	4b70      	ldr	r3, [pc, #448]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004c88:	4a70      	ldr	r2, [pc, #448]	; (8004e4c <HAL_UART_MspInit+0x248>)
 8004c8a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8004c8c:	4b6e      	ldr	r3, [pc, #440]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004c8e:	2241      	movs	r2, #65	; 0x41
 8004c90:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c92:	4b6d      	ldr	r3, [pc, #436]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c98:	4b6b      	ldr	r3, [pc, #428]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c9e:	4b6a      	ldr	r3, [pc, #424]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ca4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ca6:	4b68      	ldr	r3, [pc, #416]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cac:	4b66      	ldr	r3, [pc, #408]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8004cb2:	4b65      	ldr	r3, [pc, #404]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004cb8:	4b63      	ldr	r3, [pc, #396]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004cba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004cbe:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004cc0:	4b61      	ldr	r3, [pc, #388]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8004cc6:	4860      	ldr	r0, [pc, #384]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004cc8:	f002 fcfe 	bl	80076c8 <HAL_DMA_Init>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8004cd2:	f7fe fb8b 	bl	80033ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a5b      	ldr	r2, [pc, #364]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004cda:	67da      	str	r2, [r3, #124]	; 0x7c
 8004cdc:	4a5a      	ldr	r2, [pc, #360]	; (8004e48 <HAL_UART_MspInit+0x244>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8004ce2:	4b5b      	ldr	r3, [pc, #364]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004ce4:	4a5b      	ldr	r2, [pc, #364]	; (8004e54 <HAL_UART_MspInit+0x250>)
 8004ce6:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8004ce8:	4b59      	ldr	r3, [pc, #356]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004cea:	2242      	movs	r2, #66	; 0x42
 8004cec:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cee:	4b58      	ldr	r3, [pc, #352]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004cf0:	2240      	movs	r2, #64	; 0x40
 8004cf2:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cf4:	4b56      	ldr	r3, [pc, #344]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cfa:	4b55      	ldr	r3, [pc, #340]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004cfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d00:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d02:	4b53      	ldr	r3, [pc, #332]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d08:	4b51      	ldr	r3, [pc, #324]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8004d0e:	4b50      	ldr	r3, [pc, #320]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004d14:	4b4e      	ldr	r3, [pc, #312]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004d16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004d1a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d1c:	4b4c      	ldr	r3, [pc, #304]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8004d22:	484b      	ldr	r0, [pc, #300]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004d24:	f002 fcd0 	bl	80076c8 <HAL_DMA_Init>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8004d2e:	f7fe fb5d 	bl	80033ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a46      	ldr	r2, [pc, #280]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004d36:	679a      	str	r2, [r3, #120]	; 0x78
 8004d38:	4a45      	ldr	r2, [pc, #276]	; (8004e50 <HAL_UART_MspInit+0x24c>)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2100      	movs	r1, #0
 8004d42:	2035      	movs	r0, #53	; 0x35
 8004d44:	f002 fa8d 	bl	8007262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004d48:	2035      	movs	r0, #53	; 0x35
 8004d4a:	f002 faa4 	bl	8007296 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004d4e:	e070      	b.n	8004e32 <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a40      	ldr	r2, [pc, #256]	; (8004e58 <HAL_UART_MspInit+0x254>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d12f      	bne.n	8004dba <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d5a:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d60:	4a37      	ldr	r2, [pc, #220]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004d62:	f043 0310 	orr.w	r3, r3, #16
 8004d66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004d6a:	4b35      	ldr	r3, [pc, #212]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d70:	f003 0310 	and.w	r3, r3, #16
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d78:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d7e:	4a30      	ldr	r2, [pc, #192]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004d80:	f043 0302 	orr.w	r3, r3, #2
 8004d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d88:	4b2d      	ldr	r3, [pc, #180]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004d96:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da4:	2300      	movs	r3, #0
 8004da6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004da8:	2304      	movs	r3, #4
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004db0:	4619      	mov	r1, r3
 8004db2:	4824      	ldr	r0, [pc, #144]	; (8004e44 <HAL_UART_MspInit+0x240>)
 8004db4:	f004 feb8 	bl	8009b28 <HAL_GPIO_Init>
}
 8004db8:	e03b      	b.n	8004e32 <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a27      	ldr	r2, [pc, #156]	; (8004e5c <HAL_UART_MspInit+0x258>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d136      	bne.n	8004e32 <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004dc4:	4b1e      	ldr	r3, [pc, #120]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004dc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dca:	4a1d      	ldr	r2, [pc, #116]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004dd4:	4b1a      	ldr	r3, [pc, #104]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004dd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dde:	613b      	str	r3, [r7, #16]
 8004de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004de2:	4b17      	ldr	r3, [pc, #92]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004de8:	4a15      	ldr	r2, [pc, #84]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004dea:	f043 0308 	orr.w	r3, r3, #8
 8004dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004df2:	4b13      	ldr	r3, [pc, #76]	; (8004e40 <HAL_UART_MspInit+0x23c>)
 8004df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004e00:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e06:	2302      	movs	r3, #2
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004e12:	2307      	movs	r3, #7
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4810      	ldr	r0, [pc, #64]	; (8004e60 <HAL_UART_MspInit+0x25c>)
 8004e1e:	f004 fe83 	bl	8009b28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004e22:	2200      	movs	r2, #0
 8004e24:	2100      	movs	r1, #0
 8004e26:	2027      	movs	r0, #39	; 0x27
 8004e28:	f002 fa1b 	bl	8007262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004e2c:	2027      	movs	r0, #39	; 0x27
 8004e2e:	f002 fa32 	bl	8007296 <HAL_NVIC_EnableIRQ>
}
 8004e32:	bf00      	nop
 8004e34:	3738      	adds	r7, #56	; 0x38
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	40005000 	.word	0x40005000
 8004e40:	58024400 	.word	0x58024400
 8004e44:	58020400 	.word	0x58020400
 8004e48:	20000df4 	.word	0x20000df4
 8004e4c:	40020010 	.word	0x40020010
 8004e50:	20000e6c 	.word	0x20000e6c
 8004e54:	40020028 	.word	0x40020028
 8004e58:	40011000 	.word	0x40011000
 8004e5c:	40004800 	.word	0x40004800
 8004e60:	58020c00 	.word	0x58020c00

08004e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004e68:	f7fe fcbe 	bl	80037e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e6c:	480c      	ldr	r0, [pc, #48]	; (8004ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e6e:	490d      	ldr	r1, [pc, #52]	; (8004ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e70:	4a0d      	ldr	r2, [pc, #52]	; (8004ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e74:	e002      	b.n	8004e7c <LoopCopyDataInit>

08004e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e7a:	3304      	adds	r3, #4

08004e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e80:	d3f9      	bcc.n	8004e76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e84:	4c0a      	ldr	r4, [pc, #40]	; (8004eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e88:	e001      	b.n	8004e8e <LoopFillZerobss>

08004e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e8c:	3204      	adds	r2, #4

08004e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e90:	d3fb      	bcc.n	8004e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004e92:	f00f fb79 	bl	8014588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e96:	f7fd f87b 	bl	8001f90 <main>
  bx  lr
 8004e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ea4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8004ea8:	08015480 	.word	0x08015480
  ldr r2, =_sbss
 8004eac:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8004eb0:	20000ee8 	.word	0x20000ee8

08004eb4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004eb4:	e7fe      	b.n	8004eb4 <ADC_IRQHandler>
	...

08004eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ebe:	2003      	movs	r0, #3
 8004ec0:	f002 f9c4 	bl	800724c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ec4:	f007 fd54 	bl	800c970 <HAL_RCC_GetSysClockFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b15      	ldr	r3, [pc, #84]	; (8004f20 <HAL_Init+0x68>)
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	4913      	ldr	r1, [pc, #76]	; (8004f24 <HAL_Init+0x6c>)
 8004ed6:	5ccb      	ldrb	r3, [r1, r3]
 8004ed8:	f003 031f 	and.w	r3, r3, #31
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ee2:	4b0f      	ldr	r3, [pc, #60]	; (8004f20 <HAL_Init+0x68>)
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	f003 030f 	and.w	r3, r3, #15
 8004eea:	4a0e      	ldr	r2, [pc, #56]	; (8004f24 <HAL_Init+0x6c>)
 8004eec:	5cd3      	ldrb	r3, [r2, r3]
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef8:	4a0b      	ldr	r2, [pc, #44]	; (8004f28 <HAL_Init+0x70>)
 8004efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004efc:	4a0b      	ldr	r2, [pc, #44]	; (8004f2c <HAL_Init+0x74>)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f02:	2000      	movs	r0, #0
 8004f04:	f000 f814 	bl	8004f30 <HAL_InitTick>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e002      	b.n	8004f18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004f12:	f7fe fbd5 	bl	80036c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	58024400 	.word	0x58024400
 8004f24:	08015258 	.word	0x08015258
 8004f28:	20000004 	.word	0x20000004
 8004f2c:	20000000 	.word	0x20000000

08004f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004f38:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <HAL_InitTick+0x60>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e021      	b.n	8004f88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004f44:	4b13      	ldr	r3, [pc, #76]	; (8004f94 <HAL_InitTick+0x64>)
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <HAL_InitTick+0x60>)
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f002 f9a9 	bl	80072b2 <HAL_SYSTICK_Config>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e00e      	b.n	8004f88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b0f      	cmp	r3, #15
 8004f6e:	d80a      	bhi.n	8004f86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f70:	2200      	movs	r2, #0
 8004f72:	6879      	ldr	r1, [r7, #4]
 8004f74:	f04f 30ff 	mov.w	r0, #4294967295
 8004f78:	f002 f973 	bl	8007262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f7c:	4a06      	ldr	r2, [pc, #24]	; (8004f98 <HAL_InitTick+0x68>)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	e000      	b.n	8004f88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	2000000c 	.word	0x2000000c
 8004f94:	20000000 	.word	0x20000000
 8004f98:	20000008 	.word	0x20000008

08004f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004fa0:	4b06      	ldr	r3, [pc, #24]	; (8004fbc <HAL_IncTick+0x20>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_IncTick+0x24>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4413      	add	r3, r2
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <HAL_IncTick+0x24>)
 8004fae:	6013      	str	r3, [r2, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	2000000c 	.word	0x2000000c
 8004fc0:	20000ee4 	.word	0x20000ee4

08004fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8004fc8:	4b03      	ldr	r3, [pc, #12]	; (8004fd8 <HAL_GetTick+0x14>)
 8004fca:	681b      	ldr	r3, [r3, #0]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	20000ee4 	.word	0x20000ee4

08004fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fe4:	f7ff ffee 	bl	8004fc4 <HAL_GetTick>
 8004fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff4:	d005      	beq.n	8005002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_Delay+0x44>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005002:	bf00      	nop
 8005004:	f7ff ffde 	bl	8004fc4 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	429a      	cmp	r2, r3
 8005012:	d8f7      	bhi.n	8005004 <HAL_Delay+0x28>
  {
  }
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	2000000c 	.word	0x2000000c

08005024 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	609a      	str	r2, [r3, #8]
}
 800503e:	bf00      	nop
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	609a      	str	r2, [r3, #8]
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005080:	4618      	mov	r0, r3
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	3360      	adds	r3, #96	; 0x60
 800509e:	461a      	mov	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4a10      	ldr	r2, [pc, #64]	; (80050ec <LL_ADC_SetOffset+0x60>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10b      	bne.n	80050c8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	4313      	orrs	r3, r2
 80050be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80050c6:	e00b      	b.n	80050e0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	430b      	orrs	r3, r1
 80050da:	431a      	orrs	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	601a      	str	r2, [r3, #0]
}
 80050e0:	bf00      	nop
 80050e2:	371c      	adds	r7, #28
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	58026000 	.word	0x58026000

080050f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	3360      	adds	r3, #96	; 0x60
 80050fe:	461a      	mov	r2, r3
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f003 031f 	and.w	r3, r3, #31
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	fa01 f303 	lsl.w	r3, r1, r3
 800513c:	431a      	orrs	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	611a      	str	r2, [r3, #16]
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8005150:	b480      	push	{r7}
 8005152:	b087      	sub	sp, #28
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4a0c      	ldr	r2, [pc, #48]	; (8005190 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00e      	beq.n	8005182 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3360      	adds	r3, #96	; 0x60
 8005168:	461a      	mov	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	431a      	orrs	r2, r3
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	601a      	str	r2, [r3, #0]
  }
}
 8005182:	bf00      	nop
 8005184:	371c      	adds	r7, #28
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	58026000 	.word	0x58026000

08005194 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	4a0c      	ldr	r2, [pc, #48]	; (80051d4 <LL_ADC_SetOffsetSaturation+0x40>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d10e      	bne.n	80051c6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3360      	adds	r3, #96	; 0x60
 80051ac:	461a      	mov	r2, r3
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80051c6:	bf00      	nop
 80051c8:	371c      	adds	r7, #28
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	58026000 	.word	0x58026000

080051d8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4a0c      	ldr	r2, [pc, #48]	; (8005218 <LL_ADC_SetOffsetSign+0x40>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d10e      	bne.n	800520a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3360      	adds	r3, #96	; 0x60
 80051f0:	461a      	mov	r2, r3
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	431a      	orrs	r2, r3
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800520a:	bf00      	nop
 800520c:	371c      	adds	r7, #28
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	58026000 	.word	0x58026000

0800521c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3360      	adds	r3, #96	; 0x60
 800522c:	461a      	mov	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	4a0c      	ldr	r2, [pc, #48]	; (800526c <LL_ADC_SetOffsetState+0x50>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d108      	bne.n	8005250 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	431a      	orrs	r2, r3
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800524e:	e007      	b.n	8005260 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	431a      	orrs	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	601a      	str	r2, [r3, #0]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	58026000 	.word	0x58026000

08005270 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005284:	2301      	movs	r3, #1
 8005286:	e000      	b.n	800528a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005296:	b480      	push	{r7}
 8005298:	b087      	sub	sp, #28
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	3330      	adds	r3, #48	; 0x30
 80052a6:	461a      	mov	r2, r3
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	0a1b      	lsrs	r3, r3, #8
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	4413      	add	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	f003 031f 	and.w	r3, r3, #31
 80052c0:	211f      	movs	r1, #31
 80052c2:	fa01 f303 	lsl.w	r3, r1, r3
 80052c6:	43db      	mvns	r3, r3
 80052c8:	401a      	ands	r2, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	0e9b      	lsrs	r3, r3, #26
 80052ce:	f003 011f 	and.w	r1, r3, #31
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	fa01 f303 	lsl.w	r3, r1, r3
 80052dc:	431a      	orrs	r2, r3
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80052e2:	bf00      	nop
 80052e4:	371c      	adds	r7, #28
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fa:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005306:	2300      	movs	r3, #0
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	3314      	adds	r3, #20
 8005324:	461a      	mov	r2, r3
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	0e5b      	lsrs	r3, r3, #25
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	4413      	add	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	681a      	ldr	r2, [r3, #0]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	0d1b      	lsrs	r3, r3, #20
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2107      	movs	r1, #7
 8005342:	fa01 f303 	lsl.w	r3, r1, r3
 8005346:	43db      	mvns	r3, r3
 8005348:	401a      	ands	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	0d1b      	lsrs	r3, r3, #20
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
	...

0800536c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4a1a      	ldr	r2, [pc, #104]	; (80053e4 <LL_ADC_SetChannelSingleDiff+0x78>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d115      	bne.n	80053ac <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800538c:	43db      	mvns	r3, r3
 800538e:	401a      	ands	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f003 0318 	and.w	r3, r3, #24
 8005396:	4914      	ldr	r1, [pc, #80]	; (80053e8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8005398:	40d9      	lsrs	r1, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	400b      	ands	r3, r1
 800539e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a2:	431a      	orrs	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80053aa:	e014      	b.n	80053d6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053b8:	43db      	mvns	r3, r3
 80053ba:	401a      	ands	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f003 0318 	and.w	r3, r3, #24
 80053c2:	4909      	ldr	r1, [pc, #36]	; (80053e8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80053c4:	40d9      	lsrs	r1, r3
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	400b      	ands	r3, r1
 80053ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053ce:	431a      	orrs	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80053d6:	bf00      	nop
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	58026000 	.word	0x58026000
 80053e8:	000fffff 	.word	0x000fffff

080053ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 031f 	and.w	r3, r3, #31
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	4b04      	ldr	r3, [pc, #16]	; (8005444 <LL_ADC_DisableDeepPowerDown+0x20>)
 8005432:	4013      	ands	r3, r2
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6093      	str	r3, [r2, #8]
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	5fffffc0 	.word	0x5fffffc0

08005448 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800545c:	d101      	bne.n	8005462 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	4b05      	ldr	r3, [pc, #20]	; (8005494 <LL_ADC_EnableInternalRegulator+0x24>)
 800547e:	4013      	ands	r3, r2
 8005480:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	6fffffc0 	.word	0x6fffffc0

08005498 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ac:	d101      	bne.n	80054b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80054ae:	2301      	movs	r3, #1
 80054b0:	e000      	b.n	80054b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <LL_ADC_Enable+0x24>)
 80054ce:	4013      	ands	r3, r2
 80054d0:	f043 0201 	orr.w	r2, r3, #1
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	7fffffc0 	.word	0x7fffffc0

080054e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <LL_ADC_Disable+0x24>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	f043 0202 	orr.w	r2, r3, #2
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr
 800550c:	7fffffc0 	.word	0x7fffffc0

08005510 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	f003 0301 	and.w	r3, r3, #1
 8005520:	2b01      	cmp	r3, #1
 8005522:	d101      	bne.n	8005528 <LL_ADC_IsEnabled+0x18>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <LL_ADC_IsEnabled+0x1a>
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	d101      	bne.n	800554e <LL_ADC_IsDisableOngoing+0x18>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <LL_ADC_IsDisableOngoing+0x1a>
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689a      	ldr	r2, [r3, #8]
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <LL_ADC_REG_StartConversion+0x24>)
 800556a:	4013      	ands	r3, r2
 800556c:	f043 0204 	orr.w	r2, r3, #4
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	7fffffc0 	.word	0x7fffffc0

08005584 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 0304 	and.w	r3, r3, #4
 8005594:	2b04      	cmp	r3, #4
 8005596:	d101      	bne.n	800559c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 0308 	and.w	r3, r3, #8
 80055ba:	2b08      	cmp	r3, #8
 80055bc:	d101      	bne.n	80055c2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	370c      	adds	r7, #12
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055d0:	b590      	push	{r4, r7, lr}
 80055d2:	b089      	sub	sp, #36	; 0x24
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055d8:	2300      	movs	r3, #0
 80055da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d101      	bne.n	80055ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e1ee      	b.n	80059c8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d109      	bne.n	800560c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7fb f9f5 	bl	80009e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff ff19 	bl	8005448 <LL_ADC_IsDeepPowerDownEnabled>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d004      	beq.n	8005626 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4618      	mov	r0, r3
 8005622:	f7ff feff 	bl	8005424 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7ff ff34 	bl	8005498 <LL_ADC_IsInternalRegulatorEnabled>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d114      	bne.n	8005660 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff ff18 	bl	8005470 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005640:	4b8e      	ldr	r3, [pc, #568]	; (800587c <HAL_ADC_Init+0x2ac>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	099b      	lsrs	r3, r3, #6
 8005646:	4a8e      	ldr	r2, [pc, #568]	; (8005880 <HAL_ADC_Init+0x2b0>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	099b      	lsrs	r3, r3, #6
 800564e:	3301      	adds	r3, #1
 8005650:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005652:	e002      	b.n	800565a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	3b01      	subs	r3, #1
 8005658:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f9      	bne.n	8005654 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff ff17 	bl	8005498 <LL_ADC_IsInternalRegulatorEnabled>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d10d      	bne.n	800568c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005674:	f043 0210 	orr.w	r2, r3, #16
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005680:	f043 0201 	orr.w	r2, r3, #1
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff ff77 	bl	8005584 <LL_ADC_REG_IsConversionOngoing>
 8005696:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800569c:	f003 0310 	and.w	r3, r3, #16
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f040 8188 	bne.w	80059b6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f040 8184 	bne.w	80059b6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80056b6:	f043 0202 	orr.w	r2, r3, #2
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff ff24 	bl	8005510 <LL_ADC_IsEnabled>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d136      	bne.n	800573c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a6c      	ldr	r2, [pc, #432]	; (8005884 <HAL_ADC_Init+0x2b4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d004      	beq.n	80056e2 <HAL_ADC_Init+0x112>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a6a      	ldr	r2, [pc, #424]	; (8005888 <HAL_ADC_Init+0x2b8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10e      	bne.n	8005700 <HAL_ADC_Init+0x130>
 80056e2:	4868      	ldr	r0, [pc, #416]	; (8005884 <HAL_ADC_Init+0x2b4>)
 80056e4:	f7ff ff14 	bl	8005510 <LL_ADC_IsEnabled>
 80056e8:	4604      	mov	r4, r0
 80056ea:	4867      	ldr	r0, [pc, #412]	; (8005888 <HAL_ADC_Init+0x2b8>)
 80056ec:	f7ff ff10 	bl	8005510 <LL_ADC_IsEnabled>
 80056f0:	4603      	mov	r3, r0
 80056f2:	4323      	orrs	r3, r4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	bf0c      	ite	eq
 80056f8:	2301      	moveq	r3, #1
 80056fa:	2300      	movne	r3, #0
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	e008      	b.n	8005712 <HAL_ADC_Init+0x142>
 8005700:	4862      	ldr	r0, [pc, #392]	; (800588c <HAL_ADC_Init+0x2bc>)
 8005702:	f7ff ff05 	bl	8005510 <LL_ADC_IsEnabled>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d012      	beq.n	800573c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a5a      	ldr	r2, [pc, #360]	; (8005884 <HAL_ADC_Init+0x2b4>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d004      	beq.n	800572a <HAL_ADC_Init+0x15a>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a58      	ldr	r2, [pc, #352]	; (8005888 <HAL_ADC_Init+0x2b8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d101      	bne.n	800572e <HAL_ADC_Init+0x15e>
 800572a:	4a59      	ldr	r2, [pc, #356]	; (8005890 <HAL_ADC_Init+0x2c0>)
 800572c:	e000      	b.n	8005730 <HAL_ADC_Init+0x160>
 800572e:	4a59      	ldr	r2, [pc, #356]	; (8005894 <HAL_ADC_Init+0x2c4>)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f7ff fc74 	bl	8005024 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a52      	ldr	r2, [pc, #328]	; (800588c <HAL_ADC_Init+0x2bc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d129      	bne.n	800579a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	7e5b      	ldrb	r3, [r3, #25]
 800574a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005750:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8005756:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d013      	beq.n	8005788 <HAL_ADC_Init+0x1b8>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2b0c      	cmp	r3, #12
 8005766:	d00d      	beq.n	8005784 <HAL_ADC_Init+0x1b4>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	2b1c      	cmp	r3, #28
 800576e:	d007      	beq.n	8005780 <HAL_ADC_Init+0x1b0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	2b18      	cmp	r3, #24
 8005776:	d101      	bne.n	800577c <HAL_ADC_Init+0x1ac>
 8005778:	2318      	movs	r3, #24
 800577a:	e006      	b.n	800578a <HAL_ADC_Init+0x1ba>
 800577c:	2300      	movs	r3, #0
 800577e:	e004      	b.n	800578a <HAL_ADC_Init+0x1ba>
 8005780:	2310      	movs	r3, #16
 8005782:	e002      	b.n	800578a <HAL_ADC_Init+0x1ba>
 8005784:	2308      	movs	r3, #8
 8005786:	e000      	b.n	800578a <HAL_ADC_Init+0x1ba>
 8005788:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800578a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005792:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005794:	4313      	orrs	r3, r2
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	e00e      	b.n	80057b8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	7e5b      	ldrb	r3, [r3, #25]
 800579e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80057a4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80057aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d106      	bne.n	80057d0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	3b01      	subs	r3, #1
 80057c8:	045b      	lsls	r3, r3, #17
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d009      	beq.n	80057ec <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057dc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a26      	ldr	r2, [pc, #152]	; (800588c <HAL_ADC_Init+0x2bc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d115      	bne.n	8005822 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68da      	ldr	r2, [r3, #12]
 80057fc:	4b26      	ldr	r3, [pc, #152]	; (8005898 <HAL_ADC_Init+0x2c8>)
 80057fe:	4013      	ands	r3, r2
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6812      	ldr	r2, [r2, #0]
 8005804:	69b9      	ldr	r1, [r7, #24]
 8005806:	430b      	orrs	r3, r1
 8005808:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	611a      	str	r2, [r3, #16]
 8005820:	e009      	b.n	8005836 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68da      	ldr	r2, [r3, #12]
 8005828:	4b1c      	ldr	r3, [pc, #112]	; (800589c <HAL_ADC_Init+0x2cc>)
 800582a:	4013      	ands	r3, r2
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6812      	ldr	r2, [r2, #0]
 8005830:	69b9      	ldr	r1, [r7, #24]
 8005832:	430b      	orrs	r3, r1
 8005834:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fea2 	bl	8005584 <LL_ADC_REG_IsConversionOngoing>
 8005840:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f7ff feaf 	bl	80055aa <LL_ADC_INJ_IsConversionOngoing>
 800584c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	f040 808e 	bne.w	8005972 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f040 808a 	bne.w	8005972 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a0a      	ldr	r2, [pc, #40]	; (800588c <HAL_ADC_Init+0x2bc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d11b      	bne.n	80058a0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	7e1b      	ldrb	r3, [r3, #24]
 800586c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005874:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8005876:	4313      	orrs	r3, r2
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	e018      	b.n	80058ae <HAL_ADC_Init+0x2de>
 800587c:	20000000 	.word	0x20000000
 8005880:	053e2d63 	.word	0x053e2d63
 8005884:	40022000 	.word	0x40022000
 8005888:	40022100 	.word	0x40022100
 800588c:	58026000 	.word	0x58026000
 8005890:	40022300 	.word	0x40022300
 8005894:	58026300 	.word	0x58026300
 8005898:	fff04007 	.word	0xfff04007
 800589c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	7e1b      	ldrb	r3, [r3, #24]
 80058a4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	4b46      	ldr	r3, [pc, #280]	; (80059d0 <HAL_ADC_Init+0x400>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	69b9      	ldr	r1, [r7, #24]
 80058be:	430b      	orrs	r3, r1
 80058c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d137      	bne.n	800593c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a3f      	ldr	r2, [pc, #252]	; (80059d4 <HAL_ADC_Init+0x404>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d116      	bne.n	800590a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	691a      	ldr	r2, [r3, #16]
 80058e2:	4b3d      	ldr	r3, [pc, #244]	; (80059d8 <HAL_ADC_Init+0x408>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80058ee:	4311      	orrs	r1, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058f4:	4311      	orrs	r1, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80058fa:	430a      	orrs	r2, r1
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	611a      	str	r2, [r3, #16]
 8005908:	e020      	b.n	800594c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	4b32      	ldr	r3, [pc, #200]	; (80059dc <HAL_ADC_Init+0x40c>)
 8005912:	4013      	ands	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005918:	3a01      	subs	r2, #1
 800591a:	0411      	lsls	r1, r2, #16
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005920:	4311      	orrs	r1, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005926:	4311      	orrs	r1, r2
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800592c:	430a      	orrs	r2, r1
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0201 	orr.w	r2, r2, #1
 8005938:	611a      	str	r2, [r3, #16]
 800593a:	e007      	b.n	800594c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0201 	bic.w	r2, r2, #1
 800594a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	430a      	orrs	r2, r1
 8005960:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <HAL_ADC_Init+0x404>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d002      	beq.n	8005972 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 f9e9 	bl	8006d44 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d10c      	bne.n	8005994 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005980:	f023 010f 	bic.w	r1, r3, #15
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	1e5a      	subs	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	631a      	str	r2, [r3, #48]	; 0x30
 8005992:	e007      	b.n	80059a4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 020f 	bic.w	r2, r2, #15
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a8:	f023 0303 	bic.w	r3, r3, #3
 80059ac:	f043 0201 	orr.w	r2, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	661a      	str	r2, [r3, #96]	; 0x60
 80059b4:	e007      	b.n	80059c6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ba:	f043 0210 	orr.w	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80059c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3724      	adds	r7, #36	; 0x24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd90      	pop	{r4, r7, pc}
 80059d0:	ffffbffc 	.word	0xffffbffc
 80059d4:	58026000 	.word	0x58026000
 80059d8:	fc00f81f 	.word	0xfc00f81f
 80059dc:	fc00f81e 	.word	0xfc00f81e

080059e0 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a97      	ldr	r2, [pc, #604]	; (8005c4c <HAL_ADC_Start_IT+0x26c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_ADC_Start_IT+0x1c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a96      	ldr	r2, [pc, #600]	; (8005c50 <HAL_ADC_Start_IT+0x270>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d101      	bne.n	8005a00 <HAL_ADC_Start_IT+0x20>
 80059fc:	4b95      	ldr	r3, [pc, #596]	; (8005c54 <HAL_ADC_Start_IT+0x274>)
 80059fe:	e000      	b.n	8005a02 <HAL_ADC_Start_IT+0x22>
 8005a00:	4b95      	ldr	r3, [pc, #596]	; (8005c58 <HAL_ADC_Start_IT+0x278>)
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff fcf2 	bl	80053ec <LL_ADC_GetMultimode>
 8005a08:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff fdb8 	bl	8005584 <LL_ADC_REG_IsConversionOngoing>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f040 810f 	bne.w	8005c3a <HAL_ADC_Start_IT+0x25a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_ADC_Start_IT+0x4a>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e10c      	b.n	8005c44 <HAL_ADC_Start_IT+0x264>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 f89c 	bl	8006b70 <ADC_Enable>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005a3c:	7dfb      	ldrb	r3, [r7, #23]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	f040 80f6 	bne.w	8005c30 <HAL_ADC_Start_IT+0x250>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005a48:	4b84      	ldr	r3, [pc, #528]	; (8005c5c <HAL_ADC_Start_IT+0x27c>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a7d      	ldr	r2, [pc, #500]	; (8005c50 <HAL_ADC_Start_IT+0x270>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d002      	beq.n	8005a64 <HAL_ADC_Start_IT+0x84>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	e000      	b.n	8005a66 <HAL_ADC_Start_IT+0x86>
 8005a64:	4b79      	ldr	r3, [pc, #484]	; (8005c4c <HAL_ADC_Start_IT+0x26c>)
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6812      	ldr	r2, [r2, #0]
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d002      	beq.n	8005a74 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d006      	beq.n	8005a9a <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a90:	f023 0206 	bic.w	r2, r3, #6
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	665a      	str	r2, [r3, #100]	; 0x64
 8005a98:	e002      	b.n	8005aa0 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	221c      	movs	r2, #28
 8005aa6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 021c 	bic.w	r2, r2, #28
 8005abe:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	2b08      	cmp	r3, #8
 8005ac6:	d108      	bne.n	8005ada <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f042 0208 	orr.w	r2, r2, #8
 8005ad6:	605a      	str	r2, [r3, #4]
          break;
 8005ad8:	e008      	b.n	8005aec <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0204 	orr.w	r2, r2, #4
 8005ae8:	605a      	str	r2, [r3, #4]
          break;
 8005aea:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d107      	bne.n	8005b04 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f042 0210 	orr.w	r2, r2, #16
 8005b02:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a51      	ldr	r2, [pc, #324]	; (8005c50 <HAL_ADC_Start_IT+0x270>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d002      	beq.n	8005b14 <HAL_ADC_Start_IT+0x134>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	e000      	b.n	8005b16 <HAL_ADC_Start_IT+0x136>
 8005b14:	4b4d      	ldr	r3, [pc, #308]	; (8005c4c <HAL_ADC_Start_IT+0x26c>)
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6812      	ldr	r2, [r2, #0]
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d008      	beq.n	8005b30 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	d002      	beq.n	8005b30 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b09      	cmp	r3, #9
 8005b2e:	d13b      	bne.n	8005ba8 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d02d      	beq.n	8005b9a <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b42:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b46:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d110      	bne.n	8005b78 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0220 	bic.w	r2, r2, #32
 8005b64:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b74:	605a      	str	r2, [r3, #4]
              break;
 8005b76:	e011      	b.n	8005b9c <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b86:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0220 	orr.w	r2, r2, #32
 8005b96:	605a      	str	r2, [r3, #4]
              break;
 8005b98:	e000      	b.n	8005b9c <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8005b9a:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fcdb 	bl	800555c <LL_ADC_REG_StartConversion>
 8005ba6:	e04c      	b.n	8005c42 <HAL_ADC_Start_IT+0x262>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bac:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a25      	ldr	r2, [pc, #148]	; (8005c50 <HAL_ADC_Start_IT+0x270>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d002      	beq.n	8005bc4 <HAL_ADC_Start_IT+0x1e4>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	e000      	b.n	8005bc6 <HAL_ADC_Start_IT+0x1e6>
 8005bc4:	4b21      	ldr	r3, [pc, #132]	; (8005c4c <HAL_ADC_Start_IT+0x26c>)
 8005bc6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d035      	beq.n	8005c40 <HAL_ADC_Start_IT+0x260>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005bdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	2b08      	cmp	r3, #8
 8005bea:	d110      	bne.n	8005c0e <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0220 	bic.w	r2, r2, #32
 8005bfa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c0a:	605a      	str	r2, [r3, #4]
              break;
 8005c0c:	e019      	b.n	8005c42 <HAL_ADC_Start_IT+0x262>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c1c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f042 0220 	orr.w	r2, r2, #32
 8005c2c:	605a      	str	r2, [r3, #4]
              break;
 8005c2e:	e008      	b.n	8005c42 <HAL_ADC_Start_IT+0x262>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8005c38:	e003      	b.n	8005c42 <HAL_ADC_Start_IT+0x262>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	75fb      	strb	r3, [r7, #23]
 8005c3e:	e000      	b.n	8005c42 <HAL_ADC_Start_IT+0x262>
        }
 8005c40:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3718      	adds	r7, #24
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40022000 	.word	0x40022000
 8005c50:	40022100 	.word	0x40022100
 8005c54:	40022300 	.word	0x40022300
 8005c58:	58026300 	.word	0x58026300
 8005c5c:	fffff0fe 	.word	0xfffff0fe

08005c60 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08a      	sub	sp, #40	; 0x28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005c84:	2300      	movs	r3, #0
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a87      	ldr	r2, [pc, #540]	; (8005ebc <HAL_ADC_IRQHandler+0x240>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d004      	beq.n	8005cac <HAL_ADC_IRQHandler+0x30>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a86      	ldr	r2, [pc, #536]	; (8005ec0 <HAL_ADC_IRQHandler+0x244>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d101      	bne.n	8005cb0 <HAL_ADC_IRQHandler+0x34>
 8005cac:	4b85      	ldr	r3, [pc, #532]	; (8005ec4 <HAL_ADC_IRQHandler+0x248>)
 8005cae:	e000      	b.n	8005cb2 <HAL_ADC_IRQHandler+0x36>
 8005cb0:	4b85      	ldr	r3, [pc, #532]	; (8005ec8 <HAL_ADC_IRQHandler+0x24c>)
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7ff fb9a 	bl	80053ec <LL_ADC_GetMultimode>
 8005cb8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	f003 0302 	and.w	r3, r3, #2
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d017      	beq.n	8005cf4 <HAL_ADC_IRQHandler+0x78>
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	f003 0302 	and.w	r3, r3, #2
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d012      	beq.n	8005cf4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d105      	bne.n	8005ce6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cde:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 f9d6 	bl	8007098 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <HAL_ADC_IRQHandler+0x8c>
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	f003 0304 	and.w	r3, r3, #4
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8083 	beq.w	8005e1a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	f003 0308 	and.w	r3, r3, #8
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d07d      	beq.n	8005e1a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d22:	f003 0310 	and.w	r3, r3, #16
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d105      	bne.n	8005d36 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff fa98 	bl	8005270 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d062      	beq.n	8005e0c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a5d      	ldr	r2, [pc, #372]	; (8005ec0 <HAL_ADC_IRQHandler+0x244>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d002      	beq.n	8005d56 <HAL_ADC_IRQHandler+0xda>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	e000      	b.n	8005d58 <HAL_ADC_IRQHandler+0xdc>
 8005d56:	4b59      	ldr	r3, [pc, #356]	; (8005ebc <HAL_ADC_IRQHandler+0x240>)
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6812      	ldr	r2, [r2, #0]
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d008      	beq.n	8005d72 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b05      	cmp	r3, #5
 8005d6a:	d002      	beq.n	8005d72 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2b09      	cmp	r3, #9
 8005d70:	d104      	bne.n	8005d7c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	623b      	str	r3, [r7, #32]
 8005d7a:	e00c      	b.n	8005d96 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a4f      	ldr	r2, [pc, #316]	; (8005ec0 <HAL_ADC_IRQHandler+0x244>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d002      	beq.n	8005d8c <HAL_ADC_IRQHandler+0x110>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	e000      	b.n	8005d8e <HAL_ADC_IRQHandler+0x112>
 8005d8c:	4b4b      	ldr	r3, [pc, #300]	; (8005ebc <HAL_ADC_IRQHandler+0x240>)
 8005d8e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d135      	bne.n	8005e0c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b08      	cmp	r3, #8
 8005dac:	d12e      	bne.n	8005e0c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fbe6 	bl	8005584 <LL_ADC_REG_IsConversionOngoing>
 8005db8:	4603      	mov	r3, r0
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d11a      	bne.n	8005df4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 020c 	bic.w	r2, r2, #12
 8005dcc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d112      	bne.n	8005e0c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dea:	f043 0201 	orr.w	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	661a      	str	r2, [r3, #96]	; 0x60
 8005df2:	e00b      	b.n	8005e0c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df8:	f043 0210 	orr.w	r2, r3, #16
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e04:	f043 0201 	orr.w	r2, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7fc fbd7 	bl	80025c0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	220c      	movs	r2, #12
 8005e18:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	f003 0320 	and.w	r3, r3, #32
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d004      	beq.n	8005e2e <HAL_ADC_IRQHandler+0x1b2>
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	f003 0320 	and.w	r3, r3, #32
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10b      	bne.n	8005e46 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	f000 80a0 	beq.w	8005f7a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 809a 	beq.w	8005f7a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d105      	bne.n	8005e5e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e56:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff fa43 	bl	80052ee <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005e68:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff f9fe 	bl	8005270 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005e74:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a11      	ldr	r2, [pc, #68]	; (8005ec0 <HAL_ADC_IRQHandler+0x244>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d002      	beq.n	8005e86 <HAL_ADC_IRQHandler+0x20a>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	e000      	b.n	8005e88 <HAL_ADC_IRQHandler+0x20c>
 8005e86:	4b0d      	ldr	r3, [pc, #52]	; (8005ebc <HAL_ADC_IRQHandler+0x240>)
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d008      	beq.n	8005ea2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d005      	beq.n	8005ea2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	2b06      	cmp	r3, #6
 8005e9a:	d002      	beq.n	8005ea2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2b07      	cmp	r3, #7
 8005ea0:	d104      	bne.n	8005eac <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	623b      	str	r3, [r7, #32]
 8005eaa:	e014      	b.n	8005ed6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a03      	ldr	r2, [pc, #12]	; (8005ec0 <HAL_ADC_IRQHandler+0x244>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d00a      	beq.n	8005ecc <HAL_ADC_IRQHandler+0x250>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	e008      	b.n	8005ece <HAL_ADC_IRQHandler+0x252>
 8005ebc:	40022000 	.word	0x40022000
 8005ec0:	40022100 	.word	0x40022100
 8005ec4:	40022300 	.word	0x40022300
 8005ec8:	58026300 	.word	0x58026300
 8005ecc:	4b84      	ldr	r3, [pc, #528]	; (80060e0 <HAL_ADC_IRQHandler+0x464>)
 8005ece:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d047      	beq.n	8005f6c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <HAL_ADC_IRQHandler+0x27a>
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d03f      	beq.n	8005f6c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d13a      	bne.n	8005f6c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f00:	2b40      	cmp	r3, #64	; 0x40
 8005f02:	d133      	bne.n	8005f6c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d12e      	bne.n	8005f6c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7ff fb49 	bl	80055aa <LL_ADC_INJ_IsConversionOngoing>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d11a      	bne.n	8005f54 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f2c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d112      	bne.n	8005f6c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	661a      	str	r2, [r3, #96]	; 0x60
 8005f52:	e00b      	b.n	8005f6c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f58:	f043 0210 	orr.w	r2, r3, #16
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f64:	f043 0201 	orr.w	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 f86b 	bl	8007048 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2260      	movs	r2, #96	; 0x60
 8005f78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d011      	beq.n	8005fa8 <HAL_ADC_IRQHandler+0x32c>
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00c      	beq.n	8005fa8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f8a8 	bl	80060f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2280      	movs	r2, #128	; 0x80
 8005fa6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d012      	beq.n	8005fd8 <HAL_ADC_IRQHandler+0x35c>
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00d      	beq.n	8005fd8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 f851 	bl	8007070 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d012      	beq.n	8006008 <HAL_ADC_IRQHandler+0x38c>
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00d      	beq.n	8006008 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ff0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 f843 	bl	8007084 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006006:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f003 0310 	and.w	r3, r3, #16
 800600e:	2b00      	cmp	r3, #0
 8006010:	d043      	beq.n	800609a <HAL_ADC_IRQHandler+0x41e>
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	d03e      	beq.n	800609a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006020:	2b00      	cmp	r3, #0
 8006022:	d102      	bne.n	800602a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8006024:	2301      	movs	r3, #1
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
 8006028:	e021      	b.n	800606e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d015      	beq.n	800605c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a2a      	ldr	r2, [pc, #168]	; (80060e0 <HAL_ADC_IRQHandler+0x464>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d004      	beq.n	8006044 <HAL_ADC_IRQHandler+0x3c8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a29      	ldr	r2, [pc, #164]	; (80060e4 <HAL_ADC_IRQHandler+0x468>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d101      	bne.n	8006048 <HAL_ADC_IRQHandler+0x3cc>
 8006044:	4b28      	ldr	r3, [pc, #160]	; (80060e8 <HAL_ADC_IRQHandler+0x46c>)
 8006046:	e000      	b.n	800604a <HAL_ADC_IRQHandler+0x3ce>
 8006048:	4b28      	ldr	r3, [pc, #160]	; (80060ec <HAL_ADC_IRQHandler+0x470>)
 800604a:	4618      	mov	r0, r3
 800604c:	f7ff f9dc 	bl	8005408 <LL_ADC_GetMultiDMATransfer>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d00b      	beq.n	800606e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8006056:	2301      	movs	r3, #1
 8006058:	627b      	str	r3, [r7, #36]	; 0x24
 800605a:	e008      	b.n	800606e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800606a:	2301      	movs	r3, #1
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	2b01      	cmp	r3, #1
 8006072:	d10e      	bne.n	8006092 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006078:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006084:	f043 0202 	orr.w	r2, r3, #2
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f839 	bl	8006104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2210      	movs	r2, #16
 8006098:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d018      	beq.n	80060d6 <HAL_ADC_IRQHandler+0x45a>
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d013      	beq.n	80060d6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060be:	f043 0208 	orr.w	r2, r3, #8
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060ce:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f000 ffc3 	bl	800705c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80060d6:	bf00      	nop
 80060d8:	3728      	adds	r7, #40	; 0x28
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40022000 	.word	0x40022000
 80060e4:	40022100 	.word	0x40022100
 80060e8:	40022300 	.word	0x40022300
 80060ec:	58026300 	.word	0x58026300

080060f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b0b9      	sub	sp, #228	; 0xe4
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006128:	2300      	movs	r3, #0
 800612a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006132:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	4ab3      	ldr	r2, [pc, #716]	; (8006408 <HAL_ADC_ConfigChannel+0x2f0>)
 800613a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d102      	bne.n	800614c <HAL_ADC_ConfigChannel+0x34>
 8006146:	2302      	movs	r3, #2
 8006148:	f000 bcfa 	b.w	8006b40 <HAL_ADC_ConfigChannel+0xa28>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4618      	mov	r0, r3
 800615a:	f7ff fa13 	bl	8005584 <LL_ADC_REG_IsConversionOngoing>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	f040 84de 	bne.w	8006b22 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4aa8      	ldr	r2, [pc, #672]	; (800640c <HAL_ADC_ConfigChannel+0x2f4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d033      	beq.n	80061d8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006178:	2b00      	cmp	r3, #0
 800617a:	d108      	bne.n	800618e <HAL_ADC_ConfigChannel+0x76>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	0e9b      	lsrs	r3, r3, #26
 8006182:	f003 031f 	and.w	r3, r3, #31
 8006186:	2201      	movs	r2, #1
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	e01d      	b.n	80061ca <HAL_ADC_ConfigChannel+0xb2>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006196:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800619a:	fa93 f3a3 	rbit	r3, r3
 800619e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80061a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80061aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80061b2:	2320      	movs	r3, #32
 80061b4:	e004      	b.n	80061c0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80061b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061ba:	fab3 f383 	clz	r3, r3
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	f003 031f 	and.w	r3, r3, #31
 80061c4:	2201      	movs	r2, #1
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	6812      	ldr	r2, [r2, #0]
 80061ce:	69d1      	ldr	r1, [r2, #28]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	430b      	orrs	r3, r1
 80061d6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	6859      	ldr	r1, [r3, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	461a      	mov	r2, r3
 80061e6:	f7ff f856 	bl	8005296 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff f9c8 	bl	8005584 <LL_ADC_REG_IsConversionOngoing>
 80061f4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7ff f9d4 	bl	80055aa <LL_ADC_INJ_IsConversionOngoing>
 8006202:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006206:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 8270 	bne.w	80066f0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006210:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006214:	2b00      	cmp	r3, #0
 8006216:	f040 826b 	bne.w	80066f0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6818      	ldr	r0, [r3, #0]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	6819      	ldr	r1, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	461a      	mov	r2, r3
 8006228:	f7ff f874 	bl	8005314 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a76      	ldr	r2, [pc, #472]	; (800640c <HAL_ADC_ConfigChannel+0x2f4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d10d      	bne.n	8006252 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	695a      	ldr	r2, [r3, #20]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	08db      	lsrs	r3, r3, #3
 8006242:	f003 0303 	and.w	r3, r3, #3
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006250:	e032      	b.n	80062b8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006252:	4b6f      	ldr	r3, [pc, #444]	; (8006410 <HAL_ADC_ConfigChannel+0x2f8>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800625a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800625e:	d10b      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x160>
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	695a      	ldr	r2, [r3, #20]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	089b      	lsrs	r3, r3, #2
 800626c:	f003 0307 	and.w	r3, r3, #7
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	e01d      	b.n	80062b4 <HAL_ADC_ConfigChannel+0x19c>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b00      	cmp	r3, #0
 8006284:	d10b      	bne.n	800629e <HAL_ADC_ConfigChannel+0x186>
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	695a      	ldr	r2, [r3, #20]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	089b      	lsrs	r3, r3, #2
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	005b      	lsls	r3, r3, #1
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	e00a      	b.n	80062b4 <HAL_ADC_ConfigChannel+0x19c>
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	695a      	ldr	r2, [r3, #20]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	089b      	lsrs	r3, r3, #2
 80062aa:	f003 0304 	and.w	r3, r3, #4
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	2b04      	cmp	r3, #4
 80062be:	d048      	beq.n	8006352 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	6919      	ldr	r1, [r3, #16]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062d0:	f7fe fedc 	bl	800508c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a4c      	ldr	r2, [pc, #304]	; (800640c <HAL_ADC_ConfigChannel+0x2f4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d119      	bne.n	8006312 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6919      	ldr	r1, [r3, #16]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	461a      	mov	r2, r3
 80062ec:	f7fe ff74 	bl	80051d8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	6919      	ldr	r1, [r3, #16]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d102      	bne.n	8006308 <HAL_ADC_ConfigChannel+0x1f0>
 8006302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006306:	e000      	b.n	800630a <HAL_ADC_ConfigChannel+0x1f2>
 8006308:	2300      	movs	r3, #0
 800630a:	461a      	mov	r2, r3
 800630c:	f7fe ff42 	bl	8005194 <LL_ADC_SetOffsetSaturation>
 8006310:	e1ee      	b.n	80066f0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6919      	ldr	r1, [r3, #16]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006320:	2b01      	cmp	r3, #1
 8006322:	d102      	bne.n	800632a <HAL_ADC_ConfigChannel+0x212>
 8006324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006328:	e000      	b.n	800632c <HAL_ADC_ConfigChannel+0x214>
 800632a:	2300      	movs	r3, #0
 800632c:	461a      	mov	r2, r3
 800632e:	f7fe ff0f 	bl	8005150 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6919      	ldr	r1, [r3, #16]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	7e1b      	ldrb	r3, [r3, #24]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d102      	bne.n	8006348 <HAL_ADC_ConfigChannel+0x230>
 8006342:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006346:	e000      	b.n	800634a <HAL_ADC_ConfigChannel+0x232>
 8006348:	2300      	movs	r3, #0
 800634a:	461a      	mov	r2, r3
 800634c:	f7fe fee6 	bl	800511c <LL_ADC_SetDataRightShift>
 8006350:	e1ce      	b.n	80066f0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a2d      	ldr	r2, [pc, #180]	; (800640c <HAL_ADC_ConfigChannel+0x2f4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	f040 8181 	bne.w	8006660 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2100      	movs	r1, #0
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fec3 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 800636a:	4603      	mov	r3, r0
 800636c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10a      	bne.n	800638a <HAL_ADC_ConfigChannel+0x272>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2100      	movs	r1, #0
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe feb8 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 8006380:	4603      	mov	r3, r0
 8006382:	0e9b      	lsrs	r3, r3, #26
 8006384:	f003 021f 	and.w	r2, r3, #31
 8006388:	e01e      	b.n	80063c8 <HAL_ADC_ConfigChannel+0x2b0>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2100      	movs	r1, #0
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe fead 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 8006396:	4603      	mov	r3, r0
 8006398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800639c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063a0:	fa93 f3a3 	rbit	r3, r3
 80063a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80063a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80063ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80063b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80063b8:	2320      	movs	r3, #32
 80063ba:	e004      	b.n	80063c6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80063bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80063c0:	fab3 f383 	clz	r3, r3
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	461a      	mov	r2, r3
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d105      	bne.n	80063e0 <HAL_ADC_ConfigChannel+0x2c8>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	0e9b      	lsrs	r3, r3, #26
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	e01e      	b.n	800641e <HAL_ADC_ConfigChannel+0x306>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ec:	fa93 f3a3 	rbit	r3, r3
 80063f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80063f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80063f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80063fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d107      	bne.n	8006414 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8006404:	2320      	movs	r3, #32
 8006406:	e00a      	b.n	800641e <HAL_ADC_ConfigChannel+0x306>
 8006408:	47ff0000 	.word	0x47ff0000
 800640c:	58026000 	.word	0x58026000
 8006410:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8006414:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006418:	fab3 f383 	clz	r3, r3
 800641c:	b2db      	uxtb	r3, r3
 800641e:	429a      	cmp	r2, r3
 8006420:	d106      	bne.n	8006430 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2200      	movs	r2, #0
 8006428:	2100      	movs	r1, #0
 800642a:	4618      	mov	r0, r3
 800642c:	f7fe fef6 	bl	800521c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2101      	movs	r1, #1
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe fe5a 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 800643c:	4603      	mov	r3, r0
 800643e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <HAL_ADC_ConfigChannel+0x344>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2101      	movs	r1, #1
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe fe4f 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 8006452:	4603      	mov	r3, r0
 8006454:	0e9b      	lsrs	r3, r3, #26
 8006456:	f003 021f 	and.w	r2, r3, #31
 800645a:	e01e      	b.n	800649a <HAL_ADC_ConfigChannel+0x382>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2101      	movs	r1, #1
 8006462:	4618      	mov	r0, r3
 8006464:	f7fe fe44 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 8006468:	4603      	mov	r3, r0
 800646a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800646e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006472:	fa93 f3a3 	rbit	r3, r3
 8006476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800647a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800647e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8006482:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800648a:	2320      	movs	r3, #32
 800648c:	e004      	b.n	8006498 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800648e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006492:	fab3 f383 	clz	r3, r3
 8006496:	b2db      	uxtb	r3, r3
 8006498:	461a      	mov	r2, r3
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d105      	bne.n	80064b2 <HAL_ADC_ConfigChannel+0x39a>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	0e9b      	lsrs	r3, r3, #26
 80064ac:	f003 031f 	and.w	r3, r3, #31
 80064b0:	e018      	b.n	80064e4 <HAL_ADC_ConfigChannel+0x3cc>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064be:	fa93 f3a3 	rbit	r3, r3
 80064c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80064c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80064ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80064d6:	2320      	movs	r3, #32
 80064d8:	e004      	b.n	80064e4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80064da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064de:	fab3 f383 	clz	r3, r3
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d106      	bne.n	80064f6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2200      	movs	r2, #0
 80064ee:	2101      	movs	r1, #1
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fe fe93 	bl	800521c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2102      	movs	r1, #2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fe fdf7 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 8006502:	4603      	mov	r3, r0
 8006504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <HAL_ADC_ConfigChannel+0x40a>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2102      	movs	r1, #2
 8006512:	4618      	mov	r0, r3
 8006514:	f7fe fdec 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 8006518:	4603      	mov	r3, r0
 800651a:	0e9b      	lsrs	r3, r3, #26
 800651c:	f003 021f 	and.w	r2, r3, #31
 8006520:	e01e      	b.n	8006560 <HAL_ADC_ConfigChannel+0x448>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2102      	movs	r1, #2
 8006528:	4618      	mov	r0, r3
 800652a:	f7fe fde1 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 800652e:	4603      	mov	r3, r0
 8006530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006538:	fa93 f3a3 	rbit	r3, r3
 800653c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006540:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006544:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8006548:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8006550:	2320      	movs	r3, #32
 8006552:	e004      	b.n	800655e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8006554:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006558:	fab3 f383 	clz	r3, r3
 800655c:	b2db      	uxtb	r3, r3
 800655e:	461a      	mov	r2, r3
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006568:	2b00      	cmp	r3, #0
 800656a:	d105      	bne.n	8006578 <HAL_ADC_ConfigChannel+0x460>
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	0e9b      	lsrs	r3, r3, #26
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	e014      	b.n	80065a2 <HAL_ADC_ConfigChannel+0x48a>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800657e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006580:	fa93 f3a3 	rbit	r3, r3
 8006584:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800658c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8006594:	2320      	movs	r3, #32
 8006596:	e004      	b.n	80065a2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8006598:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800659c:	fab3 f383 	clz	r3, r3
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d106      	bne.n	80065b4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2200      	movs	r2, #0
 80065ac:	2102      	movs	r1, #2
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe fe34 	bl	800521c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2103      	movs	r1, #3
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7fe fd98 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10a      	bne.n	80065e0 <HAL_ADC_ConfigChannel+0x4c8>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2103      	movs	r1, #3
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe fd8d 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 80065d6:	4603      	mov	r3, r0
 80065d8:	0e9b      	lsrs	r3, r3, #26
 80065da:	f003 021f 	and.w	r2, r3, #31
 80065de:	e017      	b.n	8006610 <HAL_ADC_ConfigChannel+0x4f8>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2103      	movs	r1, #3
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe fd82 	bl	80050f0 <LL_ADC_GetOffsetChannel>
 80065ec:	4603      	mov	r3, r0
 80065ee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80065f2:	fa93 f3a3 	rbit	r3, r3
 80065f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80065f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065fa:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80065fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d101      	bne.n	8006606 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006602:	2320      	movs	r3, #32
 8006604:	e003      	b.n	800660e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006608:	fab3 f383 	clz	r3, r3
 800660c:	b2db      	uxtb	r3, r3
 800660e:	461a      	mov	r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006618:	2b00      	cmp	r3, #0
 800661a:	d105      	bne.n	8006628 <HAL_ADC_ConfigChannel+0x510>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	0e9b      	lsrs	r3, r3, #26
 8006622:	f003 031f 	and.w	r3, r3, #31
 8006626:	e011      	b.n	800664c <HAL_ADC_ConfigChannel+0x534>
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800662e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006630:	fa93 f3a3 	rbit	r3, r3
 8006634:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8006636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006638:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800663a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8006640:	2320      	movs	r3, #32
 8006642:	e003      	b.n	800664c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8006644:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006646:	fab3 f383 	clz	r3, r3
 800664a:	b2db      	uxtb	r3, r3
 800664c:	429a      	cmp	r2, r3
 800664e:	d14f      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2200      	movs	r2, #0
 8006656:	2103      	movs	r1, #3
 8006658:	4618      	mov	r0, r3
 800665a:	f7fe fddf 	bl	800521c <LL_ADC_SetOffsetState>
 800665e:	e047      	b.n	80066f0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006666:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	069b      	lsls	r3, r3, #26
 8006670:	429a      	cmp	r2, r3
 8006672:	d107      	bne.n	8006684 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006682:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800668a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	069b      	lsls	r3, r3, #26
 8006694:	429a      	cmp	r2, r3
 8006696:	d107      	bne.n	80066a8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80066a6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	069b      	lsls	r3, r3, #26
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d107      	bne.n	80066cc <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80066ca:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	069b      	lsls	r3, r3, #26
 80066dc:	429a      	cmp	r2, r3
 80066de:	d107      	bne.n	80066f0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80066ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fe ff0b 	bl	8005510 <LL_ADC_IsEnabled>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f040 8219 	bne.w	8006b34 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	6819      	ldr	r1, [r3, #0]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	461a      	mov	r2, r3
 8006710:	f7fe fe2c 	bl	800536c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	4aa1      	ldr	r2, [pc, #644]	; (80069a0 <HAL_ADC_ConfigChannel+0x888>)
 800671a:	4293      	cmp	r3, r2
 800671c:	f040 812e 	bne.w	800697c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10b      	bne.n	8006748 <HAL_ADC_ConfigChannel+0x630>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	0e9b      	lsrs	r3, r3, #26
 8006736:	3301      	adds	r3, #1
 8006738:	f003 031f 	and.w	r3, r3, #31
 800673c:	2b09      	cmp	r3, #9
 800673e:	bf94      	ite	ls
 8006740:	2301      	movls	r3, #1
 8006742:	2300      	movhi	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	e019      	b.n	800677c <HAL_ADC_ConfigChannel+0x664>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006750:	fa93 f3a3 	rbit	r3, r3
 8006754:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006758:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800675a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8006760:	2320      	movs	r3, #32
 8006762:	e003      	b.n	800676c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8006764:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006766:	fab3 f383 	clz	r3, r3
 800676a:	b2db      	uxtb	r3, r3
 800676c:	3301      	adds	r3, #1
 800676e:	f003 031f 	and.w	r3, r3, #31
 8006772:	2b09      	cmp	r3, #9
 8006774:	bf94      	ite	ls
 8006776:	2301      	movls	r3, #1
 8006778:	2300      	movhi	r3, #0
 800677a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800677c:	2b00      	cmp	r3, #0
 800677e:	d079      	beq.n	8006874 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006788:	2b00      	cmp	r3, #0
 800678a:	d107      	bne.n	800679c <HAL_ADC_ConfigChannel+0x684>
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	0e9b      	lsrs	r3, r3, #26
 8006792:	3301      	adds	r3, #1
 8006794:	069b      	lsls	r3, r3, #26
 8006796:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800679a:	e015      	b.n	80067c8 <HAL_ADC_ConfigChannel+0x6b0>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067a4:	fa93 f3a3 	rbit	r3, r3
 80067a8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80067aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80067ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80067b4:	2320      	movs	r3, #32
 80067b6:	e003      	b.n	80067c0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80067b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ba:	fab3 f383 	clz	r3, r3
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	3301      	adds	r3, #1
 80067c2:	069b      	lsls	r3, r3, #26
 80067c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d109      	bne.n	80067e8 <HAL_ADC_ConfigChannel+0x6d0>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	0e9b      	lsrs	r3, r3, #26
 80067da:	3301      	adds	r3, #1
 80067dc:	f003 031f 	and.w	r3, r3, #31
 80067e0:	2101      	movs	r1, #1
 80067e2:	fa01 f303 	lsl.w	r3, r1, r3
 80067e6:	e017      	b.n	8006818 <HAL_ADC_ConfigChannel+0x700>
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067f0:	fa93 f3a3 	rbit	r3, r3
 80067f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80067f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80067fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8006800:	2320      	movs	r3, #32
 8006802:	e003      	b.n	800680c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8006804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006806:	fab3 f383 	clz	r3, r3
 800680a:	b2db      	uxtb	r3, r3
 800680c:	3301      	adds	r3, #1
 800680e:	f003 031f 	and.w	r3, r3, #31
 8006812:	2101      	movs	r1, #1
 8006814:	fa01 f303 	lsl.w	r3, r1, r3
 8006818:	ea42 0103 	orr.w	r1, r2, r3
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <HAL_ADC_ConfigChannel+0x726>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	0e9b      	lsrs	r3, r3, #26
 800682e:	3301      	adds	r3, #1
 8006830:	f003 021f 	and.w	r2, r3, #31
 8006834:	4613      	mov	r3, r2
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	4413      	add	r3, r2
 800683a:	051b      	lsls	r3, r3, #20
 800683c:	e018      	b.n	8006870 <HAL_ADC_ConfigChannel+0x758>
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006846:	fa93 f3a3 	rbit	r3, r3
 800684a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800684c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8006850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8006856:	2320      	movs	r3, #32
 8006858:	e003      	b.n	8006862 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800685a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685c:	fab3 f383 	clz	r3, r3
 8006860:	b2db      	uxtb	r3, r3
 8006862:	3301      	adds	r3, #1
 8006864:	f003 021f 	and.w	r2, r3, #31
 8006868:	4613      	mov	r3, r2
 800686a:	005b      	lsls	r3, r3, #1
 800686c:	4413      	add	r3, r2
 800686e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006870:	430b      	orrs	r3, r1
 8006872:	e07e      	b.n	8006972 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800687c:	2b00      	cmp	r3, #0
 800687e:	d107      	bne.n	8006890 <HAL_ADC_ConfigChannel+0x778>
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	0e9b      	lsrs	r3, r3, #26
 8006886:	3301      	adds	r3, #1
 8006888:	069b      	lsls	r3, r3, #26
 800688a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800688e:	e015      	b.n	80068bc <HAL_ADC_ConfigChannel+0x7a4>
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	fa93 f3a3 	rbit	r3, r3
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80068a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80068a8:	2320      	movs	r3, #32
 80068aa:	e003      	b.n	80068b4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	fab3 f383 	clz	r3, r3
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	3301      	adds	r3, #1
 80068b6:	069b      	lsls	r3, r3, #26
 80068b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d109      	bne.n	80068dc <HAL_ADC_ConfigChannel+0x7c4>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	0e9b      	lsrs	r3, r3, #26
 80068ce:	3301      	adds	r3, #1
 80068d0:	f003 031f 	and.w	r3, r3, #31
 80068d4:	2101      	movs	r1, #1
 80068d6:	fa01 f303 	lsl.w	r3, r1, r3
 80068da:	e017      	b.n	800690c <HAL_ADC_ConfigChannel+0x7f4>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	fa93 f3a3 	rbit	r3, r3
 80068e8:	61bb      	str	r3, [r7, #24]
  return result;
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d101      	bne.n	80068f8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80068f4:	2320      	movs	r3, #32
 80068f6:	e003      	b.n	8006900 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	fab3 f383 	clz	r3, r3
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	3301      	adds	r3, #1
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2101      	movs	r1, #1
 8006908:	fa01 f303 	lsl.w	r3, r1, r3
 800690c:	ea42 0103 	orr.w	r1, r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006918:	2b00      	cmp	r3, #0
 800691a:	d10d      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x820>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	0e9b      	lsrs	r3, r3, #26
 8006922:	3301      	adds	r3, #1
 8006924:	f003 021f 	and.w	r2, r3, #31
 8006928:	4613      	mov	r3, r2
 800692a:	005b      	lsls	r3, r3, #1
 800692c:	4413      	add	r3, r2
 800692e:	3b1e      	subs	r3, #30
 8006930:	051b      	lsls	r3, r3, #20
 8006932:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006936:	e01b      	b.n	8006970 <HAL_ADC_ConfigChannel+0x858>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	fa93 f3a3 	rbit	r3, r3
 8006944:	60fb      	str	r3, [r7, #12]
  return result;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d101      	bne.n	8006954 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8006950:	2320      	movs	r3, #32
 8006952:	e003      	b.n	800695c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	fab3 f383 	clz	r3, r3
 800695a:	b2db      	uxtb	r3, r3
 800695c:	3301      	adds	r3, #1
 800695e:	f003 021f 	and.w	r2, r3, #31
 8006962:	4613      	mov	r3, r2
 8006964:	005b      	lsls	r3, r3, #1
 8006966:	4413      	add	r3, r2
 8006968:	3b1e      	subs	r3, #30
 800696a:	051b      	lsls	r3, r3, #20
 800696c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006970:	430b      	orrs	r3, r1
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	6892      	ldr	r2, [r2, #8]
 8006976:	4619      	mov	r1, r3
 8006978:	f7fe fccc 	bl	8005314 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	f280 80d7 	bge.w	8006b34 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a06      	ldr	r2, [pc, #24]	; (80069a4 <HAL_ADC_ConfigChannel+0x88c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d004      	beq.n	800699a <HAL_ADC_ConfigChannel+0x882>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a04      	ldr	r2, [pc, #16]	; (80069a8 <HAL_ADC_ConfigChannel+0x890>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d10a      	bne.n	80069b0 <HAL_ADC_ConfigChannel+0x898>
 800699a:	4b04      	ldr	r3, [pc, #16]	; (80069ac <HAL_ADC_ConfigChannel+0x894>)
 800699c:	e009      	b.n	80069b2 <HAL_ADC_ConfigChannel+0x89a>
 800699e:	bf00      	nop
 80069a0:	47ff0000 	.word	0x47ff0000
 80069a4:	40022000 	.word	0x40022000
 80069a8:	40022100 	.word	0x40022100
 80069ac:	40022300 	.word	0x40022300
 80069b0:	4b65      	ldr	r3, [pc, #404]	; (8006b48 <HAL_ADC_ConfigChannel+0xa30>)
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe fb5c 	bl	8005070 <LL_ADC_GetCommonPathInternalCh>
 80069b8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a62      	ldr	r2, [pc, #392]	; (8006b4c <HAL_ADC_ConfigChannel+0xa34>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d004      	beq.n	80069d0 <HAL_ADC_ConfigChannel+0x8b8>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a61      	ldr	r2, [pc, #388]	; (8006b50 <HAL_ADC_ConfigChannel+0xa38>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d10e      	bne.n	80069ee <HAL_ADC_ConfigChannel+0x8d6>
 80069d0:	485e      	ldr	r0, [pc, #376]	; (8006b4c <HAL_ADC_ConfigChannel+0xa34>)
 80069d2:	f7fe fd9d 	bl	8005510 <LL_ADC_IsEnabled>
 80069d6:	4604      	mov	r4, r0
 80069d8:	485d      	ldr	r0, [pc, #372]	; (8006b50 <HAL_ADC_ConfigChannel+0xa38>)
 80069da:	f7fe fd99 	bl	8005510 <LL_ADC_IsEnabled>
 80069de:	4603      	mov	r3, r0
 80069e0:	4323      	orrs	r3, r4
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	bf0c      	ite	eq
 80069e6:	2301      	moveq	r3, #1
 80069e8:	2300      	movne	r3, #0
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	e008      	b.n	8006a00 <HAL_ADC_ConfigChannel+0x8e8>
 80069ee:	4859      	ldr	r0, [pc, #356]	; (8006b54 <HAL_ADC_ConfigChannel+0xa3c>)
 80069f0:	f7fe fd8e 	bl	8005510 <LL_ADC_IsEnabled>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	bf0c      	ite	eq
 80069fa:	2301      	moveq	r3, #1
 80069fc:	2300      	movne	r3, #0
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 8084 	beq.w	8006b0e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a53      	ldr	r2, [pc, #332]	; (8006b58 <HAL_ADC_ConfigChannel+0xa40>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d132      	bne.n	8006a76 <HAL_ADC_ConfigChannel+0x95e>
 8006a10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d12c      	bne.n	8006a76 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a4c      	ldr	r2, [pc, #304]	; (8006b54 <HAL_ADC_ConfigChannel+0xa3c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	f040 8086 	bne.w	8006b34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a47      	ldr	r2, [pc, #284]	; (8006b4c <HAL_ADC_ConfigChannel+0xa34>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_ADC_ConfigChannel+0x924>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a46      	ldr	r2, [pc, #280]	; (8006b50 <HAL_ADC_ConfigChannel+0xa38>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d101      	bne.n	8006a40 <HAL_ADC_ConfigChannel+0x928>
 8006a3c:	4a47      	ldr	r2, [pc, #284]	; (8006b5c <HAL_ADC_ConfigChannel+0xa44>)
 8006a3e:	e000      	b.n	8006a42 <HAL_ADC_ConfigChannel+0x92a>
 8006a40:	4a41      	ldr	r2, [pc, #260]	; (8006b48 <HAL_ADC_ConfigChannel+0xa30>)
 8006a42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	f7fe fafc 	bl	800504a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006a52:	4b43      	ldr	r3, [pc, #268]	; (8006b60 <HAL_ADC_ConfigChannel+0xa48>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	099b      	lsrs	r3, r3, #6
 8006a58:	4a42      	ldr	r2, [pc, #264]	; (8006b64 <HAL_ADC_ConfigChannel+0xa4c>)
 8006a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5e:	099b      	lsrs	r3, r3, #6
 8006a60:	3301      	adds	r3, #1
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006a66:	e002      	b.n	8006a6e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1f9      	bne.n	8006a68 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006a74:	e05e      	b.n	8006b34 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a3b      	ldr	r2, [pc, #236]	; (8006b68 <HAL_ADC_ConfigChannel+0xa50>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d120      	bne.n	8006ac2 <HAL_ADC_ConfigChannel+0x9aa>
 8006a80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d11a      	bne.n	8006ac2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a30      	ldr	r2, [pc, #192]	; (8006b54 <HAL_ADC_ConfigChannel+0xa3c>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d14e      	bne.n	8006b34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a2c      	ldr	r2, [pc, #176]	; (8006b4c <HAL_ADC_ConfigChannel+0xa34>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d004      	beq.n	8006aaa <HAL_ADC_ConfigChannel+0x992>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a2a      	ldr	r2, [pc, #168]	; (8006b50 <HAL_ADC_ConfigChannel+0xa38>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d101      	bne.n	8006aae <HAL_ADC_ConfigChannel+0x996>
 8006aaa:	4a2c      	ldr	r2, [pc, #176]	; (8006b5c <HAL_ADC_ConfigChannel+0xa44>)
 8006aac:	e000      	b.n	8006ab0 <HAL_ADC_ConfigChannel+0x998>
 8006aae:	4a26      	ldr	r2, [pc, #152]	; (8006b48 <HAL_ADC_ConfigChannel+0xa30>)
 8006ab0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ab4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fe fac5 	bl	800504a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006ac0:	e038      	b.n	8006b34 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a29      	ldr	r2, [pc, #164]	; (8006b6c <HAL_ADC_ConfigChannel+0xa54>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d133      	bne.n	8006b34 <HAL_ADC_ConfigChannel+0xa1c>
 8006acc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d12d      	bne.n	8006b34 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1d      	ldr	r2, [pc, #116]	; (8006b54 <HAL_ADC_ConfigChannel+0xa3c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d128      	bne.n	8006b34 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a19      	ldr	r2, [pc, #100]	; (8006b4c <HAL_ADC_ConfigChannel+0xa34>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d004      	beq.n	8006af6 <HAL_ADC_ConfigChannel+0x9de>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a17      	ldr	r2, [pc, #92]	; (8006b50 <HAL_ADC_ConfigChannel+0xa38>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d101      	bne.n	8006afa <HAL_ADC_ConfigChannel+0x9e2>
 8006af6:	4a19      	ldr	r2, [pc, #100]	; (8006b5c <HAL_ADC_ConfigChannel+0xa44>)
 8006af8:	e000      	b.n	8006afc <HAL_ADC_ConfigChannel+0x9e4>
 8006afa:	4a13      	ldr	r2, [pc, #76]	; (8006b48 <HAL_ADC_ConfigChannel+0xa30>)
 8006afc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006b00:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f7fe fa9f 	bl	800504a <LL_ADC_SetCommonPathInternalCh>
 8006b0c:	e012      	b.n	8006b34 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b12:	f043 0220 	orr.w	r2, r3, #32
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8006b20:	e008      	b.n	8006b34 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b26:	f043 0220 	orr.w	r2, r3, #32
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006b3c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	37e4      	adds	r7, #228	; 0xe4
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd90      	pop	{r4, r7, pc}
 8006b48:	58026300 	.word	0x58026300
 8006b4c:	40022000 	.word	0x40022000
 8006b50:	40022100 	.word	0x40022100
 8006b54:	58026000 	.word	0x58026000
 8006b58:	c7520000 	.word	0xc7520000
 8006b5c:	40022300 	.word	0x40022300
 8006b60:	20000000 	.word	0x20000000
 8006b64:	053e2d63 	.word	0x053e2d63
 8006b68:	c3210000 	.word	0xc3210000
 8006b6c:	cb840000 	.word	0xcb840000

08006b70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fcc7 	bl	8005510 <LL_ADC_IsEnabled>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d16e      	bne.n	8006c66 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	4b38      	ldr	r3, [pc, #224]	; (8006c70 <ADC_Enable+0x100>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b9a:	f043 0210 	orr.w	r2, r3, #16
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ba6:	f043 0201 	orr.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e05a      	b.n	8006c68 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe fc82 	bl	80054c0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006bbc:	f7fe fa02 	bl	8004fc4 <HAL_GetTick>
 8006bc0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a2b      	ldr	r2, [pc, #172]	; (8006c74 <ADC_Enable+0x104>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d004      	beq.n	8006bd6 <ADC_Enable+0x66>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a29      	ldr	r2, [pc, #164]	; (8006c78 <ADC_Enable+0x108>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d101      	bne.n	8006bda <ADC_Enable+0x6a>
 8006bd6:	4b29      	ldr	r3, [pc, #164]	; (8006c7c <ADC_Enable+0x10c>)
 8006bd8:	e000      	b.n	8006bdc <ADC_Enable+0x6c>
 8006bda:	4b29      	ldr	r3, [pc, #164]	; (8006c80 <ADC_Enable+0x110>)
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fe fc05 	bl	80053ec <LL_ADC_GetMultimode>
 8006be2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a23      	ldr	r2, [pc, #140]	; (8006c78 <ADC_Enable+0x108>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d002      	beq.n	8006bf4 <ADC_Enable+0x84>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	e000      	b.n	8006bf6 <ADC_Enable+0x86>
 8006bf4:	4b1f      	ldr	r3, [pc, #124]	; (8006c74 <ADC_Enable+0x104>)
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	6812      	ldr	r2, [r2, #0]
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d02c      	beq.n	8006c58 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d130      	bne.n	8006c66 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c04:	e028      	b.n	8006c58 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f7fe fc80 	bl	8005510 <LL_ADC_IsEnabled>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d104      	bne.n	8006c20 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe fc50 	bl	80054c0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006c20:	f7fe f9d0 	bl	8004fc4 <HAL_GetTick>
 8006c24:	4602      	mov	r2, r0
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d914      	bls.n	8006c58 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d00d      	beq.n	8006c58 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c40:	f043 0210 	orr.w	r2, r3, #16
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c4c:	f043 0201 	orr.w	r2, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e007      	b.n	8006c68 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d1cf      	bne.n	8006c06 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	8000003f 	.word	0x8000003f
 8006c74:	40022000 	.word	0x40022000
 8006c78:	40022100 	.word	0x40022100
 8006c7c:	40022300 	.word	0x40022300
 8006c80:	58026300 	.word	0x58026300

08006c84 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe fc50 	bl	8005536 <LL_ADC_IsDisableOngoing>
 8006c96:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fe fc37 	bl	8005510 <LL_ADC_IsEnabled>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d047      	beq.n	8006d38 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d144      	bne.n	8006d38 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f003 030d 	and.w	r3, r3, #13
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d10c      	bne.n	8006cd6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe fc11 	bl	80054e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2203      	movs	r2, #3
 8006ccc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006cce:	f7fe f979 	bl	8004fc4 <HAL_GetTick>
 8006cd2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006cd4:	e029      	b.n	8006d2a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cda:	f043 0210 	orr.w	r2, r3, #16
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce6:	f043 0201 	orr.w	r2, r3, #1
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e023      	b.n	8006d3a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006cf2:	f7fe f967 	bl	8004fc4 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d914      	bls.n	8006d2a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00d      	beq.n	8006d2a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d12:	f043 0210 	orr.w	r2, r3, #16
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d1e:	f043 0201 	orr.w	r2, r3, #1
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e007      	b.n	8006d3a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f003 0301 	and.w	r3, r3, #1
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1dc      	bne.n	8006cf2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3710      	adds	r7, #16
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
	...

08006d44 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a6b      	ldr	r2, [pc, #428]	; (8006f00 <ADC_ConfigureBoostMode+0x1bc>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d004      	beq.n	8006d60 <ADC_ConfigureBoostMode+0x1c>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a6a      	ldr	r2, [pc, #424]	; (8006f04 <ADC_ConfigureBoostMode+0x1c0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d109      	bne.n	8006d74 <ADC_ConfigureBoostMode+0x30>
 8006d60:	4b69      	ldr	r3, [pc, #420]	; (8006f08 <ADC_ConfigureBoostMode+0x1c4>)
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	bf14      	ite	ne
 8006d6c:	2301      	movne	r3, #1
 8006d6e:	2300      	moveq	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	e008      	b.n	8006d86 <ADC_ConfigureBoostMode+0x42>
 8006d74:	4b65      	ldr	r3, [pc, #404]	; (8006f0c <ADC_ConfigureBoostMode+0x1c8>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bf14      	ite	ne
 8006d80:	2301      	movne	r3, #1
 8006d82:	2300      	moveq	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d01c      	beq.n	8006dc4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8006d8a:	f005 ff6b 	bl	800cc64 <HAL_RCC_GetHCLKFreq>
 8006d8e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d98:	d010      	beq.n	8006dbc <ADC_ConfigureBoostMode+0x78>
 8006d9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d9e:	d871      	bhi.n	8006e84 <ADC_ConfigureBoostMode+0x140>
 8006da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006da4:	d002      	beq.n	8006dac <ADC_ConfigureBoostMode+0x68>
 8006da6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006daa:	d16b      	bne.n	8006e84 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	0c1b      	lsrs	r3, r3, #16
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db8:	60fb      	str	r3, [r7, #12]
        break;
 8006dba:	e066      	b.n	8006e8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	089b      	lsrs	r3, r3, #2
 8006dc0:	60fb      	str	r3, [r7, #12]
        break;
 8006dc2:	e062      	b.n	8006e8a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8006dc4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006dc8:	f006 fea2 	bl	800db10 <HAL_RCCEx_GetPeriphCLKFreq>
 8006dcc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006dd6:	d051      	beq.n	8006e7c <ADC_ConfigureBoostMode+0x138>
 8006dd8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8006ddc:	d854      	bhi.n	8006e88 <ADC_ConfigureBoostMode+0x144>
 8006dde:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006de2:	d047      	beq.n	8006e74 <ADC_ConfigureBoostMode+0x130>
 8006de4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8006de8:	d84e      	bhi.n	8006e88 <ADC_ConfigureBoostMode+0x144>
 8006dea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006dee:	d03d      	beq.n	8006e6c <ADC_ConfigureBoostMode+0x128>
 8006df0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8006df4:	d848      	bhi.n	8006e88 <ADC_ConfigureBoostMode+0x144>
 8006df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dfa:	d033      	beq.n	8006e64 <ADC_ConfigureBoostMode+0x120>
 8006dfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e00:	d842      	bhi.n	8006e88 <ADC_ConfigureBoostMode+0x144>
 8006e02:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006e06:	d029      	beq.n	8006e5c <ADC_ConfigureBoostMode+0x118>
 8006e08:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8006e0c:	d83c      	bhi.n	8006e88 <ADC_ConfigureBoostMode+0x144>
 8006e0e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006e12:	d01a      	beq.n	8006e4a <ADC_ConfigureBoostMode+0x106>
 8006e14:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8006e18:	d836      	bhi.n	8006e88 <ADC_ConfigureBoostMode+0x144>
 8006e1a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006e1e:	d014      	beq.n	8006e4a <ADC_ConfigureBoostMode+0x106>
 8006e20:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8006e24:	d830      	bhi.n	8006e88 <ADC_ConfigureBoostMode+0x144>
 8006e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e2a:	d00e      	beq.n	8006e4a <ADC_ConfigureBoostMode+0x106>
 8006e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e30:	d82a      	bhi.n	8006e88 <ADC_ConfigureBoostMode+0x144>
 8006e32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e36:	d008      	beq.n	8006e4a <ADC_ConfigureBoostMode+0x106>
 8006e38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006e3c:	d824      	bhi.n	8006e88 <ADC_ConfigureBoostMode+0x144>
 8006e3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006e42:	d002      	beq.n	8006e4a <ADC_ConfigureBoostMode+0x106>
 8006e44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006e48:	d11e      	bne.n	8006e88 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	0c9b      	lsrs	r3, r3, #18
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e58:	60fb      	str	r3, [r7, #12]
        break;
 8006e5a:	e016      	b.n	8006e8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	091b      	lsrs	r3, r3, #4
 8006e60:	60fb      	str	r3, [r7, #12]
        break;
 8006e62:	e012      	b.n	8006e8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	095b      	lsrs	r3, r3, #5
 8006e68:	60fb      	str	r3, [r7, #12]
        break;
 8006e6a:	e00e      	b.n	8006e8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	099b      	lsrs	r3, r3, #6
 8006e70:	60fb      	str	r3, [r7, #12]
        break;
 8006e72:	e00a      	b.n	8006e8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	09db      	lsrs	r3, r3, #7
 8006e78:	60fb      	str	r3, [r7, #12]
        break;
 8006e7a:	e006      	b.n	8006e8a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	0a1b      	lsrs	r3, r3, #8
 8006e80:	60fb      	str	r3, [r7, #12]
        break;
 8006e82:	e002      	b.n	8006e8a <ADC_ConfigureBoostMode+0x146>
        break;
 8006e84:	bf00      	nop
 8006e86:	e000      	b.n	8006e8a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8006e88:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	4a1f      	ldr	r2, [pc, #124]	; (8006f10 <ADC_ConfigureBoostMode+0x1cc>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d808      	bhi.n	8006eaa <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689a      	ldr	r2, [r3, #8]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006ea6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8006ea8:	e025      	b.n	8006ef6 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	4a19      	ldr	r2, [pc, #100]	; (8006f14 <ADC_ConfigureBoostMode+0x1d0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d80a      	bhi.n	8006ec8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec4:	609a      	str	r2, [r3, #8]
}
 8006ec6:	e016      	b.n	8006ef6 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4a13      	ldr	r2, [pc, #76]	; (8006f18 <ADC_ConfigureBoostMode+0x1d4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d80a      	bhi.n	8006ee6 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ee2:	609a      	str	r2, [r3, #8]
}
 8006ee4:	e007      	b.n	8006ef6 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689a      	ldr	r2, [r3, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8006ef4:	609a      	str	r2, [r3, #8]
}
 8006ef6:	bf00      	nop
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40022000 	.word	0x40022000
 8006f04:	40022100 	.word	0x40022100
 8006f08:	40022300 	.word	0x40022300
 8006f0c:	58026300 	.word	0x58026300
 8006f10:	005f5e10 	.word	0x005f5e10
 8006f14:	00bebc20 	.word	0x00bebc20
 8006f18:	017d7840 	.word	0x017d7840

08006f1c <LL_ADC_StartCalibration>:
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689a      	ldr	r2, [r3, #8]
 8006f2c:	4b09      	ldr	r3, [pc, #36]	; (8006f54 <LL_ADC_StartCalibration+0x38>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006f3c:	430a      	orrs	r2, r1
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	609a      	str	r2, [r3, #8]
}
 8006f48:	bf00      	nop
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	3ffeffc0 	.word	0x3ffeffc0

08006f58 <LL_ADC_IsCalibrationOnGoing>:
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f6c:	d101      	bne.n	8006f72 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d101      	bne.n	8006f9e <HAL_ADCEx_Calibration_Start+0x1e>
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	e04c      	b.n	8007038 <HAL_ADCEx_Calibration_Start+0xb8>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f7ff fe6c 	bl	8006c84 <ADC_Disable>
 8006fac:	4603      	mov	r3, r0
 8006fae:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d135      	bne.n	8007022 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fba:	4b21      	ldr	r3, [pc, #132]	; (8007040 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	f043 0202 	orr.w	r2, r3, #2
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff ffa4 	bl	8006f1c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006fd4:	e014      	b.n	8007000 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	4a19      	ldr	r2, [pc, #100]	; (8007044 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d30d      	bcc.n	8007000 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fe8:	f023 0312 	bic.w	r3, r3, #18
 8006fec:	f043 0210 	orr.w	r2, r3, #16
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e01b      	b.n	8007038 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4618      	mov	r0, r3
 8007006:	f7ff ffa7 	bl	8006f58 <LL_ADC_IsCalibrationOnGoing>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e2      	bne.n	8006fd6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007014:	f023 0303 	bic.w	r3, r3, #3
 8007018:	f043 0201 	orr.w	r2, r3, #1
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	661a      	str	r2, [r3, #96]	; 0x60
 8007020:	e005      	b.n	800702e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007026:	f043 0210 	orr.w	r2, r3, #16
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	ffffeefd 	.word	0xffffeefd
 8007044:	25c3f800 	.word	0x25c3f800

08007048 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80070bc:	4b0b      	ldr	r3, [pc, #44]	; (80070ec <__NVIC_SetPriorityGrouping+0x40>)
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80070c8:	4013      	ands	r3, r2
 80070ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <__NVIC_SetPriorityGrouping+0x44>)
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070da:	4a04      	ldr	r2, [pc, #16]	; (80070ec <__NVIC_SetPriorityGrouping+0x40>)
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	60d3      	str	r3, [r2, #12]
}
 80070e0:	bf00      	nop
 80070e2:	3714      	adds	r7, #20
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr
 80070ec:	e000ed00 	.word	0xe000ed00
 80070f0:	05fa0000 	.word	0x05fa0000

080070f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <__NVIC_GetPriorityGrouping+0x18>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	0a1b      	lsrs	r3, r3, #8
 80070fe:	f003 0307 	and.w	r3, r3, #7
}
 8007102:	4618      	mov	r0, r3
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	e000ed00 	.word	0xe000ed00

08007110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	4603      	mov	r3, r0
 8007118:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800711a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800711e:	2b00      	cmp	r3, #0
 8007120:	db0b      	blt.n	800713a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007122:	88fb      	ldrh	r3, [r7, #6]
 8007124:	f003 021f 	and.w	r2, r3, #31
 8007128:	4907      	ldr	r1, [pc, #28]	; (8007148 <__NVIC_EnableIRQ+0x38>)
 800712a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	2001      	movs	r0, #1
 8007132:	fa00 f202 	lsl.w	r2, r0, r2
 8007136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800713a:	bf00      	nop
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	e000e100 	.word	0xe000e100

0800714c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	4603      	mov	r3, r0
 8007154:	6039      	str	r1, [r7, #0]
 8007156:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007158:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800715c:	2b00      	cmp	r3, #0
 800715e:	db0a      	blt.n	8007176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	b2da      	uxtb	r2, r3
 8007164:	490c      	ldr	r1, [pc, #48]	; (8007198 <__NVIC_SetPriority+0x4c>)
 8007166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800716a:	0112      	lsls	r2, r2, #4
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	440b      	add	r3, r1
 8007170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007174:	e00a      	b.n	800718c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	b2da      	uxtb	r2, r3
 800717a:	4908      	ldr	r1, [pc, #32]	; (800719c <__NVIC_SetPriority+0x50>)
 800717c:	88fb      	ldrh	r3, [r7, #6]
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	3b04      	subs	r3, #4
 8007184:	0112      	lsls	r2, r2, #4
 8007186:	b2d2      	uxtb	r2, r2
 8007188:	440b      	add	r3, r1
 800718a:	761a      	strb	r2, [r3, #24]
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	e000e100 	.word	0xe000e100
 800719c:	e000ed00 	.word	0xe000ed00

080071a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b089      	sub	sp, #36	; 0x24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	f1c3 0307 	rsb	r3, r3, #7
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	bf28      	it	cs
 80071be:	2304      	movcs	r3, #4
 80071c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	3304      	adds	r3, #4
 80071c6:	2b06      	cmp	r3, #6
 80071c8:	d902      	bls.n	80071d0 <NVIC_EncodePriority+0x30>
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3b03      	subs	r3, #3
 80071ce:	e000      	b.n	80071d2 <NVIC_EncodePriority+0x32>
 80071d0:	2300      	movs	r3, #0
 80071d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	fa02 f303 	lsl.w	r3, r2, r3
 80071de:	43da      	mvns	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	401a      	ands	r2, r3
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071e8:	f04f 31ff 	mov.w	r1, #4294967295
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	fa01 f303 	lsl.w	r3, r1, r3
 80071f2:	43d9      	mvns	r1, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071f8:	4313      	orrs	r3, r2
         );
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3724      	adds	r7, #36	; 0x24
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	3b01      	subs	r3, #1
 8007214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007218:	d301      	bcc.n	800721e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800721a:	2301      	movs	r3, #1
 800721c:	e00f      	b.n	800723e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800721e:	4a0a      	ldr	r2, [pc, #40]	; (8007248 <SysTick_Config+0x40>)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3b01      	subs	r3, #1
 8007224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007226:	210f      	movs	r1, #15
 8007228:	f04f 30ff 	mov.w	r0, #4294967295
 800722c:	f7ff ff8e 	bl	800714c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007230:	4b05      	ldr	r3, [pc, #20]	; (8007248 <SysTick_Config+0x40>)
 8007232:	2200      	movs	r2, #0
 8007234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007236:	4b04      	ldr	r3, [pc, #16]	; (8007248 <SysTick_Config+0x40>)
 8007238:	2207      	movs	r2, #7
 800723a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	e000e010 	.word	0xe000e010

0800724c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7ff ff29 	bl	80070ac <__NVIC_SetPriorityGrouping>
}
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b086      	sub	sp, #24
 8007266:	af00      	add	r7, sp, #0
 8007268:	4603      	mov	r3, r0
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	607a      	str	r2, [r7, #4]
 800726e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007270:	f7ff ff40 	bl	80070f4 <__NVIC_GetPriorityGrouping>
 8007274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	6978      	ldr	r0, [r7, #20]
 800727c:	f7ff ff90 	bl	80071a0 <NVIC_EncodePriority>
 8007280:	4602      	mov	r2, r0
 8007282:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007286:	4611      	mov	r1, r2
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff ff5f 	bl	800714c <__NVIC_SetPriority>
}
 800728e:	bf00      	nop
 8007290:	3718      	adds	r7, #24
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	4603      	mov	r3, r0
 800729e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f7ff ff33 	bl	8007110 <__NVIC_EnableIRQ>
}
 80072aa:	bf00      	nop
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff ffa4 	bl	8007208 <SysTick_Config>
 80072c0:	4603      	mov	r3, r0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e054      	b.n	8007388 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	7f5b      	ldrb	r3, [r3, #29]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d105      	bne.n	80072f4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fa f8ee 	bl	80014d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2202      	movs	r2, #2
 80072f8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	791b      	ldrb	r3, [r3, #4]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10c      	bne.n	800731c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a22      	ldr	r2, [pc, #136]	; (8007390 <HAL_CRC_Init+0xc4>)
 8007308:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 0218 	bic.w	r2, r2, #24
 8007318:	609a      	str	r2, [r3, #8]
 800731a:	e00c      	b.n	8007336 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6899      	ldr	r1, [r3, #8]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	461a      	mov	r2, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f948 	bl	80075bc <HAL_CRCEx_Polynomial_Set>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e028      	b.n	8007388 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	795b      	ldrb	r3, [r3, #5]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d105      	bne.n	800734a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f04f 32ff 	mov.w	r2, #4294967295
 8007346:	611a      	str	r2, [r3, #16]
 8007348:	e004      	b.n	8007354 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	6912      	ldr	r2, [r2, #16]
 8007352:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	695a      	ldr	r2, [r3, #20]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	699a      	ldr	r2, [r3, #24]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	04c11db7 	.word	0x04c11db7

08007394 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80073a0:	2300      	movs	r3, #0
 80073a2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2202      	movs	r2, #2
 80073a8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0201 	orr.w	r2, r2, #1
 80073b8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d006      	beq.n	80073d0 <HAL_CRC_Calculate+0x3c>
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d829      	bhi.n	800741a <HAL_CRC_Calculate+0x86>
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d019      	beq.n	80073fe <HAL_CRC_Calculate+0x6a>
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d01e      	beq.n	800740c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80073ce:	e024      	b.n	800741a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80073d0:	2300      	movs	r3, #0
 80073d2:	617b      	str	r3, [r7, #20]
 80073d4:	e00a      	b.n	80073ec <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	441a      	add	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6812      	ldr	r2, [r2, #0]
 80073e4:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	3301      	adds	r3, #1
 80073ea:	617b      	str	r3, [r7, #20]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d3f0      	bcc.n	80073d6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	613b      	str	r3, [r7, #16]
      break;
 80073fc:	e00e      	b.n	800741c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 f812 	bl	800742c <CRC_Handle_8>
 8007408:	6138      	str	r0, [r7, #16]
      break;
 800740a:	e007      	b.n	800741c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	68b9      	ldr	r1, [r7, #8]
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 f899 	bl	8007548 <CRC_Handle_16>
 8007416:	6138      	str	r0, [r7, #16]
      break;
 8007418:	e000      	b.n	800741c <HAL_CRC_Calculate+0x88>
      break;
 800741a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2201      	movs	r2, #1
 8007420:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8007422:	693b      	ldr	r3, [r7, #16]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800742c:	b480      	push	{r7}
 800742e:	b089      	sub	sp, #36	; 0x24
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007438:	2300      	movs	r3, #0
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	e023      	b.n	8007486 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	68ba      	ldr	r2, [r7, #8]
 8007444:	4413      	add	r3, r2
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	3301      	adds	r3, #1
 8007450:	68b9      	ldr	r1, [r7, #8]
 8007452:	440b      	add	r3, r1
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007458:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	3302      	adds	r3, #2
 8007460:	68b9      	ldr	r1, [r7, #8]
 8007462:	440b      	add	r3, r1
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8007468:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	3303      	adds	r3, #3
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	440b      	add	r3, r1
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800747c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800747e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	3301      	adds	r3, #1
 8007484:	61fb      	str	r3, [r7, #28]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	089b      	lsrs	r3, r3, #2
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	429a      	cmp	r2, r3
 800748e:	d3d6      	bcc.n	800743e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	f003 0303 	and.w	r3, r3, #3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d04d      	beq.n	8007536 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f003 0303 	and.w	r3, r3, #3
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d107      	bne.n	80074b4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	4413      	add	r3, r2
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	6812      	ldr	r2, [r2, #0]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d116      	bne.n	80074ec <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	4413      	add	r3, r2
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	b21a      	sxth	r2, r3
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	3301      	adds	r3, #1
 80074d2:	68b9      	ldr	r1, [r7, #8]
 80074d4:	440b      	add	r3, r1
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	b21b      	sxth	r3, r3
 80074da:	4313      	orrs	r3, r2
 80074dc:	b21b      	sxth	r3, r3
 80074de:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	8b7a      	ldrh	r2, [r7, #26]
 80074ea:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d11f      	bne.n	8007536 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	68ba      	ldr	r2, [r7, #8]
 80074fc:	4413      	add	r3, r2
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	021b      	lsls	r3, r3, #8
 8007502:	b21a      	sxth	r2, r3
 8007504:	69fb      	ldr	r3, [r7, #28]
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	3301      	adds	r3, #1
 800750a:	68b9      	ldr	r1, [r7, #8]
 800750c:	440b      	add	r3, r1
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	b21b      	sxth	r3, r3
 8007512:	4313      	orrs	r3, r2
 8007514:	b21b      	sxth	r3, r3
 8007516:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	8b7a      	ldrh	r2, [r7, #26]
 8007522:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	3302      	adds	r3, #2
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	4413      	add	r3, r2
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3724      	adds	r7, #36	; 0x24
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8007548:	b480      	push	{r7}
 800754a:	b087      	sub	sp, #28
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8007554:	2300      	movs	r3, #0
 8007556:	617b      	str	r3, [r7, #20]
 8007558:	e013      	b.n	8007582 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	4413      	add	r3, r2
 8007562:	881b      	ldrh	r3, [r3, #0]
 8007564:	041a      	lsls	r2, r3, #16
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	3302      	adds	r3, #2
 800756c:	68b9      	ldr	r1, [r7, #8]
 800756e:	440b      	add	r3, r1
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	4619      	mov	r1, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	430a      	orrs	r2, r1
 800757a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	3301      	adds	r3, #1
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	085b      	lsrs	r3, r3, #1
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	429a      	cmp	r2, r3
 800758a:	d3e6      	bcc.n	800755a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d009      	beq.n	80075aa <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	4413      	add	r3, r2
 80075a4:	881a      	ldrh	r2, [r3, #0]
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	371c      	adds	r7, #28
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80075cc:	231f      	movs	r3, #31
 80075ce:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80075d0:	bf00      	nop
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	1e5a      	subs	r2, r3, #1
 80075d6:	613a      	str	r2, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d009      	beq.n	80075f0 <HAL_CRCEx_Polynomial_Set+0x34>
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	f003 031f 	and.w	r3, r3, #31
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	fa22 f303 	lsr.w	r3, r2, r3
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d0f0      	beq.n	80075d2 <HAL_CRCEx_Polynomial_Set+0x16>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b18      	cmp	r3, #24
 80075f4:	d846      	bhi.n	8007684 <HAL_CRCEx_Polynomial_Set+0xc8>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <HAL_CRCEx_Polynomial_Set+0x40>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	0800768b 	.word	0x0800768b
 8007600:	08007685 	.word	0x08007685
 8007604:	08007685 	.word	0x08007685
 8007608:	08007685 	.word	0x08007685
 800760c:	08007685 	.word	0x08007685
 8007610:	08007685 	.word	0x08007685
 8007614:	08007685 	.word	0x08007685
 8007618:	08007685 	.word	0x08007685
 800761c:	08007679 	.word	0x08007679
 8007620:	08007685 	.word	0x08007685
 8007624:	08007685 	.word	0x08007685
 8007628:	08007685 	.word	0x08007685
 800762c:	08007685 	.word	0x08007685
 8007630:	08007685 	.word	0x08007685
 8007634:	08007685 	.word	0x08007685
 8007638:	08007685 	.word	0x08007685
 800763c:	0800766d 	.word	0x0800766d
 8007640:	08007685 	.word	0x08007685
 8007644:	08007685 	.word	0x08007685
 8007648:	08007685 	.word	0x08007685
 800764c:	08007685 	.word	0x08007685
 8007650:	08007685 	.word	0x08007685
 8007654:	08007685 	.word	0x08007685
 8007658:	08007685 	.word	0x08007685
 800765c:	08007661 	.word	0x08007661
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	2b06      	cmp	r3, #6
 8007664:	d913      	bls.n	800768e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800766a:	e010      	b.n	800768e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	2b07      	cmp	r3, #7
 8007670:	d90f      	bls.n	8007692 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007676:	e00c      	b.n	8007692 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	2b0f      	cmp	r3, #15
 800767c:	d90b      	bls.n	8007696 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007682:	e008      	b.n	8007696 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	75fb      	strb	r3, [r7, #23]
      break;
 8007688:	e006      	b.n	8007698 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800768a:	bf00      	nop
 800768c:	e004      	b.n	8007698 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800768e:	bf00      	nop
 8007690:	e002      	b.n	8007698 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007692:	bf00      	nop
 8007694:	e000      	b.n	8007698 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8007696:	bf00      	nop
  }
  if (status == HAL_OK)
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10d      	bne.n	80076ba <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f023 0118 	bic.w	r1, r3, #24
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	430a      	orrs	r2, r1
 80076b8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	371c      	adds	r7, #28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr

080076c8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b086      	sub	sp, #24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80076d0:	f7fd fc78 	bl	8004fc4 <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e314      	b.n	8007d0a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a66      	ldr	r2, [pc, #408]	; (8007880 <HAL_DMA_Init+0x1b8>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d04a      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a65      	ldr	r2, [pc, #404]	; (8007884 <HAL_DMA_Init+0x1bc>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d045      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a63      	ldr	r2, [pc, #396]	; (8007888 <HAL_DMA_Init+0x1c0>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d040      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a62      	ldr	r2, [pc, #392]	; (800788c <HAL_DMA_Init+0x1c4>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d03b      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a60      	ldr	r2, [pc, #384]	; (8007890 <HAL_DMA_Init+0x1c8>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d036      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a5f      	ldr	r2, [pc, #380]	; (8007894 <HAL_DMA_Init+0x1cc>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d031      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a5d      	ldr	r2, [pc, #372]	; (8007898 <HAL_DMA_Init+0x1d0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d02c      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a5c      	ldr	r2, [pc, #368]	; (800789c <HAL_DMA_Init+0x1d4>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d027      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a5a      	ldr	r2, [pc, #360]	; (80078a0 <HAL_DMA_Init+0x1d8>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d022      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a59      	ldr	r2, [pc, #356]	; (80078a4 <HAL_DMA_Init+0x1dc>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d01d      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a57      	ldr	r2, [pc, #348]	; (80078a8 <HAL_DMA_Init+0x1e0>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d018      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a56      	ldr	r2, [pc, #344]	; (80078ac <HAL_DMA_Init+0x1e4>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d013      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a54      	ldr	r2, [pc, #336]	; (80078b0 <HAL_DMA_Init+0x1e8>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00e      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a53      	ldr	r2, [pc, #332]	; (80078b4 <HAL_DMA_Init+0x1ec>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d009      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a51      	ldr	r2, [pc, #324]	; (80078b8 <HAL_DMA_Init+0x1f0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <HAL_DMA_Init+0xb8>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a50      	ldr	r2, [pc, #320]	; (80078bc <HAL_DMA_Init+0x1f4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d101      	bne.n	8007784 <HAL_DMA_Init+0xbc>
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <HAL_DMA_Init+0xbe>
 8007784:	2300      	movs	r3, #0
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 813c 	beq.w	8007a04 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a37      	ldr	r2, [pc, #220]	; (8007880 <HAL_DMA_Init+0x1b8>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d04a      	beq.n	800783c <HAL_DMA_Init+0x174>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a36      	ldr	r2, [pc, #216]	; (8007884 <HAL_DMA_Init+0x1bc>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d045      	beq.n	800783c <HAL_DMA_Init+0x174>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a34      	ldr	r2, [pc, #208]	; (8007888 <HAL_DMA_Init+0x1c0>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d040      	beq.n	800783c <HAL_DMA_Init+0x174>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a33      	ldr	r2, [pc, #204]	; (800788c <HAL_DMA_Init+0x1c4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d03b      	beq.n	800783c <HAL_DMA_Init+0x174>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a31      	ldr	r2, [pc, #196]	; (8007890 <HAL_DMA_Init+0x1c8>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d036      	beq.n	800783c <HAL_DMA_Init+0x174>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a30      	ldr	r2, [pc, #192]	; (8007894 <HAL_DMA_Init+0x1cc>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d031      	beq.n	800783c <HAL_DMA_Init+0x174>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a2e      	ldr	r2, [pc, #184]	; (8007898 <HAL_DMA_Init+0x1d0>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d02c      	beq.n	800783c <HAL_DMA_Init+0x174>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a2d      	ldr	r2, [pc, #180]	; (800789c <HAL_DMA_Init+0x1d4>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d027      	beq.n	800783c <HAL_DMA_Init+0x174>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a2b      	ldr	r2, [pc, #172]	; (80078a0 <HAL_DMA_Init+0x1d8>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d022      	beq.n	800783c <HAL_DMA_Init+0x174>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a2a      	ldr	r2, [pc, #168]	; (80078a4 <HAL_DMA_Init+0x1dc>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d01d      	beq.n	800783c <HAL_DMA_Init+0x174>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a28      	ldr	r2, [pc, #160]	; (80078a8 <HAL_DMA_Init+0x1e0>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d018      	beq.n	800783c <HAL_DMA_Init+0x174>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a27      	ldr	r2, [pc, #156]	; (80078ac <HAL_DMA_Init+0x1e4>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d013      	beq.n	800783c <HAL_DMA_Init+0x174>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a25      	ldr	r2, [pc, #148]	; (80078b0 <HAL_DMA_Init+0x1e8>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d00e      	beq.n	800783c <HAL_DMA_Init+0x174>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a24      	ldr	r2, [pc, #144]	; (80078b4 <HAL_DMA_Init+0x1ec>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d009      	beq.n	800783c <HAL_DMA_Init+0x174>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a22      	ldr	r2, [pc, #136]	; (80078b8 <HAL_DMA_Init+0x1f0>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d004      	beq.n	800783c <HAL_DMA_Init+0x174>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a21      	ldr	r2, [pc, #132]	; (80078bc <HAL_DMA_Init+0x1f4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d108      	bne.n	800784e <HAL_DMA_Init+0x186>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0201 	bic.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	e007      	b.n	800785e <HAL_DMA_Init+0x196>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0201 	bic.w	r2, r2, #1
 800785c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800785e:	e02f      	b.n	80078c0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007860:	f7fd fbb0 	bl	8004fc4 <HAL_GetTick>
 8007864:	4602      	mov	r2, r0
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	1ad3      	subs	r3, r2, r3
 800786a:	2b05      	cmp	r3, #5
 800786c:	d928      	bls.n	80078c0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2203      	movs	r2, #3
 8007878:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e244      	b.n	8007d0a <HAL_DMA_Init+0x642>
 8007880:	40020010 	.word	0x40020010
 8007884:	40020028 	.word	0x40020028
 8007888:	40020040 	.word	0x40020040
 800788c:	40020058 	.word	0x40020058
 8007890:	40020070 	.word	0x40020070
 8007894:	40020088 	.word	0x40020088
 8007898:	400200a0 	.word	0x400200a0
 800789c:	400200b8 	.word	0x400200b8
 80078a0:	40020410 	.word	0x40020410
 80078a4:	40020428 	.word	0x40020428
 80078a8:	40020440 	.word	0x40020440
 80078ac:	40020458 	.word	0x40020458
 80078b0:	40020470 	.word	0x40020470
 80078b4:	40020488 	.word	0x40020488
 80078b8:	400204a0 	.word	0x400204a0
 80078bc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1c8      	bne.n	8007860 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	4b84      	ldr	r3, [pc, #528]	; (8007aec <HAL_DMA_Init+0x424>)
 80078da:	4013      	ands	r3, r2
 80078dc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80078e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	699b      	ldr	r3, [r3, #24]
 80078f8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078fe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a1b      	ldr	r3, [r3, #32]
 8007904:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4313      	orrs	r3, r2
 800790a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007910:	2b04      	cmp	r3, #4
 8007912:	d107      	bne.n	8007924 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800791c:	4313      	orrs	r3, r2
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	4313      	orrs	r3, r2
 8007922:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	2b28      	cmp	r3, #40	; 0x28
 800792a:	d903      	bls.n	8007934 <HAL_DMA_Init+0x26c>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	2b2e      	cmp	r3, #46	; 0x2e
 8007932:	d91f      	bls.n	8007974 <HAL_DMA_Init+0x2ac>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	685b      	ldr	r3, [r3, #4]
 8007938:	2b3e      	cmp	r3, #62	; 0x3e
 800793a:	d903      	bls.n	8007944 <HAL_DMA_Init+0x27c>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	2b42      	cmp	r3, #66	; 0x42
 8007942:	d917      	bls.n	8007974 <HAL_DMA_Init+0x2ac>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	2b46      	cmp	r3, #70	; 0x46
 800794a:	d903      	bls.n	8007954 <HAL_DMA_Init+0x28c>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	2b48      	cmp	r3, #72	; 0x48
 8007952:	d90f      	bls.n	8007974 <HAL_DMA_Init+0x2ac>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	2b4e      	cmp	r3, #78	; 0x4e
 800795a:	d903      	bls.n	8007964 <HAL_DMA_Init+0x29c>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	2b52      	cmp	r3, #82	; 0x52
 8007962:	d907      	bls.n	8007974 <HAL_DMA_Init+0x2ac>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2b73      	cmp	r3, #115	; 0x73
 800796a:	d905      	bls.n	8007978 <HAL_DMA_Init+0x2b0>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b77      	cmp	r3, #119	; 0x77
 8007972:	d801      	bhi.n	8007978 <HAL_DMA_Init+0x2b0>
 8007974:	2301      	movs	r3, #1
 8007976:	e000      	b.n	800797a <HAL_DMA_Init+0x2b2>
 8007978:	2300      	movs	r3, #0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007984:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f023 0307 	bic.w	r3, r3, #7
 800799c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	697a      	ldr	r2, [r7, #20]
 80079a4:	4313      	orrs	r3, r2
 80079a6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2b04      	cmp	r3, #4
 80079ae:	d117      	bne.n	80079e0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	4313      	orrs	r3, r2
 80079b8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00e      	beq.n	80079e0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 ff26 	bl	8009814 <DMA_CheckFifoParam>
 80079c8:	4603      	mov	r3, r0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d008      	beq.n	80079e0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2240      	movs	r2, #64	; 0x40
 80079d2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e194      	b.n	8007d0a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f001 fe61 	bl	80096b0 <DMA_CalcBaseAndBitshift>
 80079ee:	4603      	mov	r3, r0
 80079f0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f6:	f003 031f 	and.w	r3, r3, #31
 80079fa:	223f      	movs	r2, #63	; 0x3f
 80079fc:	409a      	lsls	r2, r3
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	609a      	str	r2, [r3, #8]
 8007a02:	e0ca      	b.n	8007b9a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a39      	ldr	r2, [pc, #228]	; (8007af0 <HAL_DMA_Init+0x428>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d022      	beq.n	8007a54 <HAL_DMA_Init+0x38c>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a38      	ldr	r2, [pc, #224]	; (8007af4 <HAL_DMA_Init+0x42c>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d01d      	beq.n	8007a54 <HAL_DMA_Init+0x38c>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a36      	ldr	r2, [pc, #216]	; (8007af8 <HAL_DMA_Init+0x430>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d018      	beq.n	8007a54 <HAL_DMA_Init+0x38c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a35      	ldr	r2, [pc, #212]	; (8007afc <HAL_DMA_Init+0x434>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d013      	beq.n	8007a54 <HAL_DMA_Init+0x38c>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a33      	ldr	r2, [pc, #204]	; (8007b00 <HAL_DMA_Init+0x438>)
 8007a32:	4293      	cmp	r3, r2
 8007a34:	d00e      	beq.n	8007a54 <HAL_DMA_Init+0x38c>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a32      	ldr	r2, [pc, #200]	; (8007b04 <HAL_DMA_Init+0x43c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d009      	beq.n	8007a54 <HAL_DMA_Init+0x38c>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a30      	ldr	r2, [pc, #192]	; (8007b08 <HAL_DMA_Init+0x440>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d004      	beq.n	8007a54 <HAL_DMA_Init+0x38c>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a2f      	ldr	r2, [pc, #188]	; (8007b0c <HAL_DMA_Init+0x444>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d101      	bne.n	8007a58 <HAL_DMA_Init+0x390>
 8007a54:	2301      	movs	r3, #1
 8007a56:	e000      	b.n	8007a5a <HAL_DMA_Init+0x392>
 8007a58:	2300      	movs	r3, #0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f000 8094 	beq.w	8007b88 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a22      	ldr	r2, [pc, #136]	; (8007af0 <HAL_DMA_Init+0x428>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d021      	beq.n	8007aae <HAL_DMA_Init+0x3e6>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a21      	ldr	r2, [pc, #132]	; (8007af4 <HAL_DMA_Init+0x42c>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d01c      	beq.n	8007aae <HAL_DMA_Init+0x3e6>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a1f      	ldr	r2, [pc, #124]	; (8007af8 <HAL_DMA_Init+0x430>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d017      	beq.n	8007aae <HAL_DMA_Init+0x3e6>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a1e      	ldr	r2, [pc, #120]	; (8007afc <HAL_DMA_Init+0x434>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d012      	beq.n	8007aae <HAL_DMA_Init+0x3e6>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a1c      	ldr	r2, [pc, #112]	; (8007b00 <HAL_DMA_Init+0x438>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d00d      	beq.n	8007aae <HAL_DMA_Init+0x3e6>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a1b      	ldr	r2, [pc, #108]	; (8007b04 <HAL_DMA_Init+0x43c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d008      	beq.n	8007aae <HAL_DMA_Init+0x3e6>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a19      	ldr	r2, [pc, #100]	; (8007b08 <HAL_DMA_Init+0x440>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d003      	beq.n	8007aae <HAL_DMA_Init+0x3e6>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a18      	ldr	r2, [pc, #96]	; (8007b0c <HAL_DMA_Init+0x444>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007ac8:	697a      	ldr	r2, [r7, #20]
 8007aca:	4b11      	ldr	r3, [pc, #68]	; (8007b10 <HAL_DMA_Init+0x448>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	2b40      	cmp	r3, #64	; 0x40
 8007ad6:	d01d      	beq.n	8007b14 <HAL_DMA_Init+0x44c>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	2b80      	cmp	r3, #128	; 0x80
 8007ade:	d102      	bne.n	8007ae6 <HAL_DMA_Init+0x41e>
 8007ae0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ae4:	e017      	b.n	8007b16 <HAL_DMA_Init+0x44e>
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e015      	b.n	8007b16 <HAL_DMA_Init+0x44e>
 8007aea:	bf00      	nop
 8007aec:	fe10803f 	.word	0xfe10803f
 8007af0:	58025408 	.word	0x58025408
 8007af4:	5802541c 	.word	0x5802541c
 8007af8:	58025430 	.word	0x58025430
 8007afc:	58025444 	.word	0x58025444
 8007b00:	58025458 	.word	0x58025458
 8007b04:	5802546c 	.word	0x5802546c
 8007b08:	58025480 	.word	0x58025480
 8007b0c:	58025494 	.word	0x58025494
 8007b10:	fffe000f 	.word	0xfffe000f
 8007b14:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	68d2      	ldr	r2, [r2, #12]
 8007b1a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007b24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007b2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007b34:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007b3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007b44:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	4b6e      	ldr	r3, [pc, #440]	; (8007d14 <HAL_DMA_Init+0x64c>)
 8007b5c:	4413      	add	r3, r2
 8007b5e:	4a6e      	ldr	r2, [pc, #440]	; (8007d18 <HAL_DMA_Init+0x650>)
 8007b60:	fba2 2303 	umull	r2, r3, r2, r3
 8007b64:	091b      	lsrs	r3, r3, #4
 8007b66:	009a      	lsls	r2, r3, #2
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f001 fd9f 	bl	80096b0 <DMA_CalcBaseAndBitshift>
 8007b72:	4603      	mov	r3, r0
 8007b74:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b7a:	f003 031f 	and.w	r3, r3, #31
 8007b7e:	2201      	movs	r2, #1
 8007b80:	409a      	lsls	r2, r3
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	605a      	str	r2, [r3, #4]
 8007b86:	e008      	b.n	8007b9a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2240      	movs	r2, #64	; 0x40
 8007b8c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2203      	movs	r2, #3
 8007b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e0b7      	b.n	8007d0a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a5f      	ldr	r2, [pc, #380]	; (8007d1c <HAL_DMA_Init+0x654>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d072      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a5d      	ldr	r2, [pc, #372]	; (8007d20 <HAL_DMA_Init+0x658>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d06d      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a5c      	ldr	r2, [pc, #368]	; (8007d24 <HAL_DMA_Init+0x65c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d068      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a5a      	ldr	r2, [pc, #360]	; (8007d28 <HAL_DMA_Init+0x660>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d063      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a59      	ldr	r2, [pc, #356]	; (8007d2c <HAL_DMA_Init+0x664>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d05e      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a57      	ldr	r2, [pc, #348]	; (8007d30 <HAL_DMA_Init+0x668>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d059      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a56      	ldr	r2, [pc, #344]	; (8007d34 <HAL_DMA_Init+0x66c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d054      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a54      	ldr	r2, [pc, #336]	; (8007d38 <HAL_DMA_Init+0x670>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d04f      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a53      	ldr	r2, [pc, #332]	; (8007d3c <HAL_DMA_Init+0x674>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d04a      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a51      	ldr	r2, [pc, #324]	; (8007d40 <HAL_DMA_Init+0x678>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d045      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a50      	ldr	r2, [pc, #320]	; (8007d44 <HAL_DMA_Init+0x67c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d040      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a4e      	ldr	r2, [pc, #312]	; (8007d48 <HAL_DMA_Init+0x680>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d03b      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a4d      	ldr	r2, [pc, #308]	; (8007d4c <HAL_DMA_Init+0x684>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d036      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a4b      	ldr	r2, [pc, #300]	; (8007d50 <HAL_DMA_Init+0x688>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d031      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a4a      	ldr	r2, [pc, #296]	; (8007d54 <HAL_DMA_Init+0x68c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d02c      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a48      	ldr	r2, [pc, #288]	; (8007d58 <HAL_DMA_Init+0x690>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d027      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a47      	ldr	r2, [pc, #284]	; (8007d5c <HAL_DMA_Init+0x694>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d022      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a45      	ldr	r2, [pc, #276]	; (8007d60 <HAL_DMA_Init+0x698>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d01d      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a44      	ldr	r2, [pc, #272]	; (8007d64 <HAL_DMA_Init+0x69c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d018      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a42      	ldr	r2, [pc, #264]	; (8007d68 <HAL_DMA_Init+0x6a0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a41      	ldr	r2, [pc, #260]	; (8007d6c <HAL_DMA_Init+0x6a4>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d00e      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a3f      	ldr	r2, [pc, #252]	; (8007d70 <HAL_DMA_Init+0x6a8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d009      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a3e      	ldr	r2, [pc, #248]	; (8007d74 <HAL_DMA_Init+0x6ac>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d004      	beq.n	8007c8a <HAL_DMA_Init+0x5c2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a3c      	ldr	r2, [pc, #240]	; (8007d78 <HAL_DMA_Init+0x6b0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d101      	bne.n	8007c8e <HAL_DMA_Init+0x5c6>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e000      	b.n	8007c90 <HAL_DMA_Init+0x5c8>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d032      	beq.n	8007cfa <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 fe39 	bl	800990c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	689b      	ldr	r3, [r3, #8]
 8007c9e:	2b80      	cmp	r3, #128	; 0x80
 8007ca0:	d102      	bne.n	8007ca8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685a      	ldr	r2, [r3, #4]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cb0:	b2d2      	uxtb	r2, r2
 8007cb2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cb8:	687a      	ldr	r2, [r7, #4]
 8007cba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007cbc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	685b      	ldr	r3, [r3, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d010      	beq.n	8007ce8 <HAL_DMA_Init+0x620>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b08      	cmp	r3, #8
 8007ccc:	d80c      	bhi.n	8007ce8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 feb6 	bl	8009a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cd8:	2200      	movs	r2, #0
 8007cda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007ce4:	605a      	str	r2, [r3, #4]
 8007ce6:	e008      	b.n	8007cfa <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007d08:	2300      	movs	r3, #0
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3718      	adds	r7, #24
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	a7fdabf8 	.word	0xa7fdabf8
 8007d18:	cccccccd 	.word	0xcccccccd
 8007d1c:	40020010 	.word	0x40020010
 8007d20:	40020028 	.word	0x40020028
 8007d24:	40020040 	.word	0x40020040
 8007d28:	40020058 	.word	0x40020058
 8007d2c:	40020070 	.word	0x40020070
 8007d30:	40020088 	.word	0x40020088
 8007d34:	400200a0 	.word	0x400200a0
 8007d38:	400200b8 	.word	0x400200b8
 8007d3c:	40020410 	.word	0x40020410
 8007d40:	40020428 	.word	0x40020428
 8007d44:	40020440 	.word	0x40020440
 8007d48:	40020458 	.word	0x40020458
 8007d4c:	40020470 	.word	0x40020470
 8007d50:	40020488 	.word	0x40020488
 8007d54:	400204a0 	.word	0x400204a0
 8007d58:	400204b8 	.word	0x400204b8
 8007d5c:	58025408 	.word	0x58025408
 8007d60:	5802541c 	.word	0x5802541c
 8007d64:	58025430 	.word	0x58025430
 8007d68:	58025444 	.word	0x58025444
 8007d6c:	58025458 	.word	0x58025458
 8007d70:	5802546c 	.word	0x5802546c
 8007d74:	58025480 	.word	0x58025480
 8007d78:	58025494 	.word	0x58025494

08007d7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007d84:	f7fd f91e 	bl	8004fc4 <HAL_GetTick>
 8007d88:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e2dc      	b.n	800834e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	d008      	beq.n	8007db2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2280      	movs	r2, #128	; 0x80
 8007da4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e2cd      	b.n	800834e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a76      	ldr	r2, [pc, #472]	; (8007f90 <HAL_DMA_Abort+0x214>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d04a      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a74      	ldr	r2, [pc, #464]	; (8007f94 <HAL_DMA_Abort+0x218>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d045      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a73      	ldr	r2, [pc, #460]	; (8007f98 <HAL_DMA_Abort+0x21c>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d040      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a71      	ldr	r2, [pc, #452]	; (8007f9c <HAL_DMA_Abort+0x220>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d03b      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a70      	ldr	r2, [pc, #448]	; (8007fa0 <HAL_DMA_Abort+0x224>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d036      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a6e      	ldr	r2, [pc, #440]	; (8007fa4 <HAL_DMA_Abort+0x228>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d031      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a6d      	ldr	r2, [pc, #436]	; (8007fa8 <HAL_DMA_Abort+0x22c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d02c      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a6b      	ldr	r2, [pc, #428]	; (8007fac <HAL_DMA_Abort+0x230>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d027      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a6a      	ldr	r2, [pc, #424]	; (8007fb0 <HAL_DMA_Abort+0x234>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d022      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a68      	ldr	r2, [pc, #416]	; (8007fb4 <HAL_DMA_Abort+0x238>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d01d      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a67      	ldr	r2, [pc, #412]	; (8007fb8 <HAL_DMA_Abort+0x23c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d018      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a65      	ldr	r2, [pc, #404]	; (8007fbc <HAL_DMA_Abort+0x240>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d013      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a64      	ldr	r2, [pc, #400]	; (8007fc0 <HAL_DMA_Abort+0x244>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d00e      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a62      	ldr	r2, [pc, #392]	; (8007fc4 <HAL_DMA_Abort+0x248>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d009      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a61      	ldr	r2, [pc, #388]	; (8007fc8 <HAL_DMA_Abort+0x24c>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d004      	beq.n	8007e52 <HAL_DMA_Abort+0xd6>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a5f      	ldr	r2, [pc, #380]	; (8007fcc <HAL_DMA_Abort+0x250>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d101      	bne.n	8007e56 <HAL_DMA_Abort+0xda>
 8007e52:	2301      	movs	r3, #1
 8007e54:	e000      	b.n	8007e58 <HAL_DMA_Abort+0xdc>
 8007e56:	2300      	movs	r3, #0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d013      	beq.n	8007e84 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 021e 	bic.w	r2, r2, #30
 8007e6a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	695a      	ldr	r2, [r3, #20]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e7a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	e00a      	b.n	8007e9a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 020e 	bic.w	r2, r2, #14
 8007e92:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a3c      	ldr	r2, [pc, #240]	; (8007f90 <HAL_DMA_Abort+0x214>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d072      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a3a      	ldr	r2, [pc, #232]	; (8007f94 <HAL_DMA_Abort+0x218>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d06d      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a39      	ldr	r2, [pc, #228]	; (8007f98 <HAL_DMA_Abort+0x21c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d068      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a37      	ldr	r2, [pc, #220]	; (8007f9c <HAL_DMA_Abort+0x220>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d063      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a36      	ldr	r2, [pc, #216]	; (8007fa0 <HAL_DMA_Abort+0x224>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d05e      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a34      	ldr	r2, [pc, #208]	; (8007fa4 <HAL_DMA_Abort+0x228>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d059      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a33      	ldr	r2, [pc, #204]	; (8007fa8 <HAL_DMA_Abort+0x22c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d054      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a31      	ldr	r2, [pc, #196]	; (8007fac <HAL_DMA_Abort+0x230>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d04f      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a30      	ldr	r2, [pc, #192]	; (8007fb0 <HAL_DMA_Abort+0x234>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d04a      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a2e      	ldr	r2, [pc, #184]	; (8007fb4 <HAL_DMA_Abort+0x238>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d045      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a2d      	ldr	r2, [pc, #180]	; (8007fb8 <HAL_DMA_Abort+0x23c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d040      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a2b      	ldr	r2, [pc, #172]	; (8007fbc <HAL_DMA_Abort+0x240>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d03b      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a2a      	ldr	r2, [pc, #168]	; (8007fc0 <HAL_DMA_Abort+0x244>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d036      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a28      	ldr	r2, [pc, #160]	; (8007fc4 <HAL_DMA_Abort+0x248>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d031      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a27      	ldr	r2, [pc, #156]	; (8007fc8 <HAL_DMA_Abort+0x24c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d02c      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a25      	ldr	r2, [pc, #148]	; (8007fcc <HAL_DMA_Abort+0x250>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d027      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a24      	ldr	r2, [pc, #144]	; (8007fd0 <HAL_DMA_Abort+0x254>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d022      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a22      	ldr	r2, [pc, #136]	; (8007fd4 <HAL_DMA_Abort+0x258>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d01d      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a21      	ldr	r2, [pc, #132]	; (8007fd8 <HAL_DMA_Abort+0x25c>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d018      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a1f      	ldr	r2, [pc, #124]	; (8007fdc <HAL_DMA_Abort+0x260>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d013      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a1e      	ldr	r2, [pc, #120]	; (8007fe0 <HAL_DMA_Abort+0x264>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d00e      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a1c      	ldr	r2, [pc, #112]	; (8007fe4 <HAL_DMA_Abort+0x268>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d009      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a1b      	ldr	r2, [pc, #108]	; (8007fe8 <HAL_DMA_Abort+0x26c>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d004      	beq.n	8007f8a <HAL_DMA_Abort+0x20e>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a19      	ldr	r2, [pc, #100]	; (8007fec <HAL_DMA_Abort+0x270>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d132      	bne.n	8007ff0 <HAL_DMA_Abort+0x274>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e031      	b.n	8007ff2 <HAL_DMA_Abort+0x276>
 8007f8e:	bf00      	nop
 8007f90:	40020010 	.word	0x40020010
 8007f94:	40020028 	.word	0x40020028
 8007f98:	40020040 	.word	0x40020040
 8007f9c:	40020058 	.word	0x40020058
 8007fa0:	40020070 	.word	0x40020070
 8007fa4:	40020088 	.word	0x40020088
 8007fa8:	400200a0 	.word	0x400200a0
 8007fac:	400200b8 	.word	0x400200b8
 8007fb0:	40020410 	.word	0x40020410
 8007fb4:	40020428 	.word	0x40020428
 8007fb8:	40020440 	.word	0x40020440
 8007fbc:	40020458 	.word	0x40020458
 8007fc0:	40020470 	.word	0x40020470
 8007fc4:	40020488 	.word	0x40020488
 8007fc8:	400204a0 	.word	0x400204a0
 8007fcc:	400204b8 	.word	0x400204b8
 8007fd0:	58025408 	.word	0x58025408
 8007fd4:	5802541c 	.word	0x5802541c
 8007fd8:	58025430 	.word	0x58025430
 8007fdc:	58025444 	.word	0x58025444
 8007fe0:	58025458 	.word	0x58025458
 8007fe4:	5802546c 	.word	0x5802546c
 8007fe8:	58025480 	.word	0x58025480
 8007fec:	58025494 	.word	0x58025494
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d007      	beq.n	8008006 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008004:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a6d      	ldr	r2, [pc, #436]	; (80081c0 <HAL_DMA_Abort+0x444>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d04a      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a6b      	ldr	r2, [pc, #428]	; (80081c4 <HAL_DMA_Abort+0x448>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d045      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a6a      	ldr	r2, [pc, #424]	; (80081c8 <HAL_DMA_Abort+0x44c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d040      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a68      	ldr	r2, [pc, #416]	; (80081cc <HAL_DMA_Abort+0x450>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d03b      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a67      	ldr	r2, [pc, #412]	; (80081d0 <HAL_DMA_Abort+0x454>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d036      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a65      	ldr	r2, [pc, #404]	; (80081d4 <HAL_DMA_Abort+0x458>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d031      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a64      	ldr	r2, [pc, #400]	; (80081d8 <HAL_DMA_Abort+0x45c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d02c      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a62      	ldr	r2, [pc, #392]	; (80081dc <HAL_DMA_Abort+0x460>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d027      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a61      	ldr	r2, [pc, #388]	; (80081e0 <HAL_DMA_Abort+0x464>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d022      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a5f      	ldr	r2, [pc, #380]	; (80081e4 <HAL_DMA_Abort+0x468>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d01d      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a5e      	ldr	r2, [pc, #376]	; (80081e8 <HAL_DMA_Abort+0x46c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d018      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a5c      	ldr	r2, [pc, #368]	; (80081ec <HAL_DMA_Abort+0x470>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d013      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a5b      	ldr	r2, [pc, #364]	; (80081f0 <HAL_DMA_Abort+0x474>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d00e      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a59      	ldr	r2, [pc, #356]	; (80081f4 <HAL_DMA_Abort+0x478>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d009      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a58      	ldr	r2, [pc, #352]	; (80081f8 <HAL_DMA_Abort+0x47c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d004      	beq.n	80080a6 <HAL_DMA_Abort+0x32a>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a56      	ldr	r2, [pc, #344]	; (80081fc <HAL_DMA_Abort+0x480>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d108      	bne.n	80080b8 <HAL_DMA_Abort+0x33c>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f022 0201 	bic.w	r2, r2, #1
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	e007      	b.n	80080c8 <HAL_DMA_Abort+0x34c>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f022 0201 	bic.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80080c8:	e013      	b.n	80080f2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80080ca:	f7fc ff7b 	bl	8004fc4 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	2b05      	cmp	r3, #5
 80080d6:	d90c      	bls.n	80080f2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2220      	movs	r2, #32
 80080dc:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2203      	movs	r2, #3
 80080e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80080ee:	2301      	movs	r3, #1
 80080f0:	e12d      	b.n	800834e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e5      	bne.n	80080ca <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a2f      	ldr	r2, [pc, #188]	; (80081c0 <HAL_DMA_Abort+0x444>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d04a      	beq.n	800819e <HAL_DMA_Abort+0x422>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a2d      	ldr	r2, [pc, #180]	; (80081c4 <HAL_DMA_Abort+0x448>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d045      	beq.n	800819e <HAL_DMA_Abort+0x422>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a2c      	ldr	r2, [pc, #176]	; (80081c8 <HAL_DMA_Abort+0x44c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d040      	beq.n	800819e <HAL_DMA_Abort+0x422>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a2a      	ldr	r2, [pc, #168]	; (80081cc <HAL_DMA_Abort+0x450>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d03b      	beq.n	800819e <HAL_DMA_Abort+0x422>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a29      	ldr	r2, [pc, #164]	; (80081d0 <HAL_DMA_Abort+0x454>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d036      	beq.n	800819e <HAL_DMA_Abort+0x422>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a27      	ldr	r2, [pc, #156]	; (80081d4 <HAL_DMA_Abort+0x458>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d031      	beq.n	800819e <HAL_DMA_Abort+0x422>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a26      	ldr	r2, [pc, #152]	; (80081d8 <HAL_DMA_Abort+0x45c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d02c      	beq.n	800819e <HAL_DMA_Abort+0x422>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a24      	ldr	r2, [pc, #144]	; (80081dc <HAL_DMA_Abort+0x460>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d027      	beq.n	800819e <HAL_DMA_Abort+0x422>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a23      	ldr	r2, [pc, #140]	; (80081e0 <HAL_DMA_Abort+0x464>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d022      	beq.n	800819e <HAL_DMA_Abort+0x422>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a21      	ldr	r2, [pc, #132]	; (80081e4 <HAL_DMA_Abort+0x468>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d01d      	beq.n	800819e <HAL_DMA_Abort+0x422>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a20      	ldr	r2, [pc, #128]	; (80081e8 <HAL_DMA_Abort+0x46c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d018      	beq.n	800819e <HAL_DMA_Abort+0x422>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a1e      	ldr	r2, [pc, #120]	; (80081ec <HAL_DMA_Abort+0x470>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d013      	beq.n	800819e <HAL_DMA_Abort+0x422>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a1d      	ldr	r2, [pc, #116]	; (80081f0 <HAL_DMA_Abort+0x474>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00e      	beq.n	800819e <HAL_DMA_Abort+0x422>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1b      	ldr	r2, [pc, #108]	; (80081f4 <HAL_DMA_Abort+0x478>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d009      	beq.n	800819e <HAL_DMA_Abort+0x422>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1a      	ldr	r2, [pc, #104]	; (80081f8 <HAL_DMA_Abort+0x47c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d004      	beq.n	800819e <HAL_DMA_Abort+0x422>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a18      	ldr	r2, [pc, #96]	; (80081fc <HAL_DMA_Abort+0x480>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d101      	bne.n	80081a2 <HAL_DMA_Abort+0x426>
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <HAL_DMA_Abort+0x428>
 80081a2:	2300      	movs	r3, #0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d02b      	beq.n	8008200 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ac:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b2:	f003 031f 	and.w	r3, r3, #31
 80081b6:	223f      	movs	r2, #63	; 0x3f
 80081b8:	409a      	lsls	r2, r3
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	609a      	str	r2, [r3, #8]
 80081be:	e02a      	b.n	8008216 <HAL_DMA_Abort+0x49a>
 80081c0:	40020010 	.word	0x40020010
 80081c4:	40020028 	.word	0x40020028
 80081c8:	40020040 	.word	0x40020040
 80081cc:	40020058 	.word	0x40020058
 80081d0:	40020070 	.word	0x40020070
 80081d4:	40020088 	.word	0x40020088
 80081d8:	400200a0 	.word	0x400200a0
 80081dc:	400200b8 	.word	0x400200b8
 80081e0:	40020410 	.word	0x40020410
 80081e4:	40020428 	.word	0x40020428
 80081e8:	40020440 	.word	0x40020440
 80081ec:	40020458 	.word	0x40020458
 80081f0:	40020470 	.word	0x40020470
 80081f4:	40020488 	.word	0x40020488
 80081f8:	400204a0 	.word	0x400204a0
 80081fc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008204:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800820a:	f003 031f 	and.w	r3, r3, #31
 800820e:	2201      	movs	r2, #1
 8008210:	409a      	lsls	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a4f      	ldr	r2, [pc, #316]	; (8008358 <HAL_DMA_Abort+0x5dc>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d072      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a4d      	ldr	r2, [pc, #308]	; (800835c <HAL_DMA_Abort+0x5e0>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d06d      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a4c      	ldr	r2, [pc, #304]	; (8008360 <HAL_DMA_Abort+0x5e4>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d068      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a4a      	ldr	r2, [pc, #296]	; (8008364 <HAL_DMA_Abort+0x5e8>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d063      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a49      	ldr	r2, [pc, #292]	; (8008368 <HAL_DMA_Abort+0x5ec>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d05e      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a47      	ldr	r2, [pc, #284]	; (800836c <HAL_DMA_Abort+0x5f0>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d059      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a46      	ldr	r2, [pc, #280]	; (8008370 <HAL_DMA_Abort+0x5f4>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d054      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a44      	ldr	r2, [pc, #272]	; (8008374 <HAL_DMA_Abort+0x5f8>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d04f      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a43      	ldr	r2, [pc, #268]	; (8008378 <HAL_DMA_Abort+0x5fc>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d04a      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a41      	ldr	r2, [pc, #260]	; (800837c <HAL_DMA_Abort+0x600>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d045      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a40      	ldr	r2, [pc, #256]	; (8008380 <HAL_DMA_Abort+0x604>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d040      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a3e      	ldr	r2, [pc, #248]	; (8008384 <HAL_DMA_Abort+0x608>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d03b      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a3d      	ldr	r2, [pc, #244]	; (8008388 <HAL_DMA_Abort+0x60c>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d036      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a3b      	ldr	r2, [pc, #236]	; (800838c <HAL_DMA_Abort+0x610>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d031      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a3a      	ldr	r2, [pc, #232]	; (8008390 <HAL_DMA_Abort+0x614>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d02c      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a38      	ldr	r2, [pc, #224]	; (8008394 <HAL_DMA_Abort+0x618>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d027      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a37      	ldr	r2, [pc, #220]	; (8008398 <HAL_DMA_Abort+0x61c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d022      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a35      	ldr	r2, [pc, #212]	; (800839c <HAL_DMA_Abort+0x620>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d01d      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a34      	ldr	r2, [pc, #208]	; (80083a0 <HAL_DMA_Abort+0x624>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d018      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a32      	ldr	r2, [pc, #200]	; (80083a4 <HAL_DMA_Abort+0x628>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d013      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a31      	ldr	r2, [pc, #196]	; (80083a8 <HAL_DMA_Abort+0x62c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00e      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a2f      	ldr	r2, [pc, #188]	; (80083ac <HAL_DMA_Abort+0x630>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d009      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a2e      	ldr	r2, [pc, #184]	; (80083b0 <HAL_DMA_Abort+0x634>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d004      	beq.n	8008306 <HAL_DMA_Abort+0x58a>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a2c      	ldr	r2, [pc, #176]	; (80083b4 <HAL_DMA_Abort+0x638>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d101      	bne.n	800830a <HAL_DMA_Abort+0x58e>
 8008306:	2301      	movs	r3, #1
 8008308:	e000      	b.n	800830c <HAL_DMA_Abort+0x590>
 800830a:	2300      	movs	r3, #0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d015      	beq.n	800833c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008318:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00c      	beq.n	800833c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800832c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008330:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800833a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2200      	movs	r2, #0
 8008348:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3718      	adds	r7, #24
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	40020010 	.word	0x40020010
 800835c:	40020028 	.word	0x40020028
 8008360:	40020040 	.word	0x40020040
 8008364:	40020058 	.word	0x40020058
 8008368:	40020070 	.word	0x40020070
 800836c:	40020088 	.word	0x40020088
 8008370:	400200a0 	.word	0x400200a0
 8008374:	400200b8 	.word	0x400200b8
 8008378:	40020410 	.word	0x40020410
 800837c:	40020428 	.word	0x40020428
 8008380:	40020440 	.word	0x40020440
 8008384:	40020458 	.word	0x40020458
 8008388:	40020470 	.word	0x40020470
 800838c:	40020488 	.word	0x40020488
 8008390:	400204a0 	.word	0x400204a0
 8008394:	400204b8 	.word	0x400204b8
 8008398:	58025408 	.word	0x58025408
 800839c:	5802541c 	.word	0x5802541c
 80083a0:	58025430 	.word	0x58025430
 80083a4:	58025444 	.word	0x58025444
 80083a8:	58025458 	.word	0x58025458
 80083ac:	5802546c 	.word	0x5802546c
 80083b0:	58025480 	.word	0x58025480
 80083b4:	58025494 	.word	0x58025494

080083b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e205      	b.n	80087d6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d004      	beq.n	80083e0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2280      	movs	r2, #128	; 0x80
 80083da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e1fa      	b.n	80087d6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a8c      	ldr	r2, [pc, #560]	; (8008618 <HAL_DMA_Abort_IT+0x260>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d04a      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a8b      	ldr	r2, [pc, #556]	; (800861c <HAL_DMA_Abort_IT+0x264>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d045      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a89      	ldr	r2, [pc, #548]	; (8008620 <HAL_DMA_Abort_IT+0x268>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d040      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a88      	ldr	r2, [pc, #544]	; (8008624 <HAL_DMA_Abort_IT+0x26c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d03b      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a86      	ldr	r2, [pc, #536]	; (8008628 <HAL_DMA_Abort_IT+0x270>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d036      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a85      	ldr	r2, [pc, #532]	; (800862c <HAL_DMA_Abort_IT+0x274>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d031      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a83      	ldr	r2, [pc, #524]	; (8008630 <HAL_DMA_Abort_IT+0x278>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d02c      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a82      	ldr	r2, [pc, #520]	; (8008634 <HAL_DMA_Abort_IT+0x27c>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d027      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a80      	ldr	r2, [pc, #512]	; (8008638 <HAL_DMA_Abort_IT+0x280>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d022      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a7f      	ldr	r2, [pc, #508]	; (800863c <HAL_DMA_Abort_IT+0x284>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d01d      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a7d      	ldr	r2, [pc, #500]	; (8008640 <HAL_DMA_Abort_IT+0x288>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d018      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a7c      	ldr	r2, [pc, #496]	; (8008644 <HAL_DMA_Abort_IT+0x28c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d013      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a7a      	ldr	r2, [pc, #488]	; (8008648 <HAL_DMA_Abort_IT+0x290>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d00e      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a79      	ldr	r2, [pc, #484]	; (800864c <HAL_DMA_Abort_IT+0x294>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d009      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a77      	ldr	r2, [pc, #476]	; (8008650 <HAL_DMA_Abort_IT+0x298>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d004      	beq.n	8008480 <HAL_DMA_Abort_IT+0xc8>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a76      	ldr	r2, [pc, #472]	; (8008654 <HAL_DMA_Abort_IT+0x29c>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d101      	bne.n	8008484 <HAL_DMA_Abort_IT+0xcc>
 8008480:	2301      	movs	r3, #1
 8008482:	e000      	b.n	8008486 <HAL_DMA_Abort_IT+0xce>
 8008484:	2300      	movs	r3, #0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d065      	beq.n	8008556 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2204      	movs	r2, #4
 800848e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a60      	ldr	r2, [pc, #384]	; (8008618 <HAL_DMA_Abort_IT+0x260>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d04a      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a5e      	ldr	r2, [pc, #376]	; (800861c <HAL_DMA_Abort_IT+0x264>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d045      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a5d      	ldr	r2, [pc, #372]	; (8008620 <HAL_DMA_Abort_IT+0x268>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d040      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a5b      	ldr	r2, [pc, #364]	; (8008624 <HAL_DMA_Abort_IT+0x26c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d03b      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a5a      	ldr	r2, [pc, #360]	; (8008628 <HAL_DMA_Abort_IT+0x270>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d036      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a58      	ldr	r2, [pc, #352]	; (800862c <HAL_DMA_Abort_IT+0x274>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d031      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a57      	ldr	r2, [pc, #348]	; (8008630 <HAL_DMA_Abort_IT+0x278>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d02c      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a55      	ldr	r2, [pc, #340]	; (8008634 <HAL_DMA_Abort_IT+0x27c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d027      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a54      	ldr	r2, [pc, #336]	; (8008638 <HAL_DMA_Abort_IT+0x280>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d022      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a52      	ldr	r2, [pc, #328]	; (800863c <HAL_DMA_Abort_IT+0x284>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d01d      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a51      	ldr	r2, [pc, #324]	; (8008640 <HAL_DMA_Abort_IT+0x288>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d018      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a4f      	ldr	r2, [pc, #316]	; (8008644 <HAL_DMA_Abort_IT+0x28c>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d013      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a4e      	ldr	r2, [pc, #312]	; (8008648 <HAL_DMA_Abort_IT+0x290>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d00e      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a4c      	ldr	r2, [pc, #304]	; (800864c <HAL_DMA_Abort_IT+0x294>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d009      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a4b      	ldr	r2, [pc, #300]	; (8008650 <HAL_DMA_Abort_IT+0x298>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d004      	beq.n	8008532 <HAL_DMA_Abort_IT+0x17a>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a49      	ldr	r2, [pc, #292]	; (8008654 <HAL_DMA_Abort_IT+0x29c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d108      	bne.n	8008544 <HAL_DMA_Abort_IT+0x18c>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 0201 	bic.w	r2, r2, #1
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	e147      	b.n	80087d4 <HAL_DMA_Abort_IT+0x41c>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 0201 	bic.w	r2, r2, #1
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	e13e      	b.n	80087d4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 020e 	bic.w	r2, r2, #14
 8008564:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a2b      	ldr	r2, [pc, #172]	; (8008618 <HAL_DMA_Abort_IT+0x260>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d04a      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a29      	ldr	r2, [pc, #164]	; (800861c <HAL_DMA_Abort_IT+0x264>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d045      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	4a28      	ldr	r2, [pc, #160]	; (8008620 <HAL_DMA_Abort_IT+0x268>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d040      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4a26      	ldr	r2, [pc, #152]	; (8008624 <HAL_DMA_Abort_IT+0x26c>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d03b      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a25      	ldr	r2, [pc, #148]	; (8008628 <HAL_DMA_Abort_IT+0x270>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d036      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a23      	ldr	r2, [pc, #140]	; (800862c <HAL_DMA_Abort_IT+0x274>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d031      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a22      	ldr	r2, [pc, #136]	; (8008630 <HAL_DMA_Abort_IT+0x278>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d02c      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a20      	ldr	r2, [pc, #128]	; (8008634 <HAL_DMA_Abort_IT+0x27c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d027      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a1f      	ldr	r2, [pc, #124]	; (8008638 <HAL_DMA_Abort_IT+0x280>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d022      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a1d      	ldr	r2, [pc, #116]	; (800863c <HAL_DMA_Abort_IT+0x284>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d01d      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a1c      	ldr	r2, [pc, #112]	; (8008640 <HAL_DMA_Abort_IT+0x288>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d018      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1a      	ldr	r2, [pc, #104]	; (8008644 <HAL_DMA_Abort_IT+0x28c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d013      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a19      	ldr	r2, [pc, #100]	; (8008648 <HAL_DMA_Abort_IT+0x290>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d00e      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a17      	ldr	r2, [pc, #92]	; (800864c <HAL_DMA_Abort_IT+0x294>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d009      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a16      	ldr	r2, [pc, #88]	; (8008650 <HAL_DMA_Abort_IT+0x298>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d004      	beq.n	8008606 <HAL_DMA_Abort_IT+0x24e>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a14      	ldr	r2, [pc, #80]	; (8008654 <HAL_DMA_Abort_IT+0x29c>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d128      	bne.n	8008658 <HAL_DMA_Abort_IT+0x2a0>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0201 	bic.w	r2, r2, #1
 8008614:	601a      	str	r2, [r3, #0]
 8008616:	e027      	b.n	8008668 <HAL_DMA_Abort_IT+0x2b0>
 8008618:	40020010 	.word	0x40020010
 800861c:	40020028 	.word	0x40020028
 8008620:	40020040 	.word	0x40020040
 8008624:	40020058 	.word	0x40020058
 8008628:	40020070 	.word	0x40020070
 800862c:	40020088 	.word	0x40020088
 8008630:	400200a0 	.word	0x400200a0
 8008634:	400200b8 	.word	0x400200b8
 8008638:	40020410 	.word	0x40020410
 800863c:	40020428 	.word	0x40020428
 8008640:	40020440 	.word	0x40020440
 8008644:	40020458 	.word	0x40020458
 8008648:	40020470 	.word	0x40020470
 800864c:	40020488 	.word	0x40020488
 8008650:	400204a0 	.word	0x400204a0
 8008654:	400204b8 	.word	0x400204b8
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f022 0201 	bic.w	r2, r2, #1
 8008666:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a5c      	ldr	r2, [pc, #368]	; (80087e0 <HAL_DMA_Abort_IT+0x428>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d072      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a5b      	ldr	r2, [pc, #364]	; (80087e4 <HAL_DMA_Abort_IT+0x42c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d06d      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a59      	ldr	r2, [pc, #356]	; (80087e8 <HAL_DMA_Abort_IT+0x430>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d068      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a58      	ldr	r2, [pc, #352]	; (80087ec <HAL_DMA_Abort_IT+0x434>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d063      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a56      	ldr	r2, [pc, #344]	; (80087f0 <HAL_DMA_Abort_IT+0x438>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d05e      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a55      	ldr	r2, [pc, #340]	; (80087f4 <HAL_DMA_Abort_IT+0x43c>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d059      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a53      	ldr	r2, [pc, #332]	; (80087f8 <HAL_DMA_Abort_IT+0x440>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d054      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a52      	ldr	r2, [pc, #328]	; (80087fc <HAL_DMA_Abort_IT+0x444>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d04f      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a50      	ldr	r2, [pc, #320]	; (8008800 <HAL_DMA_Abort_IT+0x448>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d04a      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a4f      	ldr	r2, [pc, #316]	; (8008804 <HAL_DMA_Abort_IT+0x44c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d045      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a4d      	ldr	r2, [pc, #308]	; (8008808 <HAL_DMA_Abort_IT+0x450>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d040      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a4c      	ldr	r2, [pc, #304]	; (800880c <HAL_DMA_Abort_IT+0x454>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d03b      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a4a      	ldr	r2, [pc, #296]	; (8008810 <HAL_DMA_Abort_IT+0x458>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d036      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a49      	ldr	r2, [pc, #292]	; (8008814 <HAL_DMA_Abort_IT+0x45c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d031      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a47      	ldr	r2, [pc, #284]	; (8008818 <HAL_DMA_Abort_IT+0x460>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d02c      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a46      	ldr	r2, [pc, #280]	; (800881c <HAL_DMA_Abort_IT+0x464>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d027      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a44      	ldr	r2, [pc, #272]	; (8008820 <HAL_DMA_Abort_IT+0x468>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d022      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a43      	ldr	r2, [pc, #268]	; (8008824 <HAL_DMA_Abort_IT+0x46c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d01d      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a41      	ldr	r2, [pc, #260]	; (8008828 <HAL_DMA_Abort_IT+0x470>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d018      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a40      	ldr	r2, [pc, #256]	; (800882c <HAL_DMA_Abort_IT+0x474>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d013      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a3e      	ldr	r2, [pc, #248]	; (8008830 <HAL_DMA_Abort_IT+0x478>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d00e      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a3d      	ldr	r2, [pc, #244]	; (8008834 <HAL_DMA_Abort_IT+0x47c>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d009      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a3b      	ldr	r2, [pc, #236]	; (8008838 <HAL_DMA_Abort_IT+0x480>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d004      	beq.n	8008758 <HAL_DMA_Abort_IT+0x3a0>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a3a      	ldr	r2, [pc, #232]	; (800883c <HAL_DMA_Abort_IT+0x484>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d101      	bne.n	800875c <HAL_DMA_Abort_IT+0x3a4>
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <HAL_DMA_Abort_IT+0x3a6>
 800875c:	2300      	movs	r3, #0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d028      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008770:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008776:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800877c:	f003 031f 	and.w	r3, r3, #31
 8008780:	2201      	movs	r2, #1
 8008782:	409a      	lsls	r2, r3
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008790:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00c      	beq.n	80087b4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80087b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	40020010 	.word	0x40020010
 80087e4:	40020028 	.word	0x40020028
 80087e8:	40020040 	.word	0x40020040
 80087ec:	40020058 	.word	0x40020058
 80087f0:	40020070 	.word	0x40020070
 80087f4:	40020088 	.word	0x40020088
 80087f8:	400200a0 	.word	0x400200a0
 80087fc:	400200b8 	.word	0x400200b8
 8008800:	40020410 	.word	0x40020410
 8008804:	40020428 	.word	0x40020428
 8008808:	40020440 	.word	0x40020440
 800880c:	40020458 	.word	0x40020458
 8008810:	40020470 	.word	0x40020470
 8008814:	40020488 	.word	0x40020488
 8008818:	400204a0 	.word	0x400204a0
 800881c:	400204b8 	.word	0x400204b8
 8008820:	58025408 	.word	0x58025408
 8008824:	5802541c 	.word	0x5802541c
 8008828:	58025430 	.word	0x58025430
 800882c:	58025444 	.word	0x58025444
 8008830:	58025458 	.word	0x58025458
 8008834:	5802546c 	.word	0x5802546c
 8008838:	58025480 	.word	0x58025480
 800883c:	58025494 	.word	0x58025494

08008840 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08a      	sub	sp, #40	; 0x28
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008848:	2300      	movs	r3, #0
 800884a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800884c:	4b67      	ldr	r3, [pc, #412]	; (80089ec <HAL_DMA_IRQHandler+0x1ac>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a67      	ldr	r2, [pc, #412]	; (80089f0 <HAL_DMA_IRQHandler+0x1b0>)
 8008852:	fba2 2303 	umull	r2, r3, r2, r3
 8008856:	0a9b      	lsrs	r3, r3, #10
 8008858:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008864:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008866:	6a3b      	ldr	r3, [r7, #32]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a5f      	ldr	r2, [pc, #380]	; (80089f4 <HAL_DMA_IRQHandler+0x1b4>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d04a      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a5d      	ldr	r2, [pc, #372]	; (80089f8 <HAL_DMA_IRQHandler+0x1b8>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d045      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a5c      	ldr	r2, [pc, #368]	; (80089fc <HAL_DMA_IRQHandler+0x1bc>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d040      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a5a      	ldr	r2, [pc, #360]	; (8008a00 <HAL_DMA_IRQHandler+0x1c0>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d03b      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a59      	ldr	r2, [pc, #356]	; (8008a04 <HAL_DMA_IRQHandler+0x1c4>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d036      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a57      	ldr	r2, [pc, #348]	; (8008a08 <HAL_DMA_IRQHandler+0x1c8>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d031      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a56      	ldr	r2, [pc, #344]	; (8008a0c <HAL_DMA_IRQHandler+0x1cc>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d02c      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a54      	ldr	r2, [pc, #336]	; (8008a10 <HAL_DMA_IRQHandler+0x1d0>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d027      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a53      	ldr	r2, [pc, #332]	; (8008a14 <HAL_DMA_IRQHandler+0x1d4>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d022      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a51      	ldr	r2, [pc, #324]	; (8008a18 <HAL_DMA_IRQHandler+0x1d8>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d01d      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a50      	ldr	r2, [pc, #320]	; (8008a1c <HAL_DMA_IRQHandler+0x1dc>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d018      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a4e      	ldr	r2, [pc, #312]	; (8008a20 <HAL_DMA_IRQHandler+0x1e0>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d013      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a4d      	ldr	r2, [pc, #308]	; (8008a24 <HAL_DMA_IRQHandler+0x1e4>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d00e      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a4b      	ldr	r2, [pc, #300]	; (8008a28 <HAL_DMA_IRQHandler+0x1e8>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d009      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a4a      	ldr	r2, [pc, #296]	; (8008a2c <HAL_DMA_IRQHandler+0x1ec>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d004      	beq.n	8008912 <HAL_DMA_IRQHandler+0xd2>
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a48      	ldr	r2, [pc, #288]	; (8008a30 <HAL_DMA_IRQHandler+0x1f0>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d101      	bne.n	8008916 <HAL_DMA_IRQHandler+0xd6>
 8008912:	2301      	movs	r3, #1
 8008914:	e000      	b.n	8008918 <HAL_DMA_IRQHandler+0xd8>
 8008916:	2300      	movs	r3, #0
 8008918:	2b00      	cmp	r3, #0
 800891a:	f000 842b 	beq.w	8009174 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008922:	f003 031f 	and.w	r3, r3, #31
 8008926:	2208      	movs	r2, #8
 8008928:	409a      	lsls	r2, r3
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	4013      	ands	r3, r2
 800892e:	2b00      	cmp	r3, #0
 8008930:	f000 80a2 	beq.w	8008a78 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a2e      	ldr	r2, [pc, #184]	; (80089f4 <HAL_DMA_IRQHandler+0x1b4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d04a      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a2d      	ldr	r2, [pc, #180]	; (80089f8 <HAL_DMA_IRQHandler+0x1b8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d045      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a2b      	ldr	r2, [pc, #172]	; (80089fc <HAL_DMA_IRQHandler+0x1bc>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d040      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a2a      	ldr	r2, [pc, #168]	; (8008a00 <HAL_DMA_IRQHandler+0x1c0>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d03b      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a28      	ldr	r2, [pc, #160]	; (8008a04 <HAL_DMA_IRQHandler+0x1c4>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d036      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a27      	ldr	r2, [pc, #156]	; (8008a08 <HAL_DMA_IRQHandler+0x1c8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d031      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a25      	ldr	r2, [pc, #148]	; (8008a0c <HAL_DMA_IRQHandler+0x1cc>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d02c      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a24      	ldr	r2, [pc, #144]	; (8008a10 <HAL_DMA_IRQHandler+0x1d0>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d027      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a22      	ldr	r2, [pc, #136]	; (8008a14 <HAL_DMA_IRQHandler+0x1d4>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d022      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a21      	ldr	r2, [pc, #132]	; (8008a18 <HAL_DMA_IRQHandler+0x1d8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d01d      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a1f      	ldr	r2, [pc, #124]	; (8008a1c <HAL_DMA_IRQHandler+0x1dc>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d018      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a1e      	ldr	r2, [pc, #120]	; (8008a20 <HAL_DMA_IRQHandler+0x1e0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d013      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a1c      	ldr	r2, [pc, #112]	; (8008a24 <HAL_DMA_IRQHandler+0x1e4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d00e      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a1b      	ldr	r2, [pc, #108]	; (8008a28 <HAL_DMA_IRQHandler+0x1e8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d009      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a19      	ldr	r2, [pc, #100]	; (8008a2c <HAL_DMA_IRQHandler+0x1ec>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d004      	beq.n	80089d4 <HAL_DMA_IRQHandler+0x194>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a18      	ldr	r2, [pc, #96]	; (8008a30 <HAL_DMA_IRQHandler+0x1f0>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d12f      	bne.n	8008a34 <HAL_DMA_IRQHandler+0x1f4>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 0304 	and.w	r3, r3, #4
 80089de:	2b00      	cmp	r3, #0
 80089e0:	bf14      	ite	ne
 80089e2:	2301      	movne	r3, #1
 80089e4:	2300      	moveq	r3, #0
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	e02e      	b.n	8008a48 <HAL_DMA_IRQHandler+0x208>
 80089ea:	bf00      	nop
 80089ec:	20000000 	.word	0x20000000
 80089f0:	1b4e81b5 	.word	0x1b4e81b5
 80089f4:	40020010 	.word	0x40020010
 80089f8:	40020028 	.word	0x40020028
 80089fc:	40020040 	.word	0x40020040
 8008a00:	40020058 	.word	0x40020058
 8008a04:	40020070 	.word	0x40020070
 8008a08:	40020088 	.word	0x40020088
 8008a0c:	400200a0 	.word	0x400200a0
 8008a10:	400200b8 	.word	0x400200b8
 8008a14:	40020410 	.word	0x40020410
 8008a18:	40020428 	.word	0x40020428
 8008a1c:	40020440 	.word	0x40020440
 8008a20:	40020458 	.word	0x40020458
 8008a24:	40020470 	.word	0x40020470
 8008a28:	40020488 	.word	0x40020488
 8008a2c:	400204a0 	.word	0x400204a0
 8008a30:	400204b8 	.word	0x400204b8
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0308 	and.w	r3, r3, #8
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	bf14      	ite	ne
 8008a42:	2301      	movne	r3, #1
 8008a44:	2300      	moveq	r3, #0
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d015      	beq.n	8008a78 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f022 0204 	bic.w	r2, r2, #4
 8008a5a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a60:	f003 031f 	and.w	r3, r3, #31
 8008a64:	2208      	movs	r2, #8
 8008a66:	409a      	lsls	r2, r3
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a70:	f043 0201 	orr.w	r2, r3, #1
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7c:	f003 031f 	and.w	r3, r3, #31
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	fa22 f303 	lsr.w	r3, r2, r3
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d06e      	beq.n	8008b6c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a69      	ldr	r2, [pc, #420]	; (8008c38 <HAL_DMA_IRQHandler+0x3f8>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d04a      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a67      	ldr	r2, [pc, #412]	; (8008c3c <HAL_DMA_IRQHandler+0x3fc>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d045      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a66      	ldr	r2, [pc, #408]	; (8008c40 <HAL_DMA_IRQHandler+0x400>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d040      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a64      	ldr	r2, [pc, #400]	; (8008c44 <HAL_DMA_IRQHandler+0x404>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d03b      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a63      	ldr	r2, [pc, #396]	; (8008c48 <HAL_DMA_IRQHandler+0x408>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d036      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a61      	ldr	r2, [pc, #388]	; (8008c4c <HAL_DMA_IRQHandler+0x40c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d031      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a60      	ldr	r2, [pc, #384]	; (8008c50 <HAL_DMA_IRQHandler+0x410>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d02c      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a5e      	ldr	r2, [pc, #376]	; (8008c54 <HAL_DMA_IRQHandler+0x414>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d027      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a5d      	ldr	r2, [pc, #372]	; (8008c58 <HAL_DMA_IRQHandler+0x418>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d022      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a5b      	ldr	r2, [pc, #364]	; (8008c5c <HAL_DMA_IRQHandler+0x41c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d01d      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a5a      	ldr	r2, [pc, #360]	; (8008c60 <HAL_DMA_IRQHandler+0x420>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d018      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a58      	ldr	r2, [pc, #352]	; (8008c64 <HAL_DMA_IRQHandler+0x424>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d013      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a57      	ldr	r2, [pc, #348]	; (8008c68 <HAL_DMA_IRQHandler+0x428>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00e      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a55      	ldr	r2, [pc, #340]	; (8008c6c <HAL_DMA_IRQHandler+0x42c>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d009      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a54      	ldr	r2, [pc, #336]	; (8008c70 <HAL_DMA_IRQHandler+0x430>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d004      	beq.n	8008b2e <HAL_DMA_IRQHandler+0x2ee>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a52      	ldr	r2, [pc, #328]	; (8008c74 <HAL_DMA_IRQHandler+0x434>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d10a      	bne.n	8008b44 <HAL_DMA_IRQHandler+0x304>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	695b      	ldr	r3, [r3, #20]
 8008b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bf14      	ite	ne
 8008b3c:	2301      	movne	r3, #1
 8008b3e:	2300      	moveq	r3, #0
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	e003      	b.n	8008b4c <HAL_DMA_IRQHandler+0x30c>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00d      	beq.n	8008b6c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b54:	f003 031f 	and.w	r3, r3, #31
 8008b58:	2201      	movs	r2, #1
 8008b5a:	409a      	lsls	r2, r3
 8008b5c:	6a3b      	ldr	r3, [r7, #32]
 8008b5e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b64:	f043 0202 	orr.w	r2, r3, #2
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b70:	f003 031f 	and.w	r3, r3, #31
 8008b74:	2204      	movs	r2, #4
 8008b76:	409a      	lsls	r2, r3
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 808f 	beq.w	8008ca0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a2c      	ldr	r2, [pc, #176]	; (8008c38 <HAL_DMA_IRQHandler+0x3f8>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d04a      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a2a      	ldr	r2, [pc, #168]	; (8008c3c <HAL_DMA_IRQHandler+0x3fc>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d045      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a29      	ldr	r2, [pc, #164]	; (8008c40 <HAL_DMA_IRQHandler+0x400>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d040      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a27      	ldr	r2, [pc, #156]	; (8008c44 <HAL_DMA_IRQHandler+0x404>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d03b      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a26      	ldr	r2, [pc, #152]	; (8008c48 <HAL_DMA_IRQHandler+0x408>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d036      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a24      	ldr	r2, [pc, #144]	; (8008c4c <HAL_DMA_IRQHandler+0x40c>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d031      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a23      	ldr	r2, [pc, #140]	; (8008c50 <HAL_DMA_IRQHandler+0x410>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d02c      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a21      	ldr	r2, [pc, #132]	; (8008c54 <HAL_DMA_IRQHandler+0x414>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d027      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a20      	ldr	r2, [pc, #128]	; (8008c58 <HAL_DMA_IRQHandler+0x418>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d022      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a1e      	ldr	r2, [pc, #120]	; (8008c5c <HAL_DMA_IRQHandler+0x41c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d01d      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a1d      	ldr	r2, [pc, #116]	; (8008c60 <HAL_DMA_IRQHandler+0x420>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d018      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a1b      	ldr	r2, [pc, #108]	; (8008c64 <HAL_DMA_IRQHandler+0x424>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d013      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a1a      	ldr	r2, [pc, #104]	; (8008c68 <HAL_DMA_IRQHandler+0x428>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00e      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a18      	ldr	r2, [pc, #96]	; (8008c6c <HAL_DMA_IRQHandler+0x42c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d009      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4a17      	ldr	r2, [pc, #92]	; (8008c70 <HAL_DMA_IRQHandler+0x430>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d004      	beq.n	8008c22 <HAL_DMA_IRQHandler+0x3e2>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a15      	ldr	r2, [pc, #84]	; (8008c74 <HAL_DMA_IRQHandler+0x434>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d12a      	bne.n	8008c78 <HAL_DMA_IRQHandler+0x438>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0302 	and.w	r3, r3, #2
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bf14      	ite	ne
 8008c30:	2301      	movne	r3, #1
 8008c32:	2300      	moveq	r3, #0
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	e023      	b.n	8008c80 <HAL_DMA_IRQHandler+0x440>
 8008c38:	40020010 	.word	0x40020010
 8008c3c:	40020028 	.word	0x40020028
 8008c40:	40020040 	.word	0x40020040
 8008c44:	40020058 	.word	0x40020058
 8008c48:	40020070 	.word	0x40020070
 8008c4c:	40020088 	.word	0x40020088
 8008c50:	400200a0 	.word	0x400200a0
 8008c54:	400200b8 	.word	0x400200b8
 8008c58:	40020410 	.word	0x40020410
 8008c5c:	40020428 	.word	0x40020428
 8008c60:	40020440 	.word	0x40020440
 8008c64:	40020458 	.word	0x40020458
 8008c68:	40020470 	.word	0x40020470
 8008c6c:	40020488 	.word	0x40020488
 8008c70:	400204a0 	.word	0x400204a0
 8008c74:	400204b8 	.word	0x400204b8
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2300      	movs	r3, #0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00d      	beq.n	8008ca0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c88:	f003 031f 	and.w	r3, r3, #31
 8008c8c:	2204      	movs	r2, #4
 8008c8e:	409a      	lsls	r2, r3
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c98:	f043 0204 	orr.w	r2, r3, #4
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ca4:	f003 031f 	and.w	r3, r3, #31
 8008ca8:	2210      	movs	r2, #16
 8008caa:	409a      	lsls	r2, r3
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 80a6 	beq.w	8008e02 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a85      	ldr	r2, [pc, #532]	; (8008ed0 <HAL_DMA_IRQHandler+0x690>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d04a      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a83      	ldr	r2, [pc, #524]	; (8008ed4 <HAL_DMA_IRQHandler+0x694>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d045      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a82      	ldr	r2, [pc, #520]	; (8008ed8 <HAL_DMA_IRQHandler+0x698>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d040      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a80      	ldr	r2, [pc, #512]	; (8008edc <HAL_DMA_IRQHandler+0x69c>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d03b      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a7f      	ldr	r2, [pc, #508]	; (8008ee0 <HAL_DMA_IRQHandler+0x6a0>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d036      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a7d      	ldr	r2, [pc, #500]	; (8008ee4 <HAL_DMA_IRQHandler+0x6a4>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d031      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a7c      	ldr	r2, [pc, #496]	; (8008ee8 <HAL_DMA_IRQHandler+0x6a8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d02c      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a7a      	ldr	r2, [pc, #488]	; (8008eec <HAL_DMA_IRQHandler+0x6ac>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d027      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a79      	ldr	r2, [pc, #484]	; (8008ef0 <HAL_DMA_IRQHandler+0x6b0>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d022      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a77      	ldr	r2, [pc, #476]	; (8008ef4 <HAL_DMA_IRQHandler+0x6b4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d01d      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a76      	ldr	r2, [pc, #472]	; (8008ef8 <HAL_DMA_IRQHandler+0x6b8>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d018      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a74      	ldr	r2, [pc, #464]	; (8008efc <HAL_DMA_IRQHandler+0x6bc>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d013      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a73      	ldr	r2, [pc, #460]	; (8008f00 <HAL_DMA_IRQHandler+0x6c0>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d00e      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a71      	ldr	r2, [pc, #452]	; (8008f04 <HAL_DMA_IRQHandler+0x6c4>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d009      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a70      	ldr	r2, [pc, #448]	; (8008f08 <HAL_DMA_IRQHandler+0x6c8>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d004      	beq.n	8008d56 <HAL_DMA_IRQHandler+0x516>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a6e      	ldr	r2, [pc, #440]	; (8008f0c <HAL_DMA_IRQHandler+0x6cc>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d10a      	bne.n	8008d6c <HAL_DMA_IRQHandler+0x52c>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0308 	and.w	r3, r3, #8
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	bf14      	ite	ne
 8008d64:	2301      	movne	r3, #1
 8008d66:	2300      	moveq	r3, #0
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	e009      	b.n	8008d80 <HAL_DMA_IRQHandler+0x540>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0304 	and.w	r3, r3, #4
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	bf14      	ite	ne
 8008d7a:	2301      	movne	r3, #1
 8008d7c:	2300      	moveq	r3, #0
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d03e      	beq.n	8008e02 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d88:	f003 031f 	and.w	r3, r3, #31
 8008d8c:	2210      	movs	r2, #16
 8008d8e:	409a      	lsls	r2, r3
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d018      	beq.n	8008dd4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d108      	bne.n	8008dc2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d024      	beq.n	8008e02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	4798      	blx	r3
 8008dc0:	e01f      	b.n	8008e02 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d01b      	beq.n	8008e02 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	4798      	blx	r3
 8008dd2:	e016      	b.n	8008e02 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d107      	bne.n	8008df2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0208 	bic.w	r2, r2, #8
 8008df0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e06:	f003 031f 	and.w	r3, r3, #31
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	409a      	lsls	r2, r3
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	4013      	ands	r3, r2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 8110 	beq.w	8009038 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a2c      	ldr	r2, [pc, #176]	; (8008ed0 <HAL_DMA_IRQHandler+0x690>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d04a      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a2b      	ldr	r2, [pc, #172]	; (8008ed4 <HAL_DMA_IRQHandler+0x694>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d045      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a29      	ldr	r2, [pc, #164]	; (8008ed8 <HAL_DMA_IRQHandler+0x698>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d040      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a28      	ldr	r2, [pc, #160]	; (8008edc <HAL_DMA_IRQHandler+0x69c>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d03b      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a26      	ldr	r2, [pc, #152]	; (8008ee0 <HAL_DMA_IRQHandler+0x6a0>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d036      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a25      	ldr	r2, [pc, #148]	; (8008ee4 <HAL_DMA_IRQHandler+0x6a4>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d031      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a23      	ldr	r2, [pc, #140]	; (8008ee8 <HAL_DMA_IRQHandler+0x6a8>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d02c      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a22      	ldr	r2, [pc, #136]	; (8008eec <HAL_DMA_IRQHandler+0x6ac>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d027      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a20      	ldr	r2, [pc, #128]	; (8008ef0 <HAL_DMA_IRQHandler+0x6b0>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d022      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a1f      	ldr	r2, [pc, #124]	; (8008ef4 <HAL_DMA_IRQHandler+0x6b4>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d01d      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1d      	ldr	r2, [pc, #116]	; (8008ef8 <HAL_DMA_IRQHandler+0x6b8>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d018      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a1c      	ldr	r2, [pc, #112]	; (8008efc <HAL_DMA_IRQHandler+0x6bc>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d013      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a1a      	ldr	r2, [pc, #104]	; (8008f00 <HAL_DMA_IRQHandler+0x6c0>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00e      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a19      	ldr	r2, [pc, #100]	; (8008f04 <HAL_DMA_IRQHandler+0x6c4>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d009      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a17      	ldr	r2, [pc, #92]	; (8008f08 <HAL_DMA_IRQHandler+0x6c8>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d004      	beq.n	8008eb8 <HAL_DMA_IRQHandler+0x678>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a16      	ldr	r2, [pc, #88]	; (8008f0c <HAL_DMA_IRQHandler+0x6cc>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d12b      	bne.n	8008f10 <HAL_DMA_IRQHandler+0x6d0>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 0310 	and.w	r3, r3, #16
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bf14      	ite	ne
 8008ec6:	2301      	movne	r3, #1
 8008ec8:	2300      	moveq	r3, #0
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	e02a      	b.n	8008f24 <HAL_DMA_IRQHandler+0x6e4>
 8008ece:	bf00      	nop
 8008ed0:	40020010 	.word	0x40020010
 8008ed4:	40020028 	.word	0x40020028
 8008ed8:	40020040 	.word	0x40020040
 8008edc:	40020058 	.word	0x40020058
 8008ee0:	40020070 	.word	0x40020070
 8008ee4:	40020088 	.word	0x40020088
 8008ee8:	400200a0 	.word	0x400200a0
 8008eec:	400200b8 	.word	0x400200b8
 8008ef0:	40020410 	.word	0x40020410
 8008ef4:	40020428 	.word	0x40020428
 8008ef8:	40020440 	.word	0x40020440
 8008efc:	40020458 	.word	0x40020458
 8008f00:	40020470 	.word	0x40020470
 8008f04:	40020488 	.word	0x40020488
 8008f08:	400204a0 	.word	0x400204a0
 8008f0c:	400204b8 	.word	0x400204b8
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0302 	and.w	r3, r3, #2
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	bf14      	ite	ne
 8008f1e:	2301      	movne	r3, #1
 8008f20:	2300      	moveq	r3, #0
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	f000 8087 	beq.w	8009038 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f2e:	f003 031f 	and.w	r3, r3, #31
 8008f32:	2220      	movs	r2, #32
 8008f34:	409a      	lsls	r2, r3
 8008f36:	6a3b      	ldr	r3, [r7, #32]
 8008f38:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b04      	cmp	r3, #4
 8008f44:	d139      	bne.n	8008fba <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f022 0216 	bic.w	r2, r2, #22
 8008f54:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	695a      	ldr	r2, [r3, #20]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f64:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d103      	bne.n	8008f76 <HAL_DMA_IRQHandler+0x736>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d007      	beq.n	8008f86 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 0208 	bic.w	r2, r2, #8
 8008f84:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f8a:	f003 031f 	and.w	r3, r3, #31
 8008f8e:	223f      	movs	r2, #63	; 0x3f
 8008f90:	409a      	lsls	r2, r3
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f000 834a 	beq.w	8009644 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	4798      	blx	r3
          }
          return;
 8008fb8:	e344      	b.n	8009644 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d018      	beq.n	8008ffa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d108      	bne.n	8008fe8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d02c      	beq.n	8009038 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
 8008fe6:	e027      	b.n	8009038 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d023      	beq.n	8009038 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	4798      	blx	r3
 8008ff8:	e01e      	b.n	8009038 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10f      	bne.n	8009028 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	681a      	ldr	r2, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f022 0210 	bic.w	r2, r2, #16
 8009016:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2200      	movs	r2, #0
 8009024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902c:	2b00      	cmp	r3, #0
 800902e:	d003      	beq.n	8009038 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 8306 	beq.w	800964e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 8088 	beq.w	8009160 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2204      	movs	r2, #4
 8009054:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a7a      	ldr	r2, [pc, #488]	; (8009248 <HAL_DMA_IRQHandler+0xa08>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d04a      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a79      	ldr	r2, [pc, #484]	; (800924c <HAL_DMA_IRQHandler+0xa0c>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d045      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a77      	ldr	r2, [pc, #476]	; (8009250 <HAL_DMA_IRQHandler+0xa10>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d040      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a76      	ldr	r2, [pc, #472]	; (8009254 <HAL_DMA_IRQHandler+0xa14>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d03b      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a74      	ldr	r2, [pc, #464]	; (8009258 <HAL_DMA_IRQHandler+0xa18>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d036      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a73      	ldr	r2, [pc, #460]	; (800925c <HAL_DMA_IRQHandler+0xa1c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d031      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4a71      	ldr	r2, [pc, #452]	; (8009260 <HAL_DMA_IRQHandler+0xa20>)
 800909a:	4293      	cmp	r3, r2
 800909c:	d02c      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a70      	ldr	r2, [pc, #448]	; (8009264 <HAL_DMA_IRQHandler+0xa24>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d027      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4a6e      	ldr	r2, [pc, #440]	; (8009268 <HAL_DMA_IRQHandler+0xa28>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d022      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4a6d      	ldr	r2, [pc, #436]	; (800926c <HAL_DMA_IRQHandler+0xa2c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d01d      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a6b      	ldr	r2, [pc, #428]	; (8009270 <HAL_DMA_IRQHandler+0xa30>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d018      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a6a      	ldr	r2, [pc, #424]	; (8009274 <HAL_DMA_IRQHandler+0xa34>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d013      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a68      	ldr	r2, [pc, #416]	; (8009278 <HAL_DMA_IRQHandler+0xa38>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d00e      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a67      	ldr	r2, [pc, #412]	; (800927c <HAL_DMA_IRQHandler+0xa3c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d009      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a65      	ldr	r2, [pc, #404]	; (8009280 <HAL_DMA_IRQHandler+0xa40>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d004      	beq.n	80090f8 <HAL_DMA_IRQHandler+0x8b8>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a64      	ldr	r2, [pc, #400]	; (8009284 <HAL_DMA_IRQHandler+0xa44>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d108      	bne.n	800910a <HAL_DMA_IRQHandler+0x8ca>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0201 	bic.w	r2, r2, #1
 8009106:	601a      	str	r2, [r3, #0]
 8009108:	e007      	b.n	800911a <HAL_DMA_IRQHandler+0x8da>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f022 0201 	bic.w	r2, r2, #1
 8009118:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3301      	adds	r3, #1
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009122:	429a      	cmp	r2, r3
 8009124:	d307      	bcc.n	8009136 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f003 0301 	and.w	r3, r3, #1
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1f2      	bne.n	800911a <HAL_DMA_IRQHandler+0x8da>
 8009134:	e000      	b.n	8009138 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009136:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b00      	cmp	r3, #0
 8009144:	d004      	beq.n	8009150 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2203      	movs	r2, #3
 800914a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800914e:	e003      	b.n	8009158 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009164:	2b00      	cmp	r3, #0
 8009166:	f000 8272 	beq.w	800964e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	4798      	blx	r3
 8009172:	e26c      	b.n	800964e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a43      	ldr	r2, [pc, #268]	; (8009288 <HAL_DMA_IRQHandler+0xa48>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d022      	beq.n	80091c4 <HAL_DMA_IRQHandler+0x984>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a42      	ldr	r2, [pc, #264]	; (800928c <HAL_DMA_IRQHandler+0xa4c>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d01d      	beq.n	80091c4 <HAL_DMA_IRQHandler+0x984>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a40      	ldr	r2, [pc, #256]	; (8009290 <HAL_DMA_IRQHandler+0xa50>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d018      	beq.n	80091c4 <HAL_DMA_IRQHandler+0x984>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a3f      	ldr	r2, [pc, #252]	; (8009294 <HAL_DMA_IRQHandler+0xa54>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d013      	beq.n	80091c4 <HAL_DMA_IRQHandler+0x984>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a3d      	ldr	r2, [pc, #244]	; (8009298 <HAL_DMA_IRQHandler+0xa58>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d00e      	beq.n	80091c4 <HAL_DMA_IRQHandler+0x984>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a3c      	ldr	r2, [pc, #240]	; (800929c <HAL_DMA_IRQHandler+0xa5c>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d009      	beq.n	80091c4 <HAL_DMA_IRQHandler+0x984>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a3a      	ldr	r2, [pc, #232]	; (80092a0 <HAL_DMA_IRQHandler+0xa60>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d004      	beq.n	80091c4 <HAL_DMA_IRQHandler+0x984>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a39      	ldr	r2, [pc, #228]	; (80092a4 <HAL_DMA_IRQHandler+0xa64>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d101      	bne.n	80091c8 <HAL_DMA_IRQHandler+0x988>
 80091c4:	2301      	movs	r3, #1
 80091c6:	e000      	b.n	80091ca <HAL_DMA_IRQHandler+0x98a>
 80091c8:	2300      	movs	r3, #0
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f000 823f 	beq.w	800964e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091dc:	f003 031f 	and.w	r3, r3, #31
 80091e0:	2204      	movs	r2, #4
 80091e2:	409a      	lsls	r2, r3
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	4013      	ands	r3, r2
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f000 80cd 	beq.w	8009388 <HAL_DMA_IRQHandler+0xb48>
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f000 80c7 	beq.w	8009388 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091fe:	f003 031f 	and.w	r3, r3, #31
 8009202:	2204      	movs	r2, #4
 8009204:	409a      	lsls	r2, r3
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d049      	beq.n	80092a8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d109      	bne.n	8009232 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 8210 	beq.w	8009648 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009230:	e20a      	b.n	8009648 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009236:	2b00      	cmp	r3, #0
 8009238:	f000 8206 	beq.w	8009648 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009244:	e200      	b.n	8009648 <HAL_DMA_IRQHandler+0xe08>
 8009246:	bf00      	nop
 8009248:	40020010 	.word	0x40020010
 800924c:	40020028 	.word	0x40020028
 8009250:	40020040 	.word	0x40020040
 8009254:	40020058 	.word	0x40020058
 8009258:	40020070 	.word	0x40020070
 800925c:	40020088 	.word	0x40020088
 8009260:	400200a0 	.word	0x400200a0
 8009264:	400200b8 	.word	0x400200b8
 8009268:	40020410 	.word	0x40020410
 800926c:	40020428 	.word	0x40020428
 8009270:	40020440 	.word	0x40020440
 8009274:	40020458 	.word	0x40020458
 8009278:	40020470 	.word	0x40020470
 800927c:	40020488 	.word	0x40020488
 8009280:	400204a0 	.word	0x400204a0
 8009284:	400204b8 	.word	0x400204b8
 8009288:	58025408 	.word	0x58025408
 800928c:	5802541c 	.word	0x5802541c
 8009290:	58025430 	.word	0x58025430
 8009294:	58025444 	.word	0x58025444
 8009298:	58025458 	.word	0x58025458
 800929c:	5802546c 	.word	0x5802546c
 80092a0:	58025480 	.word	0x58025480
 80092a4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d160      	bne.n	8009374 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a8c      	ldr	r2, [pc, #560]	; (80094e8 <HAL_DMA_IRQHandler+0xca8>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d04a      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a8a      	ldr	r2, [pc, #552]	; (80094ec <HAL_DMA_IRQHandler+0xcac>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d045      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a89      	ldr	r2, [pc, #548]	; (80094f0 <HAL_DMA_IRQHandler+0xcb0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d040      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a87      	ldr	r2, [pc, #540]	; (80094f4 <HAL_DMA_IRQHandler+0xcb4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d03b      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a86      	ldr	r2, [pc, #536]	; (80094f8 <HAL_DMA_IRQHandler+0xcb8>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d036      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a84      	ldr	r2, [pc, #528]	; (80094fc <HAL_DMA_IRQHandler+0xcbc>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d031      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a83      	ldr	r2, [pc, #524]	; (8009500 <HAL_DMA_IRQHandler+0xcc0>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d02c      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a81      	ldr	r2, [pc, #516]	; (8009504 <HAL_DMA_IRQHandler+0xcc4>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d027      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a80      	ldr	r2, [pc, #512]	; (8009508 <HAL_DMA_IRQHandler+0xcc8>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d022      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a7e      	ldr	r2, [pc, #504]	; (800950c <HAL_DMA_IRQHandler+0xccc>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d01d      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a7d      	ldr	r2, [pc, #500]	; (8009510 <HAL_DMA_IRQHandler+0xcd0>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d018      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a7b      	ldr	r2, [pc, #492]	; (8009514 <HAL_DMA_IRQHandler+0xcd4>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d013      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4a7a      	ldr	r2, [pc, #488]	; (8009518 <HAL_DMA_IRQHandler+0xcd8>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00e      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	4a78      	ldr	r2, [pc, #480]	; (800951c <HAL_DMA_IRQHandler+0xcdc>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d009      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4a77      	ldr	r2, [pc, #476]	; (8009520 <HAL_DMA_IRQHandler+0xce0>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d004      	beq.n	8009352 <HAL_DMA_IRQHandler+0xb12>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4a75      	ldr	r2, [pc, #468]	; (8009524 <HAL_DMA_IRQHandler+0xce4>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d108      	bne.n	8009364 <HAL_DMA_IRQHandler+0xb24>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f022 0208 	bic.w	r2, r2, #8
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	e007      	b.n	8009374 <HAL_DMA_IRQHandler+0xb34>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0204 	bic.w	r2, r2, #4
 8009372:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 8165 	beq.w	8009648 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009386:	e15f      	b.n	8009648 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800938c:	f003 031f 	and.w	r3, r3, #31
 8009390:	2202      	movs	r2, #2
 8009392:	409a      	lsls	r2, r3
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	4013      	ands	r3, r2
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 80c5 	beq.w	8009528 <HAL_DMA_IRQHandler+0xce8>
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 80bf 	beq.w	8009528 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ae:	f003 031f 	and.w	r3, r3, #31
 80093b2:	2202      	movs	r2, #2
 80093b4:	409a      	lsls	r2, r3
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d018      	beq.n	80093f6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d109      	bne.n	80093e2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 813a 	beq.w	800964c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093e0:	e134      	b.n	800964c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f000 8130 	beq.w	800964c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093f4:	e12a      	b.n	800964c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	f003 0320 	and.w	r3, r3, #32
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d168      	bne.n	80094d2 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a38      	ldr	r2, [pc, #224]	; (80094e8 <HAL_DMA_IRQHandler+0xca8>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d04a      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a37      	ldr	r2, [pc, #220]	; (80094ec <HAL_DMA_IRQHandler+0xcac>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d045      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a35      	ldr	r2, [pc, #212]	; (80094f0 <HAL_DMA_IRQHandler+0xcb0>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d040      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a34      	ldr	r2, [pc, #208]	; (80094f4 <HAL_DMA_IRQHandler+0xcb4>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d03b      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a32      	ldr	r2, [pc, #200]	; (80094f8 <HAL_DMA_IRQHandler+0xcb8>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d036      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a31      	ldr	r2, [pc, #196]	; (80094fc <HAL_DMA_IRQHandler+0xcbc>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d031      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a2f      	ldr	r2, [pc, #188]	; (8009500 <HAL_DMA_IRQHandler+0xcc0>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d02c      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a2e      	ldr	r2, [pc, #184]	; (8009504 <HAL_DMA_IRQHandler+0xcc4>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d027      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a2c      	ldr	r2, [pc, #176]	; (8009508 <HAL_DMA_IRQHandler+0xcc8>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d022      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a2b      	ldr	r2, [pc, #172]	; (800950c <HAL_DMA_IRQHandler+0xccc>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d01d      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a29      	ldr	r2, [pc, #164]	; (8009510 <HAL_DMA_IRQHandler+0xcd0>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d018      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a28      	ldr	r2, [pc, #160]	; (8009514 <HAL_DMA_IRQHandler+0xcd4>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d013      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a26      	ldr	r2, [pc, #152]	; (8009518 <HAL_DMA_IRQHandler+0xcd8>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00e      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a25      	ldr	r2, [pc, #148]	; (800951c <HAL_DMA_IRQHandler+0xcdc>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d009      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a23      	ldr	r2, [pc, #140]	; (8009520 <HAL_DMA_IRQHandler+0xce0>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d004      	beq.n	80094a0 <HAL_DMA_IRQHandler+0xc60>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a22      	ldr	r2, [pc, #136]	; (8009524 <HAL_DMA_IRQHandler+0xce4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d108      	bne.n	80094b2 <HAL_DMA_IRQHandler+0xc72>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f022 0214 	bic.w	r2, r2, #20
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	e007      	b.n	80094c2 <HAL_DMA_IRQHandler+0xc82>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 020a 	bic.w	r2, r2, #10
 80094c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2201      	movs	r2, #1
 80094c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f000 80b8 	beq.w	800964c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094e4:	e0b2      	b.n	800964c <HAL_DMA_IRQHandler+0xe0c>
 80094e6:	bf00      	nop
 80094e8:	40020010 	.word	0x40020010
 80094ec:	40020028 	.word	0x40020028
 80094f0:	40020040 	.word	0x40020040
 80094f4:	40020058 	.word	0x40020058
 80094f8:	40020070 	.word	0x40020070
 80094fc:	40020088 	.word	0x40020088
 8009500:	400200a0 	.word	0x400200a0
 8009504:	400200b8 	.word	0x400200b8
 8009508:	40020410 	.word	0x40020410
 800950c:	40020428 	.word	0x40020428
 8009510:	40020440 	.word	0x40020440
 8009514:	40020458 	.word	0x40020458
 8009518:	40020470 	.word	0x40020470
 800951c:	40020488 	.word	0x40020488
 8009520:	400204a0 	.word	0x400204a0
 8009524:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800952c:	f003 031f 	and.w	r3, r3, #31
 8009530:	2208      	movs	r2, #8
 8009532:	409a      	lsls	r2, r3
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	4013      	ands	r3, r2
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 8088 	beq.w	800964e <HAL_DMA_IRQHandler+0xe0e>
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	f003 0308 	and.w	r3, r3, #8
 8009544:	2b00      	cmp	r3, #0
 8009546:	f000 8082 	beq.w	800964e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a41      	ldr	r2, [pc, #260]	; (8009654 <HAL_DMA_IRQHandler+0xe14>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d04a      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a3f      	ldr	r2, [pc, #252]	; (8009658 <HAL_DMA_IRQHandler+0xe18>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d045      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a3e      	ldr	r2, [pc, #248]	; (800965c <HAL_DMA_IRQHandler+0xe1c>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d040      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a3c      	ldr	r2, [pc, #240]	; (8009660 <HAL_DMA_IRQHandler+0xe20>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d03b      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a3b      	ldr	r2, [pc, #236]	; (8009664 <HAL_DMA_IRQHandler+0xe24>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d036      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a39      	ldr	r2, [pc, #228]	; (8009668 <HAL_DMA_IRQHandler+0xe28>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d031      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a38      	ldr	r2, [pc, #224]	; (800966c <HAL_DMA_IRQHandler+0xe2c>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d02c      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a36      	ldr	r2, [pc, #216]	; (8009670 <HAL_DMA_IRQHandler+0xe30>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d027      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a35      	ldr	r2, [pc, #212]	; (8009674 <HAL_DMA_IRQHandler+0xe34>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d022      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a33      	ldr	r2, [pc, #204]	; (8009678 <HAL_DMA_IRQHandler+0xe38>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d01d      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a32      	ldr	r2, [pc, #200]	; (800967c <HAL_DMA_IRQHandler+0xe3c>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d018      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a30      	ldr	r2, [pc, #192]	; (8009680 <HAL_DMA_IRQHandler+0xe40>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d013      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a2f      	ldr	r2, [pc, #188]	; (8009684 <HAL_DMA_IRQHandler+0xe44>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d00e      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a2d      	ldr	r2, [pc, #180]	; (8009688 <HAL_DMA_IRQHandler+0xe48>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d009      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a2c      	ldr	r2, [pc, #176]	; (800968c <HAL_DMA_IRQHandler+0xe4c>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d004      	beq.n	80095ea <HAL_DMA_IRQHandler+0xdaa>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a2a      	ldr	r2, [pc, #168]	; (8009690 <HAL_DMA_IRQHandler+0xe50>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d108      	bne.n	80095fc <HAL_DMA_IRQHandler+0xdbc>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	681a      	ldr	r2, [r3, #0]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f022 021c 	bic.w	r2, r2, #28
 80095f8:	601a      	str	r2, [r3, #0]
 80095fa:	e007      	b.n	800960c <HAL_DMA_IRQHandler+0xdcc>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	681a      	ldr	r2, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f022 020e 	bic.w	r2, r2, #14
 800960a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009610:	f003 031f 	and.w	r3, r3, #31
 8009614:	2201      	movs	r2, #1
 8009616:	409a      	lsls	r2, r3
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d009      	beq.n	800964e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	4798      	blx	r3
 8009642:	e004      	b.n	800964e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009644:	bf00      	nop
 8009646:	e002      	b.n	800964e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009648:	bf00      	nop
 800964a:	e000      	b.n	800964e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800964c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800964e:	3728      	adds	r7, #40	; 0x28
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	40020010 	.word	0x40020010
 8009658:	40020028 	.word	0x40020028
 800965c:	40020040 	.word	0x40020040
 8009660:	40020058 	.word	0x40020058
 8009664:	40020070 	.word	0x40020070
 8009668:	40020088 	.word	0x40020088
 800966c:	400200a0 	.word	0x400200a0
 8009670:	400200b8 	.word	0x400200b8
 8009674:	40020410 	.word	0x40020410
 8009678:	40020428 	.word	0x40020428
 800967c:	40020440 	.word	0x40020440
 8009680:	40020458 	.word	0x40020458
 8009684:	40020470 	.word	0x40020470
 8009688:	40020488 	.word	0x40020488
 800968c:	400204a0 	.word	0x400204a0
 8009690:	400204b8 	.word	0x400204b8

08009694 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80096a2:	b2db      	uxtb	r3, r3
}
 80096a4:	4618      	mov	r0, r3
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a42      	ldr	r2, [pc, #264]	; (80097c8 <DMA_CalcBaseAndBitshift+0x118>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d04a      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a41      	ldr	r2, [pc, #260]	; (80097cc <DMA_CalcBaseAndBitshift+0x11c>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d045      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a3f      	ldr	r2, [pc, #252]	; (80097d0 <DMA_CalcBaseAndBitshift+0x120>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d040      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a3e      	ldr	r2, [pc, #248]	; (80097d4 <DMA_CalcBaseAndBitshift+0x124>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d03b      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a3c      	ldr	r2, [pc, #240]	; (80097d8 <DMA_CalcBaseAndBitshift+0x128>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d036      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a3b      	ldr	r2, [pc, #236]	; (80097dc <DMA_CalcBaseAndBitshift+0x12c>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d031      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a39      	ldr	r2, [pc, #228]	; (80097e0 <DMA_CalcBaseAndBitshift+0x130>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d02c      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a38      	ldr	r2, [pc, #224]	; (80097e4 <DMA_CalcBaseAndBitshift+0x134>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d027      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a36      	ldr	r2, [pc, #216]	; (80097e8 <DMA_CalcBaseAndBitshift+0x138>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d022      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a35      	ldr	r2, [pc, #212]	; (80097ec <DMA_CalcBaseAndBitshift+0x13c>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d01d      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a33      	ldr	r2, [pc, #204]	; (80097f0 <DMA_CalcBaseAndBitshift+0x140>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d018      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a32      	ldr	r2, [pc, #200]	; (80097f4 <DMA_CalcBaseAndBitshift+0x144>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d013      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a30      	ldr	r2, [pc, #192]	; (80097f8 <DMA_CalcBaseAndBitshift+0x148>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00e      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a2f      	ldr	r2, [pc, #188]	; (80097fc <DMA_CalcBaseAndBitshift+0x14c>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d009      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a2d      	ldr	r2, [pc, #180]	; (8009800 <DMA_CalcBaseAndBitshift+0x150>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d004      	beq.n	8009758 <DMA_CalcBaseAndBitshift+0xa8>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a2c      	ldr	r2, [pc, #176]	; (8009804 <DMA_CalcBaseAndBitshift+0x154>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d101      	bne.n	800975c <DMA_CalcBaseAndBitshift+0xac>
 8009758:	2301      	movs	r3, #1
 800975a:	e000      	b.n	800975e <DMA_CalcBaseAndBitshift+0xae>
 800975c:	2300      	movs	r3, #0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d024      	beq.n	80097ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	3b10      	subs	r3, #16
 800976a:	4a27      	ldr	r2, [pc, #156]	; (8009808 <DMA_CalcBaseAndBitshift+0x158>)
 800976c:	fba2 2303 	umull	r2, r3, r2, r3
 8009770:	091b      	lsrs	r3, r3, #4
 8009772:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	f003 0307 	and.w	r3, r3, #7
 800977a:	4a24      	ldr	r2, [pc, #144]	; (800980c <DMA_CalcBaseAndBitshift+0x15c>)
 800977c:	5cd3      	ldrb	r3, [r2, r3]
 800977e:	461a      	mov	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2b03      	cmp	r3, #3
 8009788:	d908      	bls.n	800979c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	461a      	mov	r2, r3
 8009790:	4b1f      	ldr	r3, [pc, #124]	; (8009810 <DMA_CalcBaseAndBitshift+0x160>)
 8009792:	4013      	ands	r3, r2
 8009794:	1d1a      	adds	r2, r3, #4
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	659a      	str	r2, [r3, #88]	; 0x58
 800979a:	e00d      	b.n	80097b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	461a      	mov	r2, r3
 80097a2:	4b1b      	ldr	r3, [pc, #108]	; (8009810 <DMA_CalcBaseAndBitshift+0x160>)
 80097a4:	4013      	ands	r3, r2
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	6593      	str	r3, [r2, #88]	; 0x58
 80097aa:	e005      	b.n	80097b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3714      	adds	r7, #20
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	40020010 	.word	0x40020010
 80097cc:	40020028 	.word	0x40020028
 80097d0:	40020040 	.word	0x40020040
 80097d4:	40020058 	.word	0x40020058
 80097d8:	40020070 	.word	0x40020070
 80097dc:	40020088 	.word	0x40020088
 80097e0:	400200a0 	.word	0x400200a0
 80097e4:	400200b8 	.word	0x400200b8
 80097e8:	40020410 	.word	0x40020410
 80097ec:	40020428 	.word	0x40020428
 80097f0:	40020440 	.word	0x40020440
 80097f4:	40020458 	.word	0x40020458
 80097f8:	40020470 	.word	0x40020470
 80097fc:	40020488 	.word	0x40020488
 8009800:	400204a0 	.word	0x400204a0
 8009804:	400204b8 	.word	0x400204b8
 8009808:	aaaaaaab 	.word	0xaaaaaaab
 800980c:	08015268 	.word	0x08015268
 8009810:	fffffc00 	.word	0xfffffc00

08009814 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d120      	bne.n	800986a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982c:	2b03      	cmp	r3, #3
 800982e:	d858      	bhi.n	80098e2 <DMA_CheckFifoParam+0xce>
 8009830:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <DMA_CheckFifoParam+0x24>)
 8009832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009836:	bf00      	nop
 8009838:	08009849 	.word	0x08009849
 800983c:	0800985b 	.word	0x0800985b
 8009840:	08009849 	.word	0x08009849
 8009844:	080098e3 	.word	0x080098e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800984c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009850:	2b00      	cmp	r3, #0
 8009852:	d048      	beq.n	80098e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009858:	e045      	b.n	80098e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800985e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009862:	d142      	bne.n	80098ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009868:	e03f      	b.n	80098ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009872:	d123      	bne.n	80098bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009878:	2b03      	cmp	r3, #3
 800987a:	d838      	bhi.n	80098ee <DMA_CheckFifoParam+0xda>
 800987c:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <DMA_CheckFifoParam+0x70>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	08009895 	.word	0x08009895
 8009888:	0800989b 	.word	0x0800989b
 800988c:	08009895 	.word	0x08009895
 8009890:	080098ad 	.word	0x080098ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	73fb      	strb	r3, [r7, #15]
        break;
 8009898:	e030      	b.n	80098fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d025      	beq.n	80098f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80098aa:	e022      	b.n	80098f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80098b4:	d11f      	bne.n	80098f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80098ba:	e01c      	b.n	80098f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d902      	bls.n	80098ca <DMA_CheckFifoParam+0xb6>
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d003      	beq.n	80098d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80098c8:	e018      	b.n	80098fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	73fb      	strb	r3, [r7, #15]
        break;
 80098ce:	e015      	b.n	80098fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00e      	beq.n	80098fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	73fb      	strb	r3, [r7, #15]
    break;
 80098e0:	e00b      	b.n	80098fa <DMA_CheckFifoParam+0xe6>
        break;
 80098e2:	bf00      	nop
 80098e4:	e00a      	b.n	80098fc <DMA_CheckFifoParam+0xe8>
        break;
 80098e6:	bf00      	nop
 80098e8:	e008      	b.n	80098fc <DMA_CheckFifoParam+0xe8>
        break;
 80098ea:	bf00      	nop
 80098ec:	e006      	b.n	80098fc <DMA_CheckFifoParam+0xe8>
        break;
 80098ee:	bf00      	nop
 80098f0:	e004      	b.n	80098fc <DMA_CheckFifoParam+0xe8>
        break;
 80098f2:	bf00      	nop
 80098f4:	e002      	b.n	80098fc <DMA_CheckFifoParam+0xe8>
        break;
 80098f6:	bf00      	nop
 80098f8:	e000      	b.n	80098fc <DMA_CheckFifoParam+0xe8>
    break;
 80098fa:	bf00      	nop
    }
  }

  return status;
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop

0800990c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800990c:	b480      	push	{r7}
 800990e:	b085      	sub	sp, #20
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a38      	ldr	r2, [pc, #224]	; (8009a00 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d022      	beq.n	800996a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a36      	ldr	r2, [pc, #216]	; (8009a04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d01d      	beq.n	800996a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a35      	ldr	r2, [pc, #212]	; (8009a08 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d018      	beq.n	800996a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a33      	ldr	r2, [pc, #204]	; (8009a0c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d013      	beq.n	800996a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a32      	ldr	r2, [pc, #200]	; (8009a10 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d00e      	beq.n	800996a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a30      	ldr	r2, [pc, #192]	; (8009a14 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d009      	beq.n	800996a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a2f      	ldr	r2, [pc, #188]	; (8009a18 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d004      	beq.n	800996a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a2d      	ldr	r2, [pc, #180]	; (8009a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d101      	bne.n	800996e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800996a:	2301      	movs	r3, #1
 800996c:	e000      	b.n	8009970 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800996e:	2300      	movs	r3, #0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d01a      	beq.n	80099aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	b2db      	uxtb	r3, r3
 800997a:	3b08      	subs	r3, #8
 800997c:	4a28      	ldr	r2, [pc, #160]	; (8009a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800997e:	fba2 2303 	umull	r2, r3, r2, r3
 8009982:	091b      	lsrs	r3, r3, #4
 8009984:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	4b26      	ldr	r3, [pc, #152]	; (8009a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800998a:	4413      	add	r3, r2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	461a      	mov	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a24      	ldr	r2, [pc, #144]	; (8009a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009998:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f003 031f 	and.w	r3, r3, #31
 80099a0:	2201      	movs	r2, #1
 80099a2:	409a      	lsls	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80099a8:	e024      	b.n	80099f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	3b10      	subs	r3, #16
 80099b2:	4a1e      	ldr	r2, [pc, #120]	; (8009a2c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80099b4:	fba2 2303 	umull	r2, r3, r2, r3
 80099b8:	091b      	lsrs	r3, r3, #4
 80099ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	4a1c      	ldr	r2, [pc, #112]	; (8009a30 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d806      	bhi.n	80099d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	4a1b      	ldr	r2, [pc, #108]	; (8009a34 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d902      	bls.n	80099d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	3308      	adds	r3, #8
 80099d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	4b18      	ldr	r3, [pc, #96]	; (8009a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	461a      	mov	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a16      	ldr	r2, [pc, #88]	; (8009a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80099e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f003 031f 	and.w	r3, r3, #31
 80099ec:	2201      	movs	r2, #1
 80099ee:	409a      	lsls	r2, r3
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80099f4:	bf00      	nop
 80099f6:	3714      	adds	r7, #20
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	58025408 	.word	0x58025408
 8009a04:	5802541c 	.word	0x5802541c
 8009a08:	58025430 	.word	0x58025430
 8009a0c:	58025444 	.word	0x58025444
 8009a10:	58025458 	.word	0x58025458
 8009a14:	5802546c 	.word	0x5802546c
 8009a18:	58025480 	.word	0x58025480
 8009a1c:	58025494 	.word	0x58025494
 8009a20:	cccccccd 	.word	0xcccccccd
 8009a24:	16009600 	.word	0x16009600
 8009a28:	58025880 	.word	0x58025880
 8009a2c:	aaaaaaab 	.word	0xaaaaaaab
 8009a30:	400204b8 	.word	0x400204b8
 8009a34:	4002040f 	.word	0x4002040f
 8009a38:	10008200 	.word	0x10008200
 8009a3c:	40020880 	.word	0x40020880

08009a40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d04a      	beq.n	8009aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b08      	cmp	r3, #8
 8009a5a:	d847      	bhi.n	8009aec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a25      	ldr	r2, [pc, #148]	; (8009af8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d022      	beq.n	8009aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a24      	ldr	r2, [pc, #144]	; (8009afc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d01d      	beq.n	8009aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a22      	ldr	r2, [pc, #136]	; (8009b00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d018      	beq.n	8009aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a21      	ldr	r2, [pc, #132]	; (8009b04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d013      	beq.n	8009aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a1f      	ldr	r2, [pc, #124]	; (8009b08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d00e      	beq.n	8009aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a1e      	ldr	r2, [pc, #120]	; (8009b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d009      	beq.n	8009aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a1c      	ldr	r2, [pc, #112]	; (8009b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d004      	beq.n	8009aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a1b      	ldr	r2, [pc, #108]	; (8009b14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d101      	bne.n	8009ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009aac:	2301      	movs	r3, #1
 8009aae:	e000      	b.n	8009ab2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00a      	beq.n	8009acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	4b17      	ldr	r3, [pc, #92]	; (8009b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	461a      	mov	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a15      	ldr	r2, [pc, #84]	; (8009b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009ac8:	671a      	str	r2, [r3, #112]	; 0x70
 8009aca:	e009      	b.n	8009ae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	4b14      	ldr	r3, [pc, #80]	; (8009b20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009ad0:	4413      	add	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a11      	ldr	r2, [pc, #68]	; (8009b24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009ade:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	409a      	lsls	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009aec:	bf00      	nop
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	58025408 	.word	0x58025408
 8009afc:	5802541c 	.word	0x5802541c
 8009b00:	58025430 	.word	0x58025430
 8009b04:	58025444 	.word	0x58025444
 8009b08:	58025458 	.word	0x58025458
 8009b0c:	5802546c 	.word	0x5802546c
 8009b10:	58025480 	.word	0x58025480
 8009b14:	58025494 	.word	0x58025494
 8009b18:	1600963f 	.word	0x1600963f
 8009b1c:	58025940 	.word	0x58025940
 8009b20:	1000823f 	.word	0x1000823f
 8009b24:	40020940 	.word	0x40020940

08009b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b089      	sub	sp, #36	; 0x24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
 8009b30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009b32:	2300      	movs	r3, #0
 8009b34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8009b36:	4b86      	ldr	r3, [pc, #536]	; (8009d50 <HAL_GPIO_Init+0x228>)
 8009b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009b3a:	e18c      	b.n	8009e56 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	681a      	ldr	r2, [r3, #0]
 8009b40:	2101      	movs	r1, #1
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	fa01 f303 	lsl.w	r3, r1, r3
 8009b48:	4013      	ands	r3, r2
 8009b4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 817e 	beq.w	8009e50 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d005      	beq.n	8009b6c <HAL_GPIO_Init+0x44>
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	f003 0303 	and.w	r3, r3, #3
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d130      	bne.n	8009bce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689b      	ldr	r3, [r3, #8]
 8009b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	2203      	movs	r2, #3
 8009b78:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7c:	43db      	mvns	r3, r3
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	4013      	ands	r3, r2
 8009b82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	68da      	ldr	r2, [r3, #12]
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b90:	69ba      	ldr	r2, [r7, #24]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	69ba      	ldr	r2, [r7, #24]
 8009b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	69fb      	ldr	r3, [r7, #28]
 8009ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8009baa:	43db      	mvns	r3, r3
 8009bac:	69ba      	ldr	r2, [r7, #24]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	091b      	lsrs	r3, r3, #4
 8009bb8:	f003 0201 	and.w	r2, r3, #1
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	69ba      	ldr	r2, [r7, #24]
 8009bcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	f003 0303 	and.w	r3, r3, #3
 8009bd6:	2b03      	cmp	r3, #3
 8009bd8:	d017      	beq.n	8009c0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	68db      	ldr	r3, [r3, #12]
 8009bde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	005b      	lsls	r3, r3, #1
 8009be4:	2203      	movs	r2, #3
 8009be6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bea:	43db      	mvns	r3, r3
 8009bec:	69ba      	ldr	r2, [r7, #24]
 8009bee:	4013      	ands	r3, r2
 8009bf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	689a      	ldr	r2, [r3, #8]
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8009bfe:	69ba      	ldr	r2, [r7, #24]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f003 0303 	and.w	r3, r3, #3
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d123      	bne.n	8009c5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	08da      	lsrs	r2, r3, #3
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3208      	adds	r2, #8
 8009c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	220f      	movs	r2, #15
 8009c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c32:	43db      	mvns	r3, r3
 8009c34:	69ba      	ldr	r2, [r7, #24]
 8009c36:	4013      	ands	r3, r2
 8009c38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	691a      	ldr	r2, [r3, #16]
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	f003 0307 	and.w	r3, r3, #7
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	08da      	lsrs	r2, r3, #3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	3208      	adds	r2, #8
 8009c58:	69b9      	ldr	r1, [r7, #24]
 8009c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	2203      	movs	r2, #3
 8009c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c6e:	43db      	mvns	r3, r3
 8009c70:	69ba      	ldr	r2, [r7, #24]
 8009c72:	4013      	ands	r3, r2
 8009c74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f003 0203 	and.w	r2, r3, #3
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	005b      	lsls	r3, r3, #1
 8009c82:	fa02 f303 	lsl.w	r3, r2, r3
 8009c86:	69ba      	ldr	r2, [r7, #24]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	69ba      	ldr	r2, [r7, #24]
 8009c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f000 80d8 	beq.w	8009e50 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ca0:	4b2c      	ldr	r3, [pc, #176]	; (8009d54 <HAL_GPIO_Init+0x22c>)
 8009ca2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ca6:	4a2b      	ldr	r2, [pc, #172]	; (8009d54 <HAL_GPIO_Init+0x22c>)
 8009ca8:	f043 0302 	orr.w	r3, r3, #2
 8009cac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009cb0:	4b28      	ldr	r3, [pc, #160]	; (8009d54 <HAL_GPIO_Init+0x22c>)
 8009cb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009cb6:	f003 0302 	and.w	r3, r3, #2
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009cbe:	4a26      	ldr	r2, [pc, #152]	; (8009d58 <HAL_GPIO_Init+0x230>)
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	089b      	lsrs	r3, r3, #2
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	220f      	movs	r2, #15
 8009cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8009cda:	43db      	mvns	r3, r3
 8009cdc:	69ba      	ldr	r2, [r7, #24]
 8009cde:	4013      	ands	r3, r2
 8009ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	4a1d      	ldr	r2, [pc, #116]	; (8009d5c <HAL_GPIO_Init+0x234>)
 8009ce6:	4293      	cmp	r3, r2
 8009ce8:	d04a      	beq.n	8009d80 <HAL_GPIO_Init+0x258>
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a1c      	ldr	r2, [pc, #112]	; (8009d60 <HAL_GPIO_Init+0x238>)
 8009cee:	4293      	cmp	r3, r2
 8009cf0:	d02b      	beq.n	8009d4a <HAL_GPIO_Init+0x222>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	4a1b      	ldr	r2, [pc, #108]	; (8009d64 <HAL_GPIO_Init+0x23c>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d025      	beq.n	8009d46 <HAL_GPIO_Init+0x21e>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4a1a      	ldr	r2, [pc, #104]	; (8009d68 <HAL_GPIO_Init+0x240>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d01f      	beq.n	8009d42 <HAL_GPIO_Init+0x21a>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	4a19      	ldr	r2, [pc, #100]	; (8009d6c <HAL_GPIO_Init+0x244>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d019      	beq.n	8009d3e <HAL_GPIO_Init+0x216>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a18      	ldr	r2, [pc, #96]	; (8009d70 <HAL_GPIO_Init+0x248>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d013      	beq.n	8009d3a <HAL_GPIO_Init+0x212>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a17      	ldr	r2, [pc, #92]	; (8009d74 <HAL_GPIO_Init+0x24c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00d      	beq.n	8009d36 <HAL_GPIO_Init+0x20e>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a16      	ldr	r2, [pc, #88]	; (8009d78 <HAL_GPIO_Init+0x250>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d007      	beq.n	8009d32 <HAL_GPIO_Init+0x20a>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a15      	ldr	r2, [pc, #84]	; (8009d7c <HAL_GPIO_Init+0x254>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d101      	bne.n	8009d2e <HAL_GPIO_Init+0x206>
 8009d2a:	2309      	movs	r3, #9
 8009d2c:	e029      	b.n	8009d82 <HAL_GPIO_Init+0x25a>
 8009d2e:	230a      	movs	r3, #10
 8009d30:	e027      	b.n	8009d82 <HAL_GPIO_Init+0x25a>
 8009d32:	2307      	movs	r3, #7
 8009d34:	e025      	b.n	8009d82 <HAL_GPIO_Init+0x25a>
 8009d36:	2306      	movs	r3, #6
 8009d38:	e023      	b.n	8009d82 <HAL_GPIO_Init+0x25a>
 8009d3a:	2305      	movs	r3, #5
 8009d3c:	e021      	b.n	8009d82 <HAL_GPIO_Init+0x25a>
 8009d3e:	2304      	movs	r3, #4
 8009d40:	e01f      	b.n	8009d82 <HAL_GPIO_Init+0x25a>
 8009d42:	2303      	movs	r3, #3
 8009d44:	e01d      	b.n	8009d82 <HAL_GPIO_Init+0x25a>
 8009d46:	2302      	movs	r3, #2
 8009d48:	e01b      	b.n	8009d82 <HAL_GPIO_Init+0x25a>
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e019      	b.n	8009d82 <HAL_GPIO_Init+0x25a>
 8009d4e:	bf00      	nop
 8009d50:	58000080 	.word	0x58000080
 8009d54:	58024400 	.word	0x58024400
 8009d58:	58000400 	.word	0x58000400
 8009d5c:	58020000 	.word	0x58020000
 8009d60:	58020400 	.word	0x58020400
 8009d64:	58020800 	.word	0x58020800
 8009d68:	58020c00 	.word	0x58020c00
 8009d6c:	58021000 	.word	0x58021000
 8009d70:	58021400 	.word	0x58021400
 8009d74:	58021800 	.word	0x58021800
 8009d78:	58021c00 	.word	0x58021c00
 8009d7c:	58022400 	.word	0x58022400
 8009d80:	2300      	movs	r3, #0
 8009d82:	69fa      	ldr	r2, [r7, #28]
 8009d84:	f002 0203 	and.w	r2, r2, #3
 8009d88:	0092      	lsls	r2, r2, #2
 8009d8a:	4093      	lsls	r3, r2
 8009d8c:	69ba      	ldr	r2, [r7, #24]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009d92:	4938      	ldr	r1, [pc, #224]	; (8009e74 <HAL_GPIO_Init+0x34c>)
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	089b      	lsrs	r3, r3, #2
 8009d98:	3302      	adds	r3, #2
 8009d9a:	69ba      	ldr	r2, [r7, #24]
 8009d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	43db      	mvns	r3, r3
 8009dac:	69ba      	ldr	r2, [r7, #24]
 8009dae:	4013      	ands	r3, r2
 8009db0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8009dbe:	69ba      	ldr	r2, [r7, #24]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8009dc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	43db      	mvns	r3, r3
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8009dec:	69ba      	ldr	r2, [r7, #24]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	4313      	orrs	r3, r2
 8009df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8009df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009df8:	69bb      	ldr	r3, [r7, #24]
 8009dfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	43db      	mvns	r3, r3
 8009e06:	69ba      	ldr	r2, [r7, #24]
 8009e08:	4013      	ands	r3, r2
 8009e0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d003      	beq.n	8009e20 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8009e18:	69ba      	ldr	r2, [r7, #24]
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	4313      	orrs	r3, r2
 8009e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	69ba      	ldr	r2, [r7, #24]
 8009e24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	43db      	mvns	r3, r3
 8009e30:	69ba      	ldr	r2, [r7, #24]
 8009e32:	4013      	ands	r3, r2
 8009e34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d003      	beq.n	8009e4a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	69ba      	ldr	r2, [r7, #24]
 8009e4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009e50:	69fb      	ldr	r3, [r7, #28]
 8009e52:	3301      	adds	r3, #1
 8009e54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f47f ae6b 	bne.w	8009b3c <HAL_GPIO_Init+0x14>
  }
}
 8009e66:	bf00      	nop
 8009e68:	bf00      	nop
 8009e6a:	3724      	adds	r7, #36	; 0x24
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	58000400 	.word	0x58000400

08009e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	807b      	strh	r3, [r7, #2]
 8009e84:	4613      	mov	r3, r2
 8009e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e88:	787b      	ldrb	r3, [r7, #1]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d003      	beq.n	8009e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e8e:	887a      	ldrh	r2, [r7, #2]
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8009e94:	e003      	b.n	8009e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8009e96:	887b      	ldrh	r3, [r7, #2]
 8009e98:	041a      	lsls	r2, r3, #16
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	619a      	str	r2, [r3, #24]
}
 8009e9e:	bf00      	nop
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b085      	sub	sp, #20
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009ebc:	887a      	ldrh	r2, [r7, #2]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	041a      	lsls	r2, r3, #16
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	43d9      	mvns	r1, r3
 8009ec8:	887b      	ldrh	r3, [r7, #2]
 8009eca:	400b      	ands	r3, r1
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	619a      	str	r2, [r3, #24]
}
 8009ed2:	bf00      	nop
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
	...

08009ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d101      	bne.n	8009ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	e07f      	b.n	8009ff2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d106      	bne.n	8009f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f7f7 fcd0 	bl	80018ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2224      	movs	r2, #36	; 0x24
 8009f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f022 0201 	bic.w	r2, r2, #1
 8009f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009f30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d107      	bne.n	8009f5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	689a      	ldr	r2, [r3, #8]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f56:	609a      	str	r2, [r3, #8]
 8009f58:	e006      	b.n	8009f68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	689a      	ldr	r2, [r3, #8]
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009f66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d104      	bne.n	8009f7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6859      	ldr	r1, [r3, #4]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	4b1d      	ldr	r3, [pc, #116]	; (8009ffc <HAL_I2C_Init+0x11c>)
 8009f86:	430b      	orrs	r3, r1
 8009f88:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68da      	ldr	r2, [r3, #12]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009f98:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	691a      	ldr	r2, [r3, #16]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	69d9      	ldr	r1, [r3, #28]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a1a      	ldr	r2, [r3, #32]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f042 0201 	orr.w	r2, r2, #1
 8009fd2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2220      	movs	r2, #32
 8009fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	02008000 	.word	0x02008000

0800a000 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800a000:	b580      	push	{r7, lr}
 800a002:	b088      	sub	sp, #32
 800a004:	af02      	add	r7, sp, #8
 800a006:	60f8      	str	r0, [r7, #12]
 800a008:	4608      	mov	r0, r1
 800a00a:	4611      	mov	r1, r2
 800a00c:	461a      	mov	r2, r3
 800a00e:	4603      	mov	r3, r0
 800a010:	817b      	strh	r3, [r7, #10]
 800a012:	460b      	mov	r3, r1
 800a014:	813b      	strh	r3, [r7, #8]
 800a016:	4613      	mov	r3, r2
 800a018:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b20      	cmp	r3, #32
 800a024:	d176      	bne.n	800a114 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 800a026:	6a3b      	ldr	r3, [r7, #32]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d002      	beq.n	800a032 <HAL_I2C_Mem_Read_IT+0x32>
 800a02c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d105      	bne.n	800a03e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a038:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e06b      	b.n	800a116 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a04c:	d101      	bne.n	800a052 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800a04e:	2302      	movs	r3, #2
 800a050:	e061      	b.n	800a116 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d101      	bne.n	800a060 <HAL_I2C_Mem_Read_IT+0x60>
 800a05c:	2302      	movs	r3, #2
 800a05e:	e05a      	b.n	800a116 <HAL_I2C_Mem_Read_IT+0x116>
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a068:	f7fa ffac 	bl	8004fc4 <HAL_GetTick>
 800a06c:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2222      	movs	r2, #34	; 0x22
 800a072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2240      	movs	r2, #64	; 0x40
 800a07a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	6a3a      	ldr	r2, [r7, #32]
 800a088:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a08e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	4a23      	ldr	r2, [pc, #140]	; (800a120 <HAL_I2C_Mem_Read_IT+0x120>)
 800a094:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	4a22      	ldr	r2, [pc, #136]	; (800a124 <HAL_I2C_Mem_Read_IT+0x124>)
 800a09a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	2bff      	cmp	r3, #255	; 0xff
 800a0a4:	d906      	bls.n	800a0b4 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	22ff      	movs	r2, #255	; 0xff
 800a0aa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800a0ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	e007      	b.n	800a0c4 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a0be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0c2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800a0c4:	88f8      	ldrh	r0, [r7, #6]
 800a0c6:	893a      	ldrh	r2, [r7, #8]
 800a0c8:	8979      	ldrh	r1, [r7, #10]
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	9301      	str	r3, [sp, #4]
 800a0ce:	2319      	movs	r3, #25
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fdf1 	bl	800acbc <I2C_RequestMemoryRead>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d005      	beq.n	800a0ec <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e014      	b.n	800a116 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0f0:	b2da      	uxtb	r2, r3
 800a0f2:	8979      	ldrh	r1, [r7, #10]
 800a0f4:	4b0c      	ldr	r3, [pc, #48]	; (800a128 <HAL_I2C_Mem_Read_IT+0x128>)
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	697b      	ldr	r3, [r7, #20]
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f001 fd10 	bl	800bb20 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a108:	2102      	movs	r1, #2
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f001 fd3a 	bl	800bb84 <I2C_Enable_IRQ>

    return HAL_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	e000      	b.n	800a116 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 800a114:	2302      	movs	r3, #2
  }
}
 800a116:	4618      	mov	r0, r3
 800a118:	3718      	adds	r7, #24
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	ffff0000 	.word	0xffff0000
 800a124:	0800a2bf 	.word	0x0800a2bf
 800a128:	80002400 	.word	0x80002400

0800a12c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b086      	sub	sp, #24
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	0a1b      	lsrs	r3, r3, #8
 800a148:	f003 0301 	and.w	r3, r3, #1
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d010      	beq.n	800a172 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	09db      	lsrs	r3, r3, #7
 800a154:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00a      	beq.n	800a172 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a160:	f043 0201 	orr.w	r2, r3, #1
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a170:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	0a9b      	lsrs	r3, r3, #10
 800a176:	f003 0301 	and.w	r3, r3, #1
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d010      	beq.n	800a1a0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	09db      	lsrs	r3, r3, #7
 800a182:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18e:	f043 0208 	orr.w	r2, r3, #8
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a19e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	0a5b      	lsrs	r3, r3, #9
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d010      	beq.n	800a1ce <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	09db      	lsrs	r3, r3, #7
 800a1b0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d00a      	beq.n	800a1ce <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1bc:	f043 0202 	orr.w	r2, r3, #2
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f003 030b 	and.w	r3, r3, #11
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f001 f9f7 	bl	800b5d4 <I2C_ITError>
  }
}
 800a1e6:	bf00      	nop
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b083      	sub	sp, #12
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a1f6:	bf00      	nop
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a202:	b480      	push	{r7}
 800a204:	b083      	sub	sp, #12
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a20a:	bf00      	nop
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a216:	b480      	push	{r7}
 800a218:	b083      	sub	sp, #12
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a21e:	bf00      	nop
 800a220:	370c      	adds	r7, #12
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b083      	sub	sp, #12
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a232:	bf00      	nop
 800a234:	370c      	adds	r7, #12
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr

0800a23e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a23e:	b480      	push	{r7}
 800a240:	b083      	sub	sp, #12
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
 800a246:	460b      	mov	r3, r1
 800a248:	70fb      	strb	r3, [r7, #3]
 800a24a:	4613      	mov	r3, r2
 800a24c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a24e:	bf00      	nop
 800a250:	370c      	adds	r7, #12
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a262:	bf00      	nop
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a26e:	b480      	push	{r7}
 800a270:	b083      	sub	sp, #12
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a276:	bf00      	nop
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr

0800a282 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a282:	b480      	push	{r7}
 800a284:	b083      	sub	sp, #12
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a28a:	bf00      	nop
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a29e:	bf00      	nop
 800a2a0:	370c      	adds	r7, #12
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a8:	4770      	bx	lr

0800a2aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a2aa:	b480      	push	{r7}
 800a2ac:	b083      	sub	sp, #12
 800a2ae:	af00      	add	r7, sp, #0
 800a2b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a2b2:	bf00      	nop
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b088      	sub	sp, #32
 800a2c2:	af02      	add	r7, sp, #8
 800a2c4:	60f8      	str	r0, [r7, #12]
 800a2c6:	60b9      	str	r1, [r7, #8]
 800a2c8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d101      	bne.n	800a2dc <I2C_Master_ISR_IT+0x1e>
 800a2d8:	2302      	movs	r3, #2
 800a2da:	e114      	b.n	800a506 <I2C_Master_ISR_IT+0x248>
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	091b      	lsrs	r3, r3, #4
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d013      	beq.n	800a318 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	091b      	lsrs	r3, r3, #4
 800a2f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00d      	beq.n	800a318 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	2210      	movs	r2, #16
 800a302:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a308:	f043 0204 	orr.w	r2, r3, #4
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a310:	68f8      	ldr	r0, [r7, #12]
 800a312:	f001 fa56 	bl	800b7c2 <I2C_Flush_TXDR>
 800a316:	e0e1      	b.n	800a4dc <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	089b      	lsrs	r3, r3, #2
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d023      	beq.n	800a36c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	089b      	lsrs	r3, r3, #2
 800a328:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d01d      	beq.n	800a36c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	f023 0304 	bic.w	r3, r3, #4
 800a336:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a342:	b2d2      	uxtb	r2, r2
 800a344:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34a:	1c5a      	adds	r2, r3, #1
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a354:	3b01      	subs	r3, #1
 800a356:	b29a      	uxth	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a360:	b29b      	uxth	r3, r3
 800a362:	3b01      	subs	r3, #1
 800a364:	b29a      	uxth	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a36a:	e0b7      	b.n	800a4dc <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	085b      	lsrs	r3, r3, #1
 800a370:	f003 0301 	and.w	r3, r3, #1
 800a374:	2b00      	cmp	r3, #0
 800a376:	d01e      	beq.n	800a3b6 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	085b      	lsrs	r3, r3, #1
 800a37c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a380:	2b00      	cmp	r3, #0
 800a382:	d018      	beq.n	800a3b6 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a388:	781a      	ldrb	r2, [r3, #0]
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	1c5a      	adds	r2, r3, #1
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	b29a      	uxth	r2, r3
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	3b01      	subs	r3, #1
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a3b4:	e092      	b.n	800a4dc <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	09db      	lsrs	r3, r3, #7
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d05d      	beq.n	800a47e <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	099b      	lsrs	r3, r3, #6
 800a3c6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d057      	beq.n	800a47e <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d040      	beq.n	800a45a <I2C_Master_ISR_IT+0x19c>
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d13c      	bne.n	800a45a <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3ec:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	2bff      	cmp	r3, #255	; 0xff
 800a3f6:	d90e      	bls.n	800a416 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	22ff      	movs	r2, #255	; 0xff
 800a3fc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a402:	b2da      	uxtb	r2, r3
 800a404:	8a79      	ldrh	r1, [r7, #18]
 800a406:	2300      	movs	r3, #0
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f001 fb86 	bl	800bb20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a414:	e032      	b.n	800a47c <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a428:	d00b      	beq.n	800a442 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a42e:	b2da      	uxtb	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	8a79      	ldrh	r1, [r7, #18]
 800a436:	2000      	movs	r0, #0
 800a438:	9000      	str	r0, [sp, #0]
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f001 fb70 	bl	800bb20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a440:	e01c      	b.n	800a47c <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a446:	b2da      	uxtb	r2, r3
 800a448:	8a79      	ldrh	r1, [r7, #18]
 800a44a:	2300      	movs	r3, #0
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f001 fb64 	bl	800bb20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a458:	e010      	b.n	800a47c <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a464:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a468:	d003      	beq.n	800a472 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a46a:	68f8      	ldr	r0, [r7, #12]
 800a46c:	f000 fcfe 	bl	800ae6c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a470:	e034      	b.n	800a4dc <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a472:	2140      	movs	r1, #64	; 0x40
 800a474:	68f8      	ldr	r0, [r7, #12]
 800a476:	f001 f8ad 	bl	800b5d4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a47a:	e02f      	b.n	800a4dc <I2C_Master_ISR_IT+0x21e>
 800a47c:	e02e      	b.n	800a4dc <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	099b      	lsrs	r3, r3, #6
 800a482:	f003 0301 	and.w	r3, r3, #1
 800a486:	2b00      	cmp	r3, #0
 800a488:	d028      	beq.n	800a4dc <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	099b      	lsrs	r3, r3, #6
 800a48e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800a492:	2b00      	cmp	r3, #0
 800a494:	d022      	beq.n	800a4dc <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d119      	bne.n	800a4d4 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4ae:	d015      	beq.n	800a4dc <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a4b8:	d108      	bne.n	800a4cc <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4c8:	605a      	str	r2, [r3, #4]
 800a4ca:	e007      	b.n	800a4dc <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f000 fccd 	bl	800ae6c <I2C_ITMasterSeqCplt>
 800a4d2:	e003      	b.n	800a4dc <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a4d4:	2140      	movs	r1, #64	; 0x40
 800a4d6:	68f8      	ldr	r0, [r7, #12]
 800a4d8:	f001 f87c 	bl	800b5d4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	095b      	lsrs	r3, r3, #5
 800a4e0:	f003 0301 	and.w	r3, r3, #1
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d009      	beq.n	800a4fc <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	095b      	lsrs	r3, r3, #5
 800a4ec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d003      	beq.n	800a4fc <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800a4f4:	6979      	ldr	r1, [r7, #20]
 800a4f6:	68f8      	ldr	r0, [r7, #12]
 800a4f8:	f000 fd54 	bl	800afa4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b086      	sub	sp, #24
 800a512:	af00      	add	r7, sp, #0
 800a514:	60f8      	str	r0, [r7, #12]
 800a516:	60b9      	str	r1, [r7, #8]
 800a518:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a52a:	2b01      	cmp	r3, #1
 800a52c:	d101      	bne.n	800a532 <I2C_Slave_ISR_IT+0x24>
 800a52e:	2302      	movs	r3, #2
 800a530:	e0ec      	b.n	800a70c <I2C_Slave_ISR_IT+0x1fe>
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	095b      	lsrs	r3, r3, #5
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	d009      	beq.n	800a55a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	095b      	lsrs	r3, r3, #5
 800a54a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d003      	beq.n	800a55a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a552:	6939      	ldr	r1, [r7, #16]
 800a554:	68f8      	ldr	r0, [r7, #12]
 800a556:	f000 fdef 	bl	800b138 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	091b      	lsrs	r3, r3, #4
 800a55e:	f003 0301 	and.w	r3, r3, #1
 800a562:	2b00      	cmp	r3, #0
 800a564:	d04d      	beq.n	800a602 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	091b      	lsrs	r3, r3, #4
 800a56a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d047      	beq.n	800a602 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a576:	b29b      	uxth	r3, r3
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d128      	bne.n	800a5ce <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b28      	cmp	r3, #40	; 0x28
 800a586:	d108      	bne.n	800a59a <I2C_Slave_ISR_IT+0x8c>
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a58e:	d104      	bne.n	800a59a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a590:	6939      	ldr	r1, [r7, #16]
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 ffc8 	bl	800b528 <I2C_ITListenCplt>
 800a598:	e032      	b.n	800a600 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5a0:	b2db      	uxtb	r3, r3
 800a5a2:	2b29      	cmp	r3, #41	; 0x29
 800a5a4:	d10e      	bne.n	800a5c4 <I2C_Slave_ISR_IT+0xb6>
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a5ac:	d00a      	beq.n	800a5c4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2210      	movs	r2, #16
 800a5b4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f001 f903 	bl	800b7c2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a5bc:	68f8      	ldr	r0, [r7, #12]
 800a5be:	f000 fc92 	bl	800aee6 <I2C_ITSlaveSeqCplt>
 800a5c2:	e01d      	b.n	800a600 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2210      	movs	r2, #16
 800a5ca:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a5cc:	e096      	b.n	800a6fc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2210      	movs	r2, #16
 800a5d4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5da:	f043 0204 	orr.w	r2, r3, #4
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d004      	beq.n	800a5f2 <I2C_Slave_ISR_IT+0xe4>
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a5ee:	f040 8085 	bne.w	800a6fc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	68f8      	ldr	r0, [r7, #12]
 800a5fa:	f000 ffeb 	bl	800b5d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a5fe:	e07d      	b.n	800a6fc <I2C_Slave_ISR_IT+0x1ee>
 800a600:	e07c      	b.n	800a6fc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	089b      	lsrs	r3, r3, #2
 800a606:	f003 0301 	and.w	r3, r3, #1
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d030      	beq.n	800a670 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	089b      	lsrs	r3, r3, #2
 800a612:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a616:	2b00      	cmp	r3, #0
 800a618:	d02a      	beq.n	800a670 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a61e:	b29b      	uxth	r3, r3
 800a620:	2b00      	cmp	r3, #0
 800a622:	d018      	beq.n	800a656 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	b2d2      	uxtb	r2, r2
 800a630:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	1c5a      	adds	r2, r3, #1
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a640:	3b01      	subs	r3, #1
 800a642:	b29a      	uxth	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	3b01      	subs	r3, #1
 800a650:	b29a      	uxth	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d14f      	bne.n	800a700 <I2C_Slave_ISR_IT+0x1f2>
 800a660:	697b      	ldr	r3, [r7, #20]
 800a662:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a666:	d04b      	beq.n	800a700 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f000 fc3c 	bl	800aee6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a66e:	e047      	b.n	800a700 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	08db      	lsrs	r3, r3, #3
 800a674:	f003 0301 	and.w	r3, r3, #1
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d00a      	beq.n	800a692 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	08db      	lsrs	r3, r3, #3
 800a680:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a684:	2b00      	cmp	r3, #0
 800a686:	d004      	beq.n	800a692 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a688:	6939      	ldr	r1, [r7, #16]
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f000 fb6a 	bl	800ad64 <I2C_ITAddrCplt>
 800a690:	e037      	b.n	800a702 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	085b      	lsrs	r3, r3, #1
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d031      	beq.n	800a702 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	085b      	lsrs	r3, r3, #1
 800a6a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d02b      	beq.n	800a702 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d018      	beq.n	800a6e6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b8:	781a      	ldrb	r2, [r3, #0]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	3b01      	subs	r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6dc:	3b01      	subs	r3, #1
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	851a      	strh	r2, [r3, #40]	; 0x28
 800a6e4:	e00d      	b.n	800a702 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6ec:	d002      	beq.n	800a6f4 <I2C_Slave_ISR_IT+0x1e6>
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d106      	bne.n	800a702 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f000 fbf6 	bl	800aee6 <I2C_ITSlaveSeqCplt>
 800a6fa:	e002      	b.n	800a702 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800a6fc:	bf00      	nop
 800a6fe:	e000      	b.n	800a702 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800a700:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a70a:	2300      	movs	r3, #0
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3718      	adds	r7, #24
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b088      	sub	sp, #32
 800a718:	af02      	add	r7, sp, #8
 800a71a:	60f8      	str	r0, [r7, #12]
 800a71c:	60b9      	str	r1, [r7, #8]
 800a71e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a726:	2b01      	cmp	r3, #1
 800a728:	d101      	bne.n	800a72e <I2C_Master_ISR_DMA+0x1a>
 800a72a:	2302      	movs	r3, #2
 800a72c:	e0e1      	b.n	800a8f2 <I2C_Master_ISR_DMA+0x1de>
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	091b      	lsrs	r3, r3, #4
 800a73a:	f003 0301 	and.w	r3, r3, #1
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d017      	beq.n	800a772 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	091b      	lsrs	r3, r3, #4
 800a746:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d011      	beq.n	800a772 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2210      	movs	r2, #16
 800a754:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a75a:	f043 0204 	orr.w	r2, r3, #4
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a762:	2120      	movs	r1, #32
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f001 fa0d 	bl	800bb84 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a76a:	68f8      	ldr	r0, [r7, #12]
 800a76c:	f001 f829 	bl	800b7c2 <I2C_Flush_TXDR>
 800a770:	e0ba      	b.n	800a8e8 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	09db      	lsrs	r3, r3, #7
 800a776:	f003 0301 	and.w	r3, r3, #1
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d072      	beq.n	800a864 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	099b      	lsrs	r3, r3, #6
 800a782:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a786:	2b00      	cmp	r3, #0
 800a788:	d06c      	beq.n	800a864 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a798:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d04e      	beq.n	800a842 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7b0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	2bff      	cmp	r3, #255	; 0xff
 800a7ba:	d906      	bls.n	800a7ca <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	22ff      	movs	r2, #255	; 0xff
 800a7c0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800a7c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	e010      	b.n	800a7ec <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a7dc:	d003      	beq.n	800a7e6 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7e2:	617b      	str	r3, [r7, #20]
 800a7e4:	e002      	b.n	800a7ec <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a7e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7ea:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7f0:	b2da      	uxtb	r2, r3
 800a7f2:	8a79      	ldrh	r1, [r7, #18]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f001 f990 	bl	800bb20 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a804:	b29a      	uxth	r2, r3
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a80a:	1ad3      	subs	r3, r2, r3
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	2b22      	cmp	r3, #34	; 0x22
 800a81c:	d108      	bne.n	800a830 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a82c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a82e:	e05b      	b.n	800a8e8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a83e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a840:	e052      	b.n	800a8e8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a84c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a850:	d003      	beq.n	800a85a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 fb0a 	bl	800ae6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800a858:	e046      	b.n	800a8e8 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a85a:	2140      	movs	r1, #64	; 0x40
 800a85c:	68f8      	ldr	r0, [r7, #12]
 800a85e:	f000 feb9 	bl	800b5d4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a862:	e041      	b.n	800a8e8 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	099b      	lsrs	r3, r3, #6
 800a868:	f003 0301 	and.w	r3, r3, #1
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d029      	beq.n	800a8c4 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	099b      	lsrs	r3, r3, #6
 800a874:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d023      	beq.n	800a8c4 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a880:	b29b      	uxth	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d119      	bne.n	800a8ba <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a890:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a894:	d027      	beq.n	800a8e6 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a89a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a89e:	d108      	bne.n	800a8b2 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a8ae:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a8b0:	e019      	b.n	800a8e6 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f000 fada 	bl	800ae6c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a8b8:	e015      	b.n	800a8e6 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a8ba:	2140      	movs	r1, #64	; 0x40
 800a8bc:	68f8      	ldr	r0, [r7, #12]
 800a8be:	f000 fe89 	bl	800b5d4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a8c2:	e010      	b.n	800a8e6 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	095b      	lsrs	r3, r3, #5
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d00b      	beq.n	800a8e8 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	095b      	lsrs	r3, r3, #5
 800a8d4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d005      	beq.n	800a8e8 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a8dc:	68b9      	ldr	r1, [r7, #8]
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 fb60 	bl	800afa4 <I2C_ITMasterCplt>
 800a8e4:	e000      	b.n	800a8e8 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800a8e6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3718      	adds	r7, #24
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
	...

0800a8fc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b088      	sub	sp, #32
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800a90e:	2300      	movs	r3, #0
 800a910:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d101      	bne.n	800a920 <I2C_Slave_ISR_DMA+0x24>
 800a91c:	2302      	movs	r3, #2
 800a91e:	e1c8      	b.n	800acb2 <I2C_Slave_ISR_DMA+0x3b6>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	095b      	lsrs	r3, r3, #5
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	2b00      	cmp	r3, #0
 800a932:	d009      	beq.n	800a948 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	095b      	lsrs	r3, r3, #5
 800a938:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d003      	beq.n	800a948 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	68f8      	ldr	r0, [r7, #12]
 800a944:	f000 fbf8 	bl	800b138 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	091b      	lsrs	r3, r3, #4
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 8199 	beq.w	800ac88 <I2C_Slave_ISR_DMA+0x38c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	091b      	lsrs	r3, r3, #4
 800a95a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a95e:	2b00      	cmp	r3, #0
 800a960:	f000 8192 	beq.w	800ac88 <I2C_Slave_ISR_DMA+0x38c>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	0b9b      	lsrs	r3, r3, #14
 800a968:	f003 0301 	and.w	r3, r3, #1
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d106      	bne.n	800a97e <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	0bdb      	lsrs	r3, r3, #15
 800a974:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 817e 	beq.w	800ac7a <I2C_Slave_ISR_DMA+0x37e>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a982:	2b00      	cmp	r3, #0
 800a984:	d07c      	beq.n	800aa80 <I2C_Slave_ISR_DMA+0x184>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	0bdb      	lsrs	r3, r3, #15
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d076      	beq.n	800aa80 <I2C_Slave_ISR_DMA+0x184>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a8d      	ldr	r2, [pc, #564]	; (800abd0 <I2C_Slave_ISR_DMA+0x2d4>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d059      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4a8b      	ldr	r2, [pc, #556]	; (800abd4 <I2C_Slave_ISR_DMA+0x2d8>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d053      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a89      	ldr	r2, [pc, #548]	; (800abd8 <I2C_Slave_ISR_DMA+0x2dc>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d04d      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a87      	ldr	r2, [pc, #540]	; (800abdc <I2C_Slave_ISR_DMA+0x2e0>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d047      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a85      	ldr	r2, [pc, #532]	; (800abe0 <I2C_Slave_ISR_DMA+0x2e4>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d041      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a83      	ldr	r2, [pc, #524]	; (800abe4 <I2C_Slave_ISR_DMA+0x2e8>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d03b      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4a81      	ldr	r2, [pc, #516]	; (800abe8 <I2C_Slave_ISR_DMA+0x2ec>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d035      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a7f      	ldr	r2, [pc, #508]	; (800abec <I2C_Slave_ISR_DMA+0x2f0>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d02f      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a7d      	ldr	r2, [pc, #500]	; (800abf0 <I2C_Slave_ISR_DMA+0x2f4>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d029      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	4a7b      	ldr	r2, [pc, #492]	; (800abf4 <I2C_Slave_ISR_DMA+0x2f8>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	d023      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a79      	ldr	r2, [pc, #484]	; (800abf8 <I2C_Slave_ISR_DMA+0x2fc>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d01d      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	4a77      	ldr	r2, [pc, #476]	; (800abfc <I2C_Slave_ISR_DMA+0x300>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	d017      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a75      	ldr	r2, [pc, #468]	; (800ac00 <I2C_Slave_ISR_DMA+0x304>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d011      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a73      	ldr	r2, [pc, #460]	; (800ac04 <I2C_Slave_ISR_DMA+0x308>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d00b      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a71      	ldr	r2, [pc, #452]	; (800ac08 <I2C_Slave_ISR_DMA+0x30c>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d005      	beq.n	800aa52 <I2C_Slave_ISR_DMA+0x156>
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	4a6f      	ldr	r2, [pc, #444]	; (800ac0c <I2C_Slave_ISR_DMA+0x310>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d109      	bne.n	800aa66 <I2C_Slave_ISR_DMA+0x16a>
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	bf0c      	ite	eq
 800aa5e:	2301      	moveq	r3, #1
 800aa60:	2300      	movne	r3, #0
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	e008      	b.n	800aa78 <I2C_Slave_ISR_DMA+0x17c>
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	bf0c      	ite	eq
 800aa72:	2301      	moveq	r3, #1
 800aa74:	2300      	movne	r3, #0
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <I2C_Slave_ISR_DMA+0x184>
          {
            treatdmanack = 1U;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d07c      	beq.n	800ab82 <I2C_Slave_ISR_DMA+0x286>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	0b9b      	lsrs	r3, r3, #14
 800aa8c:	f003 0301 	and.w	r3, r3, #1
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d076      	beq.n	800ab82 <I2C_Slave_ISR_DMA+0x286>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a4d      	ldr	r2, [pc, #308]	; (800abd0 <I2C_Slave_ISR_DMA+0x2d4>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d059      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a4b      	ldr	r2, [pc, #300]	; (800abd4 <I2C_Slave_ISR_DMA+0x2d8>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d053      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a49      	ldr	r2, [pc, #292]	; (800abd8 <I2C_Slave_ISR_DMA+0x2dc>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d04d      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a47      	ldr	r2, [pc, #284]	; (800abdc <I2C_Slave_ISR_DMA+0x2e0>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d047      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a45      	ldr	r2, [pc, #276]	; (800abe0 <I2C_Slave_ISR_DMA+0x2e4>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d041      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	4a43      	ldr	r2, [pc, #268]	; (800abe4 <I2C_Slave_ISR_DMA+0x2e8>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d03b      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a41      	ldr	r2, [pc, #260]	; (800abe8 <I2C_Slave_ISR_DMA+0x2ec>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d035      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a3f      	ldr	r2, [pc, #252]	; (800abec <I2C_Slave_ISR_DMA+0x2f0>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d02f      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a3d      	ldr	r2, [pc, #244]	; (800abf0 <I2C_Slave_ISR_DMA+0x2f4>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d029      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a3b      	ldr	r2, [pc, #236]	; (800abf4 <I2C_Slave_ISR_DMA+0x2f8>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d023      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a39      	ldr	r2, [pc, #228]	; (800abf8 <I2C_Slave_ISR_DMA+0x2fc>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d01d      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a37      	ldr	r2, [pc, #220]	; (800abfc <I2C_Slave_ISR_DMA+0x300>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d017      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a35      	ldr	r2, [pc, #212]	; (800ac00 <I2C_Slave_ISR_DMA+0x304>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d011      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a33      	ldr	r2, [pc, #204]	; (800ac04 <I2C_Slave_ISR_DMA+0x308>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d00b      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a31      	ldr	r2, [pc, #196]	; (800ac08 <I2C_Slave_ISR_DMA+0x30c>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d005      	beq.n	800ab54 <I2C_Slave_ISR_DMA+0x258>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a2f      	ldr	r2, [pc, #188]	; (800ac0c <I2C_Slave_ISR_DMA+0x310>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d109      	bne.n	800ab68 <I2C_Slave_ISR_DMA+0x26c>
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	685b      	ldr	r3, [r3, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	bf0c      	ite	eq
 800ab60:	2301      	moveq	r3, #1
 800ab62:	2300      	movne	r3, #0
 800ab64:	b2db      	uxtb	r3, r3
 800ab66:	e008      	b.n	800ab7a <I2C_Slave_ISR_DMA+0x27e>
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	bf0c      	ite	eq
 800ab74:	2301      	moveq	r3, #1
 800ab76:	2300      	movne	r3, #0
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d001      	beq.n	800ab82 <I2C_Slave_ISR_DMA+0x286>
          {
            treatdmanack = 1U;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	2b01      	cmp	r3, #1
 800ab86:	d148      	bne.n	800ac1a <I2C_Slave_ISR_DMA+0x31e>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b28      	cmp	r3, #40	; 0x28
 800ab92:	d108      	bne.n	800aba6 <I2C_Slave_ISR_DMA+0x2aa>
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab9a:	d104      	bne.n	800aba6 <I2C_Slave_ISR_DMA+0x2aa>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800ab9c:	68b9      	ldr	r1, [r7, #8]
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f000 fcc2 	bl	800b528 <I2C_ITListenCplt>
 800aba4:	e068      	b.n	800ac78 <I2C_Slave_ISR_DMA+0x37c>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b29      	cmp	r3, #41	; 0x29
 800abb0:	d12e      	bne.n	800ac10 <I2C_Slave_ISR_DMA+0x314>
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800abb8:	d02a      	beq.n	800ac10 <I2C_Slave_ISR_DMA+0x314>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2210      	movs	r2, #16
 800abc0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 fdfd 	bl	800b7c2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800abc8:	68f8      	ldr	r0, [r7, #12]
 800abca:	f000 f98c 	bl	800aee6 <I2C_ITSlaveSeqCplt>
 800abce:	e053      	b.n	800ac78 <I2C_Slave_ISR_DMA+0x37c>
 800abd0:	40020010 	.word	0x40020010
 800abd4:	40020028 	.word	0x40020028
 800abd8:	40020040 	.word	0x40020040
 800abdc:	40020058 	.word	0x40020058
 800abe0:	40020070 	.word	0x40020070
 800abe4:	40020088 	.word	0x40020088
 800abe8:	400200a0 	.word	0x400200a0
 800abec:	400200b8 	.word	0x400200b8
 800abf0:	40020410 	.word	0x40020410
 800abf4:	40020428 	.word	0x40020428
 800abf8:	40020440 	.word	0x40020440
 800abfc:	40020458 	.word	0x40020458
 800ac00:	40020470 	.word	0x40020470
 800ac04:	40020488 	.word	0x40020488
 800ac08:	400204a0 	.word	0x400204a0
 800ac0c:	400204b8 	.word	0x400204b8
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2210      	movs	r2, #16
 800ac16:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800ac18:	e034      	b.n	800ac84 <I2C_Slave_ISR_DMA+0x388>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2210      	movs	r2, #16
 800ac20:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac26:	f043 0204 	orr.w	r2, r3, #4
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac34:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <I2C_Slave_ISR_DMA+0x348>
 800ac3c:	69bb      	ldr	r3, [r7, #24]
 800ac3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ac42:	d11f      	bne.n	800ac84 <I2C_Slave_ISR_DMA+0x388>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ac44:	7dfb      	ldrb	r3, [r7, #23]
 800ac46:	2b21      	cmp	r3, #33	; 0x21
 800ac48:	d002      	beq.n	800ac50 <I2C_Slave_ISR_DMA+0x354>
 800ac4a:	7dfb      	ldrb	r3, [r7, #23]
 800ac4c:	2b29      	cmp	r3, #41	; 0x29
 800ac4e:	d103      	bne.n	800ac58 <I2C_Slave_ISR_DMA+0x35c>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2221      	movs	r2, #33	; 0x21
 800ac54:	631a      	str	r2, [r3, #48]	; 0x30
 800ac56:	e008      	b.n	800ac6a <I2C_Slave_ISR_DMA+0x36e>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	2b22      	cmp	r3, #34	; 0x22
 800ac5c:	d002      	beq.n	800ac64 <I2C_Slave_ISR_DMA+0x368>
 800ac5e:	7dfb      	ldrb	r3, [r7, #23]
 800ac60:	2b2a      	cmp	r3, #42	; 0x2a
 800ac62:	d102      	bne.n	800ac6a <I2C_Slave_ISR_DMA+0x36e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2222      	movs	r2, #34	; 0x22
 800ac68:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac6e:	4619      	mov	r1, r3
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 fcaf 	bl	800b5d4 <I2C_ITError>
      if (treatdmanack == 1U)
 800ac76:	e005      	b.n	800ac84 <I2C_Slave_ISR_DMA+0x388>
 800ac78:	e004      	b.n	800ac84 <I2C_Slave_ISR_DMA+0x388>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2210      	movs	r2, #16
 800ac80:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ac82:	e011      	b.n	800aca8 <I2C_Slave_ISR_DMA+0x3ac>
      if (treatdmanack == 1U)
 800ac84:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800ac86:	e00f      	b.n	800aca8 <I2C_Slave_ISR_DMA+0x3ac>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	08db      	lsrs	r3, r3, #3
 800ac8c:	f003 0301 	and.w	r3, r3, #1
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d009      	beq.n	800aca8 <I2C_Slave_ISR_DMA+0x3ac>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	08db      	lsrs	r3, r3, #3
 800ac98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <I2C_Slave_ISR_DMA+0x3ac>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800aca0:	68b9      	ldr	r1, [r7, #8]
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f000 f85e 	bl	800ad64 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3720      	adds	r7, #32
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop

0800acbc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b086      	sub	sp, #24
 800acc0:	af02      	add	r7, sp, #8
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	4608      	mov	r0, r1
 800acc6:	4611      	mov	r1, r2
 800acc8:	461a      	mov	r2, r3
 800acca:	4603      	mov	r3, r0
 800accc:	817b      	strh	r3, [r7, #10]
 800acce:	460b      	mov	r3, r1
 800acd0:	813b      	strh	r3, [r7, #8]
 800acd2:	4613      	mov	r3, r2
 800acd4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800acd6:	88fb      	ldrh	r3, [r7, #6]
 800acd8:	b2da      	uxtb	r2, r3
 800acda:	8979      	ldrh	r1, [r7, #10]
 800acdc:	4b20      	ldr	r3, [pc, #128]	; (800ad60 <I2C_RequestMemoryRead+0xa4>)
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	2300      	movs	r3, #0
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f000 ff1c 	bl	800bb20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ace8:	69fa      	ldr	r2, [r7, #28]
 800acea:	69b9      	ldr	r1, [r7, #24]
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f000 fdea 	bl	800b8c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800acf2:	4603      	mov	r3, r0
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d001      	beq.n	800acfc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800acf8:	2301      	movs	r3, #1
 800acfa:	e02c      	b.n	800ad56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800acfc:	88fb      	ldrh	r3, [r7, #6]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d105      	bne.n	800ad0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad02:	893b      	ldrh	r3, [r7, #8]
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	629a      	str	r2, [r3, #40]	; 0x28
 800ad0c:	e015      	b.n	800ad3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ad0e:	893b      	ldrh	r3, [r7, #8]
 800ad10:	0a1b      	lsrs	r3, r3, #8
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	b2da      	uxtb	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad1c:	69fa      	ldr	r2, [r7, #28]
 800ad1e:	69b9      	ldr	r1, [r7, #24]
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f000 fdd0 	bl	800b8c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d001      	beq.n	800ad30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e012      	b.n	800ad56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad30:	893b      	ldrh	r3, [r7, #8]
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ad3a:	69fb      	ldr	r3, [r7, #28]
 800ad3c:	9300      	str	r3, [sp, #0]
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	2200      	movs	r2, #0
 800ad42:	2140      	movs	r1, #64	; 0x40
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f000 fd7e 	bl	800b846 <I2C_WaitOnFlagUntilTimeout>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d001      	beq.n	800ad54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ad50:	2301      	movs	r3, #1
 800ad52:	e000      	b.n	800ad56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3710      	adds	r7, #16
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	80002000 	.word	0x80002000

0800ad64 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b084      	sub	sp, #16
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800ad7a:	2b28      	cmp	r3, #40	; 0x28
 800ad7c:	d16a      	bne.n	800ae54 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	0c1b      	lsrs	r3, r3, #16
 800ad86:	b2db      	uxtb	r3, r3
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	699b      	ldr	r3, [r3, #24]
 800ad94:	0c1b      	lsrs	r3, r3, #16
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ad9c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800adaa:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800adb8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d138      	bne.n	800ae34 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800adc2:	897b      	ldrh	r3, [r7, #10]
 800adc4:	09db      	lsrs	r3, r3, #7
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	89bb      	ldrh	r3, [r7, #12]
 800adca:	4053      	eors	r3, r2
 800adcc:	b29b      	uxth	r3, r3
 800adce:	f003 0306 	and.w	r3, r3, #6
 800add2:	2b00      	cmp	r3, #0
 800add4:	d11c      	bne.n	800ae10 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800add6:	897b      	ldrh	r3, [r7, #10]
 800add8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d13b      	bne.n	800ae64 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2208      	movs	r2, #8
 800adf8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ae02:	89ba      	ldrh	r2, [r7, #12]
 800ae04:	7bfb      	ldrb	r3, [r7, #15]
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7ff fa18 	bl	800a23e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800ae0e:	e029      	b.n	800ae64 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800ae10:	893b      	ldrh	r3, [r7, #8]
 800ae12:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ae14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 ff17 	bl	800bc4c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2200      	movs	r2, #0
 800ae22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ae26:	89ba      	ldrh	r2, [r7, #12]
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff fa06 	bl	800a23e <HAL_I2C_AddrCallback>
}
 800ae32:	e017      	b.n	800ae64 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800ae34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 ff07 	bl	800bc4c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2200      	movs	r2, #0
 800ae42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ae46:	89ba      	ldrh	r2, [r7, #12]
 800ae48:	7bfb      	ldrb	r3, [r7, #15]
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f7ff f9f6 	bl	800a23e <HAL_I2C_AddrCallback>
}
 800ae52:	e007      	b.n	800ae64 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2208      	movs	r2, #8
 800ae5a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800ae64:	bf00      	nop
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2200      	movs	r2, #0
 800ae78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	2b21      	cmp	r3, #33	; 0x21
 800ae86:	d115      	bne.n	800aeb4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2220      	movs	r2, #32
 800ae8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2211      	movs	r2, #17
 800ae94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ae9c:	2101      	movs	r1, #1
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 fed4 	bl	800bc4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff f99e 	bl	800a1ee <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aeb2:	e014      	b.n	800aede <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2220      	movs	r2, #32
 800aeb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2212      	movs	r2, #18
 800aec0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2200      	movs	r2, #0
 800aec6:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800aec8:	2102      	movs	r1, #2
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 febe 	bl	800bc4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f7ff f992 	bl	800a202 <HAL_I2C_MasterRxCpltCallback>
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	0b9b      	lsrs	r3, r3, #14
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d008      	beq.n	800af1c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681a      	ldr	r2, [r3, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af18:	601a      	str	r2, [r3, #0]
 800af1a:	e00d      	b.n	800af38 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	0bdb      	lsrs	r3, r3, #15
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	2b00      	cmp	r3, #0
 800af26:	d007      	beq.n	800af38 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800af36:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	2b29      	cmp	r3, #41	; 0x29
 800af42:	d112      	bne.n	800af6a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2228      	movs	r2, #40	; 0x28
 800af48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2221      	movs	r2, #33	; 0x21
 800af50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800af52:	2101      	movs	r1, #1
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fe79 	bl	800bc4c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff f957 	bl	800a216 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800af68:	e017      	b.n	800af9a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b2a      	cmp	r3, #42	; 0x2a
 800af74:	d111      	bne.n	800af9a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2228      	movs	r2, #40	; 0x28
 800af7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2222      	movs	r2, #34	; 0x22
 800af82:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800af84:	2102      	movs	r1, #2
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fe60 	bl	800bc4c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7ff f948 	bl	800a22a <HAL_I2C_SlaveRxCpltCallback>
}
 800af9a:	bf00      	nop
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
	...

0800afa4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b086      	sub	sp, #24
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2220      	movs	r2, #32
 800afb8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	2b21      	cmp	r3, #33	; 0x21
 800afc4:	d107      	bne.n	800afd6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800afc6:	2101      	movs	r1, #1
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 fe3f 	bl	800bc4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2211      	movs	r2, #17
 800afd2:	631a      	str	r2, [r3, #48]	; 0x30
 800afd4:	e00c      	b.n	800aff0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b22      	cmp	r3, #34	; 0x22
 800afe0:	d106      	bne.n	800aff0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800afe2:	2102      	movs	r1, #2
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 fe31 	bl	800bc4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2212      	movs	r2, #18
 800afee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	6859      	ldr	r1, [r3, #4]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4b4d      	ldr	r3, [pc, #308]	; (800b130 <I2C_ITMasterCplt+0x18c>)
 800affc:	400b      	ands	r3, r1
 800affe:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	4a4a      	ldr	r2, [pc, #296]	; (800b134 <I2C_ITMasterCplt+0x190>)
 800b00a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	091b      	lsrs	r3, r3, #4
 800b010:	f003 0301 	and.w	r3, r3, #1
 800b014:	2b00      	cmp	r3, #0
 800b016:	d009      	beq.n	800b02c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2210      	movs	r2, #16
 800b01e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b024:	f043 0204 	orr.w	r2, r3, #4
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b032:	b2db      	uxtb	r3, r3
 800b034:	2b60      	cmp	r3, #96	; 0x60
 800b036:	d10b      	bne.n	800b050 <I2C_ITMasterCplt+0xac>
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	089b      	lsrs	r3, r3, #2
 800b03c:	f003 0301 	and.w	r3, r3, #1
 800b040:	2b00      	cmp	r3, #0
 800b042:	d005      	beq.n	800b050 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800b04e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f000 fbb6 	bl	800b7c2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b05a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b062:	b2db      	uxtb	r3, r3
 800b064:	2b60      	cmp	r3, #96	; 0x60
 800b066:	d002      	beq.n	800b06e <I2C_ITMasterCplt+0xca>
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d006      	beq.n	800b07c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 faad 	bl	800b5d4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b07a:	e054      	b.n	800b126 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b082:	b2db      	uxtb	r3, r3
 800b084:	2b21      	cmp	r3, #33	; 0x21
 800b086:	d124      	bne.n	800b0d2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2220      	movs	r2, #32
 800b08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	2b40      	cmp	r3, #64	; 0x40
 800b0a0:	d10b      	bne.n	800b0ba <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff f8db 	bl	800a26e <HAL_I2C_MemTxCpltCallback>
}
 800b0b8:	e035      	b.n	800b126 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7ff f88f 	bl	800a1ee <HAL_I2C_MasterTxCpltCallback>
}
 800b0d0:	e029      	b.n	800b126 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	2b22      	cmp	r3, #34	; 0x22
 800b0dc:	d123      	bne.n	800b126 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2220      	movs	r2, #32
 800b0e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b0f2:	b2db      	uxtb	r3, r3
 800b0f4:	2b40      	cmp	r3, #64	; 0x40
 800b0f6:	d10b      	bne.n	800b110 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f7ff f8ba 	bl	800a282 <HAL_I2C_MemRxCpltCallback>
}
 800b10e:	e00a      	b.n	800b126 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7ff f86e 	bl	800a202 <HAL_I2C_MasterRxCpltCallback>
}
 800b126:	bf00      	nop
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	fe00e800 	.word	0xfe00e800
 800b134:	ffff0000 	.word	0xffff0000

0800b138 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b154:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2220      	movs	r2, #32
 800b15c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b15e:	7bfb      	ldrb	r3, [r7, #15]
 800b160:	2b21      	cmp	r3, #33	; 0x21
 800b162:	d002      	beq.n	800b16a <I2C_ITSlaveCplt+0x32>
 800b164:	7bfb      	ldrb	r3, [r7, #15]
 800b166:	2b29      	cmp	r3, #41	; 0x29
 800b168:	d108      	bne.n	800b17c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b16a:	f248 0101 	movw	r1, #32769	; 0x8001
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fd6c 	bl	800bc4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2221      	movs	r2, #33	; 0x21
 800b178:	631a      	str	r2, [r3, #48]	; 0x30
 800b17a:	e00d      	b.n	800b198 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b17c:	7bfb      	ldrb	r3, [r7, #15]
 800b17e:	2b22      	cmp	r3, #34	; 0x22
 800b180:	d002      	beq.n	800b188 <I2C_ITSlaveCplt+0x50>
 800b182:	7bfb      	ldrb	r3, [r7, #15]
 800b184:	2b2a      	cmp	r3, #42	; 0x2a
 800b186:	d107      	bne.n	800b198 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b188:	f248 0102 	movw	r1, #32770	; 0x8002
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 fd5d 	bl	800bc4c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2222      	movs	r2, #34	; 0x22
 800b196:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	685a      	ldr	r2, [r3, #4]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b1a6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6859      	ldr	r1, [r3, #4]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	4b80      	ldr	r3, [pc, #512]	; (800b3b4 <I2C_ITSlaveCplt+0x27c>)
 800b1b4:	400b      	ands	r3, r1
 800b1b6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 fb02 	bl	800b7c2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	0b9b      	lsrs	r3, r3, #14
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d07a      	beq.n	800b2c0 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b1d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 8111 	beq.w	800b406 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a73      	ldr	r2, [pc, #460]	; (800b3b8 <I2C_ITSlaveCplt+0x280>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d059      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	4a71      	ldr	r2, [pc, #452]	; (800b3bc <I2C_ITSlaveCplt+0x284>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d053      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4a6f      	ldr	r2, [pc, #444]	; (800b3c0 <I2C_ITSlaveCplt+0x288>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d04d      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a6d      	ldr	r2, [pc, #436]	; (800b3c4 <I2C_ITSlaveCplt+0x28c>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d047      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a6b      	ldr	r2, [pc, #428]	; (800b3c8 <I2C_ITSlaveCplt+0x290>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d041      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a69      	ldr	r2, [pc, #420]	; (800b3cc <I2C_ITSlaveCplt+0x294>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d03b      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a67      	ldr	r2, [pc, #412]	; (800b3d0 <I2C_ITSlaveCplt+0x298>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d035      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a65      	ldr	r2, [pc, #404]	; (800b3d4 <I2C_ITSlaveCplt+0x29c>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d02f      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a63      	ldr	r2, [pc, #396]	; (800b3d8 <I2C_ITSlaveCplt+0x2a0>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d029      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a61      	ldr	r2, [pc, #388]	; (800b3dc <I2C_ITSlaveCplt+0x2a4>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d023      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a5f      	ldr	r2, [pc, #380]	; (800b3e0 <I2C_ITSlaveCplt+0x2a8>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d01d      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a5d      	ldr	r2, [pc, #372]	; (800b3e4 <I2C_ITSlaveCplt+0x2ac>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d017      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a5b      	ldr	r2, [pc, #364]	; (800b3e8 <I2C_ITSlaveCplt+0x2b0>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d011      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a59      	ldr	r2, [pc, #356]	; (800b3ec <I2C_ITSlaveCplt+0x2b4>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d00b      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a57      	ldr	r2, [pc, #348]	; (800b3f0 <I2C_ITSlaveCplt+0x2b8>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d005      	beq.n	800b2a4 <I2C_ITSlaveCplt+0x16c>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a55      	ldr	r2, [pc, #340]	; (800b3f4 <I2C_ITSlaveCplt+0x2bc>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d105      	bne.n	800b2b0 <I2C_ITSlaveCplt+0x178>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	e004      	b.n	800b2ba <I2C_ITSlaveCplt+0x182>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	8553      	strh	r3, [r2, #42]	; 0x2a
 800b2be:	e0a2      	b.n	800b406 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	0bdb      	lsrs	r3, r3, #15
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f000 809c 	beq.w	800b406 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b2dc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f000 808f 	beq.w	800b406 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a32      	ldr	r2, [pc, #200]	; (800b3b8 <I2C_ITSlaveCplt+0x280>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d059      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a30      	ldr	r2, [pc, #192]	; (800b3bc <I2C_ITSlaveCplt+0x284>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d053      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a2e      	ldr	r2, [pc, #184]	; (800b3c0 <I2C_ITSlaveCplt+0x288>)
 800b308:	4293      	cmp	r3, r2
 800b30a:	d04d      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a2c      	ldr	r2, [pc, #176]	; (800b3c4 <I2C_ITSlaveCplt+0x28c>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d047      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a2a      	ldr	r2, [pc, #168]	; (800b3c8 <I2C_ITSlaveCplt+0x290>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d041      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a28      	ldr	r2, [pc, #160]	; (800b3cc <I2C_ITSlaveCplt+0x294>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d03b      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a26      	ldr	r2, [pc, #152]	; (800b3d0 <I2C_ITSlaveCplt+0x298>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d035      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4a24      	ldr	r2, [pc, #144]	; (800b3d4 <I2C_ITSlaveCplt+0x29c>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d02f      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a22      	ldr	r2, [pc, #136]	; (800b3d8 <I2C_ITSlaveCplt+0x2a0>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d029      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	4a20      	ldr	r2, [pc, #128]	; (800b3dc <I2C_ITSlaveCplt+0x2a4>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d023      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a1e      	ldr	r2, [pc, #120]	; (800b3e0 <I2C_ITSlaveCplt+0x2a8>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d01d      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4a1c      	ldr	r2, [pc, #112]	; (800b3e4 <I2C_ITSlaveCplt+0x2ac>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d017      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	4a1a      	ldr	r2, [pc, #104]	; (800b3e8 <I2C_ITSlaveCplt+0x2b0>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d011      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a18      	ldr	r2, [pc, #96]	; (800b3ec <I2C_ITSlaveCplt+0x2b4>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d00b      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	4a16      	ldr	r2, [pc, #88]	; (800b3f0 <I2C_ITSlaveCplt+0x2b8>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d005      	beq.n	800b3a8 <I2C_ITSlaveCplt+0x270>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a14      	ldr	r2, [pc, #80]	; (800b3f4 <I2C_ITSlaveCplt+0x2bc>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d127      	bne.n	800b3f8 <I2C_ITSlaveCplt+0x2c0>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	b29b      	uxth	r3, r3
 800b3b2:	e026      	b.n	800b402 <I2C_ITSlaveCplt+0x2ca>
 800b3b4:	fe00e800 	.word	0xfe00e800
 800b3b8:	40020010 	.word	0x40020010
 800b3bc:	40020028 	.word	0x40020028
 800b3c0:	40020040 	.word	0x40020040
 800b3c4:	40020058 	.word	0x40020058
 800b3c8:	40020070 	.word	0x40020070
 800b3cc:	40020088 	.word	0x40020088
 800b3d0:	400200a0 	.word	0x400200a0
 800b3d4:	400200b8 	.word	0x400200b8
 800b3d8:	40020410 	.word	0x40020410
 800b3dc:	40020428 	.word	0x40020428
 800b3e0:	40020440 	.word	0x40020440
 800b3e4:	40020458 	.word	0x40020458
 800b3e8:	40020470 	.word	0x40020470
 800b3ec:	40020488 	.word	0x40020488
 800b3f0:	400204a0 	.word	0x400204a0
 800b3f4:	400204b8 	.word	0x400204b8
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	b29b      	uxth	r3, r3
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	089b      	lsrs	r3, r3, #2
 800b40a:	f003 0301 	and.w	r3, r3, #1
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d020      	beq.n	800b454 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	f023 0304 	bic.w	r3, r3, #4
 800b418:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00c      	beq.n	800b454 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b43e:	3b01      	subs	r3, #1
 800b440:	b29a      	uxth	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	3b01      	subs	r3, #1
 800b44e:	b29a      	uxth	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b458:	b29b      	uxth	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d005      	beq.n	800b46a <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b462:	f043 0204 	orr.w	r2, r3, #4
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d010      	beq.n	800b4a2 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b484:	4619      	mov	r1, r3
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 f8a4 	bl	800b5d4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b28      	cmp	r3, #40	; 0x28
 800b496:	d141      	bne.n	800b51c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b498:	6979      	ldr	r1, [r7, #20]
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f844 	bl	800b528 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b4a0:	e03c      	b.n	800b51c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b4aa:	d014      	beq.n	800b4d6 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7ff fd1a 	bl	800aee6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	4a1b      	ldr	r2, [pc, #108]	; (800b524 <I2C_ITSlaveCplt+0x3ec>)
 800b4b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2220      	movs	r2, #32
 800b4bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	f7fe fec3 	bl	800a25a <HAL_I2C_ListenCpltCallback>
}
 800b4d4:	e022      	b.n	800b51c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b22      	cmp	r3, #34	; 0x22
 800b4e0:	d10e      	bne.n	800b500 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2220      	movs	r2, #32
 800b4e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f7fe fe96 	bl	800a22a <HAL_I2C_SlaveRxCpltCallback>
}
 800b4fe:	e00d      	b.n	800b51c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2220      	movs	r2, #32
 800b504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7fe fe7d 	bl	800a216 <HAL_I2C_SlaveTxCpltCallback>
}
 800b51c:	bf00      	nop
 800b51e:	3718      	adds	r7, #24
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}
 800b524:	ffff0000 	.word	0xffff0000

0800b528 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4a26      	ldr	r2, [pc, #152]	; (800b5d0 <I2C_ITListenCplt+0xa8>)
 800b536:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2220      	movs	r2, #32
 800b542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	089b      	lsrs	r3, r3, #2
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d022      	beq.n	800b5a6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56a:	b2d2      	uxtb	r2, r2
 800b56c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d012      	beq.n	800b5a6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b584:	3b01      	subs	r3, #1
 800b586:	b29a      	uxth	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b590:	b29b      	uxth	r3, r3
 800b592:	3b01      	subs	r3, #1
 800b594:	b29a      	uxth	r2, r3
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b59e:	f043 0204 	orr.w	r2, r3, #4
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b5a6:	f248 0103 	movw	r1, #32771	; 0x8003
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f000 fb4e 	bl	800bc4c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2210      	movs	r2, #16
 800b5b6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f7fe fe4a 	bl	800a25a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b5c6:	bf00      	nop
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	ffff0000 	.word	0xffff0000

0800b5d4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	4a5d      	ldr	r2, [pc, #372]	; (800b768 <I2C_ITError+0x194>)
 800b5f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b606:	7bfb      	ldrb	r3, [r7, #15]
 800b608:	2b28      	cmp	r3, #40	; 0x28
 800b60a:	d005      	beq.n	800b618 <I2C_ITError+0x44>
 800b60c:	7bfb      	ldrb	r3, [r7, #15]
 800b60e:	2b29      	cmp	r3, #41	; 0x29
 800b610:	d002      	beq.n	800b618 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b612:	7bfb      	ldrb	r3, [r7, #15]
 800b614:	2b2a      	cmp	r3, #42	; 0x2a
 800b616:	d10b      	bne.n	800b630 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b618:	2103      	movs	r1, #3
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 fb16 	bl	800bc4c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2228      	movs	r2, #40	; 0x28
 800b624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a50      	ldr	r2, [pc, #320]	; (800b76c <I2C_ITError+0x198>)
 800b62c:	635a      	str	r2, [r3, #52]	; 0x34
 800b62e:	e011      	b.n	800b654 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b630:	f248 0103 	movw	r1, #32771	; 0x8003
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f000 fb09 	bl	800bc4c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b640:	b2db      	uxtb	r3, r3
 800b642:	2b60      	cmp	r3, #96	; 0x60
 800b644:	d003      	beq.n	800b64e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2220      	movs	r2, #32
 800b64a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b658:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d039      	beq.n	800b6d6 <I2C_ITError+0x102>
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	2b11      	cmp	r3, #17
 800b666:	d002      	beq.n	800b66e <I2C_ITError+0x9a>
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	2b21      	cmp	r3, #33	; 0x21
 800b66c:	d133      	bne.n	800b6d6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b67c:	d107      	bne.n	800b68e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b68c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b692:	4618      	mov	r0, r3
 800b694:	f7fd fffe 	bl	8009694 <HAL_DMA_GetState>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d017      	beq.n	800b6ce <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a2:	4a33      	ldr	r2, [pc, #204]	; (800b770 <I2C_ITError+0x19c>)
 800b6a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fc fe80 	bl	80083b8 <HAL_DMA_Abort_IT>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d04d      	beq.n	800b75a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b6cc:	e045      	b.n	800b75a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f850 	bl	800b774 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b6d4:	e041      	b.n	800b75a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d039      	beq.n	800b752 <I2C_ITError+0x17e>
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	2b12      	cmp	r3, #18
 800b6e2:	d002      	beq.n	800b6ea <I2C_ITError+0x116>
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b22      	cmp	r3, #34	; 0x22
 800b6e8:	d133      	bne.n	800b752 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b6f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6f8:	d107      	bne.n	800b70a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b708:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fd ffc0 	bl	8009694 <HAL_DMA_GetState>
 800b714:	4603      	mov	r3, r0
 800b716:	2b01      	cmp	r3, #1
 800b718:	d017      	beq.n	800b74a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b71e:	4a14      	ldr	r2, [pc, #80]	; (800b770 <I2C_ITError+0x19c>)
 800b720:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fc fe42 	bl	80083b8 <HAL_DMA_Abort_IT>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d011      	beq.n	800b75e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b73e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b744:	4610      	mov	r0, r2
 800b746:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b748:	e009      	b.n	800b75e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f812 	bl	800b774 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b750:	e005      	b.n	800b75e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 f80e 	bl	800b774 <I2C_TreatErrorCallback>
  }
}
 800b758:	e002      	b.n	800b760 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b75a:	bf00      	nop
 800b75c:	e000      	b.n	800b760 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b75e:	bf00      	nop
}
 800b760:	bf00      	nop
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	ffff0000 	.word	0xffff0000
 800b76c:	0800a50f 	.word	0x0800a50f
 800b770:	0800b80b 	.word	0x0800b80b

0800b774 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b782:	b2db      	uxtb	r3, r3
 800b784:	2b60      	cmp	r3, #96	; 0x60
 800b786:	d10e      	bne.n	800b7a6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2220      	movs	r2, #32
 800b78c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7fe fd83 	bl	800a2aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b7a4:	e009      	b.n	800b7ba <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f7fe fd6e 	bl	800a296 <HAL_I2C_ErrorCallback>
}
 800b7ba:	bf00      	nop
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b083      	sub	sp, #12
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	f003 0302 	and.w	r3, r3, #2
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d103      	bne.n	800b7e0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	f003 0301 	and.w	r3, r3, #1
 800b7ea:	2b01      	cmp	r3, #1
 800b7ec:	d007      	beq.n	800b7fe <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	699a      	ldr	r2, [r3, #24]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f042 0201 	orr.w	r2, r2, #1
 800b7fc:	619a      	str	r2, [r3, #24]
  }
}
 800b7fe:	bf00      	nop
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b084      	sub	sp, #16
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d003      	beq.n	800b828 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b824:	2200      	movs	r2, #0
 800b826:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d003      	beq.n	800b838 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b834:	2200      	movs	r2, #0
 800b836:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f7ff ff9b 	bl	800b774 <I2C_TreatErrorCallback>
}
 800b83e:	bf00      	nop
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b084      	sub	sp, #16
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	60f8      	str	r0, [r7, #12]
 800b84e:	60b9      	str	r1, [r7, #8]
 800b850:	603b      	str	r3, [r7, #0]
 800b852:	4613      	mov	r3, r2
 800b854:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b856:	e022      	b.n	800b89e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b85e:	d01e      	beq.n	800b89e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b860:	f7f9 fbb0 	bl	8004fc4 <HAL_GetTick>
 800b864:	4602      	mov	r2, r0
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d302      	bcc.n	800b876 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d113      	bne.n	800b89e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b87a:	f043 0220 	orr.w	r2, r3, #32
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2220      	movs	r2, #32
 800b886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2200      	movs	r2, #0
 800b88e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2200      	movs	r2, #0
 800b896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b89a:	2301      	movs	r3, #1
 800b89c:	e00f      	b.n	800b8be <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	699a      	ldr	r2, [r3, #24]
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	bf0c      	ite	eq
 800b8ae:	2301      	moveq	r3, #1
 800b8b0:	2300      	movne	r3, #0
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	79fb      	ldrb	r3, [r7, #7]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d0cd      	beq.n	800b858 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
}
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b084      	sub	sp, #16
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	60f8      	str	r0, [r7, #12]
 800b8ce:	60b9      	str	r1, [r7, #8]
 800b8d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b8d2:	e02c      	b.n	800b92e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	68b9      	ldr	r1, [r7, #8]
 800b8d8:	68f8      	ldr	r0, [r7, #12]
 800b8da:	f000 f835 	bl	800b948 <I2C_IsErrorOccurred>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	e02a      	b.n	800b93e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8ee:	d01e      	beq.n	800b92e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8f0:	f7f9 fb68 	bl	8004fc4 <HAL_GetTick>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d302      	bcc.n	800b906 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d113      	bne.n	800b92e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b90a:	f043 0220 	orr.w	r2, r3, #32
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2220      	movs	r2, #32
 800b916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e007      	b.n	800b93e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	f003 0302 	and.w	r3, r3, #2
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d1cb      	bne.n	800b8d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
	...

0800b948 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b08a      	sub	sp, #40	; 0x28
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	60f8      	str	r0, [r7, #12]
 800b950:	60b9      	str	r1, [r7, #8]
 800b952:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b954:	2300      	movs	r3, #0
 800b956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	699b      	ldr	r3, [r3, #24]
 800b960:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b962:	2300      	movs	r3, #0
 800b964:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	f003 0310 	and.w	r3, r3, #16
 800b970:	2b00      	cmp	r3, #0
 800b972:	d075      	beq.n	800ba60 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2210      	movs	r2, #16
 800b97a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b97c:	e056      	b.n	800ba2c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b984:	d052      	beq.n	800ba2c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b986:	f7f9 fb1d 	bl	8004fc4 <HAL_GetTick>
 800b98a:	4602      	mov	r2, r0
 800b98c:	69fb      	ldr	r3, [r7, #28]
 800b98e:	1ad3      	subs	r3, r2, r3
 800b990:	68ba      	ldr	r2, [r7, #8]
 800b992:	429a      	cmp	r2, r3
 800b994:	d302      	bcc.n	800b99c <I2C_IsErrorOccurred+0x54>
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d147      	bne.n	800ba2c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b9a6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b9ae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	699b      	ldr	r3, [r3, #24]
 800b9b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9be:	d12e      	bne.n	800ba1e <I2C_IsErrorOccurred+0xd6>
 800b9c0:	697b      	ldr	r3, [r7, #20]
 800b9c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9c6:	d02a      	beq.n	800ba1e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800b9c8:	7cfb      	ldrb	r3, [r7, #19]
 800b9ca:	2b20      	cmp	r3, #32
 800b9cc:	d027      	beq.n	800ba1e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	685a      	ldr	r2, [r3, #4]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9dc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b9de:	f7f9 faf1 	bl	8004fc4 <HAL_GetTick>
 800b9e2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9e4:	e01b      	b.n	800ba1e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b9e6:	f7f9 faed 	bl	8004fc4 <HAL_GetTick>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	69fb      	ldr	r3, [r7, #28]
 800b9ee:	1ad3      	subs	r3, r2, r3
 800b9f0:	2b19      	cmp	r3, #25
 800b9f2:	d914      	bls.n	800ba1e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f8:	f043 0220 	orr.w	r2, r3, #32
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	2220      	movs	r2, #32
 800ba04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	2200      	movs	r2, #0
 800ba14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	699b      	ldr	r3, [r3, #24]
 800ba24:	f003 0320 	and.w	r3, r3, #32
 800ba28:	2b20      	cmp	r3, #32
 800ba2a:	d1dc      	bne.n	800b9e6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	699b      	ldr	r3, [r3, #24]
 800ba32:	f003 0320 	and.w	r3, r3, #32
 800ba36:	2b20      	cmp	r3, #32
 800ba38:	d003      	beq.n	800ba42 <I2C_IsErrorOccurred+0xfa>
 800ba3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d09d      	beq.n	800b97e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800ba42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d103      	bne.n	800ba52 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2220      	movs	r2, #32
 800ba50:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800ba52:	6a3b      	ldr	r3, [r7, #32]
 800ba54:	f043 0304 	orr.w	r3, r3, #4
 800ba58:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ba68:	69bb      	ldr	r3, [r7, #24]
 800ba6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00b      	beq.n	800ba8a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ba72:	6a3b      	ldr	r3, [r7, #32]
 800ba74:	f043 0301 	orr.w	r3, r3, #1
 800ba78:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d00b      	beq.n	800baac <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ba94:	6a3b      	ldr	r3, [r7, #32]
 800ba96:	f043 0308 	orr.w	r3, r3, #8
 800ba9a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800baa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d00b      	beq.n	800bace <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800bab6:	6a3b      	ldr	r3, [r7, #32]
 800bab8:	f043 0302 	orr.w	r3, r3, #2
 800babc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bac6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800bace:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d01c      	beq.n	800bb10 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bad6:	68f8      	ldr	r0, [r7, #12]
 800bad8:	f7ff fe73 	bl	800b7c2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	6859      	ldr	r1, [r3, #4]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	4b0d      	ldr	r3, [pc, #52]	; (800bb1c <I2C_IsErrorOccurred+0x1d4>)
 800bae8:	400b      	ands	r3, r1
 800baea:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800baf0:	6a3b      	ldr	r3, [r7, #32]
 800baf2:	431a      	orrs	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2220      	movs	r2, #32
 800bafc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	2200      	movs	r2, #0
 800bb04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800bb10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3728      	adds	r7, #40	; 0x28
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	fe00e800 	.word	0xfe00e800

0800bb20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b087      	sub	sp, #28
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	607b      	str	r3, [r7, #4]
 800bb2a:	460b      	mov	r3, r1
 800bb2c:	817b      	strh	r3, [r7, #10]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb32:	897b      	ldrh	r3, [r7, #10]
 800bb34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bb38:	7a7b      	ldrb	r3, [r7, #9]
 800bb3a:	041b      	lsls	r3, r3, #16
 800bb3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb40:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	4313      	orrs	r3, r2
 800bb4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb4e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	685a      	ldr	r2, [r3, #4]
 800bb56:	6a3b      	ldr	r3, [r7, #32]
 800bb58:	0d5b      	lsrs	r3, r3, #21
 800bb5a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800bb5e:	4b08      	ldr	r3, [pc, #32]	; (800bb80 <I2C_TransferConfig+0x60>)
 800bb60:	430b      	orrs	r3, r1
 800bb62:	43db      	mvns	r3, r3
 800bb64:	ea02 0103 	and.w	r1, r2, r3
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	697a      	ldr	r2, [r7, #20]
 800bb6e:	430a      	orrs	r2, r1
 800bb70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bb72:	bf00      	nop
 800bb74:	371c      	adds	r7, #28
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	03ff63ff 	.word	0x03ff63ff

0800bb84 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
 800bb8c:	460b      	mov	r3, r1
 800bb8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bb90:	2300      	movs	r3, #0
 800bb92:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb98:	4a2a      	ldr	r2, [pc, #168]	; (800bc44 <I2C_Enable_IRQ+0xc0>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d004      	beq.n	800bba8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800bba2:	4a29      	ldr	r2, [pc, #164]	; (800bc48 <I2C_Enable_IRQ+0xc4>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d11d      	bne.n	800bbe4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bba8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	da03      	bge.n	800bbb8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800bbb6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bbb8:	887b      	ldrh	r3, [r7, #2]
 800bbba:	2b10      	cmp	r3, #16
 800bbbc:	d103      	bne.n	800bbc6 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800bbc4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bbc6:	887b      	ldrh	r3, [r7, #2]
 800bbc8:	2b20      	cmp	r3, #32
 800bbca:	d103      	bne.n	800bbd4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bbd2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bbd4:	887b      	ldrh	r3, [r7, #2]
 800bbd6:	2b40      	cmp	r3, #64	; 0x40
 800bbd8:	d125      	bne.n	800bc26 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbe0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bbe2:	e020      	b.n	800bc26 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bbe4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	da03      	bge.n	800bbf4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800bbf2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bbf4:	887b      	ldrh	r3, [r7, #2]
 800bbf6:	f003 0301 	and.w	r3, r3, #1
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d003      	beq.n	800bc06 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800bc04:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bc06:	887b      	ldrh	r3, [r7, #2]
 800bc08:	f003 0302 	and.w	r3, r3, #2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d003      	beq.n	800bc18 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800bc16:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bc18:	887b      	ldrh	r3, [r7, #2]
 800bc1a:	2b20      	cmp	r3, #32
 800bc1c:	d103      	bne.n	800bc26 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	f043 0320 	orr.w	r3, r3, #32
 800bc24:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	6819      	ldr	r1, [r3, #0]
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68fa      	ldr	r2, [r7, #12]
 800bc32:	430a      	orrs	r2, r1
 800bc34:	601a      	str	r2, [r3, #0]
}
 800bc36:	bf00      	nop
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	0800a715 	.word	0x0800a715
 800bc48:	0800a8fd 	.word	0x0800a8fd

0800bc4c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	460b      	mov	r3, r1
 800bc56:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800bc5c:	887b      	ldrh	r3, [r7, #2]
 800bc5e:	f003 0301 	and.w	r3, r3, #1
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00f      	beq.n	800bc86 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800bc6c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bc7a:	2b28      	cmp	r3, #40	; 0x28
 800bc7c:	d003      	beq.n	800bc86 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bc84:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800bc86:	887b      	ldrh	r3, [r7, #2]
 800bc88:	f003 0302 	and.w	r3, r3, #2
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00f      	beq.n	800bcb0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800bc96:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bca4:	2b28      	cmp	r3, #40	; 0x28
 800bca6:	d003      	beq.n	800bcb0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800bcae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800bcb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	da03      	bge.n	800bcc0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800bcbe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800bcc0:	887b      	ldrh	r3, [r7, #2]
 800bcc2:	2b10      	cmp	r3, #16
 800bcc4:	d103      	bne.n	800bcce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800bccc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800bcce:	887b      	ldrh	r3, [r7, #2]
 800bcd0:	2b20      	cmp	r3, #32
 800bcd2:	d103      	bne.n	800bcdc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f043 0320 	orr.w	r3, r3, #32
 800bcda:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800bcdc:	887b      	ldrh	r3, [r7, #2]
 800bcde:	2b40      	cmp	r3, #64	; 0x40
 800bce0:	d103      	bne.n	800bcea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bce8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	6819      	ldr	r1, [r3, #0]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	43da      	mvns	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	400a      	ands	r2, r1
 800bcfa:	601a      	str	r2, [r3, #0]
}
 800bcfc:	bf00      	nop
 800bcfe:	3714      	adds	r7, #20
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b20      	cmp	r3, #32
 800bd1c:	d138      	bne.n	800bd90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd24:	2b01      	cmp	r3, #1
 800bd26:	d101      	bne.n	800bd2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bd28:	2302      	movs	r3, #2
 800bd2a:	e032      	b.n	800bd92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2201      	movs	r2, #1
 800bd30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2224      	movs	r2, #36	; 0x24
 800bd38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f022 0201 	bic.w	r2, r2, #1
 800bd4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bd5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	6819      	ldr	r1, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	430a      	orrs	r2, r1
 800bd6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f042 0201 	orr.w	r2, r2, #1
 800bd7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2220      	movs	r2, #32
 800bd80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	e000      	b.n	800bd92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bd90:	2302      	movs	r3, #2
  }
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	370c      	adds	r7, #12
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b085      	sub	sp, #20
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
 800bda6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdae:	b2db      	uxtb	r3, r3
 800bdb0:	2b20      	cmp	r3, #32
 800bdb2:	d139      	bne.n	800be28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d101      	bne.n	800bdc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bdbe:	2302      	movs	r3, #2
 800bdc0:	e033      	b.n	800be2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2201      	movs	r2, #1
 800bdc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2224      	movs	r2, #36	; 0x24
 800bdce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f022 0201 	bic.w	r2, r2, #1
 800bde0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800bdf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	021b      	lsls	r3, r3, #8
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68fa      	ldr	r2, [r7, #12]
 800be02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	681a      	ldr	r2, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f042 0201 	orr.w	r2, r2, #1
 800be12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2220      	movs	r2, #32
 800be18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800be24:	2300      	movs	r3, #0
 800be26:	e000      	b.n	800be2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800be28:	2302      	movs	r3, #2
  }
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
	...

0800be38 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800be40:	4b19      	ldr	r3, [pc, #100]	; (800bea8 <HAL_PWREx_ConfigSupply+0x70>)
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	f003 0304 	and.w	r3, r3, #4
 800be48:	2b04      	cmp	r3, #4
 800be4a:	d00a      	beq.n	800be62 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800be4c:	4b16      	ldr	r3, [pc, #88]	; (800bea8 <HAL_PWREx_ConfigSupply+0x70>)
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	f003 0307 	and.w	r3, r3, #7
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	429a      	cmp	r2, r3
 800be58:	d001      	beq.n	800be5e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	e01f      	b.n	800be9e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	e01d      	b.n	800be9e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800be62:	4b11      	ldr	r3, [pc, #68]	; (800bea8 <HAL_PWREx_ConfigSupply+0x70>)
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	f023 0207 	bic.w	r2, r3, #7
 800be6a:	490f      	ldr	r1, [pc, #60]	; (800bea8 <HAL_PWREx_ConfigSupply+0x70>)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4313      	orrs	r3, r2
 800be70:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800be72:	f7f9 f8a7 	bl	8004fc4 <HAL_GetTick>
 800be76:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800be78:	e009      	b.n	800be8e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800be7a:	f7f9 f8a3 	bl	8004fc4 <HAL_GetTick>
 800be7e:	4602      	mov	r2, r0
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800be88:	d901      	bls.n	800be8e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e007      	b.n	800be9e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800be8e:	4b06      	ldr	r3, [pc, #24]	; (800bea8 <HAL_PWREx_ConfigSupply+0x70>)
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be9a:	d1ee      	bne.n	800be7a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	58024800 	.word	0x58024800

0800beac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b08c      	sub	sp, #48	; 0x30
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	e397      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f003 0301 	and.w	r3, r3, #1
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f000 8087 	beq.w	800bfda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800becc:	4b9e      	ldr	r3, [pc, #632]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bed6:	4b9c      	ldr	r3, [pc, #624]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beda:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bede:	2b10      	cmp	r3, #16
 800bee0:	d007      	beq.n	800bef2 <HAL_RCC_OscConfig+0x46>
 800bee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bee4:	2b18      	cmp	r3, #24
 800bee6:	d110      	bne.n	800bf0a <HAL_RCC_OscConfig+0x5e>
 800bee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beea:	f003 0303 	and.w	r3, r3, #3
 800beee:	2b02      	cmp	r3, #2
 800bef0:	d10b      	bne.n	800bf0a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bef2:	4b95      	ldr	r3, [pc, #596]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800befa:	2b00      	cmp	r3, #0
 800befc:	d06c      	beq.n	800bfd8 <HAL_RCC_OscConfig+0x12c>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d168      	bne.n	800bfd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e371      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf12:	d106      	bne.n	800bf22 <HAL_RCC_OscConfig+0x76>
 800bf14:	4b8c      	ldr	r3, [pc, #560]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a8b      	ldr	r2, [pc, #556]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf1e:	6013      	str	r3, [r2, #0]
 800bf20:	e02e      	b.n	800bf80 <HAL_RCC_OscConfig+0xd4>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10c      	bne.n	800bf44 <HAL_RCC_OscConfig+0x98>
 800bf2a:	4b87      	ldr	r3, [pc, #540]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a86      	ldr	r2, [pc, #536]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf34:	6013      	str	r3, [r2, #0]
 800bf36:	4b84      	ldr	r3, [pc, #528]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a83      	ldr	r2, [pc, #524]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf40:	6013      	str	r3, [r2, #0]
 800bf42:	e01d      	b.n	800bf80 <HAL_RCC_OscConfig+0xd4>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bf4c:	d10c      	bne.n	800bf68 <HAL_RCC_OscConfig+0xbc>
 800bf4e:	4b7e      	ldr	r3, [pc, #504]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	4a7d      	ldr	r2, [pc, #500]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bf58:	6013      	str	r3, [r2, #0]
 800bf5a:	4b7b      	ldr	r3, [pc, #492]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a7a      	ldr	r2, [pc, #488]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bf64:	6013      	str	r3, [r2, #0]
 800bf66:	e00b      	b.n	800bf80 <HAL_RCC_OscConfig+0xd4>
 800bf68:	4b77      	ldr	r3, [pc, #476]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a76      	ldr	r2, [pc, #472]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf72:	6013      	str	r3, [r2, #0]
 800bf74:	4b74      	ldr	r3, [pc, #464]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a73      	ldr	r2, [pc, #460]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bf7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d013      	beq.n	800bfb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf88:	f7f9 f81c 	bl	8004fc4 <HAL_GetTick>
 800bf8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bf8e:	e008      	b.n	800bfa2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bf90:	f7f9 f818 	bl	8004fc4 <HAL_GetTick>
 800bf94:	4602      	mov	r2, r0
 800bf96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	2b64      	cmp	r3, #100	; 0x64
 800bf9c:	d901      	bls.n	800bfa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	e325      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bfa2:	4b69      	ldr	r3, [pc, #420]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d0f0      	beq.n	800bf90 <HAL_RCC_OscConfig+0xe4>
 800bfae:	e014      	b.n	800bfda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfb0:	f7f9 f808 	bl	8004fc4 <HAL_GetTick>
 800bfb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bfb6:	e008      	b.n	800bfca <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bfb8:	f7f9 f804 	bl	8004fc4 <HAL_GetTick>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	2b64      	cmp	r3, #100	; 0x64
 800bfc4:	d901      	bls.n	800bfca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e311      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bfca:	4b5f      	ldr	r3, [pc, #380]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1f0      	bne.n	800bfb8 <HAL_RCC_OscConfig+0x10c>
 800bfd6:	e000      	b.n	800bfda <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bfd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f003 0302 	and.w	r3, r3, #2
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	f000 808a 	beq.w	800c0fc <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bfe8:	4b57      	ldr	r3, [pc, #348]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bfea:	691b      	ldr	r3, [r3, #16]
 800bfec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bff0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bff2:	4b55      	ldr	r3, [pc, #340]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800bff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bff6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bff8:	6a3b      	ldr	r3, [r7, #32]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d007      	beq.n	800c00e <HAL_RCC_OscConfig+0x162>
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	2b18      	cmp	r3, #24
 800c002:	d137      	bne.n	800c074 <HAL_RCC_OscConfig+0x1c8>
 800c004:	69fb      	ldr	r3, [r7, #28]
 800c006:	f003 0303 	and.w	r3, r3, #3
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d132      	bne.n	800c074 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c00e:	4b4e      	ldr	r3, [pc, #312]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f003 0304 	and.w	r3, r3, #4
 800c016:	2b00      	cmp	r3, #0
 800c018:	d005      	beq.n	800c026 <HAL_RCC_OscConfig+0x17a>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d101      	bne.n	800c026 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800c022:	2301      	movs	r3, #1
 800c024:	e2e3      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c026:	4b48      	ldr	r3, [pc, #288]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f023 0219 	bic.w	r2, r3, #25
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	4945      	ldr	r1, [pc, #276]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c034:	4313      	orrs	r3, r2
 800c036:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c038:	f7f8 ffc4 	bl	8004fc4 <HAL_GetTick>
 800c03c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c03e:	e008      	b.n	800c052 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c040:	f7f8 ffc0 	bl	8004fc4 <HAL_GetTick>
 800c044:	4602      	mov	r2, r0
 800c046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d901      	bls.n	800c052 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e2cd      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c052:	4b3d      	ldr	r3, [pc, #244]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 0304 	and.w	r3, r3, #4
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d0f0      	beq.n	800c040 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c05e:	4b3a      	ldr	r3, [pc, #232]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c060:	685b      	ldr	r3, [r3, #4]
 800c062:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	691b      	ldr	r3, [r3, #16]
 800c06a:	061b      	lsls	r3, r3, #24
 800c06c:	4936      	ldr	r1, [pc, #216]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c06e:	4313      	orrs	r3, r2
 800c070:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c072:	e043      	b.n	800c0fc <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	68db      	ldr	r3, [r3, #12]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d026      	beq.n	800c0ca <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c07c:	4b32      	ldr	r3, [pc, #200]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f023 0219 	bic.w	r2, r3, #25
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	492f      	ldr	r1, [pc, #188]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c08a:	4313      	orrs	r3, r2
 800c08c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c08e:	f7f8 ff99 	bl	8004fc4 <HAL_GetTick>
 800c092:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c094:	e008      	b.n	800c0a8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c096:	f7f8 ff95 	bl	8004fc4 <HAL_GetTick>
 800c09a:	4602      	mov	r2, r0
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	d901      	bls.n	800c0a8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	e2a2      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c0a8:	4b27      	ldr	r3, [pc, #156]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	f003 0304 	and.w	r3, r3, #4
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d0f0      	beq.n	800c096 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c0b4:	4b24      	ldr	r3, [pc, #144]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	061b      	lsls	r3, r3, #24
 800c0c2:	4921      	ldr	r1, [pc, #132]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	604b      	str	r3, [r1, #4]
 800c0c8:	e018      	b.n	800c0fc <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c0ca:	4b1f      	ldr	r3, [pc, #124]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4a1e      	ldr	r2, [pc, #120]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c0d0:	f023 0301 	bic.w	r3, r3, #1
 800c0d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0d6:	f7f8 ff75 	bl	8004fc4 <HAL_GetTick>
 800c0da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c0dc:	e008      	b.n	800c0f0 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c0de:	f7f8 ff71 	bl	8004fc4 <HAL_GetTick>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	2b02      	cmp	r3, #2
 800c0ea:	d901      	bls.n	800c0f0 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800c0ec:	2303      	movs	r3, #3
 800c0ee:	e27e      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c0f0:	4b15      	ldr	r3, [pc, #84]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f003 0304 	and.w	r3, r3, #4
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d1f0      	bne.n	800c0de <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	f003 0310 	and.w	r3, r3, #16
 800c104:	2b00      	cmp	r3, #0
 800c106:	d06d      	beq.n	800c1e4 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c108:	4b0f      	ldr	r3, [pc, #60]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c10a:	691b      	ldr	r3, [r3, #16]
 800c10c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c110:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c112:	4b0d      	ldr	r3, [pc, #52]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c116:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c118:	69bb      	ldr	r3, [r7, #24]
 800c11a:	2b08      	cmp	r3, #8
 800c11c:	d007      	beq.n	800c12e <HAL_RCC_OscConfig+0x282>
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	2b18      	cmp	r3, #24
 800c122:	d11e      	bne.n	800c162 <HAL_RCC_OscConfig+0x2b6>
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	f003 0303 	and.w	r3, r3, #3
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d119      	bne.n	800c162 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c12e:	4b06      	ldr	r3, [pc, #24]	; (800c148 <HAL_RCC_OscConfig+0x29c>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c136:	2b00      	cmp	r3, #0
 800c138:	d008      	beq.n	800c14c <HAL_RCC_OscConfig+0x2a0>
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	2b80      	cmp	r3, #128	; 0x80
 800c140:	d004      	beq.n	800c14c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	e253      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
 800c146:	bf00      	nop
 800c148:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c14c:	4ba3      	ldr	r3, [pc, #652]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6a1b      	ldr	r3, [r3, #32]
 800c158:	061b      	lsls	r3, r3, #24
 800c15a:	49a0      	ldr	r1, [pc, #640]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c15c:	4313      	orrs	r3, r2
 800c15e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c160:	e040      	b.n	800c1e4 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d023      	beq.n	800c1b2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c16a:	4b9c      	ldr	r3, [pc, #624]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	4a9b      	ldr	r2, [pc, #620]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c174:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c176:	f7f8 ff25 	bl	8004fc4 <HAL_GetTick>
 800c17a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c17c:	e008      	b.n	800c190 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800c17e:	f7f8 ff21 	bl	8004fc4 <HAL_GetTick>
 800c182:	4602      	mov	r2, r0
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	1ad3      	subs	r3, r2, r3
 800c188:	2b02      	cmp	r3, #2
 800c18a:	d901      	bls.n	800c190 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800c18c:	2303      	movs	r3, #3
 800c18e:	e22e      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c190:	4b92      	ldr	r3, [pc, #584]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d0f0      	beq.n	800c17e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c19c:	4b8f      	ldr	r3, [pc, #572]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
 800c1a8:	061b      	lsls	r3, r3, #24
 800c1aa:	498c      	ldr	r1, [pc, #560]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	60cb      	str	r3, [r1, #12]
 800c1b0:	e018      	b.n	800c1e4 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c1b2:	4b8a      	ldr	r3, [pc, #552]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4a89      	ldr	r2, [pc, #548]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c1b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1be:	f7f8 ff01 	bl	8004fc4 <HAL_GetTick>
 800c1c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c1c4:	e008      	b.n	800c1d8 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800c1c6:	f7f8 fefd 	bl	8004fc4 <HAL_GetTick>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d901      	bls.n	800c1d8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e20a      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c1d8:	4b80      	ldr	r3, [pc, #512]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d1f0      	bne.n	800c1c6 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f003 0308 	and.w	r3, r3, #8
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d036      	beq.n	800c25e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d019      	beq.n	800c22c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c1f8:	4b78      	ldr	r3, [pc, #480]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c1fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c1fc:	4a77      	ldr	r2, [pc, #476]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c1fe:	f043 0301 	orr.w	r3, r3, #1
 800c202:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c204:	f7f8 fede 	bl	8004fc4 <HAL_GetTick>
 800c208:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c20a:	e008      	b.n	800c21e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c20c:	f7f8 feda 	bl	8004fc4 <HAL_GetTick>
 800c210:	4602      	mov	r2, r0
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	2b02      	cmp	r3, #2
 800c218:	d901      	bls.n	800c21e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800c21a:	2303      	movs	r3, #3
 800c21c:	e1e7      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c21e:	4b6f      	ldr	r3, [pc, #444]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c222:	f003 0302 	and.w	r3, r3, #2
 800c226:	2b00      	cmp	r3, #0
 800c228:	d0f0      	beq.n	800c20c <HAL_RCC_OscConfig+0x360>
 800c22a:	e018      	b.n	800c25e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c22c:	4b6b      	ldr	r3, [pc, #428]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c22e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c230:	4a6a      	ldr	r2, [pc, #424]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c232:	f023 0301 	bic.w	r3, r3, #1
 800c236:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c238:	f7f8 fec4 	bl	8004fc4 <HAL_GetTick>
 800c23c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c23e:	e008      	b.n	800c252 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c240:	f7f8 fec0 	bl	8004fc4 <HAL_GetTick>
 800c244:	4602      	mov	r2, r0
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d901      	bls.n	800c252 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	e1cd      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c252:	4b62      	ldr	r3, [pc, #392]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d1f0      	bne.n	800c240 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 0320 	and.w	r3, r3, #32
 800c266:	2b00      	cmp	r3, #0
 800c268:	d036      	beq.n	800c2d8 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	699b      	ldr	r3, [r3, #24]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d019      	beq.n	800c2a6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c272:	4b5a      	ldr	r3, [pc, #360]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a59      	ldr	r2, [pc, #356]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c27c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c27e:	f7f8 fea1 	bl	8004fc4 <HAL_GetTick>
 800c282:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c284:	e008      	b.n	800c298 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800c286:	f7f8 fe9d 	bl	8004fc4 <HAL_GetTick>
 800c28a:	4602      	mov	r2, r0
 800c28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28e:	1ad3      	subs	r3, r2, r3
 800c290:	2b02      	cmp	r3, #2
 800c292:	d901      	bls.n	800c298 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800c294:	2303      	movs	r3, #3
 800c296:	e1aa      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c298:	4b50      	ldr	r3, [pc, #320]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d0f0      	beq.n	800c286 <HAL_RCC_OscConfig+0x3da>
 800c2a4:	e018      	b.n	800c2d8 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c2a6:	4b4d      	ldr	r3, [pc, #308]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a4c      	ldr	r2, [pc, #304]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c2ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c2b2:	f7f8 fe87 	bl	8004fc4 <HAL_GetTick>
 800c2b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c2b8:	e008      	b.n	800c2cc <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800c2ba:	f7f8 fe83 	bl	8004fc4 <HAL_GetTick>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c2:	1ad3      	subs	r3, r2, r3
 800c2c4:	2b02      	cmp	r3, #2
 800c2c6:	d901      	bls.n	800c2cc <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 800c2c8:	2303      	movs	r3, #3
 800c2ca:	e190      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c2cc:	4b43      	ldr	r3, [pc, #268]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d1f0      	bne.n	800c2ba <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 0304 	and.w	r3, r3, #4
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	f000 8085 	beq.w	800c3f0 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c2e6:	4b3e      	ldr	r3, [pc, #248]	; (800c3e0 <HAL_RCC_OscConfig+0x534>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a3d      	ldr	r2, [pc, #244]	; (800c3e0 <HAL_RCC_OscConfig+0x534>)
 800c2ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c2f2:	f7f8 fe67 	bl	8004fc4 <HAL_GetTick>
 800c2f6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2f8:	e008      	b.n	800c30c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c2fa:	f7f8 fe63 	bl	8004fc4 <HAL_GetTick>
 800c2fe:	4602      	mov	r2, r0
 800c300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	2b64      	cmp	r3, #100	; 0x64
 800c306:	d901      	bls.n	800c30c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800c308:	2303      	movs	r3, #3
 800c30a:	e170      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c30c:	4b34      	ldr	r3, [pc, #208]	; (800c3e0 <HAL_RCC_OscConfig+0x534>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c314:	2b00      	cmp	r3, #0
 800c316:	d0f0      	beq.n	800c2fa <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	689b      	ldr	r3, [r3, #8]
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d106      	bne.n	800c32e <HAL_RCC_OscConfig+0x482>
 800c320:	4b2e      	ldr	r3, [pc, #184]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c324:	4a2d      	ldr	r2, [pc, #180]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c326:	f043 0301 	orr.w	r3, r3, #1
 800c32a:	6713      	str	r3, [r2, #112]	; 0x70
 800c32c:	e02d      	b.n	800c38a <HAL_RCC_OscConfig+0x4de>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d10c      	bne.n	800c350 <HAL_RCC_OscConfig+0x4a4>
 800c336:	4b29      	ldr	r3, [pc, #164]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c33a:	4a28      	ldr	r2, [pc, #160]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c33c:	f023 0301 	bic.w	r3, r3, #1
 800c340:	6713      	str	r3, [r2, #112]	; 0x70
 800c342:	4b26      	ldr	r3, [pc, #152]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c346:	4a25      	ldr	r2, [pc, #148]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c348:	f023 0304 	bic.w	r3, r3, #4
 800c34c:	6713      	str	r3, [r2, #112]	; 0x70
 800c34e:	e01c      	b.n	800c38a <HAL_RCC_OscConfig+0x4de>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	2b05      	cmp	r3, #5
 800c356:	d10c      	bne.n	800c372 <HAL_RCC_OscConfig+0x4c6>
 800c358:	4b20      	ldr	r3, [pc, #128]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c35a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c35c:	4a1f      	ldr	r2, [pc, #124]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c35e:	f043 0304 	orr.w	r3, r3, #4
 800c362:	6713      	str	r3, [r2, #112]	; 0x70
 800c364:	4b1d      	ldr	r3, [pc, #116]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c368:	4a1c      	ldr	r2, [pc, #112]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c36a:	f043 0301 	orr.w	r3, r3, #1
 800c36e:	6713      	str	r3, [r2, #112]	; 0x70
 800c370:	e00b      	b.n	800c38a <HAL_RCC_OscConfig+0x4de>
 800c372:	4b1a      	ldr	r3, [pc, #104]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c376:	4a19      	ldr	r2, [pc, #100]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c378:	f023 0301 	bic.w	r3, r3, #1
 800c37c:	6713      	str	r3, [r2, #112]	; 0x70
 800c37e:	4b17      	ldr	r3, [pc, #92]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c382:	4a16      	ldr	r2, [pc, #88]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c384:	f023 0304 	bic.w	r3, r3, #4
 800c388:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d015      	beq.n	800c3be <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c392:	f7f8 fe17 	bl	8004fc4 <HAL_GetTick>
 800c396:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c398:	e00a      	b.n	800c3b0 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c39a:	f7f8 fe13 	bl	8004fc4 <HAL_GetTick>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d901      	bls.n	800c3b0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 800c3ac:	2303      	movs	r3, #3
 800c3ae:	e11e      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c3b0:	4b0a      	ldr	r3, [pc, #40]	; (800c3dc <HAL_RCC_OscConfig+0x530>)
 800c3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3b4:	f003 0302 	and.w	r3, r3, #2
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d0ee      	beq.n	800c39a <HAL_RCC_OscConfig+0x4ee>
 800c3bc:	e018      	b.n	800c3f0 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3be:	f7f8 fe01 	bl	8004fc4 <HAL_GetTick>
 800c3c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c3c4:	e00e      	b.n	800c3e4 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c3c6:	f7f8 fdfd 	bl	8004fc4 <HAL_GetTick>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d905      	bls.n	800c3e4 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e108      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
 800c3dc:	58024400 	.word	0x58024400
 800c3e0:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c3e4:	4b84      	ldr	r3, [pc, #528]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c3e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3e8:	f003 0302 	and.w	r3, r3, #2
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d1ea      	bne.n	800c3c6 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	f000 80f9 	beq.w	800c5ec <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c3fa:	4b7f      	ldr	r3, [pc, #508]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c3fc:	691b      	ldr	r3, [r3, #16]
 800c3fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c402:	2b18      	cmp	r3, #24
 800c404:	f000 80b4 	beq.w	800c570 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	f040 8095 	bne.w	800c53c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c412:	4b79      	ldr	r3, [pc, #484]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	4a78      	ldr	r2, [pc, #480]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c418:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c41c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c41e:	f7f8 fdd1 	bl	8004fc4 <HAL_GetTick>
 800c422:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c424:	e008      	b.n	800c438 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c426:	f7f8 fdcd 	bl	8004fc4 <HAL_GetTick>
 800c42a:	4602      	mov	r2, r0
 800c42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c42e:	1ad3      	subs	r3, r2, r3
 800c430:	2b02      	cmp	r3, #2
 800c432:	d901      	bls.n	800c438 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800c434:	2303      	movs	r3, #3
 800c436:	e0da      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c438:	4b6f      	ldr	r3, [pc, #444]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1f0      	bne.n	800c426 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c444:	4b6c      	ldr	r3, [pc, #432]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c448:	4b6c      	ldr	r3, [pc, #432]	; (800c5fc <HAL_RCC_OscConfig+0x750>)
 800c44a:	4013      	ands	r3, r2
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c450:	687a      	ldr	r2, [r7, #4]
 800c452:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c454:	0112      	lsls	r2, r2, #4
 800c456:	430a      	orrs	r2, r1
 800c458:	4967      	ldr	r1, [pc, #412]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c45a:	4313      	orrs	r3, r2
 800c45c:	628b      	str	r3, [r1, #40]	; 0x28
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c462:	3b01      	subs	r3, #1
 800c464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c46c:	3b01      	subs	r3, #1
 800c46e:	025b      	lsls	r3, r3, #9
 800c470:	b29b      	uxth	r3, r3
 800c472:	431a      	orrs	r2, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c478:	3b01      	subs	r3, #1
 800c47a:	041b      	lsls	r3, r3, #16
 800c47c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c480:	431a      	orrs	r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c486:	3b01      	subs	r3, #1
 800c488:	061b      	lsls	r3, r3, #24
 800c48a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c48e:	495a      	ldr	r1, [pc, #360]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c490:	4313      	orrs	r3, r2
 800c492:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800c494:	4b58      	ldr	r3, [pc, #352]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c498:	4a57      	ldr	r2, [pc, #348]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c49a:	f023 0301 	bic.w	r3, r3, #1
 800c49e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c4a0:	4b55      	ldr	r3, [pc, #340]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4a4:	4b56      	ldr	r3, [pc, #344]	; (800c600 <HAL_RCC_OscConfig+0x754>)
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c4ac:	00d2      	lsls	r2, r2, #3
 800c4ae:	4952      	ldr	r1, [pc, #328]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c4b4:	4b50      	ldr	r3, [pc, #320]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b8:	f023 020c 	bic.w	r2, r3, #12
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c0:	494d      	ldr	r1, [pc, #308]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c4c6:	4b4c      	ldr	r3, [pc, #304]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ca:	f023 0202 	bic.w	r2, r3, #2
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4d2:	4949      	ldr	r1, [pc, #292]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4d4:	4313      	orrs	r3, r2
 800c4d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c4d8:	4b47      	ldr	r3, [pc, #284]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4dc:	4a46      	ldr	r2, [pc, #280]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4e4:	4b44      	ldr	r3, [pc, #272]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e8:	4a43      	ldr	r2, [pc, #268]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c4f0:	4b41      	ldr	r3, [pc, #260]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4f4:	4a40      	ldr	r2, [pc, #256]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800c4fc:	4b3e      	ldr	r3, [pc, #248]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c500:	4a3d      	ldr	r2, [pc, #244]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c502:	f043 0301 	orr.w	r3, r3, #1
 800c506:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c508:	4b3b      	ldr	r3, [pc, #236]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	4a3a      	ldr	r2, [pc, #232]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c50e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c514:	f7f8 fd56 	bl	8004fc4 <HAL_GetTick>
 800c518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c51a:	e008      	b.n	800c52e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c51c:	f7f8 fd52 	bl	8004fc4 <HAL_GetTick>
 800c520:	4602      	mov	r2, r0
 800c522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	2b02      	cmp	r3, #2
 800c528:	d901      	bls.n	800c52e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800c52a:	2303      	movs	r3, #3
 800c52c:	e05f      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c52e:	4b32      	ldr	r3, [pc, #200]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c536:	2b00      	cmp	r3, #0
 800c538:	d0f0      	beq.n	800c51c <HAL_RCC_OscConfig+0x670>
 800c53a:	e057      	b.n	800c5ec <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c53c:	4b2e      	ldr	r3, [pc, #184]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a2d      	ldr	r2, [pc, #180]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c548:	f7f8 fd3c 	bl	8004fc4 <HAL_GetTick>
 800c54c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c54e:	e008      	b.n	800c562 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c550:	f7f8 fd38 	bl	8004fc4 <HAL_GetTick>
 800c554:	4602      	mov	r2, r0
 800c556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c558:	1ad3      	subs	r3, r2, r3
 800c55a:	2b02      	cmp	r3, #2
 800c55c:	d901      	bls.n	800c562 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800c55e:	2303      	movs	r3, #3
 800c560:	e045      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c562:	4b25      	ldr	r3, [pc, #148]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1f0      	bne.n	800c550 <HAL_RCC_OscConfig+0x6a4>
 800c56e:	e03d      	b.n	800c5ec <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c570:	4b21      	ldr	r3, [pc, #132]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c574:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c576:	4b20      	ldr	r3, [pc, #128]	; (800c5f8 <HAL_RCC_OscConfig+0x74c>)
 800c578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c580:	2b01      	cmp	r3, #1
 800c582:	d031      	beq.n	800c5e8 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	f003 0203 	and.w	r2, r3, #3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c58e:	429a      	cmp	r2, r3
 800c590:	d12a      	bne.n	800c5e8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	091b      	lsrs	r3, r3, #4
 800c596:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d122      	bne.n	800c5e8 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d11a      	bne.n	800c5e8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	0a5b      	lsrs	r3, r3, #9
 800c5b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5be:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d111      	bne.n	800c5e8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	0c1b      	lsrs	r3, r3, #16
 800c5c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d108      	bne.n	800c5e8 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	0e1b      	lsrs	r3, r3, #24
 800c5da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c5e4:	429a      	cmp	r2, r3
 800c5e6:	d001      	beq.n	800c5ec <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	e000      	b.n	800c5ee <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800c5ec:	2300      	movs	r3, #0
}
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	3730      	adds	r7, #48	; 0x30
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	58024400 	.word	0x58024400
 800c5fc:	fffffc0c 	.word	0xfffffc0c
 800c600:	ffff0007 	.word	0xffff0007

0800c604 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c614:	2301      	movs	r3, #1
 800c616:	e19c      	b.n	800c952 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c618:	4b8a      	ldr	r3, [pc, #552]	; (800c844 <HAL_RCC_ClockConfig+0x240>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f003 030f 	and.w	r3, r3, #15
 800c620:	683a      	ldr	r2, [r7, #0]
 800c622:	429a      	cmp	r2, r3
 800c624:	d910      	bls.n	800c648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c626:	4b87      	ldr	r3, [pc, #540]	; (800c844 <HAL_RCC_ClockConfig+0x240>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	f023 020f 	bic.w	r2, r3, #15
 800c62e:	4985      	ldr	r1, [pc, #532]	; (800c844 <HAL_RCC_ClockConfig+0x240>)
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	4313      	orrs	r3, r2
 800c634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c636:	4b83      	ldr	r3, [pc, #524]	; (800c844 <HAL_RCC_ClockConfig+0x240>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	f003 030f 	and.w	r3, r3, #15
 800c63e:	683a      	ldr	r2, [r7, #0]
 800c640:	429a      	cmp	r2, r3
 800c642:	d001      	beq.n	800c648 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c644:	2301      	movs	r3, #1
 800c646:	e184      	b.n	800c952 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	f003 0304 	and.w	r3, r3, #4
 800c650:	2b00      	cmp	r3, #0
 800c652:	d010      	beq.n	800c676 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	691a      	ldr	r2, [r3, #16]
 800c658:	4b7b      	ldr	r3, [pc, #492]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c65a:	699b      	ldr	r3, [r3, #24]
 800c65c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c660:	429a      	cmp	r2, r3
 800c662:	d908      	bls.n	800c676 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c664:	4b78      	ldr	r3, [pc, #480]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c666:	699b      	ldr	r3, [r3, #24]
 800c668:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	4975      	ldr	r1, [pc, #468]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c672:	4313      	orrs	r3, r2
 800c674:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 0308 	and.w	r3, r3, #8
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d010      	beq.n	800c6a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	695a      	ldr	r2, [r3, #20]
 800c686:	4b70      	ldr	r3, [pc, #448]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c688:	69db      	ldr	r3, [r3, #28]
 800c68a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c68e:	429a      	cmp	r2, r3
 800c690:	d908      	bls.n	800c6a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c692:	4b6d      	ldr	r3, [pc, #436]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c694:	69db      	ldr	r3, [r3, #28]
 800c696:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	496a      	ldr	r1, [pc, #424]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 0310 	and.w	r3, r3, #16
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d010      	beq.n	800c6d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	699a      	ldr	r2, [r3, #24]
 800c6b4:	4b64      	ldr	r3, [pc, #400]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c6b6:	69db      	ldr	r3, [r3, #28]
 800c6b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d908      	bls.n	800c6d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c6c0:	4b61      	ldr	r3, [pc, #388]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c6c2:	69db      	ldr	r3, [r3, #28]
 800c6c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	699b      	ldr	r3, [r3, #24]
 800c6cc:	495e      	ldr	r1, [pc, #376]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c6ce:	4313      	orrs	r3, r2
 800c6d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f003 0320 	and.w	r3, r3, #32
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d010      	beq.n	800c700 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	69da      	ldr	r2, [r3, #28]
 800c6e2:	4b59      	ldr	r3, [pc, #356]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d908      	bls.n	800c700 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800c6ee:	4b56      	ldr	r3, [pc, #344]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c6f0:	6a1b      	ldr	r3, [r3, #32]
 800c6f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	69db      	ldr	r3, [r3, #28]
 800c6fa:	4953      	ldr	r1, [pc, #332]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	f003 0302 	and.w	r3, r3, #2
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d010      	beq.n	800c72e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	68da      	ldr	r2, [r3, #12]
 800c710:	4b4d      	ldr	r3, [pc, #308]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	f003 030f 	and.w	r3, r3, #15
 800c718:	429a      	cmp	r2, r3
 800c71a:	d908      	bls.n	800c72e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c71c:	4b4a      	ldr	r3, [pc, #296]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c71e:	699b      	ldr	r3, [r3, #24]
 800c720:	f023 020f 	bic.w	r2, r3, #15
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	4947      	ldr	r1, [pc, #284]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c72a:	4313      	orrs	r3, r2
 800c72c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	2b00      	cmp	r3, #0
 800c738:	d055      	beq.n	800c7e6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c73a:	4b43      	ldr	r3, [pc, #268]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	689b      	ldr	r3, [r3, #8]
 800c746:	4940      	ldr	r1, [pc, #256]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c748:	4313      	orrs	r3, r2
 800c74a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	2b02      	cmp	r3, #2
 800c752:	d107      	bne.n	800c764 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c754:	4b3c      	ldr	r3, [pc, #240]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d121      	bne.n	800c7a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c760:	2301      	movs	r3, #1
 800c762:	e0f6      	b.n	800c952 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	2b03      	cmp	r3, #3
 800c76a:	d107      	bne.n	800c77c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c76c:	4b36      	ldr	r3, [pc, #216]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c774:	2b00      	cmp	r3, #0
 800c776:	d115      	bne.n	800c7a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c778:	2301      	movs	r3, #1
 800c77a:	e0ea      	b.n	800c952 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d107      	bne.n	800c794 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c784:	4b30      	ldr	r3, [pc, #192]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d109      	bne.n	800c7a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c790:	2301      	movs	r3, #1
 800c792:	e0de      	b.n	800c952 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c794:	4b2c      	ldr	r3, [pc, #176]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	f003 0304 	and.w	r3, r3, #4
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d101      	bne.n	800c7a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c7a0:	2301      	movs	r3, #1
 800c7a2:	e0d6      	b.n	800c952 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c7a4:	4b28      	ldr	r3, [pc, #160]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c7a6:	691b      	ldr	r3, [r3, #16]
 800c7a8:	f023 0207 	bic.w	r2, r3, #7
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	4925      	ldr	r1, [pc, #148]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c7b2:	4313      	orrs	r3, r2
 800c7b4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7b6:	f7f8 fc05 	bl	8004fc4 <HAL_GetTick>
 800c7ba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7bc:	e00a      	b.n	800c7d4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c7be:	f7f8 fc01 	bl	8004fc4 <HAL_GetTick>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d901      	bls.n	800c7d4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	e0be      	b.n	800c952 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7d4:	4b1c      	ldr	r3, [pc, #112]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	00db      	lsls	r3, r3, #3
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d1eb      	bne.n	800c7be <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f003 0302 	and.w	r3, r3, #2
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d010      	beq.n	800c814 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	68da      	ldr	r2, [r3, #12]
 800c7f6:	4b14      	ldr	r3, [pc, #80]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c7f8:	699b      	ldr	r3, [r3, #24]
 800c7fa:	f003 030f 	and.w	r3, r3, #15
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d208      	bcs.n	800c814 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c802:	4b11      	ldr	r3, [pc, #68]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c804:	699b      	ldr	r3, [r3, #24]
 800c806:	f023 020f 	bic.w	r2, r3, #15
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	68db      	ldr	r3, [r3, #12]
 800c80e:	490e      	ldr	r1, [pc, #56]	; (800c848 <HAL_RCC_ClockConfig+0x244>)
 800c810:	4313      	orrs	r3, r2
 800c812:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c814:	4b0b      	ldr	r3, [pc, #44]	; (800c844 <HAL_RCC_ClockConfig+0x240>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	f003 030f 	and.w	r3, r3, #15
 800c81c:	683a      	ldr	r2, [r7, #0]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d214      	bcs.n	800c84c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c822:	4b08      	ldr	r3, [pc, #32]	; (800c844 <HAL_RCC_ClockConfig+0x240>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	f023 020f 	bic.w	r2, r3, #15
 800c82a:	4906      	ldr	r1, [pc, #24]	; (800c844 <HAL_RCC_ClockConfig+0x240>)
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	4313      	orrs	r3, r2
 800c830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c832:	4b04      	ldr	r3, [pc, #16]	; (800c844 <HAL_RCC_ClockConfig+0x240>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f003 030f 	and.w	r3, r3, #15
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d005      	beq.n	800c84c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c840:	2301      	movs	r3, #1
 800c842:	e086      	b.n	800c952 <HAL_RCC_ClockConfig+0x34e>
 800c844:	52002000 	.word	0x52002000
 800c848:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0304 	and.w	r3, r3, #4
 800c854:	2b00      	cmp	r3, #0
 800c856:	d010      	beq.n	800c87a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	691a      	ldr	r2, [r3, #16]
 800c85c:	4b3f      	ldr	r3, [pc, #252]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c85e:	699b      	ldr	r3, [r3, #24]
 800c860:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c864:	429a      	cmp	r2, r3
 800c866:	d208      	bcs.n	800c87a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c868:	4b3c      	ldr	r3, [pc, #240]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c86a:	699b      	ldr	r3, [r3, #24]
 800c86c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	691b      	ldr	r3, [r3, #16]
 800c874:	4939      	ldr	r1, [pc, #228]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c876:	4313      	orrs	r3, r2
 800c878:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f003 0308 	and.w	r3, r3, #8
 800c882:	2b00      	cmp	r3, #0
 800c884:	d010      	beq.n	800c8a8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	695a      	ldr	r2, [r3, #20]
 800c88a:	4b34      	ldr	r3, [pc, #208]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c88c:	69db      	ldr	r3, [r3, #28]
 800c88e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c892:	429a      	cmp	r2, r3
 800c894:	d208      	bcs.n	800c8a8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c896:	4b31      	ldr	r3, [pc, #196]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c898:	69db      	ldr	r3, [r3, #28]
 800c89a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	492e      	ldr	r1, [pc, #184]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0310 	and.w	r3, r3, #16
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d010      	beq.n	800c8d6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	699a      	ldr	r2, [r3, #24]
 800c8b8:	4b28      	ldr	r3, [pc, #160]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c8ba:	69db      	ldr	r3, [r3, #28]
 800c8bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	d208      	bcs.n	800c8d6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c8c4:	4b25      	ldr	r3, [pc, #148]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c8c6:	69db      	ldr	r3, [r3, #28]
 800c8c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	699b      	ldr	r3, [r3, #24]
 800c8d0:	4922      	ldr	r1, [pc, #136]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f003 0320 	and.w	r3, r3, #32
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d010      	beq.n	800c904 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	69da      	ldr	r2, [r3, #28]
 800c8e6:	4b1d      	ldr	r3, [pc, #116]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c8e8:	6a1b      	ldr	r3, [r3, #32]
 800c8ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d208      	bcs.n	800c904 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800c8f2:	4b1a      	ldr	r3, [pc, #104]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c8f4:	6a1b      	ldr	r3, [r3, #32]
 800c8f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	69db      	ldr	r3, [r3, #28]
 800c8fe:	4917      	ldr	r1, [pc, #92]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c900:	4313      	orrs	r3, r2
 800c902:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c904:	f000 f834 	bl	800c970 <HAL_RCC_GetSysClockFreq>
 800c908:	4602      	mov	r2, r0
 800c90a:	4b14      	ldr	r3, [pc, #80]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c90c:	699b      	ldr	r3, [r3, #24]
 800c90e:	0a1b      	lsrs	r3, r3, #8
 800c910:	f003 030f 	and.w	r3, r3, #15
 800c914:	4912      	ldr	r1, [pc, #72]	; (800c960 <HAL_RCC_ClockConfig+0x35c>)
 800c916:	5ccb      	ldrb	r3, [r1, r3]
 800c918:	f003 031f 	and.w	r3, r3, #31
 800c91c:	fa22 f303 	lsr.w	r3, r2, r3
 800c920:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c922:	4b0e      	ldr	r3, [pc, #56]	; (800c95c <HAL_RCC_ClockConfig+0x358>)
 800c924:	699b      	ldr	r3, [r3, #24]
 800c926:	f003 030f 	and.w	r3, r3, #15
 800c92a:	4a0d      	ldr	r2, [pc, #52]	; (800c960 <HAL_RCC_ClockConfig+0x35c>)
 800c92c:	5cd3      	ldrb	r3, [r2, r3]
 800c92e:	f003 031f 	and.w	r3, r3, #31
 800c932:	693a      	ldr	r2, [r7, #16]
 800c934:	fa22 f303 	lsr.w	r3, r2, r3
 800c938:	4a0a      	ldr	r2, [pc, #40]	; (800c964 <HAL_RCC_ClockConfig+0x360>)
 800c93a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c93c:	4a0a      	ldr	r2, [pc, #40]	; (800c968 <HAL_RCC_ClockConfig+0x364>)
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800c942:	4b0a      	ldr	r3, [pc, #40]	; (800c96c <HAL_RCC_ClockConfig+0x368>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4618      	mov	r0, r3
 800c948:	f7f8 faf2 	bl	8004f30 <HAL_InitTick>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c950:	7bfb      	ldrb	r3, [r7, #15]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3718      	adds	r7, #24
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	58024400 	.word	0x58024400
 800c960:	08015258 	.word	0x08015258
 800c964:	20000004 	.word	0x20000004
 800c968:	20000000 	.word	0x20000000
 800c96c:	20000008 	.word	0x20000008

0800c970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c970:	b480      	push	{r7}
 800c972:	b089      	sub	sp, #36	; 0x24
 800c974:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c976:	4bb3      	ldr	r3, [pc, #716]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c978:	691b      	ldr	r3, [r3, #16]
 800c97a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c97e:	2b18      	cmp	r3, #24
 800c980:	f200 8155 	bhi.w	800cc2e <HAL_RCC_GetSysClockFreq+0x2be>
 800c984:	a201      	add	r2, pc, #4	; (adr r2, 800c98c <HAL_RCC_GetSysClockFreq+0x1c>)
 800c986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c98a:	bf00      	nop
 800c98c:	0800c9f1 	.word	0x0800c9f1
 800c990:	0800cc2f 	.word	0x0800cc2f
 800c994:	0800cc2f 	.word	0x0800cc2f
 800c998:	0800cc2f 	.word	0x0800cc2f
 800c99c:	0800cc2f 	.word	0x0800cc2f
 800c9a0:	0800cc2f 	.word	0x0800cc2f
 800c9a4:	0800cc2f 	.word	0x0800cc2f
 800c9a8:	0800cc2f 	.word	0x0800cc2f
 800c9ac:	0800ca17 	.word	0x0800ca17
 800c9b0:	0800cc2f 	.word	0x0800cc2f
 800c9b4:	0800cc2f 	.word	0x0800cc2f
 800c9b8:	0800cc2f 	.word	0x0800cc2f
 800c9bc:	0800cc2f 	.word	0x0800cc2f
 800c9c0:	0800cc2f 	.word	0x0800cc2f
 800c9c4:	0800cc2f 	.word	0x0800cc2f
 800c9c8:	0800cc2f 	.word	0x0800cc2f
 800c9cc:	0800ca1d 	.word	0x0800ca1d
 800c9d0:	0800cc2f 	.word	0x0800cc2f
 800c9d4:	0800cc2f 	.word	0x0800cc2f
 800c9d8:	0800cc2f 	.word	0x0800cc2f
 800c9dc:	0800cc2f 	.word	0x0800cc2f
 800c9e0:	0800cc2f 	.word	0x0800cc2f
 800c9e4:	0800cc2f 	.word	0x0800cc2f
 800c9e8:	0800cc2f 	.word	0x0800cc2f
 800c9ec:	0800ca23 	.word	0x0800ca23
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c9f0:	4b94      	ldr	r3, [pc, #592]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f003 0320 	and.w	r3, r3, #32
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d009      	beq.n	800ca10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c9fc:	4b91      	ldr	r3, [pc, #580]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	08db      	lsrs	r3, r3, #3
 800ca02:	f003 0303 	and.w	r3, r3, #3
 800ca06:	4a90      	ldr	r2, [pc, #576]	; (800cc48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ca08:	fa22 f303 	lsr.w	r3, r2, r3
 800ca0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800ca0e:	e111      	b.n	800cc34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ca10:	4b8d      	ldr	r3, [pc, #564]	; (800cc48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ca12:	61bb      	str	r3, [r7, #24]
    break;
 800ca14:	e10e      	b.n	800cc34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ca16:	4b8d      	ldr	r3, [pc, #564]	; (800cc4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ca18:	61bb      	str	r3, [r7, #24]
    break;
 800ca1a:	e10b      	b.n	800cc34 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ca1c:	4b8c      	ldr	r3, [pc, #560]	; (800cc50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ca1e:	61bb      	str	r3, [r7, #24]
    break;
 800ca20:	e108      	b.n	800cc34 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca22:	4b88      	ldr	r3, [pc, #544]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca26:	f003 0303 	and.w	r3, r3, #3
 800ca2a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ca2c:	4b85      	ldr	r3, [pc, #532]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca30:	091b      	lsrs	r3, r3, #4
 800ca32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca36:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ca38:	4b82      	ldr	r3, [pc, #520]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3c:	f003 0301 	and.w	r3, r3, #1
 800ca40:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ca42:	4b80      	ldr	r3, [pc, #512]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca46:	08db      	lsrs	r3, r3, #3
 800ca48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca4c:	68fa      	ldr	r2, [r7, #12]
 800ca4e:	fb02 f303 	mul.w	r3, r2, r3
 800ca52:	ee07 3a90 	vmov	s15, r3
 800ca56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca5a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	f000 80e1 	beq.w	800cc28 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	f000 8083 	beq.w	800cb74 <HAL_RCC_GetSysClockFreq+0x204>
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	f200 80a1 	bhi.w	800cbb8 <HAL_RCC_GetSysClockFreq+0x248>
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d003      	beq.n	800ca84 <HAL_RCC_GetSysClockFreq+0x114>
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	2b01      	cmp	r3, #1
 800ca80:	d056      	beq.n	800cb30 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ca82:	e099      	b.n	800cbb8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca84:	4b6f      	ldr	r3, [pc, #444]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f003 0320 	and.w	r3, r3, #32
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d02d      	beq.n	800caec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ca90:	4b6c      	ldr	r3, [pc, #432]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	08db      	lsrs	r3, r3, #3
 800ca96:	f003 0303 	and.w	r3, r3, #3
 800ca9a:	4a6b      	ldr	r2, [pc, #428]	; (800cc48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ca9c:	fa22 f303 	lsr.w	r3, r2, r3
 800caa0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	ee07 3a90 	vmov	s15, r3
 800caa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	ee07 3a90 	vmov	s15, r3
 800cab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caba:	4b62      	ldr	r3, [pc, #392]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cabc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cabe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caca:	ed97 6a02 	vldr	s12, [r7, #8]
 800cace:	eddf 5a61 	vldr	s11, [pc, #388]	; 800cc54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cae6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800caea:	e087      	b.n	800cbfc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	ee07 3a90 	vmov	s15, r3
 800caf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800cc58 <HAL_RCC_GetSysClockFreq+0x2e8>
 800cafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cafe:	4b51      	ldr	r3, [pc, #324]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb06:	ee07 3a90 	vmov	s15, r3
 800cb0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb0e:	ed97 6a02 	vldr	s12, [r7, #8]
 800cb12:	eddf 5a50 	vldr	s11, [pc, #320]	; 800cc54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cb16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb2e:	e065      	b.n	800cbfc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	ee07 3a90 	vmov	s15, r3
 800cb36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb3a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800cc5c <HAL_RCC_GetSysClockFreq+0x2ec>
 800cb3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb42:	4b40      	ldr	r3, [pc, #256]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb4a:	ee07 3a90 	vmov	s15, r3
 800cb4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb52:	ed97 6a02 	vldr	s12, [r7, #8]
 800cb56:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800cc54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cb5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb72:	e043      	b.n	800cbfc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	ee07 3a90 	vmov	s15, r3
 800cb7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb7e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800cc60 <HAL_RCC_GetSysClockFreq+0x2f0>
 800cb82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb86:	4b2f      	ldr	r3, [pc, #188]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb8e:	ee07 3a90 	vmov	s15, r3
 800cb92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb96:	ed97 6a02 	vldr	s12, [r7, #8]
 800cb9a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800cc54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cb9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbb6:	e021      	b.n	800cbfc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	ee07 3a90 	vmov	s15, r3
 800cbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800cc5c <HAL_RCC_GetSysClockFreq+0x2ec>
 800cbc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbca:	4b1e      	ldr	r3, [pc, #120]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd2:	ee07 3a90 	vmov	s15, r3
 800cbd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbda:	ed97 6a02 	vldr	s12, [r7, #8]
 800cbde:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800cc54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cbe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbfa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800cbfc:	4b11      	ldr	r3, [pc, #68]	; (800cc44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc00:	0a5b      	lsrs	r3, r3, #9
 800cc02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc06:	3301      	adds	r3, #1
 800cc08:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	ee07 3a90 	vmov	s15, r3
 800cc10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cc14:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc20:	ee17 3a90 	vmov	r3, s15
 800cc24:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800cc26:	e005      	b.n	800cc34 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	61bb      	str	r3, [r7, #24]
    break;
 800cc2c:	e002      	b.n	800cc34 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800cc2e:	4b07      	ldr	r3, [pc, #28]	; (800cc4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cc30:	61bb      	str	r3, [r7, #24]
    break;
 800cc32:	bf00      	nop
  }

  return sysclockfreq;
 800cc34:	69bb      	ldr	r3, [r7, #24]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3724      	adds	r7, #36	; 0x24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	58024400 	.word	0x58024400
 800cc48:	03d09000 	.word	0x03d09000
 800cc4c:	003d0900 	.word	0x003d0900
 800cc50:	017d7840 	.word	0x017d7840
 800cc54:	46000000 	.word	0x46000000
 800cc58:	4c742400 	.word	0x4c742400
 800cc5c:	4a742400 	.word	0x4a742400
 800cc60:	4bbebc20 	.word	0x4bbebc20

0800cc64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b082      	sub	sp, #8
 800cc68:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cc6a:	f7ff fe81 	bl	800c970 <HAL_RCC_GetSysClockFreq>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	4b10      	ldr	r3, [pc, #64]	; (800ccb4 <HAL_RCC_GetHCLKFreq+0x50>)
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	0a1b      	lsrs	r3, r3, #8
 800cc76:	f003 030f 	and.w	r3, r3, #15
 800cc7a:	490f      	ldr	r1, [pc, #60]	; (800ccb8 <HAL_RCC_GetHCLKFreq+0x54>)
 800cc7c:	5ccb      	ldrb	r3, [r1, r3]
 800cc7e:	f003 031f 	and.w	r3, r3, #31
 800cc82:	fa22 f303 	lsr.w	r3, r2, r3
 800cc86:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cc88:	4b0a      	ldr	r3, [pc, #40]	; (800ccb4 <HAL_RCC_GetHCLKFreq+0x50>)
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	f003 030f 	and.w	r3, r3, #15
 800cc90:	4a09      	ldr	r2, [pc, #36]	; (800ccb8 <HAL_RCC_GetHCLKFreq+0x54>)
 800cc92:	5cd3      	ldrb	r3, [r2, r3]
 800cc94:	f003 031f 	and.w	r3, r3, #31
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc9e:	4a07      	ldr	r2, [pc, #28]	; (800ccbc <HAL_RCC_GetHCLKFreq+0x58>)
 800cca0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cca2:	4a07      	ldr	r2, [pc, #28]	; (800ccc0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800cca8:	4b04      	ldr	r3, [pc, #16]	; (800ccbc <HAL_RCC_GetHCLKFreq+0x58>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3708      	adds	r7, #8
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	58024400 	.word	0x58024400
 800ccb8:	08015258 	.word	0x08015258
 800ccbc:	20000004 	.word	0x20000004
 800ccc0:	20000000 	.word	0x20000000

0800ccc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ccc8:	f7ff ffcc 	bl	800cc64 <HAL_RCC_GetHCLKFreq>
 800cccc:	4602      	mov	r2, r0
 800ccce:	4b06      	ldr	r3, [pc, #24]	; (800cce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ccd0:	69db      	ldr	r3, [r3, #28]
 800ccd2:	091b      	lsrs	r3, r3, #4
 800ccd4:	f003 0307 	and.w	r3, r3, #7
 800ccd8:	4904      	ldr	r1, [pc, #16]	; (800ccec <HAL_RCC_GetPCLK1Freq+0x28>)
 800ccda:	5ccb      	ldrb	r3, [r1, r3]
 800ccdc:	f003 031f 	and.w	r3, r3, #31
 800cce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	bd80      	pop	{r7, pc}
 800cce8:	58024400 	.word	0x58024400
 800ccec:	08015258 	.word	0x08015258

0800ccf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ccf4:	f7ff ffb6 	bl	800cc64 <HAL_RCC_GetHCLKFreq>
 800ccf8:	4602      	mov	r2, r0
 800ccfa:	4b06      	ldr	r3, [pc, #24]	; (800cd14 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ccfc:	69db      	ldr	r3, [r3, #28]
 800ccfe:	0a1b      	lsrs	r3, r3, #8
 800cd00:	f003 0307 	and.w	r3, r3, #7
 800cd04:	4904      	ldr	r1, [pc, #16]	; (800cd18 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cd06:	5ccb      	ldrb	r3, [r1, r3]
 800cd08:	f003 031f 	and.w	r3, r3, #31
 800cd0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	58024400 	.word	0x58024400
 800cd18:	08015258 	.word	0x08015258

0800cd1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b086      	sub	sp, #24
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cd24:	2300      	movs	r3, #0
 800cd26:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cd28:	2300      	movs	r3, #0
 800cd2a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d03f      	beq.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cd40:	d02a      	beq.n	800cd98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800cd42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800cd46:	d824      	bhi.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cd48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd4c:	d018      	beq.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cd4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cd52:	d81e      	bhi.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d003      	beq.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800cd58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd5c:	d007      	beq.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800cd5e:	e018      	b.n	800cd92 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd60:	4bab      	ldr	r3, [pc, #684]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd64:	4aaa      	ldr	r2, [pc, #680]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cd66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd6a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800cd6c:	e015      	b.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	3304      	adds	r3, #4
 800cd72:	2102      	movs	r1, #2
 800cd74:	4618      	mov	r0, r3
 800cd76:	f001 feff 	bl	800eb78 <RCCEx_PLL2_Config>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800cd7e:	e00c      	b.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3324      	adds	r3, #36	; 0x24
 800cd84:	2102      	movs	r1, #2
 800cd86:	4618      	mov	r0, r3
 800cd88:	f001 ffa8 	bl	800ecdc <RCCEx_PLL3_Config>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800cd90:	e003      	b.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	75fb      	strb	r3, [r7, #23]
      break;
 800cd96:	e000      	b.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800cd98:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd9a:	7dfb      	ldrb	r3, [r7, #23]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d109      	bne.n	800cdb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cda0:	4b9b      	ldr	r3, [pc, #620]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cda2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cda4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdac:	4998      	ldr	r1, [pc, #608]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	650b      	str	r3, [r1, #80]	; 0x50
 800cdb2:	e001      	b.n	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdb4:	7dfb      	ldrb	r3, [r7, #23]
 800cdb6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d03d      	beq.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cdc8:	2b04      	cmp	r3, #4
 800cdca:	d826      	bhi.n	800ce1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800cdcc:	a201      	add	r2, pc, #4	; (adr r2, 800cdd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800cdce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd2:	bf00      	nop
 800cdd4:	0800cde9 	.word	0x0800cde9
 800cdd8:	0800cdf7 	.word	0x0800cdf7
 800cddc:	0800ce09 	.word	0x0800ce09
 800cde0:	0800ce21 	.word	0x0800ce21
 800cde4:	0800ce21 	.word	0x0800ce21
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cde8:	4b89      	ldr	r3, [pc, #548]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cdea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdec:	4a88      	ldr	r2, [pc, #544]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cdee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cdf4:	e015      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f001 febb 	bl	800eb78 <RCCEx_PLL2_Config>
 800ce02:	4603      	mov	r3, r0
 800ce04:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ce06:	e00c      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	3324      	adds	r3, #36	; 0x24
 800ce0c:	2100      	movs	r1, #0
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f001 ff64 	bl	800ecdc <RCCEx_PLL3_Config>
 800ce14:	4603      	mov	r3, r0
 800ce16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ce18:	e003      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce1a:	2301      	movs	r3, #1
 800ce1c:	75fb      	strb	r3, [r7, #23]
      break;
 800ce1e:	e000      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800ce20:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce22:	7dfb      	ldrb	r3, [r7, #23]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d109      	bne.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ce28:	4b79      	ldr	r3, [pc, #484]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ce2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce2c:	f023 0207 	bic.w	r2, r3, #7
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce34:	4976      	ldr	r1, [pc, #472]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ce36:	4313      	orrs	r3, r2
 800ce38:	650b      	str	r3, [r1, #80]	; 0x50
 800ce3a:	e001      	b.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce3c:	7dfb      	ldrb	r3, [r7, #23]
 800ce3e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d051      	beq.n	800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ce52:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ce56:	d036      	beq.n	800cec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ce58:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ce5c:	d830      	bhi.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ce5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce62:	d032      	beq.n	800ceca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800ce64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ce68:	d82a      	bhi.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ce6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ce6e:	d02e      	beq.n	800cece <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800ce70:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ce74:	d824      	bhi.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ce76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce7a:	d018      	beq.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x192>
 800ce7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ce80:	d81e      	bhi.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800ce86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce8a:	d007      	beq.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800ce8c:	e018      	b.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce8e:	4b60      	ldr	r3, [pc, #384]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ce90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce92:	4a5f      	ldr	r2, [pc, #380]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ce94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ce9a:	e019      	b.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	3304      	adds	r3, #4
 800cea0:	2100      	movs	r1, #0
 800cea2:	4618      	mov	r0, r3
 800cea4:	f001 fe68 	bl	800eb78 <RCCEx_PLL2_Config>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ceac:	e010      	b.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	3324      	adds	r3, #36	; 0x24
 800ceb2:	2100      	movs	r1, #0
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f001 ff11 	bl	800ecdc <RCCEx_PLL3_Config>
 800ceba:	4603      	mov	r3, r0
 800cebc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cebe:	e007      	b.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800cec0:	2301      	movs	r3, #1
 800cec2:	75fb      	strb	r3, [r7, #23]
      break;
 800cec4:	e004      	b.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800cec6:	bf00      	nop
 800cec8:	e002      	b.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800ceca:	bf00      	nop
 800cecc:	e000      	b.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800cece:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10a      	bne.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ced6:	4b4e      	ldr	r3, [pc, #312]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ced8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceda:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cee4:	494a      	ldr	r1, [pc, #296]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cee6:	4313      	orrs	r3, r2
 800cee8:	658b      	str	r3, [r1, #88]	; 0x58
 800ceea:	e001      	b.n	800cef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ceec:	7dfb      	ldrb	r3, [r7, #23]
 800ceee:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d051      	beq.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cf02:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800cf06:	d036      	beq.n	800cf76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800cf08:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800cf0c:	d830      	bhi.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800cf0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf12:	d032      	beq.n	800cf7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800cf14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cf18:	d82a      	bhi.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800cf1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf1e:	d02e      	beq.n	800cf7e <HAL_RCCEx_PeriphCLKConfig+0x262>
 800cf20:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cf24:	d824      	bhi.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800cf26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf2a:	d018      	beq.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800cf2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf30:	d81e      	bhi.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d003      	beq.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0x222>
 800cf36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cf3a:	d007      	beq.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800cf3c:	e018      	b.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf3e:	4b34      	ldr	r3, [pc, #208]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cf40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf42:	4a33      	ldr	r2, [pc, #204]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cf44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cf4a:	e019      	b.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	3304      	adds	r3, #4
 800cf50:	2100      	movs	r1, #0
 800cf52:	4618      	mov	r0, r3
 800cf54:	f001 fe10 	bl	800eb78 <RCCEx_PLL2_Config>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800cf5c:	e010      	b.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	3324      	adds	r3, #36	; 0x24
 800cf62:	2100      	movs	r1, #0
 800cf64:	4618      	mov	r0, r3
 800cf66:	f001 feb9 	bl	800ecdc <RCCEx_PLL3_Config>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cf6e:	e007      	b.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	75fb      	strb	r3, [r7, #23]
      break;
 800cf74:	e004      	b.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800cf76:	bf00      	nop
 800cf78:	e002      	b.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800cf7a:	bf00      	nop
 800cf7c:	e000      	b.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800cf7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf80:	7dfb      	ldrb	r3, [r7, #23]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10a      	bne.n	800cf9c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cf86:	4b22      	ldr	r3, [pc, #136]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cf88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf8a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cf94:	491e      	ldr	r1, [pc, #120]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cf96:	4313      	orrs	r3, r2
 800cf98:	658b      	str	r3, [r1, #88]	; 0x58
 800cf9a:	e001      	b.n	800cfa0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf9c:	7dfb      	ldrb	r3, [r7, #23]
 800cf9e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d035      	beq.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cfb0:	2b30      	cmp	r3, #48	; 0x30
 800cfb2:	d01c      	beq.n	800cfee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800cfb4:	2b30      	cmp	r3, #48	; 0x30
 800cfb6:	d817      	bhi.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800cfb8:	2b20      	cmp	r3, #32
 800cfba:	d00c      	beq.n	800cfd6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800cfbc:	2b20      	cmp	r3, #32
 800cfbe:	d813      	bhi.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d016      	beq.n	800cff2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800cfc4:	2b10      	cmp	r3, #16
 800cfc6:	d10f      	bne.n	800cfe8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfc8:	4b11      	ldr	r3, [pc, #68]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfcc:	4a10      	ldr	r2, [pc, #64]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cfce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800cfd4:	e00e      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	3304      	adds	r3, #4
 800cfda:	2102      	movs	r1, #2
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f001 fdcb 	bl	800eb78 <RCCEx_PLL2_Config>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800cfe6:	e005      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	75fb      	strb	r3, [r7, #23]
      break;
 800cfec:	e002      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800cfee:	bf00      	nop
 800cff0:	e000      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800cff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cff4:	7dfb      	ldrb	r3, [r7, #23]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d10c      	bne.n	800d014 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800cffa:	4b05      	ldr	r3, [pc, #20]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800cffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cffe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d006:	4902      	ldr	r1, [pc, #8]	; (800d010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800d008:	4313      	orrs	r3, r2
 800d00a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d00c:	e004      	b.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800d00e:	bf00      	nop
 800d010:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d014:	7dfb      	ldrb	r3, [r7, #23]
 800d016:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d020:	2b00      	cmp	r3, #0
 800d022:	d047      	beq.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d02c:	d030      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800d02e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d032:	d82a      	bhi.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800d034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d038:	d02c      	beq.n	800d094 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800d03a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d03e:	d824      	bhi.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800d040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d044:	d018      	beq.n	800d078 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800d046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d04a:	d81e      	bhi.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d003      	beq.n	800d058 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800d050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d054:	d007      	beq.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800d056:	e018      	b.n	800d08a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d058:	4bac      	ldr	r3, [pc, #688]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05c:	4aab      	ldr	r2, [pc, #684]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d05e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800d064:	e017      	b.n	800d096 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	3304      	adds	r3, #4
 800d06a:	2100      	movs	r1, #0
 800d06c:	4618      	mov	r0, r3
 800d06e:	f001 fd83 	bl	800eb78 <RCCEx_PLL2_Config>
 800d072:	4603      	mov	r3, r0
 800d074:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800d076:	e00e      	b.n	800d096 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	3324      	adds	r3, #36	; 0x24
 800d07c:	2100      	movs	r1, #0
 800d07e:	4618      	mov	r0, r3
 800d080:	f001 fe2c 	bl	800ecdc <RCCEx_PLL3_Config>
 800d084:	4603      	mov	r3, r0
 800d086:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800d088:	e005      	b.n	800d096 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d08a:	2301      	movs	r3, #1
 800d08c:	75fb      	strb	r3, [r7, #23]
      break;
 800d08e:	e002      	b.n	800d096 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800d090:	bf00      	nop
 800d092:	e000      	b.n	800d096 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800d094:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d096:	7dfb      	ldrb	r3, [r7, #23]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d109      	bne.n	800d0b0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d09c:	4b9b      	ldr	r3, [pc, #620]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0a8:	4998      	ldr	r1, [pc, #608]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	650b      	str	r3, [r1, #80]	; 0x50
 800d0ae:	e001      	b.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
 800d0b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d049      	beq.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d0c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d0c8:	d02e      	beq.n	800d128 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800d0ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d0ce:	d828      	bhi.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800d0d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d0d4:	d02a      	beq.n	800d12c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800d0d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d0da:	d822      	bhi.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800d0dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d0e0:	d026      	beq.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800d0e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d0e6:	d81c      	bhi.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800d0e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0ec:	d010      	beq.n	800d110 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800d0ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0f2:	d816      	bhi.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d01d      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800d0f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0fc:	d111      	bne.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	3304      	adds	r3, #4
 800d102:	2101      	movs	r1, #1
 800d104:	4618      	mov	r0, r3
 800d106:	f001 fd37 	bl	800eb78 <RCCEx_PLL2_Config>
 800d10a:	4603      	mov	r3, r0
 800d10c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800d10e:	e012      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3324      	adds	r3, #36	; 0x24
 800d114:	2101      	movs	r1, #1
 800d116:	4618      	mov	r0, r3
 800d118:	f001 fde0 	bl	800ecdc <RCCEx_PLL3_Config>
 800d11c:	4603      	mov	r3, r0
 800d11e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800d120:	e009      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d122:	2301      	movs	r3, #1
 800d124:	75fb      	strb	r3, [r7, #23]
      break;
 800d126:	e006      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800d128:	bf00      	nop
 800d12a:	e004      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800d12c:	bf00      	nop
 800d12e:	e002      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800d130:	bf00      	nop
 800d132:	e000      	b.n	800d136 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800d134:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d136:	7dfb      	ldrb	r3, [r7, #23]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d109      	bne.n	800d150 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d13c:	4b73      	ldr	r3, [pc, #460]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d13e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d140:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d148:	4970      	ldr	r1, [pc, #448]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d14a:	4313      	orrs	r3, r2
 800d14c:	650b      	str	r3, [r1, #80]	; 0x50
 800d14e:	e001      	b.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d150:	7dfb      	ldrb	r3, [r7, #23]
 800d152:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d04b      	beq.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d16a:	d02e      	beq.n	800d1ca <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800d16c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d170:	d828      	bhi.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d176:	d02a      	beq.n	800d1ce <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800d178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d17c:	d822      	bhi.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d17e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d182:	d026      	beq.n	800d1d2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800d184:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d188:	d81c      	bhi.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d18a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d18e:	d010      	beq.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800d190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d194:	d816      	bhi.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800d196:	2b00      	cmp	r3, #0
 800d198:	d01d      	beq.n	800d1d6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800d19a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d19e:	d111      	bne.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	2101      	movs	r1, #1
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f001 fce6 	bl	800eb78 <RCCEx_PLL2_Config>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800d1b0:	e012      	b.n	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	3324      	adds	r3, #36	; 0x24
 800d1b6:	2101      	movs	r1, #1
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f001 fd8f 	bl	800ecdc <RCCEx_PLL3_Config>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800d1c2:	e009      	b.n	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800d1c4:	2301      	movs	r3, #1
 800d1c6:	75fb      	strb	r3, [r7, #23]
      break;
 800d1c8:	e006      	b.n	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800d1ca:	bf00      	nop
 800d1cc:	e004      	b.n	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800d1ce:	bf00      	nop
 800d1d0:	e002      	b.n	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800d1d2:	bf00      	nop
 800d1d4:	e000      	b.n	800d1d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800d1d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d1d8:	7dfb      	ldrb	r3, [r7, #23]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d10a      	bne.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d1de:	4b4b      	ldr	r3, [pc, #300]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d1ec:	4947      	ldr	r1, [pc, #284]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d1ee:	4313      	orrs	r3, r2
 800d1f0:	658b      	str	r3, [r1, #88]	; 0x58
 800d1f2:	e001      	b.n	800d1f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1f4:	7dfb      	ldrb	r3, [r7, #23]
 800d1f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d02f      	beq.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d20c:	d00e      	beq.n	800d22c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800d20e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d212:	d814      	bhi.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800d214:	2b00      	cmp	r3, #0
 800d216:	d015      	beq.n	800d244 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800d218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d21c:	d10f      	bne.n	800d23e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d21e:	4b3b      	ldr	r3, [pc, #236]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d222:	4a3a      	ldr	r2, [pc, #232]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d228:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800d22a:	e00c      	b.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	3304      	adds	r3, #4
 800d230:	2101      	movs	r1, #1
 800d232:	4618      	mov	r0, r3
 800d234:	f001 fca0 	bl	800eb78 <RCCEx_PLL2_Config>
 800d238:	4603      	mov	r3, r0
 800d23a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800d23c:	e003      	b.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d23e:	2301      	movs	r3, #1
 800d240:	75fb      	strb	r3, [r7, #23]
      break;
 800d242:	e000      	b.n	800d246 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800d244:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d246:	7dfb      	ldrb	r3, [r7, #23]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d109      	bne.n	800d260 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d24c:	4b2f      	ldr	r3, [pc, #188]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d24e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d250:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d258:	492c      	ldr	r1, [pc, #176]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d25a:	4313      	orrs	r3, r2
 800d25c:	650b      	str	r3, [r1, #80]	; 0x50
 800d25e:	e001      	b.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d260:	7dfb      	ldrb	r3, [r7, #23]
 800d262:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d032      	beq.n	800d2d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d274:	2b03      	cmp	r3, #3
 800d276:	d81b      	bhi.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800d278:	a201      	add	r2, pc, #4	; (adr r2, 800d280 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800d27a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d27e:	bf00      	nop
 800d280:	0800d2b7 	.word	0x0800d2b7
 800d284:	0800d291 	.word	0x0800d291
 800d288:	0800d29f 	.word	0x0800d29f
 800d28c:	0800d2b7 	.word	0x0800d2b7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d290:	4b1e      	ldr	r3, [pc, #120]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d294:	4a1d      	ldr	r2, [pc, #116]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d29a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800d29c:	e00c      	b.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	3304      	adds	r3, #4
 800d2a2:	2102      	movs	r1, #2
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f001 fc67 	bl	800eb78 <RCCEx_PLL2_Config>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800d2ae:	e003      	b.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	75fb      	strb	r3, [r7, #23]
      break;
 800d2b4:	e000      	b.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800d2b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d2b8:	7dfb      	ldrb	r3, [r7, #23]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d109      	bne.n	800d2d2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d2be:	4b13      	ldr	r3, [pc, #76]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2c2:	f023 0203 	bic.w	r2, r3, #3
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ca:	4910      	ldr	r1, [pc, #64]	; (800d30c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d2d0:	e001      	b.n	800d2d6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2d2:	7dfb      	ldrb	r3, [r7, #23]
 800d2d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 808a 	beq.w	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d2e4:	4b0a      	ldr	r3, [pc, #40]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	4a09      	ldr	r2, [pc, #36]	; (800d310 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800d2ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d2f0:	f7f7 fe68 	bl	8004fc4 <HAL_GetTick>
 800d2f4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d2f6:	e00d      	b.n	800d314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d2f8:	f7f7 fe64 	bl	8004fc4 <HAL_GetTick>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	2b64      	cmp	r3, #100	; 0x64
 800d304:	d906      	bls.n	800d314 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800d306:	2303      	movs	r3, #3
 800d308:	75fb      	strb	r3, [r7, #23]
        break;
 800d30a:	e009      	b.n	800d320 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800d30c:	58024400 	.word	0x58024400
 800d310:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d314:	4bb9      	ldr	r3, [pc, #740]	; (800d5fc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d0eb      	beq.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800d320:	7dfb      	ldrb	r3, [r7, #23]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d166      	bne.n	800d3f4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d326:	4bb6      	ldr	r3, [pc, #728]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d330:	4053      	eors	r3, r2
 800d332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d336:	2b00      	cmp	r3, #0
 800d338:	d013      	beq.n	800d362 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d33a:	4bb1      	ldr	r3, [pc, #708]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d33e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d342:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d344:	4bae      	ldr	r3, [pc, #696]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d348:	4aad      	ldr	r2, [pc, #692]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d34a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d34e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d350:	4bab      	ldr	r3, [pc, #684]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d354:	4aaa      	ldr	r2, [pc, #680]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d35a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d35c:	4aa8      	ldr	r2, [pc, #672]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d36c:	d115      	bne.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d36e:	f7f7 fe29 	bl	8004fc4 <HAL_GetTick>
 800d372:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d374:	e00b      	b.n	800d38e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d376:	f7f7 fe25 	bl	8004fc4 <HAL_GetTick>
 800d37a:	4602      	mov	r2, r0
 800d37c:	693b      	ldr	r3, [r7, #16]
 800d37e:	1ad3      	subs	r3, r2, r3
 800d380:	f241 3288 	movw	r2, #5000	; 0x1388
 800d384:	4293      	cmp	r3, r2
 800d386:	d902      	bls.n	800d38e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800d388:	2303      	movs	r3, #3
 800d38a:	75fb      	strb	r3, [r7, #23]
            break;
 800d38c:	e005      	b.n	800d39a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d38e:	4b9c      	ldr	r3, [pc, #624]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d392:	f003 0302 	and.w	r3, r3, #2
 800d396:	2b00      	cmp	r3, #0
 800d398:	d0ed      	beq.n	800d376 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800d39a:	7dfb      	ldrb	r3, [r7, #23]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d126      	bne.n	800d3ee <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d3a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d3aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d3ae:	d10d      	bne.n	800d3cc <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800d3b0:	4b93      	ldr	r3, [pc, #588]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d3b2:	691b      	ldr	r3, [r3, #16]
 800d3b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d3be:	0919      	lsrs	r1, r3, #4
 800d3c0:	4b90      	ldr	r3, [pc, #576]	; (800d604 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800d3c2:	400b      	ands	r3, r1
 800d3c4:	498e      	ldr	r1, [pc, #568]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	610b      	str	r3, [r1, #16]
 800d3ca:	e005      	b.n	800d3d8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800d3cc:	4b8c      	ldr	r3, [pc, #560]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	4a8b      	ldr	r2, [pc, #556]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d3d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d3d6:	6113      	str	r3, [r2, #16]
 800d3d8:	4b89      	ldr	r3, [pc, #548]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d3da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d3e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d3e6:	4986      	ldr	r1, [pc, #536]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d3e8:	4313      	orrs	r3, r2
 800d3ea:	670b      	str	r3, [r1, #112]	; 0x70
 800d3ec:	e004      	b.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d3ee:	7dfb      	ldrb	r3, [r7, #23]
 800d3f0:	75bb      	strb	r3, [r7, #22]
 800d3f2:	e001      	b.n	800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3f4:	7dfb      	ldrb	r3, [r7, #23]
 800d3f6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	2b00      	cmp	r3, #0
 800d402:	d07e      	beq.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d408:	2b28      	cmp	r3, #40	; 0x28
 800d40a:	d867      	bhi.n	800d4dc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800d40c:	a201      	add	r2, pc, #4	; (adr r2, 800d414 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800d40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d412:	bf00      	nop
 800d414:	0800d4e3 	.word	0x0800d4e3
 800d418:	0800d4dd 	.word	0x0800d4dd
 800d41c:	0800d4dd 	.word	0x0800d4dd
 800d420:	0800d4dd 	.word	0x0800d4dd
 800d424:	0800d4dd 	.word	0x0800d4dd
 800d428:	0800d4dd 	.word	0x0800d4dd
 800d42c:	0800d4dd 	.word	0x0800d4dd
 800d430:	0800d4dd 	.word	0x0800d4dd
 800d434:	0800d4b9 	.word	0x0800d4b9
 800d438:	0800d4dd 	.word	0x0800d4dd
 800d43c:	0800d4dd 	.word	0x0800d4dd
 800d440:	0800d4dd 	.word	0x0800d4dd
 800d444:	0800d4dd 	.word	0x0800d4dd
 800d448:	0800d4dd 	.word	0x0800d4dd
 800d44c:	0800d4dd 	.word	0x0800d4dd
 800d450:	0800d4dd 	.word	0x0800d4dd
 800d454:	0800d4cb 	.word	0x0800d4cb
 800d458:	0800d4dd 	.word	0x0800d4dd
 800d45c:	0800d4dd 	.word	0x0800d4dd
 800d460:	0800d4dd 	.word	0x0800d4dd
 800d464:	0800d4dd 	.word	0x0800d4dd
 800d468:	0800d4dd 	.word	0x0800d4dd
 800d46c:	0800d4dd 	.word	0x0800d4dd
 800d470:	0800d4dd 	.word	0x0800d4dd
 800d474:	0800d4e3 	.word	0x0800d4e3
 800d478:	0800d4dd 	.word	0x0800d4dd
 800d47c:	0800d4dd 	.word	0x0800d4dd
 800d480:	0800d4dd 	.word	0x0800d4dd
 800d484:	0800d4dd 	.word	0x0800d4dd
 800d488:	0800d4dd 	.word	0x0800d4dd
 800d48c:	0800d4dd 	.word	0x0800d4dd
 800d490:	0800d4dd 	.word	0x0800d4dd
 800d494:	0800d4e3 	.word	0x0800d4e3
 800d498:	0800d4dd 	.word	0x0800d4dd
 800d49c:	0800d4dd 	.word	0x0800d4dd
 800d4a0:	0800d4dd 	.word	0x0800d4dd
 800d4a4:	0800d4dd 	.word	0x0800d4dd
 800d4a8:	0800d4dd 	.word	0x0800d4dd
 800d4ac:	0800d4dd 	.word	0x0800d4dd
 800d4b0:	0800d4dd 	.word	0x0800d4dd
 800d4b4:	0800d4e3 	.word	0x0800d4e3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	2101      	movs	r1, #1
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f001 fb5a 	bl	800eb78 <RCCEx_PLL2_Config>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800d4c8:	e00c      	b.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	3324      	adds	r3, #36	; 0x24
 800d4ce:	2101      	movs	r1, #1
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f001 fc03 	bl	800ecdc <RCCEx_PLL3_Config>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800d4da:	e003      	b.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	75fb      	strb	r3, [r7, #23]
      break;
 800d4e0:	e000      	b.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800d4e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d4e4:	7dfb      	ldrb	r3, [r7, #23]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d109      	bne.n	800d4fe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d4ea:	4b45      	ldr	r3, [pc, #276]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4ee:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d4f6:	4942      	ldr	r1, [pc, #264]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d4f8:	4313      	orrs	r3, r2
 800d4fa:	654b      	str	r3, [r1, #84]	; 0x54
 800d4fc:	e001      	b.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4fe:	7dfb      	ldrb	r3, [r7, #23]
 800d500:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f003 0302 	and.w	r3, r3, #2
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d037      	beq.n	800d57e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d512:	2b05      	cmp	r3, #5
 800d514:	d820      	bhi.n	800d558 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800d516:	a201      	add	r2, pc, #4	; (adr r2, 800d51c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800d518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d51c:	0800d55f 	.word	0x0800d55f
 800d520:	0800d535 	.word	0x0800d535
 800d524:	0800d547 	.word	0x0800d547
 800d528:	0800d55f 	.word	0x0800d55f
 800d52c:	0800d55f 	.word	0x0800d55f
 800d530:	0800d55f 	.word	0x0800d55f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	3304      	adds	r3, #4
 800d538:	2101      	movs	r1, #1
 800d53a:	4618      	mov	r0, r3
 800d53c:	f001 fb1c 	bl	800eb78 <RCCEx_PLL2_Config>
 800d540:	4603      	mov	r3, r0
 800d542:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800d544:	e00c      	b.n	800d560 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	3324      	adds	r3, #36	; 0x24
 800d54a:	2101      	movs	r1, #1
 800d54c:	4618      	mov	r0, r3
 800d54e:	f001 fbc5 	bl	800ecdc <RCCEx_PLL3_Config>
 800d552:	4603      	mov	r3, r0
 800d554:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800d556:	e003      	b.n	800d560 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d558:	2301      	movs	r3, #1
 800d55a:	75fb      	strb	r3, [r7, #23]
      break;
 800d55c:	e000      	b.n	800d560 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800d55e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d560:	7dfb      	ldrb	r3, [r7, #23]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d109      	bne.n	800d57a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d566:	4b26      	ldr	r3, [pc, #152]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d56a:	f023 0207 	bic.w	r2, r3, #7
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d572:	4923      	ldr	r1, [pc, #140]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d574:	4313      	orrs	r3, r2
 800d576:	654b      	str	r3, [r1, #84]	; 0x54
 800d578:	e001      	b.n	800d57e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d57a:	7dfb      	ldrb	r3, [r7, #23]
 800d57c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f003 0304 	and.w	r3, r3, #4
 800d586:	2b00      	cmp	r3, #0
 800d588:	d040      	beq.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d590:	2b05      	cmp	r3, #5
 800d592:	d821      	bhi.n	800d5d8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800d594:	a201      	add	r2, pc, #4	; (adr r2, 800d59c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800d596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d59a:	bf00      	nop
 800d59c:	0800d5df 	.word	0x0800d5df
 800d5a0:	0800d5b5 	.word	0x0800d5b5
 800d5a4:	0800d5c7 	.word	0x0800d5c7
 800d5a8:	0800d5df 	.word	0x0800d5df
 800d5ac:	0800d5df 	.word	0x0800d5df
 800d5b0:	0800d5df 	.word	0x0800d5df
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	3304      	adds	r3, #4
 800d5b8:	2101      	movs	r1, #1
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f001 fadc 	bl	800eb78 <RCCEx_PLL2_Config>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800d5c4:	e00c      	b.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	3324      	adds	r3, #36	; 0x24
 800d5ca:	2101      	movs	r1, #1
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f001 fb85 	bl	800ecdc <RCCEx_PLL3_Config>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800d5d6:	e003      	b.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	75fb      	strb	r3, [r7, #23]
      break;
 800d5dc:	e000      	b.n	800d5e0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800d5de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d5e0:	7dfb      	ldrb	r3, [r7, #23]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d110      	bne.n	800d608 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d5e6:	4b06      	ldr	r3, [pc, #24]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5ea:	f023 0207 	bic.w	r2, r3, #7
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5f4:	4902      	ldr	r1, [pc, #8]	; (800d600 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	658b      	str	r3, [r1, #88]	; 0x58
 800d5fa:	e007      	b.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800d5fc:	58024800 	.word	0x58024800
 800d600:	58024400 	.word	0x58024400
 800d604:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d608:	7dfb      	ldrb	r3, [r7, #23]
 800d60a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f003 0320 	and.w	r3, r3, #32
 800d614:	2b00      	cmp	r3, #0
 800d616:	d04b      	beq.n	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d61e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d622:	d02e      	beq.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800d624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d628:	d828      	bhi.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800d62a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d62e:	d02a      	beq.n	800d686 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800d630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d634:	d822      	bhi.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800d636:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d63a:	d026      	beq.n	800d68a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800d63c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d640:	d81c      	bhi.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800d642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d646:	d010      	beq.n	800d66a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800d648:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d64c:	d816      	bhi.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d01d      	beq.n	800d68e <HAL_RCCEx_PeriphCLKConfig+0x972>
 800d652:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d656:	d111      	bne.n	800d67c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	3304      	adds	r3, #4
 800d65c:	2100      	movs	r1, #0
 800d65e:	4618      	mov	r0, r3
 800d660:	f001 fa8a 	bl	800eb78 <RCCEx_PLL2_Config>
 800d664:	4603      	mov	r3, r0
 800d666:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800d668:	e012      	b.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	3324      	adds	r3, #36	; 0x24
 800d66e:	2102      	movs	r1, #2
 800d670:	4618      	mov	r0, r3
 800d672:	f001 fb33 	bl	800ecdc <RCCEx_PLL3_Config>
 800d676:	4603      	mov	r3, r0
 800d678:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800d67a:	e009      	b.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d67c:	2301      	movs	r3, #1
 800d67e:	75fb      	strb	r3, [r7, #23]
      break;
 800d680:	e006      	b.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800d682:	bf00      	nop
 800d684:	e004      	b.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800d686:	bf00      	nop
 800d688:	e002      	b.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800d68a:	bf00      	nop
 800d68c:	e000      	b.n	800d690 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800d68e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d690:	7dfb      	ldrb	r3, [r7, #23]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d10a      	bne.n	800d6ac <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d696:	4bb2      	ldr	r3, [pc, #712]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d69a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d6a4:	49ae      	ldr	r1, [pc, #696]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	654b      	str	r3, [r1, #84]	; 0x54
 800d6aa:	e001      	b.n	800d6b0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6ac:	7dfb      	ldrb	r3, [r7, #23]
 800d6ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d04b      	beq.n	800d754 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6c2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d6c6:	d02e      	beq.n	800d726 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800d6c8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d6cc:	d828      	bhi.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800d6ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6d2:	d02a      	beq.n	800d72a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800d6d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6d8:	d822      	bhi.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800d6da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d6de:	d026      	beq.n	800d72e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800d6e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d6e4:	d81c      	bhi.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800d6e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6ea:	d010      	beq.n	800d70e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800d6ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d6f0:	d816      	bhi.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d01d      	beq.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800d6f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d6fa:	d111      	bne.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	3304      	adds	r3, #4
 800d700:	2100      	movs	r1, #0
 800d702:	4618      	mov	r0, r3
 800d704:	f001 fa38 	bl	800eb78 <RCCEx_PLL2_Config>
 800d708:	4603      	mov	r3, r0
 800d70a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800d70c:	e012      	b.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3324      	adds	r3, #36	; 0x24
 800d712:	2102      	movs	r1, #2
 800d714:	4618      	mov	r0, r3
 800d716:	f001 fae1 	bl	800ecdc <RCCEx_PLL3_Config>
 800d71a:	4603      	mov	r3, r0
 800d71c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800d71e:	e009      	b.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d720:	2301      	movs	r3, #1
 800d722:	75fb      	strb	r3, [r7, #23]
      break;
 800d724:	e006      	b.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800d726:	bf00      	nop
 800d728:	e004      	b.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800d72a:	bf00      	nop
 800d72c:	e002      	b.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800d72e:	bf00      	nop
 800d730:	e000      	b.n	800d734 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800d732:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d734:	7dfb      	ldrb	r3, [r7, #23]
 800d736:	2b00      	cmp	r3, #0
 800d738:	d10a      	bne.n	800d750 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d73a:	4b89      	ldr	r3, [pc, #548]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d73c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d73e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d748:	4985      	ldr	r1, [pc, #532]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d74a:	4313      	orrs	r3, r2
 800d74c:	658b      	str	r3, [r1, #88]	; 0x58
 800d74e:	e001      	b.n	800d754 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d750:	7dfb      	ldrb	r3, [r7, #23]
 800d752:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d04b      	beq.n	800d7f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d766:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d76a:	d02e      	beq.n	800d7ca <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800d76c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d770:	d828      	bhi.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800d772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d776:	d02a      	beq.n	800d7ce <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800d778:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d77c:	d822      	bhi.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800d77e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d782:	d026      	beq.n	800d7d2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800d784:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d788:	d81c      	bhi.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800d78a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d78e:	d010      	beq.n	800d7b2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800d790:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d794:	d816      	bhi.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800d796:	2b00      	cmp	r3, #0
 800d798:	d01d      	beq.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800d79a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d79e:	d111      	bne.n	800d7c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	3304      	adds	r3, #4
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f001 f9e6 	bl	800eb78 <RCCEx_PLL2_Config>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800d7b0:	e012      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	3324      	adds	r3, #36	; 0x24
 800d7b6:	2102      	movs	r1, #2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f001 fa8f 	bl	800ecdc <RCCEx_PLL3_Config>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800d7c2:	e009      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	75fb      	strb	r3, [r7, #23]
      break;
 800d7c8:	e006      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800d7ca:	bf00      	nop
 800d7cc:	e004      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800d7ce:	bf00      	nop
 800d7d0:	e002      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800d7d2:	bf00      	nop
 800d7d4:	e000      	b.n	800d7d8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800d7d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d7d8:	7dfb      	ldrb	r3, [r7, #23]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10a      	bne.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d7de:	4b60      	ldr	r3, [pc, #384]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d7e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d7e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d7ec:	495c      	ldr	r1, [pc, #368]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	658b      	str	r3, [r1, #88]	; 0x58
 800d7f2:	e001      	b.n	800d7f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7f4:	7dfb      	ldrb	r3, [r7, #23]
 800d7f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f003 0308 	and.w	r3, r3, #8
 800d800:	2b00      	cmp	r3, #0
 800d802:	d018      	beq.n	800d836 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d80c:	d10a      	bne.n	800d824 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	3324      	adds	r3, #36	; 0x24
 800d812:	2102      	movs	r1, #2
 800d814:	4618      	mov	r0, r3
 800d816:	f001 fa61 	bl	800ecdc <RCCEx_PLL3_Config>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d001      	beq.n	800d824 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800d824:	4b4e      	ldr	r3, [pc, #312]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d828:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d830:	494b      	ldr	r1, [pc, #300]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d832:	4313      	orrs	r3, r2
 800d834:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	f003 0310 	and.w	r3, r3, #16
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d01a      	beq.n	800d878 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d848:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d84c:	d10a      	bne.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	3324      	adds	r3, #36	; 0x24
 800d852:	2102      	movs	r1, #2
 800d854:	4618      	mov	r0, r3
 800d856:	f001 fa41 	bl	800ecdc <RCCEx_PLL3_Config>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d001      	beq.n	800d864 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800d860:	2301      	movs	r3, #1
 800d862:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d864:	4b3e      	ldr	r3, [pc, #248]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d868:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d872:	493b      	ldr	r1, [pc, #236]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d874:	4313      	orrs	r3, r2
 800d876:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d880:	2b00      	cmp	r3, #0
 800d882:	d034      	beq.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d88a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d88e:	d01d      	beq.n	800d8cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800d890:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d894:	d817      	bhi.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800d896:	2b00      	cmp	r3, #0
 800d898:	d003      	beq.n	800d8a2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800d89a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d89e:	d009      	beq.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800d8a0:	e011      	b.n	800d8c6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	3304      	adds	r3, #4
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f001 f965 	bl	800eb78 <RCCEx_PLL2_Config>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d8b2:	e00c      	b.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	3324      	adds	r3, #36	; 0x24
 800d8b8:	2102      	movs	r1, #2
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f001 fa0e 	bl	800ecdc <RCCEx_PLL3_Config>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d8c4:	e003      	b.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	75fb      	strb	r3, [r7, #23]
      break;
 800d8ca:	e000      	b.n	800d8ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800d8cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d8ce:	7dfb      	ldrb	r3, [r7, #23]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d10a      	bne.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d8d4:	4b22      	ldr	r3, [pc, #136]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d8d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d8d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d8e2:	491f      	ldr	r1, [pc, #124]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	658b      	str	r3, [r1, #88]	; 0x58
 800d8e8:	e001      	b.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d8ea:	7dfb      	ldrb	r3, [r7, #23]
 800d8ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d036      	beq.n	800d968 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d904:	d01c      	beq.n	800d940 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800d906:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d90a:	d816      	bhi.n	800d93a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800d90c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d910:	d003      	beq.n	800d91a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800d912:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d916:	d007      	beq.n	800d928 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800d918:	e00f      	b.n	800d93a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d91a:	4b11      	ldr	r3, [pc, #68]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d91e:	4a10      	ldr	r2, [pc, #64]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d924:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800d926:	e00c      	b.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	3324      	adds	r3, #36	; 0x24
 800d92c:	2101      	movs	r1, #1
 800d92e:	4618      	mov	r0, r3
 800d930:	f001 f9d4 	bl	800ecdc <RCCEx_PLL3_Config>
 800d934:	4603      	mov	r3, r0
 800d936:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800d938:	e003      	b.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d93a:	2301      	movs	r3, #1
 800d93c:	75fb      	strb	r3, [r7, #23]
      break;
 800d93e:	e000      	b.n	800d942 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800d940:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d942:	7dfb      	ldrb	r3, [r7, #23]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10d      	bne.n	800d964 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d948:	4b05      	ldr	r3, [pc, #20]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d94a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d94c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d956:	4902      	ldr	r1, [pc, #8]	; (800d960 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800d958:	4313      	orrs	r3, r2
 800d95a:	654b      	str	r3, [r1, #84]	; 0x54
 800d95c:	e004      	b.n	800d968 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800d95e:	bf00      	nop
 800d960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d964:	7dfb      	ldrb	r3, [r7, #23]
 800d966:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d970:	2b00      	cmp	r3, #0
 800d972:	d029      	beq.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d003      	beq.n	800d984 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800d97c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d980:	d007      	beq.n	800d992 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800d982:	e00f      	b.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d984:	4b61      	ldr	r3, [pc, #388]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d988:	4a60      	ldr	r2, [pc, #384]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d98a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d98e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d990:	e00b      	b.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	3304      	adds	r3, #4
 800d996:	2102      	movs	r1, #2
 800d998:	4618      	mov	r0, r3
 800d99a:	f001 f8ed 	bl	800eb78 <RCCEx_PLL2_Config>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d9a2:	e002      	b.n	800d9aa <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	75fb      	strb	r3, [r7, #23]
      break;
 800d9a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d109      	bne.n	800d9c4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d9b0:	4b56      	ldr	r3, [pc, #344]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d9b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9bc:	4953      	ldr	r1, [pc, #332]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d9c2:	e001      	b.n	800d9c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9c4:	7dfb      	ldrb	r3, [r7, #23]
 800d9c6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d00a      	beq.n	800d9ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	3324      	adds	r3, #36	; 0x24
 800d9d8:	2102      	movs	r1, #2
 800d9da:	4618      	mov	r0, r3
 800d9dc:	f001 f97e 	bl	800ecdc <RCCEx_PLL3_Config>
 800d9e0:	4603      	mov	r3, r0
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d001      	beq.n	800d9ea <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800d9e6:	2301      	movs	r3, #1
 800d9e8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d030      	beq.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d9fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d9fe:	d017      	beq.n	800da30 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800da00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800da04:	d811      	bhi.n	800da2a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800da06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da0a:	d013      	beq.n	800da34 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800da0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da10:	d80b      	bhi.n	800da2a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800da12:	2b00      	cmp	r3, #0
 800da14:	d010      	beq.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800da16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da1a:	d106      	bne.n	800da2a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800da1c:	4b3b      	ldr	r3, [pc, #236]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800da1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da20:	4a3a      	ldr	r2, [pc, #232]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800da22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800da26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800da28:	e007      	b.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800da2a:	2301      	movs	r3, #1
 800da2c:	75fb      	strb	r3, [r7, #23]
      break;
 800da2e:	e004      	b.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800da30:	bf00      	nop
 800da32:	e002      	b.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800da34:	bf00      	nop
 800da36:	e000      	b.n	800da3a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800da38:	bf00      	nop
    }

    if(ret == HAL_OK)
 800da3a:	7dfb      	ldrb	r3, [r7, #23]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d109      	bne.n	800da54 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800da40:	4b32      	ldr	r3, [pc, #200]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800da42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da4c:	492f      	ldr	r1, [pc, #188]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800da4e:	4313      	orrs	r3, r2
 800da50:	654b      	str	r3, [r1, #84]	; 0x54
 800da52:	e001      	b.n	800da58 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800da54:	7dfb      	ldrb	r3, [r7, #23]
 800da56:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da60:	2b00      	cmp	r3, #0
 800da62:	d008      	beq.n	800da76 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800da64:	4b29      	ldr	r3, [pc, #164]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800da66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da68:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da70:	4926      	ldr	r1, [pc, #152]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800da72:	4313      	orrs	r3, r2
 800da74:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d008      	beq.n	800da94 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800da82:	4b22      	ldr	r3, [pc, #136]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800da84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800da86:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da8e:	491f      	ldr	r1, [pc, #124]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800da90:	4313      	orrs	r3, r2
 800da92:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d00d      	beq.n	800dabc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800daa0:	4b1a      	ldr	r3, [pc, #104]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	4a19      	ldr	r2, [pc, #100]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800daa6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800daaa:	6113      	str	r3, [r2, #16]
 800daac:	4b17      	ldr	r3, [pc, #92]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800daae:	691a      	ldr	r2, [r3, #16]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800dab6:	4915      	ldr	r1, [pc, #84]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800dab8:	4313      	orrs	r3, r2
 800daba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	da08      	bge.n	800dad6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800dac4:	4b11      	ldr	r3, [pc, #68]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800dac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dac8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dad0:	490e      	ldr	r1, [pc, #56]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800dad2:	4313      	orrs	r3, r2
 800dad4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d009      	beq.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dae2:	4b0a      	ldr	r3, [pc, #40]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800dae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dae6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800daf0:	4906      	ldr	r1, [pc, #24]	; (800db0c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800daf2:	4313      	orrs	r3, r2
 800daf4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800daf6:	7dbb      	ldrb	r3, [r7, #22]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d101      	bne.n	800db00 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	e000      	b.n	800db02 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800db00:	2301      	movs	r3, #1
}
 800db02:	4618      	mov	r0, r3
 800db04:	3718      	adds	r7, #24
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
 800db0a:	bf00      	nop
 800db0c:	58024400 	.word	0x58024400

0800db10 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b090      	sub	sp, #64	; 0x40
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db1e:	f040 8089 	bne.w	800dc34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800db22:	4b95      	ldr	r3, [pc, #596]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800db24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db26:	f003 0307 	and.w	r3, r3, #7
 800db2a:	633b      	str	r3, [r7, #48]	; 0x30
 800db2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2e:	2b04      	cmp	r3, #4
 800db30:	d87d      	bhi.n	800dc2e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800db32:	a201      	add	r2, pc, #4	; (adr r2, 800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800db34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db38:	0800db4d 	.word	0x0800db4d
 800db3c:	0800db71 	.word	0x0800db71
 800db40:	0800db95 	.word	0x0800db95
 800db44:	0800dc29 	.word	0x0800dc29
 800db48:	0800dbb9 	.word	0x0800dbb9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800db4c:	4b8a      	ldr	r3, [pc, #552]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db58:	d107      	bne.n	800db6a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800db5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db5e:	4618      	mov	r0, r3
 800db60:	f000 feb8 	bl	800e8d4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800db64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800db68:	e3ed      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800db6e:	e3ea      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800db70:	4b81      	ldr	r3, [pc, #516]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800db78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800db7c:	d107      	bne.n	800db8e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db7e:	f107 0318 	add.w	r3, r7, #24
 800db82:	4618      	mov	r0, r3
 800db84:	f000 fbfe 	bl	800e384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800db88:	69bb      	ldr	r3, [r7, #24]
 800db8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800db8c:	e3db      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800db8e:	2300      	movs	r3, #0
 800db90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800db92:	e3d8      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800db94:	4b78      	ldr	r3, [pc, #480]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800db9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dba0:	d107      	bne.n	800dbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dba2:	f107 030c 	add.w	r3, r7, #12
 800dba6:	4618      	mov	r0, r3
 800dba8:	f000 fd40 	bl	800e62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800dbb0:	e3c9      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dbb6:	e3c6      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800dbb8:	4b6f      	ldr	r3, [pc, #444]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dbba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dbc0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dbc2:	4b6d      	ldr	r3, [pc, #436]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f003 0304 	and.w	r3, r3, #4
 800dbca:	2b04      	cmp	r3, #4
 800dbcc:	d10c      	bne.n	800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800dbce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d109      	bne.n	800dbe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dbd4:	4b68      	ldr	r3, [pc, #416]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	08db      	lsrs	r3, r3, #3
 800dbda:	f003 0303 	and.w	r3, r3, #3
 800dbde:	4a67      	ldr	r2, [pc, #412]	; (800dd7c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800dbe0:	fa22 f303 	lsr.w	r3, r2, r3
 800dbe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dbe6:	e01e      	b.n	800dc26 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dbe8:	4b63      	ldr	r3, [pc, #396]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbf4:	d106      	bne.n	800dc04 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800dbf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dbfc:	d102      	bne.n	800dc04 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800dbfe:	4b60      	ldr	r3, [pc, #384]	; (800dd80 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800dc00:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc02:	e010      	b.n	800dc26 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dc04:	4b5c      	ldr	r3, [pc, #368]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc10:	d106      	bne.n	800dc20 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800dc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dc18:	d102      	bne.n	800dc20 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800dc1a:	4b5a      	ldr	r3, [pc, #360]	; (800dd84 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800dc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dc1e:	e002      	b.n	800dc26 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800dc20:	2300      	movs	r3, #0
 800dc22:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800dc24:	e38f      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800dc26:	e38e      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800dc28:	4b57      	ldr	r3, [pc, #348]	; (800dd88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dc2c:	e38b      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dc32:	e388      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc3a:	f040 80a7 	bne.w	800dd8c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800dc3e:	4b4e      	ldr	r3, [pc, #312]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dc40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc42:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800dc46:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800dc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dc4e:	d054      	beq.n	800dcfa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800dc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dc56:	f200 808b 	bhi.w	800dd70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800dc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dc60:	f000 8083 	beq.w	800dd6a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800dc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800dc6a:	f200 8081 	bhi.w	800dd70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800dc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc74:	d02f      	beq.n	800dcd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800dc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc7c:	d878      	bhi.n	800dd70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800dc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d004      	beq.n	800dc8e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800dc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dc8a:	d012      	beq.n	800dcb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800dc8c:	e070      	b.n	800dd70 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dc8e:	4b3a      	ldr	r3, [pc, #232]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dc9a:	d107      	bne.n	800dcac <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dc9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dca0:	4618      	mov	r0, r3
 800dca2:	f000 fe17 	bl	800e8d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dca8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800dcaa:	e34c      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800dcac:	2300      	movs	r3, #0
 800dcae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dcb0:	e349      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dcb2:	4b31      	ldr	r3, [pc, #196]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dcba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800dcbe:	d107      	bne.n	800dcd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcc0:	f107 0318 	add.w	r3, r7, #24
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f000 fb5d 	bl	800e384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800dcce:	e33a      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dcd4:	e337      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dcd6:	4b28      	ldr	r3, [pc, #160]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dcde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dce2:	d107      	bne.n	800dcf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dce4:	f107 030c 	add.w	r3, r7, #12
 800dce8:	4618      	mov	r0, r3
 800dcea:	f000 fc9f 	bl	800e62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800dcf2:	e328      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dcf8:	e325      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800dcfa:	4b1f      	ldr	r3, [pc, #124]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dcfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dd02:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dd04:	4b1c      	ldr	r3, [pc, #112]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f003 0304 	and.w	r3, r3, #4
 800dd0c:	2b04      	cmp	r3, #4
 800dd0e:	d10c      	bne.n	800dd2a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800dd10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d109      	bne.n	800dd2a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dd16:	4b18      	ldr	r3, [pc, #96]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	08db      	lsrs	r3, r3, #3
 800dd1c:	f003 0303 	and.w	r3, r3, #3
 800dd20:	4a16      	ldr	r2, [pc, #88]	; (800dd7c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800dd22:	fa22 f303 	lsr.w	r3, r2, r3
 800dd26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd28:	e01e      	b.n	800dd68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dd2a:	4b13      	ldr	r3, [pc, #76]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd36:	d106      	bne.n	800dd46 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800dd38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd3e:	d102      	bne.n	800dd46 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800dd40:	4b0f      	ldr	r3, [pc, #60]	; (800dd80 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800dd42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd44:	e010      	b.n	800dd68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dd46:	4b0c      	ldr	r3, [pc, #48]	; (800dd78 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dd52:	d106      	bne.n	800dd62 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800dd54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dd5a:	d102      	bne.n	800dd62 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800dd5c:	4b09      	ldr	r3, [pc, #36]	; (800dd84 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800dd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dd60:	e002      	b.n	800dd68 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800dd66:	e2ee      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800dd68:	e2ed      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800dd6a:	4b07      	ldr	r3, [pc, #28]	; (800dd88 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800dd6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dd6e:	e2ea      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800dd70:	2300      	movs	r3, #0
 800dd72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dd74:	e2e7      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800dd76:	bf00      	nop
 800dd78:	58024400 	.word	0x58024400
 800dd7c:	03d09000 	.word	0x03d09000
 800dd80:	003d0900 	.word	0x003d0900
 800dd84:	017d7840 	.word	0x017d7840
 800dd88:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd92:	f040 809c 	bne.w	800dece <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800dd96:	4b9e      	ldr	r3, [pc, #632]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800dd98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd9a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800dd9e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800dda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dda6:	d054      	beq.n	800de52 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800dda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddaa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ddae:	f200 808b 	bhi.w	800dec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ddb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ddb8:	f000 8083 	beq.w	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ddbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ddc2:	f200 8081 	bhi.w	800dec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ddc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ddcc:	d02f      	beq.n	800de2e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ddce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ddd4:	d878      	bhi.n	800dec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800ddd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d004      	beq.n	800dde6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800dddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dde2:	d012      	beq.n	800de0a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800dde4:	e070      	b.n	800dec8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dde6:	4b8a      	ldr	r3, [pc, #552]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ddee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ddf2:	d107      	bne.n	800de04 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ddf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f000 fd6b 	bl	800e8d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ddfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800de02:	e2a0      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800de04:	2300      	movs	r3, #0
 800de06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800de08:	e29d      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800de0a:	4b81      	ldr	r3, [pc, #516]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800de16:	d107      	bne.n	800de28 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de18:	f107 0318 	add.w	r3, r7, #24
 800de1c:	4618      	mov	r0, r3
 800de1e:	f000 fab1 	bl	800e384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800de26:	e28e      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800de28:	2300      	movs	r3, #0
 800de2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800de2c:	e28b      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800de2e:	4b78      	ldr	r3, [pc, #480]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800de3a:	d107      	bne.n	800de4c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de3c:	f107 030c 	add.w	r3, r7, #12
 800de40:	4618      	mov	r0, r3
 800de42:	f000 fbf3 	bl	800e62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800de4a:	e27c      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800de4c:	2300      	movs	r3, #0
 800de4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800de50:	e279      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800de52:	4b6f      	ldr	r3, [pc, #444]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800de54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800de56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800de5a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800de5c:	4b6c      	ldr	r3, [pc, #432]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f003 0304 	and.w	r3, r3, #4
 800de64:	2b04      	cmp	r3, #4
 800de66:	d10c      	bne.n	800de82 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800de68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d109      	bne.n	800de82 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800de6e:	4b68      	ldr	r3, [pc, #416]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	08db      	lsrs	r3, r3, #3
 800de74:	f003 0303 	and.w	r3, r3, #3
 800de78:	4a66      	ldr	r2, [pc, #408]	; (800e014 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800de7a:	fa22 f303 	lsr.w	r3, r2, r3
 800de7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de80:	e01e      	b.n	800dec0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800de82:	4b63      	ldr	r3, [pc, #396]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de8e:	d106      	bne.n	800de9e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800de90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800de96:	d102      	bne.n	800de9e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800de98:	4b5f      	ldr	r3, [pc, #380]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800de9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800de9c:	e010      	b.n	800dec0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800de9e:	4b5c      	ldr	r3, [pc, #368]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800deaa:	d106      	bne.n	800deba <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800deac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800deb2:	d102      	bne.n	800deba <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800deb4:	4b59      	ldr	r3, [pc, #356]	; (800e01c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800deb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800deb8:	e002      	b.n	800dec0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800deba:	2300      	movs	r3, #0
 800debc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800debe:	e242      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800dec0:	e241      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800dec2:	4b57      	ldr	r3, [pc, #348]	; (800e020 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800dec4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800dec6:	e23e      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800dec8:	2300      	movs	r3, #0
 800deca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800decc:	e23b      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ded4:	f040 80a6 	bne.w	800e024 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ded8:	4b4d      	ldr	r3, [pc, #308]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800deda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dedc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800dee0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800dee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dee8:	d054      	beq.n	800df94 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800deea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800def0:	f200 808b 	bhi.w	800e00a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800def4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800defa:	f000 8083 	beq.w	800e004 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800defe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800df04:	f200 8081 	bhi.w	800e00a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800df08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df0e:	d02f      	beq.n	800df70 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800df10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800df16:	d878      	bhi.n	800e00a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800df18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d004      	beq.n	800df28 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800df1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df24:	d012      	beq.n	800df4c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800df26:	e070      	b.n	800e00a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800df28:	4b39      	ldr	r3, [pc, #228]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df34:	d107      	bne.n	800df46 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df3a:	4618      	mov	r0, r3
 800df3c:	f000 fcca 	bl	800e8d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800df40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df42:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800df44:	e1ff      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800df46:	2300      	movs	r3, #0
 800df48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800df4a:	e1fc      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800df4c:	4b30      	ldr	r3, [pc, #192]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800df58:	d107      	bne.n	800df6a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df5a:	f107 0318 	add.w	r3, r7, #24
 800df5e:	4618      	mov	r0, r3
 800df60:	f000 fa10 	bl	800e384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800df64:	69bb      	ldr	r3, [r7, #24]
 800df66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800df68:	e1ed      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800df6e:	e1ea      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800df70:	4b27      	ldr	r3, [pc, #156]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800df78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800df7c:	d107      	bne.n	800df8e <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df7e:	f107 030c 	add.w	r3, r7, #12
 800df82:	4618      	mov	r0, r3
 800df84:	f000 fb52 	bl	800e62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800df8c:	e1db      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800df92:	e1d8      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800df94:	4b1e      	ldr	r3, [pc, #120]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800df96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df98:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800df9c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800df9e:	4b1c      	ldr	r3, [pc, #112]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f003 0304 	and.w	r3, r3, #4
 800dfa6:	2b04      	cmp	r3, #4
 800dfa8:	d10c      	bne.n	800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800dfaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d109      	bne.n	800dfc4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dfb0:	4b17      	ldr	r3, [pc, #92]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	08db      	lsrs	r3, r3, #3
 800dfb6:	f003 0303 	and.w	r3, r3, #3
 800dfba:	4a16      	ldr	r2, [pc, #88]	; (800e014 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800dfbc:	fa22 f303 	lsr.w	r3, r2, r3
 800dfc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfc2:	e01e      	b.n	800e002 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dfc4:	4b12      	ldr	r3, [pc, #72]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfd0:	d106      	bne.n	800dfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800dfd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dfd8:	d102      	bne.n	800dfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800dfda:	4b0f      	ldr	r3, [pc, #60]	; (800e018 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800dfdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dfde:	e010      	b.n	800e002 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dfe0:	4b0b      	ldr	r3, [pc, #44]	; (800e010 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dfe8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dfec:	d106      	bne.n	800dffc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800dfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dff4:	d102      	bne.n	800dffc <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800dff6:	4b09      	ldr	r3, [pc, #36]	; (800e01c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800dff8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dffa:	e002      	b.n	800e002 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800dffc:	2300      	movs	r3, #0
 800dffe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800e000:	e1a1      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800e002:	e1a0      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800e004:	4b06      	ldr	r3, [pc, #24]	; (800e020 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800e006:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e008:	e19d      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800e00a:	2300      	movs	r3, #0
 800e00c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e00e:	e19a      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800e010:	58024400 	.word	0x58024400
 800e014:	03d09000 	.word	0x03d09000
 800e018:	003d0900 	.word	0x003d0900
 800e01c:	017d7840 	.word	0x017d7840
 800e020:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800e02a:	d173      	bne.n	800e114 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800e02c:	4b9a      	ldr	r3, [pc, #616]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e02e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800e034:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800e036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e03c:	d02f      	beq.n	800e09e <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800e03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e044:	d863      	bhi.n	800e10e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800e046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d004      	beq.n	800e056 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800e04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e04e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e052:	d012      	beq.n	800e07a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800e054:	e05b      	b.n	800e10e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e056:	4b90      	ldr	r3, [pc, #576]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e05e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e062:	d107      	bne.n	800e074 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e064:	f107 0318 	add.w	r3, r7, #24
 800e068:	4618      	mov	r0, r3
 800e06a:	f000 f98b 	bl	800e384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e072:	e168      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800e074:	2300      	movs	r3, #0
 800e076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e078:	e165      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e07a:	4b87      	ldr	r3, [pc, #540]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e086:	d107      	bne.n	800e098 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e088:	f107 030c 	add.w	r3, r7, #12
 800e08c:	4618      	mov	r0, r3
 800e08e:	f000 facd 	bl	800e62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e096:	e156      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e09c:	e153      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800e09e:	4b7e      	ldr	r3, [pc, #504]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e0a6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e0a8:	4b7b      	ldr	r3, [pc, #492]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f003 0304 	and.w	r3, r3, #4
 800e0b0:	2b04      	cmp	r3, #4
 800e0b2:	d10c      	bne.n	800e0ce <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800e0b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d109      	bne.n	800e0ce <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e0ba:	4b77      	ldr	r3, [pc, #476]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	08db      	lsrs	r3, r3, #3
 800e0c0:	f003 0303 	and.w	r3, r3, #3
 800e0c4:	4a75      	ldr	r2, [pc, #468]	; (800e29c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e0c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0cc:	e01e      	b.n	800e10c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e0ce:	4b72      	ldr	r3, [pc, #456]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0da:	d106      	bne.n	800e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800e0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e0e2:	d102      	bne.n	800e0ea <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800e0e4:	4b6e      	ldr	r3, [pc, #440]	; (800e2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800e0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0e8:	e010      	b.n	800e10c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e0ea:	4b6b      	ldr	r3, [pc, #428]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e0f6:	d106      	bne.n	800e106 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800e0f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e0fe:	d102      	bne.n	800e106 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800e100:	4b68      	ldr	r3, [pc, #416]	; (800e2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800e102:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e104:	e002      	b.n	800e10c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800e106:	2300      	movs	r3, #0
 800e108:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800e10a:	e11c      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800e10c:	e11b      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800e10e:	2300      	movs	r3, #0
 800e110:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e112:	e118      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e11a:	d133      	bne.n	800e184 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800e11c:	4b5e      	ldr	r3, [pc, #376]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e11e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e124:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800e126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d004      	beq.n	800e136 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800e12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e132:	d012      	beq.n	800e15a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800e134:	e023      	b.n	800e17e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e136:	4b58      	ldr	r3, [pc, #352]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e13e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e142:	d107      	bne.n	800e154 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e144:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e148:	4618      	mov	r0, r3
 800e14a:	f000 fbc3 	bl	800e8d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e150:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e152:	e0f8      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800e154:	2300      	movs	r3, #0
 800e156:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e158:	e0f5      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e15a:	4b4f      	ldr	r3, [pc, #316]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e166:	d107      	bne.n	800e178 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e168:	f107 0318 	add.w	r3, r7, #24
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 f909 	bl	800e384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800e172:	6a3b      	ldr	r3, [r7, #32]
 800e174:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e176:	e0e6      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800e178:	2300      	movs	r3, #0
 800e17a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e17c:	e0e3      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800e17e:	2300      	movs	r3, #0
 800e180:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e182:	e0e0      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e18a:	f040 808d 	bne.w	800e2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800e18e:	4b42      	ldr	r3, [pc, #264]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e192:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e196:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800e198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e19a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e19e:	d06b      	beq.n	800e278 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800e1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e1a6:	d874      	bhi.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1ae:	d056      	beq.n	800e25e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800e1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1b6:	d86c      	bhi.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800e1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e1be:	d03b      	beq.n	800e238 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800e1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800e1c6:	d864      	bhi.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800e1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1ce:	d021      	beq.n	800e214 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800e1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e1d6:	d85c      	bhi.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800e1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d004      	beq.n	800e1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800e1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e1e4:	d004      	beq.n	800e1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800e1e6:	e054      	b.n	800e292 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800e1e8:	f000 f8b6 	bl	800e358 <HAL_RCCEx_GetD3PCLK1Freq>
 800e1ec:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800e1ee:	e0aa      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e1f0:	4b29      	ldr	r3, [pc, #164]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e1f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e1fc:	d107      	bne.n	800e20e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1fe:	f107 0318 	add.w	r3, r7, #24
 800e202:	4618      	mov	r0, r3
 800e204:	f000 f8be 	bl	800e384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e20c:	e09b      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800e20e:	2300      	movs	r3, #0
 800e210:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e212:	e098      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e214:	4b20      	ldr	r3, [pc, #128]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e21c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e220:	d107      	bne.n	800e232 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e222:	f107 030c 	add.w	r3, r7, #12
 800e226:	4618      	mov	r0, r3
 800e228:	f000 fa00 	bl	800e62c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e230:	e089      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800e232:	2300      	movs	r3, #0
 800e234:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e236:	e086      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800e238:	4b17      	ldr	r3, [pc, #92]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f003 0304 	and.w	r3, r3, #4
 800e240:	2b04      	cmp	r3, #4
 800e242:	d109      	bne.n	800e258 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e244:	4b14      	ldr	r3, [pc, #80]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	08db      	lsrs	r3, r3, #3
 800e24a:	f003 0303 	and.w	r3, r3, #3
 800e24e:	4a13      	ldr	r2, [pc, #76]	; (800e29c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800e250:	fa22 f303 	lsr.w	r3, r2, r3
 800e254:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e256:	e076      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800e258:	2300      	movs	r3, #0
 800e25a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e25c:	e073      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800e25e:	4b0e      	ldr	r3, [pc, #56]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e26a:	d102      	bne.n	800e272 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800e26c:	4b0c      	ldr	r3, [pc, #48]	; (800e2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800e26e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800e270:	e069      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800e272:	2300      	movs	r3, #0
 800e274:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e276:	e066      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e278:	4b07      	ldr	r3, [pc, #28]	; (800e298 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e284:	d102      	bne.n	800e28c <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800e286:	4b07      	ldr	r3, [pc, #28]	; (800e2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800e288:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e28a:	e05c      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800e28c:	2300      	movs	r3, #0
 800e28e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e290:	e059      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800e292:	2300      	movs	r3, #0
 800e294:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e296:	e056      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800e298:	58024400 	.word	0x58024400
 800e29c:	03d09000 	.word	0x03d09000
 800e2a0:	003d0900 	.word	0x003d0900
 800e2a4:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e2ae:	d148      	bne.n	800e342 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800e2b0:	4b27      	ldr	r3, [pc, #156]	; (800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e2b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e2b8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800e2ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2c0:	d02a      	beq.n	800e318 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800e2c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e2c8:	d838      	bhi.n	800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800e2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d004      	beq.n	800e2da <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800e2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e2d6:	d00d      	beq.n	800e2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800e2d8:	e030      	b.n	800e33c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800e2da:	4b1d      	ldr	r3, [pc, #116]	; (800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e2e6:	d102      	bne.n	800e2ee <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800e2e8:	4b1a      	ldr	r3, [pc, #104]	; (800e354 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800e2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e2ec:	e02b      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e2f2:	e028      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e2f4:	4b16      	ldr	r3, [pc, #88]	; (800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e300:	d107      	bne.n	800e312 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e306:	4618      	mov	r0, r3
 800e308:	f000 fae4 	bl	800e8d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e30e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e310:	e019      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800e312:	2300      	movs	r3, #0
 800e314:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e316:	e016      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e318:	4b0d      	ldr	r3, [pc, #52]	; (800e350 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e324:	d107      	bne.n	800e336 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e326:	f107 0318 	add.w	r3, r7, #24
 800e32a:	4618      	mov	r0, r3
 800e32c:	f000 f82a 	bl	800e384 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800e334:	e007      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800e336:	2300      	movs	r3, #0
 800e338:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e33a:	e004      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800e33c:	2300      	movs	r3, #0
 800e33e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800e340:	e001      	b.n	800e346 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800e342:	2300      	movs	r3, #0
 800e344:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800e346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3740      	adds	r7, #64	; 0x40
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	58024400 	.word	0x58024400
 800e354:	017d7840 	.word	0x017d7840

0800e358 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800e35c:	f7fe fc82 	bl	800cc64 <HAL_RCC_GetHCLKFreq>
 800e360:	4602      	mov	r2, r0
 800e362:	4b06      	ldr	r3, [pc, #24]	; (800e37c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800e364:	6a1b      	ldr	r3, [r3, #32]
 800e366:	091b      	lsrs	r3, r3, #4
 800e368:	f003 0307 	and.w	r3, r3, #7
 800e36c:	4904      	ldr	r1, [pc, #16]	; (800e380 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800e36e:	5ccb      	ldrb	r3, [r1, r3]
 800e370:	f003 031f 	and.w	r3, r3, #31
 800e374:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800e378:	4618      	mov	r0, r3
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	58024400 	.word	0x58024400
 800e380:	08015258 	.word	0x08015258

0800e384 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800e384:	b480      	push	{r7}
 800e386:	b089      	sub	sp, #36	; 0x24
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e38c:	4ba1      	ldr	r3, [pc, #644]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e38e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e390:	f003 0303 	and.w	r3, r3, #3
 800e394:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800e396:	4b9f      	ldr	r3, [pc, #636]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e39a:	0b1b      	lsrs	r3, r3, #12
 800e39c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e3a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e3a2:	4b9c      	ldr	r3, [pc, #624]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a6:	091b      	lsrs	r3, r3, #4
 800e3a8:	f003 0301 	and.w	r3, r3, #1
 800e3ac:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800e3ae:	4b99      	ldr	r3, [pc, #612]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3b2:	08db      	lsrs	r3, r3, #3
 800e3b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e3b8:	693a      	ldr	r2, [r7, #16]
 800e3ba:	fb02 f303 	mul.w	r3, r2, r3
 800e3be:	ee07 3a90 	vmov	s15, r3
 800e3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	f000 8111 	beq.w	800e5f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e3d2:	69bb      	ldr	r3, [r7, #24]
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	f000 8083 	beq.w	800e4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	2b02      	cmp	r3, #2
 800e3de:	f200 80a1 	bhi.w	800e524 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e3e2:	69bb      	ldr	r3, [r7, #24]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d003      	beq.n	800e3f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e3e8:	69bb      	ldr	r3, [r7, #24]
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d056      	beq.n	800e49c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e3ee:	e099      	b.n	800e524 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e3f0:	4b88      	ldr	r3, [pc, #544]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	f003 0320 	and.w	r3, r3, #32
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d02d      	beq.n	800e458 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e3fc:	4b85      	ldr	r3, [pc, #532]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	08db      	lsrs	r3, r3, #3
 800e402:	f003 0303 	and.w	r3, r3, #3
 800e406:	4a84      	ldr	r2, [pc, #528]	; (800e618 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e408:	fa22 f303 	lsr.w	r3, r2, r3
 800e40c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	ee07 3a90 	vmov	s15, r3
 800e414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e418:	697b      	ldr	r3, [r7, #20]
 800e41a:	ee07 3a90 	vmov	s15, r3
 800e41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e426:	4b7b      	ldr	r3, [pc, #492]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e42e:	ee07 3a90 	vmov	s15, r3
 800e432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e436:	ed97 6a03 	vldr	s12, [r7, #12]
 800e43a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e61c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e452:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800e456:	e087      	b.n	800e568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	ee07 3a90 	vmov	s15, r3
 800e45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e462:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e620 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e46a:	4b6a      	ldr	r3, [pc, #424]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e46c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e46e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e472:	ee07 3a90 	vmov	s15, r3
 800e476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e47a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e47e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e61c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e48a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e48e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e492:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e496:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e49a:	e065      	b.n	800e568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	ee07 3a90 	vmov	s15, r3
 800e4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e4aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4ae:	4b59      	ldr	r3, [pc, #356]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4b6:	ee07 3a90 	vmov	s15, r3
 800e4ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e4be:	ed97 6a03 	vldr	s12, [r7, #12]
 800e4c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e61c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e4c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e4ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e4ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e4de:	e043      	b.n	800e568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	ee07 3a90 	vmov	s15, r3
 800e4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e628 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e4ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e4f2:	4b48      	ldr	r3, [pc, #288]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4fa:	ee07 3a90 	vmov	s15, r3
 800e4fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e502:	ed97 6a03 	vldr	s12, [r7, #12]
 800e506:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e61c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e50a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e50e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e51a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e51e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e522:	e021      	b.n	800e568 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	ee07 3a90 	vmov	s15, r3
 800e52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e52e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e624 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e536:	4b37      	ldr	r3, [pc, #220]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e53e:	ee07 3a90 	vmov	s15, r3
 800e542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e546:	ed97 6a03 	vldr	s12, [r7, #12]
 800e54a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e61c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e54e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e562:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e566:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800e568:	4b2a      	ldr	r3, [pc, #168]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e56c:	0a5b      	lsrs	r3, r3, #9
 800e56e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e572:	ee07 3a90 	vmov	s15, r3
 800e576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e57a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e57e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e582:	edd7 6a07 	vldr	s13, [r7, #28]
 800e586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e58a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e58e:	ee17 2a90 	vmov	r2, s15
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800e596:	4b1f      	ldr	r3, [pc, #124]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e59a:	0c1b      	lsrs	r3, r3, #16
 800e59c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5a0:	ee07 3a90 	vmov	s15, r3
 800e5a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e5ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e5b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5bc:	ee17 2a90 	vmov	r2, s15
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800e5c4:	4b13      	ldr	r3, [pc, #76]	; (800e614 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5c8:	0e1b      	lsrs	r3, r3, #24
 800e5ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e5ce:	ee07 3a90 	vmov	s15, r3
 800e5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e5da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e5de:	edd7 6a07 	vldr	s13, [r7, #28]
 800e5e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e5ea:	ee17 2a90 	vmov	r2, s15
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e5f2:	e008      	b.n	800e606 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2200      	movs	r2, #0
 800e604:	609a      	str	r2, [r3, #8]
}
 800e606:	bf00      	nop
 800e608:	3724      	adds	r7, #36	; 0x24
 800e60a:	46bd      	mov	sp, r7
 800e60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e610:	4770      	bx	lr
 800e612:	bf00      	nop
 800e614:	58024400 	.word	0x58024400
 800e618:	03d09000 	.word	0x03d09000
 800e61c:	46000000 	.word	0x46000000
 800e620:	4c742400 	.word	0x4c742400
 800e624:	4a742400 	.word	0x4a742400
 800e628:	4bbebc20 	.word	0x4bbebc20

0800e62c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b089      	sub	sp, #36	; 0x24
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e634:	4ba1      	ldr	r3, [pc, #644]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e638:	f003 0303 	and.w	r3, r3, #3
 800e63c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800e63e:	4b9f      	ldr	r3, [pc, #636]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e642:	0d1b      	lsrs	r3, r3, #20
 800e644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e648:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e64a:	4b9c      	ldr	r3, [pc, #624]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e64e:	0a1b      	lsrs	r3, r3, #8
 800e650:	f003 0301 	and.w	r3, r3, #1
 800e654:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800e656:	4b99      	ldr	r3, [pc, #612]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e65a:	08db      	lsrs	r3, r3, #3
 800e65c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e660:	693a      	ldr	r2, [r7, #16]
 800e662:	fb02 f303 	mul.w	r3, r2, r3
 800e666:	ee07 3a90 	vmov	s15, r3
 800e66a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e66e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	2b00      	cmp	r3, #0
 800e676:	f000 8111 	beq.w	800e89c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e67a:	69bb      	ldr	r3, [r7, #24]
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	f000 8083 	beq.w	800e788 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e682:	69bb      	ldr	r3, [r7, #24]
 800e684:	2b02      	cmp	r3, #2
 800e686:	f200 80a1 	bhi.w	800e7cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e68a:	69bb      	ldr	r3, [r7, #24]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d003      	beq.n	800e698 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d056      	beq.n	800e744 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e696:	e099      	b.n	800e7cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e698:	4b88      	ldr	r3, [pc, #544]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f003 0320 	and.w	r3, r3, #32
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d02d      	beq.n	800e700 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e6a4:	4b85      	ldr	r3, [pc, #532]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	08db      	lsrs	r3, r3, #3
 800e6aa:	f003 0303 	and.w	r3, r3, #3
 800e6ae:	4a84      	ldr	r2, [pc, #528]	; (800e8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e6b0:	fa22 f303 	lsr.w	r3, r2, r3
 800e6b4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e6b6:	68bb      	ldr	r3, [r7, #8]
 800e6b8:	ee07 3a90 	vmov	s15, r3
 800e6bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6c0:	697b      	ldr	r3, [r7, #20]
 800e6c2:	ee07 3a90 	vmov	s15, r3
 800e6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6ce:	4b7b      	ldr	r3, [pc, #492]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6d6:	ee07 3a90 	vmov	s15, r3
 800e6da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6de:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800e8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e6e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e6f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800e6fe:	e087      	b.n	800e810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	ee07 3a90 	vmov	s15, r3
 800e706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e70a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800e8c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e70e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e712:	4b6a      	ldr	r3, [pc, #424]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e71a:	ee07 3a90 	vmov	s15, r3
 800e71e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e722:	ed97 6a03 	vldr	s12, [r7, #12]
 800e726:	eddf 5a67 	vldr	s11, [pc, #412]	; 800e8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e72a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e72e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e73a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e73e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e742:	e065      	b.n	800e810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e744:	697b      	ldr	r3, [r7, #20]
 800e746:	ee07 3a90 	vmov	s15, r3
 800e74a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e74e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e8cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e756:	4b59      	ldr	r3, [pc, #356]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e75a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e75e:	ee07 3a90 	vmov	s15, r3
 800e762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e766:	ed97 6a03 	vldr	s12, [r7, #12]
 800e76a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800e8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e76e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e77a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e786:	e043      	b.n	800e810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	ee07 3a90 	vmov	s15, r3
 800e78e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e792:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800e8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e79a:	4b48      	ldr	r3, [pc, #288]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e79e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7a2:	ee07 3a90 	vmov	s15, r3
 800e7a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 800e8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e7b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e7be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e7c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e7c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e7ca:	e021      	b.n	800e810 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	ee07 3a90 	vmov	s15, r3
 800e7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e7d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e8cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e7da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e7de:	4b37      	ldr	r3, [pc, #220]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7e6:	ee07 3a90 	vmov	s15, r3
 800e7ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e7ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800e7f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800e8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e7f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e7fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e7fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e80a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e80e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800e810:	4b2a      	ldr	r3, [pc, #168]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e814:	0a5b      	lsrs	r3, r3, #9
 800e816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e81a:	ee07 3a90 	vmov	s15, r3
 800e81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e82a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e82e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e836:	ee17 2a90 	vmov	r2, s15
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800e83e:	4b1f      	ldr	r3, [pc, #124]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e842:	0c1b      	lsrs	r3, r3, #16
 800e844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e848:	ee07 3a90 	vmov	s15, r3
 800e84c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e854:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e858:	edd7 6a07 	vldr	s13, [r7, #28]
 800e85c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e864:	ee17 2a90 	vmov	r2, s15
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800e86c:	4b13      	ldr	r3, [pc, #76]	; (800e8bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e86e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e870:	0e1b      	lsrs	r3, r3, #24
 800e872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e876:	ee07 3a90 	vmov	s15, r3
 800e87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e87e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e882:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e886:	edd7 6a07 	vldr	s13, [r7, #28]
 800e88a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e88e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e892:	ee17 2a90 	vmov	r2, s15
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e89a:	e008      	b.n	800e8ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	609a      	str	r2, [r3, #8]
}
 800e8ae:	bf00      	nop
 800e8b0:	3724      	adds	r7, #36	; 0x24
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr
 800e8ba:	bf00      	nop
 800e8bc:	58024400 	.word	0x58024400
 800e8c0:	03d09000 	.word	0x03d09000
 800e8c4:	46000000 	.word	0x46000000
 800e8c8:	4c742400 	.word	0x4c742400
 800e8cc:	4a742400 	.word	0x4a742400
 800e8d0:	4bbebc20 	.word	0x4bbebc20

0800e8d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b089      	sub	sp, #36	; 0x24
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e8dc:	4ba0      	ldr	r3, [pc, #640]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8e0:	f003 0303 	and.w	r3, r3, #3
 800e8e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800e8e6:	4b9e      	ldr	r3, [pc, #632]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8ea:	091b      	lsrs	r3, r3, #4
 800e8ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e8f2:	4b9b      	ldr	r3, [pc, #620]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f6:	f003 0301 	and.w	r3, r3, #1
 800e8fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800e8fc:	4b98      	ldr	r3, [pc, #608]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e900:	08db      	lsrs	r3, r3, #3
 800e902:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e906:	693a      	ldr	r2, [r7, #16]
 800e908:	fb02 f303 	mul.w	r3, r2, r3
 800e90c:	ee07 3a90 	vmov	s15, r3
 800e910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e914:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	f000 8111 	beq.w	800eb42 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e920:	69bb      	ldr	r3, [r7, #24]
 800e922:	2b02      	cmp	r3, #2
 800e924:	f000 8083 	beq.w	800ea2e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e928:	69bb      	ldr	r3, [r7, #24]
 800e92a:	2b02      	cmp	r3, #2
 800e92c:	f200 80a1 	bhi.w	800ea72 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e930:	69bb      	ldr	r3, [r7, #24]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d003      	beq.n	800e93e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d056      	beq.n	800e9ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e93c:	e099      	b.n	800ea72 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e93e:	4b88      	ldr	r3, [pc, #544]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f003 0320 	and.w	r3, r3, #32
 800e946:	2b00      	cmp	r3, #0
 800e948:	d02d      	beq.n	800e9a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800e94a:	4b85      	ldr	r3, [pc, #532]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	08db      	lsrs	r3, r3, #3
 800e950:	f003 0303 	and.w	r3, r3, #3
 800e954:	4a83      	ldr	r2, [pc, #524]	; (800eb64 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e956:	fa22 f303 	lsr.w	r3, r2, r3
 800e95a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e95c:	68bb      	ldr	r3, [r7, #8]
 800e95e:	ee07 3a90 	vmov	s15, r3
 800e962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e966:	697b      	ldr	r3, [r7, #20]
 800e968:	ee07 3a90 	vmov	s15, r3
 800e96c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e974:	4b7a      	ldr	r3, [pc, #488]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e97c:	ee07 3a90 	vmov	s15, r3
 800e980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e984:	ed97 6a03 	vldr	s12, [r7, #12]
 800e988:	eddf 5a77 	vldr	s11, [pc, #476]	; 800eb68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e98c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e99c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9a0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800e9a4:	e087      	b.n	800eab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	ee07 3a90 	vmov	s15, r3
 800e9ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800eb6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e9b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9b8:	4b69      	ldr	r3, [pc, #420]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9c0:	ee07 3a90 	vmov	s15, r3
 800e9c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e9c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800e9cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800eb68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e9d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e9d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e9d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e9dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e9e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800e9e8:	e065      	b.n	800eab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	ee07 3a90 	vmov	s15, r3
 800e9f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e9f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800eb70 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e9f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e9fc:	4b58      	ldr	r3, [pc, #352]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e9fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea04:	ee07 3a90 	vmov	s15, r3
 800ea08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea10:	eddf 5a55 	vldr	s11, [pc, #340]	; 800eb68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ea14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea28:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ea2c:	e043      	b.n	800eab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	ee07 3a90 	vmov	s15, r3
 800ea34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea38:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800eb74 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ea3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea40:	4b47      	ldr	r3, [pc, #284]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea48:	ee07 3a90 	vmov	s15, r3
 800ea4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea50:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea54:	eddf 5a44 	vldr	s11, [pc, #272]	; 800eb68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ea58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ea5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ea60:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ea64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ea68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea6c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ea70:	e021      	b.n	800eab6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	ee07 3a90 	vmov	s15, r3
 800ea78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ea7c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800eb6c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ea80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ea84:	4b36      	ldr	r3, [pc, #216]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ea86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea8c:	ee07 3a90 	vmov	s15, r3
 800ea90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ea94:	ed97 6a03 	vldr	s12, [r7, #12]
 800ea98:	eddf 5a33 	vldr	s11, [pc, #204]	; 800eb68 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ea9c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800eaa0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eaa4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800eaa8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eaac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eab0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800eab4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800eab6:	4b2a      	ldr	r3, [pc, #168]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaba:	0a5b      	lsrs	r3, r3, #9
 800eabc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eac0:	ee07 3a90 	vmov	s15, r3
 800eac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eac8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eacc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ead0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ead4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ead8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eadc:	ee17 2a90 	vmov	r2, s15
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800eae4:	4b1e      	ldr	r3, [pc, #120]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eae8:	0c1b      	lsrs	r3, r3, #16
 800eaea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eaee:	ee07 3a90 	vmov	s15, r3
 800eaf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eaf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eafa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eafe:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb0a:	ee17 2a90 	vmov	r2, s15
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800eb12:	4b13      	ldr	r3, [pc, #76]	; (800eb60 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800eb14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb16:	0e1b      	lsrs	r3, r3, #24
 800eb18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb1c:	ee07 3a90 	vmov	s15, r3
 800eb20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800eb24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800eb28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800eb2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800eb30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eb38:	ee17 2a90 	vmov	r2, s15
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800eb40:	e008      	b.n	800eb54 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2200      	movs	r2, #0
 800eb46:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2200      	movs	r2, #0
 800eb52:	609a      	str	r2, [r3, #8]
}
 800eb54:	bf00      	nop
 800eb56:	3724      	adds	r7, #36	; 0x24
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr
 800eb60:	58024400 	.word	0x58024400
 800eb64:	03d09000 	.word	0x03d09000
 800eb68:	46000000 	.word	0x46000000
 800eb6c:	4c742400 	.word	0x4c742400
 800eb70:	4a742400 	.word	0x4a742400
 800eb74:	4bbebc20 	.word	0x4bbebc20

0800eb78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eb82:	2300      	movs	r3, #0
 800eb84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800eb86:	4b53      	ldr	r3, [pc, #332]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800eb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb8a:	f003 0303 	and.w	r3, r3, #3
 800eb8e:	2b03      	cmp	r3, #3
 800eb90:	d101      	bne.n	800eb96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800eb92:	2301      	movs	r3, #1
 800eb94:	e099      	b.n	800ecca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800eb96:	4b4f      	ldr	r3, [pc, #316]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	4a4e      	ldr	r2, [pc, #312]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800eb9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800eba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eba2:	f7f6 fa0f 	bl	8004fc4 <HAL_GetTick>
 800eba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800eba8:	e008      	b.n	800ebbc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ebaa:	f7f6 fa0b 	bl	8004fc4 <HAL_GetTick>
 800ebae:	4602      	mov	r2, r0
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	1ad3      	subs	r3, r2, r3
 800ebb4:	2b02      	cmp	r3, #2
 800ebb6:	d901      	bls.n	800ebbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ebb8:	2303      	movs	r3, #3
 800ebba:	e086      	b.n	800ecca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ebbc:	4b45      	ldr	r3, [pc, #276]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d1f0      	bne.n	800ebaa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ebc8:	4b42      	ldr	r3, [pc, #264]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ebca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	031b      	lsls	r3, r3, #12
 800ebd6:	493f      	ldr	r1, [pc, #252]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	628b      	str	r3, [r1, #40]	; 0x28
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	3b01      	subs	r3, #1
 800ebe2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	3b01      	subs	r3, #1
 800ebec:	025b      	lsls	r3, r3, #9
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	431a      	orrs	r2, r3
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	68db      	ldr	r3, [r3, #12]
 800ebf6:	3b01      	subs	r3, #1
 800ebf8:	041b      	lsls	r3, r3, #16
 800ebfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ebfe:	431a      	orrs	r2, r3
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	691b      	ldr	r3, [r3, #16]
 800ec04:	3b01      	subs	r3, #1
 800ec06:	061b      	lsls	r3, r3, #24
 800ec08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ec0c:	4931      	ldr	r1, [pc, #196]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ec12:	4b30      	ldr	r3, [pc, #192]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	695b      	ldr	r3, [r3, #20]
 800ec1e:	492d      	ldr	r1, [pc, #180]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec20:	4313      	orrs	r3, r2
 800ec22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ec24:	4b2b      	ldr	r3, [pc, #172]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec28:	f023 0220 	bic.w	r2, r3, #32
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	699b      	ldr	r3, [r3, #24]
 800ec30:	4928      	ldr	r1, [pc, #160]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec32:	4313      	orrs	r3, r2
 800ec34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ec36:	4b27      	ldr	r3, [pc, #156]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3a:	4a26      	ldr	r2, [pc, #152]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec3c:	f023 0310 	bic.w	r3, r3, #16
 800ec40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ec42:	4b24      	ldr	r3, [pc, #144]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec46:	4b24      	ldr	r3, [pc, #144]	; (800ecd8 <RCCEx_PLL2_Config+0x160>)
 800ec48:	4013      	ands	r3, r2
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	69d2      	ldr	r2, [r2, #28]
 800ec4e:	00d2      	lsls	r2, r2, #3
 800ec50:	4920      	ldr	r1, [pc, #128]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec52:	4313      	orrs	r3, r2
 800ec54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ec56:	4b1f      	ldr	r3, [pc, #124]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec5a:	4a1e      	ldr	r2, [pc, #120]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec5c:	f043 0310 	orr.w	r3, r3, #16
 800ec60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d106      	bne.n	800ec76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ec68:	4b1a      	ldr	r3, [pc, #104]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec6c:	4a19      	ldr	r2, [pc, #100]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ec72:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ec74:	e00f      	b.n	800ec96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d106      	bne.n	800ec8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ec7c:	4b15      	ldr	r3, [pc, #84]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec80:	4a14      	ldr	r2, [pc, #80]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ec88:	e005      	b.n	800ec96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ec8a:	4b12      	ldr	r3, [pc, #72]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec8e:	4a11      	ldr	r2, [pc, #68]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ec94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ec96:	4b0f      	ldr	r3, [pc, #60]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4a0e      	ldr	r2, [pc, #56]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ec9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eca2:	f7f6 f98f 	bl	8004fc4 <HAL_GetTick>
 800eca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800eca8:	e008      	b.n	800ecbc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ecaa:	f7f6 f98b 	bl	8004fc4 <HAL_GetTick>
 800ecae:	4602      	mov	r2, r0
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	2b02      	cmp	r3, #2
 800ecb6:	d901      	bls.n	800ecbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	e006      	b.n	800ecca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ecbc:	4b05      	ldr	r3, [pc, #20]	; (800ecd4 <RCCEx_PLL2_Config+0x15c>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d0f0      	beq.n	800ecaa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ecc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3710      	adds	r7, #16
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	58024400 	.word	0x58024400
 800ecd8:	ffff0007 	.word	0xffff0007

0800ecdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b084      	sub	sp, #16
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ece6:	2300      	movs	r3, #0
 800ece8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ecea:	4b53      	ldr	r3, [pc, #332]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ecec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecee:	f003 0303 	and.w	r3, r3, #3
 800ecf2:	2b03      	cmp	r3, #3
 800ecf4:	d101      	bne.n	800ecfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e099      	b.n	800ee2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ecfa:	4b4f      	ldr	r3, [pc, #316]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4a4e      	ldr	r2, [pc, #312]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ed00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ed04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed06:	f7f6 f95d 	bl	8004fc4 <HAL_GetTick>
 800ed0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ed0c:	e008      	b.n	800ed20 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ed0e:	f7f6 f959 	bl	8004fc4 <HAL_GetTick>
 800ed12:	4602      	mov	r2, r0
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	1ad3      	subs	r3, r2, r3
 800ed18:	2b02      	cmp	r3, #2
 800ed1a:	d901      	bls.n	800ed20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ed1c:	2303      	movs	r3, #3
 800ed1e:	e086      	b.n	800ee2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ed20:	4b45      	ldr	r3, [pc, #276]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d1f0      	bne.n	800ed0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ed2c:	4b42      	ldr	r3, [pc, #264]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ed2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	051b      	lsls	r3, r3, #20
 800ed3a:	493f      	ldr	r1, [pc, #252]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ed3c:	4313      	orrs	r3, r2
 800ed3e:	628b      	str	r3, [r1, #40]	; 0x28
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	3b01      	subs	r3, #1
 800ed46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	689b      	ldr	r3, [r3, #8]
 800ed4e:	3b01      	subs	r3, #1
 800ed50:	025b      	lsls	r3, r3, #9
 800ed52:	b29b      	uxth	r3, r3
 800ed54:	431a      	orrs	r2, r3
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	68db      	ldr	r3, [r3, #12]
 800ed5a:	3b01      	subs	r3, #1
 800ed5c:	041b      	lsls	r3, r3, #16
 800ed5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ed62:	431a      	orrs	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	691b      	ldr	r3, [r3, #16]
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	061b      	lsls	r3, r3, #24
 800ed6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ed70:	4931      	ldr	r1, [pc, #196]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ed72:	4313      	orrs	r3, r2
 800ed74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ed76:	4b30      	ldr	r3, [pc, #192]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ed78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	695b      	ldr	r3, [r3, #20]
 800ed82:	492d      	ldr	r1, [pc, #180]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ed84:	4313      	orrs	r3, r2
 800ed86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ed88:	4b2b      	ldr	r3, [pc, #172]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ed8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	699b      	ldr	r3, [r3, #24]
 800ed94:	4928      	ldr	r1, [pc, #160]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ed96:	4313      	orrs	r3, r2
 800ed98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ed9a:	4b27      	ldr	r3, [pc, #156]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ed9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9e:	4a26      	ldr	r2, [pc, #152]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800eda0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eda4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800eda6:	4b24      	ldr	r3, [pc, #144]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800eda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800edaa:	4b24      	ldr	r3, [pc, #144]	; (800ee3c <RCCEx_PLL3_Config+0x160>)
 800edac:	4013      	ands	r3, r2
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	69d2      	ldr	r2, [r2, #28]
 800edb2:	00d2      	lsls	r2, r2, #3
 800edb4:	4920      	ldr	r1, [pc, #128]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800edb6:	4313      	orrs	r3, r2
 800edb8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800edba:	4b1f      	ldr	r3, [pc, #124]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800edbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edbe:	4a1e      	ldr	r2, [pc, #120]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800edc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800edc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d106      	bne.n	800edda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800edcc:	4b1a      	ldr	r3, [pc, #104]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800edce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd0:	4a19      	ldr	r2, [pc, #100]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800edd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800edd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800edd8:	e00f      	b.n	800edfa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d106      	bne.n	800edee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ede0:	4b15      	ldr	r3, [pc, #84]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ede2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ede4:	4a14      	ldr	r2, [pc, #80]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ede6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800edea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800edec:	e005      	b.n	800edfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800edee:	4b12      	ldr	r3, [pc, #72]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800edf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edf2:	4a11      	ldr	r2, [pc, #68]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800edf4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800edf8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800edfa:	4b0f      	ldr	r3, [pc, #60]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	4a0e      	ldr	r2, [pc, #56]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ee00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ee06:	f7f6 f8dd 	bl	8004fc4 <HAL_GetTick>
 800ee0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ee0c:	e008      	b.n	800ee20 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ee0e:	f7f6 f8d9 	bl	8004fc4 <HAL_GetTick>
 800ee12:	4602      	mov	r2, r0
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	1ad3      	subs	r3, r2, r3
 800ee18:	2b02      	cmp	r3, #2
 800ee1a:	d901      	bls.n	800ee20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ee1c:	2303      	movs	r3, #3
 800ee1e:	e006      	b.n	800ee2e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ee20:	4b05      	ldr	r3, [pc, #20]	; (800ee38 <RCCEx_PLL3_Config+0x15c>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d0f0      	beq.n	800ee0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ee2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3710      	adds	r7, #16
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	58024400 	.word	0x58024400
 800ee3c:	ffff0007 	.word	0xffff0007

0800ee40 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d101      	bne.n	800ee52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e0f1      	b.n	800f036 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2200      	movs	r2, #0
 800ee56:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a78      	ldr	r2, [pc, #480]	; (800f040 <HAL_SPI_Init+0x200>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d00f      	beq.n	800ee82 <HAL_SPI_Init+0x42>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	4a77      	ldr	r2, [pc, #476]	; (800f044 <HAL_SPI_Init+0x204>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d00a      	beq.n	800ee82 <HAL_SPI_Init+0x42>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a75      	ldr	r2, [pc, #468]	; (800f048 <HAL_SPI_Init+0x208>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d005      	beq.n	800ee82 <HAL_SPI_Init+0x42>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	2b0f      	cmp	r3, #15
 800ee7c:	d901      	bls.n	800ee82 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	e0d9      	b.n	800f036 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f001 f880 	bl	800ff88 <SPI_GetPacketSize>
 800ee88:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a6c      	ldr	r2, [pc, #432]	; (800f040 <HAL_SPI_Init+0x200>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d00c      	beq.n	800eeae <HAL_SPI_Init+0x6e>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a6a      	ldr	r2, [pc, #424]	; (800f044 <HAL_SPI_Init+0x204>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d007      	beq.n	800eeae <HAL_SPI_Init+0x6e>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a69      	ldr	r2, [pc, #420]	; (800f048 <HAL_SPI_Init+0x208>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d002      	beq.n	800eeae <HAL_SPI_Init+0x6e>
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2b08      	cmp	r3, #8
 800eeac:	d811      	bhi.n	800eed2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800eeb2:	4a63      	ldr	r2, [pc, #396]	; (800f040 <HAL_SPI_Init+0x200>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d009      	beq.n	800eecc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a61      	ldr	r2, [pc, #388]	; (800f044 <HAL_SPI_Init+0x204>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d004      	beq.n	800eecc <HAL_SPI_Init+0x8c>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a60      	ldr	r2, [pc, #384]	; (800f048 <HAL_SPI_Init+0x208>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d104      	bne.n	800eed6 <HAL_SPI_Init+0x96>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2b10      	cmp	r3, #16
 800eed0:	d901      	bls.n	800eed6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800eed2:	2301      	movs	r3, #1
 800eed4:	e0af      	b.n	800f036 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eedc:	b2db      	uxtb	r3, r3
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d106      	bne.n	800eef0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eeea:	6878      	ldr	r0, [r7, #4]
 800eeec:	f7f4 fb32 	bl	8003554 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2202      	movs	r2, #2
 800eef4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	681a      	ldr	r2, [r3, #0]
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	f022 0201 	bic.w	r2, r2, #1
 800ef06:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	689b      	ldr	r3, [r3, #8]
 800ef0e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ef12:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	699b      	ldr	r3, [r3, #24]
 800ef18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ef1c:	d119      	bne.n	800ef52 <HAL_SPI_Init+0x112>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	685b      	ldr	r3, [r3, #4]
 800ef22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef26:	d103      	bne.n	800ef30 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d008      	beq.n	800ef42 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d10c      	bne.n	800ef52 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ef3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef40:	d107      	bne.n	800ef52 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	681a      	ldr	r2, [r3, #0]
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ef50:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	69da      	ldr	r2, [r3, #28]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef5a:	431a      	orrs	r2, r3
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	431a      	orrs	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef64:	ea42 0103 	orr.w	r1, r2, r3
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	68da      	ldr	r2, [r3, #12]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	430a      	orrs	r2, r1
 800ef72:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef7c:	431a      	orrs	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef82:	431a      	orrs	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	699b      	ldr	r3, [r3, #24]
 800ef88:	431a      	orrs	r2, r3
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	691b      	ldr	r3, [r3, #16]
 800ef8e:	431a      	orrs	r2, r3
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	695b      	ldr	r3, [r3, #20]
 800ef94:	431a      	orrs	r2, r3
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6a1b      	ldr	r3, [r3, #32]
 800ef9a:	431a      	orrs	r2, r3
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	685b      	ldr	r3, [r3, #4]
 800efa0:	431a      	orrs	r2, r3
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800efa6:	431a      	orrs	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	689b      	ldr	r3, [r3, #8]
 800efac:	431a      	orrs	r2, r3
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efb2:	ea42 0103 	orr.w	r1, r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	430a      	orrs	r2, r1
 800efc0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d113      	bne.n	800eff2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800efdc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	689b      	ldr	r3, [r3, #8]
 800efe4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eff0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f022 0201 	bic.w	r2, r2, #1
 800f000:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d00a      	beq.n	800f024 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	430a      	orrs	r2, r1
 800f022:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	2200      	movs	r2, #0
 800f028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	2201      	movs	r2, #1
 800f030:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f034:	2300      	movs	r3, #0
}
 800f036:	4618      	mov	r0, r3
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	40013000 	.word	0x40013000
 800f044:	40003800 	.word	0x40003800
 800f048:	40003c00 	.word	0x40003c00

0800f04c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b08a      	sub	sp, #40	; 0x28
 800f050:	af02      	add	r7, sp, #8
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	603b      	str	r3, [r7, #0]
 800f058:	4613      	mov	r3, r2
 800f05a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	3320      	adds	r3, #32
 800f062:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f064:	2300      	movs	r3, #0
 800f066:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d101      	bne.n	800f076 <HAL_SPI_Transmit+0x2a>
 800f072:	2302      	movs	r3, #2
 800f074:	e1d7      	b.n	800f426 <HAL_SPI_Transmit+0x3da>
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2201      	movs	r2, #1
 800f07a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f07e:	f7f5 ffa1 	bl	8004fc4 <HAL_GetTick>
 800f082:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f08a:	b2db      	uxtb	r3, r3
 800f08c:	2b01      	cmp	r3, #1
 800f08e:	d007      	beq.n	800f0a0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f090:	2302      	movs	r3, #2
 800f092:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f09c:	7efb      	ldrb	r3, [r7, #27]
 800f09e:	e1c2      	b.n	800f426 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d002      	beq.n	800f0ac <HAL_SPI_Transmit+0x60>
 800f0a6:	88fb      	ldrh	r3, [r7, #6]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d107      	bne.n	800f0bc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f0b8:	7efb      	ldrb	r3, [r7, #27]
 800f0ba:	e1b4      	b.n	800f426 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	2203      	movs	r2, #3
 800f0c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	68ba      	ldr	r2, [r7, #8]
 800f0d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	88fa      	ldrh	r2, [r7, #6]
 800f0d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	88fa      	ldrh	r2, [r7, #6]
 800f0de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2200      	movs	r2, #0
 800f102:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f10c:	d107      	bne.n	800f11e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	681a      	ldr	r2, [r3, #0]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f11c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	685a      	ldr	r2, [r3, #4]
 800f124:	4b96      	ldr	r3, [pc, #600]	; (800f380 <HAL_SPI_Transmit+0x334>)
 800f126:	4013      	ands	r3, r2
 800f128:	88f9      	ldrh	r1, [r7, #6]
 800f12a:	68fa      	ldr	r2, [r7, #12]
 800f12c:	6812      	ldr	r2, [r2, #0]
 800f12e:	430b      	orrs	r3, r1
 800f130:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f042 0201 	orr.w	r2, r2, #1
 800f140:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f14a:	d107      	bne.n	800f15c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f15a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	68db      	ldr	r3, [r3, #12]
 800f160:	2b0f      	cmp	r3, #15
 800f162:	d947      	bls.n	800f1f4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f164:	e03f      	b.n	800f1e6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	695b      	ldr	r3, [r3, #20]
 800f16c:	f003 0302 	and.w	r3, r3, #2
 800f170:	2b02      	cmp	r3, #2
 800f172:	d114      	bne.n	800f19e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	6812      	ldr	r2, [r2, #0]
 800f17e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f184:	1d1a      	adds	r2, r3, #4
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f190:	b29b      	uxth	r3, r3
 800f192:	3b01      	subs	r3, #1
 800f194:	b29a      	uxth	r2, r3
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f19c:	e023      	b.n	800f1e6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f19e:	f7f5 ff11 	bl	8004fc4 <HAL_GetTick>
 800f1a2:	4602      	mov	r2, r0
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	1ad3      	subs	r3, r2, r3
 800f1a8:	683a      	ldr	r2, [r7, #0]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d803      	bhi.n	800f1b6 <HAL_SPI_Transmit+0x16a>
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b4:	d102      	bne.n	800f1bc <HAL_SPI_Transmit+0x170>
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d114      	bne.n	800f1e6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1bc:	68f8      	ldr	r0, [r7, #12]
 800f1be:	f000 fe15 	bl	800fdec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	2201      	movs	r2, #1
 800f1de:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f1e2:	2303      	movs	r3, #3
 800f1e4:	e11f      	b.n	800f426 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d1b9      	bne.n	800f166 <HAL_SPI_Transmit+0x11a>
 800f1f2:	e0f2      	b.n	800f3da <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	2b07      	cmp	r3, #7
 800f1fa:	f240 80e7 	bls.w	800f3cc <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f1fe:	e05d      	b.n	800f2bc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	695b      	ldr	r3, [r3, #20]
 800f206:	f003 0302 	and.w	r3, r3, #2
 800f20a:	2b02      	cmp	r3, #2
 800f20c:	d132      	bne.n	800f274 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f214:	b29b      	uxth	r3, r3
 800f216:	2b01      	cmp	r3, #1
 800f218:	d918      	bls.n	800f24c <HAL_SPI_Transmit+0x200>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d014      	beq.n	800f24c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	6812      	ldr	r2, [r2, #0]
 800f22c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f232:	1d1a      	adds	r2, r3, #4
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f23e:	b29b      	uxth	r3, r3
 800f240:	3b02      	subs	r3, #2
 800f242:	b29a      	uxth	r2, r3
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f24a:	e037      	b.n	800f2bc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f250:	881a      	ldrh	r2, [r3, #0]
 800f252:	69fb      	ldr	r3, [r7, #28]
 800f254:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f25a:	1c9a      	adds	r2, r3, #2
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f266:	b29b      	uxth	r3, r3
 800f268:	3b01      	subs	r3, #1
 800f26a:	b29a      	uxth	r2, r3
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f272:	e023      	b.n	800f2bc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f274:	f7f5 fea6 	bl	8004fc4 <HAL_GetTick>
 800f278:	4602      	mov	r2, r0
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	1ad3      	subs	r3, r2, r3
 800f27e:	683a      	ldr	r2, [r7, #0]
 800f280:	429a      	cmp	r2, r3
 800f282:	d803      	bhi.n	800f28c <HAL_SPI_Transmit+0x240>
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f28a:	d102      	bne.n	800f292 <HAL_SPI_Transmit+0x246>
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d114      	bne.n	800f2bc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f292:	68f8      	ldr	r0, [r7, #12]
 800f294:	f000 fdaa 	bl	800fdec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	2200      	movs	r2, #0
 800f29c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f2b8:	2303      	movs	r3, #3
 800f2ba:	e0b4      	b.n	800f426 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d19b      	bne.n	800f200 <HAL_SPI_Transmit+0x1b4>
 800f2c8:	e087      	b.n	800f3da <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	695b      	ldr	r3, [r3, #20]
 800f2d0:	f003 0302 	and.w	r3, r3, #2
 800f2d4:	2b02      	cmp	r3, #2
 800f2d6:	d155      	bne.n	800f384 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	2b03      	cmp	r3, #3
 800f2e2:	d918      	bls.n	800f316 <HAL_SPI_Transmit+0x2ca>
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2e8:	2b40      	cmp	r3, #64	; 0x40
 800f2ea:	d914      	bls.n	800f316 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	6812      	ldr	r2, [r2, #0]
 800f2f6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2fc:	1d1a      	adds	r2, r3, #4
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f308:	b29b      	uxth	r3, r3
 800f30a:	3b04      	subs	r3, #4
 800f30c:	b29a      	uxth	r2, r3
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f314:	e05a      	b.n	800f3cc <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f31c:	b29b      	uxth	r3, r3
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d917      	bls.n	800f352 <HAL_SPI_Transmit+0x306>
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f326:	2b00      	cmp	r3, #0
 800f328:	d013      	beq.n	800f352 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f32e:	881a      	ldrh	r2, [r3, #0]
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f338:	1c9a      	adds	r2, r3, #2
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f344:	b29b      	uxth	r3, r3
 800f346:	3b02      	subs	r3, #2
 800f348:	b29a      	uxth	r2, r3
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f350:	e03c      	b.n	800f3cc <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	3320      	adds	r3, #32
 800f35c:	7812      	ldrb	r2, [r2, #0]
 800f35e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f364:	1c5a      	adds	r2, r3, #1
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f370:	b29b      	uxth	r3, r3
 800f372:	3b01      	subs	r3, #1
 800f374:	b29a      	uxth	r2, r3
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f37c:	e026      	b.n	800f3cc <HAL_SPI_Transmit+0x380>
 800f37e:	bf00      	nop
 800f380:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f384:	f7f5 fe1e 	bl	8004fc4 <HAL_GetTick>
 800f388:	4602      	mov	r2, r0
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	1ad3      	subs	r3, r2, r3
 800f38e:	683a      	ldr	r2, [r7, #0]
 800f390:	429a      	cmp	r2, r3
 800f392:	d803      	bhi.n	800f39c <HAL_SPI_Transmit+0x350>
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f39a:	d102      	bne.n	800f3a2 <HAL_SPI_Transmit+0x356>
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d114      	bne.n	800f3cc <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f3a2:	68f8      	ldr	r0, [r7, #12]
 800f3a4:	f000 fd22 	bl	800fdec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f3c8:	2303      	movs	r3, #3
 800f3ca:	e02c      	b.n	800f426 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	f47f af78 	bne.w	800f2ca <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	2108      	movs	r1, #8
 800f3e4:	68f8      	ldr	r0, [r7, #12]
 800f3e6:	f000 fda1 	bl	800ff2c <SPI_WaitOnFlagUntilTimeout>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d007      	beq.n	800f400 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3f6:	f043 0220 	orr.w	r2, r3, #32
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f400:	68f8      	ldr	r0, [r7, #12]
 800f402:	f000 fcf3 	bl	800fdec <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2200      	movs	r2, #0
 800f40a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2201      	movs	r2, #1
 800f412:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800f420:	2301      	movs	r3, #1
 800f422:	e000      	b.n	800f426 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800f424:	7efb      	ldrb	r3, [r7, #27]
}
 800f426:	4618      	mov	r0, r3
 800f428:	3720      	adds	r7, #32
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop

0800f430 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b08a      	sub	sp, #40	; 0x28
 800f434:	af02      	add	r7, sp, #8
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	603b      	str	r3, [r7, #0]
 800f43c:	4613      	mov	r3, r2
 800f43e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f440:	2300      	movs	r3, #0
 800f442:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	3330      	adds	r3, #48	; 0x30
 800f44a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f454:	d112      	bne.n	800f47c <HAL_SPI_Receive+0x4c>
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	689b      	ldr	r3, [r3, #8]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d10e      	bne.n	800f47c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2204      	movs	r2, #4
 800f462:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f466:	88fa      	ldrh	r2, [r7, #6]
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	9300      	str	r3, [sp, #0]
 800f46c:	4613      	mov	r3, r2
 800f46e:	68ba      	ldr	r2, [r7, #8]
 800f470:	68b9      	ldr	r1, [r7, #8]
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f000 f9ce 	bl	800f814 <HAL_SPI_TransmitReceive>
 800f478:	4603      	mov	r3, r0
 800f47a:	e1c7      	b.n	800f80c <HAL_SPI_Receive+0x3dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f482:	2b01      	cmp	r3, #1
 800f484:	d101      	bne.n	800f48a <HAL_SPI_Receive+0x5a>
 800f486:	2302      	movs	r3, #2
 800f488:	e1c0      	b.n	800f80c <HAL_SPI_Receive+0x3dc>
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f492:	f7f5 fd97 	bl	8004fc4 <HAL_GetTick>
 800f496:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f49e:	b2db      	uxtb	r3, r3
 800f4a0:	2b01      	cmp	r3, #1
 800f4a2:	d007      	beq.n	800f4b4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800f4a4:	2302      	movs	r3, #2
 800f4a6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f4b0:	7ffb      	ldrb	r3, [r7, #31]
 800f4b2:	e1ab      	b.n	800f80c <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d002      	beq.n	800f4c0 <HAL_SPI_Receive+0x90>
 800f4ba:	88fb      	ldrh	r3, [r7, #6]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d107      	bne.n	800f4d0 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f4cc:	7ffb      	ldrb	r3, [r7, #31]
 800f4ce:	e19d      	b.n	800f80c <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	2204      	movs	r2, #4
 800f4d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	68ba      	ldr	r2, [r7, #8]
 800f4e4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	88fa      	ldrh	r2, [r7, #6]
 800f4ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	88fa      	ldrh	r2, [r7, #6]
 800f4f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2200      	movs	r2, #0
 800f500:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2200      	movs	r2, #0
 800f508:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	2200      	movs	r2, #0
 800f510:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	2200      	movs	r2, #0
 800f516:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f520:	d107      	bne.n	800f532 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	681a      	ldr	r2, [r3, #0]
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f530:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	685a      	ldr	r2, [r3, #4]
 800f538:	4b94      	ldr	r3, [pc, #592]	; (800f78c <HAL_SPI_Receive+0x35c>)
 800f53a:	4013      	ands	r3, r2
 800f53c:	88f9      	ldrh	r1, [r7, #6]
 800f53e:	68fa      	ldr	r2, [r7, #12]
 800f540:	6812      	ldr	r2, [r2, #0]
 800f542:	430b      	orrs	r3, r1
 800f544:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	f042 0201 	orr.w	r2, r2, #1
 800f554:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f55e:	d107      	bne.n	800f570 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	681a      	ldr	r2, [r3, #0]
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f56e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	2b0f      	cmp	r3, #15
 800f576:	d948      	bls.n	800f60a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f578:	e040      	b.n	800f5fc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	695a      	ldr	r2, [r3, #20]
 800f580:	f248 0308 	movw	r3, #32776	; 0x8008
 800f584:	4013      	ands	r3, r2
 800f586:	2b00      	cmp	r3, #0
 800f588:	d014      	beq.n	800f5b4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f592:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f594:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f59a:	1d1a      	adds	r2, r3, #4
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	3b01      	subs	r3, #1
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f5b2:	e023      	b.n	800f5fc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5b4:	f7f5 fd06 	bl	8004fc4 <HAL_GetTick>
 800f5b8:	4602      	mov	r2, r0
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	1ad3      	subs	r3, r2, r3
 800f5be:	683a      	ldr	r2, [r7, #0]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d803      	bhi.n	800f5cc <HAL_SPI_Receive+0x19c>
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5ca:	d102      	bne.n	800f5d2 <HAL_SPI_Receive+0x1a2>
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d114      	bne.n	800f5fc <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f5d2:	68f8      	ldr	r0, [r7, #12]
 800f5d4:	f000 fc0a 	bl	800fdec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2200      	movs	r2, #0
 800f5dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2201      	movs	r2, #1
 800f5f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f5f8:	2303      	movs	r3, #3
 800f5fa:	e107      	b.n	800f80c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f602:	b29b      	uxth	r3, r3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d1b8      	bne.n	800f57a <HAL_SPI_Receive+0x14a>
 800f608:	e0ed      	b.n	800f7e6 <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	2b07      	cmp	r3, #7
 800f610:	f240 80e2 	bls.w	800f7d8 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f614:	e05b      	b.n	800f6ce <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	695b      	ldr	r3, [r3, #20]
 800f61c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f620:	2b00      	cmp	r3, #0
 800f622:	d030      	beq.n	800f686 <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	695b      	ldr	r3, [r3, #20]
 800f62a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d014      	beq.n	800f65c <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681a      	ldr	r2, [r3, #0]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f63a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f63c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f642:	1d1a      	adds	r2, r3, #4
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f64e:	b29b      	uxth	r3, r3
 800f650:	3b02      	subs	r3, #2
 800f652:	b29a      	uxth	r2, r3
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f65a:	e038      	b.n	800f6ce <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f660:	69ba      	ldr	r2, [r7, #24]
 800f662:	8812      	ldrh	r2, [r2, #0]
 800f664:	b292      	uxth	r2, r2
 800f666:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f66c:	1c9a      	adds	r2, r3, #2
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f678:	b29b      	uxth	r3, r3
 800f67a:	3b01      	subs	r3, #1
 800f67c:	b29a      	uxth	r2, r3
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f684:	e023      	b.n	800f6ce <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f686:	f7f5 fc9d 	bl	8004fc4 <HAL_GetTick>
 800f68a:	4602      	mov	r2, r0
 800f68c:	697b      	ldr	r3, [r7, #20]
 800f68e:	1ad3      	subs	r3, r2, r3
 800f690:	683a      	ldr	r2, [r7, #0]
 800f692:	429a      	cmp	r2, r3
 800f694:	d803      	bhi.n	800f69e <HAL_SPI_Receive+0x26e>
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69c:	d102      	bne.n	800f6a4 <HAL_SPI_Receive+0x274>
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d114      	bne.n	800f6ce <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	f000 fba1 	bl	800fdec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f6ca:	2303      	movs	r3, #3
 800f6cc:	e09e      	b.n	800f80c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f6d4:	b29b      	uxth	r3, r3
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d19d      	bne.n	800f616 <HAL_SPI_Receive+0x1e6>
 800f6da:	e084      	b.n	800f7e6 <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	695b      	ldr	r3, [r3, #20]
 800f6e2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d052      	beq.n	800f790 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	695b      	ldr	r3, [r3, #20]
 800f6f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d014      	beq.n	800f722 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681a      	ldr	r2, [r3, #0]
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f700:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f702:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f708:	1d1a      	adds	r2, r3, #4
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f714:	b29b      	uxth	r3, r3
 800f716:	3b04      	subs	r3, #4
 800f718:	b29a      	uxth	r2, r3
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f720:	e05a      	b.n	800f7d8 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	695b      	ldr	r3, [r3, #20]
 800f728:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f72c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f730:	d914      	bls.n	800f75c <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f736:	69ba      	ldr	r2, [r7, #24]
 800f738:	8812      	ldrh	r2, [r2, #0]
 800f73a:	b292      	uxth	r2, r2
 800f73c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f742:	1c9a      	adds	r2, r3, #2
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f74e:	b29b      	uxth	r3, r3
 800f750:	3b02      	subs	r3, #2
 800f752:	b29a      	uxth	r2, r3
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f75a:	e03d      	b.n	800f7d8 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f768:	7812      	ldrb	r2, [r2, #0]
 800f76a:	b2d2      	uxtb	r2, r2
 800f76c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f772:	1c5a      	adds	r2, r3, #1
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f77e:	b29b      	uxth	r3, r3
 800f780:	3b01      	subs	r3, #1
 800f782:	b29a      	uxth	r2, r3
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f78a:	e025      	b.n	800f7d8 <HAL_SPI_Receive+0x3a8>
 800f78c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f790:	f7f5 fc18 	bl	8004fc4 <HAL_GetTick>
 800f794:	4602      	mov	r2, r0
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	1ad3      	subs	r3, r2, r3
 800f79a:	683a      	ldr	r2, [r7, #0]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d803      	bhi.n	800f7a8 <HAL_SPI_Receive+0x378>
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a6:	d102      	bne.n	800f7ae <HAL_SPI_Receive+0x37e>
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d114      	bne.n	800f7d8 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f7ae:	68f8      	ldr	r0, [r7, #12]
 800f7b0:	f000 fb1c 	bl	800fdec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f7d4:	2303      	movs	r3, #3
 800f7d6:	e019      	b.n	800f80c <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	f47f af7b 	bne.w	800f6dc <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f7e6:	68f8      	ldr	r0, [r7, #12]
 800f7e8:	f000 fb00 	bl	800fdec <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2200      	movs	r2, #0
 800f7f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2201      	movs	r2, #1
 800f7f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f802:	2b00      	cmp	r3, #0
 800f804:	d001      	beq.n	800f80a <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800f806:	2301      	movs	r3, #1
 800f808:	e000      	b.n	800f80c <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800f80a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3720      	adds	r7, #32
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}

0800f814 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b08e      	sub	sp, #56	; 0x38
 800f818:	af02      	add	r7, sp, #8
 800f81a:	60f8      	str	r0, [r7, #12]
 800f81c:	60b9      	str	r1, [r7, #8]
 800f81e:	607a      	str	r2, [r7, #4]
 800f820:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f822:	2300      	movs	r3, #0
 800f824:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	3320      	adds	r3, #32
 800f82e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	3330      	adds	r3, #48	; 0x30
 800f836:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d101      	bne.n	800f846 <HAL_SPI_TransmitReceive+0x32>
 800f842:	2302      	movs	r3, #2
 800f844:	e2ce      	b.n	800fde4 <HAL_SPI_TransmitReceive+0x5d0>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2201      	movs	r2, #1
 800f84a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f84e:	f7f5 fbb9 	bl	8004fc4 <HAL_GetTick>
 800f852:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800f854:	887b      	ldrh	r3, [r7, #2]
 800f856:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800f858:	887b      	ldrh	r3, [r7, #2]
 800f85a:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f862:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f86a:	7efb      	ldrb	r3, [r7, #27]
 800f86c:	2b01      	cmp	r3, #1
 800f86e:	d014      	beq.n	800f89a <HAL_SPI_TransmitReceive+0x86>
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f876:	d106      	bne.n	800f886 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d102      	bne.n	800f886 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800f880:	7efb      	ldrb	r3, [r7, #27]
 800f882:	2b04      	cmp	r3, #4
 800f884:	d009      	beq.n	800f89a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800f886:	2302      	movs	r3, #2
 800f888:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	2200      	movs	r2, #0
 800f890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f894:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f898:	e2a4      	b.n	800fde4 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d005      	beq.n	800f8ac <HAL_SPI_TransmitReceive+0x98>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d002      	beq.n	800f8ac <HAL_SPI_TransmitReceive+0x98>
 800f8a6:	887b      	ldrh	r3, [r7, #2]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d109      	bne.n	800f8c0 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f8ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f8be:	e291      	b.n	800fde4 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f8c6:	b2db      	uxtb	r3, r3
 800f8c8:	2b04      	cmp	r3, #4
 800f8ca:	d003      	beq.n	800f8d4 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	2205      	movs	r2, #5
 800f8d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	687a      	ldr	r2, [r7, #4]
 800f8e0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	887a      	ldrh	r2, [r7, #2]
 800f8e6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	887a      	ldrh	r2, [r7, #2]
 800f8ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	68ba      	ldr	r2, [r7, #8]
 800f8f6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	887a      	ldrh	r2, [r7, #2]
 800f8fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	887a      	ldrh	r2, [r7, #2]
 800f904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2200      	movs	r2, #0
 800f90c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2200      	movs	r2, #0
 800f912:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	685a      	ldr	r2, [r3, #4]
 800f91a:	4b9f      	ldr	r3, [pc, #636]	; (800fb98 <HAL_SPI_TransmitReceive+0x384>)
 800f91c:	4013      	ands	r3, r2
 800f91e:	8879      	ldrh	r1, [r7, #2]
 800f920:	68fa      	ldr	r2, [r7, #12]
 800f922:	6812      	ldr	r2, [r2, #0]
 800f924:	430b      	orrs	r3, r1
 800f926:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f042 0201 	orr.w	r2, r2, #1
 800f936:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	685b      	ldr	r3, [r3, #4]
 800f93c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f940:	d107      	bne.n	800f952 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	681a      	ldr	r2, [r3, #0]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f950:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	2b0f      	cmp	r3, #15
 800f958:	d970      	bls.n	800fa3c <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f95a:	e068      	b.n	800fa2e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	695b      	ldr	r3, [r3, #20]
 800f962:	f003 0302 	and.w	r3, r3, #2
 800f966:	2b02      	cmp	r3, #2
 800f968:	d11a      	bne.n	800f9a0 <HAL_SPI_TransmitReceive+0x18c>
 800f96a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d017      	beq.n	800f9a0 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	6812      	ldr	r2, [r2, #0]
 800f97a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f980:	1d1a      	adds	r2, r3, #4
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	3b01      	subs	r3, #1
 800f990:	b29a      	uxth	r2, r3
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f99e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	695a      	ldr	r2, [r3, #20]
 800f9a6:	f248 0308 	movw	r3, #32776	; 0x8008
 800f9aa:	4013      	ands	r3, r2
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d01a      	beq.n	800f9e6 <HAL_SPI_TransmitReceive+0x1d2>
 800f9b0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d017      	beq.n	800f9e6 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f9c0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9c6:	1d1a      	adds	r2, r3, #4
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f9d2:	b29b      	uxth	r3, r3
 800f9d4:	3b01      	subs	r3, #1
 800f9d6:	b29a      	uxth	r2, r3
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f9e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f9e6:	f7f5 faed 	bl	8004fc4 <HAL_GetTick>
 800f9ea:	4602      	mov	r2, r0
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	1ad3      	subs	r3, r2, r3
 800f9f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d803      	bhi.n	800f9fe <HAL_SPI_TransmitReceive+0x1ea>
 800f9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9fc:	d102      	bne.n	800fa04 <HAL_SPI_TransmitReceive+0x1f0>
 800f9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d114      	bne.n	800fa2e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800fa04:	68f8      	ldr	r0, [r7, #12]
 800fa06:	f000 f9f1 	bl	800fdec <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2200      	movs	r2, #0
 800fa0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2201      	movs	r2, #1
 800fa26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800fa2a:	2303      	movs	r3, #3
 800fa2c:	e1da      	b.n	800fde4 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fa2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d193      	bne.n	800f95c <HAL_SPI_TransmitReceive+0x148>
 800fa34:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d190      	bne.n	800f95c <HAL_SPI_TransmitReceive+0x148>
 800fa3a:	e1ac      	b.n	800fd96 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	68db      	ldr	r3, [r3, #12]
 800fa40:	2b07      	cmp	r3, #7
 800fa42:	f240 81a0 	bls.w	800fd86 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fa46:	e0a9      	b.n	800fb9c <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	695b      	ldr	r3, [r3, #20]
 800fa4e:	f003 0302 	and.w	r3, r3, #2
 800fa52:	2b02      	cmp	r3, #2
 800fa54:	d139      	bne.n	800faca <HAL_SPI_TransmitReceive+0x2b6>
 800fa56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d036      	beq.n	800faca <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fa5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d91c      	bls.n	800fa9c <HAL_SPI_TransmitReceive+0x288>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d018      	beq.n	800fa9c <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	6812      	ldr	r2, [r2, #0]
 800fa74:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa7a:	1d1a      	adds	r2, r3, #4
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa86:	b29b      	uxth	r3, r3
 800fa88:	3b02      	subs	r3, #2
 800fa8a:	b29a      	uxth	r2, r3
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fa98:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fa9a:	e016      	b.n	800faca <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800faa0:	881a      	ldrh	r2, [r3, #0]
 800faa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800faaa:	1c9a      	adds	r2, r3, #2
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	3b01      	subs	r3, #1
 800faba:	b29a      	uxth	r2, r3
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fac8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	695b      	ldr	r3, [r3, #20]
 800fad0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d03a      	beq.n	800fb4e <HAL_SPI_TransmitReceive+0x33a>
 800fad8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d037      	beq.n	800fb4e <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	695b      	ldr	r3, [r3, #20]
 800fae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d018      	beq.n	800fb1e <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800faf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800faf6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fafc:	1d1a      	adds	r2, r3, #4
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	3b02      	subs	r3, #2
 800fb0c:	b29a      	uxth	r2, r3
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fb1c:	e017      	b.n	800fb4e <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb22:	6a3a      	ldr	r2, [r7, #32]
 800fb24:	8812      	ldrh	r2, [r2, #0]
 800fb26:	b292      	uxth	r2, r2
 800fb28:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fb2e:	1c9a      	adds	r2, r3, #2
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb3a:	b29b      	uxth	r3, r3
 800fb3c:	3b01      	subs	r3, #1
 800fb3e:	b29a      	uxth	r2, r3
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb4c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fb4e:	f7f5 fa39 	bl	8004fc4 <HAL_GetTick>
 800fb52:	4602      	mov	r2, r0
 800fb54:	69fb      	ldr	r3, [r7, #28]
 800fb56:	1ad3      	subs	r3, r2, r3
 800fb58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	d803      	bhi.n	800fb66 <HAL_SPI_TransmitReceive+0x352>
 800fb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb64:	d102      	bne.n	800fb6c <HAL_SPI_TransmitReceive+0x358>
 800fb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d117      	bne.n	800fb9c <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800fb6c:	68f8      	ldr	r0, [r7, #12]
 800fb6e:	f000 f93d 	bl	800fdec <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	2200      	movs	r2, #0
 800fb76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	2201      	movs	r2, #1
 800fb8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800fb92:	2303      	movs	r3, #3
 800fb94:	e126      	b.n	800fde4 <HAL_SPI_TransmitReceive+0x5d0>
 800fb96:	bf00      	nop
 800fb98:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fb9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	f47f af52 	bne.w	800fa48 <HAL_SPI_TransmitReceive+0x234>
 800fba4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	f47f af4e 	bne.w	800fa48 <HAL_SPI_TransmitReceive+0x234>
 800fbac:	e0f3      	b.n	800fd96 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	695b      	ldr	r3, [r3, #20]
 800fbb4:	f003 0302 	and.w	r3, r3, #2
 800fbb8:	2b02      	cmp	r3, #2
 800fbba:	d15a      	bne.n	800fc72 <HAL_SPI_TransmitReceive+0x45e>
 800fbbc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d057      	beq.n	800fc72 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fbc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fbc4:	2b03      	cmp	r3, #3
 800fbc6:	d91c      	bls.n	800fc02 <HAL_SPI_TransmitReceive+0x3ee>
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbcc:	2b40      	cmp	r3, #64	; 0x40
 800fbce:	d918      	bls.n	800fc02 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	6812      	ldr	r2, [r2, #0]
 800fbda:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbe0:	1d1a      	adds	r2, r3, #4
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	3b04      	subs	r3, #4
 800fbf0:	b29a      	uxth	r2, r3
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fc00:	e037      	b.n	800fc72 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fc02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d91b      	bls.n	800fc40 <HAL_SPI_TransmitReceive+0x42c>
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d017      	beq.n	800fc40 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc14:	881a      	ldrh	r2, [r3, #0]
 800fc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc18:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc1e:	1c9a      	adds	r2, r3, #2
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	3b02      	subs	r3, #2
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fc3e:	e018      	b.n	800fc72 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	3320      	adds	r3, #32
 800fc4a:	7812      	ldrb	r2, [r2, #0]
 800fc4c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc52:	1c5a      	adds	r2, r3, #1
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	3b01      	subs	r3, #1
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc70:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	695b      	ldr	r3, [r3, #20]
 800fc78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d05e      	beq.n	800fd3e <HAL_SPI_TransmitReceive+0x52a>
 800fc80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d05b      	beq.n	800fd3e <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	695b      	ldr	r3, [r3, #20]
 800fc8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d018      	beq.n	800fcc6 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	681a      	ldr	r2, [r3, #0]
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fc9e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fca4:	1d1a      	adds	r2, r3, #4
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fcb0:	b29b      	uxth	r3, r3
 800fcb2:	3b04      	subs	r3, #4
 800fcb4:	b29a      	uxth	r2, r3
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fcc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fcc4:	e03b      	b.n	800fd3e <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	695b      	ldr	r3, [r3, #20]
 800fccc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800fcd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fcd4:	d918      	bls.n	800fd08 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcda:	6a3a      	ldr	r2, [r7, #32]
 800fcdc:	8812      	ldrh	r2, [r2, #0]
 800fcde:	b292      	uxth	r2, r2
 800fce0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fce6:	1c9a      	adds	r2, r3, #2
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fcf2:	b29b      	uxth	r3, r3
 800fcf4:	3b02      	subs	r3, #2
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fd04:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fd06:	e01a      	b.n	800fd3e <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd14:	7812      	ldrb	r2, [r2, #0]
 800fd16:	b2d2      	uxtb	r2, r2
 800fd18:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	3b01      	subs	r3, #1
 800fd2e:	b29a      	uxth	r2, r3
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fd3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd3e:	f7f5 f941 	bl	8004fc4 <HAL_GetTick>
 800fd42:	4602      	mov	r2, r0
 800fd44:	69fb      	ldr	r3, [r7, #28]
 800fd46:	1ad3      	subs	r3, r2, r3
 800fd48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d803      	bhi.n	800fd56 <HAL_SPI_TransmitReceive+0x542>
 800fd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd54:	d102      	bne.n	800fd5c <HAL_SPI_TransmitReceive+0x548>
 800fd56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d114      	bne.n	800fd86 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800fd5c:	68f8      	ldr	r0, [r7, #12]
 800fd5e:	f000 f845 	bl	800fdec <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2200      	movs	r2, #0
 800fd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd70:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800fd82:	2303      	movs	r3, #3
 800fd84:	e02e      	b.n	800fde4 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fd86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	f47f af10 	bne.w	800fbae <HAL_SPI_TransmitReceive+0x39a>
 800fd8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	f47f af0c 	bne.w	800fbae <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800fd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd98:	9300      	str	r3, [sp, #0]
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	2108      	movs	r1, #8
 800fda0:	68f8      	ldr	r0, [r7, #12]
 800fda2:	f000 f8c3 	bl	800ff2c <SPI_WaitOnFlagUntilTimeout>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d007      	beq.n	800fdbc <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdb2:	f043 0220 	orr.w	r2, r3, #32
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f000 f815 	bl	800fdec <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	2201      	movs	r2, #1
 800fdce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d001      	beq.n	800fde0 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800fddc:	2301      	movs	r3, #1
 800fdde:	e001      	b.n	800fde4 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800fde0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	3730      	adds	r7, #48	; 0x30
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800fdec:	b480      	push	{r7}
 800fdee:	b085      	sub	sp, #20
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	695b      	ldr	r3, [r3, #20]
 800fdfa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	699a      	ldr	r2, [r3, #24]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f042 0208 	orr.w	r2, r2, #8
 800fe0a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	699a      	ldr	r2, [r3, #24]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f042 0210 	orr.w	r2, r2, #16
 800fe1a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	681a      	ldr	r2, [r3, #0]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f022 0201 	bic.w	r2, r2, #1
 800fe2a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	6919      	ldr	r1, [r3, #16]
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681a      	ldr	r2, [r3, #0]
 800fe36:	4b3c      	ldr	r3, [pc, #240]	; (800ff28 <SPI_CloseTransfer+0x13c>)
 800fe38:	400b      	ands	r3, r1
 800fe3a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	689a      	ldr	r2, [r3, #8]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800fe4a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fe52:	b2db      	uxtb	r3, r3
 800fe54:	2b04      	cmp	r3, #4
 800fe56:	d014      	beq.n	800fe82 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	f003 0320 	and.w	r3, r3, #32
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d00f      	beq.n	800fe82 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	699a      	ldr	r2, [r3, #24]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f042 0220 	orr.w	r2, r2, #32
 800fe80:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	2b03      	cmp	r3, #3
 800fe8c:	d014      	beq.n	800feb8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d00f      	beq.n	800feb8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fe9e:	f043 0204 	orr.w	r2, r3, #4
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	699a      	ldr	r2, [r3, #24]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800feb6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d00f      	beq.n	800fee2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fec8:	f043 0201 	orr.w	r2, r3, #1
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	699a      	ldr	r2, [r3, #24]
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fee0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d00f      	beq.n	800ff0c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fef2:	f043 0208 	orr.w	r2, r3, #8
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	699a      	ldr	r2, [r3, #24]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ff0a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2200      	movs	r2, #0
 800ff10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2200      	movs	r2, #0
 800ff18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ff1c:	bf00      	nop
 800ff1e:	3714      	adds	r7, #20
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr
 800ff28:	fffffc90 	.word	0xfffffc90

0800ff2c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b084      	sub	sp, #16
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	60f8      	str	r0, [r7, #12]
 800ff34:	60b9      	str	r1, [r7, #8]
 800ff36:	603b      	str	r3, [r7, #0]
 800ff38:	4613      	mov	r3, r2
 800ff3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ff3c:	e010      	b.n	800ff60 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff3e:	f7f5 f841 	bl	8004fc4 <HAL_GetTick>
 800ff42:	4602      	mov	r2, r0
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	1ad3      	subs	r3, r2, r3
 800ff48:	69ba      	ldr	r2, [r7, #24]
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d803      	bhi.n	800ff56 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ff4e:	69bb      	ldr	r3, [r7, #24]
 800ff50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff54:	d102      	bne.n	800ff5c <SPI_WaitOnFlagUntilTimeout+0x30>
 800ff56:	69bb      	ldr	r3, [r7, #24]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d101      	bne.n	800ff60 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ff5c:	2303      	movs	r3, #3
 800ff5e:	e00f      	b.n	800ff80 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	695a      	ldr	r2, [r3, #20]
 800ff66:	68bb      	ldr	r3, [r7, #8]
 800ff68:	4013      	ands	r3, r2
 800ff6a:	68ba      	ldr	r2, [r7, #8]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	bf0c      	ite	eq
 800ff70:	2301      	moveq	r3, #1
 800ff72:	2300      	movne	r3, #0
 800ff74:	b2db      	uxtb	r3, r3
 800ff76:	461a      	mov	r2, r3
 800ff78:	79fb      	ldrb	r3, [r7, #7]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d0df      	beq.n	800ff3e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ff7e:	2300      	movs	r3, #0
}
 800ff80:	4618      	mov	r0, r3
 800ff82:	3710      	adds	r7, #16
 800ff84:	46bd      	mov	sp, r7
 800ff86:	bd80      	pop	{r7, pc}

0800ff88 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ff88:	b480      	push	{r7}
 800ff8a:	b085      	sub	sp, #20
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff94:	095b      	lsrs	r3, r3, #5
 800ff96:	3301      	adds	r3, #1
 800ff98:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	68db      	ldr	r3, [r3, #12]
 800ff9e:	3301      	adds	r3, #1
 800ffa0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	3307      	adds	r3, #7
 800ffa6:	08db      	lsrs	r3, r3, #3
 800ffa8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	68fa      	ldr	r2, [r7, #12]
 800ffae:	fb02 f303 	mul.w	r3, r2, r3
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3714      	adds	r7, #20
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr

0800ffbe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ffbe:	b580      	push	{r7, lr}
 800ffc0:	b082      	sub	sp, #8
 800ffc2:	af00      	add	r7, sp, #0
 800ffc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d101      	bne.n	800ffd0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	e049      	b.n	8010064 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d106      	bne.n	800ffea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f7f4 fa43 	bl	8004470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2202      	movs	r2, #2
 800ffee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	3304      	adds	r3, #4
 800fffa:	4619      	mov	r1, r3
 800fffc:	4610      	mov	r0, r2
 800fffe:	f000 ff17 	bl	8010e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	2201      	movs	r2, #1
 8010006:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2201      	movs	r2, #1
 801000e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2201      	movs	r2, #1
 8010016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2201      	movs	r2, #1
 801001e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2201      	movs	r2, #1
 8010026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	2201      	movs	r2, #1
 801002e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	2201      	movs	r2, #1
 8010036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2201      	movs	r2, #1
 801003e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2201      	movs	r2, #1
 8010046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	2201      	movs	r2, #1
 801004e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2201      	movs	r2, #1
 8010056:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	2201      	movs	r2, #1
 801005e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010062:	2300      	movs	r3, #0
}
 8010064:	4618      	mov	r0, r3
 8010066:	3708      	adds	r7, #8
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801006c:	b480      	push	{r7}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801007a:	b2db      	uxtb	r3, r3
 801007c:	2b01      	cmp	r3, #1
 801007e:	d001      	beq.n	8010084 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010080:	2301      	movs	r3, #1
 8010082:	e05e      	b.n	8010142 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2202      	movs	r2, #2
 8010088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	68da      	ldr	r2, [r3, #12]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f042 0201 	orr.w	r2, r2, #1
 801009a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	4a2b      	ldr	r2, [pc, #172]	; (8010150 <HAL_TIM_Base_Start_IT+0xe4>)
 80100a2:	4293      	cmp	r3, r2
 80100a4:	d02c      	beq.n	8010100 <HAL_TIM_Base_Start_IT+0x94>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80100ae:	d027      	beq.n	8010100 <HAL_TIM_Base_Start_IT+0x94>
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	4a27      	ldr	r2, [pc, #156]	; (8010154 <HAL_TIM_Base_Start_IT+0xe8>)
 80100b6:	4293      	cmp	r3, r2
 80100b8:	d022      	beq.n	8010100 <HAL_TIM_Base_Start_IT+0x94>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	4a26      	ldr	r2, [pc, #152]	; (8010158 <HAL_TIM_Base_Start_IT+0xec>)
 80100c0:	4293      	cmp	r3, r2
 80100c2:	d01d      	beq.n	8010100 <HAL_TIM_Base_Start_IT+0x94>
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	4a24      	ldr	r2, [pc, #144]	; (801015c <HAL_TIM_Base_Start_IT+0xf0>)
 80100ca:	4293      	cmp	r3, r2
 80100cc:	d018      	beq.n	8010100 <HAL_TIM_Base_Start_IT+0x94>
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	4a23      	ldr	r2, [pc, #140]	; (8010160 <HAL_TIM_Base_Start_IT+0xf4>)
 80100d4:	4293      	cmp	r3, r2
 80100d6:	d013      	beq.n	8010100 <HAL_TIM_Base_Start_IT+0x94>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4a21      	ldr	r2, [pc, #132]	; (8010164 <HAL_TIM_Base_Start_IT+0xf8>)
 80100de:	4293      	cmp	r3, r2
 80100e0:	d00e      	beq.n	8010100 <HAL_TIM_Base_Start_IT+0x94>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	4a20      	ldr	r2, [pc, #128]	; (8010168 <HAL_TIM_Base_Start_IT+0xfc>)
 80100e8:	4293      	cmp	r3, r2
 80100ea:	d009      	beq.n	8010100 <HAL_TIM_Base_Start_IT+0x94>
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	4a1e      	ldr	r2, [pc, #120]	; (801016c <HAL_TIM_Base_Start_IT+0x100>)
 80100f2:	4293      	cmp	r3, r2
 80100f4:	d004      	beq.n	8010100 <HAL_TIM_Base_Start_IT+0x94>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	4a1d      	ldr	r2, [pc, #116]	; (8010170 <HAL_TIM_Base_Start_IT+0x104>)
 80100fc:	4293      	cmp	r3, r2
 80100fe:	d115      	bne.n	801012c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	689a      	ldr	r2, [r3, #8]
 8010106:	4b1b      	ldr	r3, [pc, #108]	; (8010174 <HAL_TIM_Base_Start_IT+0x108>)
 8010108:	4013      	ands	r3, r2
 801010a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	2b06      	cmp	r3, #6
 8010110:	d015      	beq.n	801013e <HAL_TIM_Base_Start_IT+0xd2>
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010118:	d011      	beq.n	801013e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f042 0201 	orr.w	r2, r2, #1
 8010128:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801012a:	e008      	b.n	801013e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	f042 0201 	orr.w	r2, r2, #1
 801013a:	601a      	str	r2, [r3, #0]
 801013c:	e000      	b.n	8010140 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801013e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010140:	2300      	movs	r3, #0
}
 8010142:	4618      	mov	r0, r3
 8010144:	3714      	adds	r7, #20
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	40010000 	.word	0x40010000
 8010154:	40000400 	.word	0x40000400
 8010158:	40000800 	.word	0x40000800
 801015c:	40000c00 	.word	0x40000c00
 8010160:	40010400 	.word	0x40010400
 8010164:	40001800 	.word	0x40001800
 8010168:	40014000 	.word	0x40014000
 801016c:	4000e000 	.word	0x4000e000
 8010170:	4000e400 	.word	0x4000e400
 8010174:	00010007 	.word	0x00010007

08010178 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b082      	sub	sp, #8
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d101      	bne.n	801018a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010186:	2301      	movs	r3, #1
 8010188:	e049      	b.n	801021e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010190:	b2db      	uxtb	r3, r3
 8010192:	2b00      	cmp	r3, #0
 8010194:	d106      	bne.n	80101a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2200      	movs	r2, #0
 801019a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7f4 f8d2 	bl	8004348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2202      	movs	r2, #2
 80101a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	3304      	adds	r3, #4
 80101b4:	4619      	mov	r1, r3
 80101b6:	4610      	mov	r0, r2
 80101b8:	f000 fe3a 	bl	8010e30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2201      	movs	r2, #1
 80101c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2201      	movs	r2, #1
 80101c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2201      	movs	r2, #1
 80101d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	2201      	movs	r2, #1
 80101d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2201      	movs	r2, #1
 80101e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2201      	movs	r2, #1
 80101e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2201      	movs	r2, #1
 80101f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	2201      	movs	r2, #1
 80101f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2201      	movs	r2, #1
 8010200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2201      	movs	r2, #1
 8010208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2201      	movs	r2, #1
 8010210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2201      	movs	r2, #1
 8010218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801021c:	2300      	movs	r3, #0
}
 801021e:	4618      	mov	r0, r3
 8010220:	3708      	adds	r7, #8
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
	...

08010228 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d109      	bne.n	801024c <HAL_TIM_PWM_Start+0x24>
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801023e:	b2db      	uxtb	r3, r3
 8010240:	2b01      	cmp	r3, #1
 8010242:	bf14      	ite	ne
 8010244:	2301      	movne	r3, #1
 8010246:	2300      	moveq	r3, #0
 8010248:	b2db      	uxtb	r3, r3
 801024a:	e03c      	b.n	80102c6 <HAL_TIM_PWM_Start+0x9e>
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	2b04      	cmp	r3, #4
 8010250:	d109      	bne.n	8010266 <HAL_TIM_PWM_Start+0x3e>
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010258:	b2db      	uxtb	r3, r3
 801025a:	2b01      	cmp	r3, #1
 801025c:	bf14      	ite	ne
 801025e:	2301      	movne	r3, #1
 8010260:	2300      	moveq	r3, #0
 8010262:	b2db      	uxtb	r3, r3
 8010264:	e02f      	b.n	80102c6 <HAL_TIM_PWM_Start+0x9e>
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	2b08      	cmp	r3, #8
 801026a:	d109      	bne.n	8010280 <HAL_TIM_PWM_Start+0x58>
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010272:	b2db      	uxtb	r3, r3
 8010274:	2b01      	cmp	r3, #1
 8010276:	bf14      	ite	ne
 8010278:	2301      	movne	r3, #1
 801027a:	2300      	moveq	r3, #0
 801027c:	b2db      	uxtb	r3, r3
 801027e:	e022      	b.n	80102c6 <HAL_TIM_PWM_Start+0x9e>
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	2b0c      	cmp	r3, #12
 8010284:	d109      	bne.n	801029a <HAL_TIM_PWM_Start+0x72>
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801028c:	b2db      	uxtb	r3, r3
 801028e:	2b01      	cmp	r3, #1
 8010290:	bf14      	ite	ne
 8010292:	2301      	movne	r3, #1
 8010294:	2300      	moveq	r3, #0
 8010296:	b2db      	uxtb	r3, r3
 8010298:	e015      	b.n	80102c6 <HAL_TIM_PWM_Start+0x9e>
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	2b10      	cmp	r3, #16
 801029e:	d109      	bne.n	80102b4 <HAL_TIM_PWM_Start+0x8c>
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80102a6:	b2db      	uxtb	r3, r3
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	bf14      	ite	ne
 80102ac:	2301      	movne	r3, #1
 80102ae:	2300      	moveq	r3, #0
 80102b0:	b2db      	uxtb	r3, r3
 80102b2:	e008      	b.n	80102c6 <HAL_TIM_PWM_Start+0x9e>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80102ba:	b2db      	uxtb	r3, r3
 80102bc:	2b01      	cmp	r3, #1
 80102be:	bf14      	ite	ne
 80102c0:	2301      	movne	r3, #1
 80102c2:	2300      	moveq	r3, #0
 80102c4:	b2db      	uxtb	r3, r3
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d001      	beq.n	80102ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80102ca:	2301      	movs	r3, #1
 80102cc:	e0ab      	b.n	8010426 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d104      	bne.n	80102de <HAL_TIM_PWM_Start+0xb6>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	2202      	movs	r2, #2
 80102d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80102dc:	e023      	b.n	8010326 <HAL_TIM_PWM_Start+0xfe>
 80102de:	683b      	ldr	r3, [r7, #0]
 80102e0:	2b04      	cmp	r3, #4
 80102e2:	d104      	bne.n	80102ee <HAL_TIM_PWM_Start+0xc6>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	2202      	movs	r2, #2
 80102e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80102ec:	e01b      	b.n	8010326 <HAL_TIM_PWM_Start+0xfe>
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	2b08      	cmp	r3, #8
 80102f2:	d104      	bne.n	80102fe <HAL_TIM_PWM_Start+0xd6>
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2202      	movs	r2, #2
 80102f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80102fc:	e013      	b.n	8010326 <HAL_TIM_PWM_Start+0xfe>
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	2b0c      	cmp	r3, #12
 8010302:	d104      	bne.n	801030e <HAL_TIM_PWM_Start+0xe6>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2202      	movs	r2, #2
 8010308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801030c:	e00b      	b.n	8010326 <HAL_TIM_PWM_Start+0xfe>
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	2b10      	cmp	r3, #16
 8010312:	d104      	bne.n	801031e <HAL_TIM_PWM_Start+0xf6>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2202      	movs	r2, #2
 8010318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801031c:	e003      	b.n	8010326 <HAL_TIM_PWM_Start+0xfe>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2202      	movs	r2, #2
 8010322:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	2201      	movs	r2, #1
 801032c:	6839      	ldr	r1, [r7, #0]
 801032e:	4618      	mov	r0, r3
 8010330:	f001 f998 	bl	8011664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	4a3d      	ldr	r2, [pc, #244]	; (8010430 <HAL_TIM_PWM_Start+0x208>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d013      	beq.n	8010366 <HAL_TIM_PWM_Start+0x13e>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	4a3c      	ldr	r2, [pc, #240]	; (8010434 <HAL_TIM_PWM_Start+0x20c>)
 8010344:	4293      	cmp	r3, r2
 8010346:	d00e      	beq.n	8010366 <HAL_TIM_PWM_Start+0x13e>
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	4a3a      	ldr	r2, [pc, #232]	; (8010438 <HAL_TIM_PWM_Start+0x210>)
 801034e:	4293      	cmp	r3, r2
 8010350:	d009      	beq.n	8010366 <HAL_TIM_PWM_Start+0x13e>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	4a39      	ldr	r2, [pc, #228]	; (801043c <HAL_TIM_PWM_Start+0x214>)
 8010358:	4293      	cmp	r3, r2
 801035a:	d004      	beq.n	8010366 <HAL_TIM_PWM_Start+0x13e>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	4a37      	ldr	r2, [pc, #220]	; (8010440 <HAL_TIM_PWM_Start+0x218>)
 8010362:	4293      	cmp	r3, r2
 8010364:	d101      	bne.n	801036a <HAL_TIM_PWM_Start+0x142>
 8010366:	2301      	movs	r3, #1
 8010368:	e000      	b.n	801036c <HAL_TIM_PWM_Start+0x144>
 801036a:	2300      	movs	r3, #0
 801036c:	2b00      	cmp	r3, #0
 801036e:	d007      	beq.n	8010380 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801037e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	4a2a      	ldr	r2, [pc, #168]	; (8010430 <HAL_TIM_PWM_Start+0x208>)
 8010386:	4293      	cmp	r3, r2
 8010388:	d02c      	beq.n	80103e4 <HAL_TIM_PWM_Start+0x1bc>
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010392:	d027      	beq.n	80103e4 <HAL_TIM_PWM_Start+0x1bc>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	4a2a      	ldr	r2, [pc, #168]	; (8010444 <HAL_TIM_PWM_Start+0x21c>)
 801039a:	4293      	cmp	r3, r2
 801039c:	d022      	beq.n	80103e4 <HAL_TIM_PWM_Start+0x1bc>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	4a29      	ldr	r2, [pc, #164]	; (8010448 <HAL_TIM_PWM_Start+0x220>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d01d      	beq.n	80103e4 <HAL_TIM_PWM_Start+0x1bc>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	4a27      	ldr	r2, [pc, #156]	; (801044c <HAL_TIM_PWM_Start+0x224>)
 80103ae:	4293      	cmp	r3, r2
 80103b0:	d018      	beq.n	80103e4 <HAL_TIM_PWM_Start+0x1bc>
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	4a1f      	ldr	r2, [pc, #124]	; (8010434 <HAL_TIM_PWM_Start+0x20c>)
 80103b8:	4293      	cmp	r3, r2
 80103ba:	d013      	beq.n	80103e4 <HAL_TIM_PWM_Start+0x1bc>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	4a23      	ldr	r2, [pc, #140]	; (8010450 <HAL_TIM_PWM_Start+0x228>)
 80103c2:	4293      	cmp	r3, r2
 80103c4:	d00e      	beq.n	80103e4 <HAL_TIM_PWM_Start+0x1bc>
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4a1b      	ldr	r2, [pc, #108]	; (8010438 <HAL_TIM_PWM_Start+0x210>)
 80103cc:	4293      	cmp	r3, r2
 80103ce:	d009      	beq.n	80103e4 <HAL_TIM_PWM_Start+0x1bc>
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	4a1f      	ldr	r2, [pc, #124]	; (8010454 <HAL_TIM_PWM_Start+0x22c>)
 80103d6:	4293      	cmp	r3, r2
 80103d8:	d004      	beq.n	80103e4 <HAL_TIM_PWM_Start+0x1bc>
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	4a1e      	ldr	r2, [pc, #120]	; (8010458 <HAL_TIM_PWM_Start+0x230>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d115      	bne.n	8010410 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	689a      	ldr	r2, [r3, #8]
 80103ea:	4b1c      	ldr	r3, [pc, #112]	; (801045c <HAL_TIM_PWM_Start+0x234>)
 80103ec:	4013      	ands	r3, r2
 80103ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	2b06      	cmp	r3, #6
 80103f4:	d015      	beq.n	8010422 <HAL_TIM_PWM_Start+0x1fa>
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103fc:	d011      	beq.n	8010422 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f042 0201 	orr.w	r2, r2, #1
 801040c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801040e:	e008      	b.n	8010422 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	681a      	ldr	r2, [r3, #0]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f042 0201 	orr.w	r2, r2, #1
 801041e:	601a      	str	r2, [r3, #0]
 8010420:	e000      	b.n	8010424 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010422:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010424:	2300      	movs	r3, #0
}
 8010426:	4618      	mov	r0, r3
 8010428:	3710      	adds	r7, #16
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	40010000 	.word	0x40010000
 8010434:	40010400 	.word	0x40010400
 8010438:	40014000 	.word	0x40014000
 801043c:	40014400 	.word	0x40014400
 8010440:	40014800 	.word	0x40014800
 8010444:	40000400 	.word	0x40000400
 8010448:	40000800 	.word	0x40000800
 801044c:	40000c00 	.word	0x40000c00
 8010450:	40001800 	.word	0x40001800
 8010454:	4000e000 	.word	0x4000e000
 8010458:	4000e400 	.word	0x4000e400
 801045c:	00010007 	.word	0x00010007

08010460 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801046a:	2300      	movs	r3, #0
 801046c:	73fb      	strb	r3, [r7, #15]
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	2b0c      	cmp	r3, #12
 8010472:	d855      	bhi.n	8010520 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8010474:	a201      	add	r2, pc, #4	; (adr r2, 801047c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8010476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801047a:	bf00      	nop
 801047c:	080104b1 	.word	0x080104b1
 8010480:	08010521 	.word	0x08010521
 8010484:	08010521 	.word	0x08010521
 8010488:	08010521 	.word	0x08010521
 801048c:	080104cd 	.word	0x080104cd
 8010490:	08010521 	.word	0x08010521
 8010494:	08010521 	.word	0x08010521
 8010498:	08010521 	.word	0x08010521
 801049c:	080104e9 	.word	0x080104e9
 80104a0:	08010521 	.word	0x08010521
 80104a4:	08010521 	.word	0x08010521
 80104a8:	08010521 	.word	0x08010521
 80104ac:	08010505 	.word	0x08010505
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	68da      	ldr	r2, [r3, #12]
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80104be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c4:	4618      	mov	r0, r3
 80104c6:	f7f7 ff77 	bl	80083b8 <HAL_DMA_Abort_IT>
      break;
 80104ca:	e02c      	b.n	8010526 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	68da      	ldr	r2, [r3, #12]
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80104da:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7f7 ff69 	bl	80083b8 <HAL_DMA_Abort_IT>
      break;
 80104e6:	e01e      	b.n	8010526 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	68da      	ldr	r2, [r3, #12]
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80104f6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104fc:	4618      	mov	r0, r3
 80104fe:	f7f7 ff5b 	bl	80083b8 <HAL_DMA_Abort_IT>
      break;
 8010502:	e010      	b.n	8010526 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	68da      	ldr	r2, [r3, #12]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010512:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010518:	4618      	mov	r0, r3
 801051a:	f7f7 ff4d 	bl	80083b8 <HAL_DMA_Abort_IT>
      break;
 801051e:	e002      	b.n	8010526 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8010520:	2301      	movs	r3, #1
 8010522:	73fb      	strb	r3, [r7, #15]
      break;
 8010524:	bf00      	nop
  }

  if (status == HAL_OK)
 8010526:	7bfb      	ldrb	r3, [r7, #15]
 8010528:	2b00      	cmp	r3, #0
 801052a:	f040 8081 	bne.w	8010630 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2200      	movs	r2, #0
 8010534:	6839      	ldr	r1, [r7, #0]
 8010536:	4618      	mov	r0, r3
 8010538:	f001 f894 	bl	8011664 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4a3e      	ldr	r2, [pc, #248]	; (801063c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d013      	beq.n	801056e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	4a3d      	ldr	r2, [pc, #244]	; (8010640 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d00e      	beq.n	801056e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a3b      	ldr	r2, [pc, #236]	; (8010644 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8010556:	4293      	cmp	r3, r2
 8010558:	d009      	beq.n	801056e <HAL_TIM_PWM_Stop_DMA+0x10e>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	681b      	ldr	r3, [r3, #0]
 801055e:	4a3a      	ldr	r2, [pc, #232]	; (8010648 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8010560:	4293      	cmp	r3, r2
 8010562:	d004      	beq.n	801056e <HAL_TIM_PWM_Stop_DMA+0x10e>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	4a38      	ldr	r2, [pc, #224]	; (801064c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 801056a:	4293      	cmp	r3, r2
 801056c:	d101      	bne.n	8010572 <HAL_TIM_PWM_Stop_DMA+0x112>
 801056e:	2301      	movs	r3, #1
 8010570:	e000      	b.n	8010574 <HAL_TIM_PWM_Stop_DMA+0x114>
 8010572:	2300      	movs	r3, #0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d017      	beq.n	80105a8 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	6a1a      	ldr	r2, [r3, #32]
 801057e:	f241 1311 	movw	r3, #4369	; 0x1111
 8010582:	4013      	ands	r3, r2
 8010584:	2b00      	cmp	r3, #0
 8010586:	d10f      	bne.n	80105a8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	6a1a      	ldr	r2, [r3, #32]
 801058e:	f240 4344 	movw	r3, #1092	; 0x444
 8010592:	4013      	ands	r3, r2
 8010594:	2b00      	cmp	r3, #0
 8010596:	d107      	bne.n	80105a8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80105a6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	6a1a      	ldr	r2, [r3, #32]
 80105ae:	f241 1311 	movw	r3, #4369	; 0x1111
 80105b2:	4013      	ands	r3, r2
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d10f      	bne.n	80105d8 <HAL_TIM_PWM_Stop_DMA+0x178>
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	6a1a      	ldr	r2, [r3, #32]
 80105be:	f240 4344 	movw	r3, #1092	; 0x444
 80105c2:	4013      	ands	r3, r2
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d107      	bne.n	80105d8 <HAL_TIM_PWM_Stop_DMA+0x178>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	681a      	ldr	r2, [r3, #0]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f022 0201 	bic.w	r2, r2, #1
 80105d6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d104      	bne.n	80105e8 <HAL_TIM_PWM_Stop_DMA+0x188>
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	2201      	movs	r2, #1
 80105e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80105e6:	e023      	b.n	8010630 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	2b04      	cmp	r3, #4
 80105ec:	d104      	bne.n	80105f8 <HAL_TIM_PWM_Stop_DMA+0x198>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2201      	movs	r2, #1
 80105f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80105f6:	e01b      	b.n	8010630 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	2b08      	cmp	r3, #8
 80105fc:	d104      	bne.n	8010608 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2201      	movs	r2, #1
 8010602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010606:	e013      	b.n	8010630 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	2b0c      	cmp	r3, #12
 801060c:	d104      	bne.n	8010618 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	2201      	movs	r2, #1
 8010612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010616:	e00b      	b.n	8010630 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	2b10      	cmp	r3, #16
 801061c:	d104      	bne.n	8010628 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2201      	movs	r2, #1
 8010622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010626:	e003      	b.n	8010630 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2201      	movs	r2, #1
 801062c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8010630:	7bfb      	ldrb	r3, [r7, #15]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	40010000 	.word	0x40010000
 8010640:	40010400 	.word	0x40010400
 8010644:	40014000 	.word	0x40014000
 8010648:	40014400 	.word	0x40014400
 801064c:	40014800 	.word	0x40014800

08010650 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d101      	bne.n	8010664 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8010660:	2301      	movs	r3, #1
 8010662:	e08f      	b.n	8010784 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801066a:	b2db      	uxtb	r3, r3
 801066c:	2b00      	cmp	r3, #0
 801066e:	d106      	bne.n	801067e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	2200      	movs	r2, #0
 8010674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8010678:	6878      	ldr	r0, [r7, #4]
 801067a:	f7f4 f803 	bl	8004684 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2202      	movs	r2, #2
 8010682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	6899      	ldr	r1, [r3, #8]
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681a      	ldr	r2, [r3, #0]
 8010690:	4b3e      	ldr	r3, [pc, #248]	; (801078c <HAL_TIM_Encoder_Init+0x13c>)
 8010692:	400b      	ands	r3, r1
 8010694:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	3304      	adds	r3, #4
 801069e:	4619      	mov	r1, r3
 80106a0:	4610      	mov	r0, r2
 80106a2:	f000 fbc5 	bl	8010e30 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	689b      	ldr	r3, [r3, #8]
 80106ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	699b      	ldr	r3, [r3, #24]
 80106b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	6a1b      	ldr	r3, [r3, #32]
 80106bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	697a      	ldr	r2, [r7, #20]
 80106c4:	4313      	orrs	r3, r2
 80106c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80106c8:	693a      	ldr	r2, [r7, #16]
 80106ca:	4b31      	ldr	r3, [pc, #196]	; (8010790 <HAL_TIM_Encoder_Init+0x140>)
 80106cc:	4013      	ands	r3, r2
 80106ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	689a      	ldr	r2, [r3, #8]
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	699b      	ldr	r3, [r3, #24]
 80106d8:	021b      	lsls	r3, r3, #8
 80106da:	4313      	orrs	r3, r2
 80106dc:	693a      	ldr	r2, [r7, #16]
 80106de:	4313      	orrs	r3, r2
 80106e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80106e2:	693a      	ldr	r2, [r7, #16]
 80106e4:	4b2b      	ldr	r3, [pc, #172]	; (8010794 <HAL_TIM_Encoder_Init+0x144>)
 80106e6:	4013      	ands	r3, r2
 80106e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80106ea:	693a      	ldr	r2, [r7, #16]
 80106ec:	4b2a      	ldr	r3, [pc, #168]	; (8010798 <HAL_TIM_Encoder_Init+0x148>)
 80106ee:	4013      	ands	r3, r2
 80106f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	68da      	ldr	r2, [r3, #12]
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	69db      	ldr	r3, [r3, #28]
 80106fa:	021b      	lsls	r3, r3, #8
 80106fc:	4313      	orrs	r3, r2
 80106fe:	693a      	ldr	r2, [r7, #16]
 8010700:	4313      	orrs	r3, r2
 8010702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8010704:	683b      	ldr	r3, [r7, #0]
 8010706:	691b      	ldr	r3, [r3, #16]
 8010708:	011a      	lsls	r2, r3, #4
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	6a1b      	ldr	r3, [r3, #32]
 801070e:	031b      	lsls	r3, r3, #12
 8010710:	4313      	orrs	r3, r2
 8010712:	693a      	ldr	r2, [r7, #16]
 8010714:	4313      	orrs	r3, r2
 8010716:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801071e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8010726:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	685a      	ldr	r2, [r3, #4]
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	695b      	ldr	r3, [r3, #20]
 8010730:	011b      	lsls	r3, r3, #4
 8010732:	4313      	orrs	r3, r2
 8010734:	68fa      	ldr	r2, [r7, #12]
 8010736:	4313      	orrs	r3, r2
 8010738:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	697a      	ldr	r2, [r7, #20]
 8010740:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	693a      	ldr	r2, [r7, #16]
 8010748:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	68fa      	ldr	r2, [r7, #12]
 8010750:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	2201      	movs	r2, #1
 8010756:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2201      	movs	r2, #1
 801075e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2201      	movs	r2, #1
 8010766:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	2201      	movs	r2, #1
 801076e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	2201      	movs	r2, #1
 8010776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	2201      	movs	r2, #1
 801077e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010782:	2300      	movs	r3, #0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3718      	adds	r7, #24
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}
 801078c:	fffebff8 	.word	0xfffebff8
 8010790:	fffffcfc 	.word	0xfffffcfc
 8010794:	fffff3f3 	.word	0xfffff3f3
 8010798:	ffff0f0f 	.word	0xffff0f0f

0801079c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b082      	sub	sp, #8
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	691b      	ldr	r3, [r3, #16]
 80107aa:	f003 0302 	and.w	r3, r3, #2
 80107ae:	2b02      	cmp	r3, #2
 80107b0:	d122      	bne.n	80107f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	68db      	ldr	r3, [r3, #12]
 80107b8:	f003 0302 	and.w	r3, r3, #2
 80107bc:	2b02      	cmp	r3, #2
 80107be:	d11b      	bne.n	80107f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	f06f 0202 	mvn.w	r2, #2
 80107c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	2201      	movs	r2, #1
 80107ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	699b      	ldr	r3, [r3, #24]
 80107d6:	f003 0303 	and.w	r3, r3, #3
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d003      	beq.n	80107e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 fb12 	bl	8010e08 <HAL_TIM_IC_CaptureCallback>
 80107e4:	e005      	b.n	80107f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80107e6:	6878      	ldr	r0, [r7, #4]
 80107e8:	f000 fb04 	bl	8010df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80107ec:	6878      	ldr	r0, [r7, #4]
 80107ee:	f7f1 fed5 	bl	800259c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	691b      	ldr	r3, [r3, #16]
 80107fe:	f003 0304 	and.w	r3, r3, #4
 8010802:	2b04      	cmp	r3, #4
 8010804:	d122      	bne.n	801084c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	68db      	ldr	r3, [r3, #12]
 801080c:	f003 0304 	and.w	r3, r3, #4
 8010810:	2b04      	cmp	r3, #4
 8010812:	d11b      	bne.n	801084c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	f06f 0204 	mvn.w	r2, #4
 801081c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	2202      	movs	r2, #2
 8010822:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	699b      	ldr	r3, [r3, #24]
 801082a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801082e:	2b00      	cmp	r3, #0
 8010830:	d003      	beq.n	801083a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010832:	6878      	ldr	r0, [r7, #4]
 8010834:	f000 fae8 	bl	8010e08 <HAL_TIM_IC_CaptureCallback>
 8010838:	e005      	b.n	8010846 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f000 fada 	bl	8010df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f7f1 feab 	bl	800259c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	2200      	movs	r2, #0
 801084a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	691b      	ldr	r3, [r3, #16]
 8010852:	f003 0308 	and.w	r3, r3, #8
 8010856:	2b08      	cmp	r3, #8
 8010858:	d122      	bne.n	80108a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	f003 0308 	and.w	r3, r3, #8
 8010864:	2b08      	cmp	r3, #8
 8010866:	d11b      	bne.n	80108a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	f06f 0208 	mvn.w	r2, #8
 8010870:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2204      	movs	r2, #4
 8010876:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	69db      	ldr	r3, [r3, #28]
 801087e:	f003 0303 	and.w	r3, r3, #3
 8010882:	2b00      	cmp	r3, #0
 8010884:	d003      	beq.n	801088e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f000 fabe 	bl	8010e08 <HAL_TIM_IC_CaptureCallback>
 801088c:	e005      	b.n	801089a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 fab0 	bl	8010df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f7f1 fe81 	bl	800259c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2200      	movs	r2, #0
 801089e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	691b      	ldr	r3, [r3, #16]
 80108a6:	f003 0310 	and.w	r3, r3, #16
 80108aa:	2b10      	cmp	r3, #16
 80108ac:	d122      	bne.n	80108f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	68db      	ldr	r3, [r3, #12]
 80108b4:	f003 0310 	and.w	r3, r3, #16
 80108b8:	2b10      	cmp	r3, #16
 80108ba:	d11b      	bne.n	80108f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f06f 0210 	mvn.w	r2, #16
 80108c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2208      	movs	r2, #8
 80108ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	69db      	ldr	r3, [r3, #28]
 80108d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d003      	beq.n	80108e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f000 fa94 	bl	8010e08 <HAL_TIM_IC_CaptureCallback>
 80108e0:	e005      	b.n	80108ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 fa86 	bl	8010df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f7f1 fe57 	bl	800259c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2200      	movs	r2, #0
 80108f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	691b      	ldr	r3, [r3, #16]
 80108fa:	f003 0301 	and.w	r3, r3, #1
 80108fe:	2b01      	cmp	r3, #1
 8010900:	d10e      	bne.n	8010920 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	f003 0301 	and.w	r3, r3, #1
 801090c:	2b01      	cmp	r3, #1
 801090e:	d107      	bne.n	8010920 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	f06f 0201 	mvn.w	r2, #1
 8010918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f7f1 fe8e 	bl	800263c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	691b      	ldr	r3, [r3, #16]
 8010926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801092a:	2b80      	cmp	r3, #128	; 0x80
 801092c:	d10e      	bne.n	801094c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010938:	2b80      	cmp	r3, #128	; 0x80
 801093a:	d107      	bne.n	801094c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f000 fff8 	bl	801193c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	691b      	ldr	r3, [r3, #16]
 8010952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801095a:	d10e      	bne.n	801097a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	68db      	ldr	r3, [r3, #12]
 8010962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010966:	2b80      	cmp	r3, #128	; 0x80
 8010968:	d107      	bne.n	801097a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010974:	6878      	ldr	r0, [r7, #4]
 8010976:	f000 ffeb 	bl	8011950 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	691b      	ldr	r3, [r3, #16]
 8010980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010984:	2b40      	cmp	r3, #64	; 0x40
 8010986:	d10e      	bne.n	80109a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	68db      	ldr	r3, [r3, #12]
 801098e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010992:	2b40      	cmp	r3, #64	; 0x40
 8010994:	d107      	bne.n	80109a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801099e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f000 fa3b 	bl	8010e1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	691b      	ldr	r3, [r3, #16]
 80109ac:	f003 0320 	and.w	r3, r3, #32
 80109b0:	2b20      	cmp	r3, #32
 80109b2:	d10e      	bne.n	80109d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	68db      	ldr	r3, [r3, #12]
 80109ba:	f003 0320 	and.w	r3, r3, #32
 80109be:	2b20      	cmp	r3, #32
 80109c0:	d107      	bne.n	80109d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	f06f 0220 	mvn.w	r2, #32
 80109ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80109cc:	6878      	ldr	r0, [r7, #4]
 80109ce:	f000 ffab 	bl	8011928 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80109d2:	bf00      	nop
 80109d4:	3708      	adds	r7, #8
 80109d6:	46bd      	mov	sp, r7
 80109d8:	bd80      	pop	{r7, pc}
	...

080109dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b086      	sub	sp, #24
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	60f8      	str	r0, [r7, #12]
 80109e4:	60b9      	str	r1, [r7, #8]
 80109e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80109e8:	2300      	movs	r3, #0
 80109ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80109f2:	2b01      	cmp	r3, #1
 80109f4:	d101      	bne.n	80109fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80109f6:	2302      	movs	r3, #2
 80109f8:	e0ff      	b.n	8010bfa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2201      	movs	r2, #1
 80109fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2b14      	cmp	r3, #20
 8010a06:	f200 80f0 	bhi.w	8010bea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010a0a:	a201      	add	r2, pc, #4	; (adr r2, 8010a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a10:	08010a65 	.word	0x08010a65
 8010a14:	08010beb 	.word	0x08010beb
 8010a18:	08010beb 	.word	0x08010beb
 8010a1c:	08010beb 	.word	0x08010beb
 8010a20:	08010aa5 	.word	0x08010aa5
 8010a24:	08010beb 	.word	0x08010beb
 8010a28:	08010beb 	.word	0x08010beb
 8010a2c:	08010beb 	.word	0x08010beb
 8010a30:	08010ae7 	.word	0x08010ae7
 8010a34:	08010beb 	.word	0x08010beb
 8010a38:	08010beb 	.word	0x08010beb
 8010a3c:	08010beb 	.word	0x08010beb
 8010a40:	08010b27 	.word	0x08010b27
 8010a44:	08010beb 	.word	0x08010beb
 8010a48:	08010beb 	.word	0x08010beb
 8010a4c:	08010beb 	.word	0x08010beb
 8010a50:	08010b69 	.word	0x08010b69
 8010a54:	08010beb 	.word	0x08010beb
 8010a58:	08010beb 	.word	0x08010beb
 8010a5c:	08010beb 	.word	0x08010beb
 8010a60:	08010ba9 	.word	0x08010ba9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	68b9      	ldr	r1, [r7, #8]
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	f000 fa86 	bl	8010f7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	699a      	ldr	r2, [r3, #24]
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	f042 0208 	orr.w	r2, r2, #8
 8010a7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	699a      	ldr	r2, [r3, #24]
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	f022 0204 	bic.w	r2, r2, #4
 8010a8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	6999      	ldr	r1, [r3, #24]
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	691a      	ldr	r2, [r3, #16]
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	430a      	orrs	r2, r1
 8010aa0:	619a      	str	r2, [r3, #24]
      break;
 8010aa2:	e0a5      	b.n	8010bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	68b9      	ldr	r1, [r7, #8]
 8010aaa:	4618      	mov	r0, r3
 8010aac:	f000 faf6 	bl	801109c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	699a      	ldr	r2, [r3, #24]
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	699a      	ldr	r2, [r3, #24]
 8010ac6:	68fb      	ldr	r3, [r7, #12]
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	6999      	ldr	r1, [r3, #24]
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	691b      	ldr	r3, [r3, #16]
 8010ada:	021a      	lsls	r2, r3, #8
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	430a      	orrs	r2, r1
 8010ae2:	619a      	str	r2, [r3, #24]
      break;
 8010ae4:	e084      	b.n	8010bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	68b9      	ldr	r1, [r7, #8]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f000 fb5f 	bl	80111b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	69da      	ldr	r2, [r3, #28]
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f042 0208 	orr.w	r2, r2, #8
 8010b00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	69da      	ldr	r2, [r3, #28]
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f022 0204 	bic.w	r2, r2, #4
 8010b10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	69d9      	ldr	r1, [r3, #28]
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	691a      	ldr	r2, [r3, #16]
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	430a      	orrs	r2, r1
 8010b22:	61da      	str	r2, [r3, #28]
      break;
 8010b24:	e064      	b.n	8010bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	68b9      	ldr	r1, [r7, #8]
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	f000 fbc7 	bl	80112c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010b32:	68fb      	ldr	r3, [r7, #12]
 8010b34:	681b      	ldr	r3, [r3, #0]
 8010b36:	69da      	ldr	r2, [r3, #28]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	69da      	ldr	r2, [r3, #28]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	69d9      	ldr	r1, [r3, #28]
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	691b      	ldr	r3, [r3, #16]
 8010b5c:	021a      	lsls	r2, r3, #8
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	430a      	orrs	r2, r1
 8010b64:	61da      	str	r2, [r3, #28]
      break;
 8010b66:	e043      	b.n	8010bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	68b9      	ldr	r1, [r7, #8]
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f000 fc10 	bl	8011394 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	f042 0208 	orr.w	r2, r2, #8
 8010b82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	681b      	ldr	r3, [r3, #0]
 8010b88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f022 0204 	bic.w	r2, r2, #4
 8010b92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	691a      	ldr	r2, [r3, #16]
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	430a      	orrs	r2, r1
 8010ba4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010ba6:	e023      	b.n	8010bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	68b9      	ldr	r1, [r7, #8]
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f000 fc54 	bl	801145c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010bc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010bd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	691b      	ldr	r3, [r3, #16]
 8010bde:	021a      	lsls	r2, r3, #8
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	430a      	orrs	r2, r1
 8010be6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010be8:	e002      	b.n	8010bf0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010bea:	2301      	movs	r3, #1
 8010bec:	75fb      	strb	r3, [r7, #23]
      break;
 8010bee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3718      	adds	r7, #24
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	bf00      	nop

08010c04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
 8010c0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010c18:	2b01      	cmp	r3, #1
 8010c1a:	d101      	bne.n	8010c20 <HAL_TIM_ConfigClockSource+0x1c>
 8010c1c:	2302      	movs	r3, #2
 8010c1e:	e0dc      	b.n	8010dda <HAL_TIM_ConfigClockSource+0x1d6>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2201      	movs	r2, #1
 8010c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2202      	movs	r2, #2
 8010c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	689b      	ldr	r3, [r3, #8]
 8010c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8010c38:	68ba      	ldr	r2, [r7, #8]
 8010c3a:	4b6a      	ldr	r3, [pc, #424]	; (8010de4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8010c3c:	4013      	ands	r3, r2
 8010c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8010c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	68ba      	ldr	r2, [r7, #8]
 8010c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	4a64      	ldr	r2, [pc, #400]	; (8010de8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010c56:	4293      	cmp	r3, r2
 8010c58:	f000 80a9 	beq.w	8010dae <HAL_TIM_ConfigClockSource+0x1aa>
 8010c5c:	4a62      	ldr	r2, [pc, #392]	; (8010de8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	f200 80ae 	bhi.w	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010c64:	4a61      	ldr	r2, [pc, #388]	; (8010dec <HAL_TIM_ConfigClockSource+0x1e8>)
 8010c66:	4293      	cmp	r3, r2
 8010c68:	f000 80a1 	beq.w	8010dae <HAL_TIM_ConfigClockSource+0x1aa>
 8010c6c:	4a5f      	ldr	r2, [pc, #380]	; (8010dec <HAL_TIM_ConfigClockSource+0x1e8>)
 8010c6e:	4293      	cmp	r3, r2
 8010c70:	f200 80a6 	bhi.w	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010c74:	4a5e      	ldr	r2, [pc, #376]	; (8010df0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010c76:	4293      	cmp	r3, r2
 8010c78:	f000 8099 	beq.w	8010dae <HAL_TIM_ConfigClockSource+0x1aa>
 8010c7c:	4a5c      	ldr	r2, [pc, #368]	; (8010df0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8010c7e:	4293      	cmp	r3, r2
 8010c80:	f200 809e 	bhi.w	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010c84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010c88:	f000 8091 	beq.w	8010dae <HAL_TIM_ConfigClockSource+0x1aa>
 8010c8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8010c90:	f200 8096 	bhi.w	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010c98:	f000 8089 	beq.w	8010dae <HAL_TIM_ConfigClockSource+0x1aa>
 8010c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ca0:	f200 808e 	bhi.w	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ca8:	d03e      	beq.n	8010d28 <HAL_TIM_ConfigClockSource+0x124>
 8010caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010cae:	f200 8087 	bhi.w	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cb6:	f000 8086 	beq.w	8010dc6 <HAL_TIM_ConfigClockSource+0x1c2>
 8010cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010cbe:	d87f      	bhi.n	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010cc0:	2b70      	cmp	r3, #112	; 0x70
 8010cc2:	d01a      	beq.n	8010cfa <HAL_TIM_ConfigClockSource+0xf6>
 8010cc4:	2b70      	cmp	r3, #112	; 0x70
 8010cc6:	d87b      	bhi.n	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010cc8:	2b60      	cmp	r3, #96	; 0x60
 8010cca:	d050      	beq.n	8010d6e <HAL_TIM_ConfigClockSource+0x16a>
 8010ccc:	2b60      	cmp	r3, #96	; 0x60
 8010cce:	d877      	bhi.n	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010cd0:	2b50      	cmp	r3, #80	; 0x50
 8010cd2:	d03c      	beq.n	8010d4e <HAL_TIM_ConfigClockSource+0x14a>
 8010cd4:	2b50      	cmp	r3, #80	; 0x50
 8010cd6:	d873      	bhi.n	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010cd8:	2b40      	cmp	r3, #64	; 0x40
 8010cda:	d058      	beq.n	8010d8e <HAL_TIM_ConfigClockSource+0x18a>
 8010cdc:	2b40      	cmp	r3, #64	; 0x40
 8010cde:	d86f      	bhi.n	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010ce0:	2b30      	cmp	r3, #48	; 0x30
 8010ce2:	d064      	beq.n	8010dae <HAL_TIM_ConfigClockSource+0x1aa>
 8010ce4:	2b30      	cmp	r3, #48	; 0x30
 8010ce6:	d86b      	bhi.n	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010ce8:	2b20      	cmp	r3, #32
 8010cea:	d060      	beq.n	8010dae <HAL_TIM_ConfigClockSource+0x1aa>
 8010cec:	2b20      	cmp	r3, #32
 8010cee:	d867      	bhi.n	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d05c      	beq.n	8010dae <HAL_TIM_ConfigClockSource+0x1aa>
 8010cf4:	2b10      	cmp	r3, #16
 8010cf6:	d05a      	beq.n	8010dae <HAL_TIM_ConfigClockSource+0x1aa>
 8010cf8:	e062      	b.n	8010dc0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6818      	ldr	r0, [r3, #0]
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	6899      	ldr	r1, [r3, #8]
 8010d02:	683b      	ldr	r3, [r7, #0]
 8010d04:	685a      	ldr	r2, [r3, #4]
 8010d06:	683b      	ldr	r3, [r7, #0]
 8010d08:	68db      	ldr	r3, [r3, #12]
 8010d0a:	f000 fc8b 	bl	8011624 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	689b      	ldr	r3, [r3, #8]
 8010d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8010d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	68ba      	ldr	r2, [r7, #8]
 8010d24:	609a      	str	r2, [r3, #8]
      break;
 8010d26:	e04f      	b.n	8010dc8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6818      	ldr	r0, [r3, #0]
 8010d2c:	683b      	ldr	r3, [r7, #0]
 8010d2e:	6899      	ldr	r1, [r3, #8]
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	685a      	ldr	r2, [r3, #4]
 8010d34:	683b      	ldr	r3, [r7, #0]
 8010d36:	68db      	ldr	r3, [r3, #12]
 8010d38:	f000 fc74 	bl	8011624 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	689a      	ldr	r2, [r3, #8]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8010d4a:	609a      	str	r2, [r3, #8]
      break;
 8010d4c:	e03c      	b.n	8010dc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6818      	ldr	r0, [r3, #0]
 8010d52:	683b      	ldr	r3, [r7, #0]
 8010d54:	6859      	ldr	r1, [r3, #4]
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	68db      	ldr	r3, [r3, #12]
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	f000 fbe4 	bl	8011528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	2150      	movs	r1, #80	; 0x50
 8010d66:	4618      	mov	r0, r3
 8010d68:	f000 fc3e 	bl	80115e8 <TIM_ITRx_SetConfig>
      break;
 8010d6c:	e02c      	b.n	8010dc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6818      	ldr	r0, [r3, #0]
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	6859      	ldr	r1, [r3, #4]
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	68db      	ldr	r3, [r3, #12]
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	f000 fc03 	bl	8011586 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	2160      	movs	r1, #96	; 0x60
 8010d86:	4618      	mov	r0, r3
 8010d88:	f000 fc2e 	bl	80115e8 <TIM_ITRx_SetConfig>
      break;
 8010d8c:	e01c      	b.n	8010dc8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6818      	ldr	r0, [r3, #0]
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	6859      	ldr	r1, [r3, #4]
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	68db      	ldr	r3, [r3, #12]
 8010d9a:	461a      	mov	r2, r3
 8010d9c:	f000 fbc4 	bl	8011528 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	2140      	movs	r1, #64	; 0x40
 8010da6:	4618      	mov	r0, r3
 8010da8:	f000 fc1e 	bl	80115e8 <TIM_ITRx_SetConfig>
      break;
 8010dac:	e00c      	b.n	8010dc8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	683b      	ldr	r3, [r7, #0]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	4619      	mov	r1, r3
 8010db8:	4610      	mov	r0, r2
 8010dba:	f000 fc15 	bl	80115e8 <TIM_ITRx_SetConfig>
      break;
 8010dbe:	e003      	b.n	8010dc8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8010dc0:	2301      	movs	r3, #1
 8010dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8010dc4:	e000      	b.n	8010dc8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8010dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2201      	movs	r2, #1
 8010dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dda:	4618      	mov	r0, r3
 8010ddc:	3710      	adds	r7, #16
 8010dde:	46bd      	mov	sp, r7
 8010de0:	bd80      	pop	{r7, pc}
 8010de2:	bf00      	nop
 8010de4:	ffceff88 	.word	0xffceff88
 8010de8:	00100040 	.word	0x00100040
 8010dec:	00100030 	.word	0x00100030
 8010df0:	00100020 	.word	0x00100020

08010df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010dfc:	bf00      	nop
 8010dfe:	370c      	adds	r7, #12
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010e10:	bf00      	nop
 8010e12:	370c      	adds	r7, #12
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr

08010e1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010e1c:	b480      	push	{r7}
 8010e1e:	b083      	sub	sp, #12
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010e24:	bf00      	nop
 8010e26:	370c      	adds	r7, #12
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b085      	sub	sp, #20
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	4a44      	ldr	r2, [pc, #272]	; (8010f54 <TIM_Base_SetConfig+0x124>)
 8010e44:	4293      	cmp	r3, r2
 8010e46:	d013      	beq.n	8010e70 <TIM_Base_SetConfig+0x40>
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e4e:	d00f      	beq.n	8010e70 <TIM_Base_SetConfig+0x40>
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	4a41      	ldr	r2, [pc, #260]	; (8010f58 <TIM_Base_SetConfig+0x128>)
 8010e54:	4293      	cmp	r3, r2
 8010e56:	d00b      	beq.n	8010e70 <TIM_Base_SetConfig+0x40>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	4a40      	ldr	r2, [pc, #256]	; (8010f5c <TIM_Base_SetConfig+0x12c>)
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d007      	beq.n	8010e70 <TIM_Base_SetConfig+0x40>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	4a3f      	ldr	r2, [pc, #252]	; (8010f60 <TIM_Base_SetConfig+0x130>)
 8010e64:	4293      	cmp	r3, r2
 8010e66:	d003      	beq.n	8010e70 <TIM_Base_SetConfig+0x40>
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	4a3e      	ldr	r2, [pc, #248]	; (8010f64 <TIM_Base_SetConfig+0x134>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d108      	bne.n	8010e82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	685b      	ldr	r3, [r3, #4]
 8010e7c:	68fa      	ldr	r2, [r7, #12]
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	4a33      	ldr	r2, [pc, #204]	; (8010f54 <TIM_Base_SetConfig+0x124>)
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d027      	beq.n	8010eda <TIM_Base_SetConfig+0xaa>
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010e90:	d023      	beq.n	8010eda <TIM_Base_SetConfig+0xaa>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	4a30      	ldr	r2, [pc, #192]	; (8010f58 <TIM_Base_SetConfig+0x128>)
 8010e96:	4293      	cmp	r3, r2
 8010e98:	d01f      	beq.n	8010eda <TIM_Base_SetConfig+0xaa>
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	4a2f      	ldr	r2, [pc, #188]	; (8010f5c <TIM_Base_SetConfig+0x12c>)
 8010e9e:	4293      	cmp	r3, r2
 8010ea0:	d01b      	beq.n	8010eda <TIM_Base_SetConfig+0xaa>
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	4a2e      	ldr	r2, [pc, #184]	; (8010f60 <TIM_Base_SetConfig+0x130>)
 8010ea6:	4293      	cmp	r3, r2
 8010ea8:	d017      	beq.n	8010eda <TIM_Base_SetConfig+0xaa>
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	4a2d      	ldr	r2, [pc, #180]	; (8010f64 <TIM_Base_SetConfig+0x134>)
 8010eae:	4293      	cmp	r3, r2
 8010eb0:	d013      	beq.n	8010eda <TIM_Base_SetConfig+0xaa>
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	4a2c      	ldr	r2, [pc, #176]	; (8010f68 <TIM_Base_SetConfig+0x138>)
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d00f      	beq.n	8010eda <TIM_Base_SetConfig+0xaa>
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	4a2b      	ldr	r2, [pc, #172]	; (8010f6c <TIM_Base_SetConfig+0x13c>)
 8010ebe:	4293      	cmp	r3, r2
 8010ec0:	d00b      	beq.n	8010eda <TIM_Base_SetConfig+0xaa>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	4a2a      	ldr	r2, [pc, #168]	; (8010f70 <TIM_Base_SetConfig+0x140>)
 8010ec6:	4293      	cmp	r3, r2
 8010ec8:	d007      	beq.n	8010eda <TIM_Base_SetConfig+0xaa>
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	4a29      	ldr	r2, [pc, #164]	; (8010f74 <TIM_Base_SetConfig+0x144>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d003      	beq.n	8010eda <TIM_Base_SetConfig+0xaa>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	4a28      	ldr	r2, [pc, #160]	; (8010f78 <TIM_Base_SetConfig+0x148>)
 8010ed6:	4293      	cmp	r3, r2
 8010ed8:	d108      	bne.n	8010eec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010ee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	68fa      	ldr	r2, [r7, #12]
 8010ee8:	4313      	orrs	r3, r2
 8010eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	695b      	ldr	r3, [r3, #20]
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	68fa      	ldr	r2, [r7, #12]
 8010efe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	689a      	ldr	r2, [r3, #8]
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	681a      	ldr	r2, [r3, #0]
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4a10      	ldr	r2, [pc, #64]	; (8010f54 <TIM_Base_SetConfig+0x124>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d00f      	beq.n	8010f38 <TIM_Base_SetConfig+0x108>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4a12      	ldr	r2, [pc, #72]	; (8010f64 <TIM_Base_SetConfig+0x134>)
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d00b      	beq.n	8010f38 <TIM_Base_SetConfig+0x108>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	4a11      	ldr	r2, [pc, #68]	; (8010f68 <TIM_Base_SetConfig+0x138>)
 8010f24:	4293      	cmp	r3, r2
 8010f26:	d007      	beq.n	8010f38 <TIM_Base_SetConfig+0x108>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	4a10      	ldr	r2, [pc, #64]	; (8010f6c <TIM_Base_SetConfig+0x13c>)
 8010f2c:	4293      	cmp	r3, r2
 8010f2e:	d003      	beq.n	8010f38 <TIM_Base_SetConfig+0x108>
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	4a0f      	ldr	r2, [pc, #60]	; (8010f70 <TIM_Base_SetConfig+0x140>)
 8010f34:	4293      	cmp	r3, r2
 8010f36:	d103      	bne.n	8010f40 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	691a      	ldr	r2, [r3, #16]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	2201      	movs	r2, #1
 8010f44:	615a      	str	r2, [r3, #20]
}
 8010f46:	bf00      	nop
 8010f48:	3714      	adds	r7, #20
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr
 8010f52:	bf00      	nop
 8010f54:	40010000 	.word	0x40010000
 8010f58:	40000400 	.word	0x40000400
 8010f5c:	40000800 	.word	0x40000800
 8010f60:	40000c00 	.word	0x40000c00
 8010f64:	40010400 	.word	0x40010400
 8010f68:	40014000 	.word	0x40014000
 8010f6c:	40014400 	.word	0x40014400
 8010f70:	40014800 	.word	0x40014800
 8010f74:	4000e000 	.word	0x4000e000
 8010f78:	4000e400 	.word	0x4000e400

08010f7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b087      	sub	sp, #28
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6a1b      	ldr	r3, [r3, #32]
 8010f8a:	f023 0201 	bic.w	r2, r3, #1
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	6a1b      	ldr	r3, [r3, #32]
 8010f96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	685b      	ldr	r3, [r3, #4]
 8010f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	699b      	ldr	r3, [r3, #24]
 8010fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010fa4:	68fa      	ldr	r2, [r7, #12]
 8010fa6:	4b37      	ldr	r3, [pc, #220]	; (8011084 <TIM_OC1_SetConfig+0x108>)
 8010fa8:	4013      	ands	r3, r2
 8010faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f023 0303 	bic.w	r3, r3, #3
 8010fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	68fa      	ldr	r2, [r7, #12]
 8010fba:	4313      	orrs	r3, r2
 8010fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	f023 0302 	bic.w	r3, r3, #2
 8010fc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	689b      	ldr	r3, [r3, #8]
 8010fca:	697a      	ldr	r2, [r7, #20]
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	4a2d      	ldr	r2, [pc, #180]	; (8011088 <TIM_OC1_SetConfig+0x10c>)
 8010fd4:	4293      	cmp	r3, r2
 8010fd6:	d00f      	beq.n	8010ff8 <TIM_OC1_SetConfig+0x7c>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	4a2c      	ldr	r2, [pc, #176]	; (801108c <TIM_OC1_SetConfig+0x110>)
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	d00b      	beq.n	8010ff8 <TIM_OC1_SetConfig+0x7c>
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	4a2b      	ldr	r2, [pc, #172]	; (8011090 <TIM_OC1_SetConfig+0x114>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	d007      	beq.n	8010ff8 <TIM_OC1_SetConfig+0x7c>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	4a2a      	ldr	r2, [pc, #168]	; (8011094 <TIM_OC1_SetConfig+0x118>)
 8010fec:	4293      	cmp	r3, r2
 8010fee:	d003      	beq.n	8010ff8 <TIM_OC1_SetConfig+0x7c>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	4a29      	ldr	r2, [pc, #164]	; (8011098 <TIM_OC1_SetConfig+0x11c>)
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d10c      	bne.n	8011012 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	f023 0308 	bic.w	r3, r3, #8
 8010ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	697a      	ldr	r2, [r7, #20]
 8011006:	4313      	orrs	r3, r2
 8011008:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801100a:	697b      	ldr	r3, [r7, #20]
 801100c:	f023 0304 	bic.w	r3, r3, #4
 8011010:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4a1c      	ldr	r2, [pc, #112]	; (8011088 <TIM_OC1_SetConfig+0x10c>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d00f      	beq.n	801103a <TIM_OC1_SetConfig+0xbe>
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	4a1b      	ldr	r2, [pc, #108]	; (801108c <TIM_OC1_SetConfig+0x110>)
 801101e:	4293      	cmp	r3, r2
 8011020:	d00b      	beq.n	801103a <TIM_OC1_SetConfig+0xbe>
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	4a1a      	ldr	r2, [pc, #104]	; (8011090 <TIM_OC1_SetConfig+0x114>)
 8011026:	4293      	cmp	r3, r2
 8011028:	d007      	beq.n	801103a <TIM_OC1_SetConfig+0xbe>
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	4a19      	ldr	r2, [pc, #100]	; (8011094 <TIM_OC1_SetConfig+0x118>)
 801102e:	4293      	cmp	r3, r2
 8011030:	d003      	beq.n	801103a <TIM_OC1_SetConfig+0xbe>
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	4a18      	ldr	r2, [pc, #96]	; (8011098 <TIM_OC1_SetConfig+0x11c>)
 8011036:	4293      	cmp	r3, r2
 8011038:	d111      	bne.n	801105e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801103a:	693b      	ldr	r3, [r7, #16]
 801103c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8011042:	693b      	ldr	r3, [r7, #16]
 8011044:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	695b      	ldr	r3, [r3, #20]
 801104e:	693a      	ldr	r2, [r7, #16]
 8011050:	4313      	orrs	r3, r2
 8011052:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011054:	683b      	ldr	r3, [r7, #0]
 8011056:	699b      	ldr	r3, [r3, #24]
 8011058:	693a      	ldr	r2, [r7, #16]
 801105a:	4313      	orrs	r3, r2
 801105c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	693a      	ldr	r2, [r7, #16]
 8011062:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	685a      	ldr	r2, [r3, #4]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	697a      	ldr	r2, [r7, #20]
 8011076:	621a      	str	r2, [r3, #32]
}
 8011078:	bf00      	nop
 801107a:	371c      	adds	r7, #28
 801107c:	46bd      	mov	sp, r7
 801107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011082:	4770      	bx	lr
 8011084:	fffeff8f 	.word	0xfffeff8f
 8011088:	40010000 	.word	0x40010000
 801108c:	40010400 	.word	0x40010400
 8011090:	40014000 	.word	0x40014000
 8011094:	40014400 	.word	0x40014400
 8011098:	40014800 	.word	0x40014800

0801109c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801109c:	b480      	push	{r7}
 801109e:	b087      	sub	sp, #28
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
 80110a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	6a1b      	ldr	r3, [r3, #32]
 80110aa:	f023 0210 	bic.w	r2, r3, #16
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	6a1b      	ldr	r3, [r3, #32]
 80110b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	699b      	ldr	r3, [r3, #24]
 80110c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80110c4:	68fa      	ldr	r2, [r7, #12]
 80110c6:	4b34      	ldr	r3, [pc, #208]	; (8011198 <TIM_OC2_SetConfig+0xfc>)
 80110c8:	4013      	ands	r3, r2
 80110ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	021b      	lsls	r3, r3, #8
 80110da:	68fa      	ldr	r2, [r7, #12]
 80110dc:	4313      	orrs	r3, r2
 80110de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	f023 0320 	bic.w	r3, r3, #32
 80110e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	689b      	ldr	r3, [r3, #8]
 80110ec:	011b      	lsls	r3, r3, #4
 80110ee:	697a      	ldr	r2, [r7, #20]
 80110f0:	4313      	orrs	r3, r2
 80110f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	4a29      	ldr	r2, [pc, #164]	; (801119c <TIM_OC2_SetConfig+0x100>)
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d003      	beq.n	8011104 <TIM_OC2_SetConfig+0x68>
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	4a28      	ldr	r2, [pc, #160]	; (80111a0 <TIM_OC2_SetConfig+0x104>)
 8011100:	4293      	cmp	r3, r2
 8011102:	d10d      	bne.n	8011120 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011104:	697b      	ldr	r3, [r7, #20]
 8011106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801110a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	68db      	ldr	r3, [r3, #12]
 8011110:	011b      	lsls	r3, r3, #4
 8011112:	697a      	ldr	r2, [r7, #20]
 8011114:	4313      	orrs	r3, r2
 8011116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801111e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	4a1e      	ldr	r2, [pc, #120]	; (801119c <TIM_OC2_SetConfig+0x100>)
 8011124:	4293      	cmp	r3, r2
 8011126:	d00f      	beq.n	8011148 <TIM_OC2_SetConfig+0xac>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	4a1d      	ldr	r2, [pc, #116]	; (80111a0 <TIM_OC2_SetConfig+0x104>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d00b      	beq.n	8011148 <TIM_OC2_SetConfig+0xac>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	4a1c      	ldr	r2, [pc, #112]	; (80111a4 <TIM_OC2_SetConfig+0x108>)
 8011134:	4293      	cmp	r3, r2
 8011136:	d007      	beq.n	8011148 <TIM_OC2_SetConfig+0xac>
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	4a1b      	ldr	r2, [pc, #108]	; (80111a8 <TIM_OC2_SetConfig+0x10c>)
 801113c:	4293      	cmp	r3, r2
 801113e:	d003      	beq.n	8011148 <TIM_OC2_SetConfig+0xac>
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	4a1a      	ldr	r2, [pc, #104]	; (80111ac <TIM_OC2_SetConfig+0x110>)
 8011144:	4293      	cmp	r3, r2
 8011146:	d113      	bne.n	8011170 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801114e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011150:	693b      	ldr	r3, [r7, #16]
 8011152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011158:	683b      	ldr	r3, [r7, #0]
 801115a:	695b      	ldr	r3, [r3, #20]
 801115c:	009b      	lsls	r3, r3, #2
 801115e:	693a      	ldr	r2, [r7, #16]
 8011160:	4313      	orrs	r3, r2
 8011162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	699b      	ldr	r3, [r3, #24]
 8011168:	009b      	lsls	r3, r3, #2
 801116a:	693a      	ldr	r2, [r7, #16]
 801116c:	4313      	orrs	r3, r2
 801116e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	693a      	ldr	r2, [r7, #16]
 8011174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	68fa      	ldr	r2, [r7, #12]
 801117a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801117c:	683b      	ldr	r3, [r7, #0]
 801117e:	685a      	ldr	r2, [r3, #4]
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	697a      	ldr	r2, [r7, #20]
 8011188:	621a      	str	r2, [r3, #32]
}
 801118a:	bf00      	nop
 801118c:	371c      	adds	r7, #28
 801118e:	46bd      	mov	sp, r7
 8011190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011194:	4770      	bx	lr
 8011196:	bf00      	nop
 8011198:	feff8fff 	.word	0xfeff8fff
 801119c:	40010000 	.word	0x40010000
 80111a0:	40010400 	.word	0x40010400
 80111a4:	40014000 	.word	0x40014000
 80111a8:	40014400 	.word	0x40014400
 80111ac:	40014800 	.word	0x40014800

080111b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80111b0:	b480      	push	{r7}
 80111b2:	b087      	sub	sp, #28
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6a1b      	ldr	r3, [r3, #32]
 80111be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	6a1b      	ldr	r3, [r3, #32]
 80111ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	69db      	ldr	r3, [r3, #28]
 80111d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80111d8:	68fa      	ldr	r2, [r7, #12]
 80111da:	4b33      	ldr	r3, [pc, #204]	; (80112a8 <TIM_OC3_SetConfig+0xf8>)
 80111dc:	4013      	ands	r3, r2
 80111de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	f023 0303 	bic.w	r3, r3, #3
 80111e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80111e8:	683b      	ldr	r3, [r7, #0]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	68fa      	ldr	r2, [r7, #12]
 80111ee:	4313      	orrs	r3, r2
 80111f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80111f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80111fa:	683b      	ldr	r3, [r7, #0]
 80111fc:	689b      	ldr	r3, [r3, #8]
 80111fe:	021b      	lsls	r3, r3, #8
 8011200:	697a      	ldr	r2, [r7, #20]
 8011202:	4313      	orrs	r3, r2
 8011204:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	4a28      	ldr	r2, [pc, #160]	; (80112ac <TIM_OC3_SetConfig+0xfc>)
 801120a:	4293      	cmp	r3, r2
 801120c:	d003      	beq.n	8011216 <TIM_OC3_SetConfig+0x66>
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	4a27      	ldr	r2, [pc, #156]	; (80112b0 <TIM_OC3_SetConfig+0x100>)
 8011212:	4293      	cmp	r3, r2
 8011214:	d10d      	bne.n	8011232 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801121c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	68db      	ldr	r3, [r3, #12]
 8011222:	021b      	lsls	r3, r3, #8
 8011224:	697a      	ldr	r2, [r7, #20]
 8011226:	4313      	orrs	r3, r2
 8011228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	4a1d      	ldr	r2, [pc, #116]	; (80112ac <TIM_OC3_SetConfig+0xfc>)
 8011236:	4293      	cmp	r3, r2
 8011238:	d00f      	beq.n	801125a <TIM_OC3_SetConfig+0xaa>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4a1c      	ldr	r2, [pc, #112]	; (80112b0 <TIM_OC3_SetConfig+0x100>)
 801123e:	4293      	cmp	r3, r2
 8011240:	d00b      	beq.n	801125a <TIM_OC3_SetConfig+0xaa>
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	4a1b      	ldr	r2, [pc, #108]	; (80112b4 <TIM_OC3_SetConfig+0x104>)
 8011246:	4293      	cmp	r3, r2
 8011248:	d007      	beq.n	801125a <TIM_OC3_SetConfig+0xaa>
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	4a1a      	ldr	r2, [pc, #104]	; (80112b8 <TIM_OC3_SetConfig+0x108>)
 801124e:	4293      	cmp	r3, r2
 8011250:	d003      	beq.n	801125a <TIM_OC3_SetConfig+0xaa>
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	4a19      	ldr	r2, [pc, #100]	; (80112bc <TIM_OC3_SetConfig+0x10c>)
 8011256:	4293      	cmp	r3, r2
 8011258:	d113      	bne.n	8011282 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801125a:	693b      	ldr	r3, [r7, #16]
 801125c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	695b      	ldr	r3, [r3, #20]
 801126e:	011b      	lsls	r3, r3, #4
 8011270:	693a      	ldr	r2, [r7, #16]
 8011272:	4313      	orrs	r3, r2
 8011274:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	699b      	ldr	r3, [r3, #24]
 801127a:	011b      	lsls	r3, r3, #4
 801127c:	693a      	ldr	r2, [r7, #16]
 801127e:	4313      	orrs	r3, r2
 8011280:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	693a      	ldr	r2, [r7, #16]
 8011286:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	68fa      	ldr	r2, [r7, #12]
 801128c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	685a      	ldr	r2, [r3, #4]
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	697a      	ldr	r2, [r7, #20]
 801129a:	621a      	str	r2, [r3, #32]
}
 801129c:	bf00      	nop
 801129e:	371c      	adds	r7, #28
 80112a0:	46bd      	mov	sp, r7
 80112a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a6:	4770      	bx	lr
 80112a8:	fffeff8f 	.word	0xfffeff8f
 80112ac:	40010000 	.word	0x40010000
 80112b0:	40010400 	.word	0x40010400
 80112b4:	40014000 	.word	0x40014000
 80112b8:	40014400 	.word	0x40014400
 80112bc:	40014800 	.word	0x40014800

080112c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80112c0:	b480      	push	{r7}
 80112c2:	b087      	sub	sp, #28
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	6a1b      	ldr	r3, [r3, #32]
 80112ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	6a1b      	ldr	r3, [r3, #32]
 80112da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	69db      	ldr	r3, [r3, #28]
 80112e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80112e8:	68fa      	ldr	r2, [r7, #12]
 80112ea:	4b24      	ldr	r3, [pc, #144]	; (801137c <TIM_OC4_SetConfig+0xbc>)
 80112ec:	4013      	ands	r3, r2
 80112ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80112f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	021b      	lsls	r3, r3, #8
 80112fe:	68fa      	ldr	r2, [r7, #12]
 8011300:	4313      	orrs	r3, r2
 8011302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011304:	693b      	ldr	r3, [r7, #16]
 8011306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801130a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801130c:	683b      	ldr	r3, [r7, #0]
 801130e:	689b      	ldr	r3, [r3, #8]
 8011310:	031b      	lsls	r3, r3, #12
 8011312:	693a      	ldr	r2, [r7, #16]
 8011314:	4313      	orrs	r3, r2
 8011316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	4a19      	ldr	r2, [pc, #100]	; (8011380 <TIM_OC4_SetConfig+0xc0>)
 801131c:	4293      	cmp	r3, r2
 801131e:	d00f      	beq.n	8011340 <TIM_OC4_SetConfig+0x80>
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	4a18      	ldr	r2, [pc, #96]	; (8011384 <TIM_OC4_SetConfig+0xc4>)
 8011324:	4293      	cmp	r3, r2
 8011326:	d00b      	beq.n	8011340 <TIM_OC4_SetConfig+0x80>
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	4a17      	ldr	r2, [pc, #92]	; (8011388 <TIM_OC4_SetConfig+0xc8>)
 801132c:	4293      	cmp	r3, r2
 801132e:	d007      	beq.n	8011340 <TIM_OC4_SetConfig+0x80>
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	4a16      	ldr	r2, [pc, #88]	; (801138c <TIM_OC4_SetConfig+0xcc>)
 8011334:	4293      	cmp	r3, r2
 8011336:	d003      	beq.n	8011340 <TIM_OC4_SetConfig+0x80>
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	4a15      	ldr	r2, [pc, #84]	; (8011390 <TIM_OC4_SetConfig+0xd0>)
 801133c:	4293      	cmp	r3, r2
 801133e:	d109      	bne.n	8011354 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011340:	697b      	ldr	r3, [r7, #20]
 8011342:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011346:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8011348:	683b      	ldr	r3, [r7, #0]
 801134a:	695b      	ldr	r3, [r3, #20]
 801134c:	019b      	lsls	r3, r3, #6
 801134e:	697a      	ldr	r2, [r7, #20]
 8011350:	4313      	orrs	r3, r2
 8011352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	697a      	ldr	r2, [r7, #20]
 8011358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	68fa      	ldr	r2, [r7, #12]
 801135e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	685a      	ldr	r2, [r3, #4]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	693a      	ldr	r2, [r7, #16]
 801136c:	621a      	str	r2, [r3, #32]
}
 801136e:	bf00      	nop
 8011370:	371c      	adds	r7, #28
 8011372:	46bd      	mov	sp, r7
 8011374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011378:	4770      	bx	lr
 801137a:	bf00      	nop
 801137c:	feff8fff 	.word	0xfeff8fff
 8011380:	40010000 	.word	0x40010000
 8011384:	40010400 	.word	0x40010400
 8011388:	40014000 	.word	0x40014000
 801138c:	40014400 	.word	0x40014400
 8011390:	40014800 	.word	0x40014800

08011394 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011394:	b480      	push	{r7}
 8011396:	b087      	sub	sp, #28
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6a1b      	ldr	r3, [r3, #32]
 80113a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6a1b      	ldr	r3, [r3, #32]
 80113ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	685b      	ldr	r3, [r3, #4]
 80113b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80113bc:	68fa      	ldr	r2, [r7, #12]
 80113be:	4b21      	ldr	r3, [pc, #132]	; (8011444 <TIM_OC5_SetConfig+0xb0>)
 80113c0:	4013      	ands	r3, r2
 80113c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	68fa      	ldr	r2, [r7, #12]
 80113ca:	4313      	orrs	r3, r2
 80113cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80113ce:	693b      	ldr	r3, [r7, #16]
 80113d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80113d4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	689b      	ldr	r3, [r3, #8]
 80113da:	041b      	lsls	r3, r3, #16
 80113dc:	693a      	ldr	r2, [r7, #16]
 80113de:	4313      	orrs	r3, r2
 80113e0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	4a18      	ldr	r2, [pc, #96]	; (8011448 <TIM_OC5_SetConfig+0xb4>)
 80113e6:	4293      	cmp	r3, r2
 80113e8:	d00f      	beq.n	801140a <TIM_OC5_SetConfig+0x76>
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4a17      	ldr	r2, [pc, #92]	; (801144c <TIM_OC5_SetConfig+0xb8>)
 80113ee:	4293      	cmp	r3, r2
 80113f0:	d00b      	beq.n	801140a <TIM_OC5_SetConfig+0x76>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	4a16      	ldr	r2, [pc, #88]	; (8011450 <TIM_OC5_SetConfig+0xbc>)
 80113f6:	4293      	cmp	r3, r2
 80113f8:	d007      	beq.n	801140a <TIM_OC5_SetConfig+0x76>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	4a15      	ldr	r2, [pc, #84]	; (8011454 <TIM_OC5_SetConfig+0xc0>)
 80113fe:	4293      	cmp	r3, r2
 8011400:	d003      	beq.n	801140a <TIM_OC5_SetConfig+0x76>
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	4a14      	ldr	r2, [pc, #80]	; (8011458 <TIM_OC5_SetConfig+0xc4>)
 8011406:	4293      	cmp	r3, r2
 8011408:	d109      	bne.n	801141e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011410:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	695b      	ldr	r3, [r3, #20]
 8011416:	021b      	lsls	r3, r3, #8
 8011418:	697a      	ldr	r2, [r7, #20]
 801141a:	4313      	orrs	r3, r2
 801141c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	697a      	ldr	r2, [r7, #20]
 8011422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	68fa      	ldr	r2, [r7, #12]
 8011428:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	685a      	ldr	r2, [r3, #4]
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	693a      	ldr	r2, [r7, #16]
 8011436:	621a      	str	r2, [r3, #32]
}
 8011438:	bf00      	nop
 801143a:	371c      	adds	r7, #28
 801143c:	46bd      	mov	sp, r7
 801143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011442:	4770      	bx	lr
 8011444:	fffeff8f 	.word	0xfffeff8f
 8011448:	40010000 	.word	0x40010000
 801144c:	40010400 	.word	0x40010400
 8011450:	40014000 	.word	0x40014000
 8011454:	40014400 	.word	0x40014400
 8011458:	40014800 	.word	0x40014800

0801145c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801145c:	b480      	push	{r7}
 801145e:	b087      	sub	sp, #28
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
 8011464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6a1b      	ldr	r3, [r3, #32]
 801146a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6a1b      	ldr	r3, [r3, #32]
 8011476:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	685b      	ldr	r3, [r3, #4]
 801147c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011484:	68fa      	ldr	r2, [r7, #12]
 8011486:	4b22      	ldr	r3, [pc, #136]	; (8011510 <TIM_OC6_SetConfig+0xb4>)
 8011488:	4013      	ands	r3, r2
 801148a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	021b      	lsls	r3, r3, #8
 8011492:	68fa      	ldr	r2, [r7, #12]
 8011494:	4313      	orrs	r3, r2
 8011496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801149e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	689b      	ldr	r3, [r3, #8]
 80114a4:	051b      	lsls	r3, r3, #20
 80114a6:	693a      	ldr	r2, [r7, #16]
 80114a8:	4313      	orrs	r3, r2
 80114aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	4a19      	ldr	r2, [pc, #100]	; (8011514 <TIM_OC6_SetConfig+0xb8>)
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d00f      	beq.n	80114d4 <TIM_OC6_SetConfig+0x78>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	4a18      	ldr	r2, [pc, #96]	; (8011518 <TIM_OC6_SetConfig+0xbc>)
 80114b8:	4293      	cmp	r3, r2
 80114ba:	d00b      	beq.n	80114d4 <TIM_OC6_SetConfig+0x78>
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	4a17      	ldr	r2, [pc, #92]	; (801151c <TIM_OC6_SetConfig+0xc0>)
 80114c0:	4293      	cmp	r3, r2
 80114c2:	d007      	beq.n	80114d4 <TIM_OC6_SetConfig+0x78>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	4a16      	ldr	r2, [pc, #88]	; (8011520 <TIM_OC6_SetConfig+0xc4>)
 80114c8:	4293      	cmp	r3, r2
 80114ca:	d003      	beq.n	80114d4 <TIM_OC6_SetConfig+0x78>
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	4a15      	ldr	r2, [pc, #84]	; (8011524 <TIM_OC6_SetConfig+0xc8>)
 80114d0:	4293      	cmp	r3, r2
 80114d2:	d109      	bne.n	80114e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80114d4:	697b      	ldr	r3, [r7, #20]
 80114d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80114da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	695b      	ldr	r3, [r3, #20]
 80114e0:	029b      	lsls	r3, r3, #10
 80114e2:	697a      	ldr	r2, [r7, #20]
 80114e4:	4313      	orrs	r3, r2
 80114e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	697a      	ldr	r2, [r7, #20]
 80114ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	68fa      	ldr	r2, [r7, #12]
 80114f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	685a      	ldr	r2, [r3, #4]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	693a      	ldr	r2, [r7, #16]
 8011500:	621a      	str	r2, [r3, #32]
}
 8011502:	bf00      	nop
 8011504:	371c      	adds	r7, #28
 8011506:	46bd      	mov	sp, r7
 8011508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150c:	4770      	bx	lr
 801150e:	bf00      	nop
 8011510:	feff8fff 	.word	0xfeff8fff
 8011514:	40010000 	.word	0x40010000
 8011518:	40010400 	.word	0x40010400
 801151c:	40014000 	.word	0x40014000
 8011520:	40014400 	.word	0x40014400
 8011524:	40014800 	.word	0x40014800

08011528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011528:	b480      	push	{r7}
 801152a:	b087      	sub	sp, #28
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	6a1b      	ldr	r3, [r3, #32]
 8011538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	6a1b      	ldr	r3, [r3, #32]
 801153e:	f023 0201 	bic.w	r2, r3, #1
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	699b      	ldr	r3, [r3, #24]
 801154a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	011b      	lsls	r3, r3, #4
 8011558:	693a      	ldr	r2, [r7, #16]
 801155a:	4313      	orrs	r3, r2
 801155c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	f023 030a 	bic.w	r3, r3, #10
 8011564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8011566:	697a      	ldr	r2, [r7, #20]
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	4313      	orrs	r3, r2
 801156c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	693a      	ldr	r2, [r7, #16]
 8011572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	697a      	ldr	r2, [r7, #20]
 8011578:	621a      	str	r2, [r3, #32]
}
 801157a:	bf00      	nop
 801157c:	371c      	adds	r7, #28
 801157e:	46bd      	mov	sp, r7
 8011580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011584:	4770      	bx	lr

08011586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8011586:	b480      	push	{r7}
 8011588:	b087      	sub	sp, #28
 801158a:	af00      	add	r7, sp, #0
 801158c:	60f8      	str	r0, [r7, #12]
 801158e:	60b9      	str	r1, [r7, #8]
 8011590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	6a1b      	ldr	r3, [r3, #32]
 8011596:	f023 0210 	bic.w	r2, r3, #16
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	699b      	ldr	r3, [r3, #24]
 80115a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	6a1b      	ldr	r3, [r3, #32]
 80115a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80115b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	031b      	lsls	r3, r3, #12
 80115b6:	697a      	ldr	r2, [r7, #20]
 80115b8:	4313      	orrs	r3, r2
 80115ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80115bc:	693b      	ldr	r3, [r7, #16]
 80115be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80115c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	011b      	lsls	r3, r3, #4
 80115c8:	693a      	ldr	r2, [r7, #16]
 80115ca:	4313      	orrs	r3, r2
 80115cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	697a      	ldr	r2, [r7, #20]
 80115d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	693a      	ldr	r2, [r7, #16]
 80115d8:	621a      	str	r2, [r3, #32]
}
 80115da:	bf00      	nop
 80115dc:	371c      	adds	r7, #28
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr
	...

080115e8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80115e8:	b480      	push	{r7}
 80115ea:	b085      	sub	sp, #20
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	689b      	ldr	r3, [r3, #8]
 80115f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80115f8:	68fa      	ldr	r2, [r7, #12]
 80115fa:	4b09      	ldr	r3, [pc, #36]	; (8011620 <TIM_ITRx_SetConfig+0x38>)
 80115fc:	4013      	ands	r3, r2
 80115fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8011600:	683a      	ldr	r2, [r7, #0]
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	4313      	orrs	r3, r2
 8011606:	f043 0307 	orr.w	r3, r3, #7
 801160a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	68fa      	ldr	r2, [r7, #12]
 8011610:	609a      	str	r2, [r3, #8]
}
 8011612:	bf00      	nop
 8011614:	3714      	adds	r7, #20
 8011616:	46bd      	mov	sp, r7
 8011618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop
 8011620:	ffcfff8f 	.word	0xffcfff8f

08011624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8011624:	b480      	push	{r7}
 8011626:	b087      	sub	sp, #28
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	607a      	str	r2, [r7, #4]
 8011630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	689b      	ldr	r3, [r3, #8]
 8011636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8011638:	697b      	ldr	r3, [r7, #20]
 801163a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801163e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	021a      	lsls	r2, r3, #8
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	431a      	orrs	r2, r3
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	4313      	orrs	r3, r2
 801164c:	697a      	ldr	r2, [r7, #20]
 801164e:	4313      	orrs	r3, r2
 8011650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	697a      	ldr	r2, [r7, #20]
 8011656:	609a      	str	r2, [r3, #8]
}
 8011658:	bf00      	nop
 801165a:	371c      	adds	r7, #28
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011664:	b480      	push	{r7}
 8011666:	b087      	sub	sp, #28
 8011668:	af00      	add	r7, sp, #0
 801166a:	60f8      	str	r0, [r7, #12]
 801166c:	60b9      	str	r1, [r7, #8]
 801166e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	f003 031f 	and.w	r3, r3, #31
 8011676:	2201      	movs	r2, #1
 8011678:	fa02 f303 	lsl.w	r3, r2, r3
 801167c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	6a1a      	ldr	r2, [r3, #32]
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	43db      	mvns	r3, r3
 8011686:	401a      	ands	r2, r3
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	6a1a      	ldr	r2, [r3, #32]
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	f003 031f 	and.w	r3, r3, #31
 8011696:	6879      	ldr	r1, [r7, #4]
 8011698:	fa01 f303 	lsl.w	r3, r1, r3
 801169c:	431a      	orrs	r2, r3
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	621a      	str	r2, [r3, #32]
}
 80116a2:	bf00      	nop
 80116a4:	371c      	adds	r7, #28
 80116a6:	46bd      	mov	sp, r7
 80116a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ac:	4770      	bx	lr
	...

080116b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80116b0:	b480      	push	{r7}
 80116b2:	b085      	sub	sp, #20
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80116c0:	2b01      	cmp	r3, #1
 80116c2:	d101      	bne.n	80116c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80116c4:	2302      	movs	r3, #2
 80116c6:	e077      	b.n	80117b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	2201      	movs	r2, #1
 80116cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2202      	movs	r2, #2
 80116d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	689b      	ldr	r3, [r3, #8]
 80116e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	4a35      	ldr	r2, [pc, #212]	; (80117c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80116ee:	4293      	cmp	r3, r2
 80116f0:	d004      	beq.n	80116fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	4a34      	ldr	r2, [pc, #208]	; (80117c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d108      	bne.n	801170e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011702:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	685b      	ldr	r3, [r3, #4]
 8011708:	68fa      	ldr	r2, [r7, #12]
 801170a:	4313      	orrs	r3, r2
 801170c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011714:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011716:	683b      	ldr	r3, [r7, #0]
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	68fa      	ldr	r2, [r7, #12]
 801171c:	4313      	orrs	r3, r2
 801171e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	68fa      	ldr	r2, [r7, #12]
 8011726:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	4a25      	ldr	r2, [pc, #148]	; (80117c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801172e:	4293      	cmp	r3, r2
 8011730:	d02c      	beq.n	801178c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801173a:	d027      	beq.n	801178c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	4a22      	ldr	r2, [pc, #136]	; (80117cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011742:	4293      	cmp	r3, r2
 8011744:	d022      	beq.n	801178c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	4a21      	ldr	r2, [pc, #132]	; (80117d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801174c:	4293      	cmp	r3, r2
 801174e:	d01d      	beq.n	801178c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	4a1f      	ldr	r2, [pc, #124]	; (80117d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8011756:	4293      	cmp	r3, r2
 8011758:	d018      	beq.n	801178c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	4a1a      	ldr	r2, [pc, #104]	; (80117c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011760:	4293      	cmp	r3, r2
 8011762:	d013      	beq.n	801178c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	4a1b      	ldr	r2, [pc, #108]	; (80117d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801176a:	4293      	cmp	r3, r2
 801176c:	d00e      	beq.n	801178c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	4a1a      	ldr	r2, [pc, #104]	; (80117dc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8011774:	4293      	cmp	r3, r2
 8011776:	d009      	beq.n	801178c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	4a18      	ldr	r2, [pc, #96]	; (80117e0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801177e:	4293      	cmp	r3, r2
 8011780:	d004      	beq.n	801178c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	4a17      	ldr	r2, [pc, #92]	; (80117e4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011788:	4293      	cmp	r3, r2
 801178a:	d10c      	bne.n	80117a6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011792:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	689b      	ldr	r3, [r3, #8]
 8011798:	68ba      	ldr	r2, [r7, #8]
 801179a:	4313      	orrs	r3, r2
 801179c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	68ba      	ldr	r2, [r7, #8]
 80117a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2201      	movs	r2, #1
 80117aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	2200      	movs	r2, #0
 80117b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80117b6:	2300      	movs	r3, #0
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3714      	adds	r7, #20
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr
 80117c4:	40010000 	.word	0x40010000
 80117c8:	40010400 	.word	0x40010400
 80117cc:	40000400 	.word	0x40000400
 80117d0:	40000800 	.word	0x40000800
 80117d4:	40000c00 	.word	0x40000c00
 80117d8:	40001800 	.word	0x40001800
 80117dc:	40014000 	.word	0x40014000
 80117e0:	4000e000 	.word	0x4000e000
 80117e4:	4000e400 	.word	0x4000e400

080117e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80117e8:	b480      	push	{r7}
 80117ea:	b085      	sub	sp, #20
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
 80117f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80117f2:	2300      	movs	r3, #0
 80117f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d101      	bne.n	8011804 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011800:	2302      	movs	r3, #2
 8011802:	e087      	b.n	8011914 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2201      	movs	r2, #1
 8011808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	4313      	orrs	r3, r2
 8011818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	689b      	ldr	r3, [r3, #8]
 8011824:	4313      	orrs	r3, r2
 8011826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	4313      	orrs	r3, r2
 8011834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4313      	orrs	r3, r2
 8011842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801184a:	683b      	ldr	r3, [r7, #0]
 801184c:	691b      	ldr	r3, [r3, #16]
 801184e:	4313      	orrs	r3, r2
 8011850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	695b      	ldr	r3, [r3, #20]
 801185c:	4313      	orrs	r3, r2
 801185e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801186a:	4313      	orrs	r3, r2
 801186c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	699b      	ldr	r3, [r3, #24]
 8011878:	041b      	lsls	r3, r3, #16
 801187a:	4313      	orrs	r3, r2
 801187c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	4a27      	ldr	r2, [pc, #156]	; (8011920 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8011884:	4293      	cmp	r3, r2
 8011886:	d004      	beq.n	8011892 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	4a25      	ldr	r2, [pc, #148]	; (8011924 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 801188e:	4293      	cmp	r3, r2
 8011890:	d106      	bne.n	80118a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	69db      	ldr	r3, [r3, #28]
 801189c:	4313      	orrs	r3, r2
 801189e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	4a1e      	ldr	r2, [pc, #120]	; (8011920 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80118a6:	4293      	cmp	r3, r2
 80118a8:	d004      	beq.n	80118b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	4a1d      	ldr	r2, [pc, #116]	; (8011924 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80118b0:	4293      	cmp	r3, r2
 80118b2:	d126      	bne.n	8011902 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118be:	051b      	lsls	r3, r3, #20
 80118c0:	4313      	orrs	r3, r2
 80118c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80118ca:	683b      	ldr	r3, [r7, #0]
 80118cc:	6a1b      	ldr	r3, [r3, #32]
 80118ce:	4313      	orrs	r3, r2
 80118d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118dc:	4313      	orrs	r3, r2
 80118de:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	4a0e      	ldr	r2, [pc, #56]	; (8011920 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d004      	beq.n	80118f4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	4a0d      	ldr	r2, [pc, #52]	; (8011924 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80118f0:	4293      	cmp	r3, r2
 80118f2:	d106      	bne.n	8011902 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118fe:	4313      	orrs	r3, r2
 8011900:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	68fa      	ldr	r2, [r7, #12]
 8011908:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	2200      	movs	r2, #0
 801190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011912:	2300      	movs	r3, #0
}
 8011914:	4618      	mov	r0, r3
 8011916:	3714      	adds	r7, #20
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr
 8011920:	40010000 	.word	0x40010000
 8011924:	40010400 	.word	0x40010400

08011928 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011930:	bf00      	nop
 8011932:	370c      	adds	r7, #12
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr

0801193c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801193c:	b480      	push	{r7}
 801193e:	b083      	sub	sp, #12
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011944:	bf00      	nop
 8011946:	370c      	adds	r7, #12
 8011948:	46bd      	mov	sp, r7
 801194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194e:	4770      	bx	lr

08011950 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011950:	b480      	push	{r7}
 8011952:	b083      	sub	sp, #12
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011958:	bf00      	nop
 801195a:	370c      	adds	r7, #12
 801195c:	46bd      	mov	sp, r7
 801195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011962:	4770      	bx	lr

08011964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b082      	sub	sp, #8
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d101      	bne.n	8011976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011972:	2301      	movs	r3, #1
 8011974:	e042      	b.n	80119fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801197c:	2b00      	cmp	r3, #0
 801197e:	d106      	bne.n	801198e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	2200      	movs	r2, #0
 8011984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011988:	6878      	ldr	r0, [r7, #4]
 801198a:	f7f3 f93b 	bl	8004c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2224      	movs	r2, #36	; 0x24
 8011992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	681a      	ldr	r2, [r3, #0]
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	f022 0201 	bic.w	r2, r2, #1
 80119a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80119a6:	6878      	ldr	r0, [r7, #4]
 80119a8:	f000 fce8 	bl	801237c <UART_SetConfig>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d101      	bne.n	80119b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80119b2:	2301      	movs	r3, #1
 80119b4:	e022      	b.n	80119fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d002      	beq.n	80119c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f001 fb3a 	bl	8013038 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	685a      	ldr	r2, [r3, #4]
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80119d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	689a      	ldr	r2, [r3, #8]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80119e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	681a      	ldr	r2, [r3, #0]
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	f042 0201 	orr.w	r2, r2, #1
 80119f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f001 fbc1 	bl	801317c <UART_CheckIdleState>
 80119fa:	4603      	mov	r3, r0
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3708      	adds	r7, #8
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8011a04:	b480      	push	{r7}
 8011a06:	b091      	sub	sp, #68	; 0x44
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	60f8      	str	r0, [r7, #12]
 8011a0c:	60b9      	str	r1, [r7, #8]
 8011a0e:	4613      	mov	r3, r2
 8011a10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a18:	2b20      	cmp	r3, #32
 8011a1a:	f040 808c 	bne.w	8011b36 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d002      	beq.n	8011a2a <HAL_UART_Transmit_IT+0x26>
 8011a24:	88fb      	ldrh	r3, [r7, #6]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d101      	bne.n	8011a2e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	e084      	b.n	8011b38 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	d101      	bne.n	8011a3c <HAL_UART_Transmit_IT+0x38>
 8011a38:	2302      	movs	r3, #2
 8011a3a:	e07d      	b.n	8011b38 <HAL_UART_Transmit_IT+0x134>
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	2201      	movs	r2, #1
 8011a40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	68ba      	ldr	r2, [r7, #8]
 8011a48:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	88fa      	ldrh	r2, [r7, #6]
 8011a4e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	88fa      	ldrh	r2, [r7, #6]
 8011a56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	2200      	movs	r2, #0
 8011a64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	2221      	movs	r2, #33	; 0x21
 8011a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011a74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a78:	d12e      	bne.n	8011ad8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	689b      	ldr	r3, [r3, #8]
 8011a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a82:	d107      	bne.n	8011a94 <HAL_UART_Transmit_IT+0x90>
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	691b      	ldr	r3, [r3, #16]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d103      	bne.n	8011a94 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	4a2d      	ldr	r2, [pc, #180]	; (8011b44 <HAL_UART_Transmit_IT+0x140>)
 8011a90:	675a      	str	r2, [r3, #116]	; 0x74
 8011a92:	e002      	b.n	8011a9a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	4a2c      	ldr	r2, [pc, #176]	; (8011b48 <HAL_UART_Transmit_IT+0x144>)
 8011a98:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2200      	movs	r2, #0
 8011a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	3308      	adds	r3, #8
 8011aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aac:	e853 3f00 	ldrex	r3, [r3]
 8011ab0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011ab8:	63bb      	str	r3, [r7, #56]	; 0x38
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	3308      	adds	r3, #8
 8011ac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ac2:	637a      	str	r2, [r7, #52]	; 0x34
 8011ac4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ac6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011aca:	e841 2300 	strex	r3, r2, [r1]
 8011ace:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d1e5      	bne.n	8011aa2 <HAL_UART_Transmit_IT+0x9e>
 8011ad6:	e02c      	b.n	8011b32 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	689b      	ldr	r3, [r3, #8]
 8011adc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011ae0:	d107      	bne.n	8011af2 <HAL_UART_Transmit_IT+0xee>
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	691b      	ldr	r3, [r3, #16]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d103      	bne.n	8011af2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	4a17      	ldr	r2, [pc, #92]	; (8011b4c <HAL_UART_Transmit_IT+0x148>)
 8011aee:	675a      	str	r2, [r3, #116]	; 0x74
 8011af0:	e002      	b.n	8011af8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	4a16      	ldr	r2, [pc, #88]	; (8011b50 <HAL_UART_Transmit_IT+0x14c>)
 8011af6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	2200      	movs	r2, #0
 8011afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	e853 3f00 	ldrex	r3, [r3]
 8011b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	461a      	mov	r2, r3
 8011b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b1e:	623b      	str	r3, [r7, #32]
 8011b20:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b22:	69f9      	ldr	r1, [r7, #28]
 8011b24:	6a3a      	ldr	r2, [r7, #32]
 8011b26:	e841 2300 	strex	r3, r2, [r1]
 8011b2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d1e6      	bne.n	8011b00 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8011b32:	2300      	movs	r3, #0
 8011b34:	e000      	b.n	8011b38 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8011b36:	2302      	movs	r3, #2
  }
}
 8011b38:	4618      	mov	r0, r3
 8011b3a:	3744      	adds	r7, #68	; 0x44
 8011b3c:	46bd      	mov	sp, r7
 8011b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b42:	4770      	bx	lr
 8011b44:	0801394b 	.word	0x0801394b
 8011b48:	0801386b 	.word	0x0801386b
 8011b4c:	080137a9 	.word	0x080137a9
 8011b50:	080136f1 	.word	0x080136f1

08011b54 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011b54:	b580      	push	{r7, lr}
 8011b56:	b08a      	sub	sp, #40	; 0x28
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	60f8      	str	r0, [r7, #12]
 8011b5c:	60b9      	str	r1, [r7, #8]
 8011b5e:	4613      	mov	r3, r2
 8011b60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011b68:	2b20      	cmp	r3, #32
 8011b6a:	d142      	bne.n	8011bf2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d002      	beq.n	8011b78 <HAL_UART_Receive_IT+0x24>
 8011b72:	88fb      	ldrh	r3, [r7, #6]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d101      	bne.n	8011b7c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8011b78:	2301      	movs	r3, #1
 8011b7a:	e03b      	b.n	8011bf4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d101      	bne.n	8011b8a <HAL_UART_Receive_IT+0x36>
 8011b86:	2302      	movs	r3, #2
 8011b88:	e034      	b.n	8011bf4 <HAL_UART_Receive_IT+0xa0>
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2201      	movs	r2, #1
 8011b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	2200      	movs	r2, #0
 8011b96:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	4a17      	ldr	r2, [pc, #92]	; (8011bfc <HAL_UART_Receive_IT+0xa8>)
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	d01f      	beq.n	8011be2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d018      	beq.n	8011be2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	e853 3f00 	ldrex	r3, [r3]
 8011bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	461a      	mov	r2, r3
 8011bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bce:	623b      	str	r3, [r7, #32]
 8011bd0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd2:	69f9      	ldr	r1, [r7, #28]
 8011bd4:	6a3a      	ldr	r2, [r7, #32]
 8011bd6:	e841 2300 	strex	r3, r2, [r1]
 8011bda:	61bb      	str	r3, [r7, #24]
   return(result);
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1e6      	bne.n	8011bb0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011be2:	88fb      	ldrh	r3, [r7, #6]
 8011be4:	461a      	mov	r2, r3
 8011be6:	68b9      	ldr	r1, [r7, #8]
 8011be8:	68f8      	ldr	r0, [r7, #12]
 8011bea:	f001 fbdb 	bl	80133a4 <UART_Start_Receive_IT>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	e000      	b.n	8011bf4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8011bf2:	2302      	movs	r3, #2
  }
}
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	3728      	adds	r7, #40	; 0x28
 8011bf8:	46bd      	mov	sp, r7
 8011bfa:	bd80      	pop	{r7, pc}
 8011bfc:	58000c00 	.word	0x58000c00

08011c00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b0ba      	sub	sp, #232	; 0xe8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	69db      	ldr	r3, [r3, #28]
 8011c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	689b      	ldr	r3, [r3, #8]
 8011c22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011c26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8011c2a:	f640 030f 	movw	r3, #2063	; 0x80f
 8011c2e:	4013      	ands	r3, r2
 8011c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8011c34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d11b      	bne.n	8011c74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c40:	f003 0320 	and.w	r3, r3, #32
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d015      	beq.n	8011c74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011c4c:	f003 0320 	and.w	r3, r3, #32
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d105      	bne.n	8011c60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d009      	beq.n	8011c74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	f000 835a 	beq.w	801231e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c6e:	6878      	ldr	r0, [r7, #4]
 8011c70:	4798      	blx	r3
      }
      return;
 8011c72:	e354      	b.n	801231e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8011c74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	f000 811f 	beq.w	8011ebc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8011c7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011c82:	4b8b      	ldr	r3, [pc, #556]	; (8011eb0 <HAL_UART_IRQHandler+0x2b0>)
 8011c84:	4013      	ands	r3, r2
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d106      	bne.n	8011c98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8011c8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011c8e:	4b89      	ldr	r3, [pc, #548]	; (8011eb4 <HAL_UART_IRQHandler+0x2b4>)
 8011c90:	4013      	ands	r3, r2
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	f000 8112 	beq.w	8011ebc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011c9c:	f003 0301 	and.w	r3, r3, #1
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d011      	beq.n	8011cc8 <HAL_UART_IRQHandler+0xc8>
 8011ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d00b      	beq.n	8011cc8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2201      	movs	r2, #1
 8011cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cbe:	f043 0201 	orr.w	r2, r3, #1
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ccc:	f003 0302 	and.w	r3, r3, #2
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d011      	beq.n	8011cf8 <HAL_UART_IRQHandler+0xf8>
 8011cd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011cd8:	f003 0301 	and.w	r3, r3, #1
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d00b      	beq.n	8011cf8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	2202      	movs	r2, #2
 8011ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011cee:	f043 0204 	orr.w	r2, r3, #4
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011cfc:	f003 0304 	and.w	r3, r3, #4
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d011      	beq.n	8011d28 <HAL_UART_IRQHandler+0x128>
 8011d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011d08:	f003 0301 	and.w	r3, r3, #1
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d00b      	beq.n	8011d28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2204      	movs	r2, #4
 8011d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d1e:	f043 0202 	orr.w	r2, r3, #2
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8011d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d2c:	f003 0308 	and.w	r3, r3, #8
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d017      	beq.n	8011d64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d38:	f003 0320 	and.w	r3, r3, #32
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d105      	bne.n	8011d4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8011d40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8011d44:	4b5a      	ldr	r3, [pc, #360]	; (8011eb0 <HAL_UART_IRQHandler+0x2b0>)
 8011d46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d00b      	beq.n	8011d64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	2208      	movs	r2, #8
 8011d52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d5a:	f043 0208 	orr.w	r2, r3, #8
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8011d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d012      	beq.n	8011d96 <HAL_UART_IRQHandler+0x196>
 8011d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011d74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d00c      	beq.n	8011d96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011d84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d8c:	f043 0220 	orr.w	r2, r3, #32
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	f000 82c0 	beq.w	8012322 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8011da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011da6:	f003 0320 	and.w	r3, r3, #32
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d013      	beq.n	8011dd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8011dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011db2:	f003 0320 	and.w	r3, r3, #32
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d105      	bne.n	8011dc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8011dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d007      	beq.n	8011dd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d003      	beq.n	8011dd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011dd2:	6878      	ldr	r0, [r7, #4]
 8011dd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011ddc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	689b      	ldr	r3, [r3, #8]
 8011de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dea:	2b40      	cmp	r3, #64	; 0x40
 8011dec:	d005      	beq.n	8011dfa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011dee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011df2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d04f      	beq.n	8011e9a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f001 fbfc 	bl	80135f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	689b      	ldr	r3, [r3, #8]
 8011e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011e0a:	2b40      	cmp	r3, #64	; 0x40
 8011e0c:	d141      	bne.n	8011e92 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	3308      	adds	r3, #8
 8011e14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011e1c:	e853 3f00 	ldrex	r3, [r3]
 8011e20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8011e24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	3308      	adds	r3, #8
 8011e36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011e3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8011e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8011e46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011e4a:	e841 2300 	strex	r3, r2, [r1]
 8011e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8011e52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d1d9      	bne.n	8011e0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d013      	beq.n	8011e8a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e66:	4a14      	ldr	r2, [pc, #80]	; (8011eb8 <HAL_UART_IRQHandler+0x2b8>)
 8011e68:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e6e:	4618      	mov	r0, r3
 8011e70:	f7f6 faa2 	bl	80083b8 <HAL_DMA_Abort_IT>
 8011e74:	4603      	mov	r3, r0
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d017      	beq.n	8011eaa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e80:	687a      	ldr	r2, [r7, #4]
 8011e82:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8011e84:	4610      	mov	r0, r2
 8011e86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e88:	e00f      	b.n	8011eaa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f000 fa60 	bl	8012350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e90:	e00b      	b.n	8011eaa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 fa5c 	bl	8012350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011e98:	e007      	b.n	8011eaa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f000 fa58 	bl	8012350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8011ea8:	e23b      	b.n	8012322 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011eaa:	bf00      	nop
    return;
 8011eac:	e239      	b.n	8012322 <HAL_UART_IRQHandler+0x722>
 8011eae:	bf00      	nop
 8011eb0:	10000001 	.word	0x10000001
 8011eb4:	04000120 	.word	0x04000120
 8011eb8:	080136c5 	.word	0x080136c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ec0:	2b01      	cmp	r3, #1
 8011ec2:	f040 81ce 	bne.w	8012262 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8011ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011eca:	f003 0310 	and.w	r3, r3, #16
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	f000 81c7 	beq.w	8012262 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011ed8:	f003 0310 	and.w	r3, r3, #16
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	f000 81c0 	beq.w	8012262 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	2210      	movs	r2, #16
 8011ee8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	689b      	ldr	r3, [r3, #8]
 8011ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ef4:	2b40      	cmp	r3, #64	; 0x40
 8011ef6:	f040 813b 	bne.w	8012170 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	4a8b      	ldr	r2, [pc, #556]	; (8012130 <HAL_UART_IRQHandler+0x530>)
 8011f02:	4293      	cmp	r3, r2
 8011f04:	d059      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	4a89      	ldr	r2, [pc, #548]	; (8012134 <HAL_UART_IRQHandler+0x534>)
 8011f0e:	4293      	cmp	r3, r2
 8011f10:	d053      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4a87      	ldr	r2, [pc, #540]	; (8012138 <HAL_UART_IRQHandler+0x538>)
 8011f1a:	4293      	cmp	r3, r2
 8011f1c:	d04d      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	4a85      	ldr	r2, [pc, #532]	; (801213c <HAL_UART_IRQHandler+0x53c>)
 8011f26:	4293      	cmp	r3, r2
 8011f28:	d047      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4a83      	ldr	r2, [pc, #524]	; (8012140 <HAL_UART_IRQHandler+0x540>)
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d041      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	4a81      	ldr	r2, [pc, #516]	; (8012144 <HAL_UART_IRQHandler+0x544>)
 8011f3e:	4293      	cmp	r3, r2
 8011f40:	d03b      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	4a7f      	ldr	r2, [pc, #508]	; (8012148 <HAL_UART_IRQHandler+0x548>)
 8011f4a:	4293      	cmp	r3, r2
 8011f4c:	d035      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	4a7d      	ldr	r2, [pc, #500]	; (801214c <HAL_UART_IRQHandler+0x54c>)
 8011f56:	4293      	cmp	r3, r2
 8011f58:	d02f      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	4a7b      	ldr	r2, [pc, #492]	; (8012150 <HAL_UART_IRQHandler+0x550>)
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d029      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	4a79      	ldr	r2, [pc, #484]	; (8012154 <HAL_UART_IRQHandler+0x554>)
 8011f6e:	4293      	cmp	r3, r2
 8011f70:	d023      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	4a77      	ldr	r2, [pc, #476]	; (8012158 <HAL_UART_IRQHandler+0x558>)
 8011f7a:	4293      	cmp	r3, r2
 8011f7c:	d01d      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	4a75      	ldr	r2, [pc, #468]	; (801215c <HAL_UART_IRQHandler+0x55c>)
 8011f86:	4293      	cmp	r3, r2
 8011f88:	d017      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	4a73      	ldr	r2, [pc, #460]	; (8012160 <HAL_UART_IRQHandler+0x560>)
 8011f92:	4293      	cmp	r3, r2
 8011f94:	d011      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4a71      	ldr	r2, [pc, #452]	; (8012164 <HAL_UART_IRQHandler+0x564>)
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	d00b      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	4a6f      	ldr	r2, [pc, #444]	; (8012168 <HAL_UART_IRQHandler+0x568>)
 8011faa:	4293      	cmp	r3, r2
 8011fac:	d005      	beq.n	8011fba <HAL_UART_IRQHandler+0x3ba>
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	4a6d      	ldr	r2, [pc, #436]	; (801216c <HAL_UART_IRQHandler+0x56c>)
 8011fb6:	4293      	cmp	r3, r2
 8011fb8:	d105      	bne.n	8011fc6 <HAL_UART_IRQHandler+0x3c6>
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	685b      	ldr	r3, [r3, #4]
 8011fc2:	b29b      	uxth	r3, r3
 8011fc4:	e004      	b.n	8011fd0 <HAL_UART_IRQHandler+0x3d0>
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	685b      	ldr	r3, [r3, #4]
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8011fd4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f000 81a4 	beq.w	8012326 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011fe4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	f080 819c 	bcs.w	8012326 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8011ff4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ffc:	69db      	ldr	r3, [r3, #28]
 8011ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012002:	f000 8086 	beq.w	8012112 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801200e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012012:	e853 3f00 	ldrex	r3, [r3]
 8012016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801201a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801201e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012022:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	461a      	mov	r2, r3
 801202c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8012030:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012034:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012038:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801203c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8012040:	e841 2300 	strex	r3, r2, [r1]
 8012044:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8012048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801204c:	2b00      	cmp	r3, #0
 801204e:	d1da      	bne.n	8012006 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	3308      	adds	r3, #8
 8012056:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801205a:	e853 3f00 	ldrex	r3, [r3]
 801205e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012060:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012062:	f023 0301 	bic.w	r3, r3, #1
 8012066:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	3308      	adds	r3, #8
 8012070:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8012074:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8012078:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801207a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801207c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012080:	e841 2300 	strex	r3, r2, [r1]
 8012084:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012088:	2b00      	cmp	r3, #0
 801208a:	d1e1      	bne.n	8012050 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	3308      	adds	r3, #8
 8012092:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012094:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012096:	e853 3f00 	ldrex	r3, [r3]
 801209a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801209c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801209e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80120a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	3308      	adds	r3, #8
 80120ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80120b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80120b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80120b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80120b8:	e841 2300 	strex	r3, r2, [r1]
 80120bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80120be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d1e3      	bne.n	801208c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2220      	movs	r2, #32
 80120c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2200      	movs	r2, #0
 80120d0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120da:	e853 3f00 	ldrex	r3, [r3]
 80120de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80120e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80120e2:	f023 0310 	bic.w	r3, r3, #16
 80120e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	461a      	mov	r2, r3
 80120f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80120f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80120f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80120fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80120fc:	e841 2300 	strex	r3, r2, [r1]
 8012100:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8012102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012104:	2b00      	cmp	r3, #0
 8012106:	d1e4      	bne.n	80120d2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801210c:	4618      	mov	r0, r3
 801210e:	f7f5 fe35 	bl	8007d7c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801211e:	b29b      	uxth	r3, r3
 8012120:	1ad3      	subs	r3, r2, r3
 8012122:	b29b      	uxth	r3, r3
 8012124:	4619      	mov	r1, r3
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f000 f91c 	bl	8012364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801212c:	e0fb      	b.n	8012326 <HAL_UART_IRQHandler+0x726>
 801212e:	bf00      	nop
 8012130:	40020010 	.word	0x40020010
 8012134:	40020028 	.word	0x40020028
 8012138:	40020040 	.word	0x40020040
 801213c:	40020058 	.word	0x40020058
 8012140:	40020070 	.word	0x40020070
 8012144:	40020088 	.word	0x40020088
 8012148:	400200a0 	.word	0x400200a0
 801214c:	400200b8 	.word	0x400200b8
 8012150:	40020410 	.word	0x40020410
 8012154:	40020428 	.word	0x40020428
 8012158:	40020440 	.word	0x40020440
 801215c:	40020458 	.word	0x40020458
 8012160:	40020470 	.word	0x40020470
 8012164:	40020488 	.word	0x40020488
 8012168:	400204a0 	.word	0x400204a0
 801216c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801217c:	b29b      	uxth	r3, r3
 801217e:	1ad3      	subs	r3, r2, r3
 8012180:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801218a:	b29b      	uxth	r3, r3
 801218c:	2b00      	cmp	r3, #0
 801218e:	f000 80cc 	beq.w	801232a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8012192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012196:	2b00      	cmp	r3, #0
 8012198:	f000 80c7 	beq.w	801232a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121a4:	e853 3f00 	ldrex	r3, [r3]
 80121a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80121aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80121b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	461a      	mov	r2, r3
 80121ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80121be:	647b      	str	r3, [r7, #68]	; 0x44
 80121c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80121c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80121c6:	e841 2300 	strex	r3, r2, [r1]
 80121ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80121cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d1e4      	bne.n	801219c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	3308      	adds	r3, #8
 80121d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121dc:	e853 3f00 	ldrex	r3, [r3]
 80121e0:	623b      	str	r3, [r7, #32]
   return(result);
 80121e2:	6a3a      	ldr	r2, [r7, #32]
 80121e4:	4b54      	ldr	r3, [pc, #336]	; (8012338 <HAL_UART_IRQHandler+0x738>)
 80121e6:	4013      	ands	r3, r2
 80121e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	3308      	adds	r3, #8
 80121f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80121f6:	633a      	str	r2, [r7, #48]	; 0x30
 80121f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80121fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80121fe:	e841 2300 	strex	r3, r2, [r1]
 8012202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012206:	2b00      	cmp	r3, #0
 8012208:	d1e3      	bne.n	80121d2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2220      	movs	r2, #32
 801220e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2200      	movs	r2, #0
 8012216:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2200      	movs	r2, #0
 801221c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	e853 3f00 	ldrex	r3, [r3]
 801222a:	60fb      	str	r3, [r7, #12]
   return(result);
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	f023 0310 	bic.w	r3, r3, #16
 8012232:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	461a      	mov	r2, r3
 801223c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8012240:	61fb      	str	r3, [r7, #28]
 8012242:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012244:	69b9      	ldr	r1, [r7, #24]
 8012246:	69fa      	ldr	r2, [r7, #28]
 8012248:	e841 2300 	strex	r3, r2, [r1]
 801224c:	617b      	str	r3, [r7, #20]
   return(result);
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d1e4      	bne.n	801221e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8012254:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8012258:	4619      	mov	r1, r3
 801225a:	6878      	ldr	r0, [r7, #4]
 801225c:	f000 f882 	bl	8012364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8012260:	e063      	b.n	801232a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801226a:	2b00      	cmp	r3, #0
 801226c:	d00e      	beq.n	801228c <HAL_UART_IRQHandler+0x68c>
 801226e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8012272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012276:	2b00      	cmp	r3, #0
 8012278:	d008      	beq.n	801228c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8012282:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f002 f85d 	bl	8014344 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801228a:	e051      	b.n	8012330 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801228c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012294:	2b00      	cmp	r3, #0
 8012296:	d014      	beq.n	80122c2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8012298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d105      	bne.n	80122b0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80122a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80122a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d008      	beq.n	80122c2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d03a      	beq.n	801232e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	4798      	blx	r3
    }
    return;
 80122c0:	e035      	b.n	801232e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80122c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80122c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d009      	beq.n	80122e2 <HAL_UART_IRQHandler+0x6e2>
 80122ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80122d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d003      	beq.n	80122e2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f001 fbaa 	bl	8013a34 <UART_EndTransmit_IT>
    return;
 80122e0:	e026      	b.n	8012330 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80122e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80122e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d009      	beq.n	8012302 <HAL_UART_IRQHandler+0x702>
 80122ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80122f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d003      	beq.n	8012302 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f002 f836 	bl	801436c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8012300:	e016      	b.n	8012330 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8012302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8012306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801230a:	2b00      	cmp	r3, #0
 801230c:	d010      	beq.n	8012330 <HAL_UART_IRQHandler+0x730>
 801230e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8012312:	2b00      	cmp	r3, #0
 8012314:	da0c      	bge.n	8012330 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f002 f81e 	bl	8014358 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801231c:	e008      	b.n	8012330 <HAL_UART_IRQHandler+0x730>
      return;
 801231e:	bf00      	nop
 8012320:	e006      	b.n	8012330 <HAL_UART_IRQHandler+0x730>
    return;
 8012322:	bf00      	nop
 8012324:	e004      	b.n	8012330 <HAL_UART_IRQHandler+0x730>
      return;
 8012326:	bf00      	nop
 8012328:	e002      	b.n	8012330 <HAL_UART_IRQHandler+0x730>
      return;
 801232a:	bf00      	nop
 801232c:	e000      	b.n	8012330 <HAL_UART_IRQHandler+0x730>
    return;
 801232e:	bf00      	nop
  }
}
 8012330:	37e8      	adds	r7, #232	; 0xe8
 8012332:	46bd      	mov	sp, r7
 8012334:	bd80      	pop	{r7, pc}
 8012336:	bf00      	nop
 8012338:	effffffe 	.word	0xeffffffe

0801233c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801233c:	b480      	push	{r7}
 801233e:	b083      	sub	sp, #12
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012344:	bf00      	nop
 8012346:	370c      	adds	r7, #12
 8012348:	46bd      	mov	sp, r7
 801234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801234e:	4770      	bx	lr

08012350 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012350:	b480      	push	{r7}
 8012352:	b083      	sub	sp, #12
 8012354:	af00      	add	r7, sp, #0
 8012356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8012358:	bf00      	nop
 801235a:	370c      	adds	r7, #12
 801235c:	46bd      	mov	sp, r7
 801235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012362:	4770      	bx	lr

08012364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012364:	b480      	push	{r7}
 8012366:	b083      	sub	sp, #12
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	460b      	mov	r3, r1
 801236e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012370:	bf00      	nop
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801237c:	b5b0      	push	{r4, r5, r7, lr}
 801237e:	b08e      	sub	sp, #56	; 0x38
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012384:	2300      	movs	r3, #0
 8012386:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	689a      	ldr	r2, [r3, #8]
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	691b      	ldr	r3, [r3, #16]
 8012392:	431a      	orrs	r2, r3
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	695b      	ldr	r3, [r3, #20]
 8012398:	431a      	orrs	r2, r3
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	69db      	ldr	r3, [r3, #28]
 801239e:	4313      	orrs	r3, r2
 80123a0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	681a      	ldr	r2, [r3, #0]
 80123a8:	4bbf      	ldr	r3, [pc, #764]	; (80126a8 <UART_SetConfig+0x32c>)
 80123aa:	4013      	ands	r3, r2
 80123ac:	687a      	ldr	r2, [r7, #4]
 80123ae:	6812      	ldr	r2, [r2, #0]
 80123b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80123b2:	430b      	orrs	r3, r1
 80123b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	68da      	ldr	r2, [r3, #12]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	430a      	orrs	r2, r1
 80123ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	699b      	ldr	r3, [r3, #24]
 80123d0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	4ab5      	ldr	r2, [pc, #724]	; (80126ac <UART_SetConfig+0x330>)
 80123d8:	4293      	cmp	r3, r2
 80123da:	d004      	beq.n	80123e6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6a1b      	ldr	r3, [r3, #32]
 80123e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123e2:	4313      	orrs	r3, r2
 80123e4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	689a      	ldr	r2, [r3, #8]
 80123ec:	4bb0      	ldr	r3, [pc, #704]	; (80126b0 <UART_SetConfig+0x334>)
 80123ee:	4013      	ands	r3, r2
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	6812      	ldr	r2, [r2, #0]
 80123f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80123f6:	430b      	orrs	r3, r1
 80123f8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012400:	f023 010f 	bic.w	r1, r3, #15
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	430a      	orrs	r2, r1
 801240e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	4aa7      	ldr	r2, [pc, #668]	; (80126b4 <UART_SetConfig+0x338>)
 8012416:	4293      	cmp	r3, r2
 8012418:	d176      	bne.n	8012508 <UART_SetConfig+0x18c>
 801241a:	4ba7      	ldr	r3, [pc, #668]	; (80126b8 <UART_SetConfig+0x33c>)
 801241c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801241e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012422:	2b28      	cmp	r3, #40	; 0x28
 8012424:	d86c      	bhi.n	8012500 <UART_SetConfig+0x184>
 8012426:	a201      	add	r2, pc, #4	; (adr r2, 801242c <UART_SetConfig+0xb0>)
 8012428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801242c:	080124d1 	.word	0x080124d1
 8012430:	08012501 	.word	0x08012501
 8012434:	08012501 	.word	0x08012501
 8012438:	08012501 	.word	0x08012501
 801243c:	08012501 	.word	0x08012501
 8012440:	08012501 	.word	0x08012501
 8012444:	08012501 	.word	0x08012501
 8012448:	08012501 	.word	0x08012501
 801244c:	080124d9 	.word	0x080124d9
 8012450:	08012501 	.word	0x08012501
 8012454:	08012501 	.word	0x08012501
 8012458:	08012501 	.word	0x08012501
 801245c:	08012501 	.word	0x08012501
 8012460:	08012501 	.word	0x08012501
 8012464:	08012501 	.word	0x08012501
 8012468:	08012501 	.word	0x08012501
 801246c:	080124e1 	.word	0x080124e1
 8012470:	08012501 	.word	0x08012501
 8012474:	08012501 	.word	0x08012501
 8012478:	08012501 	.word	0x08012501
 801247c:	08012501 	.word	0x08012501
 8012480:	08012501 	.word	0x08012501
 8012484:	08012501 	.word	0x08012501
 8012488:	08012501 	.word	0x08012501
 801248c:	080124e9 	.word	0x080124e9
 8012490:	08012501 	.word	0x08012501
 8012494:	08012501 	.word	0x08012501
 8012498:	08012501 	.word	0x08012501
 801249c:	08012501 	.word	0x08012501
 80124a0:	08012501 	.word	0x08012501
 80124a4:	08012501 	.word	0x08012501
 80124a8:	08012501 	.word	0x08012501
 80124ac:	080124f1 	.word	0x080124f1
 80124b0:	08012501 	.word	0x08012501
 80124b4:	08012501 	.word	0x08012501
 80124b8:	08012501 	.word	0x08012501
 80124bc:	08012501 	.word	0x08012501
 80124c0:	08012501 	.word	0x08012501
 80124c4:	08012501 	.word	0x08012501
 80124c8:	08012501 	.word	0x08012501
 80124cc:	080124f9 	.word	0x080124f9
 80124d0:	2301      	movs	r3, #1
 80124d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124d6:	e326      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80124d8:	2304      	movs	r3, #4
 80124da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124de:	e322      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80124e0:	2308      	movs	r3, #8
 80124e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124e6:	e31e      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80124e8:	2310      	movs	r3, #16
 80124ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124ee:	e31a      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80124f0:	2320      	movs	r3, #32
 80124f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124f6:	e316      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80124f8:	2340      	movs	r3, #64	; 0x40
 80124fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80124fe:	e312      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012500:	2380      	movs	r3, #128	; 0x80
 8012502:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012506:	e30e      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	4a6b      	ldr	r2, [pc, #428]	; (80126bc <UART_SetConfig+0x340>)
 801250e:	4293      	cmp	r3, r2
 8012510:	d130      	bne.n	8012574 <UART_SetConfig+0x1f8>
 8012512:	4b69      	ldr	r3, [pc, #420]	; (80126b8 <UART_SetConfig+0x33c>)
 8012514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012516:	f003 0307 	and.w	r3, r3, #7
 801251a:	2b05      	cmp	r3, #5
 801251c:	d826      	bhi.n	801256c <UART_SetConfig+0x1f0>
 801251e:	a201      	add	r2, pc, #4	; (adr r2, 8012524 <UART_SetConfig+0x1a8>)
 8012520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012524:	0801253d 	.word	0x0801253d
 8012528:	08012545 	.word	0x08012545
 801252c:	0801254d 	.word	0x0801254d
 8012530:	08012555 	.word	0x08012555
 8012534:	0801255d 	.word	0x0801255d
 8012538:	08012565 	.word	0x08012565
 801253c:	2300      	movs	r3, #0
 801253e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012542:	e2f0      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012544:	2304      	movs	r3, #4
 8012546:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801254a:	e2ec      	b.n	8012b26 <UART_SetConfig+0x7aa>
 801254c:	2308      	movs	r3, #8
 801254e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012552:	e2e8      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012554:	2310      	movs	r3, #16
 8012556:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801255a:	e2e4      	b.n	8012b26 <UART_SetConfig+0x7aa>
 801255c:	2320      	movs	r3, #32
 801255e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012562:	e2e0      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012564:	2340      	movs	r3, #64	; 0x40
 8012566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801256a:	e2dc      	b.n	8012b26 <UART_SetConfig+0x7aa>
 801256c:	2380      	movs	r3, #128	; 0x80
 801256e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012572:	e2d8      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	4a51      	ldr	r2, [pc, #324]	; (80126c0 <UART_SetConfig+0x344>)
 801257a:	4293      	cmp	r3, r2
 801257c:	d130      	bne.n	80125e0 <UART_SetConfig+0x264>
 801257e:	4b4e      	ldr	r3, [pc, #312]	; (80126b8 <UART_SetConfig+0x33c>)
 8012580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012582:	f003 0307 	and.w	r3, r3, #7
 8012586:	2b05      	cmp	r3, #5
 8012588:	d826      	bhi.n	80125d8 <UART_SetConfig+0x25c>
 801258a:	a201      	add	r2, pc, #4	; (adr r2, 8012590 <UART_SetConfig+0x214>)
 801258c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012590:	080125a9 	.word	0x080125a9
 8012594:	080125b1 	.word	0x080125b1
 8012598:	080125b9 	.word	0x080125b9
 801259c:	080125c1 	.word	0x080125c1
 80125a0:	080125c9 	.word	0x080125c9
 80125a4:	080125d1 	.word	0x080125d1
 80125a8:	2300      	movs	r3, #0
 80125aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125ae:	e2ba      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80125b0:	2304      	movs	r3, #4
 80125b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125b6:	e2b6      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80125b8:	2308      	movs	r3, #8
 80125ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125be:	e2b2      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80125c0:	2310      	movs	r3, #16
 80125c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125c6:	e2ae      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80125c8:	2320      	movs	r3, #32
 80125ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125ce:	e2aa      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80125d0:	2340      	movs	r3, #64	; 0x40
 80125d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125d6:	e2a6      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80125d8:	2380      	movs	r3, #128	; 0x80
 80125da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80125de:	e2a2      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	4a37      	ldr	r2, [pc, #220]	; (80126c4 <UART_SetConfig+0x348>)
 80125e6:	4293      	cmp	r3, r2
 80125e8:	d130      	bne.n	801264c <UART_SetConfig+0x2d0>
 80125ea:	4b33      	ldr	r3, [pc, #204]	; (80126b8 <UART_SetConfig+0x33c>)
 80125ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125ee:	f003 0307 	and.w	r3, r3, #7
 80125f2:	2b05      	cmp	r3, #5
 80125f4:	d826      	bhi.n	8012644 <UART_SetConfig+0x2c8>
 80125f6:	a201      	add	r2, pc, #4	; (adr r2, 80125fc <UART_SetConfig+0x280>)
 80125f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125fc:	08012615 	.word	0x08012615
 8012600:	0801261d 	.word	0x0801261d
 8012604:	08012625 	.word	0x08012625
 8012608:	0801262d 	.word	0x0801262d
 801260c:	08012635 	.word	0x08012635
 8012610:	0801263d 	.word	0x0801263d
 8012614:	2300      	movs	r3, #0
 8012616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801261a:	e284      	b.n	8012b26 <UART_SetConfig+0x7aa>
 801261c:	2304      	movs	r3, #4
 801261e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012622:	e280      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012624:	2308      	movs	r3, #8
 8012626:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801262a:	e27c      	b.n	8012b26 <UART_SetConfig+0x7aa>
 801262c:	2310      	movs	r3, #16
 801262e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012632:	e278      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012634:	2320      	movs	r3, #32
 8012636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801263a:	e274      	b.n	8012b26 <UART_SetConfig+0x7aa>
 801263c:	2340      	movs	r3, #64	; 0x40
 801263e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012642:	e270      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012644:	2380      	movs	r3, #128	; 0x80
 8012646:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801264a:	e26c      	b.n	8012b26 <UART_SetConfig+0x7aa>
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	4a1d      	ldr	r2, [pc, #116]	; (80126c8 <UART_SetConfig+0x34c>)
 8012652:	4293      	cmp	r3, r2
 8012654:	d142      	bne.n	80126dc <UART_SetConfig+0x360>
 8012656:	4b18      	ldr	r3, [pc, #96]	; (80126b8 <UART_SetConfig+0x33c>)
 8012658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801265a:	f003 0307 	and.w	r3, r3, #7
 801265e:	2b05      	cmp	r3, #5
 8012660:	d838      	bhi.n	80126d4 <UART_SetConfig+0x358>
 8012662:	a201      	add	r2, pc, #4	; (adr r2, 8012668 <UART_SetConfig+0x2ec>)
 8012664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012668:	08012681 	.word	0x08012681
 801266c:	08012689 	.word	0x08012689
 8012670:	08012691 	.word	0x08012691
 8012674:	08012699 	.word	0x08012699
 8012678:	080126a1 	.word	0x080126a1
 801267c:	080126cd 	.word	0x080126cd
 8012680:	2300      	movs	r3, #0
 8012682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012686:	e24e      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012688:	2304      	movs	r3, #4
 801268a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801268e:	e24a      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012690:	2308      	movs	r3, #8
 8012692:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012696:	e246      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012698:	2310      	movs	r3, #16
 801269a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801269e:	e242      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80126a0:	2320      	movs	r3, #32
 80126a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126a6:	e23e      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80126a8:	cfff69f3 	.word	0xcfff69f3
 80126ac:	58000c00 	.word	0x58000c00
 80126b0:	11fff4ff 	.word	0x11fff4ff
 80126b4:	40011000 	.word	0x40011000
 80126b8:	58024400 	.word	0x58024400
 80126bc:	40004400 	.word	0x40004400
 80126c0:	40004800 	.word	0x40004800
 80126c4:	40004c00 	.word	0x40004c00
 80126c8:	40005000 	.word	0x40005000
 80126cc:	2340      	movs	r3, #64	; 0x40
 80126ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126d2:	e228      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80126d4:	2380      	movs	r3, #128	; 0x80
 80126d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80126da:	e224      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4ab1      	ldr	r2, [pc, #708]	; (80129a8 <UART_SetConfig+0x62c>)
 80126e2:	4293      	cmp	r3, r2
 80126e4:	d176      	bne.n	80127d4 <UART_SetConfig+0x458>
 80126e6:	4bb1      	ldr	r3, [pc, #708]	; (80129ac <UART_SetConfig+0x630>)
 80126e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80126ee:	2b28      	cmp	r3, #40	; 0x28
 80126f0:	d86c      	bhi.n	80127cc <UART_SetConfig+0x450>
 80126f2:	a201      	add	r2, pc, #4	; (adr r2, 80126f8 <UART_SetConfig+0x37c>)
 80126f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126f8:	0801279d 	.word	0x0801279d
 80126fc:	080127cd 	.word	0x080127cd
 8012700:	080127cd 	.word	0x080127cd
 8012704:	080127cd 	.word	0x080127cd
 8012708:	080127cd 	.word	0x080127cd
 801270c:	080127cd 	.word	0x080127cd
 8012710:	080127cd 	.word	0x080127cd
 8012714:	080127cd 	.word	0x080127cd
 8012718:	080127a5 	.word	0x080127a5
 801271c:	080127cd 	.word	0x080127cd
 8012720:	080127cd 	.word	0x080127cd
 8012724:	080127cd 	.word	0x080127cd
 8012728:	080127cd 	.word	0x080127cd
 801272c:	080127cd 	.word	0x080127cd
 8012730:	080127cd 	.word	0x080127cd
 8012734:	080127cd 	.word	0x080127cd
 8012738:	080127ad 	.word	0x080127ad
 801273c:	080127cd 	.word	0x080127cd
 8012740:	080127cd 	.word	0x080127cd
 8012744:	080127cd 	.word	0x080127cd
 8012748:	080127cd 	.word	0x080127cd
 801274c:	080127cd 	.word	0x080127cd
 8012750:	080127cd 	.word	0x080127cd
 8012754:	080127cd 	.word	0x080127cd
 8012758:	080127b5 	.word	0x080127b5
 801275c:	080127cd 	.word	0x080127cd
 8012760:	080127cd 	.word	0x080127cd
 8012764:	080127cd 	.word	0x080127cd
 8012768:	080127cd 	.word	0x080127cd
 801276c:	080127cd 	.word	0x080127cd
 8012770:	080127cd 	.word	0x080127cd
 8012774:	080127cd 	.word	0x080127cd
 8012778:	080127bd 	.word	0x080127bd
 801277c:	080127cd 	.word	0x080127cd
 8012780:	080127cd 	.word	0x080127cd
 8012784:	080127cd 	.word	0x080127cd
 8012788:	080127cd 	.word	0x080127cd
 801278c:	080127cd 	.word	0x080127cd
 8012790:	080127cd 	.word	0x080127cd
 8012794:	080127cd 	.word	0x080127cd
 8012798:	080127c5 	.word	0x080127c5
 801279c:	2301      	movs	r3, #1
 801279e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127a2:	e1c0      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80127a4:	2304      	movs	r3, #4
 80127a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127aa:	e1bc      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80127ac:	2308      	movs	r3, #8
 80127ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127b2:	e1b8      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80127b4:	2310      	movs	r3, #16
 80127b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127ba:	e1b4      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80127bc:	2320      	movs	r3, #32
 80127be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127c2:	e1b0      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80127c4:	2340      	movs	r3, #64	; 0x40
 80127c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127ca:	e1ac      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80127cc:	2380      	movs	r3, #128	; 0x80
 80127ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80127d2:	e1a8      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	4a75      	ldr	r2, [pc, #468]	; (80129b0 <UART_SetConfig+0x634>)
 80127da:	4293      	cmp	r3, r2
 80127dc:	d130      	bne.n	8012840 <UART_SetConfig+0x4c4>
 80127de:	4b73      	ldr	r3, [pc, #460]	; (80129ac <UART_SetConfig+0x630>)
 80127e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80127e2:	f003 0307 	and.w	r3, r3, #7
 80127e6:	2b05      	cmp	r3, #5
 80127e8:	d826      	bhi.n	8012838 <UART_SetConfig+0x4bc>
 80127ea:	a201      	add	r2, pc, #4	; (adr r2, 80127f0 <UART_SetConfig+0x474>)
 80127ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80127f0:	08012809 	.word	0x08012809
 80127f4:	08012811 	.word	0x08012811
 80127f8:	08012819 	.word	0x08012819
 80127fc:	08012821 	.word	0x08012821
 8012800:	08012829 	.word	0x08012829
 8012804:	08012831 	.word	0x08012831
 8012808:	2300      	movs	r3, #0
 801280a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801280e:	e18a      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012810:	2304      	movs	r3, #4
 8012812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012816:	e186      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012818:	2308      	movs	r3, #8
 801281a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801281e:	e182      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012820:	2310      	movs	r3, #16
 8012822:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012826:	e17e      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012828:	2320      	movs	r3, #32
 801282a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801282e:	e17a      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012830:	2340      	movs	r3, #64	; 0x40
 8012832:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012836:	e176      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012838:	2380      	movs	r3, #128	; 0x80
 801283a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801283e:	e172      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	4a5b      	ldr	r2, [pc, #364]	; (80129b4 <UART_SetConfig+0x638>)
 8012846:	4293      	cmp	r3, r2
 8012848:	d130      	bne.n	80128ac <UART_SetConfig+0x530>
 801284a:	4b58      	ldr	r3, [pc, #352]	; (80129ac <UART_SetConfig+0x630>)
 801284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801284e:	f003 0307 	and.w	r3, r3, #7
 8012852:	2b05      	cmp	r3, #5
 8012854:	d826      	bhi.n	80128a4 <UART_SetConfig+0x528>
 8012856:	a201      	add	r2, pc, #4	; (adr r2, 801285c <UART_SetConfig+0x4e0>)
 8012858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801285c:	08012875 	.word	0x08012875
 8012860:	0801287d 	.word	0x0801287d
 8012864:	08012885 	.word	0x08012885
 8012868:	0801288d 	.word	0x0801288d
 801286c:	08012895 	.word	0x08012895
 8012870:	0801289d 	.word	0x0801289d
 8012874:	2300      	movs	r3, #0
 8012876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801287a:	e154      	b.n	8012b26 <UART_SetConfig+0x7aa>
 801287c:	2304      	movs	r3, #4
 801287e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012882:	e150      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012884:	2308      	movs	r3, #8
 8012886:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801288a:	e14c      	b.n	8012b26 <UART_SetConfig+0x7aa>
 801288c:	2310      	movs	r3, #16
 801288e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012892:	e148      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012894:	2320      	movs	r3, #32
 8012896:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801289a:	e144      	b.n	8012b26 <UART_SetConfig+0x7aa>
 801289c:	2340      	movs	r3, #64	; 0x40
 801289e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128a2:	e140      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80128a4:	2380      	movs	r3, #128	; 0x80
 80128a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80128aa:	e13c      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	4a41      	ldr	r2, [pc, #260]	; (80129b8 <UART_SetConfig+0x63c>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	f040 8082 	bne.w	80129bc <UART_SetConfig+0x640>
 80128b8:	4b3c      	ldr	r3, [pc, #240]	; (80129ac <UART_SetConfig+0x630>)
 80128ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80128c0:	2b28      	cmp	r3, #40	; 0x28
 80128c2:	d86d      	bhi.n	80129a0 <UART_SetConfig+0x624>
 80128c4:	a201      	add	r2, pc, #4	; (adr r2, 80128cc <UART_SetConfig+0x550>)
 80128c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128ca:	bf00      	nop
 80128cc:	08012971 	.word	0x08012971
 80128d0:	080129a1 	.word	0x080129a1
 80128d4:	080129a1 	.word	0x080129a1
 80128d8:	080129a1 	.word	0x080129a1
 80128dc:	080129a1 	.word	0x080129a1
 80128e0:	080129a1 	.word	0x080129a1
 80128e4:	080129a1 	.word	0x080129a1
 80128e8:	080129a1 	.word	0x080129a1
 80128ec:	08012979 	.word	0x08012979
 80128f0:	080129a1 	.word	0x080129a1
 80128f4:	080129a1 	.word	0x080129a1
 80128f8:	080129a1 	.word	0x080129a1
 80128fc:	080129a1 	.word	0x080129a1
 8012900:	080129a1 	.word	0x080129a1
 8012904:	080129a1 	.word	0x080129a1
 8012908:	080129a1 	.word	0x080129a1
 801290c:	08012981 	.word	0x08012981
 8012910:	080129a1 	.word	0x080129a1
 8012914:	080129a1 	.word	0x080129a1
 8012918:	080129a1 	.word	0x080129a1
 801291c:	080129a1 	.word	0x080129a1
 8012920:	080129a1 	.word	0x080129a1
 8012924:	080129a1 	.word	0x080129a1
 8012928:	080129a1 	.word	0x080129a1
 801292c:	08012989 	.word	0x08012989
 8012930:	080129a1 	.word	0x080129a1
 8012934:	080129a1 	.word	0x080129a1
 8012938:	080129a1 	.word	0x080129a1
 801293c:	080129a1 	.word	0x080129a1
 8012940:	080129a1 	.word	0x080129a1
 8012944:	080129a1 	.word	0x080129a1
 8012948:	080129a1 	.word	0x080129a1
 801294c:	08012991 	.word	0x08012991
 8012950:	080129a1 	.word	0x080129a1
 8012954:	080129a1 	.word	0x080129a1
 8012958:	080129a1 	.word	0x080129a1
 801295c:	080129a1 	.word	0x080129a1
 8012960:	080129a1 	.word	0x080129a1
 8012964:	080129a1 	.word	0x080129a1
 8012968:	080129a1 	.word	0x080129a1
 801296c:	08012999 	.word	0x08012999
 8012970:	2301      	movs	r3, #1
 8012972:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012976:	e0d6      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012978:	2304      	movs	r3, #4
 801297a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801297e:	e0d2      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012980:	2308      	movs	r3, #8
 8012982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012986:	e0ce      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012988:	2310      	movs	r3, #16
 801298a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801298e:	e0ca      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012990:	2320      	movs	r3, #32
 8012992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012996:	e0c6      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012998:	2340      	movs	r3, #64	; 0x40
 801299a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801299e:	e0c2      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80129a0:	2380      	movs	r3, #128	; 0x80
 80129a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80129a6:	e0be      	b.n	8012b26 <UART_SetConfig+0x7aa>
 80129a8:	40011400 	.word	0x40011400
 80129ac:	58024400 	.word	0x58024400
 80129b0:	40007800 	.word	0x40007800
 80129b4:	40007c00 	.word	0x40007c00
 80129b8:	40011800 	.word	0x40011800
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	4aad      	ldr	r2, [pc, #692]	; (8012c78 <UART_SetConfig+0x8fc>)
 80129c2:	4293      	cmp	r3, r2
 80129c4:	d176      	bne.n	8012ab4 <UART_SetConfig+0x738>
 80129c6:	4bad      	ldr	r3, [pc, #692]	; (8012c7c <UART_SetConfig+0x900>)
 80129c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80129ce:	2b28      	cmp	r3, #40	; 0x28
 80129d0:	d86c      	bhi.n	8012aac <UART_SetConfig+0x730>
 80129d2:	a201      	add	r2, pc, #4	; (adr r2, 80129d8 <UART_SetConfig+0x65c>)
 80129d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129d8:	08012a7d 	.word	0x08012a7d
 80129dc:	08012aad 	.word	0x08012aad
 80129e0:	08012aad 	.word	0x08012aad
 80129e4:	08012aad 	.word	0x08012aad
 80129e8:	08012aad 	.word	0x08012aad
 80129ec:	08012aad 	.word	0x08012aad
 80129f0:	08012aad 	.word	0x08012aad
 80129f4:	08012aad 	.word	0x08012aad
 80129f8:	08012a85 	.word	0x08012a85
 80129fc:	08012aad 	.word	0x08012aad
 8012a00:	08012aad 	.word	0x08012aad
 8012a04:	08012aad 	.word	0x08012aad
 8012a08:	08012aad 	.word	0x08012aad
 8012a0c:	08012aad 	.word	0x08012aad
 8012a10:	08012aad 	.word	0x08012aad
 8012a14:	08012aad 	.word	0x08012aad
 8012a18:	08012a8d 	.word	0x08012a8d
 8012a1c:	08012aad 	.word	0x08012aad
 8012a20:	08012aad 	.word	0x08012aad
 8012a24:	08012aad 	.word	0x08012aad
 8012a28:	08012aad 	.word	0x08012aad
 8012a2c:	08012aad 	.word	0x08012aad
 8012a30:	08012aad 	.word	0x08012aad
 8012a34:	08012aad 	.word	0x08012aad
 8012a38:	08012a95 	.word	0x08012a95
 8012a3c:	08012aad 	.word	0x08012aad
 8012a40:	08012aad 	.word	0x08012aad
 8012a44:	08012aad 	.word	0x08012aad
 8012a48:	08012aad 	.word	0x08012aad
 8012a4c:	08012aad 	.word	0x08012aad
 8012a50:	08012aad 	.word	0x08012aad
 8012a54:	08012aad 	.word	0x08012aad
 8012a58:	08012a9d 	.word	0x08012a9d
 8012a5c:	08012aad 	.word	0x08012aad
 8012a60:	08012aad 	.word	0x08012aad
 8012a64:	08012aad 	.word	0x08012aad
 8012a68:	08012aad 	.word	0x08012aad
 8012a6c:	08012aad 	.word	0x08012aad
 8012a70:	08012aad 	.word	0x08012aad
 8012a74:	08012aad 	.word	0x08012aad
 8012a78:	08012aa5 	.word	0x08012aa5
 8012a7c:	2301      	movs	r3, #1
 8012a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a82:	e050      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012a84:	2304      	movs	r3, #4
 8012a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a8a:	e04c      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012a8c:	2308      	movs	r3, #8
 8012a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a92:	e048      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012a94:	2310      	movs	r3, #16
 8012a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012a9a:	e044      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012a9c:	2320      	movs	r3, #32
 8012a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012aa2:	e040      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012aa4:	2340      	movs	r3, #64	; 0x40
 8012aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012aaa:	e03c      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012aac:	2380      	movs	r3, #128	; 0x80
 8012aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012ab2:	e038      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	4a71      	ldr	r2, [pc, #452]	; (8012c80 <UART_SetConfig+0x904>)
 8012aba:	4293      	cmp	r3, r2
 8012abc:	d130      	bne.n	8012b20 <UART_SetConfig+0x7a4>
 8012abe:	4b6f      	ldr	r3, [pc, #444]	; (8012c7c <UART_SetConfig+0x900>)
 8012ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012ac2:	f003 0307 	and.w	r3, r3, #7
 8012ac6:	2b05      	cmp	r3, #5
 8012ac8:	d826      	bhi.n	8012b18 <UART_SetConfig+0x79c>
 8012aca:	a201      	add	r2, pc, #4	; (adr r2, 8012ad0 <UART_SetConfig+0x754>)
 8012acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ad0:	08012ae9 	.word	0x08012ae9
 8012ad4:	08012af1 	.word	0x08012af1
 8012ad8:	08012af9 	.word	0x08012af9
 8012adc:	08012b01 	.word	0x08012b01
 8012ae0:	08012b09 	.word	0x08012b09
 8012ae4:	08012b11 	.word	0x08012b11
 8012ae8:	2302      	movs	r3, #2
 8012aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012aee:	e01a      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012af0:	2304      	movs	r3, #4
 8012af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012af6:	e016      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012af8:	2308      	movs	r3, #8
 8012afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012afe:	e012      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012b00:	2310      	movs	r3, #16
 8012b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b06:	e00e      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012b08:	2320      	movs	r3, #32
 8012b0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b0e:	e00a      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012b10:	2340      	movs	r3, #64	; 0x40
 8012b12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b16:	e006      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012b18:	2380      	movs	r3, #128	; 0x80
 8012b1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8012b1e:	e002      	b.n	8012b26 <UART_SetConfig+0x7aa>
 8012b20:	2380      	movs	r3, #128	; 0x80
 8012b22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	4a55      	ldr	r2, [pc, #340]	; (8012c80 <UART_SetConfig+0x904>)
 8012b2c:	4293      	cmp	r3, r2
 8012b2e:	f040 80f0 	bne.w	8012d12 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8012b32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012b36:	2b20      	cmp	r3, #32
 8012b38:	dc46      	bgt.n	8012bc8 <UART_SetConfig+0x84c>
 8012b3a:	2b02      	cmp	r3, #2
 8012b3c:	db75      	blt.n	8012c2a <UART_SetConfig+0x8ae>
 8012b3e:	3b02      	subs	r3, #2
 8012b40:	2b1e      	cmp	r3, #30
 8012b42:	d872      	bhi.n	8012c2a <UART_SetConfig+0x8ae>
 8012b44:	a201      	add	r2, pc, #4	; (adr r2, 8012b4c <UART_SetConfig+0x7d0>)
 8012b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b4a:	bf00      	nop
 8012b4c:	08012bcf 	.word	0x08012bcf
 8012b50:	08012c2b 	.word	0x08012c2b
 8012b54:	08012bd7 	.word	0x08012bd7
 8012b58:	08012c2b 	.word	0x08012c2b
 8012b5c:	08012c2b 	.word	0x08012c2b
 8012b60:	08012c2b 	.word	0x08012c2b
 8012b64:	08012be7 	.word	0x08012be7
 8012b68:	08012c2b 	.word	0x08012c2b
 8012b6c:	08012c2b 	.word	0x08012c2b
 8012b70:	08012c2b 	.word	0x08012c2b
 8012b74:	08012c2b 	.word	0x08012c2b
 8012b78:	08012c2b 	.word	0x08012c2b
 8012b7c:	08012c2b 	.word	0x08012c2b
 8012b80:	08012c2b 	.word	0x08012c2b
 8012b84:	08012bf7 	.word	0x08012bf7
 8012b88:	08012c2b 	.word	0x08012c2b
 8012b8c:	08012c2b 	.word	0x08012c2b
 8012b90:	08012c2b 	.word	0x08012c2b
 8012b94:	08012c2b 	.word	0x08012c2b
 8012b98:	08012c2b 	.word	0x08012c2b
 8012b9c:	08012c2b 	.word	0x08012c2b
 8012ba0:	08012c2b 	.word	0x08012c2b
 8012ba4:	08012c2b 	.word	0x08012c2b
 8012ba8:	08012c2b 	.word	0x08012c2b
 8012bac:	08012c2b 	.word	0x08012c2b
 8012bb0:	08012c2b 	.word	0x08012c2b
 8012bb4:	08012c2b 	.word	0x08012c2b
 8012bb8:	08012c2b 	.word	0x08012c2b
 8012bbc:	08012c2b 	.word	0x08012c2b
 8012bc0:	08012c2b 	.word	0x08012c2b
 8012bc4:	08012c1d 	.word	0x08012c1d
 8012bc8:	2b40      	cmp	r3, #64	; 0x40
 8012bca:	d02a      	beq.n	8012c22 <UART_SetConfig+0x8a6>
 8012bcc:	e02d      	b.n	8012c2a <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012bce:	f7fb fbc3 	bl	800e358 <HAL_RCCEx_GetD3PCLK1Freq>
 8012bd2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012bd4:	e02f      	b.n	8012c36 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012bd6:	f107 0314 	add.w	r3, r7, #20
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7fb fbd2 	bl	800e384 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012be4:	e027      	b.n	8012c36 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012be6:	f107 0308 	add.w	r3, r7, #8
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7fb fd1e 	bl	800e62c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012bf4:	e01f      	b.n	8012c36 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012bf6:	4b21      	ldr	r3, [pc, #132]	; (8012c7c <UART_SetConfig+0x900>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	f003 0320 	and.w	r3, r3, #32
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d009      	beq.n	8012c16 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012c02:	4b1e      	ldr	r3, [pc, #120]	; (8012c7c <UART_SetConfig+0x900>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	08db      	lsrs	r3, r3, #3
 8012c08:	f003 0303 	and.w	r3, r3, #3
 8012c0c:	4a1d      	ldr	r2, [pc, #116]	; (8012c84 <UART_SetConfig+0x908>)
 8012c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8012c12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012c14:	e00f      	b.n	8012c36 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8012c16:	4b1b      	ldr	r3, [pc, #108]	; (8012c84 <UART_SetConfig+0x908>)
 8012c18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012c1a:	e00c      	b.n	8012c36 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012c1c:	4b1a      	ldr	r3, [pc, #104]	; (8012c88 <UART_SetConfig+0x90c>)
 8012c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012c20:	e009      	b.n	8012c36 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012c26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012c28:	e005      	b.n	8012c36 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8012c2a:	2300      	movs	r3, #0
 8012c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012c2e:	2301      	movs	r3, #1
 8012c30:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8012c34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8012c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	f000 81e6 	beq.w	801300a <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c42:	4a12      	ldr	r2, [pc, #72]	; (8012c8c <UART_SetConfig+0x910>)
 8012c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012c48:	461a      	mov	r2, r3
 8012c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012c50:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	685a      	ldr	r2, [r3, #4]
 8012c56:	4613      	mov	r3, r2
 8012c58:	005b      	lsls	r3, r3, #1
 8012c5a:	4413      	add	r3, r2
 8012c5c:	6a3a      	ldr	r2, [r7, #32]
 8012c5e:	429a      	cmp	r2, r3
 8012c60:	d305      	bcc.n	8012c6e <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	685b      	ldr	r3, [r3, #4]
 8012c66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012c68:	6a3a      	ldr	r2, [r7, #32]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d910      	bls.n	8012c90 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8012c6e:	2301      	movs	r3, #1
 8012c70:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012c74:	e1c9      	b.n	801300a <UART_SetConfig+0xc8e>
 8012c76:	bf00      	nop
 8012c78:	40011c00 	.word	0x40011c00
 8012c7c:	58024400 	.word	0x58024400
 8012c80:	58000c00 	.word	0x58000c00
 8012c84:	03d09000 	.word	0x03d09000
 8012c88:	003d0900 	.word	0x003d0900
 8012c8c:	08015270 	.word	0x08015270
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c92:	4618      	mov	r0, r3
 8012c94:	f04f 0100 	mov.w	r1, #0
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c9c:	4ac1      	ldr	r2, [pc, #772]	; (8012fa4 <UART_SetConfig+0xc28>)
 8012c9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012ca2:	b29a      	uxth	r2, r3
 8012ca4:	f04f 0300 	mov.w	r3, #0
 8012ca8:	f7ed fb32 	bl	8000310 <__aeabi_uldivmod>
 8012cac:	4602      	mov	r2, r0
 8012cae:	460b      	mov	r3, r1
 8012cb0:	4610      	mov	r0, r2
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	f04f 0200 	mov.w	r2, #0
 8012cb8:	f04f 0300 	mov.w	r3, #0
 8012cbc:	020b      	lsls	r3, r1, #8
 8012cbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012cc2:	0202      	lsls	r2, r0, #8
 8012cc4:	6879      	ldr	r1, [r7, #4]
 8012cc6:	6849      	ldr	r1, [r1, #4]
 8012cc8:	0849      	lsrs	r1, r1, #1
 8012cca:	4608      	mov	r0, r1
 8012ccc:	f04f 0100 	mov.w	r1, #0
 8012cd0:	1814      	adds	r4, r2, r0
 8012cd2:	eb43 0501 	adc.w	r5, r3, r1
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	685b      	ldr	r3, [r3, #4]
 8012cda:	461a      	mov	r2, r3
 8012cdc:	f04f 0300 	mov.w	r3, #0
 8012ce0:	4620      	mov	r0, r4
 8012ce2:	4629      	mov	r1, r5
 8012ce4:	f7ed fb14 	bl	8000310 <__aeabi_uldivmod>
 8012ce8:	4602      	mov	r2, r0
 8012cea:	460b      	mov	r3, r1
 8012cec:	4613      	mov	r3, r2
 8012cee:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012cf6:	d308      	bcc.n	8012d0a <UART_SetConfig+0x98e>
 8012cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012cfe:	d204      	bcs.n	8012d0a <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	681b      	ldr	r3, [r3, #0]
 8012d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d06:	60da      	str	r2, [r3, #12]
 8012d08:	e17f      	b.n	801300a <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012d10:	e17b      	b.n	801300a <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	69db      	ldr	r3, [r3, #28]
 8012d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012d1a:	f040 80bd 	bne.w	8012e98 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8012d1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012d22:	2b20      	cmp	r3, #32
 8012d24:	dc48      	bgt.n	8012db8 <UART_SetConfig+0xa3c>
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	db7b      	blt.n	8012e22 <UART_SetConfig+0xaa6>
 8012d2a:	2b20      	cmp	r3, #32
 8012d2c:	d879      	bhi.n	8012e22 <UART_SetConfig+0xaa6>
 8012d2e:	a201      	add	r2, pc, #4	; (adr r2, 8012d34 <UART_SetConfig+0x9b8>)
 8012d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d34:	08012dbf 	.word	0x08012dbf
 8012d38:	08012dc7 	.word	0x08012dc7
 8012d3c:	08012e23 	.word	0x08012e23
 8012d40:	08012e23 	.word	0x08012e23
 8012d44:	08012dcf 	.word	0x08012dcf
 8012d48:	08012e23 	.word	0x08012e23
 8012d4c:	08012e23 	.word	0x08012e23
 8012d50:	08012e23 	.word	0x08012e23
 8012d54:	08012ddf 	.word	0x08012ddf
 8012d58:	08012e23 	.word	0x08012e23
 8012d5c:	08012e23 	.word	0x08012e23
 8012d60:	08012e23 	.word	0x08012e23
 8012d64:	08012e23 	.word	0x08012e23
 8012d68:	08012e23 	.word	0x08012e23
 8012d6c:	08012e23 	.word	0x08012e23
 8012d70:	08012e23 	.word	0x08012e23
 8012d74:	08012def 	.word	0x08012def
 8012d78:	08012e23 	.word	0x08012e23
 8012d7c:	08012e23 	.word	0x08012e23
 8012d80:	08012e23 	.word	0x08012e23
 8012d84:	08012e23 	.word	0x08012e23
 8012d88:	08012e23 	.word	0x08012e23
 8012d8c:	08012e23 	.word	0x08012e23
 8012d90:	08012e23 	.word	0x08012e23
 8012d94:	08012e23 	.word	0x08012e23
 8012d98:	08012e23 	.word	0x08012e23
 8012d9c:	08012e23 	.word	0x08012e23
 8012da0:	08012e23 	.word	0x08012e23
 8012da4:	08012e23 	.word	0x08012e23
 8012da8:	08012e23 	.word	0x08012e23
 8012dac:	08012e23 	.word	0x08012e23
 8012db0:	08012e23 	.word	0x08012e23
 8012db4:	08012e15 	.word	0x08012e15
 8012db8:	2b40      	cmp	r3, #64	; 0x40
 8012dba:	d02e      	beq.n	8012e1a <UART_SetConfig+0xa9e>
 8012dbc:	e031      	b.n	8012e22 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012dbe:	f7f9 ff81 	bl	800ccc4 <HAL_RCC_GetPCLK1Freq>
 8012dc2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012dc4:	e033      	b.n	8012e2e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012dc6:	f7f9 ff93 	bl	800ccf0 <HAL_RCC_GetPCLK2Freq>
 8012dca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012dcc:	e02f      	b.n	8012e2e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012dce:	f107 0314 	add.w	r3, r7, #20
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7fb fad6 	bl	800e384 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012dd8:	69bb      	ldr	r3, [r7, #24]
 8012dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012ddc:	e027      	b.n	8012e2e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012dde:	f107 0308 	add.w	r3, r7, #8
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7fb fc22 	bl	800e62c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012dec:	e01f      	b.n	8012e2e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012dee:	4b6e      	ldr	r3, [pc, #440]	; (8012fa8 <UART_SetConfig+0xc2c>)
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	f003 0320 	and.w	r3, r3, #32
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d009      	beq.n	8012e0e <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012dfa:	4b6b      	ldr	r3, [pc, #428]	; (8012fa8 <UART_SetConfig+0xc2c>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	08db      	lsrs	r3, r3, #3
 8012e00:	f003 0303 	and.w	r3, r3, #3
 8012e04:	4a69      	ldr	r2, [pc, #420]	; (8012fac <UART_SetConfig+0xc30>)
 8012e06:	fa22 f303 	lsr.w	r3, r2, r3
 8012e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012e0c:	e00f      	b.n	8012e2e <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8012e0e:	4b67      	ldr	r3, [pc, #412]	; (8012fac <UART_SetConfig+0xc30>)
 8012e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012e12:	e00c      	b.n	8012e2e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012e14:	4b66      	ldr	r3, [pc, #408]	; (8012fb0 <UART_SetConfig+0xc34>)
 8012e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012e18:	e009      	b.n	8012e2e <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012e1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012e20:	e005      	b.n	8012e2e <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8012e22:	2300      	movs	r3, #0
 8012e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012e26:	2301      	movs	r3, #1
 8012e28:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8012e2c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	f000 80ea 	beq.w	801300a <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e3a:	4a5a      	ldr	r2, [pc, #360]	; (8012fa4 <UART_SetConfig+0xc28>)
 8012e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012e40:	461a      	mov	r2, r3
 8012e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e44:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e48:	005a      	lsls	r2, r3, #1
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	085b      	lsrs	r3, r3, #1
 8012e50:	441a      	add	r2, r3
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5e:	2b0f      	cmp	r3, #15
 8012e60:	d916      	bls.n	8012e90 <UART_SetConfig+0xb14>
 8012e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e68:	d212      	bcs.n	8012e90 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6c:	b29b      	uxth	r3, r3
 8012e6e:	f023 030f 	bic.w	r3, r3, #15
 8012e72:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e76:	085b      	lsrs	r3, r3, #1
 8012e78:	b29b      	uxth	r3, r3
 8012e7a:	f003 0307 	and.w	r3, r3, #7
 8012e7e:	b29a      	uxth	r2, r3
 8012e80:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012e82:	4313      	orrs	r3, r2
 8012e84:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8012e8c:	60da      	str	r2, [r3, #12]
 8012e8e:	e0bc      	b.n	801300a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8012e90:	2301      	movs	r3, #1
 8012e92:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8012e96:	e0b8      	b.n	801300a <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012e98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e9c:	2b20      	cmp	r3, #32
 8012e9e:	dc4b      	bgt.n	8012f38 <UART_SetConfig+0xbbc>
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	f2c0 8087 	blt.w	8012fb4 <UART_SetConfig+0xc38>
 8012ea6:	2b20      	cmp	r3, #32
 8012ea8:	f200 8084 	bhi.w	8012fb4 <UART_SetConfig+0xc38>
 8012eac:	a201      	add	r2, pc, #4	; (adr r2, 8012eb4 <UART_SetConfig+0xb38>)
 8012eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eb2:	bf00      	nop
 8012eb4:	08012f3f 	.word	0x08012f3f
 8012eb8:	08012f47 	.word	0x08012f47
 8012ebc:	08012fb5 	.word	0x08012fb5
 8012ec0:	08012fb5 	.word	0x08012fb5
 8012ec4:	08012f4f 	.word	0x08012f4f
 8012ec8:	08012fb5 	.word	0x08012fb5
 8012ecc:	08012fb5 	.word	0x08012fb5
 8012ed0:	08012fb5 	.word	0x08012fb5
 8012ed4:	08012f5f 	.word	0x08012f5f
 8012ed8:	08012fb5 	.word	0x08012fb5
 8012edc:	08012fb5 	.word	0x08012fb5
 8012ee0:	08012fb5 	.word	0x08012fb5
 8012ee4:	08012fb5 	.word	0x08012fb5
 8012ee8:	08012fb5 	.word	0x08012fb5
 8012eec:	08012fb5 	.word	0x08012fb5
 8012ef0:	08012fb5 	.word	0x08012fb5
 8012ef4:	08012f6f 	.word	0x08012f6f
 8012ef8:	08012fb5 	.word	0x08012fb5
 8012efc:	08012fb5 	.word	0x08012fb5
 8012f00:	08012fb5 	.word	0x08012fb5
 8012f04:	08012fb5 	.word	0x08012fb5
 8012f08:	08012fb5 	.word	0x08012fb5
 8012f0c:	08012fb5 	.word	0x08012fb5
 8012f10:	08012fb5 	.word	0x08012fb5
 8012f14:	08012fb5 	.word	0x08012fb5
 8012f18:	08012fb5 	.word	0x08012fb5
 8012f1c:	08012fb5 	.word	0x08012fb5
 8012f20:	08012fb5 	.word	0x08012fb5
 8012f24:	08012fb5 	.word	0x08012fb5
 8012f28:	08012fb5 	.word	0x08012fb5
 8012f2c:	08012fb5 	.word	0x08012fb5
 8012f30:	08012fb5 	.word	0x08012fb5
 8012f34:	08012f95 	.word	0x08012f95
 8012f38:	2b40      	cmp	r3, #64	; 0x40
 8012f3a:	d02e      	beq.n	8012f9a <UART_SetConfig+0xc1e>
 8012f3c:	e03a      	b.n	8012fb4 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012f3e:	f7f9 fec1 	bl	800ccc4 <HAL_RCC_GetPCLK1Freq>
 8012f42:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012f44:	e03c      	b.n	8012fc0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012f46:	f7f9 fed3 	bl	800ccf0 <HAL_RCC_GetPCLK2Freq>
 8012f4a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8012f4c:	e038      	b.n	8012fc0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012f4e:	f107 0314 	add.w	r3, r7, #20
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fb fa16 	bl	800e384 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012f5c:	e030      	b.n	8012fc0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012f5e:	f107 0308 	add.w	r3, r7, #8
 8012f62:	4618      	mov	r0, r3
 8012f64:	f7fb fb62 	bl	800e62c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012f6c:	e028      	b.n	8012fc0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012f6e:	4b0e      	ldr	r3, [pc, #56]	; (8012fa8 <UART_SetConfig+0xc2c>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	f003 0320 	and.w	r3, r3, #32
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d009      	beq.n	8012f8e <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8012f7a:	4b0b      	ldr	r3, [pc, #44]	; (8012fa8 <UART_SetConfig+0xc2c>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	08db      	lsrs	r3, r3, #3
 8012f80:	f003 0303 	and.w	r3, r3, #3
 8012f84:	4a09      	ldr	r2, [pc, #36]	; (8012fac <UART_SetConfig+0xc30>)
 8012f86:	fa22 f303 	lsr.w	r3, r2, r3
 8012f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012f8c:	e018      	b.n	8012fc0 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 8012f8e:	4b07      	ldr	r3, [pc, #28]	; (8012fac <UART_SetConfig+0xc30>)
 8012f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012f92:	e015      	b.n	8012fc0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8012f94:	4b06      	ldr	r3, [pc, #24]	; (8012fb0 <UART_SetConfig+0xc34>)
 8012f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012f98:	e012      	b.n	8012fc0 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8012fa0:	e00e      	b.n	8012fc0 <UART_SetConfig+0xc44>
 8012fa2:	bf00      	nop
 8012fa4:	08015270 	.word	0x08015270
 8012fa8:	58024400 	.word	0x58024400
 8012fac:	03d09000 	.word	0x03d09000
 8012fb0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8012fb8:	2301      	movs	r3, #1
 8012fba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8012fbe:	bf00      	nop
    }

    if (pclk != 0U)
 8012fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d021      	beq.n	801300a <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fca:	4a1a      	ldr	r2, [pc, #104]	; (8013034 <UART_SetConfig+0xcb8>)
 8012fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012fd0:	461a      	mov	r2, r3
 8012fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd4:	fbb3 f2f2 	udiv	r2, r3, r2
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	685b      	ldr	r3, [r3, #4]
 8012fdc:	085b      	lsrs	r3, r3, #1
 8012fde:	441a      	add	r2, r3
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	685b      	ldr	r3, [r3, #4]
 8012fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8012fe8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fec:	2b0f      	cmp	r3, #15
 8012fee:	d909      	bls.n	8013004 <UART_SetConfig+0xc88>
 8012ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ff6:	d205      	bcs.n	8013004 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffa:	b29a      	uxth	r2, r3
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	60da      	str	r2, [r3, #12]
 8013002:	e002      	b.n	801300a <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8013004:	2301      	movs	r3, #1
 8013006:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2201      	movs	r2, #1
 801300e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2201      	movs	r2, #1
 8013016:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2200      	movs	r2, #0
 801301e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	2200      	movs	r2, #0
 8013024:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8013026:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801302a:	4618      	mov	r0, r3
 801302c:	3738      	adds	r7, #56	; 0x38
 801302e:	46bd      	mov	sp, r7
 8013030:	bdb0      	pop	{r4, r5, r7, pc}
 8013032:	bf00      	nop
 8013034:	08015270 	.word	0x08015270

08013038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8013038:	b480      	push	{r7}
 801303a:	b083      	sub	sp, #12
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013044:	f003 0301 	and.w	r3, r3, #1
 8013048:	2b00      	cmp	r3, #0
 801304a:	d00a      	beq.n	8013062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	685b      	ldr	r3, [r3, #4]
 8013052:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	430a      	orrs	r2, r1
 8013060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013066:	f003 0302 	and.w	r3, r3, #2
 801306a:	2b00      	cmp	r3, #0
 801306c:	d00a      	beq.n	8013084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	685b      	ldr	r3, [r3, #4]
 8013074:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	430a      	orrs	r2, r1
 8013082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013088:	f003 0304 	and.w	r3, r3, #4
 801308c:	2b00      	cmp	r3, #0
 801308e:	d00a      	beq.n	80130a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	681b      	ldr	r3, [r3, #0]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	430a      	orrs	r2, r1
 80130a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80130a6:	687b      	ldr	r3, [r7, #4]
 80130a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130aa:	f003 0308 	and.w	r3, r3, #8
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d00a      	beq.n	80130c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	430a      	orrs	r2, r1
 80130c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130cc:	f003 0310 	and.w	r3, r3, #16
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d00a      	beq.n	80130ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	689b      	ldr	r3, [r3, #8]
 80130da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	430a      	orrs	r2, r1
 80130e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130ee:	f003 0320 	and.w	r3, r3, #32
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d00a      	beq.n	801310c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	689b      	ldr	r3, [r3, #8]
 80130fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	430a      	orrs	r2, r1
 801310a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013114:	2b00      	cmp	r3, #0
 8013116:	d01a      	beq.n	801314e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	685b      	ldr	r3, [r3, #4]
 801311e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	430a      	orrs	r2, r1
 801312c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013136:	d10a      	bne.n	801314e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	685b      	ldr	r3, [r3, #4]
 801313e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	430a      	orrs	r2, r1
 801314c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013156:	2b00      	cmp	r3, #0
 8013158:	d00a      	beq.n	8013170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	685b      	ldr	r3, [r3, #4]
 8013160:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	430a      	orrs	r2, r1
 801316e:	605a      	str	r2, [r3, #4]
  }
}
 8013170:	bf00      	nop
 8013172:	370c      	adds	r7, #12
 8013174:	46bd      	mov	sp, r7
 8013176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317a:	4770      	bx	lr

0801317c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b086      	sub	sp, #24
 8013180:	af02      	add	r7, sp, #8
 8013182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2200      	movs	r2, #0
 8013188:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801318c:	f7f1 ff1a 	bl	8004fc4 <HAL_GetTick>
 8013190:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	f003 0308 	and.w	r3, r3, #8
 801319c:	2b08      	cmp	r3, #8
 801319e:	d10e      	bne.n	80131be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80131a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80131a4:	9300      	str	r3, [sp, #0]
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	2200      	movs	r2, #0
 80131aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80131ae:	6878      	ldr	r0, [r7, #4]
 80131b0:	f000 f82f 	bl	8013212 <UART_WaitOnFlagUntilTimeout>
 80131b4:	4603      	mov	r3, r0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d001      	beq.n	80131be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80131ba:	2303      	movs	r3, #3
 80131bc:	e025      	b.n	801320a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	f003 0304 	and.w	r3, r3, #4
 80131c8:	2b04      	cmp	r3, #4
 80131ca:	d10e      	bne.n	80131ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80131cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80131d0:	9300      	str	r3, [sp, #0]
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2200      	movs	r2, #0
 80131d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f000 f819 	bl	8013212 <UART_WaitOnFlagUntilTimeout>
 80131e0:	4603      	mov	r3, r0
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d001      	beq.n	80131ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80131e6:	2303      	movs	r3, #3
 80131e8:	e00f      	b.n	801320a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	2220      	movs	r2, #32
 80131ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2220      	movs	r2, #32
 80131f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2200      	movs	r2, #0
 80131fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	2200      	movs	r2, #0
 8013204:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013208:	2300      	movs	r3, #0
}
 801320a:	4618      	mov	r0, r3
 801320c:	3710      	adds	r7, #16
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}

08013212 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013212:	b580      	push	{r7, lr}
 8013214:	b09c      	sub	sp, #112	; 0x70
 8013216:	af00      	add	r7, sp, #0
 8013218:	60f8      	str	r0, [r7, #12]
 801321a:	60b9      	str	r1, [r7, #8]
 801321c:	603b      	str	r3, [r7, #0]
 801321e:	4613      	mov	r3, r2
 8013220:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013222:	e0a9      	b.n	8013378 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013224:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801322a:	f000 80a5 	beq.w	8013378 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801322e:	f7f1 fec9 	bl	8004fc4 <HAL_GetTick>
 8013232:	4602      	mov	r2, r0
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	1ad3      	subs	r3, r2, r3
 8013238:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801323a:	429a      	cmp	r2, r3
 801323c:	d302      	bcc.n	8013244 <UART_WaitOnFlagUntilTimeout+0x32>
 801323e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013240:	2b00      	cmp	r3, #0
 8013242:	d140      	bne.n	80132c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801324a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801324c:	e853 3f00 	ldrex	r3, [r3]
 8013250:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013254:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013258:	667b      	str	r3, [r7, #100]	; 0x64
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	461a      	mov	r2, r3
 8013260:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013262:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013264:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013266:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013268:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801326a:	e841 2300 	strex	r3, r2, [r1]
 801326e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013270:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013272:	2b00      	cmp	r3, #0
 8013274:	d1e6      	bne.n	8013244 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	3308      	adds	r3, #8
 801327c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801327e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013280:	e853 3f00 	ldrex	r3, [r3]
 8013284:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013288:	f023 0301 	bic.w	r3, r3, #1
 801328c:	663b      	str	r3, [r7, #96]	; 0x60
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	3308      	adds	r3, #8
 8013294:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013296:	64ba      	str	r2, [r7, #72]	; 0x48
 8013298:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801329a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801329c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801329e:	e841 2300 	strex	r3, r2, [r1]
 80132a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80132a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d1e5      	bne.n	8013276 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	2220      	movs	r2, #32
 80132ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80132b2:	68fb      	ldr	r3, [r7, #12]
 80132b4:	2220      	movs	r2, #32
 80132b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80132ba:	68fb      	ldr	r3, [r7, #12]
 80132bc:	2200      	movs	r2, #0
 80132be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80132c2:	2303      	movs	r3, #3
 80132c4:	e069      	b.n	801339a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	f003 0304 	and.w	r3, r3, #4
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d051      	beq.n	8013378 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	69db      	ldr	r3, [r3, #28]
 80132da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80132de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80132e2:	d149      	bne.n	8013378 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80132ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80132f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f6:	e853 3f00 	ldrex	r3, [r3]
 80132fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80132fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8013302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	461a      	mov	r2, r3
 801330a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801330c:	637b      	str	r3, [r7, #52]	; 0x34
 801330e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013314:	e841 2300 	strex	r3, r2, [r1]
 8013318:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801331a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331c:	2b00      	cmp	r3, #0
 801331e:	d1e6      	bne.n	80132ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	3308      	adds	r3, #8
 8013326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013328:	697b      	ldr	r3, [r7, #20]
 801332a:	e853 3f00 	ldrex	r3, [r3]
 801332e:	613b      	str	r3, [r7, #16]
   return(result);
 8013330:	693b      	ldr	r3, [r7, #16]
 8013332:	f023 0301 	bic.w	r3, r3, #1
 8013336:	66bb      	str	r3, [r7, #104]	; 0x68
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	3308      	adds	r3, #8
 801333e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013340:	623a      	str	r2, [r7, #32]
 8013342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013344:	69f9      	ldr	r1, [r7, #28]
 8013346:	6a3a      	ldr	r2, [r7, #32]
 8013348:	e841 2300 	strex	r3, r2, [r1]
 801334c:	61bb      	str	r3, [r7, #24]
   return(result);
 801334e:	69bb      	ldr	r3, [r7, #24]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d1e5      	bne.n	8013320 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	2220      	movs	r2, #32
 8013358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	2220      	movs	r2, #32
 8013360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	2220      	movs	r2, #32
 8013368:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2200      	movs	r2, #0
 8013370:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8013374:	2303      	movs	r3, #3
 8013376:	e010      	b.n	801339a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	69da      	ldr	r2, [r3, #28]
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	4013      	ands	r3, r2
 8013382:	68ba      	ldr	r2, [r7, #8]
 8013384:	429a      	cmp	r2, r3
 8013386:	bf0c      	ite	eq
 8013388:	2301      	moveq	r3, #1
 801338a:	2300      	movne	r3, #0
 801338c:	b2db      	uxtb	r3, r3
 801338e:	461a      	mov	r2, r3
 8013390:	79fb      	ldrb	r3, [r7, #7]
 8013392:	429a      	cmp	r2, r3
 8013394:	f43f af46 	beq.w	8013224 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013398:	2300      	movs	r3, #0
}
 801339a:	4618      	mov	r0, r3
 801339c:	3770      	adds	r7, #112	; 0x70
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
	...

080133a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80133a4:	b480      	push	{r7}
 80133a6:	b0a3      	sub	sp, #140	; 0x8c
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	4613      	mov	r3, r2
 80133b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	68ba      	ldr	r2, [r7, #8]
 80133b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	88fa      	ldrh	r2, [r7, #6]
 80133bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	88fa      	ldrh	r2, [r7, #6]
 80133c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	2200      	movs	r2, #0
 80133cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	689b      	ldr	r3, [r3, #8]
 80133d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80133d6:	d10e      	bne.n	80133f6 <UART_Start_Receive_IT+0x52>
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	691b      	ldr	r3, [r3, #16]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d105      	bne.n	80133ec <UART_Start_Receive_IT+0x48>
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80133e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80133ea:	e02d      	b.n	8013448 <UART_Start_Receive_IT+0xa4>
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	22ff      	movs	r2, #255	; 0xff
 80133f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80133f4:	e028      	b.n	8013448 <UART_Start_Receive_IT+0xa4>
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	689b      	ldr	r3, [r3, #8]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d10d      	bne.n	801341a <UART_Start_Receive_IT+0x76>
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	691b      	ldr	r3, [r3, #16]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d104      	bne.n	8013410 <UART_Start_Receive_IT+0x6c>
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	22ff      	movs	r2, #255	; 0xff
 801340a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801340e:	e01b      	b.n	8013448 <UART_Start_Receive_IT+0xa4>
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	227f      	movs	r2, #127	; 0x7f
 8013414:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013418:	e016      	b.n	8013448 <UART_Start_Receive_IT+0xa4>
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	689b      	ldr	r3, [r3, #8]
 801341e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013422:	d10d      	bne.n	8013440 <UART_Start_Receive_IT+0x9c>
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	691b      	ldr	r3, [r3, #16]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d104      	bne.n	8013436 <UART_Start_Receive_IT+0x92>
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	227f      	movs	r2, #127	; 0x7f
 8013430:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8013434:	e008      	b.n	8013448 <UART_Start_Receive_IT+0xa4>
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	223f      	movs	r2, #63	; 0x3f
 801343a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801343e:	e003      	b.n	8013448 <UART_Start_Receive_IT+0xa4>
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	2200      	movs	r2, #0
 8013444:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	2200      	movs	r2, #0
 801344c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	2222      	movs	r2, #34	; 0x22
 8013454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	3308      	adds	r3, #8
 801345e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013462:	e853 3f00 	ldrex	r3, [r3]
 8013466:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801346a:	f043 0301 	orr.w	r3, r3, #1
 801346e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	3308      	adds	r3, #8
 8013478:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801347c:	673a      	str	r2, [r7, #112]	; 0x70
 801347e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013480:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8013482:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013484:	e841 2300 	strex	r3, r2, [r1]
 8013488:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801348a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801348c:	2b00      	cmp	r3, #0
 801348e:	d1e3      	bne.n	8013458 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8013498:	d153      	bne.n	8013542 <UART_Start_Receive_IT+0x19e>
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80134a0:	88fa      	ldrh	r2, [r7, #6]
 80134a2:	429a      	cmp	r2, r3
 80134a4:	d34d      	bcc.n	8013542 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	689b      	ldr	r3, [r3, #8]
 80134aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80134ae:	d107      	bne.n	80134c0 <UART_Start_Receive_IT+0x11c>
 80134b0:	68fb      	ldr	r3, [r7, #12]
 80134b2:	691b      	ldr	r3, [r3, #16]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d103      	bne.n	80134c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	4a4b      	ldr	r2, [pc, #300]	; (80135e8 <UART_Start_Receive_IT+0x244>)
 80134bc:	671a      	str	r2, [r3, #112]	; 0x70
 80134be:	e002      	b.n	80134c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	4a4a      	ldr	r2, [pc, #296]	; (80135ec <UART_Start_Receive_IT+0x248>)
 80134c4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2200      	movs	r2, #0
 80134ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	691b      	ldr	r3, [r3, #16]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d01a      	beq.n	801350c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80134dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134de:	e853 3f00 	ldrex	r3, [r3]
 80134e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80134e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80134ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	461a      	mov	r2, r3
 80134f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80134f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80134fa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80134fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80134fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013500:	e841 2300 	strex	r3, r2, [r1]
 8013504:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8013506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013508:	2b00      	cmp	r3, #0
 801350a:	d1e4      	bne.n	80134d6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	3308      	adds	r3, #8
 8013512:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013516:	e853 3f00 	ldrex	r3, [r3]
 801351a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013522:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	3308      	adds	r3, #8
 801352a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801352c:	64ba      	str	r2, [r7, #72]	; 0x48
 801352e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013530:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013532:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013534:	e841 2300 	strex	r3, r2, [r1]
 8013538:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801353a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801353c:	2b00      	cmp	r3, #0
 801353e:	d1e5      	bne.n	801350c <UART_Start_Receive_IT+0x168>
 8013540:	e04a      	b.n	80135d8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	689b      	ldr	r3, [r3, #8]
 8013546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801354a:	d107      	bne.n	801355c <UART_Start_Receive_IT+0x1b8>
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	691b      	ldr	r3, [r3, #16]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d103      	bne.n	801355c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	4a26      	ldr	r2, [pc, #152]	; (80135f0 <UART_Start_Receive_IT+0x24c>)
 8013558:	671a      	str	r2, [r3, #112]	; 0x70
 801355a:	e002      	b.n	8013562 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	4a25      	ldr	r2, [pc, #148]	; (80135f4 <UART_Start_Receive_IT+0x250>)
 8013560:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	2200      	movs	r2, #0
 8013566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	691b      	ldr	r3, [r3, #16]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d019      	beq.n	80135a6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801357a:	e853 3f00 	ldrex	r3, [r3]
 801357e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013582:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8013586:	677b      	str	r3, [r7, #116]	; 0x74
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	461a      	mov	r2, r3
 801358e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013590:	637b      	str	r3, [r7, #52]	; 0x34
 8013592:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013594:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013596:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013598:	e841 2300 	strex	r3, r2, [r1]
 801359c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801359e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d1e6      	bne.n	8013572 <UART_Start_Receive_IT+0x1ce>
 80135a4:	e018      	b.n	80135d8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80135ac:	697b      	ldr	r3, [r7, #20]
 80135ae:	e853 3f00 	ldrex	r3, [r3]
 80135b2:	613b      	str	r3, [r7, #16]
   return(result);
 80135b4:	693b      	ldr	r3, [r7, #16]
 80135b6:	f043 0320 	orr.w	r3, r3, #32
 80135ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	461a      	mov	r2, r3
 80135c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80135c4:	623b      	str	r3, [r7, #32]
 80135c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80135c8:	69f9      	ldr	r1, [r7, #28]
 80135ca:	6a3a      	ldr	r2, [r7, #32]
 80135cc:	e841 2300 	strex	r3, r2, [r1]
 80135d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80135d2:	69bb      	ldr	r3, [r7, #24]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d1e6      	bne.n	80135a6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80135d8:	2300      	movs	r3, #0
}
 80135da:	4618      	mov	r0, r3
 80135dc:	378c      	adds	r7, #140	; 0x8c
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr
 80135e6:	bf00      	nop
 80135e8:	08014045 	.word	0x08014045
 80135ec:	08013d4d 	.word	0x08013d4d
 80135f0:	08013beb 	.word	0x08013beb
 80135f4:	08013a8b 	.word	0x08013a8b

080135f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80135f8:	b480      	push	{r7}
 80135fa:	b095      	sub	sp, #84	; 0x54
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013608:	e853 3f00 	ldrex	r3, [r3]
 801360c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801360e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013610:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013614:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	461a      	mov	r2, r3
 801361c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801361e:	643b      	str	r3, [r7, #64]	; 0x40
 8013620:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013622:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013624:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013626:	e841 2300 	strex	r3, r2, [r1]
 801362a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801362c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801362e:	2b00      	cmp	r3, #0
 8013630:	d1e6      	bne.n	8013600 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	3308      	adds	r3, #8
 8013638:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801363a:	6a3b      	ldr	r3, [r7, #32]
 801363c:	e853 3f00 	ldrex	r3, [r3]
 8013640:	61fb      	str	r3, [r7, #28]
   return(result);
 8013642:	69fa      	ldr	r2, [r7, #28]
 8013644:	4b1e      	ldr	r3, [pc, #120]	; (80136c0 <UART_EndRxTransfer+0xc8>)
 8013646:	4013      	ands	r3, r2
 8013648:	64bb      	str	r3, [r7, #72]	; 0x48
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	3308      	adds	r3, #8
 8013650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013652:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013654:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801365a:	e841 2300 	strex	r3, r2, [r1]
 801365e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013662:	2b00      	cmp	r3, #0
 8013664:	d1e5      	bne.n	8013632 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801366a:	2b01      	cmp	r3, #1
 801366c:	d118      	bne.n	80136a0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	e853 3f00 	ldrex	r3, [r3]
 801367a:	60bb      	str	r3, [r7, #8]
   return(result);
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	f023 0310 	bic.w	r3, r3, #16
 8013682:	647b      	str	r3, [r7, #68]	; 0x44
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	461a      	mov	r2, r3
 801368a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801368c:	61bb      	str	r3, [r7, #24]
 801368e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013690:	6979      	ldr	r1, [r7, #20]
 8013692:	69ba      	ldr	r2, [r7, #24]
 8013694:	e841 2300 	strex	r3, r2, [r1]
 8013698:	613b      	str	r3, [r7, #16]
   return(result);
 801369a:	693b      	ldr	r3, [r7, #16]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d1e6      	bne.n	801366e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2220      	movs	r2, #32
 80136a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	2200      	movs	r2, #0
 80136ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2200      	movs	r2, #0
 80136b2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80136b4:	bf00      	nop
 80136b6:	3754      	adds	r7, #84	; 0x54
 80136b8:	46bd      	mov	sp, r7
 80136ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136be:	4770      	bx	lr
 80136c0:	effffffe 	.word	0xeffffffe

080136c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b084      	sub	sp, #16
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	2200      	movs	r2, #0
 80136d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	2200      	movs	r2, #0
 80136de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80136e2:	68f8      	ldr	r0, [r7, #12]
 80136e4:	f7fe fe34 	bl	8012350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80136e8:	bf00      	nop
 80136ea:	3710      	adds	r7, #16
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}

080136f0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80136f0:	b480      	push	{r7}
 80136f2:	b08f      	sub	sp, #60	; 0x3c
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80136fe:	2b21      	cmp	r3, #33	; 0x21
 8013700:	d14c      	bne.n	801379c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013708:	b29b      	uxth	r3, r3
 801370a:	2b00      	cmp	r3, #0
 801370c:	d132      	bne.n	8013774 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013714:	6a3b      	ldr	r3, [r7, #32]
 8013716:	e853 3f00 	ldrex	r3, [r3]
 801371a:	61fb      	str	r3, [r7, #28]
   return(result);
 801371c:	69fb      	ldr	r3, [r7, #28]
 801371e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013722:	637b      	str	r3, [r7, #52]	; 0x34
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	461a      	mov	r2, r3
 801372a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801372c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801372e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013730:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013732:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013734:	e841 2300 	strex	r3, r2, [r1]
 8013738:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801373c:	2b00      	cmp	r3, #0
 801373e:	d1e6      	bne.n	801370e <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	e853 3f00 	ldrex	r3, [r3]
 801374c:	60bb      	str	r3, [r7, #8]
   return(result);
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013754:	633b      	str	r3, [r7, #48]	; 0x30
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	461a      	mov	r2, r3
 801375c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801375e:	61bb      	str	r3, [r7, #24]
 8013760:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013762:	6979      	ldr	r1, [r7, #20]
 8013764:	69ba      	ldr	r2, [r7, #24]
 8013766:	e841 2300 	strex	r3, r2, [r1]
 801376a:	613b      	str	r3, [r7, #16]
   return(result);
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d1e6      	bne.n	8013740 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8013772:	e013      	b.n	801379c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013778:	781a      	ldrb	r2, [r3, #0]
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013784:	1c5a      	adds	r2, r3, #1
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013790:	b29b      	uxth	r3, r3
 8013792:	3b01      	subs	r3, #1
 8013794:	b29a      	uxth	r2, r3
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 801379c:	bf00      	nop
 801379e:	373c      	adds	r7, #60	; 0x3c
 80137a0:	46bd      	mov	sp, r7
 80137a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a6:	4770      	bx	lr

080137a8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80137a8:	b480      	push	{r7}
 80137aa:	b091      	sub	sp, #68	; 0x44
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80137b6:	2b21      	cmp	r3, #33	; 0x21
 80137b8:	d151      	bne.n	801385e <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d132      	bne.n	801382c <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ce:	e853 3f00 	ldrex	r3, [r3]
 80137d2:	623b      	str	r3, [r7, #32]
   return(result);
 80137d4:	6a3b      	ldr	r3, [r7, #32]
 80137d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80137da:	63bb      	str	r3, [r7, #56]	; 0x38
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	461a      	mov	r2, r3
 80137e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e4:	633b      	str	r3, [r7, #48]	; 0x30
 80137e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80137e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137ec:	e841 2300 	strex	r3, r2, [r1]
 80137f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80137f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d1e6      	bne.n	80137c6 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80137fe:	693b      	ldr	r3, [r7, #16]
 8013800:	e853 3f00 	ldrex	r3, [r3]
 8013804:	60fb      	str	r3, [r7, #12]
   return(result);
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801380c:	637b      	str	r3, [r7, #52]	; 0x34
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	461a      	mov	r2, r3
 8013814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013816:	61fb      	str	r3, [r7, #28]
 8013818:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801381a:	69b9      	ldr	r1, [r7, #24]
 801381c:	69fa      	ldr	r2, [r7, #28]
 801381e:	e841 2300 	strex	r3, r2, [r1]
 8013822:	617b      	str	r3, [r7, #20]
   return(result);
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d1e6      	bne.n	80137f8 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801382a:	e018      	b.n	801385e <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013830:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8013832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013834:	881b      	ldrh	r3, [r3, #0]
 8013836:	461a      	mov	r2, r3
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013840:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013846:	1c9a      	adds	r2, r3, #2
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013852:	b29b      	uxth	r3, r3
 8013854:	3b01      	subs	r3, #1
 8013856:	b29a      	uxth	r2, r3
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 801385e:	bf00      	nop
 8013860:	3744      	adds	r7, #68	; 0x44
 8013862:	46bd      	mov	sp, r7
 8013864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013868:	4770      	bx	lr

0801386a <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801386a:	b480      	push	{r7}
 801386c:	b091      	sub	sp, #68	; 0x44
 801386e:	af00      	add	r7, sp, #0
 8013870:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013878:	2b21      	cmp	r3, #33	; 0x21
 801387a:	d160      	bne.n	801393e <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013882:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013884:	e057      	b.n	8013936 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801388c:	b29b      	uxth	r3, r3
 801388e:	2b00      	cmp	r3, #0
 8013890:	d133      	bne.n	80138fa <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	681b      	ldr	r3, [r3, #0]
 8013896:	3308      	adds	r3, #8
 8013898:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389c:	e853 3f00 	ldrex	r3, [r3]
 80138a0:	623b      	str	r3, [r7, #32]
   return(result);
 80138a2:	6a3b      	ldr	r3, [r7, #32]
 80138a4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80138a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	3308      	adds	r3, #8
 80138b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138b2:	633a      	str	r2, [r7, #48]	; 0x30
 80138b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80138b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138ba:	e841 2300 	strex	r3, r2, [r1]
 80138be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80138c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d1e5      	bne.n	8013892 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	e853 3f00 	ldrex	r3, [r3]
 80138d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138da:	637b      	str	r3, [r7, #52]	; 0x34
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	461a      	mov	r2, r3
 80138e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138e4:	61fb      	str	r3, [r7, #28]
 80138e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80138e8:	69b9      	ldr	r1, [r7, #24]
 80138ea:	69fa      	ldr	r2, [r7, #28]
 80138ec:	e841 2300 	strex	r3, r2, [r1]
 80138f0:	617b      	str	r3, [r7, #20]
   return(result);
 80138f2:	697b      	ldr	r3, [r7, #20]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d1e6      	bne.n	80138c6 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80138f8:	e021      	b.n	801393e <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	69db      	ldr	r3, [r3, #28]
 8013900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013904:	2b00      	cmp	r3, #0
 8013906:	d013      	beq.n	8013930 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801390c:	781a      	ldrb	r2, [r3, #0]
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013918:	1c5a      	adds	r2, r3, #1
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013924:	b29b      	uxth	r3, r3
 8013926:	3b01      	subs	r3, #1
 8013928:	b29a      	uxth	r2, r3
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8013930:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013932:	3b01      	subs	r3, #1
 8013934:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013936:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013938:	2b00      	cmp	r3, #0
 801393a:	d1a4      	bne.n	8013886 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801393c:	e7ff      	b.n	801393e <UART_TxISR_8BIT_FIFOEN+0xd4>
 801393e:	bf00      	nop
 8013940:	3744      	adds	r7, #68	; 0x44
 8013942:	46bd      	mov	sp, r7
 8013944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013948:	4770      	bx	lr

0801394a <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801394a:	b480      	push	{r7}
 801394c:	b091      	sub	sp, #68	; 0x44
 801394e:	af00      	add	r7, sp, #0
 8013950:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013958:	2b21      	cmp	r3, #33	; 0x21
 801395a:	d165      	bne.n	8013a28 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013962:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013964:	e05c      	b.n	8013a20 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801396c:	b29b      	uxth	r3, r3
 801396e:	2b00      	cmp	r3, #0
 8013970:	d133      	bne.n	80139da <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	3308      	adds	r3, #8
 8013978:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801397a:	6a3b      	ldr	r3, [r7, #32]
 801397c:	e853 3f00 	ldrex	r3, [r3]
 8013980:	61fb      	str	r3, [r7, #28]
   return(result);
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013988:	637b      	str	r3, [r7, #52]	; 0x34
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	3308      	adds	r3, #8
 8013990:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013994:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013996:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801399a:	e841 2300 	strex	r3, r2, [r1]
 801399e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80139a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d1e5      	bne.n	8013972 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	e853 3f00 	ldrex	r3, [r3]
 80139b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80139b4:	68bb      	ldr	r3, [r7, #8]
 80139b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139ba:	633b      	str	r3, [r7, #48]	; 0x30
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	461a      	mov	r2, r3
 80139c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c4:	61bb      	str	r3, [r7, #24]
 80139c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80139c8:	6979      	ldr	r1, [r7, #20]
 80139ca:	69ba      	ldr	r2, [r7, #24]
 80139cc:	e841 2300 	strex	r3, r2, [r1]
 80139d0:	613b      	str	r3, [r7, #16]
   return(result);
 80139d2:	693b      	ldr	r3, [r7, #16]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d1e6      	bne.n	80139a6 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 80139d8:	e026      	b.n	8013a28 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	69db      	ldr	r3, [r3, #28]
 80139e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d018      	beq.n	8013a1a <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80139ec:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80139ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139f0:	881b      	ldrh	r3, [r3, #0]
 80139f2:	461a      	mov	r2, r3
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80139fc:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013a02:	1c9a      	adds	r2, r3, #2
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013a0e:	b29b      	uxth	r3, r3
 8013a10:	3b01      	subs	r3, #1
 8013a12:	b29a      	uxth	r2, r3
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8013a1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a1c:	3b01      	subs	r3, #1
 8013a1e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013a20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d19f      	bne.n	8013966 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8013a26:	e7ff      	b.n	8013a28 <UART_TxISR_16BIT_FIFOEN+0xde>
 8013a28:	bf00      	nop
 8013a2a:	3744      	adds	r7, #68	; 0x44
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a32:	4770      	bx	lr

08013a34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b088      	sub	sp, #32
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	e853 3f00 	ldrex	r3, [r3]
 8013a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013a50:	61fb      	str	r3, [r7, #28]
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	461a      	mov	r2, r3
 8013a58:	69fb      	ldr	r3, [r7, #28]
 8013a5a:	61bb      	str	r3, [r7, #24]
 8013a5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a5e:	6979      	ldr	r1, [r7, #20]
 8013a60:	69ba      	ldr	r2, [r7, #24]
 8013a62:	e841 2300 	strex	r3, r2, [r1]
 8013a66:	613b      	str	r3, [r7, #16]
   return(result);
 8013a68:	693b      	ldr	r3, [r7, #16]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d1e6      	bne.n	8013a3c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	2220      	movs	r2, #32
 8013a72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2200      	movs	r2, #0
 8013a7a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8013a7c:	6878      	ldr	r0, [r7, #4]
 8013a7e:	f7fe fc5d 	bl	801233c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8013a82:	bf00      	nop
 8013a84:	3720      	adds	r7, #32
 8013a86:	46bd      	mov	sp, r7
 8013a88:	bd80      	pop	{r7, pc}

08013a8a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8013a8a:	b580      	push	{r7, lr}
 8013a8c:	b096      	sub	sp, #88	; 0x58
 8013a8e:	af00      	add	r7, sp, #0
 8013a90:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013a98:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013aa2:	2b22      	cmp	r3, #34	; 0x22
 8013aa4:	f040 8095 	bne.w	8013bd2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013ab2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8013ab6:	b2d9      	uxtb	r1, r3
 8013ab8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013abc:	b2da      	uxtb	r2, r3
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ac2:	400a      	ands	r2, r1
 8013ac4:	b2d2      	uxtb	r2, r2
 8013ac6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013acc:	1c5a      	adds	r2, r3, #1
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013ad8:	b29b      	uxth	r3, r3
 8013ada:	3b01      	subs	r3, #1
 8013adc:	b29a      	uxth	r2, r3
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013aea:	b29b      	uxth	r3, r3
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d178      	bne.n	8013be2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af8:	e853 3f00 	ldrex	r3, [r3]
 8013afc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013b04:	653b      	str	r3, [r7, #80]	; 0x50
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	461a      	mov	r2, r3
 8013b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b0e:	647b      	str	r3, [r7, #68]	; 0x44
 8013b10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013b14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013b16:	e841 2300 	strex	r3, r2, [r1]
 8013b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d1e6      	bne.n	8013af0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	3308      	adds	r3, #8
 8013b28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b2c:	e853 3f00 	ldrex	r3, [r3]
 8013b30:	623b      	str	r3, [r7, #32]
   return(result);
 8013b32:	6a3b      	ldr	r3, [r7, #32]
 8013b34:	f023 0301 	bic.w	r3, r3, #1
 8013b38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	3308      	adds	r3, #8
 8013b40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013b42:	633a      	str	r2, [r7, #48]	; 0x30
 8013b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b4a:	e841 2300 	strex	r3, r2, [r1]
 8013b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d1e5      	bne.n	8013b22 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	2220      	movs	r2, #32
 8013b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	2200      	movs	r2, #0
 8013b62:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b68:	2b01      	cmp	r3, #1
 8013b6a:	d12e      	bne.n	8013bca <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	2200      	movs	r2, #0
 8013b70:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	e853 3f00 	ldrex	r3, [r3]
 8013b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	f023 0310 	bic.w	r3, r3, #16
 8013b86:	64bb      	str	r3, [r7, #72]	; 0x48
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013b90:	61fb      	str	r3, [r7, #28]
 8013b92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b94:	69b9      	ldr	r1, [r7, #24]
 8013b96:	69fa      	ldr	r2, [r7, #28]
 8013b98:	e841 2300 	strex	r3, r2, [r1]
 8013b9c:	617b      	str	r3, [r7, #20]
   return(result);
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d1e6      	bne.n	8013b72 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	69db      	ldr	r3, [r3, #28]
 8013baa:	f003 0310 	and.w	r3, r3, #16
 8013bae:	2b10      	cmp	r3, #16
 8013bb0:	d103      	bne.n	8013bba <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	2210      	movs	r2, #16
 8013bb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013bc0:	4619      	mov	r1, r3
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f7fe fbce 	bl	8012364 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013bc8:	e00b      	b.n	8013be2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8013bca:	6878      	ldr	r0, [r7, #4]
 8013bcc:	f7ee fcd0 	bl	8002570 <HAL_UART_RxCpltCallback>
}
 8013bd0:	e007      	b.n	8013be2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	699a      	ldr	r2, [r3, #24]
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	f042 0208 	orr.w	r2, r2, #8
 8013be0:	619a      	str	r2, [r3, #24]
}
 8013be2:	bf00      	nop
 8013be4:	3758      	adds	r7, #88	; 0x58
 8013be6:	46bd      	mov	sp, r7
 8013be8:	bd80      	pop	{r7, pc}

08013bea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8013bea:	b580      	push	{r7, lr}
 8013bec:	b096      	sub	sp, #88	; 0x58
 8013bee:	af00      	add	r7, sp, #0
 8013bf0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013bf8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c02:	2b22      	cmp	r3, #34	; 0x22
 8013c04:	f040 8095 	bne.w	8013d32 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c0e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c16:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8013c18:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8013c1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013c20:	4013      	ands	r3, r2
 8013c22:	b29a      	uxth	r2, r3
 8013c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c26:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c2c:	1c9a      	adds	r2, r3, #2
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013c38:	b29b      	uxth	r3, r3
 8013c3a:	3b01      	subs	r3, #1
 8013c3c:	b29a      	uxth	r2, r3
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d178      	bne.n	8013d42 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c58:	e853 3f00 	ldrex	r3, [r3]
 8013c5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013c64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	461a      	mov	r2, r3
 8013c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c6e:	643b      	str	r3, [r7, #64]	; 0x40
 8013c70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013c74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013c76:	e841 2300 	strex	r3, r2, [r1]
 8013c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d1e6      	bne.n	8013c50 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	3308      	adds	r3, #8
 8013c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c8a:	6a3b      	ldr	r3, [r7, #32]
 8013c8c:	e853 3f00 	ldrex	r3, [r3]
 8013c90:	61fb      	str	r3, [r7, #28]
   return(result);
 8013c92:	69fb      	ldr	r3, [r7, #28]
 8013c94:	f023 0301 	bic.w	r3, r3, #1
 8013c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	3308      	adds	r3, #8
 8013ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013ca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013caa:	e841 2300 	strex	r3, r2, [r1]
 8013cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d1e5      	bne.n	8013c82 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	2220      	movs	r2, #32
 8013cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cc8:	2b01      	cmp	r3, #1
 8013cca:	d12e      	bne.n	8013d2a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	2200      	movs	r2, #0
 8013cd0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	e853 3f00 	ldrex	r3, [r3]
 8013cde:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	f023 0310 	bic.w	r3, r3, #16
 8013ce6:	647b      	str	r3, [r7, #68]	; 0x44
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	461a      	mov	r2, r3
 8013cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cf0:	61bb      	str	r3, [r7, #24]
 8013cf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cf4:	6979      	ldr	r1, [r7, #20]
 8013cf6:	69ba      	ldr	r2, [r7, #24]
 8013cf8:	e841 2300 	strex	r3, r2, [r1]
 8013cfc:	613b      	str	r3, [r7, #16]
   return(result);
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d1e6      	bne.n	8013cd2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	69db      	ldr	r3, [r3, #28]
 8013d0a:	f003 0310 	and.w	r3, r3, #16
 8013d0e:	2b10      	cmp	r3, #16
 8013d10:	d103      	bne.n	8013d1a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	2210      	movs	r2, #16
 8013d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013d20:	4619      	mov	r1, r3
 8013d22:	6878      	ldr	r0, [r7, #4]
 8013d24:	f7fe fb1e 	bl	8012364 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8013d28:	e00b      	b.n	8013d42 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8013d2a:	6878      	ldr	r0, [r7, #4]
 8013d2c:	f7ee fc20 	bl	8002570 <HAL_UART_RxCpltCallback>
}
 8013d30:	e007      	b.n	8013d42 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	699a      	ldr	r2, [r3, #24]
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	f042 0208 	orr.w	r2, r2, #8
 8013d40:	619a      	str	r2, [r3, #24]
}
 8013d42:	bf00      	nop
 8013d44:	3758      	adds	r7, #88	; 0x58
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
	...

08013d4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b0a6      	sub	sp, #152	; 0x98
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013d5a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	69db      	ldr	r3, [r3, #28]
 8013d64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	689b      	ldr	r3, [r3, #8]
 8013d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013d82:	2b22      	cmp	r3, #34	; 0x22
 8013d84:	f040 814d 	bne.w	8014022 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013d8e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013d92:	e0f4      	b.n	8013f7e <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d9a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8013d9e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8013da2:	b2d9      	uxtb	r1, r3
 8013da4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8013da8:	b2da      	uxtb	r2, r3
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013dae:	400a      	ands	r2, r1
 8013db0:	b2d2      	uxtb	r2, r2
 8013db2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013db8:	1c5a      	adds	r2, r3, #1
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013dc4:	b29b      	uxth	r3, r3
 8013dc6:	3b01      	subs	r3, #1
 8013dc8:	b29a      	uxth	r2, r3
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	681b      	ldr	r3, [r3, #0]
 8013dd4:	69db      	ldr	r3, [r3, #28]
 8013dd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8013dda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013dde:	f003 0307 	and.w	r3, r3, #7
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d053      	beq.n	8013e8e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013de6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013dea:	f003 0301 	and.w	r3, r3, #1
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d011      	beq.n	8013e16 <UART_RxISR_8BIT_FIFOEN+0xca>
 8013df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d00b      	beq.n	8013e16 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	2201      	movs	r2, #1
 8013e04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e0c:	f043 0201 	orr.w	r2, r3, #1
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013e16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013e1a:	f003 0302 	and.w	r3, r3, #2
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d011      	beq.n	8013e46 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8013e22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013e26:	f003 0301 	and.w	r3, r3, #1
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d00b      	beq.n	8013e46 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	2202      	movs	r2, #2
 8013e34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e3c:	f043 0204 	orr.w	r2, r3, #4
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013e46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013e4a:	f003 0304 	and.w	r3, r3, #4
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d011      	beq.n	8013e76 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8013e52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013e56:	f003 0301 	and.w	r3, r3, #1
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d00b      	beq.n	8013e76 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	2204      	movs	r2, #4
 8013e64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e6c:	f043 0202 	orr.w	r2, r3, #2
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d006      	beq.n	8013e8e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8013e80:	6878      	ldr	r0, [r7, #4]
 8013e82:	f7fe fa65 	bl	8012350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d171      	bne.n	8013f7e <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ea2:	e853 3f00 	ldrex	r3, [r3]
 8013ea6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8013ea8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013eaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013eae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	461a      	mov	r2, r3
 8013eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8013ebe:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ec0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8013ec2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8013ec4:	e841 2300 	strex	r3, r2, [r1]
 8013ec8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8013eca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d1e4      	bne.n	8013e9a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	681b      	ldr	r3, [r3, #0]
 8013ed4:	3308      	adds	r3, #8
 8013ed6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013eda:	e853 3f00 	ldrex	r3, [r3]
 8013ede:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8013ee0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ee2:	4b56      	ldr	r3, [pc, #344]	; (801403c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8013ee4:	4013      	ands	r3, r2
 8013ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	3308      	adds	r3, #8
 8013eee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013ef0:	657a      	str	r2, [r7, #84]	; 0x54
 8013ef2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ef4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013ef6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013ef8:	e841 2300 	strex	r3, r2, [r1]
 8013efc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8013efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d1e5      	bne.n	8013ed0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2220      	movs	r2, #32
 8013f08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	2200      	movs	r2, #0
 8013f10:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f16:	2b01      	cmp	r3, #1
 8013f18:	d12e      	bne.n	8013f78 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f28:	e853 3f00 	ldrex	r3, [r3]
 8013f2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f30:	f023 0310 	bic.w	r3, r3, #16
 8013f34:	67bb      	str	r3, [r7, #120]	; 0x78
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013f3e:	643b      	str	r3, [r7, #64]	; 0x40
 8013f40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013f42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013f46:	e841 2300 	strex	r3, r2, [r1]
 8013f4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d1e6      	bne.n	8013f20 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	69db      	ldr	r3, [r3, #28]
 8013f58:	f003 0310 	and.w	r3, r3, #16
 8013f5c:	2b10      	cmp	r3, #16
 8013f5e:	d103      	bne.n	8013f68 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	2210      	movs	r2, #16
 8013f66:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8013f6e:	4619      	mov	r1, r3
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f7fe f9f7 	bl	8012364 <HAL_UARTEx_RxEventCallback>
 8013f76:	e002      	b.n	8013f7e <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f7ee faf9 	bl	8002570 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8013f7e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d006      	beq.n	8013f94 <UART_RxISR_8BIT_FIFOEN+0x248>
 8013f86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8013f8a:	f003 0320 	and.w	r3, r3, #32
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	f47f af00 	bne.w	8013d94 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8013f9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8013f9e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d045      	beq.n	8014032 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013fac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	d23e      	bcs.n	8014032 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	3308      	adds	r3, #8
 8013fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013fbc:	6a3b      	ldr	r3, [r7, #32]
 8013fbe:	e853 3f00 	ldrex	r3, [r3]
 8013fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8013fc4:	69fb      	ldr	r3, [r7, #28]
 8013fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013fca:	673b      	str	r3, [r7, #112]	; 0x70
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	3308      	adds	r3, #8
 8013fd2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013fd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fdc:	e841 2300 	strex	r3, r2, [r1]
 8013fe0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d1e5      	bne.n	8013fb4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	4a15      	ldr	r2, [pc, #84]	; (8014040 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8013fec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	e853 3f00 	ldrex	r3, [r3]
 8013ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	f043 0320 	orr.w	r3, r3, #32
 8014002:	66fb      	str	r3, [r7, #108]	; 0x6c
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	681b      	ldr	r3, [r3, #0]
 8014008:	461a      	mov	r2, r3
 801400a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801400c:	61bb      	str	r3, [r7, #24]
 801400e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014010:	6979      	ldr	r1, [r7, #20]
 8014012:	69ba      	ldr	r2, [r7, #24]
 8014014:	e841 2300 	strex	r3, r2, [r1]
 8014018:	613b      	str	r3, [r7, #16]
   return(result);
 801401a:	693b      	ldr	r3, [r7, #16]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d1e6      	bne.n	8013fee <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014020:	e007      	b.n	8014032 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	699a      	ldr	r2, [r3, #24]
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	f042 0208 	orr.w	r2, r2, #8
 8014030:	619a      	str	r2, [r3, #24]
}
 8014032:	bf00      	nop
 8014034:	3798      	adds	r7, #152	; 0x98
 8014036:	46bd      	mov	sp, r7
 8014038:	bd80      	pop	{r7, pc}
 801403a:	bf00      	nop
 801403c:	effffffe 	.word	0xeffffffe
 8014040:	08013a8b 	.word	0x08013a8b

08014044 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b0a8      	sub	sp, #160	; 0xa0
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014052:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	69db      	ldr	r3, [r3, #28]
 801405c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	689b      	ldr	r3, [r3, #8]
 8014070:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801407a:	2b22      	cmp	r3, #34	; 0x22
 801407c:	f040 8151 	bne.w	8014322 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8014086:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801408a:	e0f8      	b.n	801427e <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014092:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801409a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 801409e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80140a2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80140a6:	4013      	ands	r3, r2
 80140a8:	b29a      	uxth	r2, r3
 80140aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80140ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80140b4:	1c9a      	adds	r2, r3, #2
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80140c0:	b29b      	uxth	r3, r3
 80140c2:	3b01      	subs	r3, #1
 80140c4:	b29a      	uxth	r2, r3
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	69db      	ldr	r3, [r3, #28]
 80140d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80140d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80140da:	f003 0307 	and.w	r3, r3, #7
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d053      	beq.n	801418a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80140e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80140e6:	f003 0301 	and.w	r3, r3, #1
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d011      	beq.n	8014112 <UART_RxISR_16BIT_FIFOEN+0xce>
 80140ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80140f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d00b      	beq.n	8014112 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	2201      	movs	r2, #1
 8014100:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014108:	f043 0201 	orr.w	r2, r3, #1
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014112:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014116:	f003 0302 	and.w	r3, r3, #2
 801411a:	2b00      	cmp	r3, #0
 801411c:	d011      	beq.n	8014142 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801411e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014122:	f003 0301 	and.w	r3, r3, #1
 8014126:	2b00      	cmp	r3, #0
 8014128:	d00b      	beq.n	8014142 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2202      	movs	r2, #2
 8014130:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014138:	f043 0204 	orr.w	r2, r3, #4
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014142:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014146:	f003 0304 	and.w	r3, r3, #4
 801414a:	2b00      	cmp	r3, #0
 801414c:	d011      	beq.n	8014172 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801414e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014152:	f003 0301 	and.w	r3, r3, #1
 8014156:	2b00      	cmp	r3, #0
 8014158:	d00b      	beq.n	8014172 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	681b      	ldr	r3, [r3, #0]
 801415e:	2204      	movs	r2, #4
 8014160:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014168:	f043 0202 	orr.w	r2, r3, #2
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014178:	2b00      	cmp	r3, #0
 801417a:	d006      	beq.n	801418a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f7fe f8e7 	bl	8012350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	2200      	movs	r2, #0
 8014186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014190:	b29b      	uxth	r3, r3
 8014192:	2b00      	cmp	r3, #0
 8014194:	d173      	bne.n	801427e <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801419c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801419e:	e853 3f00 	ldrex	r3, [r3]
 80141a2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80141a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80141aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	461a      	mov	r2, r3
 80141b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80141b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80141ba:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141bc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80141be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80141c0:	e841 2300 	strex	r3, r2, [r1]
 80141c4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80141c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d1e4      	bne.n	8014196 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	3308      	adds	r3, #8
 80141d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80141d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141d6:	e853 3f00 	ldrex	r3, [r3]
 80141da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80141dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80141de:	4b57      	ldr	r3, [pc, #348]	; (801433c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 80141e0:	4013      	ands	r3, r2
 80141e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	3308      	adds	r3, #8
 80141ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80141f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80141f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80141f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80141f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80141f8:	e841 2300 	strex	r3, r2, [r1]
 80141fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80141fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014200:	2b00      	cmp	r3, #0
 8014202:	d1e3      	bne.n	80141cc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	2220      	movs	r2, #32
 8014208:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2200      	movs	r2, #0
 8014210:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014216:	2b01      	cmp	r3, #1
 8014218:	d12e      	bne.n	8014278 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	2200      	movs	r2, #0
 801421e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014228:	e853 3f00 	ldrex	r3, [r3]
 801422c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801422e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014230:	f023 0310 	bic.w	r3, r3, #16
 8014234:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	461a      	mov	r2, r3
 801423c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801423e:	647b      	str	r3, [r7, #68]	; 0x44
 8014240:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014242:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014244:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014246:	e841 2300 	strex	r3, r2, [r1]
 801424a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801424c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801424e:	2b00      	cmp	r3, #0
 8014250:	d1e6      	bne.n	8014220 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	69db      	ldr	r3, [r3, #28]
 8014258:	f003 0310 	and.w	r3, r3, #16
 801425c:	2b10      	cmp	r3, #16
 801425e:	d103      	bne.n	8014268 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	2210      	movs	r2, #16
 8014266:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801426e:	4619      	mov	r1, r3
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f7fe f877 	bl	8012364 <HAL_UARTEx_RxEventCallback>
 8014276:	e002      	b.n	801427e <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8014278:	6878      	ldr	r0, [r7, #4]
 801427a:	f7ee f979 	bl	8002570 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801427e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8014282:	2b00      	cmp	r3, #0
 8014284:	d006      	beq.n	8014294 <UART_RxISR_16BIT_FIFOEN+0x250>
 8014286:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801428a:	f003 0320 	and.w	r3, r3, #32
 801428e:	2b00      	cmp	r3, #0
 8014290:	f47f aefc 	bne.w	801408c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801429a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801429e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d045      	beq.n	8014332 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80142ac:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d23e      	bcs.n	8014332 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	3308      	adds	r3, #8
 80142ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142be:	e853 3f00 	ldrex	r3, [r3]
 80142c2:	623b      	str	r3, [r7, #32]
   return(result);
 80142c4:	6a3b      	ldr	r3, [r7, #32]
 80142c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80142ca:	677b      	str	r3, [r7, #116]	; 0x74
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	3308      	adds	r3, #8
 80142d2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80142d4:	633a      	str	r2, [r7, #48]	; 0x30
 80142d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80142d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80142da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80142dc:	e841 2300 	strex	r3, r2, [r1]
 80142e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80142e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d1e5      	bne.n	80142b4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	4a15      	ldr	r2, [pc, #84]	; (8014340 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80142ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80142f4:	693b      	ldr	r3, [r7, #16]
 80142f6:	e853 3f00 	ldrex	r3, [r3]
 80142fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80142fc:	68fb      	ldr	r3, [r7, #12]
 80142fe:	f043 0320 	orr.w	r3, r3, #32
 8014302:	673b      	str	r3, [r7, #112]	; 0x70
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	461a      	mov	r2, r3
 801430a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801430c:	61fb      	str	r3, [r7, #28]
 801430e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014310:	69b9      	ldr	r1, [r7, #24]
 8014312:	69fa      	ldr	r2, [r7, #28]
 8014314:	e841 2300 	strex	r3, r2, [r1]
 8014318:	617b      	str	r3, [r7, #20]
   return(result);
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d1e6      	bne.n	80142ee <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8014320:	e007      	b.n	8014332 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	699a      	ldr	r2, [r3, #24]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	f042 0208 	orr.w	r2, r2, #8
 8014330:	619a      	str	r2, [r3, #24]
}
 8014332:	bf00      	nop
 8014334:	37a0      	adds	r7, #160	; 0xa0
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}
 801433a:	bf00      	nop
 801433c:	effffffe 	.word	0xeffffffe
 8014340:	08013beb 	.word	0x08013beb

08014344 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8014344:	b480      	push	{r7}
 8014346:	b083      	sub	sp, #12
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801434c:	bf00      	nop
 801434e:	370c      	adds	r7, #12
 8014350:	46bd      	mov	sp, r7
 8014352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014356:	4770      	bx	lr

08014358 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8014360:	bf00      	nop
 8014362:	370c      	adds	r7, #12
 8014364:	46bd      	mov	sp, r7
 8014366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436a:	4770      	bx	lr

0801436c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801436c:	b480      	push	{r7}
 801436e:	b083      	sub	sp, #12
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8014374:	bf00      	nop
 8014376:	370c      	adds	r7, #12
 8014378:	46bd      	mov	sp, r7
 801437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437e:	4770      	bx	lr

08014380 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014380:	b480      	push	{r7}
 8014382:	b085      	sub	sp, #20
 8014384:	af00      	add	r7, sp, #0
 8014386:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801438e:	2b01      	cmp	r3, #1
 8014390:	d101      	bne.n	8014396 <HAL_UARTEx_DisableFifoMode+0x16>
 8014392:	2302      	movs	r3, #2
 8014394:	e027      	b.n	80143e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	2201      	movs	r2, #1
 801439a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	2224      	movs	r2, #36	; 0x24
 80143a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	681a      	ldr	r2, [r3, #0]
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	f022 0201 	bic.w	r2, r2, #1
 80143bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80143c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	2200      	movs	r2, #0
 80143ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	68fa      	ldr	r2, [r7, #12]
 80143d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2220      	movs	r2, #32
 80143d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2200      	movs	r2, #0
 80143e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80143e4:	2300      	movs	r3, #0
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3714      	adds	r7, #20
 80143ea:	46bd      	mov	sp, r7
 80143ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f0:	4770      	bx	lr

080143f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80143f2:	b580      	push	{r7, lr}
 80143f4:	b084      	sub	sp, #16
 80143f6:	af00      	add	r7, sp, #0
 80143f8:	6078      	str	r0, [r7, #4]
 80143fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014402:	2b01      	cmp	r3, #1
 8014404:	d101      	bne.n	801440a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014406:	2302      	movs	r3, #2
 8014408:	e02d      	b.n	8014466 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	2201      	movs	r2, #1
 801440e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	2224      	movs	r2, #36	; 0x24
 8014416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	681a      	ldr	r2, [r3, #0]
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	f022 0201 	bic.w	r2, r2, #1
 8014430:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	689b      	ldr	r3, [r3, #8]
 8014438:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	683a      	ldr	r2, [r7, #0]
 8014442:	430a      	orrs	r2, r1
 8014444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f000 f850 	bl	80144ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	68fa      	ldr	r2, [r7, #12]
 8014452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2220      	movs	r2, #32
 8014458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2200      	movs	r2, #0
 8014460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8014464:	2300      	movs	r3, #0
}
 8014466:	4618      	mov	r0, r3
 8014468:	3710      	adds	r7, #16
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}

0801446e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801446e:	b580      	push	{r7, lr}
 8014470:	b084      	sub	sp, #16
 8014472:	af00      	add	r7, sp, #0
 8014474:	6078      	str	r0, [r7, #4]
 8014476:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801447e:	2b01      	cmp	r3, #1
 8014480:	d101      	bne.n	8014486 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014482:	2302      	movs	r3, #2
 8014484:	e02d      	b.n	80144e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	2201      	movs	r2, #1
 801448a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	2224      	movs	r2, #36	; 0x24
 8014492:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	681a      	ldr	r2, [r3, #0]
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	f022 0201 	bic.w	r2, r2, #1
 80144ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	689b      	ldr	r3, [r3, #8]
 80144b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	683a      	ldr	r2, [r7, #0]
 80144be:	430a      	orrs	r2, r1
 80144c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f000 f812 	bl	80144ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80144c8:	687b      	ldr	r3, [r7, #4]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	68fa      	ldr	r2, [r7, #12]
 80144ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2220      	movs	r2, #32
 80144d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2200      	movs	r2, #0
 80144dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80144e0:	2300      	movs	r3, #0
}
 80144e2:	4618      	mov	r0, r3
 80144e4:	3710      	adds	r7, #16
 80144e6:	46bd      	mov	sp, r7
 80144e8:	bd80      	pop	{r7, pc}
	...

080144ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80144ec:	b480      	push	{r7}
 80144ee:	b085      	sub	sp, #20
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d108      	bne.n	801450e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	2201      	movs	r2, #1
 8014500:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2201      	movs	r2, #1
 8014508:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801450c:	e031      	b.n	8014572 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801450e:	2310      	movs	r3, #16
 8014510:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014512:	2310      	movs	r3, #16
 8014514:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	689b      	ldr	r3, [r3, #8]
 801451c:	0e5b      	lsrs	r3, r3, #25
 801451e:	b2db      	uxtb	r3, r3
 8014520:	f003 0307 	and.w	r3, r3, #7
 8014524:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	689b      	ldr	r3, [r3, #8]
 801452c:	0f5b      	lsrs	r3, r3, #29
 801452e:	b2db      	uxtb	r3, r3
 8014530:	f003 0307 	and.w	r3, r3, #7
 8014534:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014536:	7bbb      	ldrb	r3, [r7, #14]
 8014538:	7b3a      	ldrb	r2, [r7, #12]
 801453a:	4911      	ldr	r1, [pc, #68]	; (8014580 <UARTEx_SetNbDataToProcess+0x94>)
 801453c:	5c8a      	ldrb	r2, [r1, r2]
 801453e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014542:	7b3a      	ldrb	r2, [r7, #12]
 8014544:	490f      	ldr	r1, [pc, #60]	; (8014584 <UARTEx_SetNbDataToProcess+0x98>)
 8014546:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014548:	fb93 f3f2 	sdiv	r3, r3, r2
 801454c:	b29a      	uxth	r2, r3
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014554:	7bfb      	ldrb	r3, [r7, #15]
 8014556:	7b7a      	ldrb	r2, [r7, #13]
 8014558:	4909      	ldr	r1, [pc, #36]	; (8014580 <UARTEx_SetNbDataToProcess+0x94>)
 801455a:	5c8a      	ldrb	r2, [r1, r2]
 801455c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014560:	7b7a      	ldrb	r2, [r7, #13]
 8014562:	4908      	ldr	r1, [pc, #32]	; (8014584 <UARTEx_SetNbDataToProcess+0x98>)
 8014564:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014566:	fb93 f3f2 	sdiv	r3, r3, r2
 801456a:	b29a      	uxth	r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014572:	bf00      	nop
 8014574:	3714      	adds	r7, #20
 8014576:	46bd      	mov	sp, r7
 8014578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457c:	4770      	bx	lr
 801457e:	bf00      	nop
 8014580:	08015288 	.word	0x08015288
 8014584:	08015290 	.word	0x08015290

08014588 <__libc_init_array>:
 8014588:	b570      	push	{r4, r5, r6, lr}
 801458a:	4d0d      	ldr	r5, [pc, #52]	; (80145c0 <__libc_init_array+0x38>)
 801458c:	4c0d      	ldr	r4, [pc, #52]	; (80145c4 <__libc_init_array+0x3c>)
 801458e:	1b64      	subs	r4, r4, r5
 8014590:	10a4      	asrs	r4, r4, #2
 8014592:	2600      	movs	r6, #0
 8014594:	42a6      	cmp	r6, r4
 8014596:	d109      	bne.n	80145ac <__libc_init_array+0x24>
 8014598:	4d0b      	ldr	r5, [pc, #44]	; (80145c8 <__libc_init_array+0x40>)
 801459a:	4c0c      	ldr	r4, [pc, #48]	; (80145cc <__libc_init_array+0x44>)
 801459c:	f000 fe46 	bl	801522c <_init>
 80145a0:	1b64      	subs	r4, r4, r5
 80145a2:	10a4      	asrs	r4, r4, #2
 80145a4:	2600      	movs	r6, #0
 80145a6:	42a6      	cmp	r6, r4
 80145a8:	d105      	bne.n	80145b6 <__libc_init_array+0x2e>
 80145aa:	bd70      	pop	{r4, r5, r6, pc}
 80145ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80145b0:	4798      	blx	r3
 80145b2:	3601      	adds	r6, #1
 80145b4:	e7ee      	b.n	8014594 <__libc_init_array+0xc>
 80145b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80145ba:	4798      	blx	r3
 80145bc:	3601      	adds	r6, #1
 80145be:	e7f2      	b.n	80145a6 <__libc_init_array+0x1e>
 80145c0:	08015478 	.word	0x08015478
 80145c4:	08015478 	.word	0x08015478
 80145c8:	08015478 	.word	0x08015478
 80145cc:	0801547c 	.word	0x0801547c

080145d0 <memset>:
 80145d0:	4402      	add	r2, r0
 80145d2:	4603      	mov	r3, r0
 80145d4:	4293      	cmp	r3, r2
 80145d6:	d100      	bne.n	80145da <memset+0xa>
 80145d8:	4770      	bx	lr
 80145da:	f803 1b01 	strb.w	r1, [r3], #1
 80145de:	e7f9      	b.n	80145d4 <memset+0x4>

080145e0 <cos>:
 80145e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80145e2:	eeb0 7b40 	vmov.f64	d7, d0
 80145e6:	ee17 3a90 	vmov	r3, s15
 80145ea:	4a1f      	ldr	r2, [pc, #124]	; (8014668 <cos+0x88>)
 80145ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80145f0:	4293      	cmp	r3, r2
 80145f2:	dc04      	bgt.n	80145fe <cos+0x1e>
 80145f4:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 8014660 <cos+0x80>
 80145f8:	f000 f9c2 	bl	8014980 <__kernel_cos>
 80145fc:	e004      	b.n	8014608 <cos+0x28>
 80145fe:	4a1b      	ldr	r2, [pc, #108]	; (801466c <cos+0x8c>)
 8014600:	4293      	cmp	r3, r2
 8014602:	dd04      	ble.n	801460e <cos+0x2e>
 8014604:	ee30 0b40 	vsub.f64	d0, d0, d0
 8014608:	b005      	add	sp, #20
 801460a:	f85d fb04 	ldr.w	pc, [sp], #4
 801460e:	4668      	mov	r0, sp
 8014610:	f000 f876 	bl	8014700 <__ieee754_rem_pio2>
 8014614:	f000 0003 	and.w	r0, r0, #3
 8014618:	2801      	cmp	r0, #1
 801461a:	d007      	beq.n	801462c <cos+0x4c>
 801461c:	2802      	cmp	r0, #2
 801461e:	d00e      	beq.n	801463e <cos+0x5e>
 8014620:	b9a0      	cbnz	r0, 801464c <cos+0x6c>
 8014622:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014626:	ed9d 0b00 	vldr	d0, [sp]
 801462a:	e7e5      	b.n	80145f8 <cos+0x18>
 801462c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014630:	ed9d 0b00 	vldr	d0, [sp]
 8014634:	f000 fc90 	bl	8014f58 <__kernel_sin>
 8014638:	eeb1 0b40 	vneg.f64	d0, d0
 801463c:	e7e4      	b.n	8014608 <cos+0x28>
 801463e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014642:	ed9d 0b00 	vldr	d0, [sp]
 8014646:	f000 f99b 	bl	8014980 <__kernel_cos>
 801464a:	e7f5      	b.n	8014638 <cos+0x58>
 801464c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014650:	ed9d 0b00 	vldr	d0, [sp]
 8014654:	2001      	movs	r0, #1
 8014656:	f000 fc7f 	bl	8014f58 <__kernel_sin>
 801465a:	e7d5      	b.n	8014608 <cos+0x28>
 801465c:	f3af 8000 	nop.w
	...
 8014668:	3fe921fb 	.word	0x3fe921fb
 801466c:	7fefffff 	.word	0x7fefffff

08014670 <sin>:
 8014670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014672:	eeb0 7b40 	vmov.f64	d7, d0
 8014676:	ee17 3a90 	vmov	r3, s15
 801467a:	4a1f      	ldr	r2, [pc, #124]	; (80146f8 <sin+0x88>)
 801467c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014680:	4293      	cmp	r3, r2
 8014682:	dc05      	bgt.n	8014690 <sin+0x20>
 8014684:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 80146f0 <sin+0x80>
 8014688:	2000      	movs	r0, #0
 801468a:	f000 fc65 	bl	8014f58 <__kernel_sin>
 801468e:	e004      	b.n	801469a <sin+0x2a>
 8014690:	4a1a      	ldr	r2, [pc, #104]	; (80146fc <sin+0x8c>)
 8014692:	4293      	cmp	r3, r2
 8014694:	dd04      	ble.n	80146a0 <sin+0x30>
 8014696:	ee30 0b40 	vsub.f64	d0, d0, d0
 801469a:	b005      	add	sp, #20
 801469c:	f85d fb04 	ldr.w	pc, [sp], #4
 80146a0:	4668      	mov	r0, sp
 80146a2:	f000 f82d 	bl	8014700 <__ieee754_rem_pio2>
 80146a6:	f000 0003 	and.w	r0, r0, #3
 80146aa:	2801      	cmp	r0, #1
 80146ac:	d008      	beq.n	80146c0 <sin+0x50>
 80146ae:	2802      	cmp	r0, #2
 80146b0:	d00d      	beq.n	80146ce <sin+0x5e>
 80146b2:	b9b0      	cbnz	r0, 80146e2 <sin+0x72>
 80146b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80146b8:	ed9d 0b00 	vldr	d0, [sp]
 80146bc:	2001      	movs	r0, #1
 80146be:	e7e4      	b.n	801468a <sin+0x1a>
 80146c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80146c4:	ed9d 0b00 	vldr	d0, [sp]
 80146c8:	f000 f95a 	bl	8014980 <__kernel_cos>
 80146cc:	e7e5      	b.n	801469a <sin+0x2a>
 80146ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80146d2:	ed9d 0b00 	vldr	d0, [sp]
 80146d6:	2001      	movs	r0, #1
 80146d8:	f000 fc3e 	bl	8014f58 <__kernel_sin>
 80146dc:	eeb1 0b40 	vneg.f64	d0, d0
 80146e0:	e7db      	b.n	801469a <sin+0x2a>
 80146e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80146e6:	ed9d 0b00 	vldr	d0, [sp]
 80146ea:	f000 f949 	bl	8014980 <__kernel_cos>
 80146ee:	e7f5      	b.n	80146dc <sin+0x6c>
	...
 80146f8:	3fe921fb 	.word	0x3fe921fb
 80146fc:	7fefffff 	.word	0x7fefffff

08014700 <__ieee754_rem_pio2>:
 8014700:	b570      	push	{r4, r5, r6, lr}
 8014702:	eeb0 7b40 	vmov.f64	d7, d0
 8014706:	ee17 5a90 	vmov	r5, s15
 801470a:	4b97      	ldr	r3, [pc, #604]	; (8014968 <__ieee754_rem_pio2+0x268>)
 801470c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014710:	429e      	cmp	r6, r3
 8014712:	b088      	sub	sp, #32
 8014714:	4604      	mov	r4, r0
 8014716:	dc07      	bgt.n	8014728 <__ieee754_rem_pio2+0x28>
 8014718:	2200      	movs	r2, #0
 801471a:	2300      	movs	r3, #0
 801471c:	ed84 0b00 	vstr	d0, [r4]
 8014720:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8014724:	2000      	movs	r0, #0
 8014726:	e01b      	b.n	8014760 <__ieee754_rem_pio2+0x60>
 8014728:	4b90      	ldr	r3, [pc, #576]	; (801496c <__ieee754_rem_pio2+0x26c>)
 801472a:	429e      	cmp	r6, r3
 801472c:	dc3b      	bgt.n	80147a6 <__ieee754_rem_pio2+0xa6>
 801472e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8014732:	2d00      	cmp	r5, #0
 8014734:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8014928 <__ieee754_rem_pio2+0x228>
 8014738:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801473c:	dd19      	ble.n	8014772 <__ieee754_rem_pio2+0x72>
 801473e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8014742:	429e      	cmp	r6, r3
 8014744:	d00e      	beq.n	8014764 <__ieee754_rem_pio2+0x64>
 8014746:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8014930 <__ieee754_rem_pio2+0x230>
 801474a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801474e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014752:	ed84 5b00 	vstr	d5, [r4]
 8014756:	ee37 7b46 	vsub.f64	d7, d7, d6
 801475a:	ed84 7b02 	vstr	d7, [r4, #8]
 801475e:	2001      	movs	r0, #1
 8014760:	b008      	add	sp, #32
 8014762:	bd70      	pop	{r4, r5, r6, pc}
 8014764:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8014938 <__ieee754_rem_pio2+0x238>
 8014768:	ee37 7b46 	vsub.f64	d7, d7, d6
 801476c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8014940 <__ieee754_rem_pio2+0x240>
 8014770:	e7eb      	b.n	801474a <__ieee754_rem_pio2+0x4a>
 8014772:	429e      	cmp	r6, r3
 8014774:	ee30 7b06 	vadd.f64	d7, d0, d6
 8014778:	d00e      	beq.n	8014798 <__ieee754_rem_pio2+0x98>
 801477a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 8014930 <__ieee754_rem_pio2+0x230>
 801477e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8014782:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014786:	ed84 5b00 	vstr	d5, [r4]
 801478a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801478e:	f04f 30ff 	mov.w	r0, #4294967295
 8014792:	ed84 7b02 	vstr	d7, [r4, #8]
 8014796:	e7e3      	b.n	8014760 <__ieee754_rem_pio2+0x60>
 8014798:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8014938 <__ieee754_rem_pio2+0x238>
 801479c:	ee37 7b06 	vadd.f64	d7, d7, d6
 80147a0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 8014940 <__ieee754_rem_pio2+0x240>
 80147a4:	e7eb      	b.n	801477e <__ieee754_rem_pio2+0x7e>
 80147a6:	4b72      	ldr	r3, [pc, #456]	; (8014970 <__ieee754_rem_pio2+0x270>)
 80147a8:	429e      	cmp	r6, r3
 80147aa:	dc6e      	bgt.n	801488a <__ieee754_rem_pio2+0x18a>
 80147ac:	f000 fc2c 	bl	8015008 <fabs>
 80147b0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80147b4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8014948 <__ieee754_rem_pio2+0x248>
 80147b8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80147bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80147c0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80147c4:	ee17 0a90 	vmov	r0, s15
 80147c8:	eeb1 4b45 	vneg.f64	d4, d5
 80147cc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8014928 <__ieee754_rem_pio2+0x228>
 80147d0:	eea5 0b47 	vfms.f64	d0, d5, d7
 80147d4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 8014930 <__ieee754_rem_pio2+0x230>
 80147d8:	281f      	cmp	r0, #31
 80147da:	ee25 7b07 	vmul.f64	d7, d5, d7
 80147de:	ee30 6b47 	vsub.f64	d6, d0, d7
 80147e2:	dc08      	bgt.n	80147f6 <__ieee754_rem_pio2+0xf6>
 80147e4:	4b63      	ldr	r3, [pc, #396]	; (8014974 <__ieee754_rem_pio2+0x274>)
 80147e6:	1e42      	subs	r2, r0, #1
 80147e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147ec:	42b3      	cmp	r3, r6
 80147ee:	d002      	beq.n	80147f6 <__ieee754_rem_pio2+0xf6>
 80147f0:	ed84 6b00 	vstr	d6, [r4]
 80147f4:	e024      	b.n	8014840 <__ieee754_rem_pio2+0x140>
 80147f6:	ee16 3a90 	vmov	r3, s13
 80147fa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80147fe:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8014802:	2b10      	cmp	r3, #16
 8014804:	ea4f 5226 	mov.w	r2, r6, asr #20
 8014808:	ddf2      	ble.n	80147f0 <__ieee754_rem_pio2+0xf0>
 801480a:	eeb0 6b40 	vmov.f64	d6, d0
 801480e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8014938 <__ieee754_rem_pio2+0x238>
 8014812:	eea4 6b03 	vfma.f64	d6, d4, d3
 8014816:	ee30 7b46 	vsub.f64	d7, d0, d6
 801481a:	eea4 7b03 	vfma.f64	d7, d4, d3
 801481e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 8014940 <__ieee754_rem_pio2+0x240>
 8014822:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8014826:	ee36 3b47 	vsub.f64	d3, d6, d7
 801482a:	ee13 3a90 	vmov	r3, s7
 801482e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8014832:	1ad3      	subs	r3, r2, r3
 8014834:	2b31      	cmp	r3, #49	; 0x31
 8014836:	dc17      	bgt.n	8014868 <__ieee754_rem_pio2+0x168>
 8014838:	eeb0 0b46 	vmov.f64	d0, d6
 801483c:	ed84 3b00 	vstr	d3, [r4]
 8014840:	ed94 6b00 	vldr	d6, [r4]
 8014844:	2d00      	cmp	r5, #0
 8014846:	ee30 0b46 	vsub.f64	d0, d0, d6
 801484a:	ee30 7b47 	vsub.f64	d7, d0, d7
 801484e:	ed84 7b02 	vstr	d7, [r4, #8]
 8014852:	da85      	bge.n	8014760 <__ieee754_rem_pio2+0x60>
 8014854:	eeb1 6b46 	vneg.f64	d6, d6
 8014858:	ed84 6b00 	vstr	d6, [r4]
 801485c:	eeb1 7b47 	vneg.f64	d7, d7
 8014860:	4240      	negs	r0, r0
 8014862:	ed84 7b02 	vstr	d7, [r4, #8]
 8014866:	e77b      	b.n	8014760 <__ieee754_rem_pio2+0x60>
 8014868:	ed9f 3b39 	vldr	d3, [pc, #228]	; 8014950 <__ieee754_rem_pio2+0x250>
 801486c:	eeb0 0b46 	vmov.f64	d0, d6
 8014870:	eea4 0b03 	vfma.f64	d0, d4, d3
 8014874:	ee36 7b40 	vsub.f64	d7, d6, d0
 8014878:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8014958 <__ieee754_rem_pio2+0x258>
 801487c:	eea4 7b03 	vfma.f64	d7, d4, d3
 8014880:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8014884:	ee30 6b47 	vsub.f64	d6, d0, d7
 8014888:	e7b2      	b.n	80147f0 <__ieee754_rem_pio2+0xf0>
 801488a:	4b3b      	ldr	r3, [pc, #236]	; (8014978 <__ieee754_rem_pio2+0x278>)
 801488c:	429e      	cmp	r6, r3
 801488e:	dd06      	ble.n	801489e <__ieee754_rem_pio2+0x19e>
 8014890:	ee30 7b40 	vsub.f64	d7, d0, d0
 8014894:	ed80 7b02 	vstr	d7, [r0, #8]
 8014898:	ed80 7b00 	vstr	d7, [r0]
 801489c:	e742      	b.n	8014724 <__ieee754_rem_pio2+0x24>
 801489e:	1532      	asrs	r2, r6, #20
 80148a0:	ee10 0a10 	vmov	r0, s0
 80148a4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80148a8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80148ac:	ec41 0b17 	vmov	d7, r0, r1
 80148b0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80148b4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 8014960 <__ieee754_rem_pio2+0x260>
 80148b8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80148bc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80148c0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80148c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80148c8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80148cc:	a902      	add	r1, sp, #8
 80148ce:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80148d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80148d6:	ed8d 6b04 	vstr	d6, [sp, #16]
 80148da:	ee27 7b05 	vmul.f64	d7, d7, d5
 80148de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80148e2:	2603      	movs	r6, #3
 80148e4:	4608      	mov	r0, r1
 80148e6:	ed91 7b04 	vldr	d7, [r1, #16]
 80148ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80148ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148f2:	4633      	mov	r3, r6
 80148f4:	f1a1 0108 	sub.w	r1, r1, #8
 80148f8:	f106 36ff 	add.w	r6, r6, #4294967295
 80148fc:	d0f3      	beq.n	80148e6 <__ieee754_rem_pio2+0x1e6>
 80148fe:	491f      	ldr	r1, [pc, #124]	; (801497c <__ieee754_rem_pio2+0x27c>)
 8014900:	9101      	str	r1, [sp, #4]
 8014902:	2102      	movs	r1, #2
 8014904:	9100      	str	r1, [sp, #0]
 8014906:	4621      	mov	r1, r4
 8014908:	f000 f8a6 	bl	8014a58 <__kernel_rem_pio2>
 801490c:	2d00      	cmp	r5, #0
 801490e:	f6bf af27 	bge.w	8014760 <__ieee754_rem_pio2+0x60>
 8014912:	ed94 7b00 	vldr	d7, [r4]
 8014916:	eeb1 7b47 	vneg.f64	d7, d7
 801491a:	ed84 7b00 	vstr	d7, [r4]
 801491e:	ed94 7b02 	vldr	d7, [r4, #8]
 8014922:	e79b      	b.n	801485c <__ieee754_rem_pio2+0x15c>
 8014924:	f3af 8000 	nop.w
 8014928:	54400000 	.word	0x54400000
 801492c:	3ff921fb 	.word	0x3ff921fb
 8014930:	1a626331 	.word	0x1a626331
 8014934:	3dd0b461 	.word	0x3dd0b461
 8014938:	1a600000 	.word	0x1a600000
 801493c:	3dd0b461 	.word	0x3dd0b461
 8014940:	2e037073 	.word	0x2e037073
 8014944:	3ba3198a 	.word	0x3ba3198a
 8014948:	6dc9c883 	.word	0x6dc9c883
 801494c:	3fe45f30 	.word	0x3fe45f30
 8014950:	2e000000 	.word	0x2e000000
 8014954:	3ba3198a 	.word	0x3ba3198a
 8014958:	252049c1 	.word	0x252049c1
 801495c:	397b839a 	.word	0x397b839a
 8014960:	00000000 	.word	0x00000000
 8014964:	41700000 	.word	0x41700000
 8014968:	3fe921fb 	.word	0x3fe921fb
 801496c:	4002d97b 	.word	0x4002d97b
 8014970:	413921fb 	.word	0x413921fb
 8014974:	08015298 	.word	0x08015298
 8014978:	7fefffff 	.word	0x7fefffff
 801497c:	08015318 	.word	0x08015318

08014980 <__kernel_cos>:
 8014980:	ee10 1a90 	vmov	r1, s1
 8014984:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8014988:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801498c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8014990:	da05      	bge.n	801499e <__kernel_cos+0x1e>
 8014992:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8014996:	ee17 3a90 	vmov	r3, s15
 801499a:	2b00      	cmp	r3, #0
 801499c:	d03d      	beq.n	8014a1a <__kernel_cos+0x9a>
 801499e:	ee20 3b00 	vmul.f64	d3, d0, d0
 80149a2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8014a20 <__kernel_cos+0xa0>
 80149a6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014a28 <__kernel_cos+0xa8>
 80149aa:	eea3 6b07 	vfma.f64	d6, d3, d7
 80149ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014a30 <__kernel_cos+0xb0>
 80149b2:	eea6 7b03 	vfma.f64	d7, d6, d3
 80149b6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014a38 <__kernel_cos+0xb8>
 80149ba:	eea7 6b03 	vfma.f64	d6, d7, d3
 80149be:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014a40 <__kernel_cos+0xc0>
 80149c2:	4b23      	ldr	r3, [pc, #140]	; (8014a50 <__kernel_cos+0xd0>)
 80149c4:	eea6 7b03 	vfma.f64	d7, d6, d3
 80149c8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8014a48 <__kernel_cos+0xc8>
 80149cc:	4299      	cmp	r1, r3
 80149ce:	eea7 6b03 	vfma.f64	d6, d7, d3
 80149d2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80149d6:	ee26 5b03 	vmul.f64	d5, d6, d3
 80149da:	ee23 7b07 	vmul.f64	d7, d3, d7
 80149de:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80149e2:	eea3 6b05 	vfma.f64	d6, d3, d5
 80149e6:	dc04      	bgt.n	80149f2 <__kernel_cos+0x72>
 80149e8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80149ec:	ee34 0b46 	vsub.f64	d0, d4, d6
 80149f0:	4770      	bx	lr
 80149f2:	4b18      	ldr	r3, [pc, #96]	; (8014a54 <__kernel_cos+0xd4>)
 80149f4:	4299      	cmp	r1, r3
 80149f6:	dc0d      	bgt.n	8014a14 <__kernel_cos+0x94>
 80149f8:	2200      	movs	r2, #0
 80149fa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 80149fe:	ec43 2b15 	vmov	d5, r2, r3
 8014a02:	ee34 0b45 	vsub.f64	d0, d4, d5
 8014a06:	ee37 7b45 	vsub.f64	d7, d7, d5
 8014a0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014a0e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8014a12:	4770      	bx	lr
 8014a14:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8014a18:	e7f3      	b.n	8014a02 <__kernel_cos+0x82>
 8014a1a:	eeb0 0b44 	vmov.f64	d0, d4
 8014a1e:	4770      	bx	lr
 8014a20:	be8838d4 	.word	0xbe8838d4
 8014a24:	bda8fae9 	.word	0xbda8fae9
 8014a28:	bdb4b1c4 	.word	0xbdb4b1c4
 8014a2c:	3e21ee9e 	.word	0x3e21ee9e
 8014a30:	809c52ad 	.word	0x809c52ad
 8014a34:	be927e4f 	.word	0xbe927e4f
 8014a38:	19cb1590 	.word	0x19cb1590
 8014a3c:	3efa01a0 	.word	0x3efa01a0
 8014a40:	16c15177 	.word	0x16c15177
 8014a44:	bf56c16c 	.word	0xbf56c16c
 8014a48:	5555554c 	.word	0x5555554c
 8014a4c:	3fa55555 	.word	0x3fa55555
 8014a50:	3fd33332 	.word	0x3fd33332
 8014a54:	3fe90000 	.word	0x3fe90000

08014a58 <__kernel_rem_pio2>:
 8014a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a5c:	ed2d 8b06 	vpush	{d8-d10}
 8014a60:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 8014a64:	469b      	mov	fp, r3
 8014a66:	460f      	mov	r7, r1
 8014a68:	4bcf      	ldr	r3, [pc, #828]	; (8014da8 <__kernel_rem_pio2+0x350>)
 8014a6a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8014a6c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 8014a70:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8014a74:	9000      	str	r0, [sp, #0]
 8014a76:	f112 0f14 	cmn.w	r2, #20
 8014a7a:	bfa8      	it	ge
 8014a7c:	2318      	movge	r3, #24
 8014a7e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8014a82:	bfb8      	it	lt
 8014a84:	2300      	movlt	r3, #0
 8014a86:	f06f 0417 	mvn.w	r4, #23
 8014a8a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8014d90 <__kernel_rem_pio2+0x338>
 8014a8e:	bfa4      	itt	ge
 8014a90:	f1a2 0a03 	subge.w	sl, r2, #3
 8014a94:	fb9a f3f3 	sdivge	r3, sl, r3
 8014a98:	fb03 4404 	mla	r4, r3, r4, r4
 8014a9c:	1a5d      	subs	r5, r3, r1
 8014a9e:	4414      	add	r4, r2
 8014aa0:	eb09 0601 	add.w	r6, r9, r1
 8014aa4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 8014aa8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 8014aac:	2200      	movs	r2, #0
 8014aae:	42b2      	cmp	r2, r6
 8014ab0:	dd12      	ble.n	8014ad8 <__kernel_rem_pio2+0x80>
 8014ab2:	aa18      	add	r2, sp, #96	; 0x60
 8014ab4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 8014ab8:	460e      	mov	r6, r1
 8014aba:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 8014abe:	f1cb 0a01 	rsb	sl, fp, #1
 8014ac2:	eb0a 0006 	add.w	r0, sl, r6
 8014ac6:	4581      	cmp	r9, r0
 8014ac8:	db25      	blt.n	8014b16 <__kernel_rem_pio2+0xbe>
 8014aca:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 8014d90 <__kernel_rem_pio2+0x338>
 8014ace:	f8dd e000 	ldr.w	lr, [sp]
 8014ad2:	4615      	mov	r5, r2
 8014ad4:	2000      	movs	r0, #0
 8014ad6:	e015      	b.n	8014b04 <__kernel_rem_pio2+0xac>
 8014ad8:	42d5      	cmn	r5, r2
 8014ada:	d409      	bmi.n	8014af0 <__kernel_rem_pio2+0x98>
 8014adc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8014ae0:	ee07 0a90 	vmov	s15, r0
 8014ae4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014ae8:	eca8 7b02 	vstmia	r8!, {d7}
 8014aec:	3201      	adds	r2, #1
 8014aee:	e7de      	b.n	8014aae <__kernel_rem_pio2+0x56>
 8014af0:	eeb0 7b46 	vmov.f64	d7, d6
 8014af4:	e7f8      	b.n	8014ae8 <__kernel_rem_pio2+0x90>
 8014af6:	ecbe 5b02 	vldmia	lr!, {d5}
 8014afa:	ed95 6b00 	vldr	d6, [r5]
 8014afe:	3001      	adds	r0, #1
 8014b00:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014b04:	4288      	cmp	r0, r1
 8014b06:	f1a5 0508 	sub.w	r5, r5, #8
 8014b0a:	ddf4      	ble.n	8014af6 <__kernel_rem_pio2+0x9e>
 8014b0c:	eca8 7b02 	vstmia	r8!, {d7}
 8014b10:	3208      	adds	r2, #8
 8014b12:	3601      	adds	r6, #1
 8014b14:	e7d5      	b.n	8014ac2 <__kernel_rem_pio2+0x6a>
 8014b16:	aa04      	add	r2, sp, #16
 8014b18:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 8014d98 <__kernel_rem_pio2+0x340>
 8014b1c:	ed9f aba0 	vldr	d10, [pc, #640]	; 8014da0 <__kernel_rem_pio2+0x348>
 8014b20:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8014b24:	9201      	str	r2, [sp, #4]
 8014b26:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 8014b2a:	464e      	mov	r6, r9
 8014b2c:	ab90      	add	r3, sp, #576	; 0x240
 8014b2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014b32:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 8014b36:	ab04      	add	r3, sp, #16
 8014b38:	4618      	mov	r0, r3
 8014b3a:	4632      	mov	r2, r6
 8014b3c:	2a00      	cmp	r2, #0
 8014b3e:	dc4e      	bgt.n	8014bde <__kernel_rem_pio2+0x186>
 8014b40:	4620      	mov	r0, r4
 8014b42:	e9cd 1302 	strd	r1, r3, [sp, #8]
 8014b46:	f000 fadf 	bl	8015108 <scalbn>
 8014b4a:	eeb0 8b40 	vmov.f64	d8, d0
 8014b4e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8014b52:	ee28 0b00 	vmul.f64	d0, d8, d0
 8014b56:	f000 fa63 	bl	8015020 <floor>
 8014b5a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8014b5e:	eea0 8b47 	vfms.f64	d8, d0, d7
 8014b62:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8014b66:	2c00      	cmp	r4, #0
 8014b68:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8014b6c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 8014b70:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014b74:	ee17 8a90 	vmov	r8, s15
 8014b78:	dd46      	ble.n	8014c08 <__kernel_rem_pio2+0x1b0>
 8014b7a:	1e70      	subs	r0, r6, #1
 8014b7c:	aa04      	add	r2, sp, #16
 8014b7e:	f1c4 0c18 	rsb	ip, r4, #24
 8014b82:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 8014b86:	fa45 f20c 	asr.w	r2, r5, ip
 8014b8a:	4490      	add	r8, r2
 8014b8c:	fa02 f20c 	lsl.w	r2, r2, ip
 8014b90:	1aad      	subs	r5, r5, r2
 8014b92:	aa04      	add	r2, sp, #16
 8014b94:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8014b98:	f1c4 0217 	rsb	r2, r4, #23
 8014b9c:	4115      	asrs	r5, r2
 8014b9e:	2d00      	cmp	r5, #0
 8014ba0:	dd41      	ble.n	8014c26 <__kernel_rem_pio2+0x1ce>
 8014ba2:	f04f 0c00 	mov.w	ip, #0
 8014ba6:	f108 0801 	add.w	r8, r8, #1
 8014baa:	4660      	mov	r0, ip
 8014bac:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8014bb0:	4566      	cmp	r6, ip
 8014bb2:	dc69      	bgt.n	8014c88 <__kernel_rem_pio2+0x230>
 8014bb4:	2c00      	cmp	r4, #0
 8014bb6:	dd03      	ble.n	8014bc0 <__kernel_rem_pio2+0x168>
 8014bb8:	2c01      	cmp	r4, #1
 8014bba:	d076      	beq.n	8014caa <__kernel_rem_pio2+0x252>
 8014bbc:	2c02      	cmp	r4, #2
 8014bbe:	d07f      	beq.n	8014cc0 <__kernel_rem_pio2+0x268>
 8014bc0:	2d02      	cmp	r5, #2
 8014bc2:	d130      	bne.n	8014c26 <__kernel_rem_pio2+0x1ce>
 8014bc4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014bc8:	ee30 8b48 	vsub.f64	d8, d0, d8
 8014bcc:	b358      	cbz	r0, 8014c26 <__kernel_rem_pio2+0x1ce>
 8014bce:	4620      	mov	r0, r4
 8014bd0:	9102      	str	r1, [sp, #8]
 8014bd2:	f000 fa99 	bl	8015108 <scalbn>
 8014bd6:	9902      	ldr	r1, [sp, #8]
 8014bd8:	ee38 8b40 	vsub.f64	d8, d8, d0
 8014bdc:	e023      	b.n	8014c26 <__kernel_rem_pio2+0x1ce>
 8014bde:	ee20 7b09 	vmul.f64	d7, d0, d9
 8014be2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8014be6:	3a01      	subs	r2, #1
 8014be8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8014bec:	ad68      	add	r5, sp, #416	; 0x1a0
 8014bee:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8014bf2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014bf6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8014bfa:	eca0 0a01 	vstmia	r0!, {s0}
 8014bfe:	ed95 0b00 	vldr	d0, [r5]
 8014c02:	ee37 0b00 	vadd.f64	d0, d7, d0
 8014c06:	e799      	b.n	8014b3c <__kernel_rem_pio2+0xe4>
 8014c08:	d105      	bne.n	8014c16 <__kernel_rem_pio2+0x1be>
 8014c0a:	1e72      	subs	r2, r6, #1
 8014c0c:	a804      	add	r0, sp, #16
 8014c0e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8014c12:	15ed      	asrs	r5, r5, #23
 8014c14:	e7c3      	b.n	8014b9e <__kernel_rem_pio2+0x146>
 8014c16:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8014c1a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c22:	da2f      	bge.n	8014c84 <__kernel_rem_pio2+0x22c>
 8014c24:	2500      	movs	r5, #0
 8014c26:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c2e:	f040 8087 	bne.w	8014d40 <__kernel_rem_pio2+0x2e8>
 8014c32:	1e73      	subs	r3, r6, #1
 8014c34:	4618      	mov	r0, r3
 8014c36:	f04f 0c00 	mov.w	ip, #0
 8014c3a:	4548      	cmp	r0, r9
 8014c3c:	da47      	bge.n	8014cce <__kernel_rem_pio2+0x276>
 8014c3e:	f1bc 0f00 	cmp.w	ip, #0
 8014c42:	d070      	beq.n	8014d26 <__kernel_rem_pio2+0x2ce>
 8014c44:	aa04      	add	r2, sp, #16
 8014c46:	3c18      	subs	r4, #24
 8014c48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8014c4c:	2a00      	cmp	r2, #0
 8014c4e:	d075      	beq.n	8014d3c <__kernel_rem_pio2+0x2e4>
 8014c50:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8014c54:	4620      	mov	r0, r4
 8014c56:	9300      	str	r3, [sp, #0]
 8014c58:	f000 fa56 	bl	8015108 <scalbn>
 8014c5c:	9b00      	ldr	r3, [sp, #0]
 8014c5e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8014d98 <__kernel_rem_pio2+0x340>
 8014c62:	461a      	mov	r2, r3
 8014c64:	2a00      	cmp	r2, #0
 8014c66:	f280 80ac 	bge.w	8014dc2 <__kernel_rem_pio2+0x36a>
 8014c6a:	4619      	mov	r1, r3
 8014c6c:	2000      	movs	r0, #0
 8014c6e:	2900      	cmp	r1, #0
 8014c70:	f2c0 80cd 	blt.w	8014e0e <__kernel_rem_pio2+0x3b6>
 8014c74:	aa68      	add	r2, sp, #416	; 0x1a0
 8014c76:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 8014c7a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 8014d90 <__kernel_rem_pio2+0x338>
 8014c7e:	4e4b      	ldr	r6, [pc, #300]	; (8014dac <__kernel_rem_pio2+0x354>)
 8014c80:	2200      	movs	r2, #0
 8014c82:	e0b8      	b.n	8014df6 <__kernel_rem_pio2+0x39e>
 8014c84:	2502      	movs	r5, #2
 8014c86:	e78c      	b.n	8014ba2 <__kernel_rem_pio2+0x14a>
 8014c88:	681a      	ldr	r2, [r3, #0]
 8014c8a:	b948      	cbnz	r0, 8014ca0 <__kernel_rem_pio2+0x248>
 8014c8c:	b11a      	cbz	r2, 8014c96 <__kernel_rem_pio2+0x23e>
 8014c8e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8014c92:	601a      	str	r2, [r3, #0]
 8014c94:	2201      	movs	r2, #1
 8014c96:	f10c 0c01 	add.w	ip, ip, #1
 8014c9a:	3304      	adds	r3, #4
 8014c9c:	4610      	mov	r0, r2
 8014c9e:	e787      	b.n	8014bb0 <__kernel_rem_pio2+0x158>
 8014ca0:	ebae 0202 	sub.w	r2, lr, r2
 8014ca4:	601a      	str	r2, [r3, #0]
 8014ca6:	4602      	mov	r2, r0
 8014ca8:	e7f5      	b.n	8014c96 <__kernel_rem_pio2+0x23e>
 8014caa:	1e72      	subs	r2, r6, #1
 8014cac:	ab04      	add	r3, sp, #16
 8014cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cb2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014cb6:	f10d 0c10 	add.w	ip, sp, #16
 8014cba:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 8014cbe:	e77f      	b.n	8014bc0 <__kernel_rem_pio2+0x168>
 8014cc0:	1e72      	subs	r2, r6, #1
 8014cc2:	ab04      	add	r3, sp, #16
 8014cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cc8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014ccc:	e7f3      	b.n	8014cb6 <__kernel_rem_pio2+0x25e>
 8014cce:	aa04      	add	r2, sp, #16
 8014cd0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8014cd4:	3801      	subs	r0, #1
 8014cd6:	ea4c 0c02 	orr.w	ip, ip, r2
 8014cda:	e7ae      	b.n	8014c3a <__kernel_rem_pio2+0x1e2>
 8014cdc:	3001      	adds	r0, #1
 8014cde:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014ce2:	2a00      	cmp	r2, #0
 8014ce4:	d0fa      	beq.n	8014cdc <__kernel_rem_pio2+0x284>
 8014ce6:	eb06 020b 	add.w	r2, r6, fp
 8014cea:	ad18      	add	r5, sp, #96	; 0x60
 8014cec:	1c73      	adds	r3, r6, #1
 8014cee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8014cf2:	4406      	add	r6, r0
 8014cf4:	429e      	cmp	r6, r3
 8014cf6:	f6ff af19 	blt.w	8014b2c <__kernel_rem_pio2+0xd4>
 8014cfa:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 8014cfe:	9d00      	ldr	r5, [sp, #0]
 8014d00:	ee07 0a90 	vmov	s15, r0
 8014d04:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014d08:	2000      	movs	r0, #0
 8014d0a:	eca2 7b02 	vstmia	r2!, {d7}
 8014d0e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8014d90 <__kernel_rem_pio2+0x338>
 8014d12:	4694      	mov	ip, r2
 8014d14:	4288      	cmp	r0, r1
 8014d16:	dd09      	ble.n	8014d2c <__kernel_rem_pio2+0x2d4>
 8014d18:	a868      	add	r0, sp, #416	; 0x1a0
 8014d1a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 8014d1e:	ed80 7b00 	vstr	d7, [r0]
 8014d22:	3301      	adds	r3, #1
 8014d24:	e7e6      	b.n	8014cf4 <__kernel_rem_pio2+0x29c>
 8014d26:	9b01      	ldr	r3, [sp, #4]
 8014d28:	2001      	movs	r0, #1
 8014d2a:	e7d8      	b.n	8014cde <__kernel_rem_pio2+0x286>
 8014d2c:	ecb5 5b02 	vldmia	r5!, {d5}
 8014d30:	ed3c 6b02 	vldmdb	ip!, {d6}
 8014d34:	3001      	adds	r0, #1
 8014d36:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014d3a:	e7eb      	b.n	8014d14 <__kernel_rem_pio2+0x2bc>
 8014d3c:	3b01      	subs	r3, #1
 8014d3e:	e781      	b.n	8014c44 <__kernel_rem_pio2+0x1ec>
 8014d40:	4260      	negs	r0, r4
 8014d42:	eeb0 0b48 	vmov.f64	d0, d8
 8014d46:	f000 f9df 	bl	8015108 <scalbn>
 8014d4a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8014da0 <__kernel_rem_pio2+0x348>
 8014d4e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8014d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d56:	db2b      	blt.n	8014db0 <__kernel_rem_pio2+0x358>
 8014d58:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8014d98 <__kernel_rem_pio2+0x340>
 8014d5c:	ee20 7b07 	vmul.f64	d7, d0, d7
 8014d60:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8014d64:	aa04      	add	r2, sp, #16
 8014d66:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8014d6a:	eea5 0b46 	vfms.f64	d0, d5, d6
 8014d6e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014d72:	a904      	add	r1, sp, #16
 8014d74:	ee10 3a10 	vmov	r3, s0
 8014d78:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014d7c:	ee17 2a10 	vmov	r2, s14
 8014d80:	1c73      	adds	r3, r6, #1
 8014d82:	3418      	adds	r4, #24
 8014d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014d88:	e762      	b.n	8014c50 <__kernel_rem_pio2+0x1f8>
 8014d8a:	bf00      	nop
 8014d8c:	f3af 8000 	nop.w
	...
 8014d9c:	3e700000 	.word	0x3e700000
 8014da0:	00000000 	.word	0x00000000
 8014da4:	41700000 	.word	0x41700000
 8014da8:	08015460 	.word	0x08015460
 8014dac:	08015420 	.word	0x08015420
 8014db0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8014db4:	aa04      	add	r2, sp, #16
 8014db6:	ee10 3a10 	vmov	r3, s0
 8014dba:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014dbe:	4633      	mov	r3, r6
 8014dc0:	e746      	b.n	8014c50 <__kernel_rem_pio2+0x1f8>
 8014dc2:	a804      	add	r0, sp, #16
 8014dc4:	a968      	add	r1, sp, #416	; 0x1a0
 8014dc6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8014dca:	9000      	str	r0, [sp, #0]
 8014dcc:	ee07 0a90 	vmov	s15, r0
 8014dd0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014dd4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014dd8:	3a01      	subs	r2, #1
 8014dda:	ee27 7b00 	vmul.f64	d7, d7, d0
 8014dde:	ee20 0b06 	vmul.f64	d0, d0, d6
 8014de2:	ed81 7b00 	vstr	d7, [r1]
 8014de6:	e73d      	b.n	8014c64 <__kernel_rem_pio2+0x20c>
 8014de8:	ecb6 5b02 	vldmia	r6!, {d5}
 8014dec:	ecb4 6b02 	vldmia	r4!, {d6}
 8014df0:	3201      	adds	r2, #1
 8014df2:	eea5 7b06 	vfma.f64	d7, d5, d6
 8014df6:	454a      	cmp	r2, r9
 8014df8:	dc01      	bgt.n	8014dfe <__kernel_rem_pio2+0x3a6>
 8014dfa:	4290      	cmp	r0, r2
 8014dfc:	daf4      	bge.n	8014de8 <__kernel_rem_pio2+0x390>
 8014dfe:	aa40      	add	r2, sp, #256	; 0x100
 8014e00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8014e04:	ed82 7b00 	vstr	d7, [r2]
 8014e08:	3901      	subs	r1, #1
 8014e0a:	3001      	adds	r0, #1
 8014e0c:	e72f      	b.n	8014c6e <__kernel_rem_pio2+0x216>
 8014e0e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8014e10:	2a02      	cmp	r2, #2
 8014e12:	dc0a      	bgt.n	8014e2a <__kernel_rem_pio2+0x3d2>
 8014e14:	2a00      	cmp	r2, #0
 8014e16:	dc5a      	bgt.n	8014ece <__kernel_rem_pio2+0x476>
 8014e18:	d039      	beq.n	8014e8e <__kernel_rem_pio2+0x436>
 8014e1a:	f008 0007 	and.w	r0, r8, #7
 8014e1e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 8014e22:	ecbd 8b06 	vpop	{d8-d10}
 8014e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e2a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 8014e2c:	2a03      	cmp	r2, #3
 8014e2e:	d1f4      	bne.n	8014e1a <__kernel_rem_pio2+0x3c2>
 8014e30:	aa40      	add	r2, sp, #256	; 0x100
 8014e32:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014e36:	4611      	mov	r1, r2
 8014e38:	4618      	mov	r0, r3
 8014e3a:	2800      	cmp	r0, #0
 8014e3c:	f1a1 0108 	sub.w	r1, r1, #8
 8014e40:	dc52      	bgt.n	8014ee8 <__kernel_rem_pio2+0x490>
 8014e42:	4619      	mov	r1, r3
 8014e44:	2901      	cmp	r1, #1
 8014e46:	f1a2 0208 	sub.w	r2, r2, #8
 8014e4a:	dc5d      	bgt.n	8014f08 <__kernel_rem_pio2+0x4b0>
 8014e4c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 8014f50 <__kernel_rem_pio2+0x4f8>
 8014e50:	2b01      	cmp	r3, #1
 8014e52:	dc69      	bgt.n	8014f28 <__kernel_rem_pio2+0x4d0>
 8014e54:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 8014e58:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 8014e5c:	2d00      	cmp	r5, #0
 8014e5e:	d16c      	bne.n	8014f3a <__kernel_rem_pio2+0x4e2>
 8014e60:	ed87 5b00 	vstr	d5, [r7]
 8014e64:	ed87 6b02 	vstr	d6, [r7, #8]
 8014e68:	ed87 7b04 	vstr	d7, [r7, #16]
 8014e6c:	e7d5      	b.n	8014e1a <__kernel_rem_pio2+0x3c2>
 8014e6e:	aa40      	add	r2, sp, #256	; 0x100
 8014e70:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014e74:	ed92 6b00 	vldr	d6, [r2]
 8014e78:	3b01      	subs	r3, #1
 8014e7a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	daf5      	bge.n	8014e6e <__kernel_rem_pio2+0x416>
 8014e82:	b10d      	cbz	r5, 8014e88 <__kernel_rem_pio2+0x430>
 8014e84:	eeb1 7b47 	vneg.f64	d7, d7
 8014e88:	ed87 7b00 	vstr	d7, [r7]
 8014e8c:	e7c5      	b.n	8014e1a <__kernel_rem_pio2+0x3c2>
 8014e8e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8014f50 <__kernel_rem_pio2+0x4f8>
 8014e92:	e7f4      	b.n	8014e7e <__kernel_rem_pio2+0x426>
 8014e94:	a940      	add	r1, sp, #256	; 0x100
 8014e96:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8014e9a:	ed91 7b00 	vldr	d7, [r1]
 8014e9e:	3a01      	subs	r2, #1
 8014ea0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8014ea4:	2a00      	cmp	r2, #0
 8014ea6:	daf5      	bge.n	8014e94 <__kernel_rem_pio2+0x43c>
 8014ea8:	b1ad      	cbz	r5, 8014ed6 <__kernel_rem_pio2+0x47e>
 8014eaa:	eeb1 7b46 	vneg.f64	d7, d6
 8014eae:	ed87 7b00 	vstr	d7, [r7]
 8014eb2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 8014eb6:	a942      	add	r1, sp, #264	; 0x108
 8014eb8:	2201      	movs	r2, #1
 8014eba:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	da0c      	bge.n	8014edc <__kernel_rem_pio2+0x484>
 8014ec2:	b10d      	cbz	r5, 8014ec8 <__kernel_rem_pio2+0x470>
 8014ec4:	eeb1 7b47 	vneg.f64	d7, d7
 8014ec8:	ed87 7b02 	vstr	d7, [r7, #8]
 8014ecc:	e7a5      	b.n	8014e1a <__kernel_rem_pio2+0x3c2>
 8014ece:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8014f50 <__kernel_rem_pio2+0x4f8>
 8014ed2:	461a      	mov	r2, r3
 8014ed4:	e7e6      	b.n	8014ea4 <__kernel_rem_pio2+0x44c>
 8014ed6:	eeb0 7b46 	vmov.f64	d7, d6
 8014eda:	e7e8      	b.n	8014eae <__kernel_rem_pio2+0x456>
 8014edc:	ecb1 6b02 	vldmia	r1!, {d6}
 8014ee0:	3201      	adds	r2, #1
 8014ee2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014ee6:	e7ea      	b.n	8014ebe <__kernel_rem_pio2+0x466>
 8014ee8:	ed91 7b00 	vldr	d7, [r1]
 8014eec:	ed91 5b02 	vldr	d5, [r1, #8]
 8014ef0:	3801      	subs	r0, #1
 8014ef2:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014ef6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014efa:	ed81 6b00 	vstr	d6, [r1]
 8014efe:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014f02:	ed81 7b02 	vstr	d7, [r1, #8]
 8014f06:	e798      	b.n	8014e3a <__kernel_rem_pio2+0x3e2>
 8014f08:	ed92 7b00 	vldr	d7, [r2]
 8014f0c:	ed92 5b02 	vldr	d5, [r2, #8]
 8014f10:	3901      	subs	r1, #1
 8014f12:	ee37 6b05 	vadd.f64	d6, d7, d5
 8014f16:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014f1a:	ed82 6b00 	vstr	d6, [r2]
 8014f1e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8014f22:	ed82 7b02 	vstr	d7, [r2, #8]
 8014f26:	e78d      	b.n	8014e44 <__kernel_rem_pio2+0x3ec>
 8014f28:	aa40      	add	r2, sp, #256	; 0x100
 8014f2a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8014f2e:	ed92 6b00 	vldr	d6, [r2]
 8014f32:	3b01      	subs	r3, #1
 8014f34:	ee37 7b06 	vadd.f64	d7, d7, d6
 8014f38:	e78a      	b.n	8014e50 <__kernel_rem_pio2+0x3f8>
 8014f3a:	eeb1 5b45 	vneg.f64	d5, d5
 8014f3e:	eeb1 6b46 	vneg.f64	d6, d6
 8014f42:	ed87 5b00 	vstr	d5, [r7]
 8014f46:	eeb1 7b47 	vneg.f64	d7, d7
 8014f4a:	ed87 6b02 	vstr	d6, [r7, #8]
 8014f4e:	e78b      	b.n	8014e68 <__kernel_rem_pio2+0x410>
	...

08014f58 <__kernel_sin>:
 8014f58:	ee10 3a90 	vmov	r3, s1
 8014f5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014f60:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014f64:	da04      	bge.n	8014f70 <__kernel_sin+0x18>
 8014f66:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8014f6a:	ee17 3a90 	vmov	r3, s15
 8014f6e:	b35b      	cbz	r3, 8014fc8 <__kernel_sin+0x70>
 8014f70:	ee20 6b00 	vmul.f64	d6, d0, d0
 8014f74:	ee20 5b06 	vmul.f64	d5, d0, d6
 8014f78:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8014fd0 <__kernel_sin+0x78>
 8014f7c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014fd8 <__kernel_sin+0x80>
 8014f80:	eea6 4b07 	vfma.f64	d4, d6, d7
 8014f84:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014fe0 <__kernel_sin+0x88>
 8014f88:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014f8c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014fe8 <__kernel_sin+0x90>
 8014f90:	eea7 4b06 	vfma.f64	d4, d7, d6
 8014f94:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8014ff0 <__kernel_sin+0x98>
 8014f98:	eea4 7b06 	vfma.f64	d7, d4, d6
 8014f9c:	b930      	cbnz	r0, 8014fac <__kernel_sin+0x54>
 8014f9e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8014ff8 <__kernel_sin+0xa0>
 8014fa2:	eea6 4b07 	vfma.f64	d4, d6, d7
 8014fa6:	eea4 0b05 	vfma.f64	d0, d4, d5
 8014faa:	4770      	bx	lr
 8014fac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8014fb0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8014fb4:	eea1 7b04 	vfma.f64	d7, d1, d4
 8014fb8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8014fbc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8015000 <__kernel_sin+0xa8>
 8014fc0:	eea5 1b07 	vfma.f64	d1, d5, d7
 8014fc4:	ee30 0b41 	vsub.f64	d0, d0, d1
 8014fc8:	4770      	bx	lr
 8014fca:	bf00      	nop
 8014fcc:	f3af 8000 	nop.w
 8014fd0:	5acfd57c 	.word	0x5acfd57c
 8014fd4:	3de5d93a 	.word	0x3de5d93a
 8014fd8:	8a2b9ceb 	.word	0x8a2b9ceb
 8014fdc:	be5ae5e6 	.word	0xbe5ae5e6
 8014fe0:	57b1fe7d 	.word	0x57b1fe7d
 8014fe4:	3ec71de3 	.word	0x3ec71de3
 8014fe8:	19c161d5 	.word	0x19c161d5
 8014fec:	bf2a01a0 	.word	0xbf2a01a0
 8014ff0:	1110f8a6 	.word	0x1110f8a6
 8014ff4:	3f811111 	.word	0x3f811111
 8014ff8:	55555549 	.word	0x55555549
 8014ffc:	bfc55555 	.word	0xbfc55555
 8015000:	55555549 	.word	0x55555549
 8015004:	3fc55555 	.word	0x3fc55555

08015008 <fabs>:
 8015008:	ec51 0b10 	vmov	r0, r1, d0
 801500c:	ee10 2a10 	vmov	r2, s0
 8015010:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015014:	ec43 2b10 	vmov	d0, r2, r3
 8015018:	4770      	bx	lr
 801501a:	0000      	movs	r0, r0
 801501c:	0000      	movs	r0, r0
	...

08015020 <floor>:
 8015020:	ee10 1a90 	vmov	r1, s1
 8015024:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015028:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801502c:	2b13      	cmp	r3, #19
 801502e:	b530      	push	{r4, r5, lr}
 8015030:	ee10 0a10 	vmov	r0, s0
 8015034:	ee10 5a10 	vmov	r5, s0
 8015038:	dc31      	bgt.n	801509e <floor+0x7e>
 801503a:	2b00      	cmp	r3, #0
 801503c:	da15      	bge.n	801506a <floor+0x4a>
 801503e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80150f8 <floor+0xd8>
 8015042:	ee30 0b07 	vadd.f64	d0, d0, d7
 8015046:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801504a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801504e:	dd07      	ble.n	8015060 <floor+0x40>
 8015050:	2900      	cmp	r1, #0
 8015052:	da4e      	bge.n	80150f2 <floor+0xd2>
 8015054:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015058:	4318      	orrs	r0, r3
 801505a:	d001      	beq.n	8015060 <floor+0x40>
 801505c:	4928      	ldr	r1, [pc, #160]	; (8015100 <floor+0xe0>)
 801505e:	2000      	movs	r0, #0
 8015060:	460b      	mov	r3, r1
 8015062:	4602      	mov	r2, r0
 8015064:	ec43 2b10 	vmov	d0, r2, r3
 8015068:	e020      	b.n	80150ac <floor+0x8c>
 801506a:	4a26      	ldr	r2, [pc, #152]	; (8015104 <floor+0xe4>)
 801506c:	411a      	asrs	r2, r3
 801506e:	ea01 0402 	and.w	r4, r1, r2
 8015072:	4304      	orrs	r4, r0
 8015074:	d01a      	beq.n	80150ac <floor+0x8c>
 8015076:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80150f8 <floor+0xd8>
 801507a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801507e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8015082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015086:	ddeb      	ble.n	8015060 <floor+0x40>
 8015088:	2900      	cmp	r1, #0
 801508a:	bfbe      	ittt	lt
 801508c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8015090:	fa40 f303 	asrlt.w	r3, r0, r3
 8015094:	18c9      	addlt	r1, r1, r3
 8015096:	ea21 0102 	bic.w	r1, r1, r2
 801509a:	2000      	movs	r0, #0
 801509c:	e7e0      	b.n	8015060 <floor+0x40>
 801509e:	2b33      	cmp	r3, #51	; 0x33
 80150a0:	dd05      	ble.n	80150ae <floor+0x8e>
 80150a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80150a6:	d101      	bne.n	80150ac <floor+0x8c>
 80150a8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80150ac:	bd30      	pop	{r4, r5, pc}
 80150ae:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80150b2:	f04f 32ff 	mov.w	r2, #4294967295
 80150b6:	40e2      	lsrs	r2, r4
 80150b8:	4202      	tst	r2, r0
 80150ba:	d0f7      	beq.n	80150ac <floor+0x8c>
 80150bc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80150f8 <floor+0xd8>
 80150c0:	ee30 0b07 	vadd.f64	d0, d0, d7
 80150c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80150c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150cc:	ddc8      	ble.n	8015060 <floor+0x40>
 80150ce:	2900      	cmp	r1, #0
 80150d0:	da02      	bge.n	80150d8 <floor+0xb8>
 80150d2:	2b14      	cmp	r3, #20
 80150d4:	d103      	bne.n	80150de <floor+0xbe>
 80150d6:	3101      	adds	r1, #1
 80150d8:	ea20 0002 	bic.w	r0, r0, r2
 80150dc:	e7c0      	b.n	8015060 <floor+0x40>
 80150de:	2401      	movs	r4, #1
 80150e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80150e4:	fa04 f303 	lsl.w	r3, r4, r3
 80150e8:	4418      	add	r0, r3
 80150ea:	42a8      	cmp	r0, r5
 80150ec:	bf38      	it	cc
 80150ee:	1909      	addcc	r1, r1, r4
 80150f0:	e7f2      	b.n	80150d8 <floor+0xb8>
 80150f2:	2000      	movs	r0, #0
 80150f4:	4601      	mov	r1, r0
 80150f6:	e7b3      	b.n	8015060 <floor+0x40>
 80150f8:	8800759c 	.word	0x8800759c
 80150fc:	7e37e43c 	.word	0x7e37e43c
 8015100:	bff00000 	.word	0xbff00000
 8015104:	000fffff 	.word	0x000fffff

08015108 <scalbn>:
 8015108:	b082      	sub	sp, #8
 801510a:	ed8d 0b00 	vstr	d0, [sp]
 801510e:	9b01      	ldr	r3, [sp, #4]
 8015110:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015114:	b9a2      	cbnz	r2, 8015140 <scalbn+0x38>
 8015116:	9a00      	ldr	r2, [sp, #0]
 8015118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801511c:	4313      	orrs	r3, r2
 801511e:	d03a      	beq.n	8015196 <scalbn+0x8e>
 8015120:	ed9f 7b35 	vldr	d7, [pc, #212]	; 80151f8 <scalbn+0xf0>
 8015124:	4b40      	ldr	r3, [pc, #256]	; (8015228 <scalbn+0x120>)
 8015126:	ee20 7b07 	vmul.f64	d7, d0, d7
 801512a:	4298      	cmp	r0, r3
 801512c:	ed8d 7b00 	vstr	d7, [sp]
 8015130:	da11      	bge.n	8015156 <scalbn+0x4e>
 8015132:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8015200 <scalbn+0xf8>
 8015136:	ed9d 6b00 	vldr	d6, [sp]
 801513a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801513e:	e007      	b.n	8015150 <scalbn+0x48>
 8015140:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015144:	428a      	cmp	r2, r1
 8015146:	d10a      	bne.n	801515e <scalbn+0x56>
 8015148:	ed9d 7b00 	vldr	d7, [sp]
 801514c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8015150:	ed8d 7b00 	vstr	d7, [sp]
 8015154:	e01f      	b.n	8015196 <scalbn+0x8e>
 8015156:	9b01      	ldr	r3, [sp, #4]
 8015158:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801515c:	3a36      	subs	r2, #54	; 0x36
 801515e:	4402      	add	r2, r0
 8015160:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015164:	428a      	cmp	r2, r1
 8015166:	dd0a      	ble.n	801517e <scalbn+0x76>
 8015168:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8015208 <scalbn+0x100>
 801516c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8015210 <scalbn+0x108>
 8015170:	eeb0 6b47 	vmov.f64	d6, d7
 8015174:	9b01      	ldr	r3, [sp, #4]
 8015176:	2b00      	cmp	r3, #0
 8015178:	fe27 7b05 	vselge.f64	d7, d7, d5
 801517c:	e7dd      	b.n	801513a <scalbn+0x32>
 801517e:	2a00      	cmp	r2, #0
 8015180:	dd0d      	ble.n	801519e <scalbn+0x96>
 8015182:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015186:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801518a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801518e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8015192:	e9cd 0100 	strd	r0, r1, [sp]
 8015196:	ed9d 0b00 	vldr	d0, [sp]
 801519a:	b002      	add	sp, #8
 801519c:	4770      	bx	lr
 801519e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80151a2:	da18      	bge.n	80151d6 <scalbn+0xce>
 80151a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80151a8:	4298      	cmp	r0, r3
 80151aa:	9b01      	ldr	r3, [sp, #4]
 80151ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80151b0:	dd09      	ble.n	80151c6 <scalbn+0xbe>
 80151b2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8015208 <scalbn+0x100>
 80151b6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 8015210 <scalbn+0x108>
 80151ba:	eeb0 6b47 	vmov.f64	d6, d7
 80151be:	2b00      	cmp	r3, #0
 80151c0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 80151c4:	e7b9      	b.n	801513a <scalbn+0x32>
 80151c6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8015200 <scalbn+0xf8>
 80151ca:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8015218 <scalbn+0x110>
 80151ce:	eeb0 6b47 	vmov.f64	d6, d7
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	e7f4      	b.n	80151c0 <scalbn+0xb8>
 80151d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80151de:	3236      	adds	r2, #54	; 0x36
 80151e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80151e4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80151e8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8015220 <scalbn+0x118>
 80151ec:	ec41 0b17 	vmov	d7, r0, r1
 80151f0:	e7a3      	b.n	801513a <scalbn+0x32>
 80151f2:	bf00      	nop
 80151f4:	f3af 8000 	nop.w
 80151f8:	00000000 	.word	0x00000000
 80151fc:	43500000 	.word	0x43500000
 8015200:	c2f8f359 	.word	0xc2f8f359
 8015204:	01a56e1f 	.word	0x01a56e1f
 8015208:	8800759c 	.word	0x8800759c
 801520c:	7e37e43c 	.word	0x7e37e43c
 8015210:	8800759c 	.word	0x8800759c
 8015214:	fe37e43c 	.word	0xfe37e43c
 8015218:	c2f8f359 	.word	0xc2f8f359
 801521c:	81a56e1f 	.word	0x81a56e1f
 8015220:	00000000 	.word	0x00000000
 8015224:	3c900000 	.word	0x3c900000
 8015228:	ffff3cb0 	.word	0xffff3cb0

0801522c <_init>:
 801522c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801522e:	bf00      	nop
 8015230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015232:	bc08      	pop	{r3}
 8015234:	469e      	mov	lr, r3
 8015236:	4770      	bx	lr

08015238 <_fini>:
 8015238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801523a:	bf00      	nop
 801523c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801523e:	bc08      	pop	{r3}
 8015240:	469e      	mov	lr, r3
 8015242:	4770      	bx	lr
