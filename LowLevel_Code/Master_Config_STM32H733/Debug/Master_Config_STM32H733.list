
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000180bc  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08018390  08018390  00028390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018688  08018688  00028688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018690  08018690  00028690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018694  08018694  00028694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  08018698  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 RAM_D2        0000003d  20000094  0801872c  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000013b8  200000d8  08018769  000300d8  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20001490  08018769  00031490  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300d1  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002cc18  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004c80  00000000  00000000  0005cd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001dc8  00000000  00000000  00061998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001bd8  00000000  00000000  00063760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039a8f  00000000  00000000  00065338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002d010  00000000  00000000  0009edc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016d106  00000000  00000000  000cbdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00238edd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008180  00000000  00000000  00238f30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000d8 	.word	0x200000d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018374 	.word	0x08018374

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000dc 	.word	0x200000dc
 800030c:	08018374 	.word	0x08018374

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

double EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8ef 	bl	8000808 <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	89db      	ldrh	r3, [r3, #14]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000636:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000658 <EncPulse2Rad_Read+0x44>
 800063a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	ed93 7b08 	vldr	d7, [r3, #32]
 8000648:	ee36 7b47 	vsub.f64	d7, d6, d7
//	return (Enc->Position * 0.000383495f);
}
 800064c:	eeb0 0b47 	vmov.f64	d0, d7
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	39c90fd4 	.word	0x39c90fd4
 800065c:	00000000 	.word	0x00000000

08000660 <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,double offset) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6178      	str	r0, [r7, #20]
 8000668:	6139      	str	r1, [r7, #16]
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	ed87 0b00 	vstr	d0, [r7]
	dev->hspiHandle = hspiHandle;
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	8c3a      	ldrh	r2, [r7, #32]
 8000688:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 800068a:	8c3b      	ldrh	r3, [r7, #32]
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f00c fbc9 	bl	800ce28 <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2200      	movs	r2, #0
 800069a:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	2200      	movs	r2, #0
 80006a0:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	2200      	movs	r2, #0
 80006a6:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	2200      	movs	r2, #0
 80006ac:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	2200      	movs	r2, #0
 80006b2:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	2200      	movs	r2, #0
 80006b8:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2200      	movs	r2, #0
 80006be:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	2200      	movs	r2, #0
 80006c4:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2200      	movs	r2, #0
 80006ca:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2200      	movs	r2, #0
 80006d0:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006d2:	ed97 7b00 	vldr	d7, [r7]
 80006d6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80006f0 <AS5047U_init+0x90>
 80006da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	ed83 7b08 	vstr	d7, [r3, #32]
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	f3af 8000 	nop.w
 80006f0:	80000000 	.word	0x80000000
 80006f4:	3f3921fa 	.word	0x3f3921fa

080006f8 <AS5047U_Write>:

/*
 * This function for Non-Volatile Registers (OTP) Only
 */

inline void AS5047U_Write(AS5047U *dev,uint16_t Register_Address, uint16_t Data){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
 8000704:	4613      	mov	r3, r2
 8000706:	803b      	strh	r3, [r7, #0]
	uint8_t Buffer[3] = {};
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <AS5047U_Write+0x10c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	723b      	strb	r3, [r7, #8]
 800070e:	f107 0309 	add.w	r3, r7, #9
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]

	Buffer[0] = ((uint8_t) (Register_Address >> 8)) & 0xBF;
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000722:	b2db      	uxtb	r3, r3
 8000724:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Register_Address & 0xFF);
 8000726:	887b      	ldrh	r3, [r7, #2]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f107 0108 	add.w	r1, r7, #8
 8000734:	2202      	movs	r2, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f009 f9ec 	bl	8009b14 <HAL_CRC_Calculate>
 800073c:	4603      	mov	r3, r0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6898      	ldr	r0, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	899b      	ldrh	r3, [r3, #12]
 800074e:	2200      	movs	r2, #0
 8000750:	4619      	mov	r1, r3
 8000752:	f00c fb69 	bl	800ce28 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 8000756:	2300      	movs	r3, #0
 8000758:	81fb      	strh	r3, [r7, #14]
 800075a:	e002      	b.n	8000762 <AS5047U_Write+0x6a>
 800075c:	89fb      	ldrh	r3, [r7, #14]
 800075e:	3301      	adds	r3, #1
 8000760:	81fb      	strh	r3, [r7, #14]
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	f240 2226 	movw	r2, #550	; 0x226
 8000768:	4293      	cmp	r3, r2
 800076a:	d9f7      	bls.n	800075c <AS5047U_Write+0x64>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	f107 0108 	add.w	r1, r7, #8
 8000774:	2301      	movs	r3, #1
 8000776:	2203      	movs	r2, #3
 8000778:	f011 f86a 	bl	8011850 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6898      	ldr	r0, [r3, #8]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	f00c fb4e 	bl	800ce28 <HAL_GPIO_WritePin>

	Buffer[0] = (uint8_t) (Data >> 8);
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	0a1b      	lsrs	r3, r3, #8
 8000790:	b29b      	uxth	r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Data & 0xFF);
 8000796:	883b      	ldrh	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f107 0108 	add.w	r1, r7, #8
 80007a4:	2202      	movs	r2, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f009 f9b4 	bl	8009b14 <HAL_CRC_Calculate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6898      	ldr	r0, [r3, #8]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	899b      	ldrh	r3, [r3, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	f00c fb31 	bl	800ce28 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 80007c6:	2300      	movs	r3, #0
 80007c8:	81bb      	strh	r3, [r7, #12]
 80007ca:	e002      	b.n	80007d2 <AS5047U_Write+0xda>
 80007cc:	89bb      	ldrh	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	81bb      	strh	r3, [r7, #12]
 80007d2:	89bb      	ldrh	r3, [r7, #12]
 80007d4:	f240 2226 	movw	r2, #550	; 0x226
 80007d8:	4293      	cmp	r3, r2
 80007da:	d9f7      	bls.n	80007cc <AS5047U_Write+0xd4>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	f107 0108 	add.w	r1, r7, #8
 80007e4:	2301      	movs	r3, #1
 80007e6:	2203      	movs	r2, #3
 80007e8:	f011 f832 	bl	8011850 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6898      	ldr	r0, [r3, #8]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f00c fb16 	bl	800ce28 <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	08018390 	.word	0x08018390

08000808 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 8000814:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000818:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 800081a:	2300      	movs	r3, #0
 800081c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i=0; i <= 400; i++);
 800081e:	2300      	movs	r3, #0
 8000820:	82fb      	strh	r3, [r7, #22]
 8000822:	e002      	b.n	800082a <AS5047U_Position_Highspeed_Read+0x22>
 8000824:	8afb      	ldrh	r3, [r7, #22]
 8000826:	3301      	adds	r3, #1
 8000828:	82fb      	strh	r3, [r7, #22]
 800082a:	8afb      	ldrh	r3, [r7, #22]
 800082c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000830:	d9f8      	bls.n	8000824 <AS5047U_Position_Highspeed_Read+0x1c>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6898      	ldr	r0, [r3, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	899b      	ldrh	r3, [r3, #12]
 800083a:	2200      	movs	r2, #0
 800083c:	4619      	mov	r1, r3
 800083e:	f00c faf3 	bl	800ce28 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f107 0110 	add.w	r1, r7, #16
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	2202      	movs	r2, #2
 800084e:	f010 ffff 	bl	8011850 <HAL_SPI_Transmit>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6898      	ldr	r0, [r3, #8]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	899b      	ldrh	r3, [r3, #12]
 800085a:	2201      	movs	r2, #1
 800085c:	4619      	mov	r1, r3
 800085e:	f00c fae3 	bl	800ce28 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 8000862:	2300      	movs	r3, #0
 8000864:	82bb      	strh	r3, [r7, #20]
 8000866:	e002      	b.n	800086e <AS5047U_Position_Highspeed_Read+0x66>
 8000868:	8abb      	ldrh	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	82bb      	strh	r3, [r7, #20]
 800086e:	8abb      	ldrh	r3, [r7, #20]
 8000870:	f240 2226 	movw	r2, #550	; 0x226
 8000874:	4293      	cmp	r3, r2
 8000876:	d9f7      	bls.n	8000868 <AS5047U_Position_Highspeed_Read+0x60>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6898      	ldr	r0, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	899b      	ldrh	r3, [r3, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	f00c fad0 	bl	800ce28 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	f107 010c 	add.w	r1, r7, #12
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2202      	movs	r2, #2
 8000894:	f011 f9ce 	bl	8011c34 <HAL_SPI_Receive>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6898      	ldr	r0, [r3, #8]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	899b      	ldrh	r3, [r3, #12]
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	f00c fac0 	bl	800ce28 <HAL_GPIO_WritePin>
	if (dir == 1){
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d111      	bne.n	80008d2 <AS5047U_Position_Highspeed_Read+0xca>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	7b7b      	ldrb	r3, [r7, #13]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008c8:	4053      	eors	r3, r2
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	81da      	strh	r2, [r3, #14]
 80008d0:	e00c      	b.n	80008ec <AS5047U_Position_Highspeed_Read+0xe4>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008dc:	b21a      	sxth	r2, r3
 80008de:	7b7b      	ldrb	r3, [r7, #13]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	89db      	ldrh	r3, [r3, #14]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Neopixel_Init>:
 */

#include "Neopixel.h"

void Neopixel_Init(NeopixelParameter *Neopixel_led, TIM_HandleTypeDef *htim_in,
		uint32_t Channel_in) {
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	Neopixel_led->htim = htim_in;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Neopixel_led->timer_Channel = Channel_in;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	Neopixel_led->Pulse_High = (uint16_t) (htim_in->Init.Period * 0.66f);
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	ee07 3a90 	vmov	s15, r3
 800091c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000920:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000968 <Neopixel_Init+0x70>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800092c:	ee17 3a90 	vmov	r3, s15
 8000930:	b29a      	uxth	r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
	Neopixel_led->Pulse_Low = (uint16_t) (htim_in->Init.Period * 0.33f);
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000944:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800096c <Neopixel_Init+0x74>
 8000948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800094c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000950:	ee17 3a90 	vmov	r3, s15
 8000954:	b29a      	uxth	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	3f28f5c3 	.word	0x3f28f5c3
 800096c:	3ea8f5c3 	.word	0x3ea8f5c3

08000970 <Neopixel_Set>:

inline void Neopixel_Set(NeopixelParameter *Neopixel_led, uint8_t LEDnum,
		uint8_t Red, uint8_t Green, uint8_t Blue) {
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	4608      	mov	r0, r1
 800097a:	4611      	mov	r1, r2
 800097c:	461a      	mov	r2, r3
 800097e:	4603      	mov	r3, r0
 8000980:	70fb      	strb	r3, [r7, #3]
 8000982:	460b      	mov	r3, r1
 8000984:	70bb      	strb	r3, [r7, #2]
 8000986:	4613      	mov	r3, r2
 8000988:	707b      	strb	r3, [r7, #1]
	Neopixel_led->LED_Data[LEDnum][0] = Green;
 800098a:	78fa      	ldrb	r2, [r7, #3]
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	440b      	add	r3, r1
 8000996:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800099a:	787a      	ldrb	r2, [r7, #1]
 800099c:	701a      	strb	r2, [r3, #0]
	Neopixel_led->LED_Data[LEDnum][1] = Red;
 800099e:	78fa      	ldrb	r2, [r7, #3]
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	4613      	mov	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	f203 1345 	addw	r3, r3, #325	; 0x145
 80009ae:	78ba      	ldrb	r2, [r7, #2]
 80009b0:	701a      	strb	r2, [r3, #0]
	Neopixel_led->LED_Data[LEDnum][2] = Blue;
 80009b2:	78fa      	ldrb	r2, [r7, #3]
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	440b      	add	r3, r1
 80009be:	f503 73a3 	add.w	r3, r3, #326	; 0x146
 80009c2:	7c3a      	ldrb	r2, [r7, #16]
 80009c4:	701a      	strb	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <Neopixel_Sent>:

inline void Neopixel_Sent(NeopixelParameter *Neopixel_led) {
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b088      	sub	sp, #32
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	uint32_t index = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
	uint32_t data;
	for (int j = 0; j < NUM_LED; j++) {
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	e046      	b.n	8000a72 <Neopixel_Sent+0xa0>
		data = ((Neopixel_led->LED_Data[j][0] & 0xFF) << 16)
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	0419      	lsls	r1, r3, #16
				| ((Neopixel_led->LED_Data[j][1] & 0xFF) << 8)
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	4403      	add	r3, r0
 8000a04:	f203 1345 	addw	r3, r3, #325	; 0x145
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	4319      	orrs	r1, r3
				| (Neopixel_led->LED_Data[j][2] & 0xFF);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	4403      	add	r3, r0
 8000a1a:	f503 73a3 	add.w	r3, r3, #326	; 0x146
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	430b      	orrs	r3, r1
		data = ((Neopixel_led->LED_Data[j][0] & 0xFF) << 16)
 8000a22:	60fb      	str	r3, [r7, #12]
		for (int i = 23; i >= 0; i--) {
 8000a24:	2317      	movs	r3, #23
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e01d      	b.n	8000a66 <Neopixel_Sent+0x94>
			if (data & (1 << i)) {
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d007      	beq.n	8000a4c <Neopixel_Sent+0x7a>
				Neopixel_led->pwmData[index] = Neopixel_led->Pulse_High;	//192
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8b3 115a 	ldrh.w	r1, [r3, #346]	; 0x15a
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69fa      	ldr	r2, [r7, #28]
 8000a46:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000a4a:	e006      	b.n	8000a5a <Neopixel_Sent+0x88>
			} else {
				Neopixel_led->pwmData[index] = Neopixel_led->Pulse_Low;		//96
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8b3 1158 	ldrh.w	r1, [r3, #344]	; 0x158
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			index++;
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
		for (int i = 23; i >= 0; i--) {
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	dade      	bge.n	8000a2a <Neopixel_Sent+0x58>
	for (int j = 0; j < NUM_LED; j++) {
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	ddb5      	ble.n	80009e4 <Neopixel_Sent+0x12>
		}
	}
	for (int i = 0; i < 42; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	e00a      	b.n	8000a94 <Neopixel_Sent+0xc2>
		Neopixel_led->pwmData[index] = 0;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	2100      	movs	r1, #0
 8000a84:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		index++;
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 42; i++) {
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	3301      	adds	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	2b29      	cmp	r3, #41	; 0x29
 8000a98:	ddf1      	ble.n	8000a7e <Neopixel_Sent+0xac>
	}
	HAL_TIM_PWM_Start_DMA(Neopixel_led->htim, TIM_CHANNEL_1,
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
			Neopixel_led->pwmData, index);
 8000aa0:	687a      	ldr	r2, [r7, #4]
	HAL_TIM_PWM_Start_DMA(Neopixel_led->htim, TIM_CHANNEL_1,
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f011 ffc2 	bl	8012a30 <HAL_TIM_PWM_Start_DMA>
}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Tmp75_Init>:
#include "Tmp75.h"

//I2C_HandleTypeDef hi2c2;

void Tmp75_Init(I2C_HandleTypeDef *hi2c) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	/*configuration register = 0x01
	 [res][res][OS][FQ][POL][TM][SD][RES][RES][RES][RES][RES][RES][RES][RES][RES]
	   0    0   1   0    0    0   0   0    0    0    0    0    0    0    0    0   =  0x2000
	 */
	Write_Register(0x01, 0x2000,hi2c);
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 f804 	bl	8000ad0 <Write_Register>

}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Write_Register>:

void Write_Register(uint8_t register_pointer, uint16_t register_value, I2C_HandleTypeDef *hi2c) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	603a      	str	r2, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	460b      	mov	r3, r1
 8000ade:	80bb      	strh	r3, [r7, #4]
	uint8_t data[3];
	data[0] = register_pointer;     // TMP75_ADDR
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	733b      	strb	r3, [r7, #12]
	data[1] = register_value >> 8;    // MSB byte of 16bit data
 8000ae4:	88bb      	ldrh	r3, [r7, #4]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	737b      	strb	r3, [r7, #13]
	data[2] = register_value;       // LSB byte of 16bit data
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, data, 3, 100);
 8000af4:	f107 020c 	add.w	r2, r7, #12
 8000af8:	2364      	movs	r3, #100	; 0x64
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2303      	movs	r3, #3
 8000afe:	2192      	movs	r1, #146	; 0x92
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f00c fa55 	bl	800cfb0 <HAL_I2C_Master_Transmit>

}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, I2C_HandleTypeDef *hi2c) {
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af02      	add	r7, sp, #8
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
	// first set the register pointer to the register wanted to be read
	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, &register_pointer, 1, 100);
 8000b1c:	f107 020f 	add.w	r2, r7, #15
 8000b20:	2364      	movs	r3, #100	; 0x64
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2301      	movs	r3, #1
 8000b26:	2192      	movs	r1, #146	; 0x92
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f00c fa41 	bl	800cfb0 <HAL_I2C_Master_Transmit>

	// receive the 2 x 8bit data into the receive buffer
	HAL_I2C_Master_Receive(hi2c, TMP75_ADDR, receive_buffer, 2, 100);
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2302      	movs	r3, #2
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	2192      	movs	r1, #146	; 0x92
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f00c fb2d 	bl	800d198 <HAL_I2C_Master_Receive>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <One_ShotTemp>:

void One_ShotTemp(I2C_HandleTypeDef *hi2c) {
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	//One-Shot register = 0x04 and write any value to start aconversion
	Write_Register(0x04, 0x0000,hi2c);
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	2100      	movs	r1, #0
 8000b52:	2004      	movs	r0, #4
 8000b54:	f7ff ffbc 	bl	8000ad0 <Write_Register>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Read_TempCelsius>:

void Read_TempCelsius(double *receive_buffer,I2C_HandleTypeDef *hi2c) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	uint8_t buffer[2];
	uint16_t TempSum;
	Read_Register(0x00, buffer,hi2c);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff ffcb 	bl	8000b0e <Read_Register>
	TempSum = (((buffer[0] << 8) | buffer[1]) >> 4);
 8000b78:	7b3b      	ldrb	r3, [r7, #12]
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	7b7a      	ldrb	r2, [r7, #13]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	111b      	asrs	r3, r3, #4
 8000b82:	81fb      	strh	r3, [r7, #14]
	*receive_buffer = (TempSum * FTMP75_TEMP_AD_STEP);
 8000b84:	89fb      	ldrh	r3, [r7, #14]
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b8e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000ba8 <Read_TempCelsius+0x48>
 8000b92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	ed83 7b00 	vstr	d7, [r3]
}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	3fb00000 	.word	0x3fb00000

08000bb0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2224      	movs	r2, #36	; 0x24
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f016 fba5 	bl	8017318 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bce:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bd0:	4a33      	ldr	r2, [pc, #204]	; (8000ca0 <MX_ADC1_Init+0xf0>)
 8000bd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000bd4:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bd6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be8:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf4:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2e:	481b      	ldr	r0, [pc, #108]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c30:	f006 ff84 	bl	8007b3c <HAL_ADC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c3a:	f004 fdf5 	bl	8005828 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_DISABLED;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4812      	ldr	r0, [pc, #72]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c52:	f008 fd09 	bl	8009668 <HAL_ADCEx_MultiModeConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000c5c:	f004 fde4 	bl	8005828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_ADC1_Init+0xf4>)
 8000c62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c64:	2306      	movs	r3, #6
 8000c66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c70:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c72:	2304      	movs	r3, #4
 8000c74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c86:	f007 fcfd 	bl	8008684 <HAL_ADC_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000c90:	f004 fdca 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3730      	adds	r7, #48	; 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000f4 	.word	0x200000f4
 8000ca0:	40022000 	.word	0x40022000
 8000ca4:	21800100 	.word	0x21800100

08000ca8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2224      	movs	r2, #36	; 0x24
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f016 fb2f 	bl	8017318 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cba:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cbc:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <MX_ADC2_Init+0xb8>)
 8000cbe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cc2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000cc6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d0e:	4813      	ldr	r0, [pc, #76]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d10:	f006 ff14 	bl	8007b3c <HAL_ADC_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000d1a:	f004 fd85 	bl	8005828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_ADC2_Init+0xbc>)
 8000d20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d22:	2306      	movs	r3, #6
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d2a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d2e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d30:	2304      	movs	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d44:	f007 fc9e 	bl	8008684 <HAL_ADC_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d4e:	f004 fd6b 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000164 	.word	0x20000164
 8000d60:	40022100 	.word	0x40022100
 8000d64:	21800100 	.word	0x21800100

08000d68 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2224      	movs	r2, #36	; 0x24
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f016 facf 	bl	8017318 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d7a:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d7c:	4a32      	ldr	r2, [pc, #200]	; (8000e48 <MX_ADC3_Init+0xe0>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d88:	2208      	movs	r2, #8
 8000d8a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d92:	4b2c      	ldr	r3, [pc, #176]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d9e:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dee:	f006 fea5 	bl	8007b3c <HAL_ADC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000df8:	f004 fd16 	bl	8005828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_ADC3_Init+0xe4>)
 8000dfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e00:	2306      	movs	r3, #6
 8000e02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000e04:	2306      	movs	r3, #6
 8000e06:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e0c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000e2c:	f007 fc2a 	bl	8008684 <HAL_ADC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000e36:	f004 fcf7 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001d4 	.word	0x200001d4
 8000e48:	58026000 	.word	0x58026000
 8000e4c:	c7520000 	.word	0xc7520000

08000e50 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a47      	ldr	r2, [pc, #284]	; (8000f8c <HAL_ADC_MspInit+0x13c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d133      	bne.n	8000eda <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e72:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a45      	ldr	r2, [pc, #276]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000e7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e7c:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10e      	bne.n	8000ea2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e84:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8a:	4a42      	ldr	r2, [pc, #264]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000e8c:	f043 0320 	orr.w	r3, r3, #32
 8000e90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e94:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9a:	f003 0320 	and.w	r3, r3, #32
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	4a3a      	ldr	r2, [pc, #232]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb2:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4831      	ldr	r0, [pc, #196]	; (8000f98 <HAL_ADC_MspInit+0x148>)
 8000ed4:	f00b fe00 	bl	800cad8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000ed8:	e054      	b.n	8000f84 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <HAL_ADC_MspInit+0x14c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d133      	bne.n	8000f4c <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000eec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eee:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10e      	bne.n	8000f14 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000ef8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000efc:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000efe:	f043 0320 	orr.w	r3, r3, #32
 8000f02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f0c:	f003 0320 	and.w	r3, r3, #32
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f32:	2320      	movs	r3, #32
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	4814      	ldr	r0, [pc, #80]	; (8000f98 <HAL_ADC_MspInit+0x148>)
 8000f46:	f00b fdc7 	bl	800cad8 <HAL_GPIO_Init>
}
 8000f4a:	e01b      	b.n	8000f84 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC3)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_ADC_MspInit+0x150>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d116      	bne.n	8000f84 <HAL_ADC_MspInit+0x134>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	207f      	movs	r0, #127	; 0x7f
 8000f7a:	f008 fd32 	bl	80099e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000f7e:	207f      	movs	r0, #127	; 0x7f
 8000f80:	f008 fd49 	bl	8009a16 <HAL_NVIC_EnableIRQ>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	; 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40022000 	.word	0x40022000
 8000f90:	20000244 	.word	0x20000244
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020800 	.word	0x58020800
 8000f9c:	40022100 	.word	0x40022100
 8000fa0:	58026000 	.word	0x58026000

08000fa4 <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	8b3a      	ldrh	r2, [r7, #24]
 8000fc8:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fd8:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	f011 fc07 	bl	80127f8 <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Step_Driver>:


void Step_Driver(SteperParameter *step, double f_driver) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	ed87 0b00 	vstr	d0, [r7]
	double abs_f_driver = fabs(f_driver);
 8001014:	ed97 7b00 	vldr	d7, [r7]
 8001018:	eeb0 7bc7 	vabs.f64	d7, d7
 800101c:	ed87 7b06 	vstr	d7, [r7, #24]
	uint16_t reg_out;
	if (abs_f_driver <= 7) {
 8001020:	ed97 7b06 	vldr	d7, [r7, #24]
 8001024:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 8001028:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d80e      	bhi.n	8001050 <Step_Driver+0x48>
		reg_out = 50000;
 8001032:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001036:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = 50000;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
 800104e:	e033      	b.n	80010b8 <Step_Driver+0xb0>
	} else if (abs_f_driver < 10) {
 8001050:	ed97 7b06 	vldr	d7, [r7, #24]
 8001054:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001058:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	d50f      	bpl.n	8001082 <Step_Driver+0x7a>
		reg_out = 50000;
 8001062:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001066:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	8afa      	ldrh	r2, [r7, #22]
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8001072:	8afb      	ldrh	r3, [r7, #22]
 8001074:	085b      	lsrs	r3, r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	635a      	str	r2, [r3, #52]	; 0x34
 8001080:	e01a      	b.n	80010b8 <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	89db      	ldrh	r3, [r3, #14]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800108e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001092:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001096:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800109a:	ee17 3a90 	vmov	r3, s15
 800109e:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	8afa      	ldrh	r2, [r7, #22]
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	085b      	lsrs	r3, r3, #1
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 80010b8:	ed97 7b00 	vldr	d7, [r7]
 80010bc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	db09      	blt.n	80010da <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6898      	ldr	r0, [r3, #8]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8999      	ldrh	r1, [r3, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	7c1b      	ldrb	r3, [r3, #16]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f00b fea8 	bl	800ce28 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 80010d8:	e00b      	b.n	80010f2 <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6898      	ldr	r0, [r3, #8]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8999      	ldrh	r1, [r3, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	7c1b      	ldrb	r3, [r3, #16]
 80010e6:	f083 0301 	eor.w	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	461a      	mov	r2, r3
 80010ee:	f00b fe9b 	bl	800ce28 <HAL_GPIO_WritePin>
}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <Servo_init>:

/*
 * Servo Drive init
 */
void Servo_init(ServoParameter *Servo,TIM_HandleTypeDef *htim,
		uint32_t Channel){
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
	Servo->htim = htim;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	601a      	str	r2, [r3, #0]
	Servo->Channel = Channel;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(Servo->htim, Servo->Channel);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4619      	mov	r1, r3
 800111c:	4610      	mov	r0, r2
 800111e:	f011 fb6b 	bl	80127f8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <Servo_init+0x3e>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f240 52db 	movw	r2, #1499	; 0x5db
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001136:	e031      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d106      	bne.n	800114e <Servo_init+0x54>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	f240 53db 	movw	r3, #1499	; 0x5db
 800114a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800114c:	e026      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b08      	cmp	r3, #8
 8001154:	d106      	bne.n	8001164 <Servo_init+0x6a>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	f240 53db 	movw	r3, #1499	; 0x5db
 8001160:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001162:	e01b      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d106      	bne.n	800117a <Servo_init+0x80>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f240 53db 	movw	r3, #1499	; 0x5db
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001178:	e010      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d106      	bne.n	8001190 <Servo_init+0x96>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f240 53db 	movw	r3, #1499	; 0x5db
 800118c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800118e:	e005      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f240 53db 	movw	r3, #1499	; 0x5db
 800119a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <Servo_Drive>:

/*
 * Servo Drive Function
 * Deg Range (0 -> 180)
 */
void Servo_Drive(ServoParameter *Servo,uint8_t Deg){
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	uint16_t Pulse_in  =  (uint16_t)((Deg * 8.3333333f) +499);
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001250 <Servo_Drive+0xac>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001254 <Servo_Drive+0xb0>
 80011c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d105      	bne.n	80011e8 <Servo_Drive+0x44>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	89fa      	ldrh	r2, [r7, #14]
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011e6:	e02c      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d105      	bne.n	80011fc <Servo_Drive+0x58>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011fa:	e022      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d105      	bne.n	8001210 <Servo_Drive+0x6c>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800120e:	e018      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b0c      	cmp	r3, #12
 8001216:	d105      	bne.n	8001224 <Servo_Drive+0x80>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001222:	e00e      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b10      	cmp	r3, #16
 800122a:	d105      	bne.n	8001238 <Servo_Drive+0x94>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001236:	e004      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	41055555 	.word	0x41055555
 8001254:	43f98000 	.word	0x43f98000

08001258 <Traj_Coeff_Cal>:

void Traj_Coeff_Cal(TrajParameter *Traj, double T, double Pos_Final,
  double Pos_Now, double Vel_Final, double Vel_Now) {
 8001258:	b480      	push	{r7}
 800125a:	b09b      	sub	sp, #108	; 0x6c
 800125c:	af00      	add	r7, sp, #0
 800125e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001260:	ed87 0b08 	vstr	d0, [r7, #32]
 8001264:	ed87 1b06 	vstr	d1, [r7, #24]
 8001268:	ed87 2b04 	vstr	d2, [r7, #16]
 800126c:	ed87 3b02 	vstr	d3, [r7, #8]
 8001270:	ed87 4b00 	vstr	d4, [r7]
 Traj->T = T;
 8001274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800127a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 double T_P2 = T * T;
 800127e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001282:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001286:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
 double T_P3 = T_P2 * T;
 800128a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 800128e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001292:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001296:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 double T_P4 = T_P3 * T;
 800129a:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800129e:	ed97 7b08 	vldr	d7, [r7, #32]
 80012a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012a6:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 double T_P5 = T_P4 * T;
 80012aa:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80012ae:	ed97 7b08 	vldr	d7, [r7, #32]
 80012b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012b6:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 double ds = Pos_Now - Pos_Final;
 80012ba:	ed97 6b04 	vldr	d6, [r7, #16]
 80012be:	ed97 7b06 	vldr	d7, [r7, #24]
 80012c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012c6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 double tfv0 = T * Vel_Now;
 80012ca:	ed97 6b08 	vldr	d6, [r7, #32]
 80012ce:	ed97 7b00 	vldr	d7, [r7]
 80012d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012d6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 double tfv1 = T * Vel_Final;
 80012da:	ed97 6b08 	vldr	d6, [r7, #32]
 80012de:	ed97 7b02 	vldr	d7, [r7, #8]
 80012e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012e6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 Traj->TrajCoef[0] = Pos_Now;
 80012ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012f0:	e9c1 2300 	strd	r2, r3, [r1]
 Traj->TrajCoef[1] = Vel_Now;
 80012f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0 + 2*tfv1)) / T_P3;
 80012fe:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001302:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8001306:	ee27 6b06 	vmul.f64	d6, d7, d6
 800130a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800130e:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001312:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001316:	ee36 6b07 	vadd.f64	d6, d6, d7
 800131a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800131e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001322:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001326:	ee37 7b07 	vadd.f64	d7, d7, d7
 800132a:	eeb1 5b47 	vneg.f64	d5, d7
 800132e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8001332:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001338:	ed83 7b06 	vstr	d7, [r3, #24]
 Traj->TrajCoef[4] = (15 * ds + 8 * tfv0 + 7*tfv1) / T_P4;
 800133c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001340:	eeb2 6b0e 	vmov.f64	d6, #46	; 0x41700000  15.0
 8001344:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001348:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800134c:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001350:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001354:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001358:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800135c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8001360:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001364:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001368:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800136c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	ed83 7b08 	vstr	d7, [r3, #32]
 Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0 + tfv1)) / T_P5;
 8001376:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800137a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800137e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001382:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001386:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800138a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800138e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8001392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001396:	eeb1 5b47 	vneg.f64	d5, d7
 800139a:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800139e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 80013a8:	bf00      	nop
 80013aa:	376c      	adds	r7, #108	; 0x6c
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <TrajFollow>:

void TrajFollow(TrajParameter *Traj, double traj_t[5], double *Position,
		double *Velocity) {
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	ed93 6b00 	vldr	d6, [r3]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	ed93 5b02 	vldr	d5, [r3, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	ed93 7b00 	vldr	d7, [r3]
 80013d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013d8:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	ed93 5b06 	vldr	d5, [r3, #24]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3310      	adds	r3, #16
 80013e6:	ed93 7b00 	vldr	d7, [r3]
 80013ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	ed93 5b08 	vldr	d5, [r3, #32]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3318      	adds	r3, #24
 80013fc:	ed93 7b00 	vldr	d7, [r3]
 8001400:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001404:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[5] * traj_t[4]);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3320      	adds	r3, #32
 8001412:	ed93 7b00 	vldr	d7, [r3]
 8001416:	ee25 7b07 	vmul.f64	d7, d5, d7
 800141a:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	ed83 7b00 	vstr	d7, [r3]
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	ed93 6b02 	vldr	d6, [r3, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	ed93 7b06 	vldr	d7, [r3, #24]
 8001430:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001434:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3308      	adds	r3, #8
 800143c:	ed93 7b00 	vldr	d7, [r3]
 8001440:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001444:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((4.0 * Traj->TrajCoef[4]) * traj_t[2])
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	ed93 7b08 	vldr	d7, [r3, #32]
 800144e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001452:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3310      	adds	r3, #16
 800145a:	ed93 7b00 	vldr	d7, [r3]
 800145e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001462:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((5.0 * Traj->TrajCoef[5]) * traj_t[3]);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800146c:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8001470:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	3318      	adds	r3, #24
 8001478:	ed93 7b00 	vldr	d7, [r3]
 800147c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001480:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	ed83 7b00 	vstr	d7, [r3]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6178      	str	r0, [r7, #20]
 80014a0:	ed87 0b02 	vstr	d0, [r7, #8]
 80014a4:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 80014a8:	6979      	ldr	r1, [r7, #20]
 80014aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014ae:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->R = R; 			// Adjustable
 80014b2:	6979      	ldr	r1, [r7, #20]
 80014b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	kalman->x1 = 0.0;
 80014bc:	6979      	ldr	r1, [r7, #20]
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = 0.0;
 80014ca:	6979      	ldr	r1, [r7, #20]
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = 0.05;
 80014d8:	6979      	ldr	r1, [r7, #20]
 80014da:	a30f      	add	r3, pc, #60	; (adr r3, 8001518 <Kalman_init+0x80>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = 0.05;
 80014e4:	6979      	ldr	r1, [r7, #20]
 80014e6:	a30c      	add	r3, pc, #48	; (adr r3, 8001518 <Kalman_init+0x80>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = 0.05;
 80014f0:	6979      	ldr	r1, [r7, #20]
 80014f2:	a309      	add	r3, pc, #36	; (adr r3, 8001518 <Kalman_init+0x80>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = 0.05;
 80014fc:	6979      	ldr	r1, [r7, #20]
 80014fe:	a306      	add	r3, pc, #24	; (adr r3, 8001518 <Kalman_init+0x80>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	f3af 8000 	nop.w
 8001518:	9999999a 	.word	0x9999999a
 800151c:	3fa99999 	.word	0x3fa99999

08001520 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 8001520:	b480      	push	{r7}
 8001522:	b0a5      	sub	sp, #148	; 0x94
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001532:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8001888 <KalmanFilter+0x368>
 8001536:	ee27 7b06 	vmul.f64	d7, d7, d6
 800153a:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001544:	ed9f 6bd0 	vldr	d6, [pc, #832]	; 8001888 <KalmanFilter+0x368>
 8001548:	ee27 7b06 	vmul.f64	d7, d7, d6
 800154c:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	ed93 7b00 	vldr	d7, [r3]
 8001556:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8001890 <KalmanFilter+0x370>
 800155a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800155e:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 8001562:	a3d1      	add	r3, pc, #836	; (adr r3, 80018a8 <KalmanFilter+0x388>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 800156c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001570:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001574:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800157e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001582:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	ed93 7b02 	vldr	d7, [r3, #8]
 800158c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001590:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	ed93 7b08 	vldr	d7, [r3, #32]
 800159a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800159e:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015a6:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80015aa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015ae:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80015b2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015b6:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80015ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015be:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 80015c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015c6:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80015d0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80015d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	ed93 7b04 	vldr	d7, [r3, #16]
 80015de:	ee26 6b07 	vmul.f64	d6, d6, d7
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	ed93 7b08 	vldr	d7, [r3, #32]
 80015e8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80015ec:	ee27 5b05 	vmul.f64	d5, d7, d5
 80015f0:	ed97 7b00 	vldr	d7, [r7]
 80015f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80015f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015fc:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8001600:	ed97 7b00 	vldr	d7, [r7]
 8001604:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001608:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001612:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001616:	ee27 7b05 	vmul.f64	d7, d7, d5
 800161a:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 8001898 <KalmanFilter+0x378>
 800161e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	ed93 7b06 	vldr	d7, [r3, #24]
 8001628:	ee25 7b07 	vmul.f64	d7, d5, d7
 800162c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001630:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8001634:	ed97 7b00 	vldr	d7, [r7]
 8001638:	ee25 7b07 	vmul.f64	d7, d5, d7
 800163c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001640:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8001644:	ed97 7b00 	vldr	d7, [r7]
 8001648:	ee25 7b07 	vmul.f64	d7, d5, d7
 800164c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8001650:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8001654:	ed97 7b00 	vldr	d7, [r7]
 8001658:	ee25 7b07 	vmul.f64	d7, d5, d7
 800165c:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8001660:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001664:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001668:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001672:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8001898 <KalmanFilter+0x378>
 8001676:	ee27 7b06 	vmul.f64	d7, d7, d6
 800167a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	ed93 7b00 	vldr	d7, [r3]
 8001684:	ed9f 6b86 	vldr	d6, [pc, #536]	; 80018a0 <KalmanFilter+0x380>
 8001688:	ee27 7b06 	vmul.f64	d7, d7, d6
 800168c:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 8001690:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8001694:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001698:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800169c:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80016a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016a4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80016ae:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80016b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016b6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	ed93 6b02 	vldr	d6, [r3, #8]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	ed93 7b08 	vldr	d7, [r3, #32]
 80016c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80016d0:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8001898 <KalmanFilter+0x378>
 80016d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016dc:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 80016e0:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 80016e4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80016e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 80016f2:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80016f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80016fa:	ed9f 5b67 	vldr	d5, [pc, #412]	; 8001898 <KalmanFilter+0x378>
 80016fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001702:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001706:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	ed93 6b06 	vldr	d6, [r3, #24]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	ed93 5b04 	vldr	d5, [r3, #16]
 8001716:	ed97 7b00 	vldr	d7, [r7]
 800171a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	ed93 7b06 	vldr	d7, [r3, #24]
 8001724:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 8001898 <KalmanFilter+0x378>
 8001728:	ee27 7b04 	vmul.f64	d7, d7, d4
 800172c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001730:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001734:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001738:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 800173c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001740:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001744:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	ed93 6b02 	vldr	d6, [r3, #8]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	ed93 7b08 	vldr	d7, [r3, #32]
 8001754:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001758:	ee27 5b05 	vmul.f64	d5, d7, d5
 800175c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001760:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001764:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001768:	ee35 5b07 	vadd.f64	d5, d5, d7
 800176c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8001770:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001774:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001778:	ee35 7b07 	vadd.f64	d7, d5, d7
 800177c:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001780:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001784:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001788:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001792:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001796:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8001898 <KalmanFilter+0x378>
 800179a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800179e:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80017a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017a6:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	ed93 7b02 	vldr	d7, [r3, #8]
 80017b0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80017ba:	ee37 5b07 	vadd.f64	d5, d7, d7
 80017be:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80017c2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017c6:	ee26 5b07 	vmul.f64	d5, d6, d7
 80017ca:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80017ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017d2:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80017dc:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80017e6:	ee37 5b07 	vadd.f64	d5, d7, d7
 80017ea:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80017ee:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017f2:	ee26 5b07 	vmul.f64	d5, d6, d7
 80017f6:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80017fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017fe:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	ed93 5b00 	vldr	d5, [r3]
 800180e:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001812:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001816:	ee36 6b07 	vadd.f64	d6, d6, d7
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001820:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001824:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001828:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800182c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001830:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001834:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001838:	ee36 7b47 	vsub.f64	d7, d6, d7
 800183c:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001846:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = xx2;
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001850:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = pp11;
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800185a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = pp12;
 800185e:	68f9      	ldr	r1, [r7, #12]
 8001860:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001864:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = pp21;
 8001868:	68f9      	ldr	r1, [r7, #12]
 800186a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800186e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = pp22;
 8001872:	68f9      	ldr	r1, [r7, #12]
 8001874:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001878:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 800187c:	bf00      	nop
 800187e:	3794      	adds	r7, #148	; 0x94
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	d2f1a9fc 	.word	0xd2f1a9fc
 800188c:	3f70624d 	.word	0x3f70624d
 8001890:	812dea12 	.word	0x812dea12
 8001894:	3d719799 	.word	0x3d719799
 8001898:	d2f1a9fc 	.word	0xd2f1a9fc
 800189c:	3f50624d 	.word	0x3f50624d
 80018a0:	e826d695 	.word	0xe826d695
 80018a4:	3e112e0b 	.word	0x3e112e0b
 80018a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80018ac:	3eb0c6f7 	.word	0x3eb0c6f7

080018b0 <PID_init>:

double BaseENCRead(){
	return 970.0f;  //fsaldfkjas;dflkjas;dflksjf;asdf
}

void PID_init(PIDParameter *PID, double Kp, double Ki, double Kd) {
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	61f8      	str	r0, [r7, #28]
 80018b8:	ed87 0b04 	vstr	d0, [r7, #16]
 80018bc:	ed87 1b02 	vstr	d1, [r7, #8]
 80018c0:	ed87 2b00 	vstr	d2, [r7]
	PID->Kp = Kp;
 80018c4:	69f9      	ldr	r1, [r7, #28]
 80018c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018ca:	e9c1 2300 	strd	r2, r3, [r1]
	PID->Ki = Ki;
 80018ce:	69f9      	ldr	r1, [r7, #28]
 80018d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	PID->Kd = Kd;
 80018d8:	69f9      	ldr	r1, [r7, #28]
 80018da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018de:	e9c1 2304 	strd	r2, r3, [r1, #16]
	PID->ITerm = 0;
 80018e2:	69f9      	ldr	r1, [r7, #28]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
	PID->Setpoint = 0;
 80018f0:	69f9      	ldr	r1, [r7, #28]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Feedback = 0;
 80018fe:	69f9      	ldr	r1, [r7, #28]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Error[0] = 0;
 800190c:	69f9      	ldr	r1, [r7, #28]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID->Error[1] = 0;
 800191a:	69f9      	ldr	r1, [r7, #28]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	PID->Output = 0;
 8001928:	69f9      	ldr	r1, [r7, #28]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001936:	bf00      	nop
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <PID_Control>:

double PID_Control(PIDParameter *PID,double Setpoint,double Feedback){
 8001942:	b480      	push	{r7}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	6178      	str	r0, [r7, #20]
 800194a:	ed87 0b02 	vstr	d0, [r7, #8]
 800194e:	ed87 1b00 	vstr	d1, [r7]
	PID->Feedback = Feedback; 	// Feedback Input
 8001952:	6979      	ldr	r1, [r7, #20]
 8001954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001958:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Setpoint = Setpoint;	// Setpoint Input
 800195c:	6979      	ldr	r1, [r7, #20]
 800195e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001962:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	ed93 6b08 	vldr	d6, [r3, #32]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001972:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	PID->ITerm += PID->Error[0];
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	ed93 6b06 	vldr	d6, [r3, #24]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	ed83 7b06 	vstr	d7, [r3, #24]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	ed93 6b00 	vldr	d6, [r3]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800199e:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	ed93 5b02 	vldr	d5, [r3, #8]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	ed93 7b06 	vldr	d7, [r3, #24]
 80019ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019b2:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (PID->Kd * (PID->Error[0] - PID->Error[1])));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	ed93 5b04 	vldr	d5, [r3, #16]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80019c8:	ee34 7b47 	vsub.f64	d7, d4, d7
 80019cc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019d0:	ee36 7b07 	vadd.f64	d7, d6, d7
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	PID->Error[1] = PID->Error[0]; // Update Error
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019e0:	6979      	ldr	r1, [r7, #20]
 80019e2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	return PID->Output;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80019ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80019f0:	eeb0 0b47 	vmov.f64	d0, d7
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,double PosP,double PosI,double PosD,double VelP,double VelI,double VelD, double GFeed){
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b090      	sub	sp, #64	; 0x40
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001a06:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8001a0a:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8001a0e:	ed87 2b08 	vstr	d2, [r7, #32]
 8001a12:	ed87 3b06 	vstr	d3, [r7, #24]
 8001a16:	ed87 4b04 	vstr	d4, [r7, #16]
 8001a1a:	ed87 5b02 	vstr	d5, [r7, #8]
 8001a1e:	ed87 6b00 	vstr	d6, [r7]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 8001a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a24:	ed97 2b08 	vldr	d2, [r7, #32]
 8001a28:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8001a2c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff3d 	bl	80018b0 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 8001a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a38:	3360      	adds	r3, #96	; 0x60
 8001a3a:	ed97 2b02 	vldr	d2, [r7, #8]
 8001a3e:	ed97 1b04 	vldr	d1, [r7, #16]
 8001a42:	ed97 0b06 	vldr	d0, [r7, #24]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff32 	bl	80018b0 <PID_init>
	Control->Vel_Gfeed = GFeed;
 8001a4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a52:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 8001a56:	bf00      	nop
 8001a58:	3740      	adds	r7, #64	; 0x40
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		double Pos_Feed, double pos_set, double vel_set) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b088      	sub	sp, #32
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	61f8      	str	r0, [r7, #28]
 8001a66:	61b9      	str	r1, [r7, #24]
 8001a68:	ed87 0b04 	vstr	d0, [r7, #16]
 8001a6c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001a70:	ed87 2b00 	vstr	d2, [r7]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 8001a74:	69f9      	ldr	r1, [r7, #28]
 8001a76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a7a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Control->VelocitySetpoint = vel_set;
 8001a7e:	69f9      	ldr	r1, [r7, #28]
 8001a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a84:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

	/*Kalman Filter*/
	KalmanFilter(kalman, Pos_Feed); /*Kalman filter */
 8001a88:	ed97 0b04 	vldr	d0, [r7, #16]
 8001a8c:	69b8      	ldr	r0, [r7, #24]
 8001a8e:	f7ff fd47 	bl	8001520 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a98:	69f9      	ldr	r1, [r7, #28]
 8001a9a:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	Control->PositionFeedback = kalman->x1;
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001aa4:	69f9      	ldr	r1, [r7, #28]
 8001aa6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001ab8:	eeb0 1b46 	vmov.f64	d1, d6
 8001abc:	eeb0 0b47 	vmov.f64	d0, d7
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f7ff ff3e 	bl	8001942 <PID_Control>
 8001ac6:	eeb0 7b40 	vmov.f64	d7, d0
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->SumVelocityFeedForward = Control->PositionPIDOutput + Control->VelocitySetpoint;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8001adc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	ed93 6b2e 	vldr	d6, [r3, #184]	; 0xb8
 8001af8:	eeb0 1b46 	vmov.f64	d1, d6
 8001afc:	eeb0 0b47 	vmov.f64	d0, d7
 8001b00:	4610      	mov	r0, r2
 8001b02:	f7ff ff1e 	bl	8001942 <PID_Control>
 8001b06:	eeb0 7b40 	vmov.f64	d7, d0
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
			Control->SumVelocityFeedForward, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	ed93 6b32 	vldr	d6, [r3, #200]	; 0xc8
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001b1c:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ Control->VelocityPIDOutput;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 8001b26:	ee36 7b07 	vadd.f64	d7, d6, d7
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
//	Control->Output = Control->VelocityPIDOutput;
}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <MX_CRC_Init+0x54>)
 8001b40:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b50:	221d      	movs	r2, #29
 8001b52:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b56:	2210      	movs	r2, #16
 8001b58:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b5c:	22c4      	movs	r2, #196	; 0xc4
 8001b5e:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b74:	f007 ff6a 	bl	8009a4c <HAL_CRC_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8001b7e:	f003 fe53 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000248 	.word	0x20000248
 8001b8c:	58024c00 	.word	0x58024c00

08001b90 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <HAL_CRC_MspInit+0x3c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_CRC_MspInit+0x40>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_CRC_MspInit+0x40>)
 8001baa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_CRC_MspInit+0x40>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	58024c00 	.word	0x58024c00
 8001bd0:	58024400 	.word	0x58024400

08001bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_DMA_Init+0x5c>)
 8001bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001be0:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <MX_DMA_Init+0x5c>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_DMA_Init+0x5c>)
 8001bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	200b      	movs	r0, #11
 8001bfe:	f007 fef0 	bl	80099e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c02:	200b      	movs	r0, #11
 8001c04:	f007 ff07 	bl	8009a16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	200c      	movs	r0, #12
 8001c0e:	f007 fee8 	bl	80099e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c12:	200c      	movs	r0, #12
 8001c14:	f007 feff 	bl	8009a16 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	200d      	movs	r0, #13
 8001c1e:	f007 fee0 	bl	80099e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c22:	200d      	movs	r0, #13
 8001c24:	f007 fef7 	bl	8009a16 <HAL_NVIC_EnableIRQ>

}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	58024400 	.word	0x58024400

08001c34 <MX_GPIO_Init>:
        * the Code Generation settings)
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	; 0x30
 8001c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4a:	4b91      	ldr	r3, [pc, #580]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	4a8f      	ldr	r2, [pc, #572]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5a:	4b8d      	ldr	r3, [pc, #564]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c68:	4b89      	ldr	r3, [pc, #548]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	4a88      	ldr	r2, [pc, #544]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c78:	4b85      	ldr	r3, [pc, #532]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c86:	4b82      	ldr	r3, [pc, #520]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	4a80      	ldr	r2, [pc, #512]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c96:	4b7e      	ldr	r3, [pc, #504]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b7a      	ldr	r3, [pc, #488]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001caa:	4a79      	ldr	r2, [pc, #484]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb4:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	4a71      	ldr	r2, [pc, #452]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cca:	f043 0302 	orr.w	r3, r3, #2
 8001cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd2:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce0:	4b6b      	ldr	r3, [pc, #428]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce6:	4a6a      	ldr	r2, [pc, #424]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001ce8:	f043 0308 	orr.w	r3, r3, #8
 8001cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf0:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001d04:	4863      	ldr	r0, [pc, #396]	; (8001e94 <MX_GPIO_Init+0x260>)
 8001d06:	f00b f88f 	bl	800ce28 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001d10:	4861      	ldr	r0, [pc, #388]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001d12:	f00b f889 	bl	800ce28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	21c4      	movs	r1, #196	; 0xc4
 8001d1a:	4860      	ldr	r0, [pc, #384]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001d1c:	f00b f884 	bl	800ce28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001d26:	485e      	ldr	r0, [pc, #376]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001d28:	f00b f87e 	bl	800ce28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d32:	4859      	ldr	r0, [pc, #356]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001d34:	f00b f878 	bl	800ce28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001d38:	2201      	movs	r2, #1
 8001d3a:	213f      	movs	r1, #63	; 0x3f
 8001d3c:	4858      	ldr	r0, [pc, #352]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001d3e:	f00b f873 	bl	800ce28 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001d42:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001d46:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	4619      	mov	r1, r3
 8001d5a:	484e      	ldr	r0, [pc, #312]	; (8001e94 <MX_GPIO_Init+0x260>)
 8001d5c:	f00a febc 	bl	800cad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001d60:	f24e 030f 	movw	r3, #57359	; 0xe00f
 8001d64:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d66:	2303      	movs	r3, #3
 8001d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4619      	mov	r1, r3
 8001d74:	4848      	ldr	r0, [pc, #288]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001d76:	f00a feaf 	bl	800cad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d7a:	233c      	movs	r3, #60	; 0x3c
 8001d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4845      	ldr	r0, [pc, #276]	; (8001ea4 <MX_GPIO_Init+0x270>)
 8001d8e:	f00a fea3 	bl	800cad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 8001d92:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	483b      	ldr	r0, [pc, #236]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001dac:	f00a fe94 	bl	800cad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db4:	2303      	movs	r3, #3
 8001db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4836      	ldr	r0, [pc, #216]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001dc4:	f00a fe88 	bl	800cad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	482f      	ldr	r0, [pc, #188]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001dde:	f00a fe7b 	bl	800cad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001de2:	23c4      	movs	r3, #196	; 0xc4
 8001de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4828      	ldr	r0, [pc, #160]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001dfa:	f00a fe6d 	bl	800cad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	4820      	ldr	r0, [pc, #128]	; (8001e94 <MX_GPIO_Init+0x260>)
 8001e14:	f00a fe60 	bl	800cad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 8001e18:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	481c      	ldr	r0, [pc, #112]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001e2e:	f00a fe53 	bl	800cad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001e32:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001e36:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4815      	ldr	r0, [pc, #84]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001e4c:	f00a fe44 	bl	800cad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <MX_GPIO_Init+0x270>)
 8001e66:	f00a fe37 	bl	800cad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <MX_GPIO_Init+0x270>)
 8001e84:	f00a fe28 	bl	800cad8 <HAL_GPIO_Init>

}
 8001e88:	bf00      	nop
 8001e8a:	3730      	adds	r7, #48	; 0x30
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	58024400 	.word	0x58024400
 8001e94:	58021000 	.word	0x58021000
 8001e98:	58020800 	.word	0x58020800
 8001e9c:	58020400 	.word	0x58020400
 8001ea0:	58020c00 	.word	0x58020c00
 8001ea4:	58020000 	.word	0x58020000

08001ea8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001eae:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <MX_I2C2_Init+0x78>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <MX_I2C2_Init+0x7c>)
 8001eb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ee2:	480e      	ldr	r0, [pc, #56]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ee4:	f00a ffd4 	bl	800ce90 <HAL_I2C_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001eee:	f003 fc9b 	bl	8005828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4809      	ldr	r0, [pc, #36]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ef6:	f00c fb05 	bl	800e504 <HAL_I2CEx_ConfigAnalogFilter>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f00:	f003 fc92 	bl	8005828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001f08:	f00c fb47 	bl	800e59a <HAL_I2CEx_ConfigDigitalFilter>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f12:	f003 fc89 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000026c 	.word	0x2000026c
 8001f20:	40005800 	.word	0x40005800
 8001f24:	60404e72 	.word	0x60404e72

08001f28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0b6      	sub	sp, #216	; 0xd8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	22b4      	movs	r2, #180	; 0xb4
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f015 f9e5 	bl	8017318 <memset>
  if(i2cHandle->Instance==I2C2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a29      	ldr	r2, [pc, #164]	; (8001ff8 <HAL_I2C_MspInit+0xd0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d14a      	bne.n	8001fee <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4618      	mov	r0, r3
 8001f68:	f00d fad8 	bl	800f51c <HAL_RCCEx_PeriphCLKConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f72:	f003 fc59 	bl	8005828 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f9c:	2312      	movs	r3, #18
 8001f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4811      	ldr	r0, [pc, #68]	; (8002000 <HAL_I2C_MspInit+0xd8>)
 8001fbc:	f00a fd8c 	bl	800cad8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fc6:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001fc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2022      	movs	r0, #34	; 0x22
 8001fe4:	f007 fcfd 	bl	80099e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001fe8:	2022      	movs	r0, #34	; 0x22
 8001fea:	f007 fd14 	bl	8009a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001fee:	bf00      	nop
 8001ff0:	37d8      	adds	r7, #216	; 0xd8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40005800 	.word	0x40005800
 8001ffc:	58024400 	.word	0x58024400
 8002000:	58020400 	.word	0x58020400
 8002004:	00000000 	.word	0x00000000

08002008 <IPK>:
 *
 **************** Output ********************
 * q[4]				---> JointSpace Position
 *
 */
Kinematics_StatusTypeDef IPK(double gammabar[3], double chi[3], double q[4]) {
 8002008:	b580      	push	{r7, lr}
 800200a:	ed2d 8b02 	vpush	{d8}
 800200e:	b08e      	sub	sp, #56	; 0x38
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
	double c2;
	double q2;
	double q3;
	double s2;
	double x24;
	x24 = gammabar[1] * sqrt(chi[0] * chi[0] + chi[1] * chi[1]) - 20.0;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3308      	adds	r3, #8
 800201c:	ed93 8b00 	vldr	d8, [r3]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	ed93 6b00 	vldr	d6, [r3]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	ed93 7b00 	vldr	d7, [r3]
 800202c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	3308      	adds	r3, #8
 8002034:	ed93 5b00 	vldr	d5, [r3]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3308      	adds	r3, #8
 800203c:	ed93 7b00 	vldr	d7, [r3]
 8002040:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002044:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002048:	eeb0 0b47 	vmov.f64	d0, d7
 800204c:	f015 fa08 	bl	8017460 <sqrt>
 8002050:	eeb0 7b40 	vmov.f64	d7, d0
 8002054:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002058:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 800205c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002060:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	c2 = x24 * x24
 8002064:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002068:	ee27 6b07 	vmul.f64	d6, d7, d7
			+ ((chi[2] + 268.23) - 295.89) * ((chi[2] + 268.23) - 295.89);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3310      	adds	r3, #16
 8002070:	ed93 7b00 	vldr	d7, [r3]
 8002074:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002228 <IPK+0x220>
 8002078:	ee37 7b05 	vadd.f64	d7, d7, d5
 800207c:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002230 <IPK+0x228>
 8002080:	ee37 5b45 	vsub.f64	d5, d7, d5
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3310      	adds	r3, #16
 8002088:	ed93 7b00 	vldr	d7, [r3]
 800208c:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8002228 <IPK+0x220>
 8002090:	ee37 7b04 	vadd.f64	d7, d7, d4
 8002094:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8002230 <IPK+0x228>
 8002098:	ee37 7b44 	vsub.f64	d7, d7, d4
 800209c:	ee25 7b07 	vmul.f64	d7, d5, d7
	c2 = x24 * x24
 80020a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020a4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	s2 = sqrt(c2);
 80020a8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80020ac:	f015 f9d8 	bl	8017460 <sqrt>
 80020b0:	ed87 0b08 	vstr	d0, [r7, #32]
	if ((s2 <= 760.0) && (s2 >= 0.0)) {
 80020b4:	ed97 7b08 	vldr	d7, [r7, #32]
 80020b8:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8002238 <IPK+0x230>
 80020bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	f200 80a8 	bhi.w	8002218 <IPK+0x210>
 80020c8:	ed97 7b08 	vldr	d7, [r7, #32]
 80020cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80020d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d4:	f2c0 80a0 	blt.w	8002218 <IPK+0x210>
		c2 = ((c2 - 144400.0) - 144400.0) / 288800.0;
 80020d8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80020dc:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8002240 <IPK+0x238>
 80020e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020e4:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002240 <IPK+0x238>
 80020e8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80020ec:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8002248 <IPK+0x240>
 80020f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020f4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		s2 = gammabar[2] * sqrt(1.0 - c2 * c2);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3310      	adds	r3, #16
 80020fc:	ed93 8b00 	vldr	d8, [r3]
 8002100:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002104:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002108:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800210c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002110:	eeb0 0b47 	vmov.f64	d0, d7
 8002114:	f015 f9a4 	bl	8017460 <sqrt>
 8002118:	eeb0 7b40 	vmov.f64	d7, d0
 800211c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002120:	ed87 7b08 	vstr	d7, [r7, #32]
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	3310      	adds	r3, #16
 8002128:	ed93 7b00 	vldr	d7, [r3]
 800212c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002228 <IPK+0x220>
 8002130:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002134:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002230 <IPK+0x228>
 8002138:	ee37 7b46 	vsub.f64	d7, d7, d6
 800213c:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8002140:	eeb0 0b47 	vmov.f64	d0, d7
 8002144:	f015 f988 	bl	8017458 <atan2>
 8002148:	eeb0 8b40 	vmov.f64	d8, d0
				- atan2(380.0 * s2, 380.0 * c2 + 380.0)) - 1.5707963267948966;
 800214c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002150:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8002250 <IPK+0x248>
 8002154:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002158:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800215c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8002250 <IPK+0x248>
 8002160:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002164:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002250 <IPK+0x248>
 8002168:	ee37 7b05 	vadd.f64	d7, d7, d5
 800216c:	eeb0 1b47 	vmov.f64	d1, d7
 8002170:	eeb0 0b46 	vmov.f64	d0, d6
 8002174:	f015 f970 	bl	8017458 <atan2>
 8002178:	eeb0 7b40 	vmov.f64	d7, d0
 800217c:	ee38 7b47 	vsub.f64	d7, d8, d7
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8002180:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002258 <IPK+0x250>
 8002184:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002188:	ed87 7b06 	vstr	d7, [r7, #24]
		q3 = atan2(s2, c2) + 1.5707963267948966;
 800218c:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8002190:	ed97 0b08 	vldr	d0, [r7, #32]
 8002194:	f015 f960 	bl	8017458 <atan2>
 8002198:	eeb0 7b40 	vmov.f64	d7, d0
 800219c:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8002258 <IPK+0x250>
 80021a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021a4:	ed87 7b04 	vstr	d7, [r7, #16]
		q[0] = atan2(gammabar[0] * chi[1], gammabar[0] * chi[0]);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	ed93 6b00 	vldr	d6, [r3]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3308      	adds	r3, #8
 80021b2:	ed93 7b00 	vldr	d7, [r3]
 80021b6:	ee26 5b07 	vmul.f64	d5, d6, d7
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	ed93 6b00 	vldr	d6, [r3]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	ed93 7b00 	vldr	d7, [r3]
 80021c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021ca:	eeb0 1b47 	vmov.f64	d1, d7
 80021ce:	eeb0 0b45 	vmov.f64	d0, d5
 80021d2:	f015 f941 	bl	8017458 <atan2>
 80021d6:	eeb0 7b40 	vmov.f64	d7, d0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	ed83 7b00 	vstr	d7, [r3]
		q[1] = q2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f103 0108 	add.w	r1, r3, #8
 80021e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ea:	e9c1 2300 	strd	r2, r3, [r1]
		q[2] = q3;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f103 0110 	add.w	r1, r3, #16
 80021f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021f8:	e9c1 2300 	strd	r2, r3, [r1]
		q[3] = -q2 - q3;
 80021fc:	ed97 7b06 	vldr	d7, [r7, #24]
 8002200:	eeb1 6b47 	vneg.f64	d6, d7
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3318      	adds	r3, #24
 8002208:	ed97 7b04 	vldr	d7, [r7, #16]
 800220c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002210:	ed83 7b00 	vstr	d7, [r3]
		return Kinematics_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <IPK+0x212>
	} else {
		return Error_Link_length;
 8002218:	2301      	movs	r3, #1
	}
}
 800221a:	4618      	mov	r0, r3
 800221c:	3738      	adds	r7, #56	; 0x38
 800221e:	46bd      	mov	sp, r7
 8002220:	ecbd 8b02 	vpop	{d8}
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	147ae148 	.word	0x147ae148
 800222c:	4070c3ae 	.word	0x4070c3ae
 8002230:	70a3d70a 	.word	0x70a3d70a
 8002234:	40727e3d 	.word	0x40727e3d
 8002238:	00000000 	.word	0x00000000
 800223c:	4087c000 	.word	0x4087c000
 8002240:	00000000 	.word	0x00000000
 8002244:	4101a080 	.word	0x4101a080
 8002248:	00000000 	.word	0x00000000
 800224c:	4111a080 	.word	0x4111a080
 8002250:	00000000 	.word	0x00000000
 8002254:	4077c000 	.word	0x4077c000
 8002258:	54442d18 	.word	0x54442d18
 800225c:	3ff921fb 	.word	0x3ff921fb

08002260 <IVK>:
 */

//Kinematics_StatusTypeDef IVK(double q[3], double chi_dot[3], double qv[4])

Kinematics_StatusTypeDef IVK(double q[4], double chi_dot[3], double qv[4])
{
 8002260:	b580      	push	{r7, lr}
 8002262:	ed2d 8b04 	vpush	{d8-d9}
 8002266:	b0a6      	sub	sp, #152	; 0x98
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  double qvbar_idx_1;
  double qvbar_idx_2;
  int r1;
  int r2;
  int rtemp;
  qvbar_idx_1 = q[1] + q[2];
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3308      	adds	r3, #8
 8002274:	ed93 6b00 	vldr	d6, [r3]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3310      	adds	r3, #16
 800227c:	ed93 7b00 	vldr	d7, [r3]
 8002280:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002284:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = sin(qvbar_idx_1);
 8002288:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 800228c:	f015 f898 	bl	80173c0 <sin>
 8002290:	ed87 0b1e 	vstr	d0, [r7, #120]	; 0x78
  Jv4_tmp = cos(q[0]);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	ed93 7b00 	vldr	d7, [r3]
 800229a:	eeb0 0b47 	vmov.f64	d0, d7
 800229e:	f015 f843 	bl	8017328 <cos>
 80022a2:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
  b_Jv4_tmp = sin(q[0]);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	ed93 7b00 	vldr	d7, [r3]
 80022ac:	eeb0 0b47 	vmov.f64	d0, d7
 80022b0:	f015 f886 	bl	80173c0 <sin>
 80022b4:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
  qvbar_idx_1 = 380.0 * cos(qvbar_idx_1);
 80022b8:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 80022bc:	f015 f834 	bl	8017328 <cos>
 80022c0:	eeb0 7b40 	vmov.f64	d7, d0
 80022c4:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 80025e8 <IVK+0x388>
 80022c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022cc:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  Jv4_tmp_tmp = 380.0 * sin(q[1]);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3308      	adds	r3, #8
 80022d4:	ed93 7b00 	vldr	d7, [r3]
 80022d8:	eeb0 0b47 	vmov.f64	d0, d7
 80022dc:	f015 f870 	bl	80173c0 <sin>
 80022e0:	eeb0 7b40 	vmov.f64	d7, d0
 80022e4:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 80025e8 <IVK+0x388>
 80022e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022ec:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
  c_Jv4_tmp = (qvbar_idx_1 + 20.0) - Jv4_tmp_tmp;
 80022f0:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80022f4:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 80022f8:	ee37 6b06 	vadd.f64	d6, d7, d6
 80022fc:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002300:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002304:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
  Jv4[0] = -b_Jv4_tmp * c_Jv4_tmp;
 8002308:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800230c:	eeb1 6b47 	vneg.f64	d6, d7
 8002310:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002314:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002318:	ed87 7b04 	vstr	d7, [r7, #16]
  Jv4[3] = -Jv4_tmp * (380.0 * qvbar_idx_2 + 380.0 * cos(q[1]));
 800231c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002320:	eeb1 8b47 	vneg.f64	d8, d7
 8002324:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002328:	ed9f 6baf 	vldr	d6, [pc, #700]	; 80025e8 <IVK+0x388>
 800232c:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3308      	adds	r3, #8
 8002334:	ed93 7b00 	vldr	d7, [r3]
 8002338:	eeb0 0b47 	vmov.f64	d0, d7
 800233c:	f014 fff4 	bl	8017328 <cos>
 8002340:	eeb0 7b40 	vmov.f64	d7, d0
 8002344:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80025e8 <IVK+0x388>
 8002348:	ee27 7b06 	vmul.f64	d7, d7, d6
 800234c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002350:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002354:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  Jv4[6] = -380.0 * qvbar_idx_2 * Jv4_tmp;
 8002358:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800235c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80025f0 <IVK+0x390>
 8002360:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002364:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002368:	ee26 7b07 	vmul.f64	d7, d6, d7
 800236c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  Jv4[1] = Jv4_tmp * c_Jv4_tmp;
 8002370:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8002374:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002378:	ee26 7b07 	vmul.f64	d7, d6, d7
 800237c:	ed87 7b06 	vstr	d7, [r7, #24]
  Jv4[4] = -sin(q[0]) * (380.0 * sin(q[1] + q[2]) + 380.0 * cos(q[1]));
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	ed93 7b00 	vldr	d7, [r3]
 8002386:	eeb0 0b47 	vmov.f64	d0, d7
 800238a:	f015 f819 	bl	80173c0 <sin>
 800238e:	eeb0 7b40 	vmov.f64	d7, d0
 8002392:	eeb1 8b47 	vneg.f64	d8, d7
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3308      	adds	r3, #8
 800239a:	ed93 6b00 	vldr	d6, [r3]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3310      	adds	r3, #16
 80023a2:	ed93 7b00 	vldr	d7, [r3]
 80023a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023aa:	eeb0 0b47 	vmov.f64	d0, d7
 80023ae:	f015 f807 	bl	80173c0 <sin>
 80023b2:	eeb0 7b40 	vmov.f64	d7, d0
 80023b6:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 80025e8 <IVK+0x388>
 80023ba:	ee27 9b06 	vmul.f64	d9, d7, d6
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3308      	adds	r3, #8
 80023c2:	ed93 7b00 	vldr	d7, [r3]
 80023c6:	eeb0 0b47 	vmov.f64	d0, d7
 80023ca:	f014 ffad 	bl	8017328 <cos>
 80023ce:	eeb0 7b40 	vmov.f64	d7, d0
 80023d2:	ed9f 6b85 	vldr	d6, [pc, #532]	; 80025e8 <IVK+0x388>
 80023d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023da:	ee39 7b07 	vadd.f64	d7, d9, d7
 80023de:	ee28 7b07 	vmul.f64	d7, d8, d7
 80023e2:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  Jv4[7] = -380.0 * sin(q[1] + q[2]) * b_Jv4_tmp;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3308      	adds	r3, #8
 80023ea:	ed93 6b00 	vldr	d6, [r3]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3310      	adds	r3, #16
 80023f2:	ed93 7b00 	vldr	d7, [r3]
 80023f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023fa:	eeb0 0b47 	vmov.f64	d0, d7
 80023fe:	f014 ffdf 	bl	80173c0 <sin>
 8002402:	eeb0 7b40 	vmov.f64	d7, d0
 8002406:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80025f0 <IVK+0x390>
 800240a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800240e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002412:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002416:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
  Jv4[2] = 0.0;
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9c7 2308 	strd	r2, r3, [r7, #32]
  Jv4[5] = qvbar_idx_1 - Jv4_tmp_tmp;
 8002426:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 800242a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800242e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002432:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[8] = qvbar_idx_1;
 8002436:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800243a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  r1 = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  r2 = 1;
 8002444:	2301      	movs	r3, #1
 8002446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  rtemp = 2;
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (fabs(Jv4[1]) > fabs(Jv4[0])) {
 8002450:	ed97 7b06 	vldr	d7, [r7, #24]
 8002454:	eeb0 6bc7 	vabs.f64	d6, d7
 8002458:	ed97 7b04 	vldr	d7, [r7, #16]
 800245c:	eeb0 7bc7 	vabs.f64	d7, d7
 8002460:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	dd05      	ble.n	8002476 <IVK+0x216>
    r1 = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    r2 = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  }
  Jv4[r2] /= Jv4[r1];
 8002476:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	3398      	adds	r3, #152	; 0x98
 800247e:	443b      	add	r3, r7
 8002480:	3b88      	subs	r3, #136	; 0x88
 8002482:	ed93 5b00 	vldr	d5, [r3]
 8002486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	3398      	adds	r3, #152	; 0x98
 800248e:	443b      	add	r3, r7
 8002490:	3b88      	subs	r3, #136	; 0x88
 8002492:	ed93 6b00 	vldr	d6, [r3]
 8002496:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800249a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	3398      	adds	r3, #152	; 0x98
 80024a2:	443b      	add	r3, r7
 80024a4:	3b88      	subs	r3, #136	; 0x88
 80024a6:	ed83 7b00 	vstr	d7, [r3]
  Jv4[2] = 0.0 / Jv4[r1];
 80024aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	3398      	adds	r3, #152	; 0x98
 80024b2:	443b      	add	r3, r7
 80024b4:	3b88      	subs	r3, #136	; 0x88
 80024b6:	ed93 6b00 	vldr	d6, [r3]
 80024ba:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 80025f8 <IVK+0x398>
 80024be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024c2:	ed87 7b08 	vstr	d7, [r7, #32]
  Jv4[r2 + 3] -= Jv4[r2] * Jv4[r1 + 3];
 80024c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024ca:	3303      	adds	r3, #3
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	3398      	adds	r3, #152	; 0x98
 80024d0:	443b      	add	r3, r7
 80024d2:	3b88      	subs	r3, #136	; 0x88
 80024d4:	ed93 6b00 	vldr	d6, [r3]
 80024d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	3398      	adds	r3, #152	; 0x98
 80024e0:	443b      	add	r3, r7
 80024e2:	3b88      	subs	r3, #136	; 0x88
 80024e4:	ed93 5b00 	vldr	d5, [r3]
 80024e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024ec:	3303      	adds	r3, #3
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	3398      	adds	r3, #152	; 0x98
 80024f2:	443b      	add	r3, r7
 80024f4:	3b88      	subs	r3, #136	; 0x88
 80024f6:	ed93 7b00 	vldr	d7, [r3]
 80024fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80024fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002502:	3303      	adds	r3, #3
 8002504:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	3398      	adds	r3, #152	; 0x98
 800250c:	443b      	add	r3, r7
 800250e:	3b88      	subs	r3, #136	; 0x88
 8002510:	ed83 7b00 	vstr	d7, [r3]
  Jv4[5] -= Jv4[2] * Jv4[r1 + 3];
 8002514:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8002518:	ed97 5b08 	vldr	d5, [r7, #32]
 800251c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002520:	3303      	adds	r3, #3
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	3398      	adds	r3, #152	; 0x98
 8002526:	443b      	add	r3, r7
 8002528:	3b88      	subs	r3, #136	; 0x88
 800252a:	ed93 7b00 	vldr	d7, [r3]
 800252e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002532:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002536:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[r2 + 6] -= Jv4[r2] * Jv4[r1 + 6];
 800253a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800253e:	3306      	adds	r3, #6
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	3398      	adds	r3, #152	; 0x98
 8002544:	443b      	add	r3, r7
 8002546:	3b88      	subs	r3, #136	; 0x88
 8002548:	ed93 6b00 	vldr	d6, [r3]
 800254c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	3398      	adds	r3, #152	; 0x98
 8002554:	443b      	add	r3, r7
 8002556:	3b88      	subs	r3, #136	; 0x88
 8002558:	ed93 5b00 	vldr	d5, [r3]
 800255c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002560:	3306      	adds	r3, #6
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	3398      	adds	r3, #152	; 0x98
 8002566:	443b      	add	r3, r7
 8002568:	3b88      	subs	r3, #136	; 0x88
 800256a:	ed93 7b00 	vldr	d7, [r3]
 800256e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002576:	3306      	adds	r3, #6
 8002578:	ee36 7b47 	vsub.f64	d7, d6, d7
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	3398      	adds	r3, #152	; 0x98
 8002580:	443b      	add	r3, r7
 8002582:	3b88      	subs	r3, #136	; 0x88
 8002584:	ed83 7b00 	vstr	d7, [r3]
  Jv4[8] -= Jv4[2] * Jv4[r1 + 6];
 8002588:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800258c:	ed97 5b08 	vldr	d5, [r7, #32]
 8002590:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002594:	3306      	adds	r3, #6
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	3398      	adds	r3, #152	; 0x98
 800259a:	443b      	add	r3, r7
 800259c:	3b88      	subs	r3, #136	; 0x88
 800259e:	ed93 7b00 	vldr	d7, [r3]
 80025a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80025a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80025aa:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
  if (fabs(Jv4[5]) > fabs(Jv4[r2 + 3])) {
 80025ae:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80025b2:	eeb0 6bc7 	vabs.f64	d6, d7
 80025b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ba:	3303      	adds	r3, #3
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	3398      	adds	r3, #152	; 0x98
 80025c0:	443b      	add	r3, r7
 80025c2:	3b88      	subs	r3, #136	; 0x88
 80025c4:	ed93 7b00 	vldr	d7, [r3]
 80025c8:	eeb0 7bc7 	vabs.f64	d7, d7
 80025cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	dd14      	ble.n	8002600 <IVK+0x3a0>
    rtemp = r2;
 80025d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    r2 = 2;
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025e4:	e00c      	b.n	8002600 <IVK+0x3a0>
 80025e6:	bf00      	nop
 80025e8:	00000000 	.word	0x00000000
 80025ec:	4077c000 	.word	0x4077c000
 80025f0:	00000000 	.word	0x00000000
 80025f4:	c077c000 	.word	0xc077c000
	...
  }
  Jv4[rtemp + 3] /= Jv4[r2 + 3];
 8002600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002604:	3303      	adds	r3, #3
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	3398      	adds	r3, #152	; 0x98
 800260a:	443b      	add	r3, r7
 800260c:	3b88      	subs	r3, #136	; 0x88
 800260e:	ed93 5b00 	vldr	d5, [r3]
 8002612:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002616:	3303      	adds	r3, #3
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	3398      	adds	r3, #152	; 0x98
 800261c:	443b      	add	r3, r7
 800261e:	3b88      	subs	r3, #136	; 0x88
 8002620:	ed93 6b00 	vldr	d6, [r3]
 8002624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002628:	3303      	adds	r3, #3
 800262a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	3398      	adds	r3, #152	; 0x98
 8002632:	443b      	add	r3, r7
 8002634:	3b88      	subs	r3, #136	; 0x88
 8002636:	ed83 7b00 	vstr	d7, [r3]
  Jv4[rtemp + 6] -= Jv4[rtemp + 3] * Jv4[r2 + 6];
 800263a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263e:	3306      	adds	r3, #6
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	3398      	adds	r3, #152	; 0x98
 8002644:	443b      	add	r3, r7
 8002646:	3b88      	subs	r3, #136	; 0x88
 8002648:	ed93 6b00 	vldr	d6, [r3]
 800264c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002650:	3303      	adds	r3, #3
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	3398      	adds	r3, #152	; 0x98
 8002656:	443b      	add	r3, r7
 8002658:	3b88      	subs	r3, #136	; 0x88
 800265a:	ed93 5b00 	vldr	d5, [r3]
 800265e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002662:	3306      	adds	r3, #6
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	3398      	adds	r3, #152	; 0x98
 8002668:	443b      	add	r3, r7
 800266a:	3b88      	subs	r3, #136	; 0x88
 800266c:	ed93 7b00 	vldr	d7, [r3]
 8002670:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002678:	3306      	adds	r3, #6
 800267a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	3398      	adds	r3, #152	; 0x98
 8002682:	443b      	add	r3, r7
 8002684:	3b88      	subs	r3, #136	; 0x88
 8002686:	ed83 7b00 	vstr	d7, [r3]
  qvbar_idx_1 = chi_dot[r2] - chi_dot[r1] * Jv4[r2];
 800268a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	4413      	add	r3, r2
 8002694:	ed93 6b00 	vldr	d6, [r3]
 8002698:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	4413      	add	r3, r2
 80026a2:	ed93 5b00 	vldr	d5, [r3]
 80026a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3398      	adds	r3, #152	; 0x98
 80026ae:	443b      	add	r3, r7
 80026b0:	3b88      	subs	r3, #136	; 0x88
 80026b2:	ed93 7b00 	vldr	d7, [r3]
 80026b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80026be:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 80026c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	4413      	add	r3, r2
 80026cc:	ed93 6b00 	vldr	d6, [r3]
 80026d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4413      	add	r3, r2
 80026da:	ed93 5b00 	vldr	d5, [r3]
 80026de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	3398      	adds	r3, #152	; 0x98
 80026e6:	443b      	add	r3, r7
 80026e8:	3b88      	subs	r3, #136	; 0x88
 80026ea:	ed93 7b00 	vldr	d7, [r3]
 80026ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026f2:	ee36 6b47 	vsub.f64	d6, d6, d7
                 qvbar_idx_1 * Jv4[rtemp + 3]) /
 80026f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026fa:	3303      	adds	r3, #3
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	3398      	adds	r3, #152	; 0x98
 8002700:	443b      	add	r3, r7
 8002702:	3b88      	subs	r3, #136	; 0x88
 8002704:	ed93 5b00 	vldr	d5, [r3]
 8002708:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800270c:	ee25 7b07 	vmul.f64	d7, d5, d7
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8002710:	ee36 5b47 	vsub.f64	d5, d6, d7
                Jv4[rtemp + 6];
 8002714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002718:	3306      	adds	r3, #6
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	3398      	adds	r3, #152	; 0x98
 800271e:	443b      	add	r3, r7
 8002720:	3b88      	subs	r3, #136	; 0x88
 8002722:	ed93 6b00 	vldr	d6, [r3]
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8002726:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800272a:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
  qvbar_idx_1 -= qvbar_idx_2 * Jv4[r2 + 6];
 800272e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002732:	3306      	adds	r3, #6
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	3398      	adds	r3, #152	; 0x98
 8002738:	443b      	add	r3, r7
 800273a:	3b88      	subs	r3, #136	; 0x88
 800273c:	ed93 6b00 	vldr	d6, [r3]
 8002740:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002744:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002748:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 800274c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002750:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_1 /= Jv4[r2 + 3];
 8002754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002758:	3303      	adds	r3, #3
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	3398      	adds	r3, #152	; 0x98
 800275e:	443b      	add	r3, r7
 8002760:	3b88      	subs	r3, #136	; 0x88
 8002762:	ed93 6b00 	vldr	d6, [r3]
 8002766:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 800276a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800276e:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qv[0] =
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8002772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	4413      	add	r3, r2
 800277c:	ed93 6b00 	vldr	d6, [r3]
 8002780:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002784:	3306      	adds	r3, #6
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	3398      	adds	r3, #152	; 0x98
 800278a:	443b      	add	r3, r7
 800278c:	3b88      	subs	r3, #136	; 0x88
 800278e:	ed93 5b00 	vldr	d5, [r3]
 8002792:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002796:	ee25 7b07 	vmul.f64	d7, d5, d7
 800279a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800279e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027a2:	3303      	adds	r3, #3
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	3398      	adds	r3, #152	; 0x98
 80027a8:	443b      	add	r3, r7
 80027aa:	3b88      	subs	r3, #136	; 0x88
 80027ac:	ed93 5b00 	vldr	d5, [r3]
 80027b0:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80027b4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027b8:	ee36 5b47 	vsub.f64	d5, d6, d7
      Jv4[r1];
 80027bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	3398      	adds	r3, #152	; 0x98
 80027c4:	443b      	add	r3, r7
 80027c6:	3b88      	subs	r3, #136	; 0x88
 80027c8:	ed93 6b00 	vldr	d6, [r3]
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 80027cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
  qv[0] =
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	ed83 7b00 	vstr	d7, [r3]
  qv[1] = qvbar_idx_1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f103 0108 	add.w	r1, r3, #8
 80027dc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80027e0:	e9c1 2300 	strd	r2, r3, [r1]
  qv[2] = qvbar_idx_2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f103 0110 	add.w	r1, r3, #16
 80027ea:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80027ee:	e9c1 2300 	strd	r2, r3, [r1]
  qv[3] = -qvbar_idx_1 - qvbar_idx_2;
 80027f2:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80027f6:	eeb1 6b47 	vneg.f64	d6, d7
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3318      	adds	r3, #24
 80027fe:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002802:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002806:	ed83 7b00 	vstr	d7, [r3]
  return Kinematics_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3798      	adds	r7, #152	; 0x98
 8002810:	46bd      	mov	sp, r7
 8002812:	ecbd 8b04 	vpop	{d8-d9}
 8002816:	bd80      	pop	{r7, pc}

08002818 <FPK>:
 * Arguments    : const double q[5]
 *                double l3
 *                double Pne[3]
 * Return Type  : void
 */
void FPK(double q[5], double l3, double Pne[3]) {
 8002818:	b580      	push	{r7, lr}
 800281a:	ed2d 8b08 	vpush	{d8-d11}
 800281e:	b094      	sub	sp, #80	; 0x50
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	ed87 0b00 	vstr	d0, [r7]
 8002828:	60b9      	str	r1, [r7, #8]
	double e_Pne_tmp;
	double f_Pne_tmp;
	double g_Pne_tmp;
	double h_Pne_tmp;
	/* offset */
	Pne_tmp = cos(q[0]);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	ed93 7b00 	vldr	d7, [r3]
 8002830:	eeb0 0b47 	vmov.f64	d0, d7
 8002834:	f014 fd78 	bl	8017328 <cos>
 8002838:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	b_Pne_tmp = sin(q[2]);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3310      	adds	r3, #16
 8002840:	ed93 7b00 	vldr	d7, [r3]
 8002844:	eeb0 0b47 	vmov.f64	d0, d7
 8002848:	f014 fdba 	bl	80173c0 <sin>
 800284c:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	c_Pne_tmp = cos(q[2]);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3310      	adds	r3, #16
 8002854:	ed93 7b00 	vldr	d7, [r3]
 8002858:	eeb0 0b47 	vmov.f64	d0, d7
 800285c:	f014 fd64 	bl	8017328 <cos>
 8002860:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	d_Pne_tmp = sin(q[1]);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3308      	adds	r3, #8
 8002868:	ed93 7b00 	vldr	d7, [r3]
 800286c:	eeb0 0b47 	vmov.f64	d0, d7
 8002870:	f014 fda6 	bl	80173c0 <sin>
 8002874:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	e_Pne_tmp = cos(q[1]);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3308      	adds	r3, #8
 800287c:	ed93 7b00 	vldr	d7, [r3]
 8002880:	eeb0 0b47 	vmov.f64	d0, d7
 8002884:	f014 fd50 	bl	8017328 <cos>
 8002888:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	f_Pne_tmp = sin(q[0]);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	ed93 7b00 	vldr	d7, [r3]
 8002892:	eeb0 0b47 	vmov.f64	d0, d7
 8002896:	f014 fd93 	bl	80173c0 <sin>
 800289a:	ed87 0b08 	vstr	d0, [r7, #32]
	g_Pne_tmp = cos(q[3]);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3318      	adds	r3, #24
 80028a2:	ed93 7b00 	vldr	d7, [r3]
 80028a6:	eeb0 0b47 	vmov.f64	d0, d7
 80028aa:	f014 fd3d 	bl	8017328 <cos>
 80028ae:	ed87 0b06 	vstr	d0, [r7, #24]
	h_Pne_tmp = sin(q[3]);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3318      	adds	r3, #24
 80028b6:	ed93 7b00 	vldr	d7, [r3]
 80028ba:	eeb0 0b47 	vmov.f64	d0, d7
 80028be:	f014 fd7f 	bl	80173c0 <sin>
 80028c2:	ed87 0b04 	vstr	d0, [r7, #16]
	Pne[0] =
			((380.0
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 80028c6:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80028ca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80028ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 80028d2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80028d6:	ee26 6b07 	vmul.f64	d6, d6, d7
							- Pne_tmp * d_Pne_tmp * b_Pne_tmp)
 80028da:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 80028de:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80028e2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80028e6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80028ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80028ee:	ee36 7b47 	vsub.f64	d7, d6, d7
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 80028f2:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 8002c60 <FPK+0x448>
 80028f6:	ee27 8b06 	vmul.f64	d8, d7, d6
					+ l3
							* (g_Pne_tmp
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	ed93 7b00 	vldr	d7, [r3]
 8002900:	eeb0 0b47 	vmov.f64	d0, d7
 8002904:	f014 fd10 	bl	8017328 <cos>
 8002908:	eeb0 9b40 	vmov.f64	d9, d0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3308      	adds	r3, #8
 8002910:	ed93 7b00 	vldr	d7, [r3]
 8002914:	eeb0 0b47 	vmov.f64	d0, d7
 8002918:	f014 fd06 	bl	8017328 <cos>
 800291c:	eeb0 7b40 	vmov.f64	d7, d0
 8002920:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002924:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002928:	ee26 6b07 	vmul.f64	d6, d6, d7
											+ Pne_tmp * c_Pne_tmp * d_Pne_tmp)
 800292c:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8002930:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002934:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002938:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800293c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002940:	ee36 6b07 	vadd.f64	d6, d6, d7
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 8002944:	ed97 7b06 	vldr	d7, [r7, #24]
 8002948:	ee26 9b07 	vmul.f64	d9, d6, d7
									+ h_Pne_tmp
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	ed93 7b00 	vldr	d7, [r3]
 8002952:	eeb0 0b47 	vmov.f64	d0, d7
 8002956:	f014 fce7 	bl	8017328 <cos>
 800295a:	eeb0 ab40 	vmov.f64	d10, d0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3308      	adds	r3, #8
 8002962:	ed93 7b00 	vldr	d7, [r3]
 8002966:	eeb0 0b47 	vmov.f64	d0, d7
 800296a:	f014 fcdd 	bl	8017328 <cos>
 800296e:	eeb0 7b40 	vmov.f64	d7, d0
 8002972:	ee2a ab07 	vmul.f64	d10, d10, d7
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3310      	adds	r3, #16
 800297a:	ed93 7b00 	vldr	d7, [r3]
 800297e:	eeb0 0b47 	vmov.f64	d0, d7
 8002982:	f014 fcd1 	bl	8017328 <cos>
 8002986:	eeb0 7b40 	vmov.f64	d7, d0
 800298a:	ee2a ab07 	vmul.f64	d10, d10, d7
													- cos(q[0]) * sin(q[1])
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	ed93 7b00 	vldr	d7, [r3]
 8002994:	eeb0 0b47 	vmov.f64	d0, d7
 8002998:	f014 fcc6 	bl	8017328 <cos>
 800299c:	eeb0 bb40 	vmov.f64	d11, d0
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3308      	adds	r3, #8
 80029a4:	ed93 7b00 	vldr	d7, [r3]
 80029a8:	eeb0 0b47 	vmov.f64	d0, d7
 80029ac:	f014 fd08 	bl	80173c0 <sin>
 80029b0:	eeb0 7b40 	vmov.f64	d7, d0
 80029b4:	ee2b bb07 	vmul.f64	d11, d11, d7
															* sin(q[2]))))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3310      	adds	r3, #16
 80029bc:	ed93 7b00 	vldr	d7, [r3]
 80029c0:	eeb0 0b47 	vmov.f64	d0, d7
 80029c4:	f014 fcfc 	bl	80173c0 <sin>
 80029c8:	eeb0 7b40 	vmov.f64	d7, d0
 80029cc:	ee2b 7b07 	vmul.f64	d7, d11, d7
													- cos(q[0]) * sin(q[1])
 80029d0:	ee3a 6b47 	vsub.f64	d6, d10, d7
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 80029d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80029d8:	ee26 7b07 	vmul.f64	d7, d6, d7
									+ h_Pne_tmp
 80029dc:	ee39 6b07 	vadd.f64	d6, d9, d7
							* (g_Pne_tmp
 80029e0:	ed97 7b00 	vldr	d7, [r7]
 80029e4:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ l3
 80029e8:	ee38 6b07 	vadd.f64	d6, d8, d7
					+ 20.0 * Pne_tmp) - 380.0 * Pne_tmp * d_Pne_tmp;
 80029ec:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80029f0:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80029f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80029f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80029fc:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002a00:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8002c60 <FPK+0x448>
 8002a04:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002a08:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a0c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a10:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[0] =
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	ed83 7b00 	vstr	d7, [r3]
	Pne[1] = ((l3
			* (g_Pne_tmp
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 8002a1a:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002a1e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a26:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002a2a:	ee26 6b07 	vmul.f64	d6, d6, d7
							+ c_Pne_tmp * f_Pne_tmp * d_Pne_tmp)
 8002a2e:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8002a32:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a36:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a3a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a3e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a42:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 8002a46:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a4a:	ee26 6b07 	vmul.f64	d6, d6, d7
					- h_Pne_tmp
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 8002a4e:	ed97 5b08 	vldr	d5, [r7, #32]
 8002a52:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a56:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a5a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002a5e:	ee25 5b07 	vmul.f64	d5, d5, d7
									- e_Pne_tmp * c_Pne_tmp * f_Pne_tmp))
 8002a62:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 8002a66:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002a6a:	ee24 4b07 	vmul.f64	d4, d4, d7
 8002a6e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a72:	ee24 7b07 	vmul.f64	d7, d4, d7
 8002a76:	ee35 5b47 	vsub.f64	d5, d5, d7
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 8002a7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a7e:	ee25 7b07 	vmul.f64	d7, d5, d7
					- h_Pne_tmp
 8002a82:	ee36 6b47 	vsub.f64	d6, d6, d7
			* (g_Pne_tmp
 8002a86:	ed97 7b00 	vldr	d7, [r7]
 8002a8a:	ee26 8b07 	vmul.f64	d8, d6, d7
			- 380.0
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	ed93 7b00 	vldr	d7, [r3]
 8002a94:	eeb0 0b47 	vmov.f64	d0, d7
 8002a98:	f014 fc92 	bl	80173c0 <sin>
 8002a9c:	eeb0 9b40 	vmov.f64	d9, d0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	ed93 7b00 	vldr	d7, [r3]
 8002aa8:	eeb0 0b47 	vmov.f64	d0, d7
 8002aac:	f014 fc88 	bl	80173c0 <sin>
 8002ab0:	eeb0 7b40 	vmov.f64	d7, d0
 8002ab4:	ee29 9b07 	vmul.f64	d9, d9, d7
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3310      	adds	r3, #16
 8002abc:	ed93 7b00 	vldr	d7, [r3]
 8002ac0:	eeb0 0b47 	vmov.f64	d0, d7
 8002ac4:	f014 fc7c 	bl	80173c0 <sin>
 8002ac8:	eeb0 7b40 	vmov.f64	d7, d0
 8002acc:	ee29 9b07 	vmul.f64	d9, d9, d7
							- cos(q[1]) * cos(q[2]) * sin(q[0])))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	ed93 7b00 	vldr	d7, [r3]
 8002ad8:	eeb0 0b47 	vmov.f64	d0, d7
 8002adc:	f014 fc24 	bl	8017328 <cos>
 8002ae0:	eeb0 ab40 	vmov.f64	d10, d0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3310      	adds	r3, #16
 8002ae8:	ed93 7b00 	vldr	d7, [r3]
 8002aec:	eeb0 0b47 	vmov.f64	d0, d7
 8002af0:	f014 fc1a 	bl	8017328 <cos>
 8002af4:	eeb0 7b40 	vmov.f64	d7, d0
 8002af8:	ee2a ab07 	vmul.f64	d10, d10, d7
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	ed93 7b00 	vldr	d7, [r3]
 8002b02:	eeb0 0b47 	vmov.f64	d0, d7
 8002b06:	f014 fc5b 	bl	80173c0 <sin>
 8002b0a:	eeb0 7b40 	vmov.f64	d7, d0
 8002b0e:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8002b12:	ee39 7b47 	vsub.f64	d7, d9, d7
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 8002b16:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8002c60 <FPK+0x448>
 8002b1a:	ee27 7b06 	vmul.f64	d7, d7, d6
			- 380.0
 8002b1e:	ee38 6b47 	vsub.f64	d6, d8, d7
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 8002b22:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b26:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002b2a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b32:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b36:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8002c60 <FPK+0x448>
 8002b3a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002b3e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002b42:	ee25 7b07 	vmul.f64	d7, d5, d7
	Pne[1] = ((l3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3308      	adds	r3, #8
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 8002b4a:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[1] = ((l3
 8002b4e:	ed83 7b00 	vstr	d7, [r3]
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002b52:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002b56:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002b5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b5e:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8002b62:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002b66:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b6e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002c60 <FPK+0x448>
 8002b72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b76:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002c68 <FPK+0x450>
 8002b7a:	ee37 6b06 	vadd.f64	d6, d7, d6
			+ 380.0 * e_Pne_tmp)
 8002b7e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002b82:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8002c60 <FPK+0x448>
 8002b86:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b8a:	ee36 8b07 	vadd.f64	d8, d6, d7
			- l3
					* (g_Pne_tmp
							* (cos(q[1]) * cos(q[2]) - d_Pne_tmp * b_Pne_tmp)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3308      	adds	r3, #8
 8002b92:	ed93 7b00 	vldr	d7, [r3]
 8002b96:	eeb0 0b47 	vmov.f64	d0, d7
 8002b9a:	f014 fbc5 	bl	8017328 <cos>
 8002b9e:	eeb0 9b40 	vmov.f64	d9, d0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	ed93 7b00 	vldr	d7, [r3]
 8002baa:	eeb0 0b47 	vmov.f64	d0, d7
 8002bae:	f014 fbbb 	bl	8017328 <cos>
 8002bb2:	eeb0 7b40 	vmov.f64	d7, d0
 8002bb6:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002bba:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8002bbe:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002bc2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002bc6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002bca:	ed97 7b06 	vldr	d7, [r7, #24]
 8002bce:	ee26 9b07 	vmul.f64	d9, d6, d7
							- h_Pne_tmp
									* (cos(q[1]) * sin(q[2])
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	ed93 7b00 	vldr	d7, [r3]
 8002bda:	eeb0 0b47 	vmov.f64	d0, d7
 8002bde:	f014 fba3 	bl	8017328 <cos>
 8002be2:	eeb0 ab40 	vmov.f64	d10, d0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3310      	adds	r3, #16
 8002bea:	ed93 7b00 	vldr	d7, [r3]
 8002bee:	eeb0 0b47 	vmov.f64	d0, d7
 8002bf2:	f014 fbe5 	bl	80173c0 <sin>
 8002bf6:	eeb0 7b40 	vmov.f64	d7, d0
 8002bfa:	ee2a ab07 	vmul.f64	d10, d10, d7
											+ cos(q[2]) * sin(q[1])));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3310      	adds	r3, #16
 8002c02:	ed93 7b00 	vldr	d7, [r3]
 8002c06:	eeb0 0b47 	vmov.f64	d0, d7
 8002c0a:	f014 fb8d 	bl	8017328 <cos>
 8002c0e:	eeb0 bb40 	vmov.f64	d11, d0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3308      	adds	r3, #8
 8002c16:	ed93 7b00 	vldr	d7, [r3]
 8002c1a:	eeb0 0b47 	vmov.f64	d0, d7
 8002c1e:	f014 fbcf 	bl	80173c0 <sin>
 8002c22:	eeb0 7b40 	vmov.f64	d7, d0
 8002c26:	ee2b 7b07 	vmul.f64	d7, d11, d7
 8002c2a:	ee3a 6b07 	vadd.f64	d6, d10, d7
									* (cos(q[1]) * sin(q[2])
 8002c2e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c32:	ee26 7b07 	vmul.f64	d7, d6, d7
							- h_Pne_tmp
 8002c36:	ee39 6b47 	vsub.f64	d6, d9, d7
					* (g_Pne_tmp
 8002c3a:	ed97 7b00 	vldr	d7, [r7]
 8002c3e:	ee26 7b07 	vmul.f64	d7, d6, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3310      	adds	r3, #16
			- l3
 8002c46:	ee38 7b47 	vsub.f64	d7, d8, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002c4a:	ed83 7b00 	vstr	d7, [r3]
}
 8002c4e:	bf00      	nop
 8002c50:	3750      	adds	r7, #80	; 0x50
 8002c52:	46bd      	mov	sp, r7
 8002c54:	ecbd 8b08 	vpop	{d8-d11}
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	f3af 8000 	nop.w
 8002c60:	00000000 	.word	0x00000000
 8002c64:	4077c000 	.word	0x4077c000
 8002c68:	70a3d70a 	.word	0x70a3d70a
 8002c6c:	40727e3d 	.word	0x40727e3d

08002c70 <ChessPose>:
	twist_tmp = l3 * sin((q[1] + q[2]) + q[3]);
	twist[2] = (qd[1] * ((twist_tmp_tmp - twist_tmp_tmp_tmp) + twist_tmp)
			+ qd[2] * (twist_tmp_tmp + twist_tmp)) + g_twist_tmp * d_twist_tmp;
}

void ChessPose(uint8_t Chess_Index, double Chess_Theta, double ChessPosition[2]) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b096      	sub	sp, #88	; 0x58
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	ed87 0b00 	vstr	d0, [r7]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	73fb      	strb	r3, [r7, #15]
	/*
	 *
	 */
	uint8_t X = (Chess_Index%8) + 1;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t N = (Chess_Index/8) + 1;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	double l = 250;
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	4b45      	ldr	r3, [pc, #276]	; (8002db4 <ChessPose+0x144>)
 8002ca0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double L = 400;
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	4b43      	ldr	r3, [pc, #268]	; (8002db8 <ChessPose+0x148>)
 8002caa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double YOffset = 10;
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	4b42      	ldr	r3, [pc, #264]	; (8002dbc <ChessPose+0x14c>)
 8002cb4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double b_positionx_tmp;
	double c_positionx_tmp;
	double d_positionx_tmp;
	double e_positionx_tmp;
	double positionx_tmp;
	positionx_tmp = cos(Chess_Theta);
 8002cb8:	ed97 0b00 	vldr	d0, [r7]
 8002cbc:	f014 fb34 	bl	8017328 <cos>
 8002cc0:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	b_positionx_tmp = sin(Chess_Theta);
 8002cc4:	ed97 0b00 	vldr	d0, [r7]
 8002cc8:	f014 fb7a 	bl	80173c0 <sin>
 8002ccc:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	c_positionx_tmp = 9.0 * L / 16.0;
 8002cd0:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002cd4:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002cd8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002cdc:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8002ce0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002ce4:	ed87 7b08 	vstr	d7, [r7, #32]
	d_positionx_tmp = X * L / 8.0 - c_positionx_tmp;
 8002ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002cec:	ee07 3a90 	vmov	s15, r3
 8002cf0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002cf4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002cf8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002cfc:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002d00:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d04:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d0c:	ed87 7b06 	vstr	d7, [r7, #24]
	e_positionx_tmp = N * L / 8.0;
 8002d10:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002d14:	ee07 3a90 	vmov	s15, r3
 8002d18:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002d1c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002d20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002d24:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002d28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d2c:	ed87 7b04 	vstr	d7, [r7, #16]
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002d30:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002d34:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d38:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp * positionx_tmp)) + l)
 8002d3c:	ed97 5b08 	vldr	d5, [r7, #32]
 8002d40:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002d44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d48:	ed97 5b04 	vldr	d5, [r7, #16]
 8002d4c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002d50:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d54:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002d58:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ L / 2.0;
 8002d5c:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
 8002d60:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002d64:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002d68:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[0] = ((b_positionx_tmp * d_positionx_tmp
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	ed83 7b00 	vstr	d7, [r3]
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002d72:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002d76:	eeb1 6b47 	vneg.f64	d6, d7
 8002d7a:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d7e:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp) + YOffset;
 8002d82:	ed97 5b04 	vldr	d5, [r7, #16]
 8002d86:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d8a:	ee35 5b47 	vsub.f64	d5, d5, d7
 8002d8e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002d92:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d96:	ee36 6b07 	vadd.f64	d6, d6, d7
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	3308      	adds	r3, #8
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp) + YOffset;
 8002d9e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002da2:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002da6:	ed83 7b00 	vstr	d7, [r3]
}
 8002daa:	bf00      	nop
 8002dac:	3758      	adds	r7, #88	; 0x58
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	406f4000 	.word	0x406f4000
 8002db8:	40790000 	.word	0x40790000
 8002dbc:	40240000 	.word	0x40240000

08002dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b096      	sub	sp, #88	; 0x58
 8002dc4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dc6:	f004 fb2d 	bl	8007424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dca:	f000 fba3 	bl	8003514 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002dce:	f000 fc19 	bl	8003604 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dd2:	f7fe ff2f 	bl	8001c34 <MX_GPIO_Init>
  MX_DMA_Init();
 8002dd6:	f7fe fefd 	bl	8001bd4 <MX_DMA_Init>
  MX_ADC3_Init();
 8002dda:	f7fd ffc5 	bl	8000d68 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002dde:	f002 ffa5 	bl	8005d2c <MX_TIM1_Init>
  MX_TIM3_Init();
 8002de2:	f003 f887 	bl	8005ef4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002de6:	f003 f90b 	bl	8006000 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002dea:	f003 f95f 	bl	80060ac <MX_TIM5_Init>
  MX_TIM8_Init();
 8002dee:	f003 fa19 	bl	8006224 <MX_TIM8_Init>
  MX_TIM13_Init();
 8002df2:	f003 fa71 	bl	80062d8 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002df6:	f003 fabf 	bl	8006378 <MX_TIM14_Init>
  MX_TIM15_Init();
 8002dfa:	f003 fb0d 	bl	8006418 <MX_TIM15_Init>
  MX_TIM16_Init();
 8002dfe:	f003 fb93 	bl	8006528 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002e02:	f003 fc0d 	bl	8006620 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002e06:	f004 f919 	bl	800703c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002e0a:	f004 f965 	bl	80070d8 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8002e0e:	f002 fd19 	bl	8005844 <MX_SPI3_Init>
  MX_SPI4_Init();
 8002e12:	f002 fd6f 	bl	80058f4 <MX_SPI4_Init>
  MX_I2C2_Init();
 8002e16:	f7ff f847 	bl	8001ea8 <MX_I2C2_Init>
  MX_CRC_Init();
 8002e1a:	f7fe fe8d 	bl	8001b38 <MX_CRC_Init>
  MX_TIM24_Init();
 8002e1e:	f003 fccb 	bl	80067b8 <MX_TIM24_Init>
  MX_TIM23_Init();
 8002e22:	f003 fc79 	bl	8006718 <MX_TIM23_Init>
  MX_TIM6_Init();
 8002e26:	f003 f9c5 	bl	80061b4 <MX_TIM6_Init>
  MX_UART5_Init();
 8002e2a:	f004 f8b5 	bl	8006f98 <MX_UART5_Init>
  MX_ADC1_Init();
 8002e2e:	f7fd febf 	bl	8000bb0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002e32:	f7fd ff39 	bl	8000ca8 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002e36:	f003 f809 	bl	8005e4c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	MX_DMA_Init();
 8002e3a:	f7fe fecb 	bl	8001bd4 <MX_DMA_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 8002e3e:	2201      	movs	r2, #1
 8002e40:	2140      	movs	r1, #64	; 0x40
 8002e42:	48c9      	ldr	r0, [pc, #804]	; (8003168 <main+0x3a8>)
 8002e44:	f009 fff0 	bl	800ce28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 8002e48:	2201      	movs	r2, #1
 8002e4a:	2140      	movs	r1, #64	; 0x40
 8002e4c:	48c7      	ldr	r0, [pc, #796]	; (800316c <main+0x3ac>)
 8002e4e:	f009 ffeb 	bl	800ce28 <HAL_GPIO_WritePin>

	Temp_Calibration =
			(110.0 - 30.0)
					/ (*(unsigned short*) (0x1FF1E840)
 8002e52:	4bc7      	ldr	r3, [pc, #796]	; (8003170 <main+0x3b0>)
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
							- *(unsigned short*) (0x1FF1E820));
 8002e58:	4bc6      	ldr	r3, [pc, #792]	; (8003174 <main+0x3b4>)
 8002e5a:	881b      	ldrh	r3, [r3, #0]
 8002e5c:	1ad3      	subs	r3, r2, r3
					/ (*(unsigned short*) (0x1FF1E840)
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002e66:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 8003100 <main+0x340>
 8002e6a:	ee85 7b06 	vdiv.f64	d7, d5, d6
	Temp_Calibration =
 8002e6e:	4bc2      	ldr	r3, [pc, #776]	; (8003178 <main+0x3b8>)
 8002e70:	ed83 7b00 	vstr	d7, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002e74:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002e78:	2100      	movs	r1, #0
 8002e7a:	48c0      	ldr	r0, [pc, #768]	; (800317c <main+0x3bc>)
 8002e7c:	f006 fb5e 	bl	800953c <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0, 6500);
 8002e80:	2301      	movs	r3, #1
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8003108 <main+0x348>
 8002e88:	4bbd      	ldr	r3, [pc, #756]	; (8003180 <main+0x3c0>)
 8002e8a:	4ab7      	ldr	r2, [pc, #732]	; (8003168 <main+0x3a8>)
 8002e8c:	49bd      	ldr	r1, [pc, #756]	; (8003184 <main+0x3c4>)
 8002e8e:	48be      	ldr	r0, [pc, #760]	; (8003188 <main+0x3c8>)
 8002e90:	f7fd fbe6 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1, 10100);
 8002e94:	2302      	movs	r3, #2
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8003110 <main+0x350>
 8002e9c:	4bb8      	ldr	r3, [pc, #736]	; (8003180 <main+0x3c0>)
 8002e9e:	4ab2      	ldr	r2, [pc, #712]	; (8003168 <main+0x3a8>)
 8002ea0:	49b8      	ldr	r1, [pc, #736]	; (8003184 <main+0x3c4>)
 8002ea2:	48ba      	ldr	r0, [pc, #744]	; (800318c <main+0x3cc>)
 8002ea4:	f7fd fbdc 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2, 3165);
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8003118 <main+0x358>
 8002eb0:	4bb3      	ldr	r3, [pc, #716]	; (8003180 <main+0x3c0>)
 8002eb2:	4aad      	ldr	r2, [pc, #692]	; (8003168 <main+0x3a8>)
 8002eb4:	49b3      	ldr	r1, [pc, #716]	; (8003184 <main+0x3c4>)
 8002eb6:	48b6      	ldr	r0, [pc, #728]	; (8003190 <main+0x3d0>)
 8002eb8:	f7fd fbd2 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3, 6970);
 8002ebc:	2308      	movs	r3, #8
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	ed9f 0b97 	vldr	d0, [pc, #604]	; 8003120 <main+0x360>
 8002ec4:	4bae      	ldr	r3, [pc, #696]	; (8003180 <main+0x3c0>)
 8002ec6:	4aa8      	ldr	r2, [pc, #672]	; (8003168 <main+0x3a8>)
 8002ec8:	49ae      	ldr	r1, [pc, #696]	; (8003184 <main+0x3c4>)
 8002eca:	48b2      	ldr	r0, [pc, #712]	; (8003194 <main+0x3d4>)
 8002ecc:	f7fd fbc8 	bl	8000660 <AS5047U_init>

	HAL_Delay(50);
 8002ed0:	2032      	movs	r0, #50	; 0x32
 8002ed2:	f004 fb39 	bl	8007548 <HAL_Delay>

	/* Encoder ABI Res Setting */
	AS5047U_Write(&Encoder[0], 0x001A, 0b01000000);
 8002ed6:	2240      	movs	r2, #64	; 0x40
 8002ed8:	211a      	movs	r1, #26
 8002eda:	48ab      	ldr	r0, [pc, #684]	; (8003188 <main+0x3c8>)
 8002edc:	f7fd fc0c 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[1], 0x001A, 0b01000000);
 8002ee0:	2240      	movs	r2, #64	; 0x40
 8002ee2:	211a      	movs	r1, #26
 8002ee4:	48a9      	ldr	r0, [pc, #676]	; (800318c <main+0x3cc>)
 8002ee6:	f7fd fc07 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[2], 0x001A, 0b01000000);
 8002eea:	2240      	movs	r2, #64	; 0x40
 8002eec:	211a      	movs	r1, #26
 8002eee:	48a8      	ldr	r0, [pc, #672]	; (8003190 <main+0x3d0>)
 8002ef0:	f7fd fc02 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[3], 0x001A, 0b01000000);
 8002ef4:	2240      	movs	r2, #64	; 0x40
 8002ef6:	211a      	movs	r1, #26
 8002ef8:	48a6      	ldr	r0, [pc, #664]	; (8003194 <main+0x3d4>)
 8002efa:	f7fd fbfd 	bl	80006f8 <AS5047U_Write>

	/* Chess Board Encoder */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002efe:	213c      	movs	r1, #60	; 0x3c
 8002f00:	48a5      	ldr	r0, [pc, #660]	; (8003198 <main+0x3d8>)
 8002f02:	f010 f967 	bl	80131d4 <HAL_TIM_Encoder_Start>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 5000, 0.001);
 8002f06:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8003128 <main+0x368>
 8002f0a:	ed9f 0b89 	vldr	d0, [pc, #548]	; 8003130 <main+0x370>
 8002f0e:	48a3      	ldr	r0, [pc, #652]	; (800319c <main+0x3dc>)
 8002f10:	f7fe fac2 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[1], 5000, 0.001);
 8002f14:	ed9f 1b84 	vldr	d1, [pc, #528]	; 8003128 <main+0x368>
 8002f18:	ed9f 0b85 	vldr	d0, [pc, #532]	; 8003130 <main+0x370>
 8002f1c:	48a0      	ldr	r0, [pc, #640]	; (80031a0 <main+0x3e0>)
 8002f1e:	f7fe fabb 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[2], 5000, 0.001);
 8002f22:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8003128 <main+0x368>
 8002f26:	ed9f 0b82 	vldr	d0, [pc, #520]	; 8003130 <main+0x370>
 8002f2a:	489e      	ldr	r0, [pc, #632]	; (80031a4 <main+0x3e4>)
 8002f2c:	f7fe fab4 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[3], 5000, 0.001);
 8002f30:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8003128 <main+0x368>
 8002f34:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 8003130 <main+0x370>
 8002f38:	489b      	ldr	r0, [pc, #620]	; (80031a8 <main+0x3e8>)
 8002f3a:	f7fe faad 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[5], 5000, 0.001);
 8002f3e:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8003128 <main+0x368>
 8002f42:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8003130 <main+0x370>
 8002f46:	4899      	ldr	r0, [pc, #612]	; (80031ac <main+0x3ec>)
 8002f48:	f7fe faa6 	bl	8001498 <Kalman_init>

	/*			CascadeControl			*/
	CascadeControl_init(&Control[0], 0.75, 0, 0, 15, 0.5, 10, 400);
 8002f4c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8003138 <main+0x378>
 8002f50:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002f54:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8002f58:	eeb2 3b0e 	vmov.f64	d3, #46	; 0x41700000  15.0
 8002f5c:	ed9f 2b78 	vldr	d2, [pc, #480]	; 8003140 <main+0x380>
 8002f60:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8003140 <main+0x380>
 8002f64:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8002f68:	4891      	ldr	r0, [pc, #580]	; (80031b0 <main+0x3f0>)
 8002f6a:	f7fe fd48 	bl	80019fe <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.5, 0, 0.5, 10, 0, 30, 410);
 8002f6e:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8003148 <main+0x388>
 8002f72:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002f76:	ed9f 4b72 	vldr	d4, [pc, #456]	; 8003140 <main+0x380>
 8002f7a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002f7e:	eeb6 2b00 	vmov.f64	d2, #96	; 0x3f000000  0.5
 8002f82:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8003140 <main+0x380>
 8002f86:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002f8a:	488a      	ldr	r0, [pc, #552]	; (80031b4 <main+0x3f4>)
 8002f8c:	f7fe fd37 	bl	80019fe <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.5, 0, 0.3, 25, 0, 30, 800);
 8002f90:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8003150 <main+0x390>
 8002f94:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002f98:	ed9f 4b69 	vldr	d4, [pc, #420]	; 8003140 <main+0x380>
 8002f9c:	eeb3 3b09 	vmov.f64	d3, #57	; 0x41c80000  25.0
 8002fa0:	ed9f 2b6d 	vldr	d2, [pc, #436]	; 8003158 <main+0x398>
 8002fa4:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8003140 <main+0x380>
 8002fa8:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002fac:	4882      	ldr	r0, [pc, #520]	; (80031b8 <main+0x3f8>)
 8002fae:	f7fe fd26 	bl	80019fe <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.75, 0, 0.3, 9, 0, 3, 420);
 8002fb2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8003160 <main+0x3a0>
 8002fb6:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002fba:	ed9f 4b61 	vldr	d4, [pc, #388]	; 8003140 <main+0x380>
 8002fbe:	eeb2 3b02 	vmov.f64	d3, #34	; 0x41100000  9.0
 8002fc2:	ed9f 2b65 	vldr	d2, [pc, #404]	; 8003158 <main+0x398>
 8002fc6:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8003140 <main+0x380>
 8002fca:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8002fce:	487b      	ldr	r0, [pc, #492]	; (80031bc <main+0x3fc>)
 8002fd0:	f7fe fd15 	bl	80019fe <CascadeControl_init>

	/*  Power Supply Temperature Sensor */
	Tmp75_Init(&hi2c2);
 8002fd4:	487a      	ldr	r0, [pc, #488]	; (80031c0 <main+0x400>)
 8002fd6:	f7fd fd6d 	bl	8000ab4 <Tmp75_Init>

	SetPoint_Position[0] = EncPulse2Rad_Read(&Encoder[0], 1);
 8002fda:	2101      	movs	r1, #1
 8002fdc:	486a      	ldr	r0, [pc, #424]	; (8003188 <main+0x3c8>)
 8002fde:	f7fd fb19 	bl	8000614 <EncPulse2Rad_Read>
 8002fe2:	eeb0 7b40 	vmov.f64	d7, d0
 8002fe6:	4b77      	ldr	r3, [pc, #476]	; (80031c4 <main+0x404>)
 8002fe8:	ed83 7b00 	vstr	d7, [r3]
	SetPoint_Position[1] = EncPulse2Rad_Read(&Encoder[1], 0);
 8002fec:	2100      	movs	r1, #0
 8002fee:	4867      	ldr	r0, [pc, #412]	; (800318c <main+0x3cc>)
 8002ff0:	f7fd fb10 	bl	8000614 <EncPulse2Rad_Read>
 8002ff4:	eeb0 7b40 	vmov.f64	d7, d0
 8002ff8:	4b72      	ldr	r3, [pc, #456]	; (80031c4 <main+0x404>)
 8002ffa:	ed83 7b02 	vstr	d7, [r3, #8]
	SetPoint_Position[2] = EncPulse2Rad_Read(&Encoder[2], 0);
 8002ffe:	2100      	movs	r1, #0
 8003000:	4863      	ldr	r0, [pc, #396]	; (8003190 <main+0x3d0>)
 8003002:	f7fd fb07 	bl	8000614 <EncPulse2Rad_Read>
 8003006:	eeb0 7b40 	vmov.f64	d7, d0
 800300a:	4b6e      	ldr	r3, [pc, #440]	; (80031c4 <main+0x404>)
 800300c:	ed83 7b04 	vstr	d7, [r3, #16]
	SetPoint_Position[3] = EncPulse2Rad_Read(&Encoder[3], 0);
 8003010:	2100      	movs	r1, #0
 8003012:	4860      	ldr	r0, [pc, #384]	; (8003194 <main+0x3d4>)
 8003014:	f7fd fafe 	bl	8000614 <EncPulse2Rad_Read>
 8003018:	eeb0 7b40 	vmov.f64	d7, d0
 800301c:	4b69      	ldr	r3, [pc, #420]	; (80031c4 <main+0x404>)
 800301e:	ed83 7b06 	vstr	d7, [r3, #24]
	SetPoint_Velocity[0] = 0;
 8003022:	4969      	ldr	r1, [pc, #420]	; (80031c8 <main+0x408>)
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9c1 2300 	strd	r2, r3, [r1]
	SetPoint_Velocity[1] = 0;
 8003030:	4965      	ldr	r1, [pc, #404]	; (80031c8 <main+0x408>)
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	SetPoint_Velocity[2] = 0;
 800303e:	4962      	ldr	r1, [pc, #392]	; (80031c8 <main+0x408>)
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	e9c1 2304 	strd	r2, r3, [r1, #16]
	SetPoint_Velocity[3] = 0;
 800304c:	495e      	ldr	r1, [pc, #376]	; (80031c8 <main+0x408>)
 800304e:	f04f 0200 	mov.w	r2, #0
 8003052:	f04f 0300 	mov.w	r3, #0
 8003056:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 800305a:	2301      	movs	r3, #1
 800305c:	9302      	str	r3, [sp, #8]
 800305e:	4b5b      	ldr	r3, [pc, #364]	; (80031cc <main+0x40c>)
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	2301      	movs	r3, #1
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <main+0x3ac>)
 8003068:	2200      	movs	r2, #0
 800306a:	4959      	ldr	r1, [pc, #356]	; (80031d0 <main+0x410>)
 800306c:	4859      	ldr	r0, [pc, #356]	; (80031d4 <main+0x414>)
 800306e:	f7fd ff99 	bl	8000fa4 <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 0);
 8003072:	2300      	movs	r3, #0
 8003074:	9302      	str	r3, [sp, #8]
 8003076:	4b55      	ldr	r3, [pc, #340]	; (80031cc <main+0x40c>)
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	2302      	movs	r3, #2
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	4b3b      	ldr	r3, [pc, #236]	; (800316c <main+0x3ac>)
 8003080:	2200      	movs	r2, #0
 8003082:	4955      	ldr	r1, [pc, #340]	; (80031d8 <main+0x418>)
 8003084:	4855      	ldr	r0, [pc, #340]	; (80031dc <main+0x41c>)
 8003086:	f7fd ff8d 	bl	8000fa4 <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 1);
 800308a:	2301      	movs	r3, #1
 800308c:	9302      	str	r3, [sp, #8]
 800308e:	4b4f      	ldr	r3, [pc, #316]	; (80031cc <main+0x40c>)
 8003090:	9301      	str	r3, [sp, #4]
 8003092:	2304      	movs	r3, #4
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	4b35      	ldr	r3, [pc, #212]	; (800316c <main+0x3ac>)
 8003098:	2200      	movs	r2, #0
 800309a:	4951      	ldr	r1, [pc, #324]	; (80031e0 <main+0x420>)
 800309c:	4851      	ldr	r0, [pc, #324]	; (80031e4 <main+0x424>)
 800309e:	f7fd ff81 	bl	8000fa4 <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 1);
 80030a2:	2301      	movs	r3, #1
 80030a4:	9302      	str	r3, [sp, #8]
 80030a6:	4b49      	ldr	r3, [pc, #292]	; (80031cc <main+0x40c>)
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2308      	movs	r3, #8
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	4b2f      	ldr	r3, [pc, #188]	; (800316c <main+0x3ac>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	494d      	ldr	r1, [pc, #308]	; (80031e8 <main+0x428>)
 80030b4:	484d      	ldr	r0, [pc, #308]	; (80031ec <main+0x42c>)
 80030b6:	f7fd ff75 	bl	8000fa4 <Step_Driver_init>

	/*         	  Servo             */
	Servo_init(&Servo[0], &htim3, TIM_CHANNEL_1);
 80030ba:	2200      	movs	r2, #0
 80030bc:	494c      	ldr	r1, [pc, #304]	; (80031f0 <main+0x430>)
 80030be:	484d      	ldr	r0, [pc, #308]	; (80031f4 <main+0x434>)
 80030c0:	f7fe f81b 	bl	80010fa <Servo_init>
	Servo_init(&Servo[1], &htim3, TIM_CHANNEL_2);
 80030c4:	2204      	movs	r2, #4
 80030c6:	494a      	ldr	r1, [pc, #296]	; (80031f0 <main+0x430>)
 80030c8:	484b      	ldr	r0, [pc, #300]	; (80031f8 <main+0x438>)
 80030ca:	f7fe f816 	bl	80010fa <Servo_init>
	Servo_Drive(&Servo[0], 90);
 80030ce:	215a      	movs	r1, #90	; 0x5a
 80030d0:	4848      	ldr	r0, [pc, #288]	; (80031f4 <main+0x434>)
 80030d2:	f7fe f867 	bl	80011a4 <Servo_Drive>
	Servo_Drive(&Servo[1], 90);
 80030d6:	215a      	movs	r1, #90	; 0x5a
 80030d8:	4847      	ldr	r0, [pc, #284]	; (80031f8 <main+0x438>)
 80030da:	f7fe f863 	bl	80011a4 <Servo_Drive>

	/*			Trajectory			*/
	Test_traj_Val[0] = 0;
 80030de:	4947      	ldr	r1, [pc, #284]	; (80031fc <main+0x43c>)
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	e9c1 2300 	strd	r2, r3, [r1]
	Test_traj_Val[1] = 0;
 80030ec:	4943      	ldr	r1, [pc, #268]	; (80031fc <main+0x43c>)
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80030fa:	e081      	b.n	8003200 <main+0x440>
 80030fc:	f3af 8000 	nop.w
 8003100:	00000000 	.word	0x00000000
 8003104:	40540000 	.word	0x40540000
 8003108:	00000000 	.word	0x00000000
 800310c:	40b96400 	.word	0x40b96400
 8003110:	00000000 	.word	0x00000000
 8003114:	40c3ba00 	.word	0x40c3ba00
 8003118:	00000000 	.word	0x00000000
 800311c:	40a8ba00 	.word	0x40a8ba00
 8003120:	00000000 	.word	0x00000000
 8003124:	40bb3a00 	.word	0x40bb3a00
 8003128:	d2f1a9fc 	.word	0xd2f1a9fc
 800312c:	3f50624d 	.word	0x3f50624d
 8003130:	00000000 	.word	0x00000000
 8003134:	40b38800 	.word	0x40b38800
 8003138:	00000000 	.word	0x00000000
 800313c:	40790000 	.word	0x40790000
	...
 800314c:	4079a000 	.word	0x4079a000
 8003150:	00000000 	.word	0x00000000
 8003154:	40890000 	.word	0x40890000
 8003158:	33333333 	.word	0x33333333
 800315c:	3fd33333 	.word	0x3fd33333
 8003160:	00000000 	.word	0x00000000
 8003164:	407a4000 	.word	0x407a4000
 8003168:	58020c00 	.word	0x58020c00
 800316c:	58021000 	.word	0x58021000
 8003170:	1ff1e840 	.word	0x1ff1e840
 8003174:	1ff1e820 	.word	0x1ff1e820
 8003178:	200002c0 	.word	0x200002c0
 800317c:	200001d4 	.word	0x200001d4
 8003180:	20000248 	.word	0x20000248
 8003184:	20000c3c 	.word	0x20000c3c
 8003188:	200002c8 	.word	0x200002c8
 800318c:	200002f0 	.word	0x200002f0
 8003190:	20000318 	.word	0x20000318
 8003194:	20000340 	.word	0x20000340
 8003198:	20000d98 	.word	0x20000d98
 800319c:	20000368 	.word	0x20000368
 80031a0:	200003a8 	.word	0x200003a8
 80031a4:	200003e8 	.word	0x200003e8
 80031a8:	20000428 	.word	0x20000428
 80031ac:	200004a8 	.word	0x200004a8
 80031b0:	200004a8 	.word	0x200004a8
 80031b4:	20000580 	.word	0x20000580
 80031b8:	20000658 	.word	0x20000658
 80031bc:	20000730 	.word	0x20000730
 80031c0:	2000026c 	.word	0x2000026c
 80031c4:	20000b70 	.word	0x20000b70
 80031c8:	20000b98 	.word	0x20000b98
 80031cc:	0007a120 	.word	0x0007a120
 80031d0:	20000f60 	.word	0x20000f60
 80031d4:	20000808 	.word	0x20000808
 80031d8:	20000fac 	.word	0x20000fac
 80031dc:	2000081c 	.word	0x2000081c
 80031e0:	20000ff8 	.word	0x20000ff8
 80031e4:	20000830 	.word	0x20000830
 80031e8:	20001044 	.word	0x20001044
 80031ec:	20000844 	.word	0x20000844
 80031f0:	20000de4 	.word	0x20000de4
 80031f4:	20000858 	.word	0x20000858
 80031f8:	20000860 	.word	0x20000860
 80031fc:	20000c00 	.word	0x20000c00
	Test_traj_Val[2] = 0;
 8003200:	49a9      	ldr	r1, [pc, #676]	; (80034a8 <main+0x6e8>)
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Test_traj_Val[3] = 0;
 800320e:	49a6      	ldr	r1, [pc, #664]	; (80034a8 <main+0x6e8>)
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj_Flag = 0;
 800321c:	4ba3      	ldr	r3, [pc, #652]	; (80034ac <main+0x6ec>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
	t = 0;
 8003222:	49a3      	ldr	r1, [pc, #652]	; (80034b0 <main+0x6f0>)
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9c1 2300 	strd	r2, r3, [r1]

	/*   RGB LED   */
	Neopixel_Init(&Neopixel, &htim1, TIM_CHANNEL_1);
 8003230:	2200      	movs	r2, #0
 8003232:	49a0      	ldr	r1, [pc, #640]	; (80034b4 <main+0x6f4>)
 8003234:	48a0      	ldr	r0, [pc, #640]	; (80034b8 <main+0x6f8>)
 8003236:	f7fd fb5f 	bl	80008f8 <Neopixel_Init>
	Neopixel_Set(&Neopixel, 0, 255, 0, 0);
 800323a:	2300      	movs	r3, #0
 800323c:	9300      	str	r3, [sp, #0]
 800323e:	2300      	movs	r3, #0
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	2100      	movs	r1, #0
 8003244:	489c      	ldr	r0, [pc, #624]	; (80034b8 <main+0x6f8>)
 8003246:	f7fd fb93 	bl	8000970 <Neopixel_Set>
	Neopixel_Set(&Neopixel, 1, 0, 255, 0);
 800324a:	2300      	movs	r3, #0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	23ff      	movs	r3, #255	; 0xff
 8003250:	2200      	movs	r2, #0
 8003252:	2101      	movs	r1, #1
 8003254:	4898      	ldr	r0, [pc, #608]	; (80034b8 <main+0x6f8>)
 8003256:	f7fd fb8b 	bl	8000970 <Neopixel_Set>
	Neopixel_Set(&Neopixel, 2, 0, 0, 255);
 800325a:	23ff      	movs	r3, #255	; 0xff
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	2300      	movs	r3, #0
 8003260:	2200      	movs	r2, #0
 8003262:	2102      	movs	r1, #2
 8003264:	4894      	ldr	r0, [pc, #592]	; (80034b8 <main+0x6f8>)
 8003266:	f7fd fb83 	bl	8000970 <Neopixel_Set>
	Neopixel_Sent(&Neopixel);
 800326a:	4893      	ldr	r0, [pc, #588]	; (80034b8 <main+0x6f8>)
 800326c:	f7fd fbb1 	bl	80009d2 <Neopixel_Sent>


	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 8003270:	4892      	ldr	r0, [pc, #584]	; (80034bc <main+0x6fc>)
 8003272:	f00f f9e3 	bl	801263c <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 8003276:	220e      	movs	r2, #14
 8003278:	4991      	ldr	r1, [pc, #580]	; (80034c0 <main+0x700>)
 800327a:	4892      	ldr	r0, [pc, #584]	; (80034c4 <main+0x704>)
 800327c:	f011 fafa 	bl	8014874 <HAL_UART_Receive_IT>
	ChessMoveStates = Chess_idle;
 8003280:	4b91      	ldr	r3, [pc, #580]	; (80034c8 <main+0x708>)
 8003282:	2200      	movs	r2, #0
 8003284:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
//		Servo_Drive(&Servo[0], Servo_Griper[0]);
//		Servo_Drive(&Servo[1], Servo_Griper[1]);

		if (Test_traj) {
 8003286:	4b91      	ldr	r3, [pc, #580]	; (80034cc <main+0x70c>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <main+0x4e4>
			Test_traj = 0;
 800328e:	4b8f      	ldr	r3, [pc, #572]	; (80034cc <main+0x70c>)
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
			JMoveTaskSpace(TaskSpace_Live_Ex1, Time_Live_Ex1);
 8003294:	4b8e      	ldr	r3, [pc, #568]	; (80034d0 <main+0x710>)
 8003296:	ed93 7b00 	vldr	d7, [r3]
 800329a:	eeb0 0b47 	vmov.f64	d0, d7
 800329e:	488d      	ldr	r0, [pc, #564]	; (80034d4 <main+0x714>)
 80032a0:	f001 fd52 	bl	8004d48 <JMoveTaskSpace>
		}
		if (Test_traj2) {
 80032a4:	4b8c      	ldr	r3, [pc, #560]	; (80034d8 <main+0x718>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01f      	beq.n	80032ec <main+0x52c>
			Test_traj2 = 0;
 80032ac:	4b8a      	ldr	r3, [pc, #552]	; (80034d8 <main+0x718>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
			double TaskSpace_Live_Ex1_ChangeZ[3];
			TaskSpace_Live_Ex1_ChangeZ[0] = TaskSpace_Live_Ex1[0];
 80032b2:	4b88      	ldr	r3, [pc, #544]	; (80034d4 <main+0x714>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	e9c7 2308 	strd	r2, r3, [r7, #32]
			TaskSpace_Live_Ex1_ChangeZ[1] = TaskSpace_Live_Ex1[1];
 80032bc:	4b85      	ldr	r3, [pc, #532]	; (80034d4 <main+0x714>)
 80032be:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80032c2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			TaskSpace_Live_Ex1_ChangeZ[2] = TaskSpace_Live_Ex1[2] - 100;
 80032c6:	4b83      	ldr	r3, [pc, #524]	; (80034d4 <main+0x714>)
 80032c8:	ed93 7b04 	vldr	d7, [r3, #16]
 80032cc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8003498 <main+0x6d8>
 80032d0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80032d4:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
			JMoveTaskSpace(TaskSpace_Live_Ex1_ChangeZ, Time_Live_Ex1);
 80032d8:	4b7d      	ldr	r3, [pc, #500]	; (80034d0 <main+0x710>)
 80032da:	ed93 7b00 	vldr	d7, [r3]
 80032de:	f107 0320 	add.w	r3, r7, #32
 80032e2:	eeb0 0b47 	vmov.f64	d0, d7
 80032e6:	4618      	mov	r0, r3
 80032e8:	f001 fd2e 	bl	8004d48 <JMoveTaskSpace>
		}

	   uint8_t tune_joint = 3;
 80032ec:	2303      	movs	r3, #3
 80032ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	   if (tune_PID[0] != tune_PID[1]){
 80032f2:	4b7a      	ldr	r3, [pc, #488]	; (80034dc <main+0x71c>)
 80032f4:	ed93 6b00 	vldr	d6, [r3]
 80032f8:	4b78      	ldr	r3, [pc, #480]	; (80034dc <main+0x71c>)
 80032fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80032fe:	eeb4 6b47 	vcmp.f64	d6, d7
 8003302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003306:	d070      	beq.n	80033ea <main+0x62a>
		   	tune_PID[1] = tune_PID[0];
 8003308:	4b74      	ldr	r3, [pc, #464]	; (80034dc <main+0x71c>)
 800330a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330e:	4973      	ldr	r1, [pc, #460]	; (80034dc <main+0x71c>)
 8003310:	e9c1 2302 	strd	r2, r3, [r1, #8]
			t = 0;
 8003314:	4966      	ldr	r1, [pc, #408]	; (80034b0 <main+0x6f0>)
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	e9c1 2300 	strd	r2, r3, [r1]
			double Joint[4] = {0,0,0,0};
 8003322:	463b      	mov	r3, r7
 8003324:	2220      	movs	r2, #32
 8003326:	2100      	movs	r1, #0
 8003328:	4618      	mov	r0, r3
 800332a:	f013 fff5 	bl	8017318 <memset>
			for (int i = 0; i < 4; i++) {
 800332e:	2300      	movs	r3, #0
 8003330:	647b      	str	r3, [r7, #68]	; 0x44
 8003332:	e012      	b.n	800335a <main+0x59a>
				Joint[i] = Control[i].PositionFeedback;
 8003334:	4a6a      	ldr	r2, [pc, #424]	; (80034e0 <main+0x720>)
 8003336:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003338:	21d8      	movs	r1, #216	; 0xd8
 800333a:	fb01 f303 	mul.w	r3, r1, r3
 800333e:	4413      	add	r3, r2
 8003340:	3350      	adds	r3, #80	; 0x50
 8003342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003346:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003348:	00c9      	lsls	r1, r1, #3
 800334a:	3148      	adds	r1, #72	; 0x48
 800334c:	4439      	add	r1, r7
 800334e:	3948      	subs	r1, #72	; 0x48
 8003350:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 8003354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003356:	3301      	adds	r3, #1
 8003358:	647b      	str	r3, [r7, #68]	; 0x44
 800335a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800335c:	2b03      	cmp	r3, #3
 800335e:	dde9      	ble.n	8003334 <main+0x574>
			}
			Joint[tune_joint] = tune_PID[0];
 8003360:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8003364:	4b5d      	ldr	r3, [pc, #372]	; (80034dc <main+0x71c>)
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	00c9      	lsls	r1, r1, #3
 800336c:	3148      	adds	r1, #72	; 0x48
 800336e:	4439      	add	r1, r7
 8003370:	3948      	subs	r1, #72	; 0x48
 8003372:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 8003376:	2300      	movs	r3, #0
 8003378:	643b      	str	r3, [r7, #64]	; 0x40
 800337a:	e030      	b.n	80033de <main+0x61e>
				Traj_Coeff_Cal(&Traj[i], T_tune_PID, Joint[i], Control[i].PositionFeedback,0, Control[i].VelocityFeedback);
 800337c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800337e:	4613      	mov	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	4a57      	ldr	r2, [pc, #348]	; (80034e4 <main+0x724>)
 8003388:	441a      	add	r2, r3
 800338a:	4b57      	ldr	r3, [pc, #348]	; (80034e8 <main+0x728>)
 800338c:	ed93 7b00 	vldr	d7, [r3]
 8003390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	3348      	adds	r3, #72	; 0x48
 8003396:	443b      	add	r3, r7
 8003398:	3b48      	subs	r3, #72	; 0x48
 800339a:	ed93 6b00 	vldr	d6, [r3]
 800339e:	4950      	ldr	r1, [pc, #320]	; (80034e0 <main+0x720>)
 80033a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a2:	20d8      	movs	r0, #216	; 0xd8
 80033a4:	fb00 f303 	mul.w	r3, r0, r3
 80033a8:	440b      	add	r3, r1
 80033aa:	3350      	adds	r3, #80	; 0x50
 80033ac:	ed93 5b00 	vldr	d5, [r3]
 80033b0:	494b      	ldr	r1, [pc, #300]	; (80034e0 <main+0x720>)
 80033b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033b4:	20d8      	movs	r0, #216	; 0xd8
 80033b6:	fb00 f303 	mul.w	r3, r0, r3
 80033ba:	440b      	add	r3, r1
 80033bc:	33b8      	adds	r3, #184	; 0xb8
 80033be:	ed93 4b00 	vldr	d4, [r3]
 80033c2:	ed9f 3b37 	vldr	d3, [pc, #220]	; 80034a0 <main+0x6e0>
 80033c6:	eeb0 2b45 	vmov.f64	d2, d5
 80033ca:	eeb0 1b46 	vmov.f64	d1, d6
 80033ce:	eeb0 0b47 	vmov.f64	d0, d7
 80033d2:	4610      	mov	r0, r2
 80033d4:	f7fd ff40 	bl	8001258 <Traj_Coeff_Cal>
			for (int i = 0; i < 4; i++) {
 80033d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033da:	3301      	adds	r3, #1
 80033dc:	643b      	str	r3, [r7, #64]	; 0x40
 80033de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	ddcb      	ble.n	800337c <main+0x5bc>
			}
			Traj_Flag = 0x0F;
 80033e4:	4b31      	ldr	r3, [pc, #196]	; (80034ac <main+0x6ec>)
 80033e6:	220f      	movs	r2, #15
 80033e8:	701a      	strb	r2, [r3, #0]
	   }

		if (Contorl_Flag) {
 80033ea:	4b40      	ldr	r3, [pc, #256]	; (80034ec <main+0x72c>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <main+0x63c>
			Control_Function();
 80033f2:	f001 fa41 	bl	8004878 <Control_Function>
			Contorl_Flag = 0;    // Clear Control Flag
 80033f6:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <main+0x72c>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 80033fc:	4b3c      	ldr	r3, [pc, #240]	; (80034f0 <main+0x730>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d004      	beq.n	800340e <main+0x64e>
			Narwhal_Protocol();
 8003404:	f000 f9e0 	bl	80037c8 <Narwhal_Protocol>
			Protocol_Flag = 0;
 8003408:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <main+0x730>)
 800340a:	2200      	movs	r2, #0
 800340c:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 10) {
 800340e:	f004 f88f 	bl	8007530 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <main+0x734>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b09      	cmp	r3, #9
 800341c:	d910      	bls.n	8003440 <main+0x680>
			Software_Timer_100ms = HAL_GetTick();
 800341e:	f004 f887 	bl	8007530 <HAL_GetTick>
 8003422:	4603      	mov	r3, r0
 8003424:	4a33      	ldr	r2, [pc, #204]	; (80034f4 <main+0x734>)
 8003426:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 				//	read temperature sensor
 8003428:	4833      	ldr	r0, [pc, #204]	; (80034f8 <main+0x738>)
 800342a:	f004 fd8f 	bl	8007f4c <HAL_ADC_Start_IT>
			One_ShotTemp(&hi2c2);
 800342e:	4833      	ldr	r0, [pc, #204]	; (80034fc <main+0x73c>)
 8003430:	f7fd fb89 	bl	8000b46 <One_ShotTemp>
			Read_TempCelsius(&TPM75_Temp,&hi2c2);
 8003434:	4931      	ldr	r1, [pc, #196]	; (80034fc <main+0x73c>)
 8003436:	4832      	ldr	r0, [pc, #200]	; (8003500 <main+0x740>)
 8003438:	f7fd fb92 	bl	8000b60 <Read_TempCelsius>
			ChessMoveStateMachine();
 800343c:	f001 ff04 	bl	8005248 <ChessMoveStateMachine>
		}

		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 8003440:	f004 f876 	bl	8007530 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <main+0x744>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003450:	f4ff af19 	bcc.w	8003286 <main+0x4c6>
			Software_Timer_1s = HAL_GetTick();
 8003454:	f004 f86c 	bl	8007530 <HAL_GetTick>
 8003458:	4603      	mov	r3, r0
 800345a:	4a2a      	ldr	r2, [pc, #168]	; (8003504 <main+0x744>)
 800345c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800345e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003462:	4829      	ldr	r0, [pc, #164]	; (8003508 <main+0x748>)
 8003464:	f009 fcf9 	bl	800ce5a <HAL_GPIO_TogglePin>
			if (Comunication_Heartbeat == 0){
 8003468:	4b28      	ldr	r3, [pc, #160]	; (800350c <main+0x74c>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d106      	bne.n	800347e <main+0x6be>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 8003470:	2201      	movs	r2, #1
 8003472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003476:	4826      	ldr	r0, [pc, #152]	; (8003510 <main+0x750>)
 8003478:	f009 fcd6 	bl	800ce28 <HAL_GPIO_WritePin>
 800347c:	e703      	b.n	8003286 <main+0x4c6>
			}
			else{
				Comunication_Heartbeat -= 1;
 800347e:	4b23      	ldr	r3, [pc, #140]	; (800350c <main+0x74c>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	3b01      	subs	r3, #1
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4b21      	ldr	r3, [pc, #132]	; (800350c <main+0x74c>)
 8003488:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003490:	481f      	ldr	r0, [pc, #124]	; (8003510 <main+0x750>)
 8003492:	f009 fcc9 	bl	800ce28 <HAL_GPIO_WritePin>
  {
 8003496:	e6f6      	b.n	8003286 <main+0x4c6>
 8003498:	00000000 	.word	0x00000000
 800349c:	40590000 	.word	0x40590000
	...
 80034a8:	20000c00 	.word	0x20000c00
 80034ac:	20000bc9 	.word	0x20000bc9
 80034b0:	20000bc0 	.word	0x20000bc0
 80034b4:	20000d4c 	.word	0x20000d4c
 80034b8:	20000868 	.word	0x20000868
 80034bc:	200010dc 	.word	0x200010dc
 80034c0:	20000094 	.word	0x20000094
 80034c4:	200011ec 	.word	0x200011ec
 80034c8:	20000be1 	.word	0x20000be1
 80034cc:	20000bf8 	.word	0x20000bf8
 80034d0:	20000018 	.word	0x20000018
 80034d4:	20000c20 	.word	0x20000c20
 80034d8:	20000bf9 	.word	0x20000bf9
 80034dc:	20000be8 	.word	0x20000be8
 80034e0:	200004a8 	.word	0x200004a8
 80034e4:	200009d0 	.word	0x200009d0
 80034e8:	20000010 	.word	0x20000010
 80034ec:	20000bc8 	.word	0x20000bc8
 80034f0:	20000bca 	.word	0x20000bca
 80034f4:	20000bd0 	.word	0x20000bd0
 80034f8:	200001d4 	.word	0x200001d4
 80034fc:	2000026c 	.word	0x2000026c
 8003500:	20000b68 	.word	0x20000b68
 8003504:	20000bcc 	.word	0x20000bcc
 8003508:	58020800 	.word	0x58020800
 800350c:	20000bd4 	.word	0x20000bd4
 8003510:	58020c00 	.word	0x58020c00

08003514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b09c      	sub	sp, #112	; 0x70
 8003518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800351a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800351e:	224c      	movs	r2, #76	; 0x4c
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f013 fef8 	bl	8017318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003528:	1d3b      	adds	r3, r7, #4
 800352a:	2220      	movs	r2, #32
 800352c:	2100      	movs	r1, #0
 800352e:	4618      	mov	r0, r3
 8003530:	f013 fef2 	bl	8017318 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003534:	2002      	movs	r0, #2
 8003536:	f00b f87d 	bl	800e634 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800353a:	2300      	movs	r3, #0
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4b2f      	ldr	r3, [pc, #188]	; (80035fc <SystemClock_Config+0xe8>)
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	4a2e      	ldr	r2, [pc, #184]	; (80035fc <SystemClock_Config+0xe8>)
 8003544:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003548:	6193      	str	r3, [r2, #24]
 800354a:	4b2c      	ldr	r3, [pc, #176]	; (80035fc <SystemClock_Config+0xe8>)
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003556:	bf00      	nop
 8003558:	4b28      	ldr	r3, [pc, #160]	; (80035fc <SystemClock_Config+0xe8>)
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003564:	d1f8      	bne.n	8003558 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003566:	4b26      	ldr	r3, [pc, #152]	; (8003600 <SystemClock_Config+0xec>)
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	4a24      	ldr	r2, [pc, #144]	; (8003600 <SystemClock_Config+0xec>)
 8003570:	f043 0302 	orr.w	r3, r3, #2
 8003574:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003576:	2301      	movs	r3, #1
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800357a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003580:	2302      	movs	r3, #2
 8003582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003584:	2302      	movs	r3, #2
 8003586:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003588:	2302      	movs	r3, #2
 800358a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 800358c:	232c      	movs	r3, #44	; 0x2c
 800358e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8003590:	2301      	movs	r3, #1
 8003592:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003594:	2302      	movs	r3, #2
 8003596:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003598:	2302      	movs	r3, #2
 800359a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800359c:	230c      	movs	r3, #12
 800359e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035ac:	4618      	mov	r0, r3
 80035ae:	f00b f87b 	bl	800e6a8 <HAL_RCC_OscConfig>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80035b8:	f002 f936 	bl	8005828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035bc:	233f      	movs	r3, #63	; 0x3f
 80035be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035c0:	2303      	movs	r3, #3
 80035c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80035c8:	2308      	movs	r3, #8
 80035ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80035cc:	2340      	movs	r3, #64	; 0x40
 80035ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80035d0:	2340      	movs	r3, #64	; 0x40
 80035d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80035d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80035da:	2340      	movs	r3, #64	; 0x40
 80035dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80035de:	1d3b      	adds	r3, r7, #4
 80035e0:	2103      	movs	r1, #3
 80035e2:	4618      	mov	r0, r3
 80035e4:	f00b fc0e 	bl	800ee04 <HAL_RCC_ClockConfig>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80035ee:	f002 f91b 	bl	8005828 <Error_Handler>
  }
}
 80035f2:	bf00      	nop
 80035f4:	3770      	adds	r7, #112	; 0x70
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	58024800 	.word	0x58024800
 8003600:	58024400 	.word	0x58024400

08003604 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b0ae      	sub	sp, #184	; 0xb8
 8003608:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800360a:	1d3b      	adds	r3, r7, #4
 800360c:	22b4      	movs	r2, #180	; 0xb4
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f013 fe81 	bl	8017318 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <PeriphCommonClock_Config+0x64>)
 8003618:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800361a:	2302      	movs	r3, #2
 800361c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 800361e:	2310      	movs	r3, #16
 8003620:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8003622:	2302      	movs	r3, #2
 8003624:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003626:	2302      	movs	r3, #2
 8003628:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800362a:	2302      	movs	r3, #2
 800362c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800362e:	23c0      	movs	r3, #192	; 0xc0
 8003630:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8003632:	2300      	movs	r3, #0
 8003634:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800363a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800363e:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8003640:	2301      	movs	r3, #1
 8003642:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8003644:	2308      	movs	r3, #8
 8003646:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800364e:	1d3b      	adds	r3, r7, #4
 8003650:	4618      	mov	r0, r3
 8003652:	f00b ff63 	bl	800f51c <HAL_RCCEx_PeriphCLKConfig>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800365c:	f002 f8e4 	bl	8005828 <Error_Handler>
  }
}
 8003660:	bf00      	nop
 8003662:	37b8      	adds	r7, #184	; 0xb8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	00082003 	.word	0x00082003

0800366c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a06      	ldr	r2, [pc, #24]	; (8003690 <HAL_UART_RxCpltCallback+0x24>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d102      	bne.n	8003682 <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_UART_RxCpltCallback+0x28>)
 800367e:	2201      	movs	r2, #1
 8003680:	701a      	strb	r2, [r3, #0]
	}
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	200011ec 	.word	0x200011ec
 8003694:	20000bca 	.word	0x20000bca

08003698 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80036a0:	2100      	movs	r1, #0
 80036a2:	4803      	ldr	r0, [pc, #12]	; (80036b0 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 80036a4:	f00f fbf8 	bl	8012e98 <HAL_TIM_PWM_Stop_DMA>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000d4c 	.word	0x20000d4c

080036b4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a18      	ldr	r2, [pc, #96]	; (8003720 <HAL_ADC_ConvCpltCallback+0x6c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d129      	bne.n	8003718 <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 80036c4:	4816      	ldr	r0, [pc, #88]	; (8003720 <HAL_ADC_ConvCpltCallback+0x6c>)
 80036c6:	f004 fd81 	bl	80081cc <HAL_ADC_GetValue>
 80036ca:	60f8      	str	r0, [r7, #12]
		Temperature = ((Temperature * 19)
 80036cc:	4b15      	ldr	r3, [pc, #84]	; (8003724 <HAL_ADC_ConvCpltCallback+0x70>)
 80036ce:	ed93 7b00 	vldr	d7, [r3]
 80036d2:	eeb3 6b03 	vmov.f64	d6, #51	; 0x41980000  19.0
 80036d6:	ee27 6b06 	vmul.f64	d6, d7, d6
				+ (Temp_Calibration
						* (double) ((double) ADC_Output
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eeb8 5b67 	vcvt.f64.u32	d5, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80036e4:	4b10      	ldr	r3, [pc, #64]	; (8003728 <HAL_ADC_ConvCpltCallback+0x74>)
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	ee07 3a90 	vmov	s15, r3
						* (double) ((double) ADC_Output
 80036ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80036f0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80036f4:	4b0d      	ldr	r3, [pc, #52]	; (800372c <HAL_ADC_ConvCpltCallback+0x78>)
 80036f6:	ed93 7b00 	vldr	d7, [r3]
 80036fa:	ee25 7b07 	vmul.f64	d7, d5, d7
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 80036fe:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8003702:	ee37 7b05 	vadd.f64	d7, d7, d5
				+ (Temp_Calibration
 8003706:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ 20;
 800370a:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 800370e:	ee86 7b05 	vdiv.f64	d7, d6, d5
		Temperature = ((Temperature * 19)
 8003712:	4b04      	ldr	r3, [pc, #16]	; (8003724 <HAL_ADC_ConvCpltCallback+0x70>)
 8003714:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8003718:	bf00      	nop
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	200001d4 	.word	0x200001d4
 8003724:	200002b8 	.word	0x200002b8
 8003728:	1ff1e820 	.word	0x1ff1e820
 800372c:	200002c0 	.word	0x200002c0

08003730 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a06      	ldr	r2, [pc, #24]	; (8003754 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d102      	bne.n	8003746 <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 8003740:	4b05      	ldr	r3, [pc, #20]	; (8003758 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
	}
}
 8003746:	bf00      	nop
 8003748:	370c      	adds	r7, #12
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	200010dc 	.word	0x200010dc
 8003758:	20000bc8 	.word	0x20000bc8

0800375c <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	461a      	mov	r2, r3
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4805      	ldr	r0, [pc, #20]	; (8003784 <CRC8+0x28>)
 8003770:	f006 f9d0 	bl	8009b14 <HAL_CRC_Calculate>
 8003774:	4603      	mov	r3, r0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	b2db      	uxtb	r3, r3
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	20000248 	.word	0x20000248

08003788 <SentData>:
inline void SentData(uint8_t range){
 8003788:	b590      	push	{r4, r7, lr}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	71fb      	strb	r3, [r7, #7]
	UART5_txBuffer[range] = CRC8(UART5_txBuffer, range);
 8003792:	79fc      	ldrb	r4, [r7, #7]
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	4619      	mov	r1, r3
 8003798:	4809      	ldr	r0, [pc, #36]	; (80037c0 <SentData+0x38>)
 800379a:	f7ff ffdf 	bl	800375c <CRC8>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <SentData+0x38>)
 80037a4:	551a      	strb	r2, [r3, r4]
	HAL_UART_Transmit_IT(&huart5, UART5_txBuffer, range+1);
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3301      	adds	r3, #1
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	4903      	ldr	r1, [pc, #12]	; (80037c0 <SentData+0x38>)
 80037b2:	4804      	ldr	r0, [pc, #16]	; (80037c4 <SentData+0x3c>)
 80037b4:	f010 ffb6 	bl	8014724 <HAL_UART_Transmit_IT>
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd90      	pop	{r4, r7, pc}
 80037c0:	200000a4 	.word	0x200000a4
 80037c4:	200011ec 	.word	0x200011ec

080037c8 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 80037c8:	b5b0      	push	{r4, r5, r7, lr}
 80037ca:	b0ee      	sub	sp, #440	; 0x1b8
 80037cc:	af00      	add	r7, sp, #0
	if (UART5_rxBuffer[0] == 0xFF) {
 80037ce:	4bda      	ldr	r3, [pc, #872]	; (8003b38 <Narwhal_Protocol+0x370>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2bff      	cmp	r3, #255	; 0xff
 80037d4:	f041 8025 	bne.w	8004822 <Narwhal_Protocol+0x105a>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 80037d8:	210d      	movs	r1, #13
 80037da:	48d7      	ldr	r0, [pc, #860]	; (8003b38 <Narwhal_Protocol+0x370>)
 80037dc:	f7ff ffbe 	bl	800375c <CRC8>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		if (CRC_Cal == UART5_rxBuffer[13]) {
 80037e6:	4bd4      	ldr	r3, [pc, #848]	; (8003b38 <Narwhal_Protocol+0x370>)
 80037e8:	7b5b      	ldrb	r3, [r3, #13]
 80037ea:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 80037ee:	429a      	cmp	r2, r3
 80037f0:	f041 8010 	bne.w	8004814 <Narwhal_Protocol+0x104c>
			UART5_txBuffer[0] = 0xFF;
 80037f4:	4bd1      	ldr	r3, [pc, #836]	; (8003b3c <Narwhal_Protocol+0x374>)
 80037f6:	22ff      	movs	r2, #255	; 0xff
 80037f8:	701a      	strb	r2, [r3, #0]
			Comunication_Heartbeat = 2;
 80037fa:	4bd1      	ldr	r3, [pc, #836]	; (8003b40 <Narwhal_Protocol+0x378>)
 80037fc:	2202      	movs	r2, #2
 80037fe:	701a      	strb	r2, [r3, #0]
			double Safe_Zone[4] = { 0, 0.5, -0.5, 0 };
 8003800:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003804:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003808:	4ace      	ldr	r2, [pc, #824]	; (8003b44 <Narwhal_Protocol+0x37c>)
 800380a:	461c      	mov	r4, r3
 800380c:	4615      	mov	r5, r2
 800380e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003812:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003816:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			double q_Feed[4];
			double dq[4];
			double d_Task[3];
			double d_Task_Set[3];
			double q_in[5] = {0,0,0,0,0};
 800381a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800381e:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003822:	4618      	mov	r0, r3
 8003824:	2328      	movs	r3, #40	; 0x28
 8003826:	461a      	mov	r2, r3
 8003828:	2100      	movs	r1, #0
 800382a:	f013 fd75 	bl	8017318 <memset>
			double q_in_Set[5] = {0,0,0,0,0};
 800382e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003836:	4618      	mov	r0, r3
 8003838:	2328      	movs	r3, #40	; 0x28
 800383a:	461a      	mov	r2, r3
 800383c:	2100      	movs	r1, #0
 800383e:	f013 fd6b 	bl	8017318 <memset>
			double task[3] = { 0, 0, 0 };
 8003842:	f04f 0200 	mov.w	r2, #0
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			int Chess_Board_Base_Encoder2Sent;


			uint16_t Temperature_Protocol = Temperature * 1000;
 8003866:	4bb8      	ldr	r3, [pc, #736]	; (8003b48 <Narwhal_Protocol+0x380>)
 8003868:	ed93 7b00 	vldr	d7, [r3]
 800386c:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8003b28 <Narwhal_Protocol+0x360>
 8003870:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003874:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003878:	ee17 3a90 	vmov	r3, s15
 800387c:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
			uint16_t Temperature_Protocol2 = TPM75_Temp * 1000;
 8003880:	4bb2      	ldr	r3, [pc, #712]	; (8003b4c <Narwhal_Protocol+0x384>)
 8003882:	ed93 7b00 	vldr	d7, [r3]
 8003886:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8003b28 <Narwhal_Protocol+0x360>
 800388a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800388e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003892:	ee17 3a90 	vmov	r3, s15
 8003896:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a

			/* 		Data to MCU Start	*/
			switch (UART5_rxBuffer[1]) {
 800389a:	4ba7      	ldr	r3, [pc, #668]	; (8003b38 <Narwhal_Protocol+0x370>)
 800389c:	785b      	ldrb	r3, [r3, #1]
 800389e:	3ba0      	subs	r3, #160	; 0xa0
 80038a0:	2b5f      	cmp	r3, #95	; 0x5f
 80038a2:	f200 87b0 	bhi.w	8004806 <Narwhal_Protocol+0x103e>
 80038a6:	a201      	add	r2, pc, #4	; (adr r2, 80038ac <Narwhal_Protocol+0xe4>)
 80038a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ac:	080042cd 	.word	0x080042cd
 80038b0:	080042f3 	.word	0x080042f3
 80038b4:	08004331 	.word	0x08004331
 80038b8:	08004807 	.word	0x08004807
 80038bc:	08004807 	.word	0x08004807
 80038c0:	08004807 	.word	0x08004807
 80038c4:	08004807 	.word	0x08004807
 80038c8:	08004807 	.word	0x08004807
 80038cc:	08004807 	.word	0x08004807
 80038d0:	08004807 	.word	0x08004807
 80038d4:	080043a1 	.word	0x080043a1
 80038d8:	08004425 	.word	0x08004425
 80038dc:	08004807 	.word	0x08004807
 80038e0:	08004807 	.word	0x08004807
 80038e4:	08004807 	.word	0x08004807
 80038e8:	080044f1 	.word	0x080044f1
 80038ec:	08004807 	.word	0x08004807
 80038f0:	08004807 	.word	0x08004807
 80038f4:	08004807 	.word	0x08004807
 80038f8:	08004807 	.word	0x08004807
 80038fc:	08004807 	.word	0x08004807
 8003900:	08004807 	.word	0x08004807
 8003904:	08004807 	.word	0x08004807
 8003908:	08004807 	.word	0x08004807
 800390c:	08004807 	.word	0x08004807
 8003910:	08004807 	.word	0x08004807
 8003914:	08004807 	.word	0x08004807
 8003918:	08004807 	.word	0x08004807
 800391c:	08004807 	.word	0x08004807
 8003920:	08004807 	.word	0x08004807
 8003924:	08004807 	.word	0x08004807
 8003928:	08004807 	.word	0x08004807
 800392c:	08004807 	.word	0x08004807
 8003930:	08004807 	.word	0x08004807
 8003934:	08004807 	.word	0x08004807
 8003938:	08004807 	.word	0x08004807
 800393c:	08004807 	.word	0x08004807
 8003940:	08004807 	.word	0x08004807
 8003944:	08004807 	.word	0x08004807
 8003948:	08004807 	.word	0x08004807
 800394c:	08004807 	.word	0x08004807
 8003950:	08004807 	.word	0x08004807
 8003954:	08004807 	.word	0x08004807
 8003958:	08004807 	.word	0x08004807
 800395c:	08004807 	.word	0x08004807
 8003960:	08004807 	.word	0x08004807
 8003964:	08004807 	.word	0x08004807
 8003968:	08004807 	.word	0x08004807
 800396c:	08004807 	.word	0x08004807
 8003970:	08004807 	.word	0x08004807
 8003974:	08004807 	.word	0x08004807
 8003978:	08004807 	.word	0x08004807
 800397c:	08004807 	.word	0x08004807
 8003980:	08004807 	.word	0x08004807
 8003984:	08004807 	.word	0x08004807
 8003988:	08004807 	.word	0x08004807
 800398c:	08004807 	.word	0x08004807
 8003990:	08004807 	.word	0x08004807
 8003994:	08004807 	.word	0x08004807
 8003998:	08004807 	.word	0x08004807
 800399c:	08004807 	.word	0x08004807
 80039a0:	08004807 	.word	0x08004807
 80039a4:	08004807 	.word	0x08004807
 80039a8:	08004807 	.word	0x08004807
 80039ac:	08004807 	.word	0x08004807
 80039b0:	08004807 	.word	0x08004807
 80039b4:	08004807 	.word	0x08004807
 80039b8:	08004807 	.word	0x08004807
 80039bc:	08004807 	.word	0x08004807
 80039c0:	08004807 	.word	0x08004807
 80039c4:	08004807 	.word	0x08004807
 80039c8:	08004807 	.word	0x08004807
 80039cc:	08004807 	.word	0x08004807
 80039d0:	08004807 	.word	0x08004807
 80039d4:	08004807 	.word	0x08004807
 80039d8:	08004807 	.word	0x08004807
 80039dc:	08004807 	.word	0x08004807
 80039e0:	08004807 	.word	0x08004807
 80039e4:	08004807 	.word	0x08004807
 80039e8:	08004807 	.word	0x08004807
 80039ec:	08003a2d 	.word	0x08003a2d
 80039f0:	08003a43 	.word	0x08003a43
 80039f4:	08004807 	.word	0x08004807
 80039f8:	08004807 	.word	0x08004807
 80039fc:	08004807 	.word	0x08004807
 8003a00:	08003a59 	.word	0x08003a59
 8003a04:	08003b05 	.word	0x08003b05
 8003a08:	08003c07 	.word	0x08003c07
 8003a0c:	08004807 	.word	0x08004807
 8003a10:	08004807 	.word	0x08004807
 8003a14:	08003c25 	.word	0x08003c25
 8003a18:	08003d13 	.word	0x08003d13
 8003a1c:	08004807 	.word	0x08004807
 8003a20:	08003ed1 	.word	0x08003ed1
 8003a24:	08004045 	.word	0x08004045
 8003a28:	080041e5 	.word	0x080041e5
			case 0xF0:
				/* Ping */
				UART5_txBuffer[2] = 0x00;
 8003a2c:	4b43      	ldr	r3, [pc, #268]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003a32:	4b42      	ldr	r3, [pc, #264]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003a34:	22ff      	movs	r2, #255	; 0xff
 8003a36:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003a38:	2003      	movs	r0, #3
 8003a3a:	f7ff fea5 	bl	8003788 <SentData>
				break;
 8003a3e:	f000 bef6 	b.w	800482e <Narwhal_Protocol+0x1066>
			case 0xF1:
				/* Working Mode Set */
				UART5_txBuffer[2] = 0x01;
 8003a42:	4b3e      	ldr	r3, [pc, #248]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003a48:	4b3c      	ldr	r3, [pc, #240]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003a4a:	22ff      	movs	r2, #255	; 0xff
 8003a4c:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003a4e:	2003      	movs	r0, #3
 8003a50:	f7ff fe9a 	bl	8003788 <SentData>
				break;
 8003a54:	f000 beeb 	b.w	800482e <Narwhal_Protocol+0x1066>
			case 0xF5:
				/* GoHome */
				if (Traj_Flag == 0) {;
 8003a58:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <Narwhal_Protocol+0x388>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d146      	bne.n	8003aee <Narwhal_Protocol+0x326>
					t = 0;
 8003a60:	493c      	ldr	r1, [pc, #240]	; (8003b54 <Narwhal_Protocol+0x38c>)
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	e9c1 2300 	strd	r2, r3, [r1]
					for (int i = 0; i < 4; i++) {
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003a74:	e02d      	b.n	8003ad2 <Narwhal_Protocol+0x30a>
						Traj_Coeff_Cal(&Traj[i], 2, 0,
 8003a76:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	4a35      	ldr	r2, [pc, #212]	; (8003b58 <Narwhal_Protocol+0x390>)
 8003a84:	441a      	add	r2, r3
 8003a86:	4935      	ldr	r1, [pc, #212]	; (8003b5c <Narwhal_Protocol+0x394>)
 8003a88:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003a8c:	20d8      	movs	r0, #216	; 0xd8
 8003a8e:	fb00 f303 	mul.w	r3, r0, r3
 8003a92:	440b      	add	r3, r1
 8003a94:	3350      	adds	r3, #80	; 0x50
 8003a96:	ed93 7b00 	vldr	d7, [r3]
 8003a9a:	4930      	ldr	r1, [pc, #192]	; (8003b5c <Narwhal_Protocol+0x394>)
 8003a9c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003aa0:	20d8      	movs	r0, #216	; 0xd8
 8003aa2:	fb00 f303 	mul.w	r3, r0, r3
 8003aa6:	440b      	add	r3, r1
 8003aa8:	33b8      	adds	r3, #184	; 0xb8
 8003aaa:	ed93 6b00 	vldr	d6, [r3]
 8003aae:	eeb0 4b46 	vmov.f64	d4, d6
 8003ab2:	ed9f 3b1f 	vldr	d3, [pc, #124]	; 8003b30 <Narwhal_Protocol+0x368>
 8003ab6:	eeb0 2b47 	vmov.f64	d2, d7
 8003aba:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8003b30 <Narwhal_Protocol+0x368>
 8003abe:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f7fd fbc8 	bl	8001258 <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 8003ac8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003acc:	3301      	adds	r3, #1
 8003ace:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003ad2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	ddcd      	ble.n	8003a76 <Narwhal_Protocol+0x2ae>
								Control[i].PositionFeedback, 0,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <Narwhal_Protocol+0x388>)
 8003adc:	220f      	movs	r2, #15
 8003ade:	701a      	strb	r2, [r3, #0]
					Chessmove_State = 0;
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	; (8003b60 <Narwhal_Protocol+0x398>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	709a      	strb	r2, [r3, #2]
 8003aec:	e002      	b.n	8003af4 <Narwhal_Protocol+0x32c>
				} else {
					UART5_txBuffer[2] = 0x01;
 8003aee:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003af0:	2201      	movs	r2, #1
 8003af2:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 8003af4:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <Narwhal_Protocol+0x374>)
 8003af6:	22ff      	movs	r2, #255	; 0xff
 8003af8:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003afa:	2003      	movs	r0, #3
 8003afc:	f7ff fe44 	bl	8003788 <SentData>
				break;
 8003b00:	f000 be95 	b.w	800482e <Narwhal_Protocol+0x1066>
			case 0xF6:
				/* GoSafe */
				if (Traj_Flag == 0) {
 8003b04:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <Narwhal_Protocol+0x388>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d171      	bne.n	8003bf0 <Narwhal_Protocol+0x428>
					;
					t = 0;
 8003b0c:	4911      	ldr	r1, [pc, #68]	; (8003b54 <Narwhal_Protocol+0x38c>)
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	e9c1 2300 	strd	r2, r3, [r1]
					for (int i = 0; i < 4; i++) {
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003b20:	e058      	b.n	8003bd4 <Narwhal_Protocol+0x40c>
 8003b22:	bf00      	nop
 8003b24:	f3af 8000 	nop.w
 8003b28:	00000000 	.word	0x00000000
 8003b2c:	408f4000 	.word	0x408f4000
	...
 8003b38:	20000094 	.word	0x20000094
 8003b3c:	200000a4 	.word	0x200000a4
 8003b40:	20000bd4 	.word	0x20000bd4
 8003b44:	08018398 	.word	0x08018398
 8003b48:	200002b8 	.word	0x200002b8
 8003b4c:	20000b68 	.word	0x20000b68
 8003b50:	20000bc9 	.word	0x20000bc9
 8003b54:	20000bc0 	.word	0x20000bc0
 8003b58:	200009d0 	.word	0x200009d0
 8003b5c:	200004a8 	.word	0x200004a8
 8003b60:	20000bcb 	.word	0x20000bcb
						Traj_Coeff_Cal(&Traj[i], 2.5, Safe_Zone[i],
 8003b64:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8003b68:	4613      	mov	r3, r2
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4acf      	ldr	r2, [pc, #828]	; (8003eb0 <Narwhal_Protocol+0x6e8>)
 8003b72:	1899      	adds	r1, r3, r2
 8003b74:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003b78:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 8003b7c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	ed93 7b00 	vldr	d7, [r3]
 8003b88:	4aca      	ldr	r2, [pc, #808]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003b8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003b8e:	20d8      	movs	r0, #216	; 0xd8
 8003b90:	fb00 f303 	mul.w	r3, r0, r3
 8003b94:	4413      	add	r3, r2
 8003b96:	3350      	adds	r3, #80	; 0x50
 8003b98:	ed93 6b00 	vldr	d6, [r3]
 8003b9c:	4ac5      	ldr	r2, [pc, #788]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003b9e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003ba2:	20d8      	movs	r0, #216	; 0xd8
 8003ba4:	fb00 f303 	mul.w	r3, r0, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	33b8      	adds	r3, #184	; 0xb8
 8003bac:	ed93 5b00 	vldr	d5, [r3]
 8003bb0:	eeb0 4b45 	vmov.f64	d4, d5
 8003bb4:	ed9f 3bb8 	vldr	d3, [pc, #736]	; 8003e98 <Narwhal_Protocol+0x6d0>
 8003bb8:	eeb0 2b46 	vmov.f64	d2, d6
 8003bbc:	eeb0 1b47 	vmov.f64	d1, d7
 8003bc0:	eeb0 0b04 	vmov.f64	d0, #4	; 0x40200000  2.5
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	f7fd fb47 	bl	8001258 <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 8003bca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003bd4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	ddc3      	ble.n	8003b64 <Narwhal_Protocol+0x39c>
								Control[i].PositionFeedback, 0,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 8003bdc:	4bb6      	ldr	r3, [pc, #728]	; (8003eb8 <Narwhal_Protocol+0x6f0>)
 8003bde:	220f      	movs	r2, #15
 8003be0:	701a      	strb	r2, [r3, #0]
					Chessmove_State = 0;
 8003be2:	4bb6      	ldr	r3, [pc, #728]	; (8003ebc <Narwhal_Protocol+0x6f4>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 8003be8:	4bb5      	ldr	r3, [pc, #724]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	709a      	strb	r2, [r3, #2]
 8003bee:	e002      	b.n	8003bf6 <Narwhal_Protocol+0x42e>
				} else {
					UART5_txBuffer[2] = 0x01;
 8003bf0:	4bb3      	ldr	r3, [pc, #716]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 8003bf6:	4bb2      	ldr	r3, [pc, #712]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003bf8:	22ff      	movs	r2, #255	; 0xff
 8003bfa:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	f7ff fdc3 	bl	8003788 <SentData>
				break;
 8003c02:	f000 be14 	b.w	800482e <Narwhal_Protocol+0x1066>
			case 0xF7:
				/* Set0 BaseEnc */
				Chess_Board_Base_Encoder = 0;
 8003c06:	49af      	ldr	r1, [pc, #700]	; (8003ec4 <Narwhal_Protocol+0x6fc>)
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9c1 2300 	strd	r2, r3, [r1]
				UART5_txBuffer[1] = 0xFF;
 8003c14:	4baa      	ldr	r3, [pc, #680]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003c16:	22ff      	movs	r2, #255	; 0xff
 8003c18:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003c1a:	2003      	movs	r0, #3
 8003c1c:	f7ff fdb4 	bl	8003788 <SentData>
				break;
 8003c20:	f000 be05 	b.w	800482e <Narwhal_Protocol+0x1066>
			case 0xFA:
				/* Joint Jog */
				t = 0;
 8003c24:	49a8      	ldr	r1, [pc, #672]	; (8003ec8 <Narwhal_Protocol+0x700>)
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003c32:	2300      	movs	r3, #0
 8003c34:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003c38:	e056      	b.n	8003ce8 <Narwhal_Protocol+0x520>
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c3e:	3301      	adds	r3, #1
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4aa2      	ldr	r2, [pc, #648]	; (8003ecc <Narwhal_Protocol+0x704>)
 8003c44:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003c46:	021b      	lsls	r3, r3, #8
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c48:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003c4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c4e:	005b      	lsls	r3, r3, #1
 8003c50:	3303      	adds	r3, #3
 8003c52:	499e      	ldr	r1, [pc, #632]	; (8003ecc <Narwhal_Protocol+0x704>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	b21b      	sxth	r3, r3
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003c5c:	ee07 3a90 	vmov	s15, r3
 8003c60:	eeb8 6be7 	vcvt.f64.s32	d6, s15
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c64:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 8003ea0 <Narwhal_Protocol+0x6d8>
 8003c68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003c6c:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003c70:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003c74:	4613      	mov	r3, r2
 8003c76:	00db      	lsls	r3, r3, #3
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4a8c      	ldr	r2, [pc, #560]	; (8003eb0 <Narwhal_Protocol+0x6e8>)
 8003c7e:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 8003c80:	498c      	ldr	r1, [pc, #560]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003c82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c86:	20d8      	movs	r0, #216	; 0xd8
 8003c88:	fb00 f303 	mul.w	r3, r0, r3
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3350      	adds	r3, #80	; 0x50
 8003c90:	ed93 6b00 	vldr	d6, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003c94:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003c98:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003c9c:	4985      	ldr	r1, [pc, #532]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003c9e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003ca2:	20d8      	movs	r0, #216	; 0xd8
 8003ca4:	fb00 f303 	mul.w	r3, r0, r3
 8003ca8:	440b      	add	r3, r1
 8003caa:	3350      	adds	r3, #80	; 0x50
 8003cac:	ed93 6b00 	vldr	d6, [r3]
 8003cb0:	4980      	ldr	r1, [pc, #512]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003cb2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003cb6:	20d8      	movs	r0, #216	; 0xd8
 8003cb8:	fb00 f303 	mul.w	r3, r0, r3
 8003cbc:	440b      	add	r3, r1
 8003cbe:	33b8      	adds	r3, #184	; 0xb8
 8003cc0:	ed93 5b00 	vldr	d5, [r3]
 8003cc4:	eeb0 4b45 	vmov.f64	d4, d5
 8003cc8:	ed9f 3b73 	vldr	d3, [pc, #460]	; 8003e98 <Narwhal_Protocol+0x6d0>
 8003ccc:	eeb0 2b46 	vmov.f64	d2, d6
 8003cd0:	eeb0 1b47 	vmov.f64	d1, d7
 8003cd4:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003cd8:	4610      	mov	r0, r2
 8003cda:	f7fd fabd 	bl	8001258 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003cde:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003ce8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003cec:	2b03      	cmp	r3, #3
 8003cee:	dda4      	ble.n	8003c3a <Narwhal_Protocol+0x472>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003cf0:	4b71      	ldr	r3, [pc, #452]	; (8003eb8 <Narwhal_Protocol+0x6f0>)
 8003cf2:	220f      	movs	r2, #15
 8003cf4:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003cf6:	4b71      	ldr	r3, [pc, #452]	; (8003ebc <Narwhal_Protocol+0x6f4>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003cfc:	4b70      	ldr	r3, [pc, #448]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003d02:	4b6f      	ldr	r3, [pc, #444]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003d04:	22ff      	movs	r2, #255	; 0xff
 8003d06:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003d08:	2003      	movs	r0, #3
 8003d0a:	f7ff fd3d 	bl	8003788 <SentData>
				break;
 8003d0e:	f000 bd8e 	b.w	800482e <Narwhal_Protocol+0x1066>
			case 0xFB:
				/* Cartesian Jog */
				q_Feed[0] = Control[0].PositionFeedback;
 8003d12:	4b68      	ldr	r3, [pc, #416]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003d14:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003d18:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d1c:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d20:	e9c1 2300 	strd	r2, r3, [r1]
				q_Feed[1] = Control[1].PositionFeedback;
 8003d24:	4b63      	ldr	r3, [pc, #396]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003d26:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8003d2a:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d2e:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d32:	e9c1 2302 	strd	r2, r3, [r1, #8]
				q_Feed[2] = Control[2].PositionFeedback;
 8003d36:	4b5f      	ldr	r3, [pc, #380]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003d38:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8003d3c:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d40:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d44:	e9c1 2304 	strd	r2, r3, [r1, #16]
				q_Feed[3] = Control[3].PositionFeedback;
 8003d48:	4b5a      	ldr	r3, [pc, #360]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003d4a:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8003d4e:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d52:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d56:	e9c1 2306 	strd	r2, r3, [r1, #24]
				for (int i = 0; i < 3; i++) {
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003d60:	e026      	b.n	8003db0 <Narwhal_Protocol+0x5e8>
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003d62:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d66:	3301      	adds	r3, #1
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	4a58      	ldr	r2, [pc, #352]	; (8003ecc <Narwhal_Protocol+0x704>)
 8003d6c:	5cd3      	ldrb	r3, [r2, r3]
 8003d6e:	021b      	lsls	r3, r3, #8
 8003d70:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003d72:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	3303      	adds	r3, #3
 8003d7a:	4954      	ldr	r1, [pc, #336]	; (8003ecc <Narwhal_Protocol+0x704>)
 8003d7c:	5ccb      	ldrb	r3, [r1, r3]
 8003d7e:	b21b      	sxth	r3, r3
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003d84:	ee07 3a90 	vmov	s15, r3
 8003d88:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003d8c:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8003ea8 <Narwhal_Protocol+0x6e0>
 8003d90:	ee86 7b05 	vdiv.f64	d7, d6, d5
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003d94:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d9e:	443b      	add	r3, r7
 8003da0:	3ba8      	subs	r3, #168	; 0xa8
 8003da2:	ed83 7b00 	vstr	d7, [r3]
				for (int i = 0; i < 3; i++) {
 8003da6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003daa:	3301      	adds	r3, #1
 8003dac:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003db0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	ddd4      	ble.n	8003d62 <Narwhal_Protocol+0x59a>
				}
				IVK(q_Feed, d_Task, dq);
 8003db8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003dbc:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003dc0:	f107 0320 	add.w	r3, r7, #32
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fe fa4b 	bl	8002260 <IVK>
				t = 0;
 8003dca:	493f      	ldr	r1, [pc, #252]	; (8003ec8 <Narwhal_Protocol+0x700>)
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003dde:	e045      	b.n	8003e6c <Narwhal_Protocol+0x6a4>
					double Setpoint = Control[i].PositionFeedback + dq[i];
 8003de0:	4a34      	ldr	r2, [pc, #208]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003de2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003de6:	21d8      	movs	r1, #216	; 0xd8
 8003de8:	fb01 f303 	mul.w	r3, r1, r3
 8003dec:	4413      	add	r3, r2
 8003dee:	3350      	adds	r3, #80	; 0x50
 8003df0:	ed93 6b00 	vldr	d6, [r3]
 8003df4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003df8:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003dfc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	ed93 7b00 	vldr	d7, [r3]
 8003e08:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e0c:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
					Traj_Coeff_Cal(&Traj[i], 0.5, Setpoint,
 8003e10:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4a24      	ldr	r2, [pc, #144]	; (8003eb0 <Narwhal_Protocol+0x6e8>)
 8003e1e:	441a      	add	r2, r3
 8003e20:	4924      	ldr	r1, [pc, #144]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003e22:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e26:	20d8      	movs	r0, #216	; 0xd8
 8003e28:	fb00 f303 	mul.w	r3, r0, r3
 8003e2c:	440b      	add	r3, r1
 8003e2e:	3350      	adds	r3, #80	; 0x50
 8003e30:	ed93 7b00 	vldr	d7, [r3]
 8003e34:	491f      	ldr	r1, [pc, #124]	; (8003eb4 <Narwhal_Protocol+0x6ec>)
 8003e36:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e3a:	20d8      	movs	r0, #216	; 0xd8
 8003e3c:	fb00 f303 	mul.w	r3, r0, r3
 8003e40:	440b      	add	r3, r1
 8003e42:	33b8      	adds	r3, #184	; 0xb8
 8003e44:	ed93 6b00 	vldr	d6, [r3]
 8003e48:	eeb0 4b46 	vmov.f64	d4, d6
 8003e4c:	ed9f 3b12 	vldr	d3, [pc, #72]	; 8003e98 <Narwhal_Protocol+0x6d0>
 8003e50:	eeb0 2b47 	vmov.f64	d2, d7
 8003e54:	ed97 1b50 	vldr	d1, [r7, #320]	; 0x140
 8003e58:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f7fd f9fb 	bl	8001258 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003e62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e66:	3301      	adds	r3, #1
 8003e68:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	ddb5      	ble.n	8003de0 <Narwhal_Protocol+0x618>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003e74:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <Narwhal_Protocol+0x6f0>)
 8003e76:	220f      	movs	r2, #15
 8003e78:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <Narwhal_Protocol+0x6f4>)
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003e80:	4b0f      	ldr	r3, [pc, #60]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003e86:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <Narwhal_Protocol+0x6f8>)
 8003e88:	22ff      	movs	r2, #255	; 0xff
 8003e8a:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003e8c:	2003      	movs	r0, #3
 8003e8e:	f7ff fc7b 	bl	8003788 <SentData>
				break;
 8003e92:	f000 bccc 	b.w	800482e <Narwhal_Protocol+0x1066>
 8003e96:	bf00      	nop
	...
 8003ea4:	408f4000 	.word	0x408f4000
 8003ea8:	00000000 	.word	0x00000000
 8003eac:	40490000 	.word	0x40490000
 8003eb0:	200009d0 	.word	0x200009d0
 8003eb4:	200004a8 	.word	0x200004a8
 8003eb8:	20000bc9 	.word	0x20000bc9
 8003ebc:	20000bcb 	.word	0x20000bcb
 8003ec0:	200000a4 	.word	0x200000a4
 8003ec4:	20000b58 	.word	0x20000b58
 8003ec8:	20000bc0 	.word	0x20000bc0
 8003ecc:	20000094 	.word	0x20000094
			case 0xFD:
				/* Joint Set */
				t = 0;
 8003ed0:	49d5      	ldr	r1, [pc, #852]	; (8004228 <Narwhal_Protocol+0xa60>)
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	e9c1 2300 	strd	r2, r3, [r1]
				double Joint[4];
				double T = 1;
 8003ede:	f04f 0200 	mov.w	r2, #0
 8003ee2:	4bd2      	ldr	r3, [pc, #840]	; (800422c <Narwhal_Protocol+0xa64>)
 8003ee4:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				double Distance = -1;
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	4bd0      	ldr	r3, [pc, #832]	; (8004230 <Narwhal_Protocol+0xa68>)
 8003eee:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
				for (int i = 0; i < 4; i++) {
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003ef8:	e044      	b.n	8003f84 <Narwhal_Protocol+0x7bc>
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003efa:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003efe:	3301      	adds	r3, #1
 8003f00:	005b      	lsls	r3, r3, #1
 8003f02:	4acc      	ldr	r2, [pc, #816]	; (8004234 <Narwhal_Protocol+0xa6c>)
 8003f04:	5cd3      	ldrb	r3, [r2, r3]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003f0a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	3303      	adds	r3, #3
 8003f12:	49c8      	ldr	r1, [pc, #800]	; (8004234 <Narwhal_Protocol+0xa6c>)
 8003f14:	5ccb      	ldrb	r3, [r1, r3]
 8003f16:	b21b      	sxth	r3, r3
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003f1c:	ee07 3a90 	vmov	s15, r3
 8003f20:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003f24:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 80041f0 <Narwhal_Protocol+0xa28>
 8003f28:	ee86 7b05 	vdiv.f64	d7, d6, d5
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003f2c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f30:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003f34:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	ed83 7b00 	vstr	d7, [r3]
					if (Joint[i] > Distance){
 8003f40:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f44:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003f48:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4413      	add	r3, r2
 8003f50:	ed93 7b00 	vldr	d7, [r3]
 8003f54:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8003f58:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f60:	d50b      	bpl.n	8003f7a <Narwhal_Protocol+0x7b2>
						Distance = Joint[i];
 8003f62:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f66:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003f6a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4413      	add	r3, r2
 8003f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f76:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
				for (int i = 0; i < 4; i++) {
 8003f7a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f7e:	3301      	adds	r3, #1
 8003f80:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003f84:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	ddb6      	ble.n	8003efa <Narwhal_Protocol+0x732>
					}
				}
				T += (Distance * 0.8);
 8003f8c:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003f90:	ed9f 6b99 	vldr	d6, [pc, #612]	; 80041f8 <Narwhal_Protocol+0xa30>
 8003f94:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003f98:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 8003f9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003fa0:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
				for (int i = 0; i < 4; i++) {
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003faa:	e037      	b.n	800401c <Narwhal_Protocol+0x854>
					Traj_Coeff_Cal(&Traj[i], T, Joint[i],
 8003fac:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4a9f      	ldr	r2, [pc, #636]	; (8004238 <Narwhal_Protocol+0xa70>)
 8003fba:	1899      	adds	r1, r3, r2
 8003fbc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003fc0:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003fc4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	ed93 7b00 	vldr	d7, [r3]
 8003fd0:	4a9a      	ldr	r2, [pc, #616]	; (800423c <Narwhal_Protocol+0xa74>)
 8003fd2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003fd6:	20d8      	movs	r0, #216	; 0xd8
 8003fd8:	fb00 f303 	mul.w	r3, r0, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	3350      	adds	r3, #80	; 0x50
 8003fe0:	ed93 6b00 	vldr	d6, [r3]
 8003fe4:	4a95      	ldr	r2, [pc, #596]	; (800423c <Narwhal_Protocol+0xa74>)
 8003fe6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003fea:	20d8      	movs	r0, #216	; 0xd8
 8003fec:	fb00 f303 	mul.w	r3, r0, r3
 8003ff0:	4413      	add	r3, r2
 8003ff2:	33b8      	adds	r3, #184	; 0xb8
 8003ff4:	ed93 5b00 	vldr	d5, [r3]
 8003ff8:	eeb0 4b45 	vmov.f64	d4, d5
 8003ffc:	ed9f 3b80 	vldr	d3, [pc, #512]	; 8004200 <Narwhal_Protocol+0xa38>
 8004000:	eeb0 2b46 	vmov.f64	d2, d6
 8004004:	eeb0 1b47 	vmov.f64	d1, d7
 8004008:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 800400c:	4608      	mov	r0, r1
 800400e:	f7fd f923 	bl	8001258 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8004012:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004016:	3301      	adds	r3, #1
 8004018:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800401c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004020:	2b03      	cmp	r3, #3
 8004022:	ddc3      	ble.n	8003fac <Narwhal_Protocol+0x7e4>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8004024:	4b86      	ldr	r3, [pc, #536]	; (8004240 <Narwhal_Protocol+0xa78>)
 8004026:	220f      	movs	r2, #15
 8004028:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 800402a:	4b86      	ldr	r3, [pc, #536]	; (8004244 <Narwhal_Protocol+0xa7c>)
 800402c:	2200      	movs	r2, #0
 800402e:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x03;
 8004030:	4b85      	ldr	r3, [pc, #532]	; (8004248 <Narwhal_Protocol+0xa80>)
 8004032:	2203      	movs	r2, #3
 8004034:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8004036:	4b84      	ldr	r3, [pc, #528]	; (8004248 <Narwhal_Protocol+0xa80>)
 8004038:	22ff      	movs	r2, #255	; 0xff
 800403a:	705a      	strb	r2, [r3, #1]
				SentData(3);
 800403c:	2003      	movs	r0, #3
 800403e:	f7ff fba3 	bl	8003788 <SentData>
				break;
 8004042:	e3f4      	b.n	800482e <Narwhal_Protocol+0x1066>
			case 0xFE:
				/* Cartesian Set */
				t = 0;
 8004044:	4978      	ldr	r1, [pc, #480]	; (8004228 <Narwhal_Protocol+0xa60>)
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	e9c1 2300 	strd	r2, r3, [r1]
				double Task[3];
				for (int i = 0; i < 3; i++) {
 8004052:	2300      	movs	r3, #0
 8004054:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004058:	e026      	b.n	80040a8 <Narwhal_Protocol+0x8e0>
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 800405a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800405e:	3301      	adds	r3, #1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4a74      	ldr	r2, [pc, #464]	; (8004234 <Narwhal_Protocol+0xa6c>)
 8004064:	5cd3      	ldrb	r3, [r2, r3]
 8004066:	021b      	lsls	r3, r3, #8
 8004068:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 800406a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	3303      	adds	r3, #3
 8004072:	4970      	ldr	r1, [pc, #448]	; (8004234 <Narwhal_Protocol+0xa6c>)
 8004074:	5ccb      	ldrb	r3, [r1, r3]
 8004076:	b21b      	sxth	r3, r3
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8004078:	4313      	orrs	r3, r2
 800407a:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 800407c:	ee07 3a90 	vmov	s15, r3
 8004080:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8004084:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8004208 <Narwhal_Protocol+0xa40>
 8004088:	ee86 7b05 	vdiv.f64	d7, d6, d5
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 800408c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004096:	443b      	add	r3, r7
 8004098:	3bf0      	subs	r3, #240	; 0xf0
 800409a:	ed83 7b00 	vstr	d7, [r3]
				for (int i = 0; i < 3; i++) {
 800409e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040a2:	3301      	adds	r3, #1
 80040a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80040a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	ddd4      	ble.n	800405a <Narwhal_Protocol+0x892>
				}
				double q_Feed[4];
				double Pne[3];
				q_Feed[0] = Control[0].PositionFeedback;
 80040b0:	4b62      	ldr	r3, [pc, #392]	; (800423c <Narwhal_Protocol+0xa74>)
 80040b2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80040b6:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80040ba:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 80040be:	e9c1 2300 	strd	r2, r3, [r1]
				q_Feed[1] = Control[1].PositionFeedback;
 80040c2:	4b5e      	ldr	r3, [pc, #376]	; (800423c <Narwhal_Protocol+0xa74>)
 80040c4:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 80040c8:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80040cc:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 80040d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
				q_Feed[2] = Control[2].PositionFeedback;
 80040d4:	4b59      	ldr	r3, [pc, #356]	; (800423c <Narwhal_Protocol+0xa74>)
 80040d6:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 80040da:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80040de:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 80040e2:	e9c1 2304 	strd	r2, r3, [r1, #16]
				q_Feed[3] = Control[3].PositionFeedback;
 80040e6:	4b55      	ldr	r3, [pc, #340]	; (800423c <Narwhal_Protocol+0xa74>)
 80040e8:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 80040ec:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80040f0:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 80040f4:	e9c1 2306 	strd	r2, r3, [r1, #24]

				FPK(q_Feed, 269.0f, Pne);
 80040f8:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 80040fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004100:	4611      	mov	r1, r2
 8004102:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8004210 <Narwhal_Protocol+0xa48>
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe fb86 	bl	8002818 <FPK>
				double Time2MoveDynamic = 1.3;
 800410c:	a342      	add	r3, pc, #264	; (adr r3, 8004218 <Narwhal_Protocol+0xa50>)
 800410e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004112:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
				Time2MoveDynamic += (sqrt(
						((Task[0] - Pne[0]) * (Task[0] - Pne[0]))
 8004116:	ed97 6b32 	vldr	d6, [r7, #200]	; 0xc8
 800411a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800411e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004122:	ed93 7b00 	vldr	d7, [r3]
 8004126:	ee36 6b47 	vsub.f64	d6, d6, d7
 800412a:	ed97 5b32 	vldr	d5, [r7, #200]	; 0xc8
 800412e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004136:	ed93 7b00 	vldr	d7, [r3]
 800413a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800413e:	ee26 6b07 	vmul.f64	d6, d6, d7
								+ ((Task[1] - Pne[1]) * (Task[1] - Pne[1]))
 8004142:	ed97 5b34 	vldr	d5, [r7, #208]	; 0xd0
 8004146:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800414a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800414e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004152:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004156:	ed97 4b34 	vldr	d4, [r7, #208]	; 0xd0
 800415a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800415e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004162:	ed93 7b02 	vldr	d7, [r3, #8]
 8004166:	ee34 7b47 	vsub.f64	d7, d4, d7
 800416a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800416e:	ee36 6b07 	vadd.f64	d6, d6, d7
								+ ((Task[2] - Pne[2]) * (Task[2] - Pne[2]))))
 8004172:	ed97 5b36 	vldr	d5, [r7, #216]	; 0xd8
 8004176:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800417a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800417e:	ed93 7b04 	vldr	d7, [r3, #16]
 8004182:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004186:	ed97 4b36 	vldr	d4, [r7, #216]	; 0xd8
 800418a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800418e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004192:	ed93 7b04 	vldr	d7, [r3, #16]
 8004196:	ee34 7b47 	vsub.f64	d7, d4, d7
 800419a:	ee25 7b07 	vmul.f64	d7, d5, d7
				Time2MoveDynamic += (sqrt(
 800419e:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041a2:	eeb0 0b47 	vmov.f64	d0, d7
 80041a6:	f013 f95b 	bl	8017460 <sqrt>
 80041aa:	eeb0 7b40 	vmov.f64	d7, d0
						* 0.0075;
 80041ae:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004220 <Narwhal_Protocol+0xa58>
 80041b2:	ee27 7b06 	vmul.f64	d7, d7, d6
				Time2MoveDynamic += (sqrt(
 80041b6:	ed97 6b54 	vldr	d6, [r7, #336]	; 0x150
 80041ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041be:	ed87 7b54 	vstr	d7, [r7, #336]	; 0x150

				JMoveTaskSpace(Task, Time2MoveDynamic);
 80041c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80041c6:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fdbc 	bl	8004d48 <JMoveTaskSpace>
				UART5_txBuffer[2] = 0x00;
 80041d0:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <Narwhal_Protocol+0xa80>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <Narwhal_Protocol+0xa80>)
 80041d8:	22ff      	movs	r2, #255	; 0xff
 80041da:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80041dc:	2003      	movs	r0, #3
 80041de:	f7ff fad3 	bl	8003788 <SentData>
				break;
 80041e2:	e324      	b.n	800482e <Narwhal_Protocol+0x1066>
			case 0xFF:
				/* Chess Move */
//				uint8_t ChessIndex[2];
				for (int i = 0; i < 2; i++) {
 80041e4:	2300      	movs	r3, #0
 80041e6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80041ea:	e03f      	b.n	800426c <Narwhal_Protocol+0xaa4>
 80041ec:	f3af 8000 	nop.w
 80041f0:	00000000 	.word	0x00000000
 80041f4:	408f4000 	.word	0x408f4000
 80041f8:	9999999a 	.word	0x9999999a
 80041fc:	3fe99999 	.word	0x3fe99999
	...
 800420c:	40490000 	.word	0x40490000
 8004210:	00000000 	.word	0x00000000
 8004214:	4070d000 	.word	0x4070d000
 8004218:	cccccccd 	.word	0xcccccccd
 800421c:	3ff4cccc 	.word	0x3ff4cccc
 8004220:	eb851eb8 	.word	0xeb851eb8
 8004224:	3f7eb851 	.word	0x3f7eb851
 8004228:	20000bc0 	.word	0x20000bc0
 800422c:	3ff00000 	.word	0x3ff00000
 8004230:	bff00000 	.word	0xbff00000
 8004234:	20000094 	.word	0x20000094
 8004238:	200009d0 	.word	0x200009d0
 800423c:	200004a8 	.word	0x200004a8
 8004240:	20000bc9 	.word	0x20000bc9
 8004244:	20000bcb 	.word	0x20000bcb
 8004248:	200000a4 	.word	0x200000a4
					ChessIndex[i] = (uint8_t) (UART5_rxBuffer[2 + i]);
 800424c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004250:	3302      	adds	r3, #2
 8004252:	4abf      	ldr	r2, [pc, #764]	; (8004550 <Narwhal_Protocol+0xd88>)
 8004254:	5cd1      	ldrb	r1, [r2, r3]
 8004256:	4abf      	ldr	r2, [pc, #764]	; (8004554 <Narwhal_Protocol+0xd8c>)
 8004258:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800425c:	4413      	add	r3, r2
 800425e:	460a      	mov	r2, r1
 8004260:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 2; i++) {
 8004262:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004266:	3301      	adds	r3, #1
 8004268:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800426c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004270:	2b01      	cmp	r3, #1
 8004272:	ddeb      	ble.n	800424c <Narwhal_Protocol+0xa84>
				}
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8004274:	4bb6      	ldr	r3, [pc, #728]	; (8004550 <Narwhal_Protocol+0xd88>)
 8004276:	791b      	ldrb	r3, [r3, #4]
 8004278:	021b      	lsls	r3, r3, #8
						| (UART5_rxBuffer[5])) / 100.0f;
 800427a:	4ab5      	ldr	r2, [pc, #724]	; (8004550 <Narwhal_Protocol+0xd88>)
 800427c:	7952      	ldrb	r2, [r2, #5]
 800427e:	4313      	orrs	r3, r2
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						| (UART5_rxBuffer[5])) / 100.0f;
 8004288:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8004558 <Narwhal_Protocol+0xd90>
 800428c:	eec7 7a26 	vdiv.f32	s15, s14, s13
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 8004290:	4bb2      	ldr	r3, [pc, #712]	; (800455c <Narwhal_Protocol+0xd94>)
 8004292:	edc3 7a00 	vstr	s15, [r3]

				if (ChessIndex[0] == 65 || ChessIndex[1] == 65){
 8004296:	4baf      	ldr	r3, [pc, #700]	; (8004554 <Narwhal_Protocol+0xd8c>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b41      	cmp	r3, #65	; 0x41
 800429c:	d003      	beq.n	80042a6 <Narwhal_Protocol+0xade>
 800429e:	4bad      	ldr	r3, [pc, #692]	; (8004554 <Narwhal_Protocol+0xd8c>)
 80042a0:	785b      	ldrb	r3, [r3, #1]
 80042a2:	2b41      	cmp	r3, #65	; 0x41
 80042a4:	d105      	bne.n	80042b2 <Narwhal_Protocol+0xaea>
					ChessMoveStates = ChessMove_Finish;
 80042a6:	4bae      	ldr	r3, [pc, #696]	; (8004560 <Narwhal_Protocol+0xd98>)
 80042a8:	220a      	movs	r2, #10
 80042aa:	701a      	strb	r2, [r3, #0]
					PositionX_Remove = 0;
 80042ac:	4bad      	ldr	r3, [pc, #692]	; (8004564 <Narwhal_Protocol+0xd9c>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
				}

				Chess_Move_Start_Flag = 1;
 80042b2:	4bad      	ldr	r3, [pc, #692]	; (8004568 <Narwhal_Protocol+0xda0>)
 80042b4:	2201      	movs	r2, #1
 80042b6:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x05;
 80042b8:	4bac      	ldr	r3, [pc, #688]	; (800456c <Narwhal_Protocol+0xda4>)
 80042ba:	2205      	movs	r2, #5
 80042bc:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 80042be:	4bab      	ldr	r3, [pc, #684]	; (800456c <Narwhal_Protocol+0xda4>)
 80042c0:	22ff      	movs	r2, #255	; 0xff
 80042c2:	705a      	strb	r2, [r3, #1]
				SentData(3);
 80042c4:	2003      	movs	r0, #3
 80042c6:	f7ff fa5f 	bl	8003788 <SentData>
				break;
 80042ca:	e2b0      	b.n	800482e <Narwhal_Protocol+0x1066>
				/* 		Data to MCU End	*/

				/* 		Sent Data to Master Start 	*/
			case 0xA0:
				/* System Status */
				UART5_txBuffer[1] = 0xEE;
 80042cc:	4ba7      	ldr	r3, [pc, #668]	; (800456c <Narwhal_Protocol+0xda4>)
 80042ce:	22ee      	movs	r2, #238	; 0xee
 80042d0:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 80042d2:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	b29b      	uxth	r3, r3
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	4ba3      	ldr	r3, [pc, #652]	; (800456c <Narwhal_Protocol+0xda4>)
 80042de:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Temperature_Protocol & 0xFF);
 80042e0:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	4ba1      	ldr	r3, [pc, #644]	; (800456c <Narwhal_Protocol+0xda4>)
 80042e8:	70da      	strb	r2, [r3, #3]
				SentData(4);
 80042ea:	2004      	movs	r0, #4
 80042ec:	f7ff fa4c 	bl	8003788 <SentData>
				break;
 80042f0:	e29d      	b.n	800482e <Narwhal_Protocol+0x1066>
			case 0xA1:
				/* Station Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 80042f2:	4b9e      	ldr	r3, [pc, #632]	; (800456c <Narwhal_Protocol+0xda4>)
 80042f4:	22ee      	movs	r2, #238	; 0xee
 80042f6:	705a      	strb	r2, [r3, #1]
				Chess_Board_Base_Encoder2Sent = (int)(Chess_Board_Base_Encoder * 1000.0f);
 80042f8:	4b9d      	ldr	r3, [pc, #628]	; (8004570 <Narwhal_Protocol+0xda8>)
 80042fa:	ed93 7b00 	vldr	d7, [r3]
 80042fe:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8004540 <Narwhal_Protocol+0xd78>
 8004302:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004306:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800430a:	ee17 3a90 	vmov	r3, s15
 800430e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				UART5_txBuffer[2] = (uint8_t) ((Chess_Board_Base_Encoder2Sent >> 8) & 0xFF);
 8004312:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004316:	121b      	asrs	r3, r3, #8
 8004318:	b2da      	uxtb	r2, r3
 800431a:	4b94      	ldr	r3, [pc, #592]	; (800456c <Narwhal_Protocol+0xda4>)
 800431c:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Chess_Board_Base_Encoder2Sent & 0xFF);
 800431e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004322:	b2da      	uxtb	r2, r3
 8004324:	4b91      	ldr	r3, [pc, #580]	; (800456c <Narwhal_Protocol+0xda4>)
 8004326:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8004328:	2004      	movs	r0, #4
 800432a:	f7ff fa2d 	bl	8003788 <SentData>
				break;
 800432e:	e27e      	b.n	800482e <Narwhal_Protocol+0x1066>
			case 0xA2:
				/* Raw Joint Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8004330:	4b8e      	ldr	r3, [pc, #568]	; (800456c <Narwhal_Protocol+0xda4>)
 8004332:	22ee      	movs	r2, #238	; 0xee
 8004334:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 8004336:	2300      	movs	r3, #0
 8004338:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800433c:	e028      	b.n	8004390 <Narwhal_Protocol+0xbc8>
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Encoder[i].Position >> 8)
 800433e:	498d      	ldr	r1, [pc, #564]	; (8004574 <Narwhal_Protocol+0xdac>)
 8004340:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	440b      	add	r3, r1
 800434e:	330e      	adds	r3, #14
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	0a1b      	lsrs	r3, r3, #8
 8004354:	b29a      	uxth	r2, r3
 8004356:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800435a:	3301      	adds	r3, #1
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	b2d1      	uxtb	r1, r2
 8004360:	4a82      	ldr	r2, [pc, #520]	; (800456c <Narwhal_Protocol+0xda4>)
 8004362:	54d1      	strb	r1, [r2, r3]
							& 0xFF);
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Encoder[i].Position & 0xFF);
 8004364:	4983      	ldr	r1, [pc, #524]	; (8004574 <Narwhal_Protocol+0xdac>)
 8004366:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	440b      	add	r3, r1
 8004374:	330e      	adds	r3, #14
 8004376:	881a      	ldrh	r2, [r3, #0]
 8004378:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	3303      	adds	r3, #3
 8004380:	b2d1      	uxtb	r1, r2
 8004382:	4a7a      	ldr	r2, [pc, #488]	; (800456c <Narwhal_Protocol+0xda4>)
 8004384:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004386:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800438a:	3301      	adds	r3, #1
 800438c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004390:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004394:	2b03      	cmp	r3, #3
 8004396:	ddd2      	ble.n	800433e <Narwhal_Protocol+0xb76>
				}
				SentData(12);
 8004398:	200c      	movs	r0, #12
 800439a:	f7ff f9f5 	bl	8003788 <SentData>
				break;
 800439e:	e246      	b.n	800482e <Narwhal_Protocol+0x1066>
			case 0xAA:
				/* Joint Position */
				UART5_txBuffer[1] = 0xEE;
 80043a0:	4b72      	ldr	r3, [pc, #456]	; (800456c <Narwhal_Protocol+0xda4>)
 80043a2:	22ee      	movs	r2, #238	; 0xee
 80043a4:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 80043a6:	2300      	movs	r3, #0
 80043a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80043ac:	e02c      	b.n	8004408 <Narwhal_Protocol+0xc40>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 80043ae:	4a72      	ldr	r2, [pc, #456]	; (8004578 <Narwhal_Protocol+0xdb0>)
 80043b0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043b4:	21d8      	movs	r1, #216	; 0xd8
 80043b6:	fb01 f303 	mul.w	r3, r1, r3
 80043ba:	4413      	add	r3, r2
 80043bc:	3350      	adds	r3, #80	; 0x50
 80043be:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 80043c2:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004540 <Narwhal_Protocol+0xd78>
 80043c6:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 80043ca:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80043ce:	ee17 3a90 	vmov	r3, s15
 80043d2:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80043d6:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 80043da:	121b      	asrs	r3, r3, #8
 80043dc:	b21a      	sxth	r2, r3
 80043de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043e2:	3301      	adds	r3, #1
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	b2d1      	uxtb	r1, r2
 80043e8:	4a60      	ldr	r2, [pc, #384]	; (800456c <Narwhal_Protocol+0xda4>)
 80043ea:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80043ec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	3303      	adds	r3, #3
 80043f4:	f8b7 2128 	ldrh.w	r2, [r7, #296]	; 0x128
 80043f8:	b2d1      	uxtb	r1, r2
 80043fa:	4a5c      	ldr	r2, [pc, #368]	; (800456c <Narwhal_Protocol+0xda4>)
 80043fc:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 80043fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004402:	3301      	adds	r3, #1
 8004404:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004408:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800440c:	2b03      	cmp	r3, #3
 800440e:	ddce      	ble.n	80043ae <Narwhal_Protocol+0xbe6>
				}
				UART5_txBuffer[10] = 0;
 8004410:	4b56      	ldr	r3, [pc, #344]	; (800456c <Narwhal_Protocol+0xda4>)
 8004412:	2200      	movs	r2, #0
 8004414:	729a      	strb	r2, [r3, #10]
				UART5_txBuffer[11] = 0;
 8004416:	4b55      	ldr	r3, [pc, #340]	; (800456c <Narwhal_Protocol+0xda4>)
 8004418:	2200      	movs	r2, #0
 800441a:	72da      	strb	r2, [r3, #11]
				SentData(12);
 800441c:	200c      	movs	r0, #12
 800441e:	f7ff f9b3 	bl	8003788 <SentData>
				break;
 8004422:	e204      	b.n	800482e <Narwhal_Protocol+0x1066>
			case 0xAB:
				/* Task Space Position */
				UART5_txBuffer[1] = 0xEE;
 8004424:	4b51      	ldr	r3, [pc, #324]	; (800456c <Narwhal_Protocol+0xda4>)
 8004426:	22ee      	movs	r2, #238	; 0xee
 8004428:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */

				for (int i = 0; i < 4; i++) {
 800442a:	2300      	movs	r3, #0
 800442c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004430:	e018      	b.n	8004464 <Narwhal_Protocol+0xc9c>
					q_in[i] = Control[i].PositionFeedback;
 8004432:	4a51      	ldr	r2, [pc, #324]	; (8004578 <Narwhal_Protocol+0xdb0>)
 8004434:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004438:	21d8      	movs	r1, #216	; 0xd8
 800443a:	fb01 f303 	mul.w	r3, r1, r3
 800443e:	4413      	add	r3, r2
 8004440:	3350      	adds	r3, #80	; 0x50
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 800444a:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 800444e:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 8004452:	00c9      	lsls	r1, r1, #3
 8004454:	4401      	add	r1, r0
 8004456:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 800445a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 800445e:	3301      	adds	r3, #1
 8004460:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004464:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004468:	2b03      	cmp	r3, #3
 800446a:	dde2      	ble.n	8004432 <Narwhal_Protocol+0xc6a>
				}
				FPK(q_in, 269.0f, task);
 800446c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8004470:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004474:	4611      	mov	r1, r2
 8004476:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8004548 <Narwhal_Protocol+0xd80>
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe f9cc 	bl	8002818 <FPK>

				for (int i = 0; i < 3; i++) {
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004486:	e02b      	b.n	80044e0 <Narwhal_Protocol+0xd18>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 8004488:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004492:	443b      	add	r3, r7
 8004494:	3bd8      	subs	r3, #216	; 0xd8
 8004496:	ed93 7b00 	vldr	d7, [r3]
 800449a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800449e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80044a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80044a6:	ee17 3a90 	vmov	r3, s15
 80044aa:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80044ae:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 80044b2:	121b      	asrs	r3, r3, #8
 80044b4:	b21a      	sxth	r2, r3
 80044b6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80044ba:	3301      	adds	r3, #1
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	b2d1      	uxtb	r1, r2
 80044c0:	4a2a      	ldr	r2, [pc, #168]	; (800456c <Narwhal_Protocol+0xda4>)
 80044c2:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80044c4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	3303      	adds	r3, #3
 80044cc:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 80044d0:	b2d1      	uxtb	r1, r2
 80044d2:	4a26      	ldr	r2, [pc, #152]	; (800456c <Narwhal_Protocol+0xda4>)
 80044d4:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 80044d6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80044da:	3301      	adds	r3, #1
 80044dc:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80044e0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	ddcf      	ble.n	8004488 <Narwhal_Protocol+0xcc0>
				}
				SentData(8);
 80044e8:	2008      	movs	r0, #8
 80044ea:	f7ff f94d 	bl	8003788 <SentData>
				break;
 80044ee:	e19e      	b.n	800482e <Narwhal_Protocol+0x1066>
			case 0xAF:
				/* UI Feedback */
				UART5_txBuffer[1] = 0xEE;
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <Narwhal_Protocol+0xda4>)
 80044f2:	22ee      	movs	r2, #238	; 0xee
 80044f4:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
				for (int i = 0; i < 4; i++) {
 80044f6:	2300      	movs	r3, #0
 80044f8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80044fc:	e018      	b.n	8004530 <Narwhal_Protocol+0xd68>
					q_in[i] = Control[i].PositionFeedback;
 80044fe:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <Narwhal_Protocol+0xdb0>)
 8004500:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004504:	21d8      	movs	r1, #216	; 0xd8
 8004506:	fb01 f303 	mul.w	r3, r1, r3
 800450a:	4413      	add	r3, r2
 800450c:	3350      	adds	r3, #80	; 0x50
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004516:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 800451a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800451e:	00c9      	lsls	r1, r1, #3
 8004520:	4401      	add	r1, r0
 8004522:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8004526:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800452a:	3301      	adds	r3, #1
 800452c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004530:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004534:	2b03      	cmp	r3, #3
 8004536:	dde2      	ble.n	80044fe <Narwhal_Protocol+0xd36>
				}
				for (int i = 0; i < 4; i++) {
 8004538:	2300      	movs	r3, #0
 800453a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800453e:	e036      	b.n	80045ae <Narwhal_Protocol+0xde6>
 8004540:	00000000 	.word	0x00000000
 8004544:	408f4000 	.word	0x408f4000
 8004548:	00000000 	.word	0x00000000
 800454c:	4070d000 	.word	0x4070d000
 8004550:	20000094 	.word	0x20000094
 8004554:	20000bd8 	.word	0x20000bd8
 8004558:	42c80000 	.word	0x42c80000
 800455c:	20000bdc 	.word	0x20000bdc
 8004560:	20000be1 	.word	0x20000be1
 8004564:	20000be2 	.word	0x20000be2
 8004568:	20000be0 	.word	0x20000be0
 800456c:	200000a4 	.word	0x200000a4
 8004570:	20000b58 	.word	0x20000b58
 8004574:	200002c8 	.word	0x200002c8
 8004578:	200004a8 	.word	0x200004a8
					q_in_Set[i] = Control[i].PositionSetpoint;
 800457c:	4ab6      	ldr	r2, [pc, #728]	; (8004858 <Narwhal_Protocol+0x1090>)
 800457e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004582:	21d8      	movs	r1, #216	; 0xd8
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	4413      	add	r3, r2
 800458a:	3348      	adds	r3, #72	; 0x48
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004594:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 8004598:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800459c:	00c9      	lsls	r1, r1, #3
 800459e:	4401      	add	r1, r0
 80045a0:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 80045a4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80045a8:	3301      	adds	r3, #1
 80045aa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80045ae:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	dde2      	ble.n	800457c <Narwhal_Protocol+0xdb4>
				}
				FPK(q_in, 269.0f, task);
 80045b6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80045ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80045be:	4611      	mov	r1, r2
 80045c0:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 8004848 <Narwhal_Protocol+0x1080>
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe f927 	bl	8002818 <FPK>
				FPK(q_in_Set, 269.0f, d_Task_Set);
 80045ca:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80045ce:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80045d2:	4611      	mov	r1, r2
 80045d4:	ed9f 0b9c 	vldr	d0, [pc, #624]	; 8004848 <Narwhal_Protocol+0x1080>
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe f91d 	bl	8002818 <FPK>

				/* Station Encoder */
				Chess_Board_Base_Encoder2Sent = Chess_Board_Base_Encoder * 1000.0f;
 80045de:	4b9f      	ldr	r3, [pc, #636]	; (800485c <Narwhal_Protocol+0x1094>)
 80045e0:	ed93 7b00 	vldr	d7, [r3]
 80045e4:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8004850 <Narwhal_Protocol+0x1088>
 80045e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80045ec:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80045f0:	ee17 3a90 	vmov	r3, s15
 80045f4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				UART5_txBuffer[2] = (uint8_t) ((Chess_Board_Base_Encoder2Sent >> 8) & 0xFF);
 80045f8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80045fc:	121b      	asrs	r3, r3, #8
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	4b97      	ldr	r3, [pc, #604]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004602:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Chess_Board_Base_Encoder2Sent & 0xFF);
 8004604:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004608:	b2da      	uxtb	r2, r3
 800460a:	4b95      	ldr	r3, [pc, #596]	; (8004860 <Narwhal_Protocol+0x1098>)
 800460c:	70da      	strb	r2, [r3, #3]

				/* Temp */
				UART5_txBuffer[4] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 800460e:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8004612:	0a1b      	lsrs	r3, r3, #8
 8004614:	b29b      	uxth	r3, r3
 8004616:	b2da      	uxtb	r2, r3
 8004618:	4b91      	ldr	r3, [pc, #580]	; (8004860 <Narwhal_Protocol+0x1098>)
 800461a:	711a      	strb	r2, [r3, #4]
				UART5_txBuffer[5] = (uint8_t) (Temperature_Protocol & 0xFF);
 800461c:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8004620:	b2da      	uxtb	r2, r3
 8004622:	4b8f      	ldr	r3, [pc, #572]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004624:	715a      	strb	r2, [r3, #5]
				UART5_txBuffer[6] = (uint8_t) ((Temperature_Protocol2 >> 8) & 0xFF);
 8004626:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 800462a:	0a1b      	lsrs	r3, r3, #8
 800462c:	b29b      	uxth	r3, r3
 800462e:	b2da      	uxtb	r2, r3
 8004630:	4b8b      	ldr	r3, [pc, #556]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004632:	719a      	strb	r2, [r3, #6]
				UART5_txBuffer[7] = (uint8_t) (Temperature_Protocol2 & 0xFF);
 8004634:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8004638:	b2da      	uxtb	r2, r3
 800463a:	4b89      	ldr	r3, [pc, #548]	; (8004860 <Narwhal_Protocol+0x1098>)
 800463c:	71da      	strb	r2, [r3, #7]

				/* Joint Current */
				for (int i = 0; i < 4; i++) {
 800463e:	2300      	movs	r3, #0
 8004640:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8004644:	e02c      	b.n	80046a0 <Narwhal_Protocol+0xed8>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8004646:	4a84      	ldr	r2, [pc, #528]	; (8004858 <Narwhal_Protocol+0x1090>)
 8004648:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800464c:	21d8      	movs	r1, #216	; 0xd8
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	4413      	add	r3, r2
 8004654:	3350      	adds	r3, #80	; 0x50
 8004656:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 800465a:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8004850 <Narwhal_Protocol+0x1088>
 800465e:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8004662:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004666:	ee17 3a90 	vmov	r3, s15
 800466a:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
					UART5_txBuffer[8 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800466e:	f9b7 312c 	ldrsh.w	r3, [r7, #300]	; 0x12c
 8004672:	121b      	asrs	r3, r3, #8
 8004674:	b21a      	sxth	r2, r3
 8004676:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800467a:	3304      	adds	r3, #4
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	b2d1      	uxtb	r1, r2
 8004680:	4a77      	ldr	r2, [pc, #476]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004682:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[9 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004684:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004688:	005b      	lsls	r3, r3, #1
 800468a:	3309      	adds	r3, #9
 800468c:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8004690:	b2d1      	uxtb	r1, r2
 8004692:	4a73      	ldr	r2, [pc, #460]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004694:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004696:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800469a:	3301      	adds	r3, #1
 800469c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80046a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	ddce      	ble.n	8004646 <Narwhal_Protocol+0xe7e>
				}
				UART5_txBuffer[16] = 0;
 80046a8:	4b6d      	ldr	r3, [pc, #436]	; (8004860 <Narwhal_Protocol+0x1098>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	741a      	strb	r2, [r3, #16]
				UART5_txBuffer[17] = 0;
 80046ae:	4b6c      	ldr	r3, [pc, #432]	; (8004860 <Narwhal_Protocol+0x1098>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	745a      	strb	r2, [r3, #17]

				/* Joint Set point*/
				for (int i = 0; i < 4; i++) {
 80046b4:	2300      	movs	r3, #0
 80046b6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80046ba:	e029      	b.n	8004710 <Narwhal_Protocol+0xf48>
					int16_t Buf = (int16_t) (SetPoint_Position[i] * 1000.0f);
 80046bc:	4a69      	ldr	r2, [pc, #420]	; (8004864 <Narwhal_Protocol+0x109c>)
 80046be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	4413      	add	r3, r2
 80046c6:	ed93 7b00 	vldr	d7, [r3]
 80046ca:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8004850 <Narwhal_Protocol+0x1088>
 80046ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80046d2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80046d6:	ee17 3a90 	vmov	r3, s15
 80046da:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
					UART5_txBuffer[18 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80046de:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 80046e2:	121b      	asrs	r3, r3, #8
 80046e4:	b21a      	sxth	r2, r3
 80046e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80046ea:	3309      	adds	r3, #9
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	b2d1      	uxtb	r1, r2
 80046f0:	4a5b      	ldr	r2, [pc, #364]	; (8004860 <Narwhal_Protocol+0x1098>)
 80046f2:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[19 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80046f4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	3313      	adds	r3, #19
 80046fc:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 8004700:	b2d1      	uxtb	r1, r2
 8004702:	4a57      	ldr	r2, [pc, #348]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004704:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004706:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800470a:	3301      	adds	r3, #1
 800470c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004710:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004714:	2b03      	cmp	r3, #3
 8004716:	ddd1      	ble.n	80046bc <Narwhal_Protocol+0xef4>
				}
				UART5_txBuffer[26] = 0;
 8004718:	4b51      	ldr	r3, [pc, #324]	; (8004860 <Narwhal_Protocol+0x1098>)
 800471a:	2200      	movs	r2, #0
 800471c:	769a      	strb	r2, [r3, #26]
				UART5_txBuffer[27] = 0;
 800471e:	4b50      	ldr	r3, [pc, #320]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004720:	2200      	movs	r2, #0
 8004722:	76da      	strb	r2, [r3, #27]

				for (int i = 0; i < 3; i++) {
 8004724:	2300      	movs	r3, #0
 8004726:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 800472a:	e02b      	b.n	8004784 <Narwhal_Protocol+0xfbc>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 800472c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004736:	443b      	add	r3, r7
 8004738:	3bd8      	subs	r3, #216	; 0xd8
 800473a:	ed93 7b00 	vldr	d7, [r3]
 800473e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004742:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004746:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800474a:	ee17 3a90 	vmov	r3, s15
 800474e:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
					UART5_txBuffer[28 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8004752:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 8004756:	121b      	asrs	r3, r3, #8
 8004758:	b21a      	sxth	r2, r3
 800475a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800475e:	330e      	adds	r3, #14
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	b2d1      	uxtb	r1, r2
 8004764:	4a3e      	ldr	r2, [pc, #248]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004766:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[29 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004768:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	331d      	adds	r3, #29
 8004770:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 8004774:	b2d1      	uxtb	r1, r2
 8004776:	4a3a      	ldr	r2, [pc, #232]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004778:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 800477a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800477e:	3301      	adds	r3, #1
 8004780:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8004784:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004788:	2b02      	cmp	r3, #2
 800478a:	ddcf      	ble.n	800472c <Narwhal_Protocol+0xf64>
				}
				UART5_txBuffer[34] = Chess_Move_Start_Flag;
 800478c:	4b36      	ldr	r3, [pc, #216]	; (8004868 <Narwhal_Protocol+0x10a0>)
 800478e:	781a      	ldrb	r2, [r3, #0]
 8004790:	4b33      	ldr	r3, [pc, #204]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004792:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				for (int i = 0; i < 3; i++) {
 8004796:	2300      	movs	r3, #0
 8004798:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800479c:	e02b      	b.n	80047f6 <Narwhal_Protocol+0x102e>
					int16_t Buf = (int16_t) (d_Task_Set[i] * 10.0f);
 800479e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047a8:	443b      	add	r3, r7
 80047aa:	3bc0      	subs	r3, #192	; 0xc0
 80047ac:	ed93 7b00 	vldr	d7, [r3]
 80047b0:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80047b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80047b8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80047bc:	ee17 3a90 	vmov	r3, s15
 80047c0:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
					UART5_txBuffer[35 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80047c4:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 80047c8:	121b      	asrs	r3, r3, #8
 80047ca:	b21a      	sxth	r2, r3
 80047cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	3323      	adds	r3, #35	; 0x23
 80047d4:	b2d1      	uxtb	r1, r2
 80047d6:	4a22      	ldr	r2, [pc, #136]	; (8004860 <Narwhal_Protocol+0x1098>)
 80047d8:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[36 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80047da:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047de:	3312      	adds	r3, #18
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 80047e6:	b2d1      	uxtb	r1, r2
 80047e8:	4a1d      	ldr	r2, [pc, #116]	; (8004860 <Narwhal_Protocol+0x1098>)
 80047ea:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 80047ec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047f0:	3301      	adds	r3, #1
 80047f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80047f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	ddcf      	ble.n	800479e <Narwhal_Protocol+0xfd6>
				}
				SentData(41);
 80047fe:	2029      	movs	r0, #41	; 0x29
 8004800:	f7fe ffc2 	bl	8003788 <SentData>
				break;
 8004804:	e013      	b.n	800482e <Narwhal_Protocol+0x1066>
			default:
				UART5_txBuffer[2] = 0xFF;
 8004806:	4b16      	ldr	r3, [pc, #88]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004808:	22ff      	movs	r2, #255	; 0xff
 800480a:	709a      	strb	r2, [r3, #2]
				SentData(3);
 800480c:	2003      	movs	r0, #3
 800480e:	f7fe ffbb 	bl	8003788 <SentData>
 8004812:	e00c      	b.n	800482e <Narwhal_Protocol+0x1066>
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			UART5_txBuffer[1] = 0xCC;
 8004814:	4b12      	ldr	r3, [pc, #72]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004816:	22cc      	movs	r2, #204	; 0xcc
 8004818:	705a      	strb	r2, [r3, #1]
			SentData(3);
 800481a:	2003      	movs	r0, #3
 800481c:	f7fe ffb4 	bl	8003788 <SentData>
 8004820:	e005      	b.n	800482e <Narwhal_Protocol+0x1066>
		}
	} else {
		/*		Header Error	*/
		UART5_txBuffer[1] = 0xAA;
 8004822:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <Narwhal_Protocol+0x1098>)
 8004824:	22aa      	movs	r2, #170	; 0xaa
 8004826:	705a      	strb	r2, [r3, #1]
		SentData(3);
 8004828:	2003      	movs	r0, #3
 800482a:	f7fe ffad 	bl	8003788 <SentData>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 800482e:	220e      	movs	r2, #14
 8004830:	490e      	ldr	r1, [pc, #56]	; (800486c <Narwhal_Protocol+0x10a4>)
 8004832:	480f      	ldr	r0, [pc, #60]	; (8004870 <Narwhal_Protocol+0x10a8>)
 8004834:	f010 f81e 	bl	8014874 <HAL_UART_Receive_IT>
}
 8004838:	bf00      	nop
 800483a:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 800483e:	46bd      	mov	sp, r7
 8004840:	bdb0      	pop	{r4, r5, r7, pc}
 8004842:	bf00      	nop
 8004844:	f3af 8000 	nop.w
 8004848:	00000000 	.word	0x00000000
 800484c:	4070d000 	.word	0x4070d000
 8004850:	00000000 	.word	0x00000000
 8004854:	408f4000 	.word	0x408f4000
 8004858:	200004a8 	.word	0x200004a8
 800485c:	20000b58 	.word	0x20000b58
 8004860:	200000a4 	.word	0x200000a4
 8004864:	20000b70 	.word	0x20000b70
 8004868:	20000be0 	.word	0x20000be0
 800486c:	20000094 	.word	0x20000094
 8004870:	200011ec 	.word	0x200011ec
 8004874:	00000000 	.word	0x00000000

08004878 <Control_Function>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 0;
}

inline void Control_Function() {
 8004878:	b5b0      	push	{r4, r5, r7, lr}
 800487a:	b0b8      	sub	sp, #224	; 0xe0
 800487c:	af00      	add	r7, sp, #0
	/***** Encoder Read *****/
	double J1, J2, J3, J4;
	J1 = EncPulse2Rad_Read(&Encoder[0], 1);
 800487e:	2101      	movs	r1, #1
 8004880:	48c7      	ldr	r0, [pc, #796]	; (8004ba0 <Control_Function+0x328>)
 8004882:	f7fb fec7 	bl	8000614 <EncPulse2Rad_Read>
 8004886:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
	J2 = EncPulse2Rad_Read(&Encoder[1], 0);
 800488a:	2100      	movs	r1, #0
 800488c:	48c5      	ldr	r0, [pc, #788]	; (8004ba4 <Control_Function+0x32c>)
 800488e:	f7fb fec1 	bl	8000614 <EncPulse2Rad_Read>
 8004892:	ed87 0b30 	vstr	d0, [r7, #192]	; 0xc0
	J3 = EncPulse2Rad_Read(&Encoder[2], 0);
 8004896:	2100      	movs	r1, #0
 8004898:	48c3      	ldr	r0, [pc, #780]	; (8004ba8 <Control_Function+0x330>)
 800489a:	f7fb febb 	bl	8000614 <EncPulse2Rad_Read>
 800489e:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
	J4 = EncPulse2Rad_Read(&Encoder[3], 0);
 80048a2:	2100      	movs	r1, #0
 80048a4:	48c1      	ldr	r0, [pc, #772]	; (8004bac <Control_Function+0x334>)
 80048a6:	f7fb feb5 	bl	8000614 <EncPulse2Rad_Read>
 80048aa:	ed87 0b2c 	vstr	d0, [r7, #176]	; 0xb0

	BaseENC[0] = TIM2->CNT;
 80048ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	4bbe      	ldr	r3, [pc, #760]	; (8004bb0 <Control_Function+0x338>)
 80048b8:	801a      	strh	r2, [r3, #0]
	int ds = BaseENC[0] - BaseENC[1]; //find delta s
 80048ba:	4bbd      	ldr	r3, [pc, #756]	; (8004bb0 <Control_Function+0x338>)
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	4bbb      	ldr	r3, [pc, #748]	; (8004bb0 <Control_Function+0x338>)
 80048c2:	885b      	ldrh	r3, [r3, #2]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	BaseENC[1] = BaseENC[0];
 80048ca:	4bb9      	ldr	r3, [pc, #740]	; (8004bb0 <Control_Function+0x338>)
 80048cc:	881a      	ldrh	r2, [r3, #0]
 80048ce:	4bb8      	ldr	r3, [pc, #736]	; (8004bb0 <Control_Function+0x338>)
 80048d0:	805a      	strh	r2, [r3, #2]
	//Unwrapping position
	if (ds >= 1000) {
 80048d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048da:	db06      	blt.n	80048ea <Control_Function+0x72>
		ds -= 1999;
 80048dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048e0:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 80048e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048e8:	e00a      	b.n	8004900 <Control_Function+0x88>
	} else if (ds <= -1000) {
 80048ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ee:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80048f2:	dc05      	bgt.n	8004900 <Control_Function+0x88>
		ds += 1999;
 80048f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048f8:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 80048fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	}
	Chess_Board_Base_Encoder += (ds/2000.0f)*2.0f*PI;
 8004900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004904:	ee07 3a90 	vmov	s15, r3
 8004908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800490c:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8004bb4 <Control_Function+0x33c>
 8004910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004914:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004918:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8004bb8 <Control_Function+0x340>
 800491c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004920:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8004924:	4ba5      	ldr	r3, [pc, #660]	; (8004bbc <Control_Function+0x344>)
 8004926:	ed93 7b00 	vldr	d7, [r3]
 800492a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800492e:	4ba3      	ldr	r3, [pc, #652]	; (8004bbc <Control_Function+0x344>)
 8004930:	ed83 7b00 	vstr	d7, [r3]

	/***** Joint Space SetPoint Gen *****/
	if (Chessmove_State == 0) {
 8004934:	4ba2      	ldr	r3, [pc, #648]	; (8004bc0 <Control_Function+0x348>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	f040 808d 	bne.w	8004a58 <Control_Function+0x1e0>
		if (Traj_Flag & 0x0F) {
 800493e:	4ba1      	ldr	r3, [pc, #644]	; (8004bc4 <Control_Function+0x34c>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	f003 030f 	and.w	r3, r3, #15
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 8173 	beq.w	8004c32 <Control_Function+0x3ba>
			double traj_t_set[5];
			traj_t_set[0] = t;
 800494c:	4b9e      	ldr	r3, [pc, #632]	; (8004bc8 <Control_Function+0x350>)
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 8004956:	4b9c      	ldr	r3, [pc, #624]	; (8004bc8 <Control_Function+0x350>)
 8004958:	ed93 6b00 	vldr	d6, [r3]
 800495c:	4b9a      	ldr	r3, [pc, #616]	; (8004bc8 <Control_Function+0x350>)
 800495e:	ed93 7b00 	vldr	d7, [r3]
 8004962:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004966:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 800496a:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800496e:	4b96      	ldr	r3, [pc, #600]	; (8004bc8 <Control_Function+0x350>)
 8004970:	ed93 7b00 	vldr	d7, [r3]
 8004974:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004978:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 800497c:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8004980:	4b91      	ldr	r3, [pc, #580]	; (8004bc8 <Control_Function+0x350>)
 8004982:	ed93 7b00 	vldr	d7, [r3]
 8004986:	ee26 7b07 	vmul.f64	d7, d6, d7
 800498a:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 800498e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8004992:	4b8d      	ldr	r3, [pc, #564]	; (8004bc8 <Control_Function+0x350>)
 8004994:	ed93 7b00 	vldr	d7, [r3]
 8004998:	ee26 7b07 	vmul.f64	d7, d6, d7
 800499c:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 0; i < 4; i++) {
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049a6:	e048      	b.n	8004a3a <Control_Function+0x1c2>
				if (Traj_Flag & (0x01 << i)) {
 80049a8:	4b86      	ldr	r3, [pc, #536]	; (8004bc4 <Control_Function+0x34c>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049b2:	fa42 f303 	asr.w	r3, r2, r3
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d038      	beq.n	8004a30 <Control_Function+0x1b8>
					TrajFollow(&Traj[i], traj_t_set, &SetPoint_Position[i],
 80049be:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4a80      	ldr	r2, [pc, #512]	; (8004bcc <Control_Function+0x354>)
 80049cc:	1898      	adds	r0, r3, r2
 80049ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4a7e      	ldr	r2, [pc, #504]	; (8004bd0 <Control_Function+0x358>)
 80049d6:	441a      	add	r2, r3
 80049d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	497d      	ldr	r1, [pc, #500]	; (8004bd4 <Control_Function+0x35c>)
 80049e0:	440b      	add	r3, r1
 80049e2:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80049e6:	f7fc fce5 	bl	80013b4 <TrajFollow>
							&SetPoint_Velocity[i]);
					if (t >= Traj[i].T) {
 80049ea:	4978      	ldr	r1, [pc, #480]	; (8004bcc <Control_Function+0x354>)
 80049ec:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80049f0:	4613      	mov	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	440b      	add	r3, r1
 80049fa:	3330      	adds	r3, #48	; 0x30
 80049fc:	ed93 6b00 	vldr	d6, [r3]
 8004a00:	4b71      	ldr	r3, [pc, #452]	; (8004bc8 <Control_Function+0x350>)
 8004a02:	ed93 7b00 	vldr	d7, [r3]
 8004a06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0e:	d80f      	bhi.n	8004a30 <Control_Function+0x1b8>
						Traj_Flag &= ((0x01 << i) ^ 0xFF);
 8004a10:	2201      	movs	r2, #1
 8004a12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	b25b      	sxtb	r3, r3
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	b25a      	sxtb	r2, r3
 8004a20:	4b68      	ldr	r3, [pc, #416]	; (8004bc4 <Control_Function+0x34c>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	b25b      	sxtb	r3, r3
 8004a26:	4013      	ands	r3, r2
 8004a28:	b25b      	sxtb	r3, r3
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	4b65      	ldr	r3, [pc, #404]	; (8004bc4 <Control_Function+0x34c>)
 8004a2e:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8004a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a34:	3301      	adds	r3, #1
 8004a36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a3e:	2b03      	cmp	r3, #3
 8004a40:	ddb2      	ble.n	80049a8 <Control_Function+0x130>
					}
				}
			}
			t += delta_t;
 8004a42:	4b61      	ldr	r3, [pc, #388]	; (8004bc8 <Control_Function+0x350>)
 8004a44:	ed93 7b00 	vldr	d7, [r3]
 8004a48:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8004b98 <Control_Function+0x320>
 8004a4c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a50:	4b5d      	ldr	r3, [pc, #372]	; (8004bc8 <Control_Function+0x350>)
 8004a52:	ed83 7b00 	vstr	d7, [r3]
 8004a56:	e0ec      	b.n	8004c32 <Control_Function+0x3ba>
		}
	}

	else if (Chessmove_State == 1) {
 8004a58:	4b59      	ldr	r3, [pc, #356]	; (8004bc0 <Control_Function+0x348>)
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	f040 80e8 	bne.w	8004c32 <Control_Function+0x3ba>
		if (Traj_Flag & 0x0F) {
 8004a62:	4b58      	ldr	r3, [pc, #352]	; (8004bc4 <Control_Function+0x34c>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 80e1 	beq.w	8004c32 <Control_Function+0x3ba>
			double gamma[3] = { 1, 1, -1 };
 8004a70:	4b59      	ldr	r3, [pc, #356]	; (8004bd8 <Control_Function+0x360>)
 8004a72:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8004a76:	461d      	mov	r5, r3
 8004a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004a80:	e884 0003 	stmia.w	r4, {r0, r1}
			//*********** Chi Output ************//
			double SetPointPosition[4];
			double SetPointVelocity[4];

			double traj_t_set[5];
			traj_t_set[0] = t;
 8004a84:	4b50      	ldr	r3, [pc, #320]	; (8004bc8 <Control_Function+0x350>)
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 8004a8e:	4b4e      	ldr	r3, [pc, #312]	; (8004bc8 <Control_Function+0x350>)
 8004a90:	ed93 6b00 	vldr	d6, [r3]
 8004a94:	4b4c      	ldr	r3, [pc, #304]	; (8004bc8 <Control_Function+0x350>)
 8004a96:	ed93 7b00 	vldr	d7, [r3]
 8004a9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a9e:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 8004aa2:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8004aa6:	4b48      	ldr	r3, [pc, #288]	; (8004bc8 <Control_Function+0x350>)
 8004aa8:	ed93 7b00 	vldr	d7, [r3]
 8004aac:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ab0:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 8004ab4:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8004ab8:	4b43      	ldr	r3, [pc, #268]	; (8004bc8 <Control_Function+0x350>)
 8004aba:	ed93 7b00 	vldr	d7, [r3]
 8004abe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ac2:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 8004ac6:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8004aca:	4b3f      	ldr	r3, [pc, #252]	; (8004bc8 <Control_Function+0x350>)
 8004acc:	ed93 7b00 	vldr	d7, [r3]
 8004ad0:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ad4:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 4; i < 7; i++) {
 8004ad8:	2304      	movs	r3, #4
 8004ada:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004ade:	e040      	b.n	8004b62 <Control_Function+0x2ea>
				TrajFollow(&Traj[i], traj_t_set, &Chi_t[i], &ChiDot_t[i]);
 8004ae0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	1a9b      	subs	r3, r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	4a37      	ldr	r2, [pc, #220]	; (8004bcc <Control_Function+0x354>)
 8004aee:	1898      	adds	r0, r3, r2
 8004af0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004af4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004af8:	00db      	lsls	r3, r3, #3
 8004afa:	18d4      	adds	r4, r2, r3
 8004afc:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004b00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4413      	add	r3, r2
 8004b08:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004b0c:	4622      	mov	r2, r4
 8004b0e:	f7fc fc51 	bl	80013b4 <TrajFollow>
				if (t >= Traj[i].T) {
 8004b12:	492e      	ldr	r1, [pc, #184]	; (8004bcc <Control_Function+0x354>)
 8004b14:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	1a9b      	subs	r3, r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	440b      	add	r3, r1
 8004b22:	3330      	adds	r3, #48	; 0x30
 8004b24:	ed93 6b00 	vldr	d6, [r3]
 8004b28:	4b27      	ldr	r3, [pc, #156]	; (8004bc8 <Control_Function+0x350>)
 8004b2a:	ed93 7b00 	vldr	d7, [r3]
 8004b2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b36:	d80f      	bhi.n	8004b58 <Control_Function+0x2e0>
					Traj_Flag &= ((0x01 << i) ^ 0xFF);
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	b25b      	sxtb	r3, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	b25a      	sxtb	r2, r3
 8004b48:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <Control_Function+0x34c>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	b25b      	sxtb	r3, r3
 8004b4e:	4013      	ands	r3, r2
 8004b50:	b25b      	sxtb	r3, r3
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	4b1b      	ldr	r3, [pc, #108]	; (8004bc4 <Control_Function+0x34c>)
 8004b56:	701a      	strb	r2, [r3, #0]
			for (int i = 4; i < 7; i++) {
 8004b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b66:	2b06      	cmp	r3, #6
 8004b68:	ddba      	ble.n	8004ae0 <Control_Function+0x268>
				}
			}
			IPK(gamma, Chi_t, SetPointPosition);
 8004b6a:	463a      	mov	r2, r7
 8004b6c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8004b70:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fd fa47 	bl	8002008 <IPK>
			IVK(SetPointPosition, ChiDot_t, SetPointVelocity);
 8004b7a:	f107 0220 	add.w	r2, r7, #32
 8004b7e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004b82:	463b      	mov	r3, r7
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fd fb6b 	bl	8002260 <IVK>
			for (int i = 0; i < 4; i++) {
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b90:	e041      	b.n	8004c16 <Control_Function+0x39e>
 8004b92:	bf00      	nop
 8004b94:	f3af 8000 	nop.w
 8004b98:	d2f1a9fc 	.word	0xd2f1a9fc
 8004b9c:	3f50624d 	.word	0x3f50624d
 8004ba0:	200002c8 	.word	0x200002c8
 8004ba4:	200002f0 	.word	0x200002f0
 8004ba8:	20000318 	.word	0x20000318
 8004bac:	20000340 	.word	0x20000340
 8004bb0:	20000b60 	.word	0x20000b60
 8004bb4:	44fa0000 	.word	0x44fa0000
 8004bb8:	40490fdb 	.word	0x40490fdb
 8004bbc:	20000b58 	.word	0x20000b58
 8004bc0:	20000bcb 	.word	0x20000bcb
 8004bc4:	20000bc9 	.word	0x20000bc9
 8004bc8:	20000bc0 	.word	0x20000bc0
 8004bcc:	200009d0 	.word	0x200009d0
 8004bd0:	20000b70 	.word	0x20000b70
 8004bd4:	20000b98 	.word	0x20000b98
 8004bd8:	080183b8 	.word	0x080183b8
				TrajFollow(&Traj[i], traj_t_set, &SetPointPosition[i],
 8004bdc:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4a47      	ldr	r2, [pc, #284]	; (8004d08 <Control_Function+0x490>)
 8004bea:	1898      	adds	r0, r3, r2
 8004bec:	463a      	mov	r2, r7
 8004bee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bf2:	00db      	lsls	r3, r3, #3
 8004bf4:	18d4      	adds	r4, r2, r3
 8004bf6:	f107 0220 	add.w	r2, r7, #32
 8004bfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	4413      	add	r3, r2
 8004c02:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004c06:	4622      	mov	r2, r4
 8004c08:	f7fc fbd4 	bl	80013b4 <TrajFollow>
			for (int i = 0; i < 4; i++) {
 8004c0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c10:	3301      	adds	r3, #1
 8004c12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	ddde      	ble.n	8004bdc <Control_Function+0x364>
						&SetPointVelocity[i]);
			}
			t += delta_t;
 8004c1e:	4b3b      	ldr	r3, [pc, #236]	; (8004d0c <Control_Function+0x494>)
 8004c20:	ed93 7b00 	vldr	d7, [r3]
 8004c24:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8004d00 <Control_Function+0x488>
 8004c28:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c2c:	4b37      	ldr	r3, [pc, #220]	; (8004d0c <Control_Function+0x494>)
 8004c2e:	ed83 7b00 	vstr	d7, [r3]
		}
	}

	CascadeControl(&Control[0], &Kalman[0], J1, SetPoint_Position[0], SetPoint_Velocity[0]);
 8004c32:	4b37      	ldr	r3, [pc, #220]	; (8004d10 <Control_Function+0x498>)
 8004c34:	ed93 7b00 	vldr	d7, [r3]
 8004c38:	4b36      	ldr	r3, [pc, #216]	; (8004d14 <Control_Function+0x49c>)
 8004c3a:	ed93 6b00 	vldr	d6, [r3]
 8004c3e:	eeb0 2b46 	vmov.f64	d2, d6
 8004c42:	eeb0 1b47 	vmov.f64	d1, d7
 8004c46:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 8004c4a:	4933      	ldr	r1, [pc, #204]	; (8004d18 <Control_Function+0x4a0>)
 8004c4c:	4833      	ldr	r0, [pc, #204]	; (8004d1c <Control_Function+0x4a4>)
 8004c4e:	f7fc ff06 	bl	8001a5e <CascadeControl>
	CascadeControl(&Control[1], &Kalman[1], J2, SetPoint_Position[1], SetPoint_Velocity[1]);
 8004c52:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <Control_Function+0x498>)
 8004c54:	ed93 7b02 	vldr	d7, [r3, #8]
 8004c58:	4b2e      	ldr	r3, [pc, #184]	; (8004d14 <Control_Function+0x49c>)
 8004c5a:	ed93 6b02 	vldr	d6, [r3, #8]
 8004c5e:	eeb0 2b46 	vmov.f64	d2, d6
 8004c62:	eeb0 1b47 	vmov.f64	d1, d7
 8004c66:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8004c6a:	492d      	ldr	r1, [pc, #180]	; (8004d20 <Control_Function+0x4a8>)
 8004c6c:	482d      	ldr	r0, [pc, #180]	; (8004d24 <Control_Function+0x4ac>)
 8004c6e:	f7fc fef6 	bl	8001a5e <CascadeControl>
	CascadeControl(&Control[2], &Kalman[2], J3, SetPoint_Position[2], SetPoint_Velocity[2]);
 8004c72:	4b27      	ldr	r3, [pc, #156]	; (8004d10 <Control_Function+0x498>)
 8004c74:	ed93 7b04 	vldr	d7, [r3, #16]
 8004c78:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <Control_Function+0x49c>)
 8004c7a:	ed93 6b04 	vldr	d6, [r3, #16]
 8004c7e:	eeb0 2b46 	vmov.f64	d2, d6
 8004c82:	eeb0 1b47 	vmov.f64	d1, d7
 8004c86:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 8004c8a:	4927      	ldr	r1, [pc, #156]	; (8004d28 <Control_Function+0x4b0>)
 8004c8c:	4827      	ldr	r0, [pc, #156]	; (8004d2c <Control_Function+0x4b4>)
 8004c8e:	f7fc fee6 	bl	8001a5e <CascadeControl>
	CascadeControl(&Control[3], &Kalman[3], J4, SetPoint_Position[3], SetPoint_Velocity[3]);
 8004c92:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <Control_Function+0x498>)
 8004c94:	ed93 7b06 	vldr	d7, [r3, #24]
 8004c98:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <Control_Function+0x49c>)
 8004c9a:	ed93 6b06 	vldr	d6, [r3, #24]
 8004c9e:	eeb0 2b46 	vmov.f64	d2, d6
 8004ca2:	eeb0 1b47 	vmov.f64	d1, d7
 8004ca6:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8004caa:	4921      	ldr	r1, [pc, #132]	; (8004d30 <Control_Function+0x4b8>)
 8004cac:	4821      	ldr	r0, [pc, #132]	; (8004d34 <Control_Function+0x4bc>)
 8004cae:	f7fc fed6 	bl	8001a5e <CascadeControl>

	Step_Driver(&Stepper[0], Control[0].Output);
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <Control_Function+0x4a4>)
 8004cb4:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8004cb8:	eeb0 0b47 	vmov.f64	d0, d7
 8004cbc:	481e      	ldr	r0, [pc, #120]	; (8004d38 <Control_Function+0x4c0>)
 8004cbe:	f7fc f9a3 	bl	8001008 <Step_Driver>
	Step_Driver(&Stepper[1], Control[1].Output);
 8004cc2:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <Control_Function+0x4a4>)
 8004cc4:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8004cc8:	eeb0 0b47 	vmov.f64	d0, d7
 8004ccc:	481b      	ldr	r0, [pc, #108]	; (8004d3c <Control_Function+0x4c4>)
 8004cce:	f7fc f99b 	bl	8001008 <Step_Driver>
	Step_Driver(&Stepper[2], Control[2].Output);
 8004cd2:	4b12      	ldr	r3, [pc, #72]	; (8004d1c <Control_Function+0x4a4>)
 8004cd4:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 8004cd8:	eeb0 0b47 	vmov.f64	d0, d7
 8004cdc:	4818      	ldr	r0, [pc, #96]	; (8004d40 <Control_Function+0x4c8>)
 8004cde:	f7fc f993 	bl	8001008 <Step_Driver>
	Step_Driver(&Stepper[3], Control[3].Output);
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <Control_Function+0x4a4>)
 8004ce4:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
 8004ce8:	eeb0 0b47 	vmov.f64	d0, d7
 8004cec:	4815      	ldr	r0, [pc, #84]	; (8004d44 <Control_Function+0x4cc>)
 8004cee:	f7fc f98b 	bl	8001008 <Step_Driver>
}
 8004cf2:	bf00      	nop
 8004cf4:	37e0      	adds	r7, #224	; 0xe0
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	f3af 8000 	nop.w
 8004d00:	d2f1a9fc 	.word	0xd2f1a9fc
 8004d04:	3f50624d 	.word	0x3f50624d
 8004d08:	200009d0 	.word	0x200009d0
 8004d0c:	20000bc0 	.word	0x20000bc0
 8004d10:	20000b70 	.word	0x20000b70
 8004d14:	20000b98 	.word	0x20000b98
 8004d18:	20000368 	.word	0x20000368
 8004d1c:	200004a8 	.word	0x200004a8
 8004d20:	200003a8 	.word	0x200003a8
 8004d24:	20000580 	.word	0x20000580
 8004d28:	200003e8 	.word	0x200003e8
 8004d2c:	20000658 	.word	0x20000658
 8004d30:	20000428 	.word	0x20000428
 8004d34:	20000730 	.word	0x20000730
 8004d38:	20000808 	.word	0x20000808
 8004d3c:	2000081c 	.word	0x2000081c
 8004d40:	20000830 	.word	0x20000830
 8004d44:	20000844 	.word	0x20000844

08004d48 <JMoveTaskSpace>:

inline void JMoveTaskSpace(double Task2Go[3], double Time2Move){
 8004d48:	b5b0      	push	{r4, r5, r7, lr}
 8004d4a:	b094      	sub	sp, #80	; 0x50
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	ed87 0b00 	vstr	d0, [r7]
	double gamma[3] = { 1, 1, -1 };
 8004d54:	4b2e      	ldr	r3, [pc, #184]	; (8004e10 <JMoveTaskSpace+0xc8>)
 8004d56:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004d5a:	461d      	mov	r5, r3
 8004d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004d64:	e884 0003 	stmia.w	r4, {r0, r1}
	double q_inv[4];
	IPK(gamma, Task2Go, q_inv);
 8004d68:	f107 0210 	add.w	r2, r7, #16
 8004d6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004d70:	68f9      	ldr	r1, [r7, #12]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fd f948 	bl	8002008 <IPK>
	t = 0;
 8004d78:	4926      	ldr	r1, [pc, #152]	; (8004e14 <JMoveTaskSpace+0xcc>)
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	f04f 0300 	mov.w	r3, #0
 8004d82:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 4; i++) {
 8004d86:	2300      	movs	r3, #0
 8004d88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d8a:	e02f      	b.n	8004dec <JMoveTaskSpace+0xa4>
		Traj_Coeff_Cal(&Traj[i], Time2Move, q_inv[i], Control[i].PositionFeedback, 0,
 8004d8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d8e:	4613      	mov	r3, r2
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	1a9b      	subs	r3, r3, r2
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <JMoveTaskSpace+0xd0>)
 8004d98:	441a      	add	r2, r3
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	3350      	adds	r3, #80	; 0x50
 8004da0:	443b      	add	r3, r7
 8004da2:	3b40      	subs	r3, #64	; 0x40
 8004da4:	ed93 7b00 	vldr	d7, [r3]
 8004da8:	491c      	ldr	r1, [pc, #112]	; (8004e1c <JMoveTaskSpace+0xd4>)
 8004daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dac:	20d8      	movs	r0, #216	; 0xd8
 8004dae:	fb00 f303 	mul.w	r3, r0, r3
 8004db2:	440b      	add	r3, r1
 8004db4:	3350      	adds	r3, #80	; 0x50
 8004db6:	ed93 6b00 	vldr	d6, [r3]
 8004dba:	4918      	ldr	r1, [pc, #96]	; (8004e1c <JMoveTaskSpace+0xd4>)
 8004dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dbe:	20d8      	movs	r0, #216	; 0xd8
 8004dc0:	fb00 f303 	mul.w	r3, r0, r3
 8004dc4:	440b      	add	r3, r1
 8004dc6:	33b8      	adds	r3, #184	; 0xb8
 8004dc8:	ed93 5b00 	vldr	d5, [r3]
 8004dcc:	eeb0 4b45 	vmov.f64	d4, d5
 8004dd0:	ed9f 3b0d 	vldr	d3, [pc, #52]	; 8004e08 <JMoveTaskSpace+0xc0>
 8004dd4:	eeb0 2b46 	vmov.f64	d2, d6
 8004dd8:	eeb0 1b47 	vmov.f64	d1, d7
 8004ddc:	ed97 0b00 	vldr	d0, [r7]
 8004de0:	4610      	mov	r0, r2
 8004de2:	f7fc fa39 	bl	8001258 <Traj_Coeff_Cal>
	for (int i = 0; i < 4; i++) {
 8004de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de8:	3301      	adds	r3, #1
 8004dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	ddcc      	ble.n	8004d8c <JMoveTaskSpace+0x44>
				Control[i].VelocityFeedback);
	}
	Traj_Flag = 0x0F;
 8004df2:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <JMoveTaskSpace+0xd8>)
 8004df4:	220f      	movs	r2, #15
 8004df6:	701a      	strb	r2, [r3, #0]
	Chessmove_State = 0;
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <JMoveTaskSpace+0xdc>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
}
 8004dfe:	bf00      	nop
 8004e00:	3750      	adds	r7, #80	; 0x50
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bdb0      	pop	{r4, r5, r7, pc}
 8004e06:	bf00      	nop
	...
 8004e10:	080183b8 	.word	0x080183b8
 8004e14:	20000bc0 	.word	0x20000bc0
 8004e18:	200009d0 	.word	0x200009d0
 8004e1c:	200004a8 	.word	0x200004a8
 8004e20:	20000bc9 	.word	0x20000bc9
 8004e24:	20000bcb 	.word	0x20000bcb

08004e28 <ChessNotMovePathWay>:
	Traj_Flag = 0x0F;
	Chessmove_State = 1; // Change to TaskSpace Traj
}

void ChessNotMovePathWay(uint8_t Index2Move, double Z_Offset, uint8_t IsJMove,
		uint8_t IsRemove) {
 8004e28:	b5b0      	push	{r4, r5, r7, lr}
 8004e2a:	b0a6      	sub	sp, #152	; 0x98
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	ed87 0b00 	vstr	d0, [r7]
 8004e34:	73fb      	strb	r3, [r7, #15]
 8004e36:	460b      	mov	r3, r1
 8004e38:	73bb      	strb	r3, [r7, #14]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	737b      	strb	r3, [r7, #13]
	/***** Encoder Read *****/
	double PositionXY[2];
	double SafePose[3] = { 100, -370, 17 };
 8004e3e:	4baa      	ldr	r3, [pc, #680]	; (80050e8 <ChessNotMovePathWay+0x2c0>)
 8004e40:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8004e44:	461d      	mov	r5, r3
 8004e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004e4e:	e884 0003 	stmia.w	r4, {r0, r1}

	/***** Base Encoder Read *****/
//	BaseEnc = BaseENCRead();   //?????????????????????????????????????????????????????????
	ChessPose(Index2Move, Chess_Board_Base_Encoder, PositionXY);
 8004e52:	4ba6      	ldr	r3, [pc, #664]	; (80050ec <ChessNotMovePathWay+0x2c4>)
 8004e54:	ed93 7b00 	vldr	d7, [r3]
 8004e58:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	4611      	mov	r1, r2
 8004e60:	eeb0 0b47 	vmov.f64	d0, d7
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fd ff03 	bl	8002c70 <ChessPose>
	double q_Feed[4];
	double Pne[3];
	q_Feed[0] = Control[0].PositionFeedback;
 8004e6a:	4ba1      	ldr	r3, [pc, #644]	; (80050f0 <ChessNotMovePathWay+0x2c8>)
 8004e6c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004e70:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	q_Feed[1] = Control[1].PositionFeedback;
 8004e74:	4b9e      	ldr	r3, [pc, #632]	; (80050f0 <ChessNotMovePathWay+0x2c8>)
 8004e76:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8004e7a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	q_Feed[2] = Control[2].PositionFeedback;
 8004e7e:	4b9c      	ldr	r3, [pc, #624]	; (80050f0 <ChessNotMovePathWay+0x2c8>)
 8004e80:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8004e84:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	q_Feed[3] = Control[3].PositionFeedback;
 8004e88:	4b99      	ldr	r3, [pc, #612]	; (80050f0 <ChessNotMovePathWay+0x2c8>)
 8004e8a:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8004e8e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	FPK(q_Feed, 269.0f, Pne);
 8004e92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e96:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	ed9f 0b88 	vldr	d0, [pc, #544]	; 80050c0 <ChessNotMovePathWay+0x298>
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fd fcb9 	bl	8002818 <FPK>
	double Time2MoveDynamic = 1.2;
 8004ea6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004eaa:	4b92      	ldr	r3, [pc, #584]	; (80050f4 <ChessNotMovePathWay+0x2cc>)
 8004eac:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	double TaskSpace2Go[3];
	if (Index2Move == 64) {
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b40      	cmp	r3, #64	; 0x40
 8004eb4:	f040 80e2 	bne.w	800507c <ChessNotMovePathWay+0x254>
		if (IsRemove == 1) {
 8004eb8:	7b7b      	ldrb	r3, [r7, #13]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d16a      	bne.n	8004f94 <ChessNotMovePathWay+0x16c>
			TaskSpace2Go[0] = SafePose[0] + (PositionX_Remove * 40);
 8004ebe:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8004ec2:	4b8d      	ldr	r3, [pc, #564]	; (80050f8 <ChessNotMovePathWay+0x2d0>)
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	ee07 3a90 	vmov	s15, r3
 8004ed4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004ed8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004edc:	ed87 7b04 	vstr	d7, [r7, #16]
			TaskSpace2Go[1] = SafePose[1];
 8004ee0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004ee4:	e9c7 2306 	strd	r2, r3, [r7, #24]
			TaskSpace2Go[2] = Z_TopOffset;
 8004ee8:	4b84      	ldr	r3, [pc, #528]	; (80050fc <ChessNotMovePathWay+0x2d4>)
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	e9c7 2308 	strd	r2, r3, [r7, #32]
			Time2MoveDynamic += (sqrt(
								((TaskSpace2Go[0] - Pne[0]) * (TaskSpace2Go[0] - Pne[0]))
 8004ef2:	ed97 6b04 	vldr	d6, [r7, #16]
 8004ef6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004efa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004efe:	ed97 5b04 	vldr	d5, [r7, #16]
 8004f02:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004f06:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004f0a:	ee26 6b07 	vmul.f64	d6, d6, d7
										+ ((TaskSpace2Go[1] - Pne[1]) * (TaskSpace2Go[1] - Pne[1])
 8004f0e:	ed97 5b06 	vldr	d5, [r7, #24]
 8004f12:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004f16:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004f1a:	ed97 4b06 	vldr	d4, [r7, #24]
 8004f1e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004f22:	ee34 7b47 	vsub.f64	d7, d4, d7
 8004f26:	ee25 5b07 	vmul.f64	d5, d5, d7
												+ ((TaskSpace2Go[2] - Pne[2]) * (TaskSpace2Go[2] - Pne[2])))))
 8004f2a:	ed97 4b08 	vldr	d4, [r7, #32]
 8004f2e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004f32:	ee34 4b47 	vsub.f64	d4, d4, d7
 8004f36:	ed97 3b08 	vldr	d3, [r7, #32]
 8004f3a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004f3e:	ee33 7b47 	vsub.f64	d7, d3, d7
 8004f42:	ee24 7b07 	vmul.f64	d7, d4, d7
 8004f46:	ee35 7b07 	vadd.f64	d7, d5, d7
			Time2MoveDynamic += (sqrt(
 8004f4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f4e:	eeb0 0b47 	vmov.f64	d0, d7
 8004f52:	f012 fa85 	bl	8017460 <sqrt>
 8004f56:	eeb0 7b40 	vmov.f64	d7, d0
								* 0.0068;
 8004f5a:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 80050c8 <ChessNotMovePathWay+0x2a0>
 8004f5e:	ee27 7b06 	vmul.f64	d7, d7, d6
			Time2MoveDynamic += (sqrt(
 8004f62:	ed97 6b22 	vldr	d6, [r7, #136]	; 0x88
 8004f66:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f6a:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
			if (IsJMove) {
 8004f6e:	7bbb      	ldrb	r3, [r7, #14]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d007      	beq.n	8004f84 <ChessNotMovePathWay+0x15c>
				JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 8004f74:	f107 0310 	add.w	r3, r7, #16
 8004f78:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fee3 	bl	8004d48 <JMoveTaskSpace>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
		} else {
			JMoveTaskSpace(TaskSpace2Go, 2);
		}
	}
}
 8004f82:	e146      	b.n	8005212 <ChessNotMovePathWay+0x3ea>
				JMoveTaskSpace(TaskSpace2Go, 2);
 8004f84:	f107 0310 	add.w	r3, r7, #16
 8004f88:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fedb 	bl	8004d48 <JMoveTaskSpace>
}
 8004f92:	e13e      	b.n	8005212 <ChessNotMovePathWay+0x3ea>
		} else if (IsRemove == 2) {
 8004f94:	7b7b      	ldrb	r3, [r7, #13]
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	f040 813b 	bne.w	8005212 <ChessNotMovePathWay+0x3ea>
			TaskSpace2Go[0] = SafePose[0] + (PositionX_Remove * 40);
 8004f9c:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8004fa0:	4b55      	ldr	r3, [pc, #340]	; (80050f8 <ChessNotMovePathWay+0x2d0>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	4613      	mov	r3, r2
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	4413      	add	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	ee07 3a90 	vmov	s15, r3
 8004fb2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004fb6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004fba:	ed87 7b04 	vstr	d7, [r7, #16]
			TaskSpace2Go[1] = SafePose[1];
 8004fbe:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004fc2:	e9c7 2306 	strd	r2, r3, [r7, #24]
			TaskSpace2Go[2] = SafePose[2];
 8004fc6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004fca:	e9c7 2308 	strd	r2, r3, [r7, #32]
			PositionX_Remove += 1;
 8004fce:	4b4a      	ldr	r3, [pc, #296]	; (80050f8 <ChessNotMovePathWay+0x2d0>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	4b48      	ldr	r3, [pc, #288]	; (80050f8 <ChessNotMovePathWay+0x2d0>)
 8004fd8:	701a      	strb	r2, [r3, #0]
					((TaskSpace2Go[0] - Pne[0]) * (TaskSpace2Go[0] - Pne[0]))
 8004fda:	ed97 6b04 	vldr	d6, [r7, #16]
 8004fde:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004fe2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004fe6:	ed97 5b04 	vldr	d5, [r7, #16]
 8004fea:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004fee:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004ff2:	ee26 6b07 	vmul.f64	d6, d6, d7
							+ ((TaskSpace2Go[1] - Pne[1]) * (TaskSpace2Go[1] - Pne[1])
 8004ff6:	ed97 5b06 	vldr	d5, [r7, #24]
 8004ffa:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004ffe:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005002:	ed97 4b06 	vldr	d4, [r7, #24]
 8005006:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800500a:	ee34 7b47 	vsub.f64	d7, d4, d7
 800500e:	ee25 5b07 	vmul.f64	d5, d5, d7
									+ ((TaskSpace2Go[2] - Pne[2]) * (TaskSpace2Go[2] - Pne[2])))))
 8005012:	ed97 4b08 	vldr	d4, [r7, #32]
 8005016:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800501a:	ee34 4b47 	vsub.f64	d4, d4, d7
 800501e:	ed97 3b08 	vldr	d3, [r7, #32]
 8005022:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8005026:	ee33 7b47 	vsub.f64	d7, d3, d7
 800502a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800502e:	ee35 7b07 	vadd.f64	d7, d5, d7
			Time2MoveDynamic += (sqrt(
 8005032:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005036:	eeb0 0b47 	vmov.f64	d0, d7
 800503a:	f012 fa11 	bl	8017460 <sqrt>
 800503e:	eeb0 7b40 	vmov.f64	d7, d0
					* 0.0068;
 8005042:	ed9f 6b21 	vldr	d6, [pc, #132]	; 80050c8 <ChessNotMovePathWay+0x2a0>
 8005046:	ee27 7b06 	vmul.f64	d7, d7, d6
			Time2MoveDynamic += (sqrt(
 800504a:	ed97 6b22 	vldr	d6, [r7, #136]	; 0x88
 800504e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005052:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
			if (IsJMove) {
 8005056:	7bbb      	ldrb	r3, [r7, #14]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <ChessNotMovePathWay+0x244>
				JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 800505c:	f107 0310 	add.w	r3, r7, #16
 8005060:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff fe6f 	bl	8004d48 <JMoveTaskSpace>
}
 800506a:	e0d2      	b.n	8005212 <ChessNotMovePathWay+0x3ea>
				JMoveTaskSpace(TaskSpace2Go, 2);
 800506c:	f107 0310 	add.w	r3, r7, #16
 8005070:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fe67 	bl	8004d48 <JMoveTaskSpace>
}
 800507a:	e0ca      	b.n	8005212 <ChessNotMovePathWay+0x3ea>
		if (PositionXY[0] > 250 && PositionXY[0] < 450) {
 800507c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8005080:	ed9f 6b13 	vldr	d6, [pc, #76]	; 80050d0 <ChessNotMovePathWay+0x2a8>
 8005084:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800508c:	dd38      	ble.n	8005100 <ChessNotMovePathWay+0x2d8>
 800508e:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8005092:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80050d8 <ChessNotMovePathWay+0x2b0>
 8005096:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800509a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509e:	d52f      	bpl.n	8005100 <ChessNotMovePathWay+0x2d8>
			Z_Board_Offset = (PositionXY[0] - 250) * 0.05f;
 80050a0:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80050a4:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 80050d0 <ChessNotMovePathWay+0x2a8>
 80050a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80050ac:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 80050e0 <ChessNotMovePathWay+0x2b8>
 80050b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80050b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80050b8:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 80050bc:	e040      	b.n	8005140 <ChessNotMovePathWay+0x318>
 80050be:	bf00      	nop
 80050c0:	00000000 	.word	0x00000000
 80050c4:	4070d000 	.word	0x4070d000
 80050c8:	19ce075f 	.word	0x19ce075f
 80050cc:	3f7bda51 	.word	0x3f7bda51
 80050d0:	00000000 	.word	0x00000000
 80050d4:	406f4000 	.word	0x406f4000
 80050d8:	00000000 	.word	0x00000000
 80050dc:	407c2000 	.word	0x407c2000
 80050e0:	a0000000 	.word	0xa0000000
 80050e4:	3fa99999 	.word	0x3fa99999
 80050e8:	080183d0 	.word	0x080183d0
 80050ec:	20000b58 	.word	0x20000b58
 80050f0:	200004a8 	.word	0x200004a8
 80050f4:	3ff33333 	.word	0x3ff33333
 80050f8:	20000be2 	.word	0x20000be2
 80050fc:	20000000 	.word	0x20000000
		} else if (PositionXY[0] > 450 && PositionXY[0] < 700) {
 8005100:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8005104:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8005220 <ChessNotMovePathWay+0x3f8>
 8005108:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800510c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005110:	dd16      	ble.n	8005140 <ChessNotMovePathWay+0x318>
 8005112:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8005116:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8005228 <ChessNotMovePathWay+0x400>
 800511a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800511e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005122:	d50d      	bpl.n	8005140 <ChessNotMovePathWay+0x318>
			Z_Board_Offset = (PositionXY[0] - 450) * 0.1f;
 8005124:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8005128:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8005220 <ChessNotMovePathWay+0x3f8>
 800512c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005130:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8005230 <ChessNotMovePathWay+0x408>
 8005134:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005138:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800513c:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		TaskSpace2Go[0] = PositionXY[0];
 8005140:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8005144:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TaskSpace2Go[1] = PositionXY[1];
 8005148:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800514c:	e9c7 2306 	strd	r2, r3, [r7, #24]
		TaskSpace2Go[2] = Z_Offset + ChessHight + Z_Board_Offset;
 8005150:	4b3b      	ldr	r3, [pc, #236]	; (8005240 <ChessNotMovePathWay+0x418>)
 8005152:	edd3 7a00 	vldr	s15, [r3]
 8005156:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800515a:	ed97 7b00 	vldr	d7, [r7]
 800515e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005162:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005166:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800516a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800516e:	ed87 7b08 	vstr	d7, [r7, #32]
							((TaskSpace2Go[0] - Pne[0]) * (TaskSpace2Go[0] - Pne[0]))
 8005172:	ed97 6b04 	vldr	d6, [r7, #16]
 8005176:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800517a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800517e:	ed97 5b04 	vldr	d5, [r7, #16]
 8005182:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005186:	ee35 7b47 	vsub.f64	d7, d5, d7
 800518a:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ ((TaskSpace2Go[1] - Pne[1]) * (TaskSpace2Go[1] - Pne[1])
 800518e:	ed97 5b06 	vldr	d5, [r7, #24]
 8005192:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005196:	ee35 5b47 	vsub.f64	d5, d5, d7
 800519a:	ed97 4b06 	vldr	d4, [r7, #24]
 800519e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80051a2:	ee34 7b47 	vsub.f64	d7, d4, d7
 80051a6:	ee25 5b07 	vmul.f64	d5, d5, d7
											+ ((TaskSpace2Go[2] - Pne[2]) * (TaskSpace2Go[2] - Pne[2])))))
 80051aa:	ed97 4b08 	vldr	d4, [r7, #32]
 80051ae:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80051b2:	ee34 4b47 	vsub.f64	d4, d4, d7
 80051b6:	ed97 3b08 	vldr	d3, [r7, #32]
 80051ba:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80051be:	ee33 7b47 	vsub.f64	d7, d3, d7
 80051c2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80051c6:	ee35 7b07 	vadd.f64	d7, d5, d7
		Time2MoveDynamic += (sqrt(
 80051ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051ce:	eeb0 0b47 	vmov.f64	d0, d7
 80051d2:	f012 f945 	bl	8017460 <sqrt>
 80051d6:	eeb0 7b40 	vmov.f64	d7, d0
							* 0.0068;
 80051da:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8005238 <ChessNotMovePathWay+0x410>
 80051de:	ee27 7b06 	vmul.f64	d7, d7, d6
		Time2MoveDynamic += (sqrt(
 80051e2:	ed97 6b22 	vldr	d6, [r7, #136]	; 0x88
 80051e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051ea:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
		if (IsJMove) {
 80051ee:	7bbb      	ldrb	r3, [r7, #14]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <ChessNotMovePathWay+0x3dc>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 80051f4:	f107 0310 	add.w	r3, r7, #16
 80051f8:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff fda3 	bl	8004d48 <JMoveTaskSpace>
}
 8005202:	e006      	b.n	8005212 <ChessNotMovePathWay+0x3ea>
			JMoveTaskSpace(TaskSpace2Go, 2);
 8005204:	f107 0310 	add.w	r3, r7, #16
 8005208:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fd9b 	bl	8004d48 <JMoveTaskSpace>
}
 8005212:	bf00      	nop
 8005214:	3798      	adds	r7, #152	; 0x98
 8005216:	46bd      	mov	sp, r7
 8005218:	bdb0      	pop	{r4, r5, r7, pc}
 800521a:	bf00      	nop
 800521c:	f3af 8000 	nop.w
 8005220:	00000000 	.word	0x00000000
 8005224:	407c2000 	.word	0x407c2000
 8005228:	00000000 	.word	0x00000000
 800522c:	4085e000 	.word	0x4085e000
 8005230:	a0000000 	.word	0xa0000000
 8005234:	3fb99999 	.word	0x3fb99999
 8005238:	19ce075f 	.word	0x19ce075f
 800523c:	3f7bda51 	.word	0x3f7bda51
 8005240:	20000bdc 	.word	0x20000bdc
 8005244:	00000000 	.word	0x00000000

08005248 <ChessMoveStateMachine>:

void ChessMoveStateMachine() {
 8005248:	b5b0      	push	{r4, r5, r7, lr}
 800524a:	b09a      	sub	sp, #104	; 0x68
 800524c:	af00      	add	r7, sp, #0
	static uint8_t ChangeState = 0;
	double Speed_Error = 0.05;
 800524e:	a3c3      	add	r3, pc, #780	; (adr r3, 800555c <ChessMoveStateMachine+0x314>)
 8005250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005254:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double SafePose[3] = {210, -270, 250};
 8005258:	4bb3      	ldr	r3, [pc, #716]	; (8005528 <ChessMoveStateMachine+0x2e0>)
 800525a:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800525e:	461d      	mov	r5, r3
 8005260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005262:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005264:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005268:	e884 0003 	stmia.w	r4, {r0, r1}
	double Time2MoveDynamic = 1.3;
 800526c:	a3aa      	add	r3, pc, #680	; (adr r3, 8005518 <ChessMoveStateMachine+0x2d0>)
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double q_Feed[4];
	double Pne[3];

	switch (ChessMoveStates) {
 8005276:	4bad      	ldr	r3, [pc, #692]	; (800552c <ChessMoveStateMachine+0x2e4>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b0a      	cmp	r3, #10
 800527c:	f200 826d 	bhi.w	800575a <ChessMoveStateMachine+0x512>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <ChessMoveStateMachine+0x40>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	080052b5 	.word	0x080052b5
 800528c:	080052e5 	.word	0x080052e5
 8005290:	08005367 	.word	0x08005367
 8005294:	080053c5 	.word	0x080053c5
 8005298:	080053d5 	.word	0x080053d5
 800529c:	0800542b 	.word	0x0800542b
 80052a0:	080054ad 	.word	0x080054ad
 80052a4:	08005565 	.word	0x08005565
 80052a8:	080055e7 	.word	0x080055e7
 80052ac:	080055fd 	.word	0x080055fd
 80052b0:	08005653 	.word	0x08005653
	case Chess_idle:
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80052b4:	2200      	movs	r2, #0
 80052b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052ba:	489d      	ldr	r0, [pc, #628]	; (8005530 <ChessMoveStateMachine+0x2e8>)
 80052bc:	f007 fdb4 	bl	800ce28 <HAL_GPIO_WritePin>
		if (Chess_Move_Start_Flag) {
 80052c0:	4b9c      	ldr	r3, [pc, #624]	; (8005534 <ChessMoveStateMachine+0x2ec>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f000 824a 	beq.w	800575e <ChessMoveStateMachine+0x516>
			ChessMoveStates = Move_2_Start_Top_Point;
 80052ca:	4b98      	ldr	r3, [pc, #608]	; (800552c <ChessMoveStateMachine+0x2e4>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 80052d0:	2201      	movs	r2, #1
 80052d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052d6:	4896      	ldr	r0, [pc, #600]	; (8005530 <ChessMoveStateMachine+0x2e8>)
 80052d8:	f007 fda6 	bl	800ce28 <HAL_GPIO_WritePin>
			ChangeState = 1;
 80052dc:	4b96      	ldr	r3, [pc, #600]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
			}
		break;
 80052e2:	e23c      	b.n	800575e <ChessMoveStateMachine+0x516>
	case Move_2_Start_Top_Point:
		if (ChangeState) {
 80052e4:	4b94      	ldr	r3, [pc, #592]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00e      	beq.n	800530a <ChessMoveStateMachine+0xc2>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 1 , 0);
 80052ec:	4b93      	ldr	r3, [pc, #588]	; (800553c <ChessMoveStateMachine+0x2f4>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	4a93      	ldr	r2, [pc, #588]	; (8005540 <ChessMoveStateMachine+0x2f8>)
 80052f2:	ed92 7b00 	vldr	d7, [r2]
 80052f6:	2200      	movs	r2, #0
 80052f8:	2101      	movs	r1, #1
 80052fa:	eeb0 0b47 	vmov.f64	d0, d7
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff fd92 	bl	8004e28 <ChessNotMovePathWay>
			ChangeState = 0;
 8005304:	4b8c      	ldr	r3, [pc, #560]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 8005306:	2200      	movs	r2, #0
 8005308:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 800530a:	4b8e      	ldr	r3, [pc, #568]	; (8005544 <ChessMoveStateMachine+0x2fc>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f040 8227 	bne.w	8005762 <ChessMoveStateMachine+0x51a>
			if(All_Joint_Speed_Avg() <= Speed_Error){
 8005314:	f000 fa5a 	bl	80057cc <All_Joint_Speed_Avg>
 8005318:	eeb0 6b40 	vmov.f64	d6, d0
 800531c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005320:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005328:	da00      	bge.n	800532c <ChessMoveStateMachine+0xe4>
				ChessMoveStates = Move_2_Start_Grip_Point;
				Servo_Drive(&Servo[1], 90.0f + Control[0].PositionFeedback - Chess_Board_Base_Encoder);
				ChangeState = 1;
			}
		}
		break;
 800532a:	e21a      	b.n	8005762 <ChessMoveStateMachine+0x51a>
				ChessMoveStates = Move_2_Start_Grip_Point;
 800532c:	4b7f      	ldr	r3, [pc, #508]	; (800552c <ChessMoveStateMachine+0x2e4>)
 800532e:	2202      	movs	r2, #2
 8005330:	701a      	strb	r2, [r3, #0]
				Servo_Drive(&Servo[1], 90.0f + Control[0].PositionFeedback - Chess_Board_Base_Encoder);
 8005332:	4b85      	ldr	r3, [pc, #532]	; (8005548 <ChessMoveStateMachine+0x300>)
 8005334:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005338:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8005520 <ChessMoveStateMachine+0x2d8>
 800533c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8005340:	4b82      	ldr	r3, [pc, #520]	; (800554c <ChessMoveStateMachine+0x304>)
 8005342:	ed93 7b00 	vldr	d7, [r3]
 8005346:	ee36 7b47 	vsub.f64	d7, d6, d7
 800534a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800534e:	edc7 7a01 	vstr	s15, [r7, #4]
 8005352:	793b      	ldrb	r3, [r7, #4]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	4619      	mov	r1, r3
 8005358:	487d      	ldr	r0, [pc, #500]	; (8005550 <ChessMoveStateMachine+0x308>)
 800535a:	f7fb ff23 	bl	80011a4 <Servo_Drive>
				ChangeState = 1;
 800535e:	4b76      	ldr	r3, [pc, #472]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 8005360:	2201      	movs	r2, #1
 8005362:	701a      	strb	r2, [r3, #0]
		break;
 8005364:	e1fd      	b.n	8005762 <ChessMoveStateMachine+0x51a>
	case Move_2_Start_Grip_Point:
		if (ChangeState) {
 8005366:	4b74      	ldr	r3, [pc, #464]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00e      	beq.n	800538c <ChessMoveStateMachine+0x144>
			ChessNotMovePathWay(ChessIndex[0], Z_2GripOffset, 0, 1);
 800536e:	4b73      	ldr	r3, [pc, #460]	; (800553c <ChessMoveStateMachine+0x2f4>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	4a78      	ldr	r2, [pc, #480]	; (8005554 <ChessMoveStateMachine+0x30c>)
 8005374:	ed92 7b00 	vldr	d7, [r2]
 8005378:	2201      	movs	r2, #1
 800537a:	2100      	movs	r1, #0
 800537c:	eeb0 0b47 	vmov.f64	d0, d7
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fd51 	bl	8004e28 <ChessNotMovePathWay>
			ChangeState = 0;
 8005386:	4b6c      	ldr	r3, [pc, #432]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 800538c:	4b6d      	ldr	r3, [pc, #436]	; (8005544 <ChessMoveStateMachine+0x2fc>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f040 81e8 	bne.w	8005766 <ChessMoveStateMachine+0x51e>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8005396:	f000 fa19 	bl	80057cc <All_Joint_Speed_Avg>
 800539a:	eeb0 6b40 	vmov.f64	d6, d0
 800539e:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80053a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80053a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053aa:	da00      	bge.n	80053ae <ChessMoveStateMachine+0x166>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
				Servo_Drive(&Servo[0], 110); //Ungrip
				ChangeState = 1;
			}
		}
		break;
 80053ac:	e1db      	b.n	8005766 <ChessMoveStateMachine+0x51e>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
 80053ae:	4b5f      	ldr	r3, [pc, #380]	; (800552c <ChessMoveStateMachine+0x2e4>)
 80053b0:	2203      	movs	r2, #3
 80053b2:	701a      	strb	r2, [r3, #0]
				Servo_Drive(&Servo[0], 110); //Ungrip
 80053b4:	216e      	movs	r1, #110	; 0x6e
 80053b6:	4868      	ldr	r0, [pc, #416]	; (8005558 <ChessMoveStateMachine+0x310>)
 80053b8:	f7fb fef4 	bl	80011a4 <Servo_Drive>
				ChangeState = 1;
 80053bc:	4b5e      	ldr	r3, [pc, #376]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
		break;
 80053c2:	e1d0      	b.n	8005766 <ChessMoveStateMachine+0x51e>
	case Move_2_Start_Point_and_Griping:
		// Grip Chess
		Servo_Drive(&Servo[0], 25); //Grip
 80053c4:	2119      	movs	r1, #25
 80053c6:	4864      	ldr	r0, [pc, #400]	; (8005558 <ChessMoveStateMachine+0x310>)
 80053c8:	f7fb feec 	bl	80011a4 <Servo_Drive>
		ChessMoveStates = Back_2_Start_Top_Point;
 80053cc:	4b57      	ldr	r3, [pc, #348]	; (800552c <ChessMoveStateMachine+0x2e4>)
 80053ce:	2204      	movs	r2, #4
 80053d0:	701a      	strb	r2, [r3, #0]
		break;
 80053d2:	e1d5      	b.n	8005780 <ChessMoveStateMachine+0x538>
	case Back_2_Start_Top_Point:
		if (ChangeState) {
 80053d4:	4b58      	ldr	r3, [pc, #352]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00e      	beq.n	80053fa <ChessMoveStateMachine+0x1b2>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 0, 1);
 80053dc:	4b57      	ldr	r3, [pc, #348]	; (800553c <ChessMoveStateMachine+0x2f4>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	4a57      	ldr	r2, [pc, #348]	; (8005540 <ChessMoveStateMachine+0x2f8>)
 80053e2:	ed92 7b00 	vldr	d7, [r2]
 80053e6:	2201      	movs	r2, #1
 80053e8:	2100      	movs	r1, #0
 80053ea:	eeb0 0b47 	vmov.f64	d0, d7
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7ff fd1a 	bl	8004e28 <ChessNotMovePathWay>
			ChangeState = 0;
 80053f4:	4b50      	ldr	r3, [pc, #320]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80053fa:	4b52      	ldr	r3, [pc, #328]	; (8005544 <ChessMoveStateMachine+0x2fc>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	f040 81b3 	bne.w	800576a <ChessMoveStateMachine+0x522>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8005404:	f000 f9e2 	bl	80057cc <All_Joint_Speed_Avg>
 8005408:	eeb0 6b40 	vmov.f64	d6, d0
 800540c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005410:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005418:	da00      	bge.n	800541c <ChessMoveStateMachine+0x1d4>
				ChessMoveStates = Move_2_End_Top_Point;
				ChangeState = 1;
			}
		}
		break;
 800541a:	e1a6      	b.n	800576a <ChessMoveStateMachine+0x522>
				ChessMoveStates = Move_2_End_Top_Point;
 800541c:	4b43      	ldr	r3, [pc, #268]	; (800552c <ChessMoveStateMachine+0x2e4>)
 800541e:	2205      	movs	r2, #5
 8005420:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8005422:	4b45      	ldr	r3, [pc, #276]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 8005424:	2201      	movs	r2, #1
 8005426:	701a      	strb	r2, [r3, #0]
		break;
 8005428:	e19f      	b.n	800576a <ChessMoveStateMachine+0x522>

		// Finish To Grip Chess

	case Move_2_End_Top_Point:
		if (ChangeState) {
 800542a:	4b43      	ldr	r3, [pc, #268]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00e      	beq.n	8005450 <ChessMoveStateMachine+0x208>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 1, 1);
 8005432:	4b42      	ldr	r3, [pc, #264]	; (800553c <ChessMoveStateMachine+0x2f4>)
 8005434:	785b      	ldrb	r3, [r3, #1]
 8005436:	4a42      	ldr	r2, [pc, #264]	; (8005540 <ChessMoveStateMachine+0x2f8>)
 8005438:	ed92 7b00 	vldr	d7, [r2]
 800543c:	2201      	movs	r2, #1
 800543e:	2101      	movs	r1, #1
 8005440:	eeb0 0b47 	vmov.f64	d0, d7
 8005444:	4618      	mov	r0, r3
 8005446:	f7ff fcef 	bl	8004e28 <ChessNotMovePathWay>
			ChangeState = 0;
 800544a:	4b3b      	ldr	r3, [pc, #236]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 800544c:	2200      	movs	r2, #0
 800544e:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8005450:	4b3c      	ldr	r3, [pc, #240]	; (8005544 <ChessMoveStateMachine+0x2fc>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f040 818a 	bne.w	800576e <ChessMoveStateMachine+0x526>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 800545a:	f000 f9b7 	bl	80057cc <All_Joint_Speed_Avg>
 800545e:	eeb0 6b40 	vmov.f64	d6, d0
 8005462:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005466:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546e:	da00      	bge.n	8005472 <ChessMoveStateMachine+0x22a>
								+ Chess_Board_Base_Encoder);
				ChessMoveStates = Move_2_End_Ungrip_Point;
				ChangeState = 1;
			}
		}
		break;
 8005470:	e17d      	b.n	800576e <ChessMoveStateMachine+0x526>
						90.0f - Control[0].PositionFeedback
 8005472:	4b35      	ldr	r3, [pc, #212]	; (8005548 <ChessMoveStateMachine+0x300>)
 8005474:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005478:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8005520 <ChessMoveStateMachine+0x2d8>
 800547c:	ee36 6b47 	vsub.f64	d6, d6, d7
								+ Chess_Board_Base_Encoder);
 8005480:	4b32      	ldr	r3, [pc, #200]	; (800554c <ChessMoveStateMachine+0x304>)
 8005482:	ed93 7b00 	vldr	d7, [r3]
 8005486:	ee36 7b07 	vadd.f64	d7, d6, d7
				Servo_Drive(&Servo[1],
 800548a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800548e:	edc7 7a01 	vstr	s15, [r7, #4]
 8005492:	793b      	ldrb	r3, [r7, #4]
 8005494:	b2db      	uxtb	r3, r3
 8005496:	4619      	mov	r1, r3
 8005498:	482d      	ldr	r0, [pc, #180]	; (8005550 <ChessMoveStateMachine+0x308>)
 800549a:	f7fb fe83 	bl	80011a4 <Servo_Drive>
				ChessMoveStates = Move_2_End_Ungrip_Point;
 800549e:	4b23      	ldr	r3, [pc, #140]	; (800552c <ChessMoveStateMachine+0x2e4>)
 80054a0:	2206      	movs	r2, #6
 80054a2:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 80054a4:	4b24      	ldr	r3, [pc, #144]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
		break;
 80054aa:	e160      	b.n	800576e <ChessMoveStateMachine+0x526>
	case Move_2_End_Ungrip_Point:
		if (ChangeState) {
 80054ac:	4b22      	ldr	r3, [pc, #136]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00e      	beq.n	80054d2 <ChessMoveStateMachine+0x28a>
			ChessNotMovePathWay(ChessIndex[1], Z_2GripOffset, 0, 1);
 80054b4:	4b21      	ldr	r3, [pc, #132]	; (800553c <ChessMoveStateMachine+0x2f4>)
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	4a26      	ldr	r2, [pc, #152]	; (8005554 <ChessMoveStateMachine+0x30c>)
 80054ba:	ed92 7b00 	vldr	d7, [r2]
 80054be:	2201      	movs	r2, #1
 80054c0:	2100      	movs	r1, #0
 80054c2:	eeb0 0b47 	vmov.f64	d0, d7
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff fcae 	bl	8004e28 <ChessNotMovePathWay>
			ChangeState = 0;
 80054cc:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80054d2:	4b1c      	ldr	r3, [pc, #112]	; (8005544 <ChessMoveStateMachine+0x2fc>)
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	f040 814b 	bne.w	8005772 <ChessMoveStateMachine+0x52a>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 80054dc:	f000 f976 	bl	80057cc <All_Joint_Speed_Avg>
 80054e0:	eeb0 6b40 	vmov.f64	d6, d0
 80054e4:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80054e8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80054ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f0:	da00      	bge.n	80054f4 <ChessMoveStateMachine+0x2ac>
					ChessMoveStates = Move_2_End_Point_and_Ungriping;
					ChangeState = 1;
				}
			}
		}
		break;
 80054f2:	e13e      	b.n	8005772 <ChessMoveStateMachine+0x52a>
				if (ChessIndex[1] == 64) {
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <ChessMoveStateMachine+0x2f4>)
 80054f6:	785b      	ldrb	r3, [r3, #1]
 80054f8:	2b40      	cmp	r3, #64	; 0x40
 80054fa:	d106      	bne.n	800550a <ChessMoveStateMachine+0x2c2>
					ChessMoveStates = Move_2_End_Remove_Point_and_Ungriping;
 80054fc:	4b0b      	ldr	r3, [pc, #44]	; (800552c <ChessMoveStateMachine+0x2e4>)
 80054fe:	2207      	movs	r2, #7
 8005500:	701a      	strb	r2, [r3, #0]
					ChangeState = 1;
 8005502:	4b0d      	ldr	r3, [pc, #52]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 8005504:	2201      	movs	r2, #1
 8005506:	701a      	strb	r2, [r3, #0]
		break;
 8005508:	e133      	b.n	8005772 <ChessMoveStateMachine+0x52a>
					ChessMoveStates = Move_2_End_Point_and_Ungriping;
 800550a:	4b08      	ldr	r3, [pc, #32]	; (800552c <ChessMoveStateMachine+0x2e4>)
 800550c:	2208      	movs	r2, #8
 800550e:	701a      	strb	r2, [r3, #0]
					ChangeState = 1;
 8005510:	4b09      	ldr	r3, [pc, #36]	; (8005538 <ChessMoveStateMachine+0x2f0>)
 8005512:	2201      	movs	r2, #1
 8005514:	701a      	strb	r2, [r3, #0]
		break;
 8005516:	e12c      	b.n	8005772 <ChessMoveStateMachine+0x52a>
 8005518:	cccccccd 	.word	0xcccccccd
 800551c:	3ff4cccc 	.word	0x3ff4cccc
 8005520:	00000000 	.word	0x00000000
 8005524:	40568000 	.word	0x40568000
 8005528:	080183e8 	.word	0x080183e8
 800552c:	20000be1 	.word	0x20000be1
 8005530:	58020c00 	.word	0x58020c00
 8005534:	20000be0 	.word	0x20000be0
 8005538:	20000c38 	.word	0x20000c38
 800553c:	20000bd8 	.word	0x20000bd8
 8005540:	20000000 	.word	0x20000000
 8005544:	20000bc9 	.word	0x20000bc9
 8005548:	200004a8 	.word	0x200004a8
 800554c:	20000b58 	.word	0x20000b58
 8005550:	20000860 	.word	0x20000860
 8005554:	20000008 	.word	0x20000008
 8005558:	20000858 	.word	0x20000858
 800555c:	9999999a 	.word	0x9999999a
 8005560:	3fa99999 	.word	0x3fa99999
	case Move_2_End_Remove_Point_and_Ungriping:
		if (ChangeState) {
 8005564:	4b8e      	ldr	r3, [pc, #568]	; (80057a0 <ChessMoveStateMachine+0x558>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00e      	beq.n	800558a <ChessMoveStateMachine+0x342>
			ChessNotMovePathWay(ChessIndex[1], Z_2GripOffset, 0, 2);
 800556c:	4b8d      	ldr	r3, [pc, #564]	; (80057a4 <ChessMoveStateMachine+0x55c>)
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	4a8d      	ldr	r2, [pc, #564]	; (80057a8 <ChessMoveStateMachine+0x560>)
 8005572:	ed92 7b00 	vldr	d7, [r2]
 8005576:	2202      	movs	r2, #2
 8005578:	2100      	movs	r1, #0
 800557a:	eeb0 0b47 	vmov.f64	d0, d7
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff fc52 	bl	8004e28 <ChessNotMovePathWay>
			ChangeState = 0;
 8005584:	4b86      	ldr	r3, [pc, #536]	; (80057a0 <ChessMoveStateMachine+0x558>)
 8005586:	2200      	movs	r2, #0
 8005588:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 800558a:	4b88      	ldr	r3, [pc, #544]	; (80057ac <ChessMoveStateMachine+0x564>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	f040 80f1 	bne.w	8005776 <ChessMoveStateMachine+0x52e>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8005594:	f000 f91a 	bl	80057cc <All_Joint_Speed_Avg>
 8005598:	eeb0 6b40 	vmov.f64	d6, d0
 800559c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80055a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80055a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a8:	da00      	bge.n	80055ac <ChessMoveStateMachine+0x364>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
				Servo_Drive(&Servo[1], 90.0f + Control[0].PositionFeedback - Chess_Board_Base_Encoder);
				ChangeState = 1;
			}
		}
		break;
 80055aa:	e0e4      	b.n	8005776 <ChessMoveStateMachine+0x52e>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
 80055ac:	4b80      	ldr	r3, [pc, #512]	; (80057b0 <ChessMoveStateMachine+0x568>)
 80055ae:	2208      	movs	r2, #8
 80055b0:	701a      	strb	r2, [r3, #0]
				Servo_Drive(&Servo[1], 90.0f + Control[0].PositionFeedback - Chess_Board_Base_Encoder);
 80055b2:	4b80      	ldr	r3, [pc, #512]	; (80057b4 <ChessMoveStateMachine+0x56c>)
 80055b4:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80055b8:	ed9f 6b73 	vldr	d6, [pc, #460]	; 8005788 <ChessMoveStateMachine+0x540>
 80055bc:	ee37 6b06 	vadd.f64	d6, d7, d6
 80055c0:	4b7d      	ldr	r3, [pc, #500]	; (80057b8 <ChessMoveStateMachine+0x570>)
 80055c2:	ed93 7b00 	vldr	d7, [r3]
 80055c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80055ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80055ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80055d2:	793b      	ldrb	r3, [r7, #4]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	4619      	mov	r1, r3
 80055d8:	4878      	ldr	r0, [pc, #480]	; (80057bc <ChessMoveStateMachine+0x574>)
 80055da:	f7fb fde3 	bl	80011a4 <Servo_Drive>
				ChangeState = 1;
 80055de:	4b70      	ldr	r3, [pc, #448]	; (80057a0 <ChessMoveStateMachine+0x558>)
 80055e0:	2201      	movs	r2, #1
 80055e2:	701a      	strb	r2, [r3, #0]
		break;
 80055e4:	e0c7      	b.n	8005776 <ChessMoveStateMachine+0x52e>
	case Move_2_End_Point_and_Ungriping:
		Servo_Drive(&Servo[0], 110); //Ungrip
 80055e6:	216e      	movs	r1, #110	; 0x6e
 80055e8:	4875      	ldr	r0, [pc, #468]	; (80057c0 <ChessMoveStateMachine+0x578>)
 80055ea:	f7fb fddb 	bl	80011a4 <Servo_Drive>
		ChessMoveStates = Back_2_End_Top_Point;
 80055ee:	4b70      	ldr	r3, [pc, #448]	; (80057b0 <ChessMoveStateMachine+0x568>)
 80055f0:	2209      	movs	r2, #9
 80055f2:	701a      	strb	r2, [r3, #0]
		ChangeState = 1;
 80055f4:	4b6a      	ldr	r3, [pc, #424]	; (80057a0 <ChessMoveStateMachine+0x558>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	701a      	strb	r2, [r3, #0]
		break;
 80055fa:	e0c1      	b.n	8005780 <ChessMoveStateMachine+0x538>
	case Back_2_End_Top_Point:
		if (ChangeState) {
 80055fc:	4b68      	ldr	r3, [pc, #416]	; (80057a0 <ChessMoveStateMachine+0x558>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00e      	beq.n	8005622 <ChessMoveStateMachine+0x3da>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 0, 1);
 8005604:	4b67      	ldr	r3, [pc, #412]	; (80057a4 <ChessMoveStateMachine+0x55c>)
 8005606:	785b      	ldrb	r3, [r3, #1]
 8005608:	4a6e      	ldr	r2, [pc, #440]	; (80057c4 <ChessMoveStateMachine+0x57c>)
 800560a:	ed92 7b00 	vldr	d7, [r2]
 800560e:	2201      	movs	r2, #1
 8005610:	2100      	movs	r1, #0
 8005612:	eeb0 0b47 	vmov.f64	d0, d7
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fc06 	bl	8004e28 <ChessNotMovePathWay>
			ChangeState = 0;
 800561c:	4b60      	ldr	r3, [pc, #384]	; (80057a0 <ChessMoveStateMachine+0x558>)
 800561e:	2200      	movs	r2, #0
 8005620:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8005622:	4b62      	ldr	r3, [pc, #392]	; (80057ac <ChessMoveStateMachine+0x564>)
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	f040 80a7 	bne.w	800577a <ChessMoveStateMachine+0x532>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 800562c:	f000 f8ce 	bl	80057cc <All_Joint_Speed_Avg>
 8005630:	eeb0 6b40 	vmov.f64	d6, d0
 8005634:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005638:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800563c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005640:	da00      	bge.n	8005644 <ChessMoveStateMachine+0x3fc>
				ChessMoveStates = ChessMove_Finish;
				ChangeState = 1;
			}
		}
		break;
 8005642:	e09a      	b.n	800577a <ChessMoveStateMachine+0x532>
				ChessMoveStates = ChessMove_Finish;
 8005644:	4b5a      	ldr	r3, [pc, #360]	; (80057b0 <ChessMoveStateMachine+0x568>)
 8005646:	220a      	movs	r2, #10
 8005648:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 800564a:	4b55      	ldr	r3, [pc, #340]	; (80057a0 <ChessMoveStateMachine+0x558>)
 800564c:	2201      	movs	r2, #1
 800564e:	701a      	strb	r2, [r3, #0]
		break;
 8005650:	e093      	b.n	800577a <ChessMoveStateMachine+0x532>
	case ChessMove_Finish:
		if (ChangeState) {
 8005652:	4b53      	ldr	r3, [pc, #332]	; (80057a0 <ChessMoveStateMachine+0x558>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d065      	beq.n	8005726 <ChessMoveStateMachine+0x4de>
			q_Feed[0] = Control[0].PositionFeedback;
 800565a:	4b56      	ldr	r3, [pc, #344]	; (80057b4 <ChessMoveStateMachine+0x56c>)
 800565c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005660:	e9c7 2308 	strd	r2, r3, [r7, #32]
			q_Feed[1] = Control[1].PositionFeedback;
 8005664:	4b53      	ldr	r3, [pc, #332]	; (80057b4 <ChessMoveStateMachine+0x56c>)
 8005666:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 800566a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			q_Feed[2] = Control[2].PositionFeedback;
 800566e:	4b51      	ldr	r3, [pc, #324]	; (80057b4 <ChessMoveStateMachine+0x56c>)
 8005670:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8005674:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			q_Feed[3] = Control[3].PositionFeedback;
 8005678:	4b4e      	ldr	r3, [pc, #312]	; (80057b4 <ChessMoveStateMachine+0x56c>)
 800567a:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 800567e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			FPK(q_Feed, 269.0f, Pne);
 8005682:	f107 0208 	add.w	r2, r7, #8
 8005686:	f107 0320 	add.w	r3, r7, #32
 800568a:	4611      	mov	r1, r2
 800568c:	ed9f 0b40 	vldr	d0, [pc, #256]	; 8005790 <ChessMoveStateMachine+0x548>
 8005690:	4618      	mov	r0, r3
 8005692:	f7fd f8c1 	bl	8002818 <FPK>
			Time2MoveDynamic +=
					(sqrt(
							((SafePose[0] - Pne[0]) * (SafePose[0] - Pne[0]))
 8005696:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 800569a:	ed97 7b02 	vldr	d7, [r7, #8]
 800569e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80056a2:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
 80056a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80056aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80056ae:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ ((SafePose[1] - Pne[1])
 80056b2:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 80056b6:	ed97 7b04 	vldr	d7, [r7, #16]
 80056ba:	ee35 5b47 	vsub.f64	d5, d5, d7
											* (SafePose[1] - Pne[1]))
 80056be:	ed97 4b12 	vldr	d4, [r7, #72]	; 0x48
 80056c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80056c6:	ee34 7b47 	vsub.f64	d7, d4, d7
 80056ca:	ee25 7b07 	vmul.f64	d7, d5, d7
									+ ((SafePose[1] - Pne[1])
 80056ce:	ee36 6b07 	vadd.f64	d6, d6, d7
									+ ((SafePose[2] - Pne[2])
 80056d2:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 80056d6:	ed97 7b06 	vldr	d7, [r7, #24]
 80056da:	ee35 5b47 	vsub.f64	d5, d5, d7
											* (SafePose[2] - Pne[2]))))
 80056de:	ed97 4b14 	vldr	d4, [r7, #80]	; 0x50
 80056e2:	ed97 7b06 	vldr	d7, [r7, #24]
 80056e6:	ee34 7b47 	vsub.f64	d7, d4, d7
 80056ea:	ee25 7b07 	vmul.f64	d7, d5, d7
					(sqrt(
 80056ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056f2:	eeb0 0b47 	vmov.f64	d0, d7
 80056f6:	f011 feb3 	bl	8017460 <sqrt>
 80056fa:	eeb0 7b40 	vmov.f64	d7, d0
							* 0.0075;
 80056fe:	ed9f 6b26 	vldr	d6, [pc, #152]	; 8005798 <ChessMoveStateMachine+0x550>
 8005702:	ee27 7b06 	vmul.f64	d7, d7, d6
			Time2MoveDynamic +=
 8005706:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800570a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800570e:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			JMoveTaskSpace(SafePose, Time2MoveDynamic);
 8005712:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005716:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 800571a:	4618      	mov	r0, r3
 800571c:	f7ff fb14 	bl	8004d48 <JMoveTaskSpace>
			ChangeState = 0;
 8005720:	4b1f      	ldr	r3, [pc, #124]	; (80057a0 <ChessMoveStateMachine+0x558>)
 8005722:	2200      	movs	r2, #0
 8005724:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8005726:	4b21      	ldr	r3, [pc, #132]	; (80057ac <ChessMoveStateMachine+0x564>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d127      	bne.n	800577e <ChessMoveStateMachine+0x536>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 800572e:	f000 f84d 	bl	80057cc <All_Joint_Speed_Avg>
 8005732:	eeb0 6b40 	vmov.f64	d6, d0
 8005736:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800573a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800573e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005742:	da00      	bge.n	8005746 <ChessMoveStateMachine+0x4fe>
				ChessMoveStates = Chess_idle;
				Chess_Move_Start_Flag = 0;
				ChangeState = 1;
			}
		}
		break;
 8005744:	e01b      	b.n	800577e <ChessMoveStateMachine+0x536>
				ChessMoveStates = Chess_idle;
 8005746:	4b1a      	ldr	r3, [pc, #104]	; (80057b0 <ChessMoveStateMachine+0x568>)
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
				Chess_Move_Start_Flag = 0;
 800574c:	4b1e      	ldr	r3, [pc, #120]	; (80057c8 <ChessMoveStateMachine+0x580>)
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <ChessMoveStateMachine+0x558>)
 8005754:	2201      	movs	r2, #1
 8005756:	701a      	strb	r2, [r3, #0]
		break;
 8005758:	e011      	b.n	800577e <ChessMoveStateMachine+0x536>
	default:
		break;
 800575a:	bf00      	nop
 800575c:	e010      	b.n	8005780 <ChessMoveStateMachine+0x538>
		break;
 800575e:	bf00      	nop
 8005760:	e00e      	b.n	8005780 <ChessMoveStateMachine+0x538>
		break;
 8005762:	bf00      	nop
 8005764:	e00c      	b.n	8005780 <ChessMoveStateMachine+0x538>
		break;
 8005766:	bf00      	nop
 8005768:	e00a      	b.n	8005780 <ChessMoveStateMachine+0x538>
		break;
 800576a:	bf00      	nop
 800576c:	e008      	b.n	8005780 <ChessMoveStateMachine+0x538>
		break;
 800576e:	bf00      	nop
 8005770:	e006      	b.n	8005780 <ChessMoveStateMachine+0x538>
		break;
 8005772:	bf00      	nop
 8005774:	e004      	b.n	8005780 <ChessMoveStateMachine+0x538>
		break;
 8005776:	bf00      	nop
 8005778:	e002      	b.n	8005780 <ChessMoveStateMachine+0x538>
		break;
 800577a:	bf00      	nop
 800577c:	e000      	b.n	8005780 <ChessMoveStateMachine+0x538>
		break;
 800577e:	bf00      	nop
	}
}
 8005780:	bf00      	nop
 8005782:	3768      	adds	r7, #104	; 0x68
 8005784:	46bd      	mov	sp, r7
 8005786:	bdb0      	pop	{r4, r5, r7, pc}
 8005788:	00000000 	.word	0x00000000
 800578c:	40568000 	.word	0x40568000
 8005790:	00000000 	.word	0x00000000
 8005794:	4070d000 	.word	0x4070d000
 8005798:	eb851eb8 	.word	0xeb851eb8
 800579c:	3f7eb851 	.word	0x3f7eb851
 80057a0:	20000c38 	.word	0x20000c38
 80057a4:	20000bd8 	.word	0x20000bd8
 80057a8:	20000008 	.word	0x20000008
 80057ac:	20000bc9 	.word	0x20000bc9
 80057b0:	20000be1 	.word	0x20000be1
 80057b4:	200004a8 	.word	0x200004a8
 80057b8:	20000b58 	.word	0x20000b58
 80057bc:	20000860 	.word	0x20000860
 80057c0:	20000858 	.word	0x20000858
 80057c4:	20000000 	.word	0x20000000
 80057c8:	20000be0 	.word	0x20000be0

080057cc <All_Joint_Speed_Avg>:

double All_Joint_Speed_Avg(){
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
	double Buf;
	for (int i=4;i<4;i++){
 80057d2:	2304      	movs	r3, #4
 80057d4:	607b      	str	r3, [r7, #4]
 80057d6:	e013      	b.n	8005800 <All_Joint_Speed_Avg+0x34>
		Buf += fabs(Control[i].VelocityFeedback);
 80057d8:	4a12      	ldr	r2, [pc, #72]	; (8005824 <All_Joint_Speed_Avg+0x58>)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	21d8      	movs	r1, #216	; 0xd8
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	4413      	add	r3, r2
 80057e4:	33b8      	adds	r3, #184	; 0xb8
 80057e6:	ed93 7b00 	vldr	d7, [r3]
 80057ea:	eeb0 7bc7 	vabs.f64	d7, d7
 80057ee:	ed97 6b02 	vldr	d6, [r7, #8]
 80057f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057f6:	ed87 7b02 	vstr	d7, [r7, #8]
	for (int i=4;i<4;i++){
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3301      	adds	r3, #1
 80057fe:	607b      	str	r3, [r7, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b03      	cmp	r3, #3
 8005804:	dde8      	ble.n	80057d8 <All_Joint_Speed_Avg+0xc>
	}
	return Buf/4.0f;
 8005806:	ed97 7b02 	vldr	d7, [r7, #8]
 800580a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800580e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005812:	eeb0 7b45 	vmov.f64	d7, d5
}
 8005816:	eeb0 0b47 	vmov.f64	d0, d7
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr
 8005824:	200004a8 	.word	0x200004a8

08005828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800582c:	b672      	cpsid	i
}
 800582e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8005830:	2200      	movs	r2, #0
 8005832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005836:	4802      	ldr	r0, [pc, #8]	; (8005840 <Error_Handler+0x18>)
 8005838:	f007 faf6 	bl	800ce28 <HAL_GPIO_WritePin>
  while (1)
 800583c:	e7fe      	b.n	800583c <Error_Handler+0x14>
 800583e:	bf00      	nop
 8005840:	58020800 	.word	0x58020800

08005844 <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005848:	4b28      	ldr	r3, [pc, #160]	; (80058ec <MX_SPI3_Init+0xa8>)
 800584a:	4a29      	ldr	r2, [pc, #164]	; (80058f0 <MX_SPI3_Init+0xac>)
 800584c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800584e:	4b27      	ldr	r3, [pc, #156]	; (80058ec <MX_SPI3_Init+0xa8>)
 8005850:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005854:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005856:	4b25      	ldr	r3, [pc, #148]	; (80058ec <MX_SPI3_Init+0xa8>)
 8005858:	2200      	movs	r2, #0
 800585a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800585c:	4b23      	ldr	r3, [pc, #140]	; (80058ec <MX_SPI3_Init+0xa8>)
 800585e:	2207      	movs	r2, #7
 8005860:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005862:	4b22      	ldr	r3, [pc, #136]	; (80058ec <MX_SPI3_Init+0xa8>)
 8005864:	2200      	movs	r2, #0
 8005866:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <MX_SPI3_Init+0xa8>)
 800586a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800586e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005870:	4b1e      	ldr	r3, [pc, #120]	; (80058ec <MX_SPI3_Init+0xa8>)
 8005872:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005876:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005878:	4b1c      	ldr	r3, [pc, #112]	; (80058ec <MX_SPI3_Init+0xa8>)
 800587a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800587e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <MX_SPI3_Init+0xa8>)
 8005882:	2200      	movs	r2, #0
 8005884:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005886:	4b19      	ldr	r3, [pc, #100]	; (80058ec <MX_SPI3_Init+0xa8>)
 8005888:	2200      	movs	r2, #0
 800588a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800588c:	4b17      	ldr	r3, [pc, #92]	; (80058ec <MX_SPI3_Init+0xa8>)
 800588e:	2200      	movs	r2, #0
 8005890:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8005892:	4b16      	ldr	r3, [pc, #88]	; (80058ec <MX_SPI3_Init+0xa8>)
 8005894:	221d      	movs	r2, #29
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005898:	4b14      	ldr	r3, [pc, #80]	; (80058ec <MX_SPI3_Init+0xa8>)
 800589a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800589e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80058a0:	4b12      	ldr	r3, [pc, #72]	; (80058ec <MX_SPI3_Init+0xa8>)
 80058a2:	2200      	movs	r2, #0
 80058a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80058a6:	4b11      	ldr	r3, [pc, #68]	; (80058ec <MX_SPI3_Init+0xa8>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80058ac:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <MX_SPI3_Init+0xa8>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80058b2:	4b0e      	ldr	r3, [pc, #56]	; (80058ec <MX_SPI3_Init+0xa8>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80058b8:	4b0c      	ldr	r3, [pc, #48]	; (80058ec <MX_SPI3_Init+0xa8>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80058be:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <MX_SPI3_Init+0xa8>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80058c4:	4b09      	ldr	r3, [pc, #36]	; (80058ec <MX_SPI3_Init+0xa8>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80058ca:	4b08      	ldr	r3, [pc, #32]	; (80058ec <MX_SPI3_Init+0xa8>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <MX_SPI3_Init+0xa8>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80058d6:	4805      	ldr	r0, [pc, #20]	; (80058ec <MX_SPI3_Init+0xa8>)
 80058d8:	f00b feb4 	bl	8011644 <HAL_SPI_Init>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d001      	beq.n	80058e6 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80058e2:	f7ff ffa1 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80058e6:	bf00      	nop
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000c3c 	.word	0x20000c3c
 80058f0:	40003c00 	.word	0x40003c00

080058f4 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80058f8:	4b27      	ldr	r3, [pc, #156]	; (8005998 <MX_SPI4_Init+0xa4>)
 80058fa:	4a28      	ldr	r2, [pc, #160]	; (800599c <MX_SPI4_Init+0xa8>)
 80058fc:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80058fe:	4b26      	ldr	r3, [pc, #152]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005900:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005904:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8005906:	4b24      	ldr	r3, [pc, #144]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005908:	2200      	movs	r2, #0
 800590a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 800590c:	4b22      	ldr	r3, [pc, #136]	; (8005998 <MX_SPI4_Init+0xa4>)
 800590e:	220f      	movs	r2, #15
 8005910:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005912:	4b21      	ldr	r3, [pc, #132]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005914:	2200      	movs	r2, #0
 8005916:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005918:	4b1f      	ldr	r3, [pc, #124]	; (8005998 <MX_SPI4_Init+0xa4>)
 800591a:	2200      	movs	r2, #0
 800591c:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800591e:	4b1e      	ldr	r3, [pc, #120]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005920:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005924:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005926:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005928:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800592c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800592e:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005930:	2200      	movs	r2, #0
 8005932:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8005934:	4b18      	ldr	r3, [pc, #96]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005936:	2200      	movs	r2, #0
 8005938:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800593a:	4b17      	ldr	r3, [pc, #92]	; (8005998 <MX_SPI4_Init+0xa4>)
 800593c:	2200      	movs	r2, #0
 800593e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8005940:	4b15      	ldr	r3, [pc, #84]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005942:	2200      	movs	r2, #0
 8005944:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005948:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800594c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800594e:	4b12      	ldr	r3, [pc, #72]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005950:	2200      	movs	r2, #0
 8005952:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8005954:	4b10      	ldr	r3, [pc, #64]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005956:	2200      	movs	r2, #0
 8005958:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800595a:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <MX_SPI4_Init+0xa4>)
 800595c:	2200      	movs	r2, #0
 800595e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005960:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005962:	2200      	movs	r2, #0
 8005964:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8005966:	4b0c      	ldr	r3, [pc, #48]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005968:	2200      	movs	r2, #0
 800596a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800596c:	4b0a      	ldr	r3, [pc, #40]	; (8005998 <MX_SPI4_Init+0xa4>)
 800596e:	2200      	movs	r2, #0
 8005970:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8005972:	4b09      	ldr	r3, [pc, #36]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005974:	2200      	movs	r2, #0
 8005976:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8005978:	4b07      	ldr	r3, [pc, #28]	; (8005998 <MX_SPI4_Init+0xa4>)
 800597a:	2200      	movs	r2, #0
 800597c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800597e:	4b06      	ldr	r3, [pc, #24]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005980:	2200      	movs	r2, #0
 8005982:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8005984:	4804      	ldr	r0, [pc, #16]	; (8005998 <MX_SPI4_Init+0xa4>)
 8005986:	f00b fe5d 	bl	8011644 <HAL_SPI_Init>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8005990:	f7ff ff4a 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8005994:	bf00      	nop
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20000cc4 	.word	0x20000cc4
 800599c:	40013400 	.word	0x40013400

080059a0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b0b8      	sub	sp, #224	; 0xe0
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	605a      	str	r2, [r3, #4]
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	60da      	str	r2, [r3, #12]
 80059b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80059b8:	f107 0318 	add.w	r3, r7, #24
 80059bc:	22b4      	movs	r2, #180	; 0xb4
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f011 fca9 	bl	8017318 <memset>
  if(spiHandle->Instance==SPI3)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a4b      	ldr	r2, [pc, #300]	; (8005af8 <HAL_SPI_MspInit+0x158>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d156      	bne.n	8005a7e <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80059d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 80059d6:	2319      	movs	r3, #25
 80059d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 80059da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059de:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80059e0:	2302      	movs	r3, #2
 80059e2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80059e4:	2302      	movs	r3, #2
 80059e6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80059e8:	2302      	movs	r3, #2
 80059ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80059f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059f4:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80059fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80059fe:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a00:	f107 0318 	add.w	r3, r7, #24
 8005a04:	4618      	mov	r0, r3
 8005a06:	f009 fd89 	bl	800f51c <HAL_RCCEx_PeriphCLKConfig>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d001      	beq.n	8005a14 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8005a10:	f7ff ff0a 	bl	8005828 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005a14:	4b39      	ldr	r3, [pc, #228]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005a16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a1a:	4a38      	ldr	r2, [pc, #224]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a20:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a24:	4b35      	ldr	r3, [pc, #212]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a2e:	617b      	str	r3, [r7, #20]
 8005a30:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a32:	4b32      	ldr	r3, [pc, #200]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a38:	4a30      	ldr	r2, [pc, #192]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005a3a:	f043 0304 	orr.w	r3, r3, #4
 8005a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a42:	4b2e      	ldr	r3, [pc, #184]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	613b      	str	r3, [r7, #16]
 8005a4e:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005a50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005a54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005a6a:	2306      	movs	r3, #6
 8005a6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005a74:	4619      	mov	r1, r3
 8005a76:	4822      	ldr	r0, [pc, #136]	; (8005b00 <HAL_SPI_MspInit+0x160>)
 8005a78:	f007 f82e 	bl	800cad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8005a7c:	e038      	b.n	8005af0 <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a20      	ldr	r2, [pc, #128]	; (8005b04 <HAL_SPI_MspInit+0x164>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d133      	bne.n	8005af0 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005a88:	4b1c      	ldr	r3, [pc, #112]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005a8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a8e:	4a1b      	ldr	r2, [pc, #108]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005a90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a94:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005a98:	4b18      	ldr	r3, [pc, #96]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005a9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005aa6:	4b15      	ldr	r3, [pc, #84]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005aac:	4a13      	ldr	r2, [pc, #76]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005aae:	f043 0310 	orr.w	r3, r3, #16
 8005ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ab6:	4b11      	ldr	r3, [pc, #68]	; (8005afc <HAL_SPI_MspInit+0x15c>)
 8005ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	60bb      	str	r3, [r7, #8]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8005ac4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8005ac8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005acc:	2302      	movs	r3, #2
 8005ace:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005ade:	2305      	movs	r3, #5
 8005ae0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005ae4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4807      	ldr	r0, [pc, #28]	; (8005b08 <HAL_SPI_MspInit+0x168>)
 8005aec:	f006 fff4 	bl	800cad8 <HAL_GPIO_Init>
}
 8005af0:	bf00      	nop
 8005af2:	37e0      	adds	r7, #224	; 0xe0
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40003c00 	.word	0x40003c00
 8005afc:	58024400 	.word	0x58024400
 8005b00:	58020800 	.word	0x58020800
 8005b04:	40013400 	.word	0x40013400
 8005b08:	58021000 	.word	0x58021000

08005b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b12:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <HAL_MspInit+0x30>)
 8005b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b18:	4a08      	ldr	r2, [pc, #32]	; (8005b3c <HAL_MspInit+0x30>)
 8005b1a:	f043 0302 	orr.w	r3, r3, #2
 8005b1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b22:	4b06      	ldr	r3, [pc, #24]	; (8005b3c <HAL_MspInit+0x30>)
 8005b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	607b      	str	r3, [r7, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	58024400 	.word	0x58024400

08005b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b44:	e7fe      	b.n	8005b44 <NMI_Handler+0x4>

08005b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b46:	b480      	push	{r7}
 8005b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b4a:	e7fe      	b.n	8005b4a <HardFault_Handler+0x4>

08005b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b50:	e7fe      	b.n	8005b50 <MemManage_Handler+0x4>

08005b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b52:	b480      	push	{r7}
 8005b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b56:	e7fe      	b.n	8005b56 <BusFault_Handler+0x4>

08005b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b5c:	e7fe      	b.n	8005b5c <UsageFault_Handler+0x4>

08005b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b70:	bf00      	nop
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b7a:	b480      	push	{r7}
 8005b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b7e:	bf00      	nop
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b8c:	f001 fcbc 	bl	8007508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b90:	bf00      	nop
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8005b98:	4802      	ldr	r0, [pc, #8]	; (8005ba4 <DMA1_Stream0_IRQHandler+0x10>)
 8005b9a:	f005 fc7d 	bl	800b498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20001174 	.word	0x20001174

08005ba8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8005bac:	4802      	ldr	r0, [pc, #8]	; (8005bb8 <DMA1_Stream1_IRQHandler+0x10>)
 8005bae:	f005 fc73 	bl	800b498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005bb2:	bf00      	nop
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20001414 	.word	0x20001414

08005bbc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005bc0:	4802      	ldr	r0, [pc, #8]	; (8005bcc <DMA1_Stream2_IRQHandler+0x10>)
 8005bc2:	f005 fc69 	bl	800b498 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005bc6:	bf00      	nop
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	2000139c 	.word	0x2000139c

08005bd0 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005bd4:	4802      	ldr	r0, [pc, #8]	; (8005be0 <I2C2_ER_IRQHandler+0x10>)
 8005bd6:	f007 fbd5 	bl	800d384 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8005bda:	bf00      	nop
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	2000026c 	.word	0x2000026c

08005be4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005be8:	4802      	ldr	r0, [pc, #8]	; (8005bf4 <USART3_IRQHandler+0x10>)
 8005bea:	f00e fe99 	bl	8014920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005bee:	bf00      	nop
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	2000130c 	.word	0x2000130c

08005bf8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005bfc:	4802      	ldr	r0, [pc, #8]	; (8005c08 <UART5_IRQHandler+0x10>)
 8005bfe:	f00e fe8f 	bl	8014920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005c02:	bf00      	nop
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	200011ec 	.word	0x200011ec

08005c0c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8005c10:	4802      	ldr	r0, [pc, #8]	; (8005c1c <ADC3_IRQHandler+0x10>)
 8005c12:	f002 fae9 	bl	80081e8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8005c16:	bf00      	nop
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	200001d4 	.word	0x200001d4

08005c20 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8005c24:	4802      	ldr	r0, [pc, #8]	; (8005c30 <TIM23_IRQHandler+0x10>)
 8005c26:	f00d fb63 	bl	80132f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8005c2a:	bf00      	nop
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	200010dc 	.word	0x200010dc

08005c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c34:	b480      	push	{r7}
 8005c36:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005c38:	4b34      	ldr	r3, [pc, #208]	; (8005d0c <SystemInit+0xd8>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3e:	4a33      	ldr	r2, [pc, #204]	; (8005d0c <SystemInit+0xd8>)
 8005c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005c48:	4b31      	ldr	r3, [pc, #196]	; (8005d10 <SystemInit+0xdc>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 030f 	and.w	r3, r3, #15
 8005c50:	2b06      	cmp	r3, #6
 8005c52:	d807      	bhi.n	8005c64 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005c54:	4b2e      	ldr	r3, [pc, #184]	; (8005d10 <SystemInit+0xdc>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f023 030f 	bic.w	r3, r3, #15
 8005c5c:	4a2c      	ldr	r2, [pc, #176]	; (8005d10 <SystemInit+0xdc>)
 8005c5e:	f043 0307 	orr.w	r3, r3, #7
 8005c62:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005c64:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <SystemInit+0xe0>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a2a      	ldr	r2, [pc, #168]	; (8005d14 <SystemInit+0xe0>)
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c70:	4b28      	ldr	r3, [pc, #160]	; (8005d14 <SystemInit+0xe0>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005c76:	4b27      	ldr	r3, [pc, #156]	; (8005d14 <SystemInit+0xe0>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4926      	ldr	r1, [pc, #152]	; (8005d14 <SystemInit+0xe0>)
 8005c7c:	4b26      	ldr	r3, [pc, #152]	; (8005d18 <SystemInit+0xe4>)
 8005c7e:	4013      	ands	r3, r2
 8005c80:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005c82:	4b23      	ldr	r3, [pc, #140]	; (8005d10 <SystemInit+0xdc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005c8e:	4b20      	ldr	r3, [pc, #128]	; (8005d10 <SystemInit+0xdc>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f023 030f 	bic.w	r3, r3, #15
 8005c96:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <SystemInit+0xdc>)
 8005c98:	f043 0307 	orr.w	r3, r3, #7
 8005c9c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005c9e:	4b1d      	ldr	r3, [pc, #116]	; (8005d14 <SystemInit+0xe0>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005ca4:	4b1b      	ldr	r3, [pc, #108]	; (8005d14 <SystemInit+0xe0>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005caa:	4b1a      	ldr	r3, [pc, #104]	; (8005d14 <SystemInit+0xe0>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005cb0:	4b18      	ldr	r3, [pc, #96]	; (8005d14 <SystemInit+0xe0>)
 8005cb2:	4a1a      	ldr	r2, [pc, #104]	; (8005d1c <SystemInit+0xe8>)
 8005cb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005cb6:	4b17      	ldr	r3, [pc, #92]	; (8005d14 <SystemInit+0xe0>)
 8005cb8:	4a19      	ldr	r2, [pc, #100]	; (8005d20 <SystemInit+0xec>)
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005cbc:	4b15      	ldr	r3, [pc, #84]	; (8005d14 <SystemInit+0xe0>)
 8005cbe:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <SystemInit+0xf0>)
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005cc2:	4b14      	ldr	r3, [pc, #80]	; (8005d14 <SystemInit+0xe0>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005cc8:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <SystemInit+0xe0>)
 8005cca:	4a16      	ldr	r2, [pc, #88]	; (8005d24 <SystemInit+0xf0>)
 8005ccc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005cce:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <SystemInit+0xe0>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005cd4:	4b0f      	ldr	r3, [pc, #60]	; (8005d14 <SystemInit+0xe0>)
 8005cd6:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <SystemInit+0xf0>)
 8005cd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005cda:	4b0e      	ldr	r3, [pc, #56]	; (8005d14 <SystemInit+0xe0>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <SystemInit+0xe0>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a0b      	ldr	r2, [pc, #44]	; (8005d14 <SystemInit+0xe0>)
 8005ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005cec:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <SystemInit+0xe0>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005cf2:	4b0d      	ldr	r3, [pc, #52]	; (8005d28 <SystemInit+0xf4>)
 8005cf4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005cf8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005cfa:	4b04      	ldr	r3, [pc, #16]	; (8005d0c <SystemInit+0xd8>)
 8005cfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d00:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005d02:	bf00      	nop
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	e000ed00 	.word	0xe000ed00
 8005d10:	52002000 	.word	0x52002000
 8005d14:	58024400 	.word	0x58024400
 8005d18:	eaf6ed7f 	.word	0xeaf6ed7f
 8005d1c:	02020200 	.word	0x02020200
 8005d20:	01ff0000 	.word	0x01ff0000
 8005d24:	01010280 	.word	0x01010280
 8005d28:	52004000 	.word	0x52004000

08005d2c <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b098      	sub	sp, #96	; 0x60
 8005d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d42:	2200      	movs	r2, #0
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	605a      	str	r2, [r3, #4]
 8005d48:	609a      	str	r2, [r3, #8]
 8005d4a:	60da      	str	r2, [r3, #12]
 8005d4c:	611a      	str	r2, [r3, #16]
 8005d4e:	615a      	str	r2, [r3, #20]
 8005d50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	2234      	movs	r2, #52	; 0x34
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f011 fadd 	bl	8017318 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005d5e:	4b39      	ldr	r3, [pc, #228]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005d60:	4a39      	ldr	r2, [pc, #228]	; (8005e48 <MX_TIM1_Init+0x11c>)
 8005d62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005d64:	4b37      	ldr	r3, [pc, #220]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d6a:	4b36      	ldr	r3, [pc, #216]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 8005d70:	4b34      	ldr	r3, [pc, #208]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005d72:	f240 1257 	movw	r2, #343	; 0x157
 8005d76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d78:	4b32      	ldr	r3, [pc, #200]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d7e:	4b31      	ldr	r3, [pc, #196]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d84:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005d8a:	482e      	ldr	r0, [pc, #184]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005d8c:	f00c fcdc 	bl	8012748 <HAL_TIM_PWM_Init>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8005d96:	f7ff fd47 	bl	8005828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005da6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005daa:	4619      	mov	r1, r3
 8005dac:	4825      	ldr	r0, [pc, #148]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005dae:	f00e fb0f 	bl	80143d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005db8:	f7ff fd36 	bl	8005828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005dbc:	2360      	movs	r3, #96	; 0x60
 8005dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005dd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005ddc:	2200      	movs	r2, #0
 8005dde:	4619      	mov	r1, r3
 8005de0:	4818      	ldr	r0, [pc, #96]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005de2:	f00d fba5 	bl	8013530 <HAL_TIM_PWM_ConfigChannel>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d001      	beq.n	8005df0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005dec:	f7ff fd1c 	bl	8005828 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e00:	2300      	movs	r3, #0
 8005e02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e16:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005e20:	1d3b      	adds	r3, r7, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4807      	ldr	r0, [pc, #28]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005e26:	f00e fb6f 	bl	8014508 <HAL_TIMEx_ConfigBreakDeadTime>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8005e30:	f7ff fcfa 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005e34:	4803      	ldr	r0, [pc, #12]	; (8005e44 <MX_TIM1_Init+0x118>)
 8005e36:	f000 ff5d 	bl	8006cf4 <HAL_TIM_MspPostInit>

}
 8005e3a:	bf00      	nop
 8005e3c:	3760      	adds	r7, #96	; 0x60
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20000d4c 	.word	0x20000d4c
 8005e48:	40010000 	.word	0x40010000

08005e4c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b08c      	sub	sp, #48	; 0x30
 8005e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e52:	f107 030c 	add.w	r3, r7, #12
 8005e56:	2224      	movs	r2, #36	; 0x24
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f011 fa5c 	bl	8017318 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e60:	463b      	mov	r3, r7
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]
 8005e66:	605a      	str	r2, [r3, #4]
 8005e68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005e6a:	4b21      	ldr	r3, [pc, #132]	; (8005ef0 <MX_TIM2_Init+0xa4>)
 8005e6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005e72:	4b1f      	ldr	r3, [pc, #124]	; (8005ef0 <MX_TIM2_Init+0xa4>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e78:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <MX_TIM2_Init+0xa4>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8005e7e:	4b1c      	ldr	r3, [pc, #112]	; (8005ef0 <MX_TIM2_Init+0xa4>)
 8005e80:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005e84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e86:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <MX_TIM2_Init+0xa4>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e8c:	4b18      	ldr	r3, [pc, #96]	; (8005ef0 <MX_TIM2_Init+0xa4>)
 8005e8e:	2280      	movs	r2, #128	; 0x80
 8005e90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005e92:	2303      	movs	r3, #3
 8005e94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005e96:	2300      	movs	r3, #0
 8005e98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8005ea2:	230a      	movs	r3, #10
 8005ea4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8005eb2:	230a      	movs	r3, #10
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005eb6:	f107 030c 	add.w	r3, r7, #12
 8005eba:	4619      	mov	r1, r3
 8005ebc:	480c      	ldr	r0, [pc, #48]	; (8005ef0 <MX_TIM2_Init+0xa4>)
 8005ebe:	f00d f8e3 	bl	8013088 <HAL_TIM_Encoder_Init>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8005ec8:	f7ff fcae 	bl	8005828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <MX_TIM2_Init+0xa4>)
 8005eda:	f00e fa79 	bl	80143d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005ee4:	f7ff fca0 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005ee8:	bf00      	nop
 8005eea:	3730      	adds	r7, #48	; 0x30
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20000d98 	.word	0x20000d98

08005ef4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b08e      	sub	sp, #56	; 0x38
 8005ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	605a      	str	r2, [r3, #4]
 8005f04:	609a      	str	r2, [r3, #8]
 8005f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f08:	f107 031c 	add.w	r3, r7, #28
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f14:	463b      	mov	r3, r7
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	605a      	str	r2, [r3, #4]
 8005f1c:	609a      	str	r2, [r3, #8]
 8005f1e:	60da      	str	r2, [r3, #12]
 8005f20:	611a      	str	r2, [r3, #16]
 8005f22:	615a      	str	r2, [r3, #20]
 8005f24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005f26:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005f28:	4a34      	ldr	r2, [pc, #208]	; (8005ffc <MX_TIM3_Init+0x108>)
 8005f2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 275-1;
 8005f2c:	4b32      	ldr	r3, [pc, #200]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005f2e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005f32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f34:	4b30      	ldr	r3, [pc, #192]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8005f3a:	4b2f      	ldr	r3, [pc, #188]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005f3c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005f40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f42:	4b2d      	ldr	r3, [pc, #180]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f48:	4b2b      	ldr	r3, [pc, #172]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005f4e:	482a      	ldr	r0, [pc, #168]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005f50:	f00c fb1d 	bl	801258e <HAL_TIM_Base_Init>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8005f5a:	f7ff fc65 	bl	8005828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4823      	ldr	r0, [pc, #140]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005f6c:	f00d fbf4 	bl	8013758 <HAL_TIM_ConfigClockSource>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8005f76:	f7ff fc57 	bl	8005828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005f7a:	481f      	ldr	r0, [pc, #124]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005f7c:	f00c fbe4 	bl	8012748 <HAL_TIM_PWM_Init>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d001      	beq.n	8005f8a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8005f86:	f7ff fc4f 	bl	8005828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005f92:	f107 031c 	add.w	r3, r7, #28
 8005f96:	4619      	mov	r1, r3
 8005f98:	4817      	ldr	r0, [pc, #92]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005f9a:	f00e fa19 	bl	80143d0 <HAL_TIMEx_MasterConfigSynchronization>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8005fa4:	f7ff fc40 	bl	8005828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fa8:	2360      	movs	r3, #96	; 0x60
 8005faa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1999;
 8005fac:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8005fb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fba:	463b      	mov	r3, r7
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	480d      	ldr	r0, [pc, #52]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005fc2:	f00d fab5 	bl	8013530 <HAL_TIM_PWM_ConfigChannel>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8005fcc:	f7ff fc2c 	bl	8005828 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	2204      	movs	r2, #4
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4807      	ldr	r0, [pc, #28]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005fdc:	f00d faa8 	bl	8013530 <HAL_TIM_PWM_ConfigChannel>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d001      	beq.n	8005fea <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8005fe6:	f7ff fc1f 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005fea:	4803      	ldr	r0, [pc, #12]	; (8005ff8 <MX_TIM3_Init+0x104>)
 8005fec:	f000 fe82 	bl	8006cf4 <HAL_TIM_MspPostInit>

}
 8005ff0:	bf00      	nop
 8005ff2:	3738      	adds	r7, #56	; 0x38
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	20000de4 	.word	0x20000de4
 8005ffc:	40000400 	.word	0x40000400

08006000 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08c      	sub	sp, #48	; 0x30
 8006004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006006:	f107 030c 	add.w	r3, r7, #12
 800600a:	2224      	movs	r2, #36	; 0x24
 800600c:	2100      	movs	r1, #0
 800600e:	4618      	mov	r0, r3
 8006010:	f011 f982 	bl	8017318 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006014:	463b      	mov	r3, r7
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	605a      	str	r2, [r3, #4]
 800601c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800601e:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <MX_TIM4_Init+0xa4>)
 8006020:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <MX_TIM4_Init+0xa8>)
 8006022:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006024:	4b1f      	ldr	r3, [pc, #124]	; (80060a4 <MX_TIM4_Init+0xa4>)
 8006026:	2200      	movs	r2, #0
 8006028:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800602a:	4b1e      	ldr	r3, [pc, #120]	; (80060a4 <MX_TIM4_Init+0xa4>)
 800602c:	2200      	movs	r2, #0
 800602e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8006030:	4b1c      	ldr	r3, [pc, #112]	; (80060a4 <MX_TIM4_Init+0xa4>)
 8006032:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8006036:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006038:	4b1a      	ldr	r3, [pc, #104]	; (80060a4 <MX_TIM4_Init+0xa4>)
 800603a:	2200      	movs	r2, #0
 800603c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800603e:	4b19      	ldr	r3, [pc, #100]	; (80060a4 <MX_TIM4_Init+0xa4>)
 8006040:	2280      	movs	r2, #128	; 0x80
 8006042:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006044:	2303      	movs	r3, #3
 8006046:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006050:	2300      	movs	r3, #0
 8006052:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006058:	2300      	movs	r3, #0
 800605a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800605c:	2301      	movs	r3, #1
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006060:	2300      	movs	r3, #0
 8006062:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006068:	f107 030c 	add.w	r3, r7, #12
 800606c:	4619      	mov	r1, r3
 800606e:	480d      	ldr	r0, [pc, #52]	; (80060a4 <MX_TIM4_Init+0xa4>)
 8006070:	f00d f80a 	bl	8013088 <HAL_TIM_Encoder_Init>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800607a:	f7ff fbd5 	bl	8005828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800607e:	2300      	movs	r3, #0
 8006080:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006082:	2300      	movs	r3, #0
 8006084:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006086:	463b      	mov	r3, r7
 8006088:	4619      	mov	r1, r3
 800608a:	4806      	ldr	r0, [pc, #24]	; (80060a4 <MX_TIM4_Init+0xa4>)
 800608c:	f00e f9a0 	bl	80143d0 <HAL_TIMEx_MasterConfigSynchronization>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d001      	beq.n	800609a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8006096:	f7ff fbc7 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800609a:	bf00      	nop
 800609c:	3730      	adds	r7, #48	; 0x30
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20000e30 	.word	0x20000e30
 80060a8:	40000800 	.word	0x40000800

080060ac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08e      	sub	sp, #56	; 0x38
 80060b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	609a      	str	r2, [r3, #8]
 80060be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060c0:	f107 031c 	add.w	r3, r7, #28
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80060cc:	463b      	mov	r3, r7
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	605a      	str	r2, [r3, #4]
 80060d4:	609a      	str	r2, [r3, #8]
 80060d6:	60da      	str	r2, [r3, #12]
 80060d8:	611a      	str	r2, [r3, #16]
 80060da:	615a      	str	r2, [r3, #20]
 80060dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80060de:	4b33      	ldr	r3, [pc, #204]	; (80061ac <MX_TIM5_Init+0x100>)
 80060e0:	4a33      	ldr	r2, [pc, #204]	; (80061b0 <MX_TIM5_Init+0x104>)
 80060e2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 80060e4:	4b31      	ldr	r3, [pc, #196]	; (80061ac <MX_TIM5_Init+0x100>)
 80060e6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80060ea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060ec:	4b2f      	ldr	r3, [pc, #188]	; (80061ac <MX_TIM5_Init+0x100>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 80060f2:	4b2e      	ldr	r3, [pc, #184]	; (80061ac <MX_TIM5_Init+0x100>)
 80060f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80060f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060fa:	4b2c      	ldr	r3, [pc, #176]	; (80061ac <MX_TIM5_Init+0x100>)
 80060fc:	2200      	movs	r2, #0
 80060fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006100:	4b2a      	ldr	r3, [pc, #168]	; (80061ac <MX_TIM5_Init+0x100>)
 8006102:	2200      	movs	r2, #0
 8006104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8006106:	4829      	ldr	r0, [pc, #164]	; (80061ac <MX_TIM5_Init+0x100>)
 8006108:	f00c fa41 	bl	801258e <HAL_TIM_Base_Init>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 8006112:	f7ff fb89 	bl	8005828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800611a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800611c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006120:	4619      	mov	r1, r3
 8006122:	4822      	ldr	r0, [pc, #136]	; (80061ac <MX_TIM5_Init+0x100>)
 8006124:	f00d fb18 	bl	8013758 <HAL_TIM_ConfigClockSource>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 800612e:	f7ff fb7b 	bl	8005828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8006132:	481e      	ldr	r0, [pc, #120]	; (80061ac <MX_TIM5_Init+0x100>)
 8006134:	f00c fb08 	bl	8012748 <HAL_TIM_PWM_Init>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 800613e:	f7ff fb73 	bl	8005828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006142:	2300      	movs	r3, #0
 8006144:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006146:	2300      	movs	r3, #0
 8006148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800614a:	f107 031c 	add.w	r3, r7, #28
 800614e:	4619      	mov	r1, r3
 8006150:	4816      	ldr	r0, [pc, #88]	; (80061ac <MX_TIM5_Init+0x100>)
 8006152:	f00e f93d 	bl	80143d0 <HAL_TIMEx_MasterConfigSynchronization>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 800615c:	f7ff fb64 	bl	8005828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006160:	2360      	movs	r3, #96	; 0x60
 8006162:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500-1;
 8006164:	f240 53db 	movw	r3, #1499	; 0x5db
 8006168:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800616a:	2300      	movs	r3, #0
 800616c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800616e:	2300      	movs	r3, #0
 8006170:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006172:	463b      	mov	r3, r7
 8006174:	2200      	movs	r2, #0
 8006176:	4619      	mov	r1, r3
 8006178:	480c      	ldr	r0, [pc, #48]	; (80061ac <MX_TIM5_Init+0x100>)
 800617a:	f00d f9d9 	bl	8013530 <HAL_TIM_PWM_ConfigChannel>
 800617e:	4603      	mov	r3, r0
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 8006184:	f7ff fb50 	bl	8005828 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006188:	463b      	mov	r3, r7
 800618a:	2204      	movs	r2, #4
 800618c:	4619      	mov	r1, r3
 800618e:	4807      	ldr	r0, [pc, #28]	; (80061ac <MX_TIM5_Init+0x100>)
 8006190:	f00d f9ce 	bl	8013530 <HAL_TIM_PWM_ConfigChannel>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 800619a:	f7ff fb45 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800619e:	4803      	ldr	r0, [pc, #12]	; (80061ac <MX_TIM5_Init+0x100>)
 80061a0:	f000 fda8 	bl	8006cf4 <HAL_TIM_MspPostInit>

}
 80061a4:	bf00      	nop
 80061a6:	3738      	adds	r7, #56	; 0x38
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000e7c 	.word	0x20000e7c
 80061b0:	40000c00 	.word	0x40000c00

080061b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061ba:	1d3b      	adds	r3, r7, #4
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80061c4:	4b15      	ldr	r3, [pc, #84]	; (800621c <MX_TIM6_Init+0x68>)
 80061c6:	4a16      	ldr	r2, [pc, #88]	; (8006220 <MX_TIM6_Init+0x6c>)
 80061c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 80061ca:	4b14      	ldr	r3, [pc, #80]	; (800621c <MX_TIM6_Init+0x68>)
 80061cc:	f44f 7289 	mov.w	r2, #274	; 0x112
 80061d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061d2:	4b12      	ldr	r3, [pc, #72]	; (800621c <MX_TIM6_Init+0x68>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80061d8:	4b10      	ldr	r3, [pc, #64]	; (800621c <MX_TIM6_Init+0x68>)
 80061da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061e0:	4b0e      	ldr	r3, [pc, #56]	; (800621c <MX_TIM6_Init+0x68>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80061e6:	480d      	ldr	r0, [pc, #52]	; (800621c <MX_TIM6_Init+0x68>)
 80061e8:	f00c f9d1 	bl	801258e <HAL_TIM_Base_Init>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80061f2:	f7ff fb19 	bl	8005828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80061f6:	2300      	movs	r3, #0
 80061f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80061fe:	1d3b      	adds	r3, r7, #4
 8006200:	4619      	mov	r1, r3
 8006202:	4806      	ldr	r0, [pc, #24]	; (800621c <MX_TIM6_Init+0x68>)
 8006204:	f00e f8e4 	bl	80143d0 <HAL_TIMEx_MasterConfigSynchronization>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800620e:	f7ff fb0b 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000ec8 	.word	0x20000ec8
 8006220:	40001000 	.word	0x40001000

08006224 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08c      	sub	sp, #48	; 0x30
 8006228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800622a:	f107 030c 	add.w	r3, r7, #12
 800622e:	2224      	movs	r2, #36	; 0x24
 8006230:	2100      	movs	r1, #0
 8006232:	4618      	mov	r0, r3
 8006234:	f011 f870 	bl	8017318 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006238:	463b      	mov	r3, r7
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]
 800623e:	605a      	str	r2, [r3, #4]
 8006240:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006242:	4b23      	ldr	r3, [pc, #140]	; (80062d0 <MX_TIM8_Init+0xac>)
 8006244:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <MX_TIM8_Init+0xb0>)
 8006246:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006248:	4b21      	ldr	r3, [pc, #132]	; (80062d0 <MX_TIM8_Init+0xac>)
 800624a:	2200      	movs	r2, #0
 800624c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800624e:	4b20      	ldr	r3, [pc, #128]	; (80062d0 <MX_TIM8_Init+0xac>)
 8006250:	2200      	movs	r2, #0
 8006252:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8006254:	4b1e      	ldr	r3, [pc, #120]	; (80062d0 <MX_TIM8_Init+0xac>)
 8006256:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800625a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800625c:	4b1c      	ldr	r3, [pc, #112]	; (80062d0 <MX_TIM8_Init+0xac>)
 800625e:	2200      	movs	r2, #0
 8006260:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006262:	4b1b      	ldr	r3, [pc, #108]	; (80062d0 <MX_TIM8_Init+0xac>)
 8006264:	2200      	movs	r2, #0
 8006266:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006268:	4b19      	ldr	r3, [pc, #100]	; (80062d0 <MX_TIM8_Init+0xac>)
 800626a:	2280      	movs	r2, #128	; 0x80
 800626c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800626e:	2303      	movs	r3, #3
 8006270:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006272:	2300      	movs	r3, #0
 8006274:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006276:	2301      	movs	r3, #1
 8006278:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800627a:	2300      	movs	r3, #0
 800627c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006282:	2300      	movs	r3, #0
 8006284:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006286:	2301      	movs	r3, #1
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800628a:	2300      	movs	r3, #0
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800628e:	2300      	movs	r3, #0
 8006290:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006292:	f107 030c 	add.w	r3, r7, #12
 8006296:	4619      	mov	r1, r3
 8006298:	480d      	ldr	r0, [pc, #52]	; (80062d0 <MX_TIM8_Init+0xac>)
 800629a:	f00c fef5 	bl	8013088 <HAL_TIM_Encoder_Init>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80062a4:	f7ff fac0 	bl	8005828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062a8:	2300      	movs	r3, #0
 80062aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80062ac:	2300      	movs	r3, #0
 80062ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062b0:	2300      	movs	r3, #0
 80062b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80062b4:	463b      	mov	r3, r7
 80062b6:	4619      	mov	r1, r3
 80062b8:	4805      	ldr	r0, [pc, #20]	; (80062d0 <MX_TIM8_Init+0xac>)
 80062ba:	f00e f889 	bl	80143d0 <HAL_TIMEx_MasterConfigSynchronization>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80062c4:	f7ff fab0 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80062c8:	bf00      	nop
 80062ca:	3730      	adds	r7, #48	; 0x30
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}
 80062d0:	20000f14 	.word	0x20000f14
 80062d4:	40010400 	.word	0x40010400

080062d8 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b088      	sub	sp, #32
 80062dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80062de:	1d3b      	adds	r3, r7, #4
 80062e0:	2200      	movs	r2, #0
 80062e2:	601a      	str	r2, [r3, #0]
 80062e4:	605a      	str	r2, [r3, #4]
 80062e6:	609a      	str	r2, [r3, #8]
 80062e8:	60da      	str	r2, [r3, #12]
 80062ea:	611a      	str	r2, [r3, #16]
 80062ec:	615a      	str	r2, [r3, #20]
 80062ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80062f0:	4b1f      	ldr	r3, [pc, #124]	; (8006370 <MX_TIM13_Init+0x98>)
 80062f2:	4a20      	ldr	r2, [pc, #128]	; (8006374 <MX_TIM13_Init+0x9c>)
 80062f4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 80062f6:	4b1e      	ldr	r3, [pc, #120]	; (8006370 <MX_TIM13_Init+0x98>)
 80062f8:	f240 2225 	movw	r2, #549	; 0x225
 80062fc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062fe:	4b1c      	ldr	r3, [pc, #112]	; (8006370 <MX_TIM13_Init+0x98>)
 8006300:	2200      	movs	r2, #0
 8006302:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8006304:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <MX_TIM13_Init+0x98>)
 8006306:	f240 32e7 	movw	r2, #999	; 0x3e7
 800630a:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800630c:	4b18      	ldr	r3, [pc, #96]	; (8006370 <MX_TIM13_Init+0x98>)
 800630e:	2200      	movs	r2, #0
 8006310:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006312:	4b17      	ldr	r3, [pc, #92]	; (8006370 <MX_TIM13_Init+0x98>)
 8006314:	2280      	movs	r2, #128	; 0x80
 8006316:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006318:	4815      	ldr	r0, [pc, #84]	; (8006370 <MX_TIM13_Init+0x98>)
 800631a:	f00c f938 	bl	801258e <HAL_TIM_Base_Init>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d001      	beq.n	8006328 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8006324:	f7ff fa80 	bl	8005828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8006328:	4811      	ldr	r0, [pc, #68]	; (8006370 <MX_TIM13_Init+0x98>)
 800632a:	f00c fa0d 	bl	8012748 <HAL_TIM_PWM_Init>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8006334:	f7ff fa78 	bl	8005828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006338:	2360      	movs	r3, #96	; 0x60
 800633a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 800633c:	f240 13f3 	movw	r3, #499	; 0x1f3
 8006340:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006346:	2300      	movs	r3, #0
 8006348:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800634a:	1d3b      	adds	r3, r7, #4
 800634c:	2200      	movs	r2, #0
 800634e:	4619      	mov	r1, r3
 8006350:	4807      	ldr	r0, [pc, #28]	; (8006370 <MX_TIM13_Init+0x98>)
 8006352:	f00d f8ed 	bl	8013530 <HAL_TIM_PWM_ConfigChannel>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 800635c:	f7ff fa64 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8006360:	4803      	ldr	r0, [pc, #12]	; (8006370 <MX_TIM13_Init+0x98>)
 8006362:	f000 fcc7 	bl	8006cf4 <HAL_TIM_MspPostInit>

}
 8006366:	bf00      	nop
 8006368:	3720      	adds	r7, #32
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000f60 	.word	0x20000f60
 8006374:	40001c00 	.word	0x40001c00

08006378 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b088      	sub	sp, #32
 800637c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800637e:	1d3b      	adds	r3, r7, #4
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	605a      	str	r2, [r3, #4]
 8006386:	609a      	str	r2, [r3, #8]
 8006388:	60da      	str	r2, [r3, #12]
 800638a:	611a      	str	r2, [r3, #16]
 800638c:	615a      	str	r2, [r3, #20]
 800638e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8006390:	4b1f      	ldr	r3, [pc, #124]	; (8006410 <MX_TIM14_Init+0x98>)
 8006392:	4a20      	ldr	r2, [pc, #128]	; (8006414 <MX_TIM14_Init+0x9c>)
 8006394:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 8006396:	4b1e      	ldr	r3, [pc, #120]	; (8006410 <MX_TIM14_Init+0x98>)
 8006398:	f240 2225 	movw	r2, #549	; 0x225
 800639c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800639e:	4b1c      	ldr	r3, [pc, #112]	; (8006410 <MX_TIM14_Init+0x98>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 80063a4:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <MX_TIM14_Init+0x98>)
 80063a6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80063aa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063ac:	4b18      	ldr	r3, [pc, #96]	; (8006410 <MX_TIM14_Init+0x98>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063b2:	4b17      	ldr	r3, [pc, #92]	; (8006410 <MX_TIM14_Init+0x98>)
 80063b4:	2280      	movs	r2, #128	; 0x80
 80063b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80063b8:	4815      	ldr	r0, [pc, #84]	; (8006410 <MX_TIM14_Init+0x98>)
 80063ba:	f00c f8e8 	bl	801258e <HAL_TIM_Base_Init>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 80063c4:	f7ff fa30 	bl	8005828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80063c8:	4811      	ldr	r0, [pc, #68]	; (8006410 <MX_TIM14_Init+0x98>)
 80063ca:	f00c f9bd 	bl	8012748 <HAL_TIM_PWM_Init>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d001      	beq.n	80063d8 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80063d4:	f7ff fa28 	bl	8005828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063d8:	2360      	movs	r3, #96	; 0x60
 80063da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80063dc:	f240 13f3 	movw	r3, #499	; 0x1f3
 80063e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80063ea:	1d3b      	adds	r3, r7, #4
 80063ec:	2200      	movs	r2, #0
 80063ee:	4619      	mov	r1, r3
 80063f0:	4807      	ldr	r0, [pc, #28]	; (8006410 <MX_TIM14_Init+0x98>)
 80063f2:	f00d f89d 	bl	8013530 <HAL_TIM_PWM_ConfigChannel>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 80063fc:	f7ff fa14 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8006400:	4803      	ldr	r0, [pc, #12]	; (8006410 <MX_TIM14_Init+0x98>)
 8006402:	f000 fc77 	bl	8006cf4 <HAL_TIM_MspPostInit>

}
 8006406:	bf00      	nop
 8006408:	3720      	adds	r7, #32
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000fac 	.word	0x20000fac
 8006414:	40002000 	.word	0x40002000

08006418 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b098      	sub	sp, #96	; 0x60
 800641c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800641e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	605a      	str	r2, [r3, #4]
 8006428:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800642a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800642e:	2200      	movs	r2, #0
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	605a      	str	r2, [r3, #4]
 8006434:	609a      	str	r2, [r3, #8]
 8006436:	60da      	str	r2, [r3, #12]
 8006438:	611a      	str	r2, [r3, #16]
 800643a:	615a      	str	r2, [r3, #20]
 800643c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800643e:	1d3b      	adds	r3, r7, #4
 8006440:	2234      	movs	r2, #52	; 0x34
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f010 ff67 	bl	8017318 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800644a:	4b35      	ldr	r3, [pc, #212]	; (8006520 <MX_TIM15_Init+0x108>)
 800644c:	4a35      	ldr	r2, [pc, #212]	; (8006524 <MX_TIM15_Init+0x10c>)
 800644e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 8006450:	4b33      	ldr	r3, [pc, #204]	; (8006520 <MX_TIM15_Init+0x108>)
 8006452:	f240 2225 	movw	r2, #549	; 0x225
 8006456:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006458:	4b31      	ldr	r3, [pc, #196]	; (8006520 <MX_TIM15_Init+0x108>)
 800645a:	2200      	movs	r2, #0
 800645c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 800645e:	4b30      	ldr	r3, [pc, #192]	; (8006520 <MX_TIM15_Init+0x108>)
 8006460:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006464:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006466:	4b2e      	ldr	r3, [pc, #184]	; (8006520 <MX_TIM15_Init+0x108>)
 8006468:	2200      	movs	r2, #0
 800646a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800646c:	4b2c      	ldr	r3, [pc, #176]	; (8006520 <MX_TIM15_Init+0x108>)
 800646e:	2200      	movs	r2, #0
 8006470:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006472:	4b2b      	ldr	r3, [pc, #172]	; (8006520 <MX_TIM15_Init+0x108>)
 8006474:	2280      	movs	r2, #128	; 0x80
 8006476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8006478:	4829      	ldr	r0, [pc, #164]	; (8006520 <MX_TIM15_Init+0x108>)
 800647a:	f00c f965 	bl	8012748 <HAL_TIM_PWM_Init>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8006484:	f7ff f9d0 	bl	8005828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006488:	2300      	movs	r3, #0
 800648a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800648c:	2300      	movs	r3, #0
 800648e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8006490:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006494:	4619      	mov	r1, r3
 8006496:	4822      	ldr	r0, [pc, #136]	; (8006520 <MX_TIM15_Init+0x108>)
 8006498:	f00d ff9a 	bl	80143d0 <HAL_TIMEx_MasterConfigSynchronization>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 80064a2:	f7ff f9c1 	bl	8005828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064a6:	2360      	movs	r3, #96	; 0x60
 80064a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 80064aa:	f240 13f3 	movw	r3, #499	; 0x1f3
 80064ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064b0:	2300      	movs	r3, #0
 80064b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80064b4:	2300      	movs	r3, #0
 80064b6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80064bc:	2300      	movs	r3, #0
 80064be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80064c0:	2300      	movs	r3, #0
 80064c2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064c8:	2200      	movs	r2, #0
 80064ca:	4619      	mov	r1, r3
 80064cc:	4814      	ldr	r0, [pc, #80]	; (8006520 <MX_TIM15_Init+0x108>)
 80064ce:	f00d f82f 	bl	8013530 <HAL_TIM_PWM_ConfigChannel>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 80064d8:	f7ff f9a6 	bl	8005828 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80064dc:	2300      	movs	r3, #0
 80064de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80064e0:	2300      	movs	r3, #0
 80064e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80064ec:	2300      	movs	r3, #0
 80064ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80064f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80064f6:	2300      	movs	r3, #0
 80064f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80064fa:	2300      	movs	r3, #0
 80064fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80064fe:	1d3b      	adds	r3, r7, #4
 8006500:	4619      	mov	r1, r3
 8006502:	4807      	ldr	r0, [pc, #28]	; (8006520 <MX_TIM15_Init+0x108>)
 8006504:	f00e f800 	bl	8014508 <HAL_TIMEx_ConfigBreakDeadTime>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 800650e:	f7ff f98b 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8006512:	4803      	ldr	r0, [pc, #12]	; (8006520 <MX_TIM15_Init+0x108>)
 8006514:	f000 fbee 	bl	8006cf4 <HAL_TIM_MspPostInit>

}
 8006518:	bf00      	nop
 800651a:	3760      	adds	r7, #96	; 0x60
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000ff8 	.word	0x20000ff8
 8006524:	40014000 	.word	0x40014000

08006528 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b094      	sub	sp, #80	; 0x50
 800652c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800652e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	605a      	str	r2, [r3, #4]
 8006538:	609a      	str	r2, [r3, #8]
 800653a:	60da      	str	r2, [r3, #12]
 800653c:	611a      	str	r2, [r3, #16]
 800653e:	615a      	str	r2, [r3, #20]
 8006540:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006542:	463b      	mov	r3, r7
 8006544:	2234      	movs	r2, #52	; 0x34
 8006546:	2100      	movs	r1, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f010 fee5 	bl	8017318 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800654e:	4b32      	ldr	r3, [pc, #200]	; (8006618 <MX_TIM16_Init+0xf0>)
 8006550:	4a32      	ldr	r2, [pc, #200]	; (800661c <MX_TIM16_Init+0xf4>)
 8006552:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 8006554:	4b30      	ldr	r3, [pc, #192]	; (8006618 <MX_TIM16_Init+0xf0>)
 8006556:	f240 2225 	movw	r2, #549	; 0x225
 800655a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800655c:	4b2e      	ldr	r3, [pc, #184]	; (8006618 <MX_TIM16_Init+0xf0>)
 800655e:	2200      	movs	r2, #0
 8006560:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8006562:	4b2d      	ldr	r3, [pc, #180]	; (8006618 <MX_TIM16_Init+0xf0>)
 8006564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006568:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800656a:	4b2b      	ldr	r3, [pc, #172]	; (8006618 <MX_TIM16_Init+0xf0>)
 800656c:	2200      	movs	r2, #0
 800656e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006570:	4b29      	ldr	r3, [pc, #164]	; (8006618 <MX_TIM16_Init+0xf0>)
 8006572:	2200      	movs	r2, #0
 8006574:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006576:	4b28      	ldr	r3, [pc, #160]	; (8006618 <MX_TIM16_Init+0xf0>)
 8006578:	2280      	movs	r2, #128	; 0x80
 800657a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800657c:	4826      	ldr	r0, [pc, #152]	; (8006618 <MX_TIM16_Init+0xf0>)
 800657e:	f00c f806 	bl	801258e <HAL_TIM_Base_Init>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 8006588:	f7ff f94e 	bl	8005828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800658c:	4822      	ldr	r0, [pc, #136]	; (8006618 <MX_TIM16_Init+0xf0>)
 800658e:	f00c f8db 	bl	8012748 <HAL_TIM_PWM_Init>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 8006598:	f7ff f946 	bl	8005828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800659c:	2360      	movs	r3, #96	; 0x60
 800659e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80065a0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80065a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065a6:	2300      	movs	r3, #0
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80065aa:	2300      	movs	r3, #0
 80065ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80065b2:	2300      	movs	r3, #0
 80065b4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80065b6:	2300      	movs	r3, #0
 80065b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065be:	2200      	movs	r2, #0
 80065c0:	4619      	mov	r1, r3
 80065c2:	4815      	ldr	r0, [pc, #84]	; (8006618 <MX_TIM16_Init+0xf0>)
 80065c4:	f00c ffb4 	bl	8013530 <HAL_TIM_PWM_ConfigChannel>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 80065ce:	f7ff f92b 	bl	8005828 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80065d2:	2300      	movs	r3, #0
 80065d4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80065d6:	2300      	movs	r3, #0
 80065d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80065da:	2300      	movs	r3, #0
 80065dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80065e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065ea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80065ec:	2300      	movs	r3, #0
 80065ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80065f0:	2300      	movs	r3, #0
 80065f2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80065f4:	463b      	mov	r3, r7
 80065f6:	4619      	mov	r1, r3
 80065f8:	4807      	ldr	r0, [pc, #28]	; (8006618 <MX_TIM16_Init+0xf0>)
 80065fa:	f00d ff85 	bl	8014508 <HAL_TIMEx_ConfigBreakDeadTime>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 8006604:	f7ff f910 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8006608:	4803      	ldr	r0, [pc, #12]	; (8006618 <MX_TIM16_Init+0xf0>)
 800660a:	f000 fb73 	bl	8006cf4 <HAL_TIM_MspPostInit>

}
 800660e:	bf00      	nop
 8006610:	3750      	adds	r7, #80	; 0x50
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20001044 	.word	0x20001044
 800661c:	40014400 	.word	0x40014400

08006620 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b094      	sub	sp, #80	; 0x50
 8006624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006626:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800662a:	2200      	movs	r2, #0
 800662c:	601a      	str	r2, [r3, #0]
 800662e:	605a      	str	r2, [r3, #4]
 8006630:	609a      	str	r2, [r3, #8]
 8006632:	60da      	str	r2, [r3, #12]
 8006634:	611a      	str	r2, [r3, #16]
 8006636:	615a      	str	r2, [r3, #20]
 8006638:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800663a:	463b      	mov	r3, r7
 800663c:	2234      	movs	r2, #52	; 0x34
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f010 fe69 	bl	8017318 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006646:	4b32      	ldr	r3, [pc, #200]	; (8006710 <MX_TIM17_Init+0xf0>)
 8006648:	4a32      	ldr	r2, [pc, #200]	; (8006714 <MX_TIM17_Init+0xf4>)
 800664a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 800664c:	4b30      	ldr	r3, [pc, #192]	; (8006710 <MX_TIM17_Init+0xf0>)
 800664e:	f240 2225 	movw	r2, #549	; 0x225
 8006652:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006654:	4b2e      	ldr	r3, [pc, #184]	; (8006710 <MX_TIM17_Init+0xf0>)
 8006656:	2200      	movs	r2, #0
 8006658:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 800665a:	4b2d      	ldr	r3, [pc, #180]	; (8006710 <MX_TIM17_Init+0xf0>)
 800665c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006660:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006662:	4b2b      	ldr	r3, [pc, #172]	; (8006710 <MX_TIM17_Init+0xf0>)
 8006664:	2200      	movs	r2, #0
 8006666:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006668:	4b29      	ldr	r3, [pc, #164]	; (8006710 <MX_TIM17_Init+0xf0>)
 800666a:	2200      	movs	r2, #0
 800666c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800666e:	4b28      	ldr	r3, [pc, #160]	; (8006710 <MX_TIM17_Init+0xf0>)
 8006670:	2280      	movs	r2, #128	; 0x80
 8006672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8006674:	4826      	ldr	r0, [pc, #152]	; (8006710 <MX_TIM17_Init+0xf0>)
 8006676:	f00b ff8a 	bl	801258e <HAL_TIM_Base_Init>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8006680:	f7ff f8d2 	bl	8005828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8006684:	4822      	ldr	r0, [pc, #136]	; (8006710 <MX_TIM17_Init+0xf0>)
 8006686:	f00c f85f 	bl	8012748 <HAL_TIM_PWM_Init>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 8006690:	f7ff f8ca 	bl	8005828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006694:	2360      	movs	r3, #96	; 0x60
 8006696:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 8006698:	f240 13f3 	movw	r3, #499	; 0x1f3
 800669c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800669e:	2300      	movs	r3, #0
 80066a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80066a2:	2300      	movs	r3, #0
 80066a4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80066aa:	2300      	movs	r3, #0
 80066ac:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80066ae:	2300      	movs	r3, #0
 80066b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066b6:	2200      	movs	r2, #0
 80066b8:	4619      	mov	r1, r3
 80066ba:	4815      	ldr	r0, [pc, #84]	; (8006710 <MX_TIM17_Init+0xf0>)
 80066bc:	f00c ff38 	bl	8013530 <HAL_TIM_PWM_ConfigChannel>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 80066c6:	f7ff f8af 	bl	8005828 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80066ce:	2300      	movs	r3, #0
 80066d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80066d2:	2300      	movs	r3, #0
 80066d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80066da:	2300      	movs	r3, #0
 80066dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80066de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80066e8:	2300      	movs	r3, #0
 80066ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80066ec:	463b      	mov	r3, r7
 80066ee:	4619      	mov	r1, r3
 80066f0:	4807      	ldr	r0, [pc, #28]	; (8006710 <MX_TIM17_Init+0xf0>)
 80066f2:	f00d ff09 	bl	8014508 <HAL_TIMEx_ConfigBreakDeadTime>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 80066fc:	f7ff f894 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8006700:	4803      	ldr	r0, [pc, #12]	; (8006710 <MX_TIM17_Init+0xf0>)
 8006702:	f000 faf7 	bl	8006cf4 <HAL_TIM_MspPostInit>

}
 8006706:	bf00      	nop
 8006708:	3750      	adds	r7, #80	; 0x50
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20001090 	.word	0x20001090
 8006714:	40014800 	.word	0x40014800

08006718 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800671e:	f107 0310 	add.w	r3, r7, #16
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	605a      	str	r2, [r3, #4]
 8006728:	609a      	str	r2, [r3, #8]
 800672a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800672c:	1d3b      	adds	r3, r7, #4
 800672e:	2200      	movs	r2, #0
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	605a      	str	r2, [r3, #4]
 8006734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8006736:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <MX_TIM23_Init+0x98>)
 8006738:	4a1e      	ldr	r2, [pc, #120]	; (80067b4 <MX_TIM23_Init+0x9c>)
 800673a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 800673c:	4b1c      	ldr	r3, [pc, #112]	; (80067b0 <MX_TIM23_Init+0x98>)
 800673e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006742:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006744:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <MX_TIM23_Init+0x98>)
 8006746:	2200      	movs	r2, #0
 8006748:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 1000-1;
 800674a:	4b19      	ldr	r3, [pc, #100]	; (80067b0 <MX_TIM23_Init+0x98>)
 800674c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006750:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006752:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <MX_TIM23_Init+0x98>)
 8006754:	2200      	movs	r2, #0
 8006756:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006758:	4b15      	ldr	r3, [pc, #84]	; (80067b0 <MX_TIM23_Init+0x98>)
 800675a:	2280      	movs	r2, #128	; 0x80
 800675c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800675e:	4814      	ldr	r0, [pc, #80]	; (80067b0 <MX_TIM23_Init+0x98>)
 8006760:	f00b ff15 	bl	801258e <HAL_TIM_Base_Init>
 8006764:	4603      	mov	r3, r0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d001      	beq.n	800676e <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800676a:	f7ff f85d 	bl	8005828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800676e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8006774:	f107 0310 	add.w	r3, r7, #16
 8006778:	4619      	mov	r1, r3
 800677a:	480d      	ldr	r0, [pc, #52]	; (80067b0 <MX_TIM23_Init+0x98>)
 800677c:	f00c ffec 	bl	8013758 <HAL_TIM_ConfigClockSource>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 8006786:	f7ff f84f 	bl	8005828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800678a:	2300      	movs	r3, #0
 800678c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8006792:	1d3b      	adds	r3, r7, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4806      	ldr	r0, [pc, #24]	; (80067b0 <MX_TIM23_Init+0x98>)
 8006798:	f00d fe1a 	bl	80143d0 <HAL_TIMEx_MasterConfigSynchronization>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 80067a2:	f7ff f841 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80067a6:	bf00      	nop
 80067a8:	3720      	adds	r7, #32
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	200010dc 	.word	0x200010dc
 80067b4:	4000e000 	.word	0x4000e000

080067b8 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b088      	sub	sp, #32
 80067bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80067be:	f107 0310 	add.w	r3, r7, #16
 80067c2:	2200      	movs	r2, #0
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	605a      	str	r2, [r3, #4]
 80067c8:	609a      	str	r2, [r3, #8]
 80067ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067cc:	1d3b      	adds	r3, r7, #4
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]
 80067d2:	605a      	str	r2, [r3, #4]
 80067d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80067d6:	4b1e      	ldr	r3, [pc, #120]	; (8006850 <MX_TIM24_Init+0x98>)
 80067d8:	4a1e      	ldr	r2, [pc, #120]	; (8006854 <MX_TIM24_Init+0x9c>)
 80067da:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 80067dc:	4b1c      	ldr	r3, [pc, #112]	; (8006850 <MX_TIM24_Init+0x98>)
 80067de:	f44f 7289 	mov.w	r2, #274	; 0x112
 80067e2:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067e4:	4b1a      	ldr	r3, [pc, #104]	; (8006850 <MX_TIM24_Init+0x98>)
 80067e6:	2200      	movs	r2, #0
 80067e8:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 80067ea:	4b19      	ldr	r3, [pc, #100]	; (8006850 <MX_TIM24_Init+0x98>)
 80067ec:	f04f 32ff 	mov.w	r2, #4294967295
 80067f0:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067f2:	4b17      	ldr	r3, [pc, #92]	; (8006850 <MX_TIM24_Init+0x98>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067f8:	4b15      	ldr	r3, [pc, #84]	; (8006850 <MX_TIM24_Init+0x98>)
 80067fa:	2200      	movs	r2, #0
 80067fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 80067fe:	4814      	ldr	r0, [pc, #80]	; (8006850 <MX_TIM24_Init+0x98>)
 8006800:	f00b fec5 	bl	801258e <HAL_TIM_Base_Init>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 800680a:	f7ff f80d 	bl	8005828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800680e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006812:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8006814:	f107 0310 	add.w	r3, r7, #16
 8006818:	4619      	mov	r1, r3
 800681a:	480d      	ldr	r0, [pc, #52]	; (8006850 <MX_TIM24_Init+0x98>)
 800681c:	f00c ff9c 	bl	8013758 <HAL_TIM_ConfigClockSource>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 8006826:	f7fe ffff 	bl	8005828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800682a:	2300      	movs	r3, #0
 800682c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8006832:	1d3b      	adds	r3, r7, #4
 8006834:	4619      	mov	r1, r3
 8006836:	4806      	ldr	r0, [pc, #24]	; (8006850 <MX_TIM24_Init+0x98>)
 8006838:	f00d fdca 	bl	80143d0 <HAL_TIMEx_MasterConfigSynchronization>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8006842:	f7fe fff1 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 8006846:	bf00      	nop
 8006848:	3720      	adds	r7, #32
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20001128 	.word	0x20001128
 8006854:	4000e400 	.word	0x4000e400

08006858 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b08a      	sub	sp, #40	; 0x28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006860:	f107 0314 	add.w	r3, r7, #20
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	605a      	str	r2, [r3, #4]
 800686a:	609a      	str	r2, [r3, #8]
 800686c:	60da      	str	r2, [r3, #12]
 800686e:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a3c      	ldr	r2, [pc, #240]	; (8006968 <HAL_TIM_PWM_MspInit+0x110>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d15e      	bne.n	8006938 <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800687a:	4b3c      	ldr	r3, [pc, #240]	; (800696c <HAL_TIM_PWM_MspInit+0x114>)
 800687c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006880:	4a3a      	ldr	r2, [pc, #232]	; (800696c <HAL_TIM_PWM_MspInit+0x114>)
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800688a:	4b38      	ldr	r3, [pc, #224]	; (800696c <HAL_TIM_PWM_MspInit+0x114>)
 800688c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	613b      	str	r3, [r7, #16]
 8006896:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006898:	4b34      	ldr	r3, [pc, #208]	; (800696c <HAL_TIM_PWM_MspInit+0x114>)
 800689a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800689e:	4a33      	ldr	r2, [pc, #204]	; (800696c <HAL_TIM_PWM_MspInit+0x114>)
 80068a0:	f043 0301 	orr.w	r3, r3, #1
 80068a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068a8:	4b30      	ldr	r3, [pc, #192]	; (800696c <HAL_TIM_PWM_MspInit+0x114>)
 80068aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 80068b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068bc:	2302      	movs	r3, #2
 80068be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068c4:	2300      	movs	r3, #0
 80068c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80068c8:	2301      	movs	r3, #1
 80068ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 80068cc:	f107 0314 	add.w	r3, r7, #20
 80068d0:	4619      	mov	r1, r3
 80068d2:	4827      	ldr	r0, [pc, #156]	; (8006970 <HAL_TIM_PWM_MspInit+0x118>)
 80068d4:	f006 f900 	bl	800cad8 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 80068d8:	4b26      	ldr	r3, [pc, #152]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 80068da:	4a27      	ldr	r2, [pc, #156]	; (8006978 <HAL_TIM_PWM_MspInit+0x120>)
 80068dc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80068de:	4b25      	ldr	r3, [pc, #148]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 80068e0:	220b      	movs	r2, #11
 80068e2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068e4:	4b23      	ldr	r3, [pc, #140]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 80068e6:	2240      	movs	r2, #64	; 0x40
 80068e8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80068ea:	4b22      	ldr	r3, [pc, #136]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80068f0:	4b20      	ldr	r3, [pc, #128]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 80068f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068f6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80068f8:	4b1e      	ldr	r3, [pc, #120]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 80068fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068fe:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006900:	4b1c      	ldr	r3, [pc, #112]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 8006902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006906:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8006908:	4b1a      	ldr	r3, [pc, #104]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 800690a:	2200      	movs	r2, #0
 800690c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800690e:	4b19      	ldr	r3, [pc, #100]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 8006910:	2200      	movs	r2, #0
 8006912:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006914:	4b17      	ldr	r3, [pc, #92]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 8006916:	2200      	movs	r2, #0
 8006918:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800691a:	4816      	ldr	r0, [pc, #88]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 800691c:	f003 fa94 	bl	8009e48 <HAL_DMA_Init>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 8006926:	f7fe ff7f 	bl	8005828 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a11      	ldr	r2, [pc, #68]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 800692e:	625a      	str	r2, [r3, #36]	; 0x24
 8006930:	4a10      	ldr	r2, [pc, #64]	; (8006974 <HAL_TIM_PWM_MspInit+0x11c>)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8006936:	e013      	b.n	8006960 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a0f      	ldr	r2, [pc, #60]	; (800697c <HAL_TIM_PWM_MspInit+0x124>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d10e      	bne.n	8006960 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <HAL_TIM_PWM_MspInit+0x114>)
 8006944:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006948:	4a08      	ldr	r2, [pc, #32]	; (800696c <HAL_TIM_PWM_MspInit+0x114>)
 800694a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800694e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006952:	4b06      	ldr	r3, [pc, #24]	; (800696c <HAL_TIM_PWM_MspInit+0x114>)
 8006954:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	68bb      	ldr	r3, [r7, #8]
}
 8006960:	bf00      	nop
 8006962:	3728      	adds	r7, #40	; 0x28
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	40010000 	.word	0x40010000
 800696c:	58024400 	.word	0x58024400
 8006970:	58020000 	.word	0x58020000
 8006974:	20001174 	.word	0x20001174
 8006978:	40020010 	.word	0x40020010
 800697c:	40014000 	.word	0x40014000

08006980 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08e      	sub	sp, #56	; 0x38
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	605a      	str	r2, [r3, #4]
 8006992:	609a      	str	r2, [r3, #8]
 8006994:	60da      	str	r2, [r3, #12]
 8006996:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a0:	d14e      	bne.n	8006a40 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069a2:	4b5d      	ldr	r3, [pc, #372]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 80069a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069a8:	4a5b      	ldr	r2, [pc, #364]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80069b2:	4b59      	ldr	r3, [pc, #356]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 80069b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	623b      	str	r3, [r7, #32]
 80069be:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069c0:	4b55      	ldr	r3, [pc, #340]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 80069c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069c6:	4a54      	ldr	r2, [pc, #336]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 80069c8:	f043 0301 	orr.w	r3, r3, #1
 80069cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069d0:	4b51      	ldr	r3, [pc, #324]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 80069d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069d6:	f003 0301 	and.w	r3, r3, #1
 80069da:	61fb      	str	r3, [r7, #28]
 80069dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069de:	4b4e      	ldr	r3, [pc, #312]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 80069e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069e4:	4a4c      	ldr	r2, [pc, #304]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 80069e6:	f043 0302 	orr.w	r3, r3, #2
 80069ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069ee:	4b4a      	ldr	r3, [pc, #296]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 80069f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	61bb      	str	r3, [r7, #24]
 80069fa:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC6A_Pin;
 80069fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a02:	2302      	movs	r3, #2
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8006a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a16:	4619      	mov	r1, r3
 8006a18:	4840      	ldr	r0, [pc, #256]	; (8006b1c <HAL_TIM_Encoder_MspInit+0x19c>)
 8006a1a:	f006 f85d 	bl	800cad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC6B_Pin;
 8006a1e:	2308      	movs	r3, #8
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a22:	2302      	movs	r3, #2
 8006a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8006a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a36:	4619      	mov	r1, r3
 8006a38:	4839      	ldr	r0, [pc, #228]	; (8006b20 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8006a3a:	f006 f84d 	bl	800cad8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8006a3e:	e067      	b.n	8006b10 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM4)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a37      	ldr	r2, [pc, #220]	; (8006b24 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d12f      	bne.n	8006aaa <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006a4a:	4b33      	ldr	r3, [pc, #204]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a50:	4a31      	ldr	r2, [pc, #196]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a52:	f043 0304 	orr.w	r3, r3, #4
 8006a56:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a5a:	4b2f      	ldr	r3, [pc, #188]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a68:	4b2b      	ldr	r3, [pc, #172]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a6e:	4a2a      	ldr	r2, [pc, #168]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a70:	f043 0308 	orr.w	r3, r3, #8
 8006a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a78:	4b27      	ldr	r3, [pc, #156]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8006a86:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a90:	2300      	movs	r3, #0
 8006a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a94:	2300      	movs	r3, #0
 8006a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4821      	ldr	r0, [pc, #132]	; (8006b28 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8006aa4:	f006 f818 	bl	800cad8 <HAL_GPIO_Init>
}
 8006aa8:	e032      	b.n	8006b10 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM8)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1f      	ldr	r2, [pc, #124]	; (8006b2c <HAL_TIM_Encoder_MspInit+0x1ac>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d12d      	bne.n	8006b10 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006ab4:	4b18      	ldr	r3, [pc, #96]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aba:	4a17      	ldr	r2, [pc, #92]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006abc:	f043 0302 	orr.w	r3, r3, #2
 8006ac0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006ac4:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006aca:	f003 0302 	and.w	r3, r3, #2
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ad2:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ad8:	4a0f      	ldr	r2, [pc, #60]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006ada:	f043 0304 	orr.w	r3, r3, #4
 8006ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ae2:	4b0d      	ldr	r3, [pc, #52]	; (8006b18 <HAL_TIM_Encoder_MspInit+0x198>)
 8006ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	60bb      	str	r3, [r7, #8]
 8006aee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8006af0:	23c0      	movs	r3, #192	; 0xc0
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006af4:	2302      	movs	r3, #2
 8006af6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006afc:	2300      	movs	r3, #0
 8006afe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006b00:	2303      	movs	r3, #3
 8006b02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4809      	ldr	r0, [pc, #36]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8006b0c:	f005 ffe4 	bl	800cad8 <HAL_GPIO_Init>
}
 8006b10:	bf00      	nop
 8006b12:	3738      	adds	r7, #56	; 0x38
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	58024400 	.word	0x58024400
 8006b1c:	58020000 	.word	0x58020000
 8006b20:	58020400 	.word	0x58020400
 8006b24:	40000800 	.word	0x40000800
 8006b28:	58020c00 	.word	0x58020c00
 8006b2c:	40010400 	.word	0x40010400
 8006b30:	58020800 	.word	0x58020800

08006b34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08c      	sub	sp, #48	; 0x30
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a62      	ldr	r2, [pc, #392]	; (8006ccc <HAL_TIM_Base_MspInit+0x198>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d10f      	bne.n	8006b66 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b46:	4b62      	ldr	r3, [pc, #392]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b4c:	4a60      	ldr	r2, [pc, #384]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b4e:	f043 0302 	orr.w	r3, r3, #2
 8006b52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b56:	4b5e      	ldr	r3, [pc, #376]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8006b64:	e0ae      	b.n	8006cc4 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM5)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a5a      	ldr	r2, [pc, #360]	; (8006cd4 <HAL_TIM_Base_MspInit+0x1a0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d10f      	bne.n	8006b90 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006b70:	4b57      	ldr	r3, [pc, #348]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b76:	4a56      	ldr	r2, [pc, #344]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b78:	f043 0308 	orr.w	r3, r3, #8
 8006b7c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b80:	4b53      	ldr	r3, [pc, #332]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006b8e:	e099      	b.n	8006cc4 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM6)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a50      	ldr	r2, [pc, #320]	; (8006cd8 <HAL_TIM_Base_MspInit+0x1a4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d10f      	bne.n	8006bba <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006b9a:	4b4d      	ldr	r3, [pc, #308]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ba0:	4a4b      	ldr	r2, [pc, #300]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006ba2:	f043 0310 	orr.w	r3, r3, #16
 8006ba6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006baa:	4b49      	ldr	r3, [pc, #292]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006bac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bb8:	e084      	b.n	8006cc4 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM13)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a47      	ldr	r2, [pc, #284]	; (8006cdc <HAL_TIM_Base_MspInit+0x1a8>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d10f      	bne.n	8006be4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006bc4:	4b42      	ldr	r3, [pc, #264]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006bc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bca:	4a41      	ldr	r2, [pc, #260]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006bcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006bd4:	4b3e      	ldr	r3, [pc, #248]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006bd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	623b      	str	r3, [r7, #32]
 8006be0:	6a3b      	ldr	r3, [r7, #32]
}
 8006be2:	e06f      	b.n	8006cc4 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM14)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a3d      	ldr	r2, [pc, #244]	; (8006ce0 <HAL_TIM_Base_MspInit+0x1ac>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d10f      	bne.n	8006c0e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006bee:	4b38      	ldr	r3, [pc, #224]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bf4:	4a36      	ldr	r2, [pc, #216]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bfa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006bfe:	4b34      	ldr	r3, [pc, #208]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	69fb      	ldr	r3, [r7, #28]
}
 8006c0c:	e05a      	b.n	8006cc4 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM16)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a34      	ldr	r2, [pc, #208]	; (8006ce4 <HAL_TIM_Base_MspInit+0x1b0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d10f      	bne.n	8006c38 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006c18:	4b2d      	ldr	r3, [pc, #180]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006c1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c1e:	4a2c      	ldr	r2, [pc, #176]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006c20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c24:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c28:	4b29      	ldr	r3, [pc, #164]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c32:	61bb      	str	r3, [r7, #24]
 8006c34:	69bb      	ldr	r3, [r7, #24]
}
 8006c36:	e045      	b.n	8006cc4 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM17)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a2a      	ldr	r2, [pc, #168]	; (8006ce8 <HAL_TIM_Base_MspInit+0x1b4>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d10f      	bne.n	8006c62 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006c42:	4b23      	ldr	r3, [pc, #140]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c48:	4a21      	ldr	r2, [pc, #132]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006c4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c4e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c52:	4b1f      	ldr	r3, [pc, #124]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	697b      	ldr	r3, [r7, #20]
}
 8006c60:	e030      	b.n	8006cc4 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM23)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a21      	ldr	r2, [pc, #132]	; (8006cec <HAL_TIM_Base_MspInit+0x1b8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d117      	bne.n	8006c9c <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8006c6c:	4b18      	ldr	r3, [pc, #96]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006c6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006c72:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006c74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c78:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006c7c:	4b14      	ldr	r3, [pc, #80]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006c7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c86:	613b      	str	r3, [r7, #16]
 8006c88:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	20a1      	movs	r0, #161	; 0xa1
 8006c90:	f002 fea7 	bl	80099e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8006c94:	20a1      	movs	r0, #161	; 0xa1
 8006c96:	f002 febe 	bl	8009a16 <HAL_NVIC_EnableIRQ>
}
 8006c9a:	e013      	b.n	8006cc4 <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM24)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a13      	ldr	r2, [pc, #76]	; (8006cf0 <HAL_TIM_Base_MspInit+0x1bc>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d10e      	bne.n	8006cc4 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8006ca6:	4b0a      	ldr	r3, [pc, #40]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006ca8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006cac:	4a08      	ldr	r2, [pc, #32]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006cae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cb2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006cb6:	4b06      	ldr	r3, [pc, #24]	; (8006cd0 <HAL_TIM_Base_MspInit+0x19c>)
 8006cb8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cc0:	60fb      	str	r3, [r7, #12]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
}
 8006cc4:	bf00      	nop
 8006cc6:	3730      	adds	r7, #48	; 0x30
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	40000400 	.word	0x40000400
 8006cd0:	58024400 	.word	0x58024400
 8006cd4:	40000c00 	.word	0x40000c00
 8006cd8:	40001000 	.word	0x40001000
 8006cdc:	40001c00 	.word	0x40001c00
 8006ce0:	40002000 	.word	0x40002000
 8006ce4:	40014400 	.word	0x40014400
 8006ce8:	40014800 	.word	0x40014800
 8006cec:	4000e000 	.word	0x4000e000
 8006cf0:	4000e400 	.word	0x4000e400

08006cf4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b090      	sub	sp, #64	; 0x40
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
 8006d04:	605a      	str	r2, [r3, #4]
 8006d06:	609a      	str	r2, [r3, #8]
 8006d08:	60da      	str	r2, [r3, #12]
 8006d0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a95      	ldr	r2, [pc, #596]	; (8006f68 <HAL_TIM_MspPostInit+0x274>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d120      	bne.n	8006d58 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d16:	4b95      	ldr	r3, [pc, #596]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d1c:	4a93      	ldr	r2, [pc, #588]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006d1e:	f043 0301 	orr.w	r3, r3, #1
 8006d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d26:	4b91      	ldr	r3, [pc, #580]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 8006d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d42:	2300      	movs	r3, #0
 8006d44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006d46:	2301      	movs	r3, #1
 8006d48:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 8006d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4887      	ldr	r0, [pc, #540]	; (8006f70 <HAL_TIM_MspPostInit+0x27c>)
 8006d52:	f005 fec1 	bl	800cad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8006d56:	e103      	b.n	8006f60 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM3)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a85      	ldr	r2, [pc, #532]	; (8006f74 <HAL_TIM_MspPostInit+0x280>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d11f      	bne.n	8006da2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d62:	4b82      	ldr	r3, [pc, #520]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d68:	4a80      	ldr	r2, [pc, #512]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006d6a:	f043 0302 	orr.w	r3, r3, #2
 8006d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d72:	4b7e      	ldr	r3, [pc, #504]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = ENC5A_GriperA_Pin|ENC5B_GriperB_Pin;
 8006d80:	2330      	movs	r3, #48	; 0x30
 8006d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d84:	2302      	movs	r3, #2
 8006d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006d90:	2302      	movs	r3, #2
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d98:	4619      	mov	r1, r3
 8006d9a:	4877      	ldr	r0, [pc, #476]	; (8006f78 <HAL_TIM_MspPostInit+0x284>)
 8006d9c:	f005 fe9c 	bl	800cad8 <HAL_GPIO_Init>
}
 8006da0:	e0de      	b.n	8006f60 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM5)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a75      	ldr	r2, [pc, #468]	; (8006f7c <HAL_TIM_MspPostInit+0x288>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d11f      	bne.n	8006dec <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dac:	4b6f      	ldr	r3, [pc, #444]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006db2:	4a6e      	ldr	r2, [pc, #440]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006db4:	f043 0301 	orr.w	r3, r3, #1
 8006db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006dbc:	4b6b      	ldr	r3, [pc, #428]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	623b      	str	r3, [r7, #32]
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006dda:	2302      	movs	r3, #2
 8006ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006dde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006de2:	4619      	mov	r1, r3
 8006de4:	4862      	ldr	r0, [pc, #392]	; (8006f70 <HAL_TIM_MspPostInit+0x27c>)
 8006de6:	f005 fe77 	bl	800cad8 <HAL_GPIO_Init>
}
 8006dea:	e0b9      	b.n	8006f60 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM13)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a63      	ldr	r2, [pc, #396]	; (8006f80 <HAL_TIM_MspPostInit+0x28c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d11f      	bne.n	8006e36 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006df6:	4b5d      	ldr	r3, [pc, #372]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dfc:	4a5b      	ldr	r2, [pc, #364]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e06:	4b59      	ldr	r3, [pc, #356]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	61fb      	str	r3, [r7, #28]
 8006e12:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e20:	2300      	movs	r3, #0
 8006e22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8006e24:	2309      	movs	r3, #9
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8006e28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4850      	ldr	r0, [pc, #320]	; (8006f70 <HAL_TIM_MspPostInit+0x27c>)
 8006e30:	f005 fe52 	bl	800cad8 <HAL_GPIO_Init>
}
 8006e34:	e094      	b.n	8006f60 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM14)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a52      	ldr	r2, [pc, #328]	; (8006f84 <HAL_TIM_MspPostInit+0x290>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d11f      	bne.n	8006e80 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e40:	4b4a      	ldr	r3, [pc, #296]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e46:	4a49      	ldr	r2, [pc, #292]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006e48:	f043 0301 	orr.w	r3, r3, #1
 8006e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e50:	4b46      	ldr	r3, [pc, #280]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	61bb      	str	r3, [r7, #24]
 8006e5c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8006e5e:	2380      	movs	r3, #128	; 0x80
 8006e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e62:	2302      	movs	r3, #2
 8006e64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e66:	2300      	movs	r3, #0
 8006e68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8006e6e:	2309      	movs	r3, #9
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8006e72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e76:	4619      	mov	r1, r3
 8006e78:	483d      	ldr	r0, [pc, #244]	; (8006f70 <HAL_TIM_MspPostInit+0x27c>)
 8006e7a:	f005 fe2d 	bl	800cad8 <HAL_GPIO_Init>
}
 8006e7e:	e06f      	b.n	8006f60 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM15)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a40      	ldr	r2, [pc, #256]	; (8006f88 <HAL_TIM_MspPostInit+0x294>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d11f      	bne.n	8006eca <HAL_TIM_MspPostInit+0x1d6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006e8a:	4b38      	ldr	r3, [pc, #224]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e90:	4a36      	ldr	r2, [pc, #216]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006e92:	f043 0310 	orr.w	r3, r3, #16
 8006e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e9a:	4b34      	ldr	r3, [pc, #208]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006ea8:	2320      	movs	r3, #32
 8006eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eac:	2302      	movs	r3, #2
 8006eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006eb8:	2304      	movs	r3, #4
 8006eba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ebc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	4832      	ldr	r0, [pc, #200]	; (8006f8c <HAL_TIM_MspPostInit+0x298>)
 8006ec4:	f005 fe08 	bl	800cad8 <HAL_GPIO_Init>
}
 8006ec8:	e04a      	b.n	8006f60 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM16)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a30      	ldr	r2, [pc, #192]	; (8006f90 <HAL_TIM_MspPostInit+0x29c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d120      	bne.n	8006f16 <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ed4:	4b25      	ldr	r3, [pc, #148]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eda:	4a24      	ldr	r2, [pc, #144]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006edc:	f043 0302 	orr.w	r3, r3, #2
 8006ee0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006ee4:	4b21      	ldr	r3, [pc, #132]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8006ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efc:	2300      	movs	r3, #0
 8006efe:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f00:	2300      	movs	r3, #0
 8006f02:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8006f04:	2301      	movs	r3, #1
 8006f06:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8006f08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	481a      	ldr	r0, [pc, #104]	; (8006f78 <HAL_TIM_MspPostInit+0x284>)
 8006f10:	f005 fde2 	bl	800cad8 <HAL_GPIO_Init>
}
 8006f14:	e024      	b.n	8006f60 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM17)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1e      	ldr	r2, [pc, #120]	; (8006f94 <HAL_TIM_MspPostInit+0x2a0>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d11f      	bne.n	8006f60 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f20:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f26:	4a11      	ldr	r2, [pc, #68]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006f28:	f043 0302 	orr.w	r3, r3, #2
 8006f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f30:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <HAL_TIM_MspPostInit+0x278>)
 8006f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8006f3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f44:	2302      	movs	r3, #2
 8006f46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8006f50:	2301      	movs	r3, #1
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 8006f54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4807      	ldr	r0, [pc, #28]	; (8006f78 <HAL_TIM_MspPostInit+0x284>)
 8006f5c:	f005 fdbc 	bl	800cad8 <HAL_GPIO_Init>
}
 8006f60:	bf00      	nop
 8006f62:	3740      	adds	r7, #64	; 0x40
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	58024400 	.word	0x58024400
 8006f70:	58020000 	.word	0x58020000
 8006f74:	40000400 	.word	0x40000400
 8006f78:	58020400 	.word	0x58020400
 8006f7c:	40000c00 	.word	0x40000c00
 8006f80:	40001c00 	.word	0x40001c00
 8006f84:	40002000 	.word	0x40002000
 8006f88:	40014000 	.word	0x40014000
 8006f8c:	58021000 	.word	0x58021000
 8006f90:	40014400 	.word	0x40014400
 8006f94:	40014800 	.word	0x40014800

08006f98 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006f9c:	4b24      	ldr	r3, [pc, #144]	; (8007030 <MX_UART5_Init+0x98>)
 8006f9e:	4a25      	ldr	r2, [pc, #148]	; (8007034 <MX_UART5_Init+0x9c>)
 8006fa0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8006fa2:	4b23      	ldr	r3, [pc, #140]	; (8007030 <MX_UART5_Init+0x98>)
 8006fa4:	4a24      	ldr	r2, [pc, #144]	; (8007038 <MX_UART5_Init+0xa0>)
 8006fa6:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006fa8:	4b21      	ldr	r3, [pc, #132]	; (8007030 <MX_UART5_Init+0x98>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006fae:	4b20      	ldr	r3, [pc, #128]	; (8007030 <MX_UART5_Init+0x98>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006fb4:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <MX_UART5_Init+0x98>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006fba:	4b1d      	ldr	r3, [pc, #116]	; (8007030 <MX_UART5_Init+0x98>)
 8006fbc:	220c      	movs	r2, #12
 8006fbe:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fc0:	4b1b      	ldr	r3, [pc, #108]	; (8007030 <MX_UART5_Init+0x98>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fc6:	4b1a      	ldr	r3, [pc, #104]	; (8007030 <MX_UART5_Init+0x98>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006fcc:	4b18      	ldr	r3, [pc, #96]	; (8007030 <MX_UART5_Init+0x98>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006fd2:	4b17      	ldr	r3, [pc, #92]	; (8007030 <MX_UART5_Init+0x98>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8006fd8:	4b15      	ldr	r3, [pc, #84]	; (8007030 <MX_UART5_Init+0x98>)
 8006fda:	2208      	movs	r2, #8
 8006fdc:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8006fde:	4b14      	ldr	r3, [pc, #80]	; (8007030 <MX_UART5_Init+0x98>)
 8006fe0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006fe4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006fe6:	4812      	ldr	r0, [pc, #72]	; (8007030 <MX_UART5_Init+0x98>)
 8006fe8:	f00d fb4c 	bl	8014684 <HAL_UART_Init>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 8006ff2:	f7fe fc19 	bl	8005828 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	480d      	ldr	r0, [pc, #52]	; (8007030 <MX_UART5_Init+0x98>)
 8006ffa:	f010 f898 	bl	801712e <HAL_UARTEx_SetTxFifoThreshold>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 8007004:	f7fe fc10 	bl	8005828 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007008:	2100      	movs	r1, #0
 800700a:	4809      	ldr	r0, [pc, #36]	; (8007030 <MX_UART5_Init+0x98>)
 800700c:	f010 f8cd 	bl	80171aa <HAL_UARTEx_SetRxFifoThreshold>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <MX_UART5_Init+0x82>
  {
    Error_Handler();
 8007016:	f7fe fc07 	bl	8005828 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800701a:	4805      	ldr	r0, [pc, #20]	; (8007030 <MX_UART5_Init+0x98>)
 800701c:	f010 f84e 	bl	80170bc <HAL_UARTEx_DisableFifoMode>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <MX_UART5_Init+0x92>
  {
    Error_Handler();
 8007026:	f7fe fbff 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800702a:	bf00      	nop
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	200011ec 	.word	0x200011ec
 8007034:	40005000 	.word	0x40005000
 8007038:	000f4240 	.word	0x000f4240

0800703c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007040:	4b22      	ldr	r3, [pc, #136]	; (80070cc <MX_USART1_UART_Init+0x90>)
 8007042:	4a23      	ldr	r2, [pc, #140]	; (80070d0 <MX_USART1_UART_Init+0x94>)
 8007044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 8007046:	4b21      	ldr	r3, [pc, #132]	; (80070cc <MX_USART1_UART_Init+0x90>)
 8007048:	4a22      	ldr	r2, [pc, #136]	; (80070d4 <MX_USART1_UART_Init+0x98>)
 800704a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800704c:	4b1f      	ldr	r3, [pc, #124]	; (80070cc <MX_USART1_UART_Init+0x90>)
 800704e:	2200      	movs	r2, #0
 8007050:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007052:	4b1e      	ldr	r3, [pc, #120]	; (80070cc <MX_USART1_UART_Init+0x90>)
 8007054:	2200      	movs	r2, #0
 8007056:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007058:	4b1c      	ldr	r3, [pc, #112]	; (80070cc <MX_USART1_UART_Init+0x90>)
 800705a:	2200      	movs	r2, #0
 800705c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800705e:	4b1b      	ldr	r3, [pc, #108]	; (80070cc <MX_USART1_UART_Init+0x90>)
 8007060:	220c      	movs	r2, #12
 8007062:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007064:	4b19      	ldr	r3, [pc, #100]	; (80070cc <MX_USART1_UART_Init+0x90>)
 8007066:	2200      	movs	r2, #0
 8007068:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800706a:	4b18      	ldr	r3, [pc, #96]	; (80070cc <MX_USART1_UART_Init+0x90>)
 800706c:	2200      	movs	r2, #0
 800706e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007070:	4b16      	ldr	r3, [pc, #88]	; (80070cc <MX_USART1_UART_Init+0x90>)
 8007072:	2200      	movs	r2, #0
 8007074:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007076:	4b15      	ldr	r3, [pc, #84]	; (80070cc <MX_USART1_UART_Init+0x90>)
 8007078:	2200      	movs	r2, #0
 800707a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800707c:	4b13      	ldr	r3, [pc, #76]	; (80070cc <MX_USART1_UART_Init+0x90>)
 800707e:	2200      	movs	r2, #0
 8007080:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007082:	4812      	ldr	r0, [pc, #72]	; (80070cc <MX_USART1_UART_Init+0x90>)
 8007084:	f00d fafe 	bl	8014684 <HAL_UART_Init>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 800708e:	f7fe fbcb 	bl	8005828 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007092:	2100      	movs	r1, #0
 8007094:	480d      	ldr	r0, [pc, #52]	; (80070cc <MX_USART1_UART_Init+0x90>)
 8007096:	f010 f84a 	bl	801712e <HAL_UARTEx_SetTxFifoThreshold>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80070a0:	f7fe fbc2 	bl	8005828 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80070a4:	2100      	movs	r1, #0
 80070a6:	4809      	ldr	r0, [pc, #36]	; (80070cc <MX_USART1_UART_Init+0x90>)
 80070a8:	f010 f87f 	bl	80171aa <HAL_UARTEx_SetRxFifoThreshold>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80070b2:	f7fe fbb9 	bl	8005828 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80070b6:	4805      	ldr	r0, [pc, #20]	; (80070cc <MX_USART1_UART_Init+0x90>)
 80070b8:	f010 f800 	bl	80170bc <HAL_UARTEx_DisableFifoMode>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d001      	beq.n	80070c6 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80070c2:	f7fe fbb1 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80070c6:	bf00      	nop
 80070c8:	bd80      	pop	{r7, pc}
 80070ca:	bf00      	nop
 80070cc:	2000127c 	.word	0x2000127c
 80070d0:	40011000 	.word	0x40011000
 80070d4:	001e8480 	.word	0x001e8480

080070d8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80070dc:	4b22      	ldr	r3, [pc, #136]	; (8007168 <MX_USART3_UART_Init+0x90>)
 80070de:	4a23      	ldr	r2, [pc, #140]	; (800716c <MX_USART3_UART_Init+0x94>)
 80070e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80070e2:	4b21      	ldr	r3, [pc, #132]	; (8007168 <MX_USART3_UART_Init+0x90>)
 80070e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80070e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80070ea:	4b1f      	ldr	r3, [pc, #124]	; (8007168 <MX_USART3_UART_Init+0x90>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80070f0:	4b1d      	ldr	r3, [pc, #116]	; (8007168 <MX_USART3_UART_Init+0x90>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80070f6:	4b1c      	ldr	r3, [pc, #112]	; (8007168 <MX_USART3_UART_Init+0x90>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80070fc:	4b1a      	ldr	r3, [pc, #104]	; (8007168 <MX_USART3_UART_Init+0x90>)
 80070fe:	220c      	movs	r2, #12
 8007100:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007102:	4b19      	ldr	r3, [pc, #100]	; (8007168 <MX_USART3_UART_Init+0x90>)
 8007104:	2200      	movs	r2, #0
 8007106:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007108:	4b17      	ldr	r3, [pc, #92]	; (8007168 <MX_USART3_UART_Init+0x90>)
 800710a:	2200      	movs	r2, #0
 800710c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800710e:	4b16      	ldr	r3, [pc, #88]	; (8007168 <MX_USART3_UART_Init+0x90>)
 8007110:	2200      	movs	r2, #0
 8007112:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007114:	4b14      	ldr	r3, [pc, #80]	; (8007168 <MX_USART3_UART_Init+0x90>)
 8007116:	2200      	movs	r2, #0
 8007118:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800711a:	4b13      	ldr	r3, [pc, #76]	; (8007168 <MX_USART3_UART_Init+0x90>)
 800711c:	2200      	movs	r2, #0
 800711e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007120:	4811      	ldr	r0, [pc, #68]	; (8007168 <MX_USART3_UART_Init+0x90>)
 8007122:	f00d faaf 	bl	8014684 <HAL_UART_Init>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800712c:	f7fe fb7c 	bl	8005828 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007130:	2100      	movs	r1, #0
 8007132:	480d      	ldr	r0, [pc, #52]	; (8007168 <MX_USART3_UART_Init+0x90>)
 8007134:	f00f fffb 	bl	801712e <HAL_UARTEx_SetTxFifoThreshold>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800713e:	f7fe fb73 	bl	8005828 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007142:	2100      	movs	r1, #0
 8007144:	4808      	ldr	r0, [pc, #32]	; (8007168 <MX_USART3_UART_Init+0x90>)
 8007146:	f010 f830 	bl	80171aa <HAL_UARTEx_SetRxFifoThreshold>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8007150:	f7fe fb6a 	bl	8005828 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8007154:	4804      	ldr	r0, [pc, #16]	; (8007168 <MX_USART3_UART_Init+0x90>)
 8007156:	f00f ffb1 	bl	80170bc <HAL_UARTEx_DisableFifoMode>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8007160:	f7fe fb62 	bl	8005828 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007164:	bf00      	nop
 8007166:	bd80      	pop	{r7, pc}
 8007168:	2000130c 	.word	0x2000130c
 800716c:	40004800 	.word	0x40004800

08007170 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08e      	sub	sp, #56	; 0x38
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800717c:	2200      	movs	r2, #0
 800717e:	601a      	str	r2, [r3, #0]
 8007180:	605a      	str	r2, [r3, #4]
 8007182:	609a      	str	r2, [r3, #8]
 8007184:	60da      	str	r2, [r3, #12]
 8007186:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a86      	ldr	r2, [pc, #536]	; (80073a8 <HAL_UART_MspInit+0x238>)
 800718e:	4293      	cmp	r3, r2
 8007190:	f040 8094 	bne.w	80072bc <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8007194:	4b85      	ldr	r3, [pc, #532]	; (80073ac <HAL_UART_MspInit+0x23c>)
 8007196:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800719a:	4a84      	ldr	r2, [pc, #528]	; (80073ac <HAL_UART_MspInit+0x23c>)
 800719c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80071a4:	4b81      	ldr	r3, [pc, #516]	; (80073ac <HAL_UART_MspInit+0x23c>)
 80071a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071ae:	623b      	str	r3, [r7, #32]
 80071b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071b2:	4b7e      	ldr	r3, [pc, #504]	; (80073ac <HAL_UART_MspInit+0x23c>)
 80071b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071b8:	4a7c      	ldr	r2, [pc, #496]	; (80073ac <HAL_UART_MspInit+0x23c>)
 80071ba:	f043 0302 	orr.w	r3, r3, #2
 80071be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80071c2:	4b7a      	ldr	r3, [pc, #488]	; (80073ac <HAL_UART_MspInit+0x23c>)
 80071c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071c8:	f003 0302 	and.w	r3, r3, #2
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80071d0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071d6:	2302      	movs	r3, #2
 80071d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071de:	2300      	movs	r3, #0
 80071e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80071e2:	230e      	movs	r3, #14
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071ea:	4619      	mov	r1, r3
 80071ec:	4870      	ldr	r0, [pc, #448]	; (80073b0 <HAL_UART_MspInit+0x240>)
 80071ee:	f005 fc73 	bl	800cad8 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream2;
 80071f2:	4b70      	ldr	r3, [pc, #448]	; (80073b4 <HAL_UART_MspInit+0x244>)
 80071f4:	4a70      	ldr	r2, [pc, #448]	; (80073b8 <HAL_UART_MspInit+0x248>)
 80071f6:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80071f8:	4b6e      	ldr	r3, [pc, #440]	; (80073b4 <HAL_UART_MspInit+0x244>)
 80071fa:	2241      	movs	r2, #65	; 0x41
 80071fc:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80071fe:	4b6d      	ldr	r3, [pc, #436]	; (80073b4 <HAL_UART_MspInit+0x244>)
 8007200:	2200      	movs	r2, #0
 8007202:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007204:	4b6b      	ldr	r3, [pc, #428]	; (80073b4 <HAL_UART_MspInit+0x244>)
 8007206:	2200      	movs	r2, #0
 8007208:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800720a:	4b6a      	ldr	r3, [pc, #424]	; (80073b4 <HAL_UART_MspInit+0x244>)
 800720c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007210:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007212:	4b68      	ldr	r3, [pc, #416]	; (80073b4 <HAL_UART_MspInit+0x244>)
 8007214:	2200      	movs	r2, #0
 8007216:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007218:	4b66      	ldr	r3, [pc, #408]	; (80073b4 <HAL_UART_MspInit+0x244>)
 800721a:	2200      	movs	r2, #0
 800721c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800721e:	4b65      	ldr	r3, [pc, #404]	; (80073b4 <HAL_UART_MspInit+0x244>)
 8007220:	2200      	movs	r2, #0
 8007222:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8007224:	4b63      	ldr	r3, [pc, #396]	; (80073b4 <HAL_UART_MspInit+0x244>)
 8007226:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800722a:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800722c:	4b61      	ldr	r3, [pc, #388]	; (80073b4 <HAL_UART_MspInit+0x244>)
 800722e:	2200      	movs	r2, #0
 8007230:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8007232:	4860      	ldr	r0, [pc, #384]	; (80073b4 <HAL_UART_MspInit+0x244>)
 8007234:	f002 fe08 	bl	8009e48 <HAL_DMA_Init>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 800723e:	f7fe faf3 	bl	8005828 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a5b      	ldr	r2, [pc, #364]	; (80073b4 <HAL_UART_MspInit+0x244>)
 8007246:	67da      	str	r2, [r3, #124]	; 0x7c
 8007248:	4a5a      	ldr	r2, [pc, #360]	; (80073b4 <HAL_UART_MspInit+0x244>)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 800724e:	4b5b      	ldr	r3, [pc, #364]	; (80073bc <HAL_UART_MspInit+0x24c>)
 8007250:	4a5b      	ldr	r2, [pc, #364]	; (80073c0 <HAL_UART_MspInit+0x250>)
 8007252:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8007254:	4b59      	ldr	r3, [pc, #356]	; (80073bc <HAL_UART_MspInit+0x24c>)
 8007256:	2242      	movs	r2, #66	; 0x42
 8007258:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800725a:	4b58      	ldr	r3, [pc, #352]	; (80073bc <HAL_UART_MspInit+0x24c>)
 800725c:	2240      	movs	r2, #64	; 0x40
 800725e:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007260:	4b56      	ldr	r3, [pc, #344]	; (80073bc <HAL_UART_MspInit+0x24c>)
 8007262:	2200      	movs	r2, #0
 8007264:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007266:	4b55      	ldr	r3, [pc, #340]	; (80073bc <HAL_UART_MspInit+0x24c>)
 8007268:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800726c:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800726e:	4b53      	ldr	r3, [pc, #332]	; (80073bc <HAL_UART_MspInit+0x24c>)
 8007270:	2200      	movs	r2, #0
 8007272:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007274:	4b51      	ldr	r3, [pc, #324]	; (80073bc <HAL_UART_MspInit+0x24c>)
 8007276:	2200      	movs	r2, #0
 8007278:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 800727a:	4b50      	ldr	r3, [pc, #320]	; (80073bc <HAL_UART_MspInit+0x24c>)
 800727c:	2200      	movs	r2, #0
 800727e:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007280:	4b4e      	ldr	r3, [pc, #312]	; (80073bc <HAL_UART_MspInit+0x24c>)
 8007282:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007286:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007288:	4b4c      	ldr	r3, [pc, #304]	; (80073bc <HAL_UART_MspInit+0x24c>)
 800728a:	2200      	movs	r2, #0
 800728c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800728e:	484b      	ldr	r0, [pc, #300]	; (80073bc <HAL_UART_MspInit+0x24c>)
 8007290:	f002 fdda 	bl	8009e48 <HAL_DMA_Init>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800729a:	f7fe fac5 	bl	8005828 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a46      	ldr	r2, [pc, #280]	; (80073bc <HAL_UART_MspInit+0x24c>)
 80072a2:	679a      	str	r2, [r3, #120]	; 0x78
 80072a4:	4a45      	ldr	r2, [pc, #276]	; (80073bc <HAL_UART_MspInit+0x24c>)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80072aa:	2200      	movs	r2, #0
 80072ac:	2100      	movs	r1, #0
 80072ae:	2035      	movs	r0, #53	; 0x35
 80072b0:	f002 fb97 	bl	80099e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80072b4:	2035      	movs	r0, #53	; 0x35
 80072b6:	f002 fbae 	bl	8009a16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80072ba:	e070      	b.n	800739e <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART1)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a40      	ldr	r2, [pc, #256]	; (80073c4 <HAL_UART_MspInit+0x254>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d12f      	bne.n	8007326 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80072c6:	4b39      	ldr	r3, [pc, #228]	; (80073ac <HAL_UART_MspInit+0x23c>)
 80072c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072cc:	4a37      	ldr	r2, [pc, #220]	; (80073ac <HAL_UART_MspInit+0x23c>)
 80072ce:	f043 0310 	orr.w	r3, r3, #16
 80072d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80072d6:	4b35      	ldr	r3, [pc, #212]	; (80073ac <HAL_UART_MspInit+0x23c>)
 80072d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072dc:	f003 0310 	and.w	r3, r3, #16
 80072e0:	61bb      	str	r3, [r7, #24]
 80072e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072e4:	4b31      	ldr	r3, [pc, #196]	; (80073ac <HAL_UART_MspInit+0x23c>)
 80072e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072ea:	4a30      	ldr	r2, [pc, #192]	; (80073ac <HAL_UART_MspInit+0x23c>)
 80072ec:	f043 0302 	orr.w	r3, r3, #2
 80072f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80072f4:	4b2d      	ldr	r3, [pc, #180]	; (80073ac <HAL_UART_MspInit+0x23c>)
 80072f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072fa:	f003 0302 	and.w	r3, r3, #2
 80072fe:	617b      	str	r3, [r7, #20]
 8007300:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8007302:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007308:	2302      	movs	r3, #2
 800730a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800730c:	2300      	movs	r3, #0
 800730e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007310:	2300      	movs	r3, #0
 8007312:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8007314:	2304      	movs	r3, #4
 8007316:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800731c:	4619      	mov	r1, r3
 800731e:	4824      	ldr	r0, [pc, #144]	; (80073b0 <HAL_UART_MspInit+0x240>)
 8007320:	f005 fbda 	bl	800cad8 <HAL_GPIO_Init>
}
 8007324:	e03b      	b.n	800739e <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a27      	ldr	r2, [pc, #156]	; (80073c8 <HAL_UART_MspInit+0x258>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d136      	bne.n	800739e <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007330:	4b1e      	ldr	r3, [pc, #120]	; (80073ac <HAL_UART_MspInit+0x23c>)
 8007332:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007336:	4a1d      	ldr	r2, [pc, #116]	; (80073ac <HAL_UART_MspInit+0x23c>)
 8007338:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800733c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007340:	4b1a      	ldr	r3, [pc, #104]	; (80073ac <HAL_UART_MspInit+0x23c>)
 8007342:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800734a:	613b      	str	r3, [r7, #16]
 800734c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800734e:	4b17      	ldr	r3, [pc, #92]	; (80073ac <HAL_UART_MspInit+0x23c>)
 8007350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007354:	4a15      	ldr	r2, [pc, #84]	; (80073ac <HAL_UART_MspInit+0x23c>)
 8007356:	f043 0308 	orr.w	r3, r3, #8
 800735a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800735e:	4b13      	ldr	r3, [pc, #76]	; (80073ac <HAL_UART_MspInit+0x23c>)
 8007360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800736c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007372:	2302      	movs	r3, #2
 8007374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007376:	2300      	movs	r3, #0
 8007378:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800737a:	2300      	movs	r3, #0
 800737c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800737e:	2307      	movs	r3, #7
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007386:	4619      	mov	r1, r3
 8007388:	4810      	ldr	r0, [pc, #64]	; (80073cc <HAL_UART_MspInit+0x25c>)
 800738a:	f005 fba5 	bl	800cad8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800738e:	2200      	movs	r2, #0
 8007390:	2100      	movs	r1, #0
 8007392:	2027      	movs	r0, #39	; 0x27
 8007394:	f002 fb25 	bl	80099e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007398:	2027      	movs	r0, #39	; 0x27
 800739a:	f002 fb3c 	bl	8009a16 <HAL_NVIC_EnableIRQ>
}
 800739e:	bf00      	nop
 80073a0:	3738      	adds	r7, #56	; 0x38
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	40005000 	.word	0x40005000
 80073ac:	58024400 	.word	0x58024400
 80073b0:	58020400 	.word	0x58020400
 80073b4:	2000139c 	.word	0x2000139c
 80073b8:	40020040 	.word	0x40020040
 80073bc:	20001414 	.word	0x20001414
 80073c0:	40020028 	.word	0x40020028
 80073c4:	40011000 	.word	0x40011000
 80073c8:	40004800 	.word	0x40004800
 80073cc:	58020c00 	.word	0x58020c00

080073d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80073d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007408 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80073d4:	f7fe fc2e 	bl	8005c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80073d8:	480c      	ldr	r0, [pc, #48]	; (800740c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80073da:	490d      	ldr	r1, [pc, #52]	; (8007410 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80073dc:	4a0d      	ldr	r2, [pc, #52]	; (8007414 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80073de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80073e0:	e002      	b.n	80073e8 <LoopCopyDataInit>

080073e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80073e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80073e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80073e6:	3304      	adds	r3, #4

080073e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80073e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80073ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80073ec:	d3f9      	bcc.n	80073e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80073ee:	4a0a      	ldr	r2, [pc, #40]	; (8007418 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80073f0:	4c0a      	ldr	r4, [pc, #40]	; (800741c <LoopFillZerobss+0x22>)
  movs r3, #0
 80073f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80073f4:	e001      	b.n	80073fa <LoopFillZerobss>

080073f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80073f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80073f8:	3204      	adds	r2, #4

080073fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80073fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80073fc:	d3fb      	bcc.n	80073f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80073fe:	f00f ff67 	bl	80172d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007402:	f7fb fcdd 	bl	8002dc0 <main>
  bx  lr
 8007406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007408:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800740c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007410:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8007414:	08018698 	.word	0x08018698
  ldr r2, =_sbss
 8007418:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 800741c:	20001490 	.word	0x20001490

08007420 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007420:	e7fe      	b.n	8007420 <ADC_IRQHandler>
	...

08007424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800742a:	2003      	movs	r0, #3
 800742c:	f002 face 	bl	80099cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007430:	f007 fe9e 	bl	800f170 <HAL_RCC_GetSysClockFreq>
 8007434:	4602      	mov	r2, r0
 8007436:	4b15      	ldr	r3, [pc, #84]	; (800748c <HAL_Init+0x68>)
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	0a1b      	lsrs	r3, r3, #8
 800743c:	f003 030f 	and.w	r3, r3, #15
 8007440:	4913      	ldr	r1, [pc, #76]	; (8007490 <HAL_Init+0x6c>)
 8007442:	5ccb      	ldrb	r3, [r1, r3]
 8007444:	f003 031f 	and.w	r3, r3, #31
 8007448:	fa22 f303 	lsr.w	r3, r2, r3
 800744c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800744e:	4b0f      	ldr	r3, [pc, #60]	; (800748c <HAL_Init+0x68>)
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	4a0e      	ldr	r2, [pc, #56]	; (8007490 <HAL_Init+0x6c>)
 8007458:	5cd3      	ldrb	r3, [r2, r3]
 800745a:	f003 031f 	and.w	r3, r3, #31
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
 8007464:	4a0b      	ldr	r2, [pc, #44]	; (8007494 <HAL_Init+0x70>)
 8007466:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007468:	4a0b      	ldr	r2, [pc, #44]	; (8007498 <HAL_Init+0x74>)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800746e:	2000      	movs	r0, #0
 8007470:	f000 f814 	bl	800749c <HAL_InitTick>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e002      	b.n	8007484 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800747e:	f7fe fb45 	bl	8005b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	58024400 	.word	0x58024400
 8007490:	08018400 	.word	0x08018400
 8007494:	20000024 	.word	0x20000024
 8007498:	20000020 	.word	0x20000020

0800749c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80074a4:	4b15      	ldr	r3, [pc, #84]	; (80074fc <HAL_InitTick+0x60>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e021      	b.n	80074f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80074b0:	4b13      	ldr	r3, [pc, #76]	; (8007500 <HAL_InitTick+0x64>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	4b11      	ldr	r3, [pc, #68]	; (80074fc <HAL_InitTick+0x60>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	4619      	mov	r1, r3
 80074ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074be:	fbb3 f3f1 	udiv	r3, r3, r1
 80074c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c6:	4618      	mov	r0, r3
 80074c8:	f002 fab3 	bl	8009a32 <HAL_SYSTICK_Config>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e00e      	b.n	80074f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b0f      	cmp	r3, #15
 80074da:	d80a      	bhi.n	80074f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80074dc:	2200      	movs	r2, #0
 80074de:	6879      	ldr	r1, [r7, #4]
 80074e0:	f04f 30ff 	mov.w	r0, #4294967295
 80074e4:	f002 fa7d 	bl	80099e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80074e8:	4a06      	ldr	r2, [pc, #24]	; (8007504 <HAL_InitTick+0x68>)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	e000      	b.n	80074f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	2000002c 	.word	0x2000002c
 8007500:	20000020 	.word	0x20000020
 8007504:	20000028 	.word	0x20000028

08007508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800750c:	4b06      	ldr	r3, [pc, #24]	; (8007528 <HAL_IncTick+0x20>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	461a      	mov	r2, r3
 8007512:	4b06      	ldr	r3, [pc, #24]	; (800752c <HAL_IncTick+0x24>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4413      	add	r3, r2
 8007518:	4a04      	ldr	r2, [pc, #16]	; (800752c <HAL_IncTick+0x24>)
 800751a:	6013      	str	r3, [r2, #0]
}
 800751c:	bf00      	nop
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	2000002c 	.word	0x2000002c
 800752c:	2000148c 	.word	0x2000148c

08007530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
  return uwTick;
 8007534:	4b03      	ldr	r3, [pc, #12]	; (8007544 <HAL_GetTick+0x14>)
 8007536:	681b      	ldr	r3, [r3, #0]
}
 8007538:	4618      	mov	r0, r3
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	2000148c 	.word	0x2000148c

08007548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007550:	f7ff ffee 	bl	8007530 <HAL_GetTick>
 8007554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007560:	d005      	beq.n	800756e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007562:	4b0a      	ldr	r3, [pc, #40]	; (800758c <HAL_Delay+0x44>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	461a      	mov	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	4413      	add	r3, r2
 800756c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800756e:	bf00      	nop
 8007570:	f7ff ffde 	bl	8007530 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	429a      	cmp	r2, r3
 800757e:	d8f7      	bhi.n	8007570 <HAL_Delay+0x28>
  {
  }
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	2000002c 	.word	0x2000002c

08007590 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	431a      	orrs	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	609a      	str	r2, [r3, #8]
}
 80075aa:	bf00      	nop
 80075ac:	370c      	adds	r7, #12
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b083      	sub	sp, #12
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	609a      	str	r2, [r3, #8]
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3360      	adds	r3, #96	; 0x60
 800760a:	461a      	mov	r2, r3
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	4a10      	ldr	r2, [pc, #64]	; (8007658 <LL_ADC_SetOffset+0x60>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d10b      	bne.n	8007634 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	4313      	orrs	r3, r2
 800762a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8007632:	e00b      	b.n	800764c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	430b      	orrs	r3, r1
 8007646:	431a      	orrs	r2, r3
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	601a      	str	r2, [r3, #0]
}
 800764c:	bf00      	nop
 800764e:	371c      	adds	r7, #28
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr
 8007658:	58026000 	.word	0x58026000

0800765c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3360      	adds	r3, #96	; 0x60
 800766a:	461a      	mov	r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800767c:	4618      	mov	r0, r3
 800767e:	3714      	adds	r7, #20
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	6879      	ldr	r1, [r7, #4]
 80076a4:	fa01 f303 	lsl.w	r3, r1, r3
 80076a8:	431a      	orrs	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	611a      	str	r2, [r3, #16]
}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
	...

080076bc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4a0c      	ldr	r2, [pc, #48]	; (80076fc <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00e      	beq.n	80076ee <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3360      	adds	r3, #96	; 0x60
 80076d4:	461a      	mov	r2, r3
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	431a      	orrs	r2, r3
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	601a      	str	r2, [r3, #0]
  }
}
 80076ee:	bf00      	nop
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	58026000 	.word	0x58026000

08007700 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4a0c      	ldr	r2, [pc, #48]	; (8007740 <LL_ADC_SetOffsetSaturation+0x40>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d10e      	bne.n	8007732 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	3360      	adds	r3, #96	; 0x60
 8007718:	461a      	mov	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4413      	add	r3, r2
 8007720:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	431a      	orrs	r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	58026000 	.word	0x58026000

08007744 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	4a0c      	ldr	r2, [pc, #48]	; (8007784 <LL_ADC_SetOffsetSign+0x40>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d10e      	bne.n	8007776 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	3360      	adds	r3, #96	; 0x60
 800775c:	461a      	mov	r2, r3
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	4413      	add	r3, r2
 8007764:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	431a      	orrs	r2, r3
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8007776:	bf00      	nop
 8007778:	371c      	adds	r7, #28
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	58026000 	.word	0x58026000

08007788 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007788:	b480      	push	{r7}
 800778a:	b087      	sub	sp, #28
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	3360      	adds	r3, #96	; 0x60
 8007798:	461a      	mov	r2, r3
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	4413      	add	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	4a0c      	ldr	r2, [pc, #48]	; (80077d8 <LL_ADC_SetOffsetState+0x50>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d108      	bne.n	80077bc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	431a      	orrs	r2, r3
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80077ba:	e007      	b.n	80077cc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	431a      	orrs	r2, r3
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	601a      	str	r2, [r3, #0]
}
 80077cc:	bf00      	nop
 80077ce:	371c      	adds	r7, #28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr
 80077d8:	58026000 	.word	0x58026000

080077dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007802:	b480      	push	{r7}
 8007804:	b087      	sub	sp, #28
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	60b9      	str	r1, [r7, #8]
 800780c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3330      	adds	r3, #48	; 0x30
 8007812:	461a      	mov	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	0a1b      	lsrs	r3, r3, #8
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	f003 030c 	and.w	r3, r3, #12
 800781e:	4413      	add	r3, r2
 8007820:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	211f      	movs	r1, #31
 800782e:	fa01 f303 	lsl.w	r3, r1, r3
 8007832:	43db      	mvns	r3, r3
 8007834:	401a      	ands	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	0e9b      	lsrs	r3, r3, #26
 800783a:	f003 011f 	and.w	r1, r3, #31
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f003 031f 	and.w	r3, r3, #31
 8007844:	fa01 f303 	lsl.w	r3, r1, r3
 8007848:	431a      	orrs	r2, r3
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800784e:	bf00      	nop
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800785a:	b480      	push	{r7}
 800785c:	b083      	sub	sp, #12
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007866:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	370c      	adds	r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr

08007880 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007880:	b480      	push	{r7}
 8007882:	b087      	sub	sp, #28
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	3314      	adds	r3, #20
 8007890:	461a      	mov	r2, r3
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	0e5b      	lsrs	r3, r3, #25
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	4413      	add	r3, r2
 800789e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	0d1b      	lsrs	r3, r3, #20
 80078a8:	f003 031f 	and.w	r3, r3, #31
 80078ac:	2107      	movs	r1, #7
 80078ae:	fa01 f303 	lsl.w	r3, r1, r3
 80078b2:	43db      	mvns	r3, r3
 80078b4:	401a      	ands	r2, r3
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	0d1b      	lsrs	r3, r3, #20
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	fa01 f303 	lsl.w	r3, r1, r3
 80078c4:	431a      	orrs	r2, r3
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80078ca:	bf00      	nop
 80078cc:	371c      	adds	r7, #28
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
	...

080078d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4a1a      	ldr	r2, [pc, #104]	; (8007950 <LL_ADC_SetChannelSingleDiff+0x78>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d115      	bne.n	8007918 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078f8:	43db      	mvns	r3, r3
 80078fa:	401a      	ands	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f003 0318 	and.w	r3, r3, #24
 8007902:	4914      	ldr	r1, [pc, #80]	; (8007954 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007904:	40d9      	lsrs	r1, r3
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	400b      	ands	r3, r1
 800790a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800790e:	431a      	orrs	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8007916:	e014      	b.n	8007942 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007924:	43db      	mvns	r3, r3
 8007926:	401a      	ands	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f003 0318 	and.w	r3, r3, #24
 800792e:	4909      	ldr	r1, [pc, #36]	; (8007954 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007930:	40d9      	lsrs	r1, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	400b      	ands	r3, r1
 8007936:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800793a:	431a      	orrs	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8007942:	bf00      	nop
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	58026000 	.word	0x58026000
 8007954:	000fffff 	.word	0x000fffff

08007958 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	f003 031f 	and.w	r3, r3, #31
}
 8007968:	4618      	mov	r0, r3
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8007984:	4618      	mov	r0, r3
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800799e:	4013      	ands	r3, r2
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	6093      	str	r3, [r2, #8]
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr
 80079b0:	5fffffc0 	.word	0x5fffffc0

080079b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c8:	d101      	bne.n	80079ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80079ca:	2301      	movs	r3, #1
 80079cc:	e000      	b.n	80079d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	689a      	ldr	r2, [r3, #8]
 80079e8:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <LL_ADC_EnableInternalRegulator+0x24>)
 80079ea:	4013      	ands	r3, r2
 80079ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr
 8007a00:	6fffffc0 	.word	0x6fffffc0

08007a04 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a18:	d101      	bne.n	8007a1e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	e000      	b.n	8007a20 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <LL_ADC_Enable+0x24>)
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	f043 0201 	orr.w	r2, r3, #1
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	7fffffc0 	.word	0x7fffffc0

08007a54 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	689a      	ldr	r2, [r3, #8]
 8007a60:	4b05      	ldr	r3, [pc, #20]	; (8007a78 <LL_ADC_Disable+0x24>)
 8007a62:	4013      	ands	r3, r2
 8007a64:	f043 0202 	orr.w	r2, r3, #2
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	7fffffc0 	.word	0x7fffffc0

08007a7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	689b      	ldr	r3, [r3, #8]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <LL_ADC_IsEnabled+0x18>
 8007a90:	2301      	movs	r3, #1
 8007a92:	e000      	b.n	8007a96 <LL_ADC_IsEnabled+0x1a>
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	d101      	bne.n	8007aba <LL_ADC_IsDisableOngoing+0x18>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e000      	b.n	8007abc <LL_ADC_IsDisableOngoing+0x1a>
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689a      	ldr	r2, [r3, #8]
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <LL_ADC_REG_StartConversion+0x24>)
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	f043 0204 	orr.w	r2, r3, #4
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr
 8007aec:	7fffffc0 	.word	0x7fffffc0

08007af0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b083      	sub	sp, #12
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f003 0304 	and.w	r3, r3, #4
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d101      	bne.n	8007b08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d101      	bne.n	8007b2e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007b3c:	b590      	push	{r4, r7, lr}
 8007b3e:	b089      	sub	sp, #36	; 0x24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b44:	2300      	movs	r3, #0
 8007b46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e1ee      	b.n	8007f34 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d109      	bne.n	8007b78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7f9 f973 	bl	8000e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7ff ff19 	bl	80079b4 <LL_ADC_IsDeepPowerDownEnabled>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d004      	beq.n	8007b92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff feff 	bl	8007990 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff ff34 	bl	8007a04 <LL_ADC_IsInternalRegulatorEnabled>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d114      	bne.n	8007bcc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7ff ff18 	bl	80079dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007bac:	4b8e      	ldr	r3, [pc, #568]	; (8007de8 <HAL_ADC_Init+0x2ac>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	099b      	lsrs	r3, r3, #6
 8007bb2:	4a8e      	ldr	r2, [pc, #568]	; (8007dec <HAL_ADC_Init+0x2b0>)
 8007bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb8:	099b      	lsrs	r3, r3, #6
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007bbe:	e002      	b.n	8007bc6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d1f9      	bne.n	8007bc0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff ff17 	bl	8007a04 <LL_ADC_IsInternalRegulatorEnabled>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10d      	bne.n	8007bf8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007be0:	f043 0210 	orr.w	r2, r3, #16
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bec:	f043 0201 	orr.w	r2, r3, #1
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7ff ff77 	bl	8007af0 <LL_ADC_REG_IsConversionOngoing>
 8007c02:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 8188 	bne.w	8007f22 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007c12:	697b      	ldr	r3, [r7, #20]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f040 8184 	bne.w	8007f22 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c1e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007c22:	f043 0202 	orr.w	r2, r3, #2
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff ff24 	bl	8007a7c <LL_ADC_IsEnabled>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d136      	bne.n	8007ca8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a6c      	ldr	r2, [pc, #432]	; (8007df0 <HAL_ADC_Init+0x2b4>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d004      	beq.n	8007c4e <HAL_ADC_Init+0x112>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a6a      	ldr	r2, [pc, #424]	; (8007df4 <HAL_ADC_Init+0x2b8>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d10e      	bne.n	8007c6c <HAL_ADC_Init+0x130>
 8007c4e:	4868      	ldr	r0, [pc, #416]	; (8007df0 <HAL_ADC_Init+0x2b4>)
 8007c50:	f7ff ff14 	bl	8007a7c <LL_ADC_IsEnabled>
 8007c54:	4604      	mov	r4, r0
 8007c56:	4867      	ldr	r0, [pc, #412]	; (8007df4 <HAL_ADC_Init+0x2b8>)
 8007c58:	f7ff ff10 	bl	8007a7c <LL_ADC_IsEnabled>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	4323      	orrs	r3, r4
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	bf0c      	ite	eq
 8007c64:	2301      	moveq	r3, #1
 8007c66:	2300      	movne	r3, #0
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	e008      	b.n	8007c7e <HAL_ADC_Init+0x142>
 8007c6c:	4862      	ldr	r0, [pc, #392]	; (8007df8 <HAL_ADC_Init+0x2bc>)
 8007c6e:	f7ff ff05 	bl	8007a7c <LL_ADC_IsEnabled>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	bf0c      	ite	eq
 8007c78:	2301      	moveq	r3, #1
 8007c7a:	2300      	movne	r3, #0
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d012      	beq.n	8007ca8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a5a      	ldr	r2, [pc, #360]	; (8007df0 <HAL_ADC_Init+0x2b4>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d004      	beq.n	8007c96 <HAL_ADC_Init+0x15a>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a58      	ldr	r2, [pc, #352]	; (8007df4 <HAL_ADC_Init+0x2b8>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d101      	bne.n	8007c9a <HAL_ADC_Init+0x15e>
 8007c96:	4a59      	ldr	r2, [pc, #356]	; (8007dfc <HAL_ADC_Init+0x2c0>)
 8007c98:	e000      	b.n	8007c9c <HAL_ADC_Init+0x160>
 8007c9a:	4a59      	ldr	r2, [pc, #356]	; (8007e00 <HAL_ADC_Init+0x2c4>)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	f7ff fc74 	bl	8007590 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a52      	ldr	r2, [pc, #328]	; (8007df8 <HAL_ADC_Init+0x2bc>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d129      	bne.n	8007d06 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	7e5b      	ldrb	r3, [r3, #25]
 8007cb6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007cbc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8007cc2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d013      	beq.n	8007cf4 <HAL_ADC_Init+0x1b8>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	689b      	ldr	r3, [r3, #8]
 8007cd0:	2b0c      	cmp	r3, #12
 8007cd2:	d00d      	beq.n	8007cf0 <HAL_ADC_Init+0x1b4>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	2b1c      	cmp	r3, #28
 8007cda:	d007      	beq.n	8007cec <HAL_ADC_Init+0x1b0>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2b18      	cmp	r3, #24
 8007ce2:	d101      	bne.n	8007ce8 <HAL_ADC_Init+0x1ac>
 8007ce4:	2318      	movs	r3, #24
 8007ce6:	e006      	b.n	8007cf6 <HAL_ADC_Init+0x1ba>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	e004      	b.n	8007cf6 <HAL_ADC_Init+0x1ba>
 8007cec:	2310      	movs	r3, #16
 8007cee:	e002      	b.n	8007cf6 <HAL_ADC_Init+0x1ba>
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	e000      	b.n	8007cf6 <HAL_ADC_Init+0x1ba>
 8007cf4:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8007cf6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cfe:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007d00:	4313      	orrs	r3, r2
 8007d02:	61bb      	str	r3, [r7, #24]
 8007d04:	e00e      	b.n	8007d24 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	7e5b      	ldrb	r3, [r3, #25]
 8007d0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007d10:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007d16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007d20:	4313      	orrs	r3, r2
 8007d22:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d106      	bne.n	8007d3c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	3b01      	subs	r3, #1
 8007d34:	045b      	lsls	r3, r3, #17
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d009      	beq.n	8007d58 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d48:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a26      	ldr	r2, [pc, #152]	; (8007df8 <HAL_ADC_Init+0x2bc>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d115      	bne.n	8007d8e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	4b26      	ldr	r3, [pc, #152]	; (8007e04 <HAL_ADC_Init+0x2c8>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6812      	ldr	r2, [r2, #0]
 8007d70:	69b9      	ldr	r1, [r7, #24]
 8007d72:	430b      	orrs	r3, r1
 8007d74:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	430a      	orrs	r2, r1
 8007d8a:	611a      	str	r2, [r3, #16]
 8007d8c:	e009      	b.n	8007da2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68da      	ldr	r2, [r3, #12]
 8007d94:	4b1c      	ldr	r3, [pc, #112]	; (8007e08 <HAL_ADC_Init+0x2cc>)
 8007d96:	4013      	ands	r3, r2
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	6812      	ldr	r2, [r2, #0]
 8007d9c:	69b9      	ldr	r1, [r7, #24]
 8007d9e:	430b      	orrs	r3, r1
 8007da0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff fea2 	bl	8007af0 <LL_ADC_REG_IsConversionOngoing>
 8007dac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7ff feaf 	bl	8007b16 <LL_ADC_INJ_IsConversionOngoing>
 8007db8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f040 808e 	bne.w	8007ede <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f040 808a 	bne.w	8007ede <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a0a      	ldr	r2, [pc, #40]	; (8007df8 <HAL_ADC_Init+0x2bc>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d11b      	bne.n	8007e0c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7e1b      	ldrb	r3, [r3, #24]
 8007dd8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007de0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8007de2:	4313      	orrs	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
 8007de6:	e018      	b.n	8007e1a <HAL_ADC_Init+0x2de>
 8007de8:	20000020 	.word	0x20000020
 8007dec:	053e2d63 	.word	0x053e2d63
 8007df0:	40022000 	.word	0x40022000
 8007df4:	40022100 	.word	0x40022100
 8007df8:	58026000 	.word	0x58026000
 8007dfc:	40022300 	.word	0x40022300
 8007e00:	58026300 	.word	0x58026300
 8007e04:	fff04007 	.word	0xfff04007
 8007e08:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	7e1b      	ldrb	r3, [r3, #24]
 8007e10:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8007e16:	4313      	orrs	r3, r2
 8007e18:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	4b46      	ldr	r3, [pc, #280]	; (8007f3c <HAL_ADC_Init+0x400>)
 8007e22:	4013      	ands	r3, r2
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	6812      	ldr	r2, [r2, #0]
 8007e28:	69b9      	ldr	r1, [r7, #24]
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d137      	bne.n	8007ea8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e3c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a3f      	ldr	r2, [pc, #252]	; (8007f40 <HAL_ADC_Init+0x404>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d116      	bne.n	8007e76 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	691a      	ldr	r2, [r3, #16]
 8007e4e:	4b3d      	ldr	r3, [pc, #244]	; (8007f44 <HAL_ADC_Init+0x408>)
 8007e50:	4013      	ands	r3, r2
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007e5a:	4311      	orrs	r1, r2
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e60:	4311      	orrs	r1, r2
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007e66:	430a      	orrs	r2, r1
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0201 	orr.w	r2, r2, #1
 8007e72:	611a      	str	r2, [r3, #16]
 8007e74:	e020      	b.n	8007eb8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	691a      	ldr	r2, [r3, #16]
 8007e7c:	4b32      	ldr	r3, [pc, #200]	; (8007f48 <HAL_ADC_Init+0x40c>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e84:	3a01      	subs	r2, #1
 8007e86:	0411      	lsls	r1, r2, #16
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007e8c:	4311      	orrs	r1, r2
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e92:	4311      	orrs	r1, r2
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007e98:	430a      	orrs	r2, r1
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f042 0201 	orr.w	r2, r2, #1
 8007ea4:	611a      	str	r2, [r3, #16]
 8007ea6:	e007      	b.n	8007eb8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691a      	ldr	r2, [r3, #16]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0201 	bic.w	r2, r2, #1
 8007eb6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a1b      	ldr	r2, [pc, #108]	; (8007f40 <HAL_ADC_Init+0x404>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d002      	beq.n	8007ede <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 f9e9 	bl	80092b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d10c      	bne.n	8007f00 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eec:	f023 010f 	bic.w	r1, r3, #15
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	69db      	ldr	r3, [r3, #28]
 8007ef4:	1e5a      	subs	r2, r3, #1
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	631a      	str	r2, [r3, #48]	; 0x30
 8007efe:	e007      	b.n	8007f10 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 020f 	bic.w	r2, r2, #15
 8007f0e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f14:	f023 0303 	bic.w	r3, r3, #3
 8007f18:	f043 0201 	orr.w	r2, r3, #1
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	661a      	str	r2, [r3, #96]	; 0x60
 8007f20:	e007      	b.n	8007f32 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f26:	f043 0210 	orr.w	r2, r3, #16
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007f32:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3724      	adds	r7, #36	; 0x24
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd90      	pop	{r4, r7, pc}
 8007f3c:	ffffbffc 	.word	0xffffbffc
 8007f40:	58026000 	.word	0x58026000
 8007f44:	fc00f81f 	.word	0xfc00f81f
 8007f48:	fc00f81e 	.word	0xfc00f81e

08007f4c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a90      	ldr	r2, [pc, #576]	; (800819c <HAL_ADC_Start_IT+0x250>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d004      	beq.n	8007f68 <HAL_ADC_Start_IT+0x1c>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a8f      	ldr	r2, [pc, #572]	; (80081a0 <HAL_ADC_Start_IT+0x254>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d101      	bne.n	8007f6c <HAL_ADC_Start_IT+0x20>
 8007f68:	4b8e      	ldr	r3, [pc, #568]	; (80081a4 <HAL_ADC_Start_IT+0x258>)
 8007f6a:	e000      	b.n	8007f6e <HAL_ADC_Start_IT+0x22>
 8007f6c:	4b8e      	ldr	r3, [pc, #568]	; (80081a8 <HAL_ADC_Start_IT+0x25c>)
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff fcf2 	bl	8007958 <LL_ADC_GetMultimode>
 8007f74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7ff fdb8 	bl	8007af0 <LL_ADC_REG_IsConversionOngoing>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f040 8119 	bne.w	80081ba <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <HAL_ADC_Start_IT+0x4a>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e116      	b.n	80081c4 <HAL_ADC_Start_IT+0x278>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 f89c 	bl	80090dc <ADC_Enable>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 8100 	bne.w	80081b0 <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007fb4:	4b7d      	ldr	r3, [pc, #500]	; (80081ac <HAL_ADC_Start_IT+0x260>)
 8007fb6:	4013      	ands	r3, r2
 8007fb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a76      	ldr	r2, [pc, #472]	; (80081a0 <HAL_ADC_Start_IT+0x254>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d002      	beq.n	8007fd0 <HAL_ADC_Start_IT+0x84>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	e000      	b.n	8007fd2 <HAL_ADC_Start_IT+0x86>
 8007fd0:	4b72      	ldr	r3, [pc, #456]	; (800819c <HAL_ADC_Start_IT+0x250>)
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6812      	ldr	r2, [r2, #0]
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d002      	beq.n	8007fe0 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d105      	bne.n	8007fec <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d006      	beq.n	8008006 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ffc:	f023 0206 	bic.w	r2, r3, #6
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	665a      	str	r2, [r3, #100]	; 0x64
 8008004:	e002      	b.n	800800c <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	221c      	movs	r2, #28
 8008012:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685a      	ldr	r2, [r3, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 021c 	bic.w	r2, r2, #28
 800802a:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	695b      	ldr	r3, [r3, #20]
 8008030:	2b08      	cmp	r3, #8
 8008032:	d108      	bne.n	8008046 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f042 0208 	orr.w	r2, r2, #8
 8008042:	605a      	str	r2, [r3, #4]
          break;
 8008044:	e008      	b.n	8008058 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f042 0204 	orr.w	r2, r2, #4
 8008054:	605a      	str	r2, [r3, #4]
          break;
 8008056:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805c:	2b00      	cmp	r3, #0
 800805e:	d107      	bne.n	8008070 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f042 0210 	orr.w	r2, r2, #16
 800806e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a4a      	ldr	r2, [pc, #296]	; (80081a0 <HAL_ADC_Start_IT+0x254>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d002      	beq.n	8008080 <HAL_ADC_Start_IT+0x134>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	e000      	b.n	8008082 <HAL_ADC_Start_IT+0x136>
 8008080:	4b46      	ldr	r3, [pc, #280]	; (800819c <HAL_ADC_Start_IT+0x250>)
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	6812      	ldr	r2, [r2, #0]
 8008086:	4293      	cmp	r3, r2
 8008088:	d008      	beq.n	800809c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	2b05      	cmp	r3, #5
 8008094:	d002      	beq.n	800809c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2b09      	cmp	r3, #9
 800809a:	d13b      	bne.n	8008114 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d02d      	beq.n	8008106 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80080b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	695b      	ldr	r3, [r3, #20]
 80080be:	2b08      	cmp	r3, #8
 80080c0:	d110      	bne.n	80080e4 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f022 0220 	bic.w	r2, r2, #32
 80080d0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080e0:	605a      	str	r2, [r3, #4]
              break;
 80080e2:	e011      	b.n	8008108 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080f2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685a      	ldr	r2, [r3, #4]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0220 	orr.w	r2, r2, #32
 8008102:	605a      	str	r2, [r3, #4]
              break;
 8008104:	e000      	b.n	8008108 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8008106:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff fcdb 	bl	8007ac8 <LL_ADC_REG_StartConversion>
 8008112:	e056      	b.n	80081c2 <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008118:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1e      	ldr	r2, [pc, #120]	; (80081a0 <HAL_ADC_Start_IT+0x254>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d002      	beq.n	8008130 <HAL_ADC_Start_IT+0x1e4>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	e000      	b.n	8008132 <HAL_ADC_Start_IT+0x1e6>
 8008130:	4b1a      	ldr	r3, [pc, #104]	; (800819c <HAL_ADC_Start_IT+0x250>)
 8008132:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800813c:	2b00      	cmp	r3, #0
 800813e:	d03f      	beq.n	80081c0 <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008144:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008148:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	2b08      	cmp	r3, #8
 8008156:	d110      	bne.n	800817a <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f022 0220 	bic.w	r2, r2, #32
 8008166:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008176:	605a      	str	r2, [r3, #4]
              break;
 8008178:	e023      	b.n	80081c2 <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008188:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	685a      	ldr	r2, [r3, #4]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f042 0220 	orr.w	r2, r2, #32
 8008198:	605a      	str	r2, [r3, #4]
              break;
 800819a:	e012      	b.n	80081c2 <HAL_ADC_Start_IT+0x276>
 800819c:	40022000 	.word	0x40022000
 80081a0:	40022100 	.word	0x40022100
 80081a4:	40022300 	.word	0x40022300
 80081a8:	58026300 	.word	0x58026300
 80081ac:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80081b8:	e003      	b.n	80081c2 <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80081ba:	2302      	movs	r3, #2
 80081bc:	75fb      	strb	r3, [r7, #23]
 80081be:	e000      	b.n	80081c2 <HAL_ADC_Start_IT+0x276>
        }
 80081c0:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80081c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3718      	adds	r7, #24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
	...

080081e8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b08a      	sub	sp, #40	; 0x28
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80081f0:	2300      	movs	r3, #0
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	685b      	ldr	r3, [r3, #4]
 8008202:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a87      	ldr	r2, [pc, #540]	; (8008428 <HAL_ADC_IRQHandler+0x240>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d004      	beq.n	8008218 <HAL_ADC_IRQHandler+0x30>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a86      	ldr	r2, [pc, #536]	; (800842c <HAL_ADC_IRQHandler+0x244>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d101      	bne.n	800821c <HAL_ADC_IRQHandler+0x34>
 8008218:	4b85      	ldr	r3, [pc, #532]	; (8008430 <HAL_ADC_IRQHandler+0x248>)
 800821a:	e000      	b.n	800821e <HAL_ADC_IRQHandler+0x36>
 800821c:	4b85      	ldr	r3, [pc, #532]	; (8008434 <HAL_ADC_IRQHandler+0x24c>)
 800821e:	4618      	mov	r0, r3
 8008220:	f7ff fb9a 	bl	8007958 <LL_ADC_GetMultimode>
 8008224:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	f003 0302 	and.w	r3, r3, #2
 800822c:	2b00      	cmp	r3, #0
 800822e:	d017      	beq.n	8008260 <HAL_ADC_IRQHandler+0x78>
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	f003 0302 	and.w	r3, r3, #2
 8008236:	2b00      	cmp	r3, #0
 8008238:	d012      	beq.n	8008260 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800823e:	f003 0310 	and.w	r3, r3, #16
 8008242:	2b00      	cmp	r3, #0
 8008244:	d105      	bne.n	8008252 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800824a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f001 f9fe 	bl	8009654 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2202      	movs	r2, #2
 800825e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	f003 0304 	and.w	r3, r3, #4
 8008266:	2b00      	cmp	r3, #0
 8008268:	d004      	beq.n	8008274 <HAL_ADC_IRQHandler+0x8c>
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10a      	bne.n	800828a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800827a:	2b00      	cmp	r3, #0
 800827c:	f000 8083 	beq.w	8008386 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	f003 0308 	and.w	r3, r3, #8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d07d      	beq.n	8008386 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800828e:	f003 0310 	and.w	r3, r3, #16
 8008292:	2b00      	cmp	r3, #0
 8008294:	d105      	bne.n	80082a2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800829a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff fa98 	bl	80077dc <LL_ADC_REG_IsTriggerSourceSWStart>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d062      	beq.n	8008378 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a5d      	ldr	r2, [pc, #372]	; (800842c <HAL_ADC_IRQHandler+0x244>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d002      	beq.n	80082c2 <HAL_ADC_IRQHandler+0xda>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	e000      	b.n	80082c4 <HAL_ADC_IRQHandler+0xdc>
 80082c2:	4b59      	ldr	r3, [pc, #356]	; (8008428 <HAL_ADC_IRQHandler+0x240>)
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	6812      	ldr	r2, [r2, #0]
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d008      	beq.n	80082de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d005      	beq.n	80082de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	2b05      	cmp	r3, #5
 80082d6:	d002      	beq.n	80082de <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	2b09      	cmp	r3, #9
 80082dc:	d104      	bne.n	80082e8 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	623b      	str	r3, [r7, #32]
 80082e6:	e00c      	b.n	8008302 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a4f      	ldr	r2, [pc, #316]	; (800842c <HAL_ADC_IRQHandler+0x244>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d002      	beq.n	80082f8 <HAL_ADC_IRQHandler+0x110>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	e000      	b.n	80082fa <HAL_ADC_IRQHandler+0x112>
 80082f8:	4b4b      	ldr	r3, [pc, #300]	; (8008428 <HAL_ADC_IRQHandler+0x240>)
 80082fa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008308:	2b00      	cmp	r3, #0
 800830a:	d135      	bne.n	8008378 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b08      	cmp	r3, #8
 8008318:	d12e      	bne.n	8008378 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff fbe6 	bl	8007af0 <LL_ADC_REG_IsConversionOngoing>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d11a      	bne.n	8008360 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685a      	ldr	r2, [r3, #4]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 020c 	bic.w	r2, r2, #12
 8008338:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800833e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800834a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d112      	bne.n	8008378 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008356:	f043 0201 	orr.w	r2, r3, #1
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	661a      	str	r2, [r3, #96]	; 0x60
 800835e:	e00b      	b.n	8008378 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008364:	f043 0210 	orr.w	r2, r3, #16
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008370:	f043 0201 	orr.w	r2, r3, #1
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7fb f99b 	bl	80036b4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	220c      	movs	r2, #12
 8008384:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	f003 0320 	and.w	r3, r3, #32
 800838c:	2b00      	cmp	r3, #0
 800838e:	d004      	beq.n	800839a <HAL_ADC_IRQHandler+0x1b2>
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	f003 0320 	and.w	r3, r3, #32
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f000 80a0 	beq.w	80084e6 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f000 809a 	beq.w	80084e6 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b6:	f003 0310 	and.w	r3, r3, #16
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d105      	bne.n	80083ca <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4618      	mov	r0, r3
 80083d0:	f7ff fa43 	bl	800785a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80083d4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4618      	mov	r0, r3
 80083dc:	f7ff f9fe 	bl	80077dc <LL_ADC_REG_IsTriggerSourceSWStart>
 80083e0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a11      	ldr	r2, [pc, #68]	; (800842c <HAL_ADC_IRQHandler+0x244>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d002      	beq.n	80083f2 <HAL_ADC_IRQHandler+0x20a>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	e000      	b.n	80083f4 <HAL_ADC_IRQHandler+0x20c>
 80083f2:	4b0d      	ldr	r3, [pc, #52]	; (8008428 <HAL_ADC_IRQHandler+0x240>)
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	6812      	ldr	r2, [r2, #0]
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d008      	beq.n	800840e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d005      	beq.n	800840e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2b06      	cmp	r3, #6
 8008406:	d002      	beq.n	800840e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	2b07      	cmp	r3, #7
 800840c:	d104      	bne.n	8008418 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68db      	ldr	r3, [r3, #12]
 8008414:	623b      	str	r3, [r7, #32]
 8008416:	e014      	b.n	8008442 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a03      	ldr	r2, [pc, #12]	; (800842c <HAL_ADC_IRQHandler+0x244>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00a      	beq.n	8008438 <HAL_ADC_IRQHandler+0x250>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	e008      	b.n	800843a <HAL_ADC_IRQHandler+0x252>
 8008428:	40022000 	.word	0x40022000
 800842c:	40022100 	.word	0x40022100
 8008430:	40022300 	.word	0x40022300
 8008434:	58026300 	.word	0x58026300
 8008438:	4b84      	ldr	r3, [pc, #528]	; (800864c <HAL_ADC_IRQHandler+0x464>)
 800843a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	68db      	ldr	r3, [r3, #12]
 8008440:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d047      	beq.n	80084d8 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <HAL_ADC_IRQHandler+0x27a>
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d03f      	beq.n	80084d8 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800845e:	2b00      	cmp	r3, #0
 8008460:	d13a      	bne.n	80084d8 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800846c:	2b40      	cmp	r3, #64	; 0x40
 800846e:	d133      	bne.n	80084d8 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d12e      	bne.n	80084d8 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4618      	mov	r0, r3
 8008480:	f7ff fb49 	bl	8007b16 <LL_ADC_INJ_IsConversionOngoing>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d11a      	bne.n	80084c0 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008498:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800849e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d112      	bne.n	80084d8 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b6:	f043 0201 	orr.w	r2, r3, #1
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	661a      	str	r2, [r3, #96]	; 0x60
 80084be:	e00b      	b.n	80084d8 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c4:	f043 0210 	orr.w	r2, r3, #16
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084d0:	f043 0201 	orr.w	r2, r3, #1
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 f893 	bl	8009604 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2260      	movs	r2, #96	; 0x60
 80084e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d011      	beq.n	8008514 <HAL_ADC_IRQHandler+0x32c>
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00c      	beq.n	8008514 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 f8a8 	bl	800865c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2280      	movs	r2, #128	; 0x80
 8008512:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800851a:	2b00      	cmp	r3, #0
 800851c:	d012      	beq.n	8008544 <HAL_ADC_IRQHandler+0x35c>
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00d      	beq.n	8008544 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800852c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 f879 	bl	800962c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008542:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800854a:	2b00      	cmp	r3, #0
 800854c:	d012      	beq.n	8008574 <HAL_ADC_IRQHandler+0x38c>
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00d      	beq.n	8008574 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800855c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f001 f86b 	bl	8009640 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008572:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	f003 0310 	and.w	r3, r3, #16
 800857a:	2b00      	cmp	r3, #0
 800857c:	d043      	beq.n	8008606 <HAL_ADC_IRQHandler+0x41e>
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	f003 0310 	and.w	r3, r3, #16
 8008584:	2b00      	cmp	r3, #0
 8008586:	d03e      	beq.n	8008606 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858c:	2b00      	cmp	r3, #0
 800858e:	d102      	bne.n	8008596 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8008590:	2301      	movs	r3, #1
 8008592:	627b      	str	r3, [r7, #36]	; 0x24
 8008594:	e021      	b.n	80085da <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d015      	beq.n	80085c8 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a2a      	ldr	r2, [pc, #168]	; (800864c <HAL_ADC_IRQHandler+0x464>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d004      	beq.n	80085b0 <HAL_ADC_IRQHandler+0x3c8>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a29      	ldr	r2, [pc, #164]	; (8008650 <HAL_ADC_IRQHandler+0x468>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d101      	bne.n	80085b4 <HAL_ADC_IRQHandler+0x3cc>
 80085b0:	4b28      	ldr	r3, [pc, #160]	; (8008654 <HAL_ADC_IRQHandler+0x46c>)
 80085b2:	e000      	b.n	80085b6 <HAL_ADC_IRQHandler+0x3ce>
 80085b4:	4b28      	ldr	r3, [pc, #160]	; (8008658 <HAL_ADC_IRQHandler+0x470>)
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7ff f9dc 	bl	8007974 <LL_ADC_GetMultiDMATransfer>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00b      	beq.n	80085da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80085c2:	2301      	movs	r3, #1
 80085c4:	627b      	str	r3, [r7, #36]	; 0x24
 80085c6:	e008      	b.n	80085da <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f003 0303 	and.w	r3, r3, #3
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80085d6:	2301      	movs	r3, #1
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80085da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d10e      	bne.n	80085fe <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f0:	f043 0202 	orr.w	r2, r3, #2
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f839 	bl	8008670 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2210      	movs	r2, #16
 8008604:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8008606:	69fb      	ldr	r3, [r7, #28]
 8008608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800860c:	2b00      	cmp	r3, #0
 800860e:	d018      	beq.n	8008642 <HAL_ADC_IRQHandler+0x45a>
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008616:	2b00      	cmp	r3, #0
 8008618:	d013      	beq.n	8008642 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800861e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800862a:	f043 0208 	orr.w	r2, r3, #8
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800863a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 ffeb 	bl	8009618 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8008642:	bf00      	nop
 8008644:	3728      	adds	r7, #40	; 0x28
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	40022000 	.word	0x40022000
 8008650:	40022100 	.word	0x40022100
 8008654:	40022300 	.word	0x40022300
 8008658:	58026300 	.word	0x58026300

0800865c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800865c:	b480      	push	{r7}
 800865e:	b083      	sub	sp, #12
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008678:	bf00      	nop
 800867a:	370c      	adds	r7, #12
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008684:	b590      	push	{r4, r7, lr}
 8008686:	b0b9      	sub	sp, #228	; 0xe4
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800868e:	2300      	movs	r3, #0
 8008690:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008694:	2300      	movs	r3, #0
 8008696:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800869e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	4aa9      	ldr	r2, [pc, #676]	; (800894c <HAL_ADC_ConfigChannel+0x2c8>)
 80086a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d102      	bne.n	80086b8 <HAL_ADC_ConfigChannel+0x34>
 80086b2:	2302      	movs	r3, #2
 80086b4:	f000 bcfa 	b.w	80090ac <HAL_ADC_ConfigChannel+0xa28>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7ff fa13 	bl	8007af0 <LL_ADC_REG_IsConversionOngoing>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f040 84de 	bne.w	800908e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a9e      	ldr	r2, [pc, #632]	; (8008950 <HAL_ADC_ConfigChannel+0x2cc>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d033      	beq.n	8008744 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d108      	bne.n	80086fa <HAL_ADC_ConfigChannel+0x76>
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	0e9b      	lsrs	r3, r3, #26
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	2201      	movs	r2, #1
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	e01d      	b.n	8008736 <HAL_ADC_ConfigChannel+0xb2>
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8008706:	fa93 f3a3 	rbit	r3, r3
 800870a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800870e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008716:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800871e:	2320      	movs	r3, #32
 8008720:	e004      	b.n	800872c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8008722:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008726:	fab3 f383 	clz	r3, r3
 800872a:	b2db      	uxtb	r3, r3
 800872c:	f003 031f 	and.w	r3, r3, #31
 8008730:	2201      	movs	r2, #1
 8008732:	fa02 f303 	lsl.w	r3, r2, r3
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	6812      	ldr	r2, [r2, #0]
 800873a:	69d1      	ldr	r1, [r2, #28]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	6812      	ldr	r2, [r2, #0]
 8008740:	430b      	orrs	r3, r1
 8008742:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6818      	ldr	r0, [r3, #0]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	6859      	ldr	r1, [r3, #4]
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	461a      	mov	r2, r3
 8008752:	f7ff f856 	bl	8007802 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f7ff f9c8 	bl	8007af0 <LL_ADC_REG_IsConversionOngoing>
 8008760:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff f9d4 	bl	8007b16 <LL_ADC_INJ_IsConversionOngoing>
 800876e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008776:	2b00      	cmp	r3, #0
 8008778:	f040 8270 	bne.w	8008c5c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800877c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008780:	2b00      	cmp	r3, #0
 8008782:	f040 826b 	bne.w	8008c5c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	6819      	ldr	r1, [r3, #0]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	461a      	mov	r2, r3
 8008794:	f7ff f874 	bl	8007880 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a6c      	ldr	r2, [pc, #432]	; (8008950 <HAL_ADC_ConfigChannel+0x2cc>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d10d      	bne.n	80087be <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	695a      	ldr	r2, [r3, #20]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	08db      	lsrs	r3, r3, #3
 80087ae:	f003 0303 	and.w	r3, r3, #3
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	fa02 f303 	lsl.w	r3, r2, r3
 80087b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087bc:	e032      	b.n	8008824 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80087be:	4b65      	ldr	r3, [pc, #404]	; (8008954 <HAL_ADC_ConfigChannel+0x2d0>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087ca:	d10b      	bne.n	80087e4 <HAL_ADC_ConfigChannel+0x160>
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	695a      	ldr	r2, [r3, #20]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68db      	ldr	r3, [r3, #12]
 80087d6:	089b      	lsrs	r3, r3, #2
 80087d8:	f003 0307 	and.w	r3, r3, #7
 80087dc:	005b      	lsls	r3, r3, #1
 80087de:	fa02 f303 	lsl.w	r3, r2, r3
 80087e2:	e01d      	b.n	8008820 <HAL_ADC_ConfigChannel+0x19c>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f003 0310 	and.w	r3, r3, #16
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10b      	bne.n	800880a <HAL_ADC_ConfigChannel+0x186>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	695a      	ldr	r2, [r3, #20]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	089b      	lsrs	r3, r3, #2
 80087fe:	f003 0307 	and.w	r3, r3, #7
 8008802:	005b      	lsls	r3, r3, #1
 8008804:	fa02 f303 	lsl.w	r3, r2, r3
 8008808:	e00a      	b.n	8008820 <HAL_ADC_ConfigChannel+0x19c>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	695a      	ldr	r2, [r3, #20]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	089b      	lsrs	r3, r3, #2
 8008816:	f003 0304 	and.w	r3, r3, #4
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	fa02 f303 	lsl.w	r3, r2, r3
 8008820:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b04      	cmp	r3, #4
 800882a:	d048      	beq.n	80088be <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6818      	ldr	r0, [r3, #0]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	6919      	ldr	r1, [r3, #16]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681a      	ldr	r2, [r3, #0]
 8008838:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800883c:	f7fe fedc 	bl	80075f8 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a42      	ldr	r2, [pc, #264]	; (8008950 <HAL_ADC_ConfigChannel+0x2cc>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d119      	bne.n	800887e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	6919      	ldr	r1, [r3, #16]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	461a      	mov	r2, r3
 8008858:	f7fe ff74 	bl	8007744 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	6919      	ldr	r1, [r3, #16]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d102      	bne.n	8008874 <HAL_ADC_ConfigChannel+0x1f0>
 800886e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008872:	e000      	b.n	8008876 <HAL_ADC_ConfigChannel+0x1f2>
 8008874:	2300      	movs	r3, #0
 8008876:	461a      	mov	r2, r3
 8008878:	f7fe ff42 	bl	8007700 <LL_ADC_SetOffsetSaturation>
 800887c:	e1ee      	b.n	8008c5c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	6919      	ldr	r1, [r3, #16]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800888c:	2b01      	cmp	r3, #1
 800888e:	d102      	bne.n	8008896 <HAL_ADC_ConfigChannel+0x212>
 8008890:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008894:	e000      	b.n	8008898 <HAL_ADC_ConfigChannel+0x214>
 8008896:	2300      	movs	r3, #0
 8008898:	461a      	mov	r2, r3
 800889a:	f7fe ff0f 	bl	80076bc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	6919      	ldr	r1, [r3, #16]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	7e1b      	ldrb	r3, [r3, #24]
 80088aa:	2b01      	cmp	r3, #1
 80088ac:	d102      	bne.n	80088b4 <HAL_ADC_ConfigChannel+0x230>
 80088ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088b2:	e000      	b.n	80088b6 <HAL_ADC_ConfigChannel+0x232>
 80088b4:	2300      	movs	r3, #0
 80088b6:	461a      	mov	r2, r3
 80088b8:	f7fe fee6 	bl	8007688 <LL_ADC_SetDataRightShift>
 80088bc:	e1ce      	b.n	8008c5c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a23      	ldr	r2, [pc, #140]	; (8008950 <HAL_ADC_ConfigChannel+0x2cc>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	f040 8181 	bne.w	8008bcc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2100      	movs	r1, #0
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fec3 	bl	800765c <LL_ADC_GetOffsetChannel>
 80088d6:	4603      	mov	r3, r0
 80088d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d10a      	bne.n	80088f6 <HAL_ADC_ConfigChannel+0x272>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	2100      	movs	r1, #0
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fe feb8 	bl	800765c <LL_ADC_GetOffsetChannel>
 80088ec:	4603      	mov	r3, r0
 80088ee:	0e9b      	lsrs	r3, r3, #26
 80088f0:	f003 021f 	and.w	r2, r3, #31
 80088f4:	e01e      	b.n	8008934 <HAL_ADC_ConfigChannel+0x2b0>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2100      	movs	r1, #0
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe fead 	bl	800765c <LL_ADC_GetOffsetChannel>
 8008902:	4603      	mov	r3, r0
 8008904:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800890c:	fa93 f3a3 	rbit	r3, r3
 8008910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8008914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008918:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800891c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8008924:	2320      	movs	r3, #32
 8008926:	e004      	b.n	8008932 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8008928:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800892c:	fab3 f383 	clz	r3, r3
 8008930:	b2db      	uxtb	r3, r3
 8008932:	461a      	mov	r2, r3
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10b      	bne.n	8008958 <HAL_ADC_ConfigChannel+0x2d4>
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	0e9b      	lsrs	r3, r3, #26
 8008946:	f003 031f 	and.w	r3, r3, #31
 800894a:	e01e      	b.n	800898a <HAL_ADC_ConfigChannel+0x306>
 800894c:	47ff0000 	.word	0x47ff0000
 8008950:	58026000 	.word	0x58026000
 8008954:	5c001000 	.word	0x5c001000
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008964:	fa93 f3a3 	rbit	r3, r3
 8008968:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800896c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8008974:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800897c:	2320      	movs	r3, #32
 800897e:	e004      	b.n	800898a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8008980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008984:	fab3 f383 	clz	r3, r3
 8008988:	b2db      	uxtb	r3, r3
 800898a:	429a      	cmp	r2, r3
 800898c:	d106      	bne.n	800899c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2200      	movs	r2, #0
 8008994:	2100      	movs	r1, #0
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fef6 	bl	8007788 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2101      	movs	r1, #1
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fe fe5a 	bl	800765c <LL_ADC_GetOffsetChannel>
 80089a8:	4603      	mov	r3, r0
 80089aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10a      	bne.n	80089c8 <HAL_ADC_ConfigChannel+0x344>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2101      	movs	r1, #1
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fe fe4f 	bl	800765c <LL_ADC_GetOffsetChannel>
 80089be:	4603      	mov	r3, r0
 80089c0:	0e9b      	lsrs	r3, r3, #26
 80089c2:	f003 021f 	and.w	r2, r3, #31
 80089c6:	e01e      	b.n	8008a06 <HAL_ADC_ConfigChannel+0x382>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2101      	movs	r1, #1
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fe44 	bl	800765c <LL_ADC_GetOffsetChannel>
 80089d4:	4603      	mov	r3, r0
 80089d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089de:	fa93 f3a3 	rbit	r3, r3
 80089e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80089e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80089ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80089f6:	2320      	movs	r3, #32
 80089f8:	e004      	b.n	8008a04 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80089fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80089fe:	fab3 f383 	clz	r3, r3
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	461a      	mov	r2, r3
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d105      	bne.n	8008a1e <HAL_ADC_ConfigChannel+0x39a>
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	0e9b      	lsrs	r3, r3, #26
 8008a18:	f003 031f 	and.w	r3, r3, #31
 8008a1c:	e018      	b.n	8008a50 <HAL_ADC_ConfigChannel+0x3cc>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a2a:	fa93 f3a3 	rbit	r3, r3
 8008a2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8008a32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8008a3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8008a42:	2320      	movs	r3, #32
 8008a44:	e004      	b.n	8008a50 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8008a46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a4a:	fab3 f383 	clz	r3, r3
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d106      	bne.n	8008a62 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	2101      	movs	r1, #1
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fe fe93 	bl	8007788 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	2102      	movs	r1, #2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fe fdf7 	bl	800765c <LL_ADC_GetOffsetChannel>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <HAL_ADC_ConfigChannel+0x40a>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2102      	movs	r1, #2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fdec 	bl	800765c <LL_ADC_GetOffsetChannel>
 8008a84:	4603      	mov	r3, r0
 8008a86:	0e9b      	lsrs	r3, r3, #26
 8008a88:	f003 021f 	and.w	r2, r3, #31
 8008a8c:	e01e      	b.n	8008acc <HAL_ADC_ConfigChannel+0x448>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2102      	movs	r1, #2
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fde1 	bl	800765c <LL_ADC_GetOffsetChannel>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008aa4:	fa93 f3a3 	rbit	r3, r3
 8008aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8008aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ab0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8008ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8008abc:	2320      	movs	r3, #32
 8008abe:	e004      	b.n	8008aca <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8008ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ac4:	fab3 f383 	clz	r3, r3
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	461a      	mov	r2, r3
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d105      	bne.n	8008ae4 <HAL_ADC_ConfigChannel+0x460>
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	0e9b      	lsrs	r3, r3, #26
 8008ade:	f003 031f 	and.w	r3, r3, #31
 8008ae2:	e014      	b.n	8008b0e <HAL_ADC_ConfigChannel+0x48a>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008aea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008aec:	fa93 f3a3 	rbit	r3, r3
 8008af0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8008af2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008af4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8008af8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d101      	bne.n	8008b04 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8008b00:	2320      	movs	r3, #32
 8008b02:	e004      	b.n	8008b0e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8008b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b08:	fab3 f383 	clz	r3, r3
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d106      	bne.n	8008b20 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2200      	movs	r2, #0
 8008b18:	2102      	movs	r1, #2
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fe fe34 	bl	8007788 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2103      	movs	r1, #3
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe fd98 	bl	800765c <LL_ADC_GetOffsetChannel>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10a      	bne.n	8008b4c <HAL_ADC_ConfigChannel+0x4c8>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2103      	movs	r1, #3
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7fe fd8d 	bl	800765c <LL_ADC_GetOffsetChannel>
 8008b42:	4603      	mov	r3, r0
 8008b44:	0e9b      	lsrs	r3, r3, #26
 8008b46:	f003 021f 	and.w	r2, r3, #31
 8008b4a:	e017      	b.n	8008b7c <HAL_ADC_ConfigChannel+0x4f8>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	2103      	movs	r1, #3
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fd82 	bl	800765c <LL_ADC_GetOffsetChannel>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b5e:	fa93 f3a3 	rbit	r3, r3
 8008b62:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b66:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8008b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8008b6e:	2320      	movs	r3, #32
 8008b70:	e003      	b.n	8008b7a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8008b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b74:	fab3 f383 	clz	r3, r3
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d105      	bne.n	8008b94 <HAL_ADC_ConfigChannel+0x510>
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	0e9b      	lsrs	r3, r3, #26
 8008b8e:	f003 031f 	and.w	r3, r3, #31
 8008b92:	e011      	b.n	8008bb8 <HAL_ADC_ConfigChannel+0x534>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b9c:	fa93 f3a3 	rbit	r3, r3
 8008ba0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8008ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ba4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8008ba6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8008bac:	2320      	movs	r3, #32
 8008bae:	e003      	b.n	8008bb8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8008bb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bb2:	fab3 f383 	clz	r3, r3
 8008bb6:	b2db      	uxtb	r3, r3
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d14f      	bne.n	8008c5c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2103      	movs	r1, #3
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe fddf 	bl	8007788 <LL_ADC_SetOffsetState>
 8008bca:	e047      	b.n	8008c5c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	069b      	lsls	r3, r3, #26
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d107      	bne.n	8008bf0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008bee:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	069b      	lsls	r3, r3, #26
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d107      	bne.n	8008c14 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008c12:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	069b      	lsls	r3, r3, #26
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d107      	bne.n	8008c38 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008c36:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	069b      	lsls	r3, r3, #26
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d107      	bne.n	8008c5c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008c5a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe ff0b 	bl	8007a7c <LL_ADC_IsEnabled>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f040 8219 	bne.w	80090a0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	6819      	ldr	r1, [r3, #0]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f7fe fe2c 	bl	80078d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	4aa1      	ldr	r2, [pc, #644]	; (8008f0c <HAL_ADC_ConfigChannel+0x888>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	f040 812e 	bne.w	8008ee8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10b      	bne.n	8008cb4 <HAL_ADC_ConfigChannel+0x630>
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	0e9b      	lsrs	r3, r3, #26
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	f003 031f 	and.w	r3, r3, #31
 8008ca8:	2b09      	cmp	r3, #9
 8008caa:	bf94      	ite	ls
 8008cac:	2301      	movls	r3, #1
 8008cae:	2300      	movhi	r3, #0
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	e019      	b.n	8008ce8 <HAL_ADC_ConfigChannel+0x664>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cbc:	fa93 f3a3 	rbit	r3, r3
 8008cc0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8008cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d101      	bne.n	8008cd0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8008ccc:	2320      	movs	r3, #32
 8008cce:	e003      	b.n	8008cd8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8008cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cd2:	fab3 f383 	clz	r3, r3
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	3301      	adds	r3, #1
 8008cda:	f003 031f 	and.w	r3, r3, #31
 8008cde:	2b09      	cmp	r3, #9
 8008ce0:	bf94      	ite	ls
 8008ce2:	2301      	movls	r3, #1
 8008ce4:	2300      	movhi	r3, #0
 8008ce6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d079      	beq.n	8008de0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d107      	bne.n	8008d08 <HAL_ADC_ConfigChannel+0x684>
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	0e9b      	lsrs	r3, r3, #26
 8008cfe:	3301      	adds	r3, #1
 8008d00:	069b      	lsls	r3, r3, #26
 8008d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d06:	e015      	b.n	8008d34 <HAL_ADC_ConfigChannel+0x6b0>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d10:	fa93 f3a3 	rbit	r3, r3
 8008d14:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8008d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d18:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8008d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d101      	bne.n	8008d24 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8008d20:	2320      	movs	r3, #32
 8008d22:	e003      	b.n	8008d2c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8008d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d26:	fab3 f383 	clz	r3, r3
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	069b      	lsls	r3, r3, #26
 8008d30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <HAL_ADC_ConfigChannel+0x6d0>
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	0e9b      	lsrs	r3, r3, #26
 8008d46:	3301      	adds	r3, #1
 8008d48:	f003 031f 	and.w	r3, r3, #31
 8008d4c:	2101      	movs	r1, #1
 8008d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8008d52:	e017      	b.n	8008d84 <HAL_ADC_ConfigChannel+0x700>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d5c:	fa93 f3a3 	rbit	r3, r3
 8008d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d64:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8008d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8008d6c:	2320      	movs	r3, #32
 8008d6e:	e003      	b.n	8008d78 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8008d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d72:	fab3 f383 	clz	r3, r3
 8008d76:	b2db      	uxtb	r3, r3
 8008d78:	3301      	adds	r3, #1
 8008d7a:	f003 031f 	and.w	r3, r3, #31
 8008d7e:	2101      	movs	r1, #1
 8008d80:	fa01 f303 	lsl.w	r3, r1, r3
 8008d84:	ea42 0103 	orr.w	r1, r2, r3
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10a      	bne.n	8008daa <HAL_ADC_ConfigChannel+0x726>
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	0e9b      	lsrs	r3, r3, #26
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	f003 021f 	and.w	r2, r3, #31
 8008da0:	4613      	mov	r3, r2
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	4413      	add	r3, r2
 8008da6:	051b      	lsls	r3, r3, #20
 8008da8:	e018      	b.n	8008ddc <HAL_ADC_ConfigChannel+0x758>
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db2:	fa93 f3a3 	rbit	r3, r3
 8008db6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8008db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8008dc2:	2320      	movs	r3, #32
 8008dc4:	e003      	b.n	8008dce <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8008dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc8:	fab3 f383 	clz	r3, r3
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	3301      	adds	r3, #1
 8008dd0:	f003 021f 	and.w	r2, r3, #31
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	005b      	lsls	r3, r3, #1
 8008dd8:	4413      	add	r3, r2
 8008dda:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ddc:	430b      	orrs	r3, r1
 8008dde:	e07e      	b.n	8008ede <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d107      	bne.n	8008dfc <HAL_ADC_ConfigChannel+0x778>
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	0e9b      	lsrs	r3, r3, #26
 8008df2:	3301      	adds	r3, #1
 8008df4:	069b      	lsls	r3, r3, #26
 8008df6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008dfa:	e015      	b.n	8008e28 <HAL_ADC_ConfigChannel+0x7a4>
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e04:	fa93 f3a3 	rbit	r3, r3
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8008e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8008e14:	2320      	movs	r3, #32
 8008e16:	e003      	b.n	8008e20 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8008e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1a:	fab3 f383 	clz	r3, r3
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	3301      	adds	r3, #1
 8008e22:	069b      	lsls	r3, r3, #26
 8008e24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d109      	bne.n	8008e48 <HAL_ADC_ConfigChannel+0x7c4>
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	0e9b      	lsrs	r3, r3, #26
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	f003 031f 	and.w	r3, r3, #31
 8008e40:	2101      	movs	r1, #1
 8008e42:	fa01 f303 	lsl.w	r3, r1, r3
 8008e46:	e017      	b.n	8008e78 <HAL_ADC_ConfigChannel+0x7f4>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	fa93 f3a3 	rbit	r3, r3
 8008e54:	61bb      	str	r3, [r7, #24]
  return result;
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008e5a:	6a3b      	ldr	r3, [r7, #32]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d101      	bne.n	8008e64 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8008e60:	2320      	movs	r3, #32
 8008e62:	e003      	b.n	8008e6c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	fab3 f383 	clz	r3, r3
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	3301      	adds	r3, #1
 8008e6e:	f003 031f 	and.w	r3, r3, #31
 8008e72:	2101      	movs	r1, #1
 8008e74:	fa01 f303 	lsl.w	r3, r1, r3
 8008e78:	ea42 0103 	orr.w	r1, r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10d      	bne.n	8008ea4 <HAL_ADC_ConfigChannel+0x820>
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	0e9b      	lsrs	r3, r3, #26
 8008e8e:	3301      	adds	r3, #1
 8008e90:	f003 021f 	and.w	r2, r3, #31
 8008e94:	4613      	mov	r3, r2
 8008e96:	005b      	lsls	r3, r3, #1
 8008e98:	4413      	add	r3, r2
 8008e9a:	3b1e      	subs	r3, #30
 8008e9c:	051b      	lsls	r3, r3, #20
 8008e9e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ea2:	e01b      	b.n	8008edc <HAL_ADC_ConfigChannel+0x858>
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	fa93 f3a3 	rbit	r3, r3
 8008eb0:	60fb      	str	r3, [r7, #12]
  return result;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d101      	bne.n	8008ec0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8008ebc:	2320      	movs	r3, #32
 8008ebe:	e003      	b.n	8008ec8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	fab3 f383 	clz	r3, r3
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	3301      	adds	r3, #1
 8008eca:	f003 021f 	and.w	r2, r3, #31
 8008ece:	4613      	mov	r3, r2
 8008ed0:	005b      	lsls	r3, r3, #1
 8008ed2:	4413      	add	r3, r2
 8008ed4:	3b1e      	subs	r3, #30
 8008ed6:	051b      	lsls	r3, r3, #20
 8008ed8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008edc:	430b      	orrs	r3, r1
 8008ede:	683a      	ldr	r2, [r7, #0]
 8008ee0:	6892      	ldr	r2, [r2, #8]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	f7fe fccc 	bl	8007880 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f280 80d7 	bge.w	80090a0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a06      	ldr	r2, [pc, #24]	; (8008f10 <HAL_ADC_ConfigChannel+0x88c>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d004      	beq.n	8008f06 <HAL_ADC_ConfigChannel+0x882>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a04      	ldr	r2, [pc, #16]	; (8008f14 <HAL_ADC_ConfigChannel+0x890>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d10a      	bne.n	8008f1c <HAL_ADC_ConfigChannel+0x898>
 8008f06:	4b04      	ldr	r3, [pc, #16]	; (8008f18 <HAL_ADC_ConfigChannel+0x894>)
 8008f08:	e009      	b.n	8008f1e <HAL_ADC_ConfigChannel+0x89a>
 8008f0a:	bf00      	nop
 8008f0c:	47ff0000 	.word	0x47ff0000
 8008f10:	40022000 	.word	0x40022000
 8008f14:	40022100 	.word	0x40022100
 8008f18:	40022300 	.word	0x40022300
 8008f1c:	4b65      	ldr	r3, [pc, #404]	; (80090b4 <HAL_ADC_ConfigChannel+0xa30>)
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fb5c 	bl	80075dc <LL_ADC_GetCommonPathInternalCh>
 8008f24:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a62      	ldr	r2, [pc, #392]	; (80090b8 <HAL_ADC_ConfigChannel+0xa34>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d004      	beq.n	8008f3c <HAL_ADC_ConfigChannel+0x8b8>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a61      	ldr	r2, [pc, #388]	; (80090bc <HAL_ADC_ConfigChannel+0xa38>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d10e      	bne.n	8008f5a <HAL_ADC_ConfigChannel+0x8d6>
 8008f3c:	485e      	ldr	r0, [pc, #376]	; (80090b8 <HAL_ADC_ConfigChannel+0xa34>)
 8008f3e:	f7fe fd9d 	bl	8007a7c <LL_ADC_IsEnabled>
 8008f42:	4604      	mov	r4, r0
 8008f44:	485d      	ldr	r0, [pc, #372]	; (80090bc <HAL_ADC_ConfigChannel+0xa38>)
 8008f46:	f7fe fd99 	bl	8007a7c <LL_ADC_IsEnabled>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	4323      	orrs	r3, r4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	bf0c      	ite	eq
 8008f52:	2301      	moveq	r3, #1
 8008f54:	2300      	movne	r3, #0
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	e008      	b.n	8008f6c <HAL_ADC_ConfigChannel+0x8e8>
 8008f5a:	4859      	ldr	r0, [pc, #356]	; (80090c0 <HAL_ADC_ConfigChannel+0xa3c>)
 8008f5c:	f7fe fd8e 	bl	8007a7c <LL_ADC_IsEnabled>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	bf0c      	ite	eq
 8008f66:	2301      	moveq	r3, #1
 8008f68:	2300      	movne	r3, #0
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	f000 8084 	beq.w	800907a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a53      	ldr	r2, [pc, #332]	; (80090c4 <HAL_ADC_ConfigChannel+0xa40>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d132      	bne.n	8008fe2 <HAL_ADC_ConfigChannel+0x95e>
 8008f7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d12c      	bne.n	8008fe2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a4c      	ldr	r2, [pc, #304]	; (80090c0 <HAL_ADC_ConfigChannel+0xa3c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	f040 8086 	bne.w	80090a0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a47      	ldr	r2, [pc, #284]	; (80090b8 <HAL_ADC_ConfigChannel+0xa34>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d004      	beq.n	8008fa8 <HAL_ADC_ConfigChannel+0x924>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a46      	ldr	r2, [pc, #280]	; (80090bc <HAL_ADC_ConfigChannel+0xa38>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d101      	bne.n	8008fac <HAL_ADC_ConfigChannel+0x928>
 8008fa8:	4a47      	ldr	r2, [pc, #284]	; (80090c8 <HAL_ADC_ConfigChannel+0xa44>)
 8008faa:	e000      	b.n	8008fae <HAL_ADC_ConfigChannel+0x92a>
 8008fac:	4a41      	ldr	r2, [pc, #260]	; (80090b4 <HAL_ADC_ConfigChannel+0xa30>)
 8008fae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fb6:	4619      	mov	r1, r3
 8008fb8:	4610      	mov	r0, r2
 8008fba:	f7fe fafc 	bl	80075b6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008fbe:	4b43      	ldr	r3, [pc, #268]	; (80090cc <HAL_ADC_ConfigChannel+0xa48>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	099b      	lsrs	r3, r3, #6
 8008fc4:	4a42      	ldr	r2, [pc, #264]	; (80090d0 <HAL_ADC_ConfigChannel+0xa4c>)
 8008fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008fca:	099b      	lsrs	r3, r3, #6
 8008fcc:	3301      	adds	r3, #1
 8008fce:	005b      	lsls	r3, r3, #1
 8008fd0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008fd2:	e002      	b.n	8008fda <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d1f9      	bne.n	8008fd4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008fe0:	e05e      	b.n	80090a0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a3b      	ldr	r2, [pc, #236]	; (80090d4 <HAL_ADC_ConfigChannel+0xa50>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d120      	bne.n	800902e <HAL_ADC_ConfigChannel+0x9aa>
 8008fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008ff0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d11a      	bne.n	800902e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a30      	ldr	r2, [pc, #192]	; (80090c0 <HAL_ADC_ConfigChannel+0xa3c>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d14e      	bne.n	80090a0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a2c      	ldr	r2, [pc, #176]	; (80090b8 <HAL_ADC_ConfigChannel+0xa34>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d004      	beq.n	8009016 <HAL_ADC_ConfigChannel+0x992>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a2a      	ldr	r2, [pc, #168]	; (80090bc <HAL_ADC_ConfigChannel+0xa38>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d101      	bne.n	800901a <HAL_ADC_ConfigChannel+0x996>
 8009016:	4a2c      	ldr	r2, [pc, #176]	; (80090c8 <HAL_ADC_ConfigChannel+0xa44>)
 8009018:	e000      	b.n	800901c <HAL_ADC_ConfigChannel+0x998>
 800901a:	4a26      	ldr	r2, [pc, #152]	; (80090b4 <HAL_ADC_ConfigChannel+0xa30>)
 800901c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009020:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009024:	4619      	mov	r1, r3
 8009026:	4610      	mov	r0, r2
 8009028:	f7fe fac5 	bl	80075b6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800902c:	e038      	b.n	80090a0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a29      	ldr	r2, [pc, #164]	; (80090d8 <HAL_ADC_ConfigChannel+0xa54>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d133      	bne.n	80090a0 <HAL_ADC_ConfigChannel+0xa1c>
 8009038:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800903c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009040:	2b00      	cmp	r3, #0
 8009042:	d12d      	bne.n	80090a0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	4a1d      	ldr	r2, [pc, #116]	; (80090c0 <HAL_ADC_ConfigChannel+0xa3c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d128      	bne.n	80090a0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a19      	ldr	r2, [pc, #100]	; (80090b8 <HAL_ADC_ConfigChannel+0xa34>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d004      	beq.n	8009062 <HAL_ADC_ConfigChannel+0x9de>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a17      	ldr	r2, [pc, #92]	; (80090bc <HAL_ADC_ConfigChannel+0xa38>)
 800905e:	4293      	cmp	r3, r2
 8009060:	d101      	bne.n	8009066 <HAL_ADC_ConfigChannel+0x9e2>
 8009062:	4a19      	ldr	r2, [pc, #100]	; (80090c8 <HAL_ADC_ConfigChannel+0xa44>)
 8009064:	e000      	b.n	8009068 <HAL_ADC_ConfigChannel+0x9e4>
 8009066:	4a13      	ldr	r2, [pc, #76]	; (80090b4 <HAL_ADC_ConfigChannel+0xa30>)
 8009068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800906c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009070:	4619      	mov	r1, r3
 8009072:	4610      	mov	r0, r2
 8009074:	f7fe fa9f 	bl	80075b6 <LL_ADC_SetCommonPathInternalCh>
 8009078:	e012      	b.n	80090a0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800907e:	f043 0220 	orr.w	r2, r3, #32
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800908c:	e008      	b.n	80090a0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009092:	f043 0220 	orr.w	r2, r3, #32
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80090a8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	37e4      	adds	r7, #228	; 0xe4
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd90      	pop	{r4, r7, pc}
 80090b4:	58026300 	.word	0x58026300
 80090b8:	40022000 	.word	0x40022000
 80090bc:	40022100 	.word	0x40022100
 80090c0:	58026000 	.word	0x58026000
 80090c4:	c7520000 	.word	0xc7520000
 80090c8:	40022300 	.word	0x40022300
 80090cc:	20000020 	.word	0x20000020
 80090d0:	053e2d63 	.word	0x053e2d63
 80090d4:	c3210000 	.word	0xc3210000
 80090d8:	cb840000 	.word	0xcb840000

080090dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fe fcc7 	bl	8007a7c <LL_ADC_IsEnabled>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d16e      	bne.n	80091d2 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689a      	ldr	r2, [r3, #8]
 80090fa:	4b38      	ldr	r3, [pc, #224]	; (80091dc <ADC_Enable+0x100>)
 80090fc:	4013      	ands	r3, r2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00d      	beq.n	800911e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009106:	f043 0210 	orr.w	r2, r3, #16
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009112:	f043 0201 	orr.w	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e05a      	b.n	80091d4 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4618      	mov	r0, r3
 8009124:	f7fe fc82 	bl	8007a2c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009128:	f7fe fa02 	bl	8007530 <HAL_GetTick>
 800912c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a2b      	ldr	r2, [pc, #172]	; (80091e0 <ADC_Enable+0x104>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d004      	beq.n	8009142 <ADC_Enable+0x66>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a29      	ldr	r2, [pc, #164]	; (80091e4 <ADC_Enable+0x108>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d101      	bne.n	8009146 <ADC_Enable+0x6a>
 8009142:	4b29      	ldr	r3, [pc, #164]	; (80091e8 <ADC_Enable+0x10c>)
 8009144:	e000      	b.n	8009148 <ADC_Enable+0x6c>
 8009146:	4b29      	ldr	r3, [pc, #164]	; (80091ec <ADC_Enable+0x110>)
 8009148:	4618      	mov	r0, r3
 800914a:	f7fe fc05 	bl	8007958 <LL_ADC_GetMultimode>
 800914e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a23      	ldr	r2, [pc, #140]	; (80091e4 <ADC_Enable+0x108>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d002      	beq.n	8009160 <ADC_Enable+0x84>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	e000      	b.n	8009162 <ADC_Enable+0x86>
 8009160:	4b1f      	ldr	r3, [pc, #124]	; (80091e0 <ADC_Enable+0x104>)
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	6812      	ldr	r2, [r2, #0]
 8009166:	4293      	cmp	r3, r2
 8009168:	d02c      	beq.n	80091c4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d130      	bne.n	80091d2 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009170:	e028      	b.n	80091c4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe fc80 	bl	8007a7c <LL_ADC_IsEnabled>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe fc50 	bl	8007a2c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800918c:	f7fe f9d0 	bl	8007530 <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	2b02      	cmp	r3, #2
 8009198:	d914      	bls.n	80091c4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d00d      	beq.n	80091c4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ac:	f043 0210 	orr.w	r2, r3, #16
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091b8:	f043 0201 	orr.w	r2, r3, #1
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e007      	b.n	80091d4 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d1cf      	bne.n	8009172 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}
 80091dc:	8000003f 	.word	0x8000003f
 80091e0:	40022000 	.word	0x40022000
 80091e4:	40022100 	.word	0x40022100
 80091e8:	40022300 	.word	0x40022300
 80091ec:	58026300 	.word	0x58026300

080091f0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7fe fc50 	bl	8007aa2 <LL_ADC_IsDisableOngoing>
 8009202:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4618      	mov	r0, r3
 800920a:	f7fe fc37 	bl	8007a7c <LL_ADC_IsEnabled>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d047      	beq.n	80092a4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d144      	bne.n	80092a4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f003 030d 	and.w	r3, r3, #13
 8009224:	2b01      	cmp	r3, #1
 8009226:	d10c      	bne.n	8009242 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fc11 	bl	8007a54 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2203      	movs	r2, #3
 8009238:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800923a:	f7fe f979 	bl	8007530 <HAL_GetTick>
 800923e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009240:	e029      	b.n	8009296 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009246:	f043 0210 	orr.w	r2, r3, #16
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009252:	f043 0201 	orr.w	r2, r3, #1
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e023      	b.n	80092a6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800925e:	f7fe f967 	bl	8007530 <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b02      	cmp	r3, #2
 800926a:	d914      	bls.n	8009296 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00d      	beq.n	8009296 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800927e:	f043 0210 	orr.w	r2, r3, #16
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800928a:	f043 0201 	orr.w	r2, r3, #1
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	e007      	b.n	80092a6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	f003 0301 	and.w	r3, r3, #1
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1dc      	bne.n	800925e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
	...

080092b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4a6b      	ldr	r2, [pc, #428]	; (800946c <ADC_ConfigureBoostMode+0x1bc>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d004      	beq.n	80092cc <ADC_ConfigureBoostMode+0x1c>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a6a      	ldr	r2, [pc, #424]	; (8009470 <ADC_ConfigureBoostMode+0x1c0>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d109      	bne.n	80092e0 <ADC_ConfigureBoostMode+0x30>
 80092cc:	4b69      	ldr	r3, [pc, #420]	; (8009474 <ADC_ConfigureBoostMode+0x1c4>)
 80092ce:	689b      	ldr	r3, [r3, #8]
 80092d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	bf14      	ite	ne
 80092d8:	2301      	movne	r3, #1
 80092da:	2300      	moveq	r3, #0
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	e008      	b.n	80092f2 <ADC_ConfigureBoostMode+0x42>
 80092e0:	4b65      	ldr	r3, [pc, #404]	; (8009478 <ADC_ConfigureBoostMode+0x1c8>)
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	bf14      	ite	ne
 80092ec:	2301      	movne	r3, #1
 80092ee:	2300      	moveq	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d01c      	beq.n	8009330 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80092f6:	f006 f8b5 	bl	800f464 <HAL_RCC_GetHCLKFreq>
 80092fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009304:	d010      	beq.n	8009328 <ADC_ConfigureBoostMode+0x78>
 8009306:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800930a:	d871      	bhi.n	80093f0 <ADC_ConfigureBoostMode+0x140>
 800930c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009310:	d002      	beq.n	8009318 <ADC_ConfigureBoostMode+0x68>
 8009312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009316:	d16b      	bne.n	80093f0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	0c1b      	lsrs	r3, r3, #16
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	fbb2 f3f3 	udiv	r3, r2, r3
 8009324:	60fb      	str	r3, [r7, #12]
        break;
 8009326:	e066      	b.n	80093f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	089b      	lsrs	r3, r3, #2
 800932c:	60fb      	str	r3, [r7, #12]
        break;
 800932e:	e062      	b.n	80093f6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8009330:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8009334:	f006 ffec 	bl	8010310 <HAL_RCCEx_GetPeriphCLKFreq>
 8009338:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8009342:	d051      	beq.n	80093e8 <ADC_ConfigureBoostMode+0x138>
 8009344:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8009348:	d854      	bhi.n	80093f4 <ADC_ConfigureBoostMode+0x144>
 800934a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800934e:	d047      	beq.n	80093e0 <ADC_ConfigureBoostMode+0x130>
 8009350:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8009354:	d84e      	bhi.n	80093f4 <ADC_ConfigureBoostMode+0x144>
 8009356:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800935a:	d03d      	beq.n	80093d8 <ADC_ConfigureBoostMode+0x128>
 800935c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8009360:	d848      	bhi.n	80093f4 <ADC_ConfigureBoostMode+0x144>
 8009362:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009366:	d033      	beq.n	80093d0 <ADC_ConfigureBoostMode+0x120>
 8009368:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800936c:	d842      	bhi.n	80093f4 <ADC_ConfigureBoostMode+0x144>
 800936e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009372:	d029      	beq.n	80093c8 <ADC_ConfigureBoostMode+0x118>
 8009374:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009378:	d83c      	bhi.n	80093f4 <ADC_ConfigureBoostMode+0x144>
 800937a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800937e:	d01a      	beq.n	80093b6 <ADC_ConfigureBoostMode+0x106>
 8009380:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009384:	d836      	bhi.n	80093f4 <ADC_ConfigureBoostMode+0x144>
 8009386:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800938a:	d014      	beq.n	80093b6 <ADC_ConfigureBoostMode+0x106>
 800938c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009390:	d830      	bhi.n	80093f4 <ADC_ConfigureBoostMode+0x144>
 8009392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009396:	d00e      	beq.n	80093b6 <ADC_ConfigureBoostMode+0x106>
 8009398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800939c:	d82a      	bhi.n	80093f4 <ADC_ConfigureBoostMode+0x144>
 800939e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80093a2:	d008      	beq.n	80093b6 <ADC_ConfigureBoostMode+0x106>
 80093a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80093a8:	d824      	bhi.n	80093f4 <ADC_ConfigureBoostMode+0x144>
 80093aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093ae:	d002      	beq.n	80093b6 <ADC_ConfigureBoostMode+0x106>
 80093b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80093b4:	d11e      	bne.n	80093f4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	0c9b      	lsrs	r3, r3, #18
 80093bc:	005b      	lsls	r3, r3, #1
 80093be:	68fa      	ldr	r2, [r7, #12]
 80093c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80093c4:	60fb      	str	r3, [r7, #12]
        break;
 80093c6:	e016      	b.n	80093f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	091b      	lsrs	r3, r3, #4
 80093cc:	60fb      	str	r3, [r7, #12]
        break;
 80093ce:	e012      	b.n	80093f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	095b      	lsrs	r3, r3, #5
 80093d4:	60fb      	str	r3, [r7, #12]
        break;
 80093d6:	e00e      	b.n	80093f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	099b      	lsrs	r3, r3, #6
 80093dc:	60fb      	str	r3, [r7, #12]
        break;
 80093de:	e00a      	b.n	80093f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	09db      	lsrs	r3, r3, #7
 80093e4:	60fb      	str	r3, [r7, #12]
        break;
 80093e6:	e006      	b.n	80093f6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	0a1b      	lsrs	r3, r3, #8
 80093ec:	60fb      	str	r3, [r7, #12]
        break;
 80093ee:	e002      	b.n	80093f6 <ADC_ConfigureBoostMode+0x146>
        break;
 80093f0:	bf00      	nop
 80093f2:	e000      	b.n	80093f6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 80093f4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	085b      	lsrs	r3, r3, #1
 80093fa:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4a1f      	ldr	r2, [pc, #124]	; (800947c <ADC_ConfigureBoostMode+0x1cc>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d808      	bhi.n	8009416 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689a      	ldr	r2, [r3, #8]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009412:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8009414:	e025      	b.n	8009462 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	4a19      	ldr	r2, [pc, #100]	; (8009480 <ADC_ConfigureBoostMode+0x1d0>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d80a      	bhi.n	8009434 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009430:	609a      	str	r2, [r3, #8]
}
 8009432:	e016      	b.n	8009462 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	4a13      	ldr	r2, [pc, #76]	; (8009484 <ADC_ConfigureBoostMode+0x1d4>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d80a      	bhi.n	8009452 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800944e:	609a      	str	r2, [r3, #8]
}
 8009450:	e007      	b.n	8009462 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009460:	609a      	str	r2, [r3, #8]
}
 8009462:	bf00      	nop
 8009464:	3710      	adds	r7, #16
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	40022000 	.word	0x40022000
 8009470:	40022100 	.word	0x40022100
 8009474:	40022300 	.word	0x40022300
 8009478:	58026300 	.word	0x58026300
 800947c:	005f5e10 	.word	0x005f5e10
 8009480:	00bebc20 	.word	0x00bebc20
 8009484:	017d7840 	.word	0x017d7840

08009488 <LL_ADC_IsEnabled>:
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	f003 0301 	and.w	r3, r3, #1
 8009498:	2b01      	cmp	r3, #1
 800949a:	d101      	bne.n	80094a0 <LL_ADC_IsEnabled+0x18>
 800949c:	2301      	movs	r3, #1
 800949e:	e000      	b.n	80094a2 <LL_ADC_IsEnabled+0x1a>
 80094a0:	2300      	movs	r3, #0
}
 80094a2:	4618      	mov	r0, r3
 80094a4:	370c      	adds	r7, #12
 80094a6:	46bd      	mov	sp, r7
 80094a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ac:	4770      	bx	lr
	...

080094b0 <LL_ADC_StartCalibration>:
{
 80094b0:	b480      	push	{r7}
 80094b2:	b085      	sub	sp, #20
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	4b09      	ldr	r3, [pc, #36]	; (80094e8 <LL_ADC_StartCalibration+0x38>)
 80094c2:	4013      	ands	r3, r2
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80094d0:	430a      	orrs	r2, r1
 80094d2:	4313      	orrs	r3, r2
 80094d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	609a      	str	r2, [r3, #8]
}
 80094dc:	bf00      	nop
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	3ffeffc0 	.word	0x3ffeffc0

080094ec <LL_ADC_IsCalibrationOnGoing>:
{
 80094ec:	b480      	push	{r7}
 80094ee:	b083      	sub	sp, #12
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009500:	d101      	bne.n	8009506 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8009502:	2301      	movs	r3, #1
 8009504:	e000      	b.n	8009508 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <LL_ADC_REG_IsConversionOngoing>:
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	689b      	ldr	r3, [r3, #8]
 8009520:	f003 0304 	and.w	r3, r3, #4
 8009524:	2b04      	cmp	r3, #4
 8009526:	d101      	bne.n	800952c <LL_ADC_REG_IsConversionOngoing+0x18>
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	370c      	adds	r7, #12
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
	...

0800953c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	60f8      	str	r0, [r7, #12]
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8009548:	2300      	movs	r3, #0
 800954a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009552:	2b01      	cmp	r3, #1
 8009554:	d101      	bne.n	800955a <HAL_ADCEx_Calibration_Start+0x1e>
 8009556:	2302      	movs	r3, #2
 8009558:	e04c      	b.n	80095f4 <HAL_ADCEx_Calibration_Start+0xb8>
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f7ff fe44 	bl	80091f0 <ADC_Disable>
 8009568:	4603      	mov	r3, r0
 800956a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d135      	bne.n	80095de <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009576:	4b21      	ldr	r3, [pc, #132]	; (80095fc <HAL_ADCEx_Calibration_Start+0xc0>)
 8009578:	4013      	ands	r3, r2
 800957a:	f043 0202 	orr.w	r2, r3, #2
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	68b9      	ldr	r1, [r7, #8]
 800958a:	4618      	mov	r0, r3
 800958c:	f7ff ff90 	bl	80094b0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8009590:	e014      	b.n	80095bc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	3301      	adds	r3, #1
 8009596:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	4a19      	ldr	r2, [pc, #100]	; (8009600 <HAL_ADCEx_Calibration_Start+0xc4>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d30d      	bcc.n	80095bc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095a4:	f023 0312 	bic.w	r3, r3, #18
 80095a8:	f043 0210 	orr.w	r2, r3, #16
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e01b      	b.n	80095f4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4618      	mov	r0, r3
 80095c2:	f7ff ff93 	bl	80094ec <LL_ADC_IsCalibrationOnGoing>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e2      	bne.n	8009592 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095d0:	f023 0303 	bic.w	r3, r3, #3
 80095d4:	f043 0201 	orr.w	r2, r3, #1
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	661a      	str	r2, [r3, #96]	; 0x60
 80095dc:	e005      	b.n	80095ea <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e2:	f043 0210 	orr.w	r2, r3, #16
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	ffffeefd 	.word	0xffffeefd
 8009600:	25c3f800 	.word	0x25c3f800

08009604 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009668:	b590      	push	{r4, r7, lr}
 800966a:	b0a3      	sub	sp, #140	; 0x8c
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800967e:	2b01      	cmp	r3, #1
 8009680:	d101      	bne.n	8009686 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8009682:	2302      	movs	r3, #2
 8009684:	e0c1      	b.n	800980a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2201      	movs	r2, #1
 800968a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800968e:	2300      	movs	r3, #0
 8009690:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8009692:	2300      	movs	r3, #0
 8009694:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a5e      	ldr	r2, [pc, #376]	; (8009814 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d102      	bne.n	80096a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80096a0:	4b5d      	ldr	r3, [pc, #372]	; (8009818 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	e001      	b.n	80096aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80096a6:	2300      	movs	r3, #0
 80096a8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d10b      	bne.n	80096c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096b4:	f043 0220 	orr.w	r2, r3, #32
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e0a0      	b.n	800980a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff ff22 	bl	8009514 <LL_ADC_REG_IsConversionOngoing>
 80096d0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff ff1b 	bl	8009514 <LL_ADC_REG_IsConversionOngoing>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f040 8081 	bne.w	80097e8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80096e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d17c      	bne.n	80097e8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a48      	ldr	r2, [pc, #288]	; (8009814 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d004      	beq.n	8009702 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a46      	ldr	r2, [pc, #280]	; (8009818 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d101      	bne.n	8009706 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8009702:	4b46      	ldr	r3, [pc, #280]	; (800981c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8009704:	e000      	b.n	8009708 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009706:	4b46      	ldr	r3, [pc, #280]	; (8009820 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8009708:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d039      	beq.n	8009786 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8009712:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009714:	689b      	ldr	r3, [r3, #8]
 8009716:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	431a      	orrs	r2, r3
 8009720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009722:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a3a      	ldr	r2, [pc, #232]	; (8009814 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d004      	beq.n	8009738 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a39      	ldr	r2, [pc, #228]	; (8009818 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d10e      	bne.n	8009756 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8009738:	4836      	ldr	r0, [pc, #216]	; (8009814 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800973a:	f7ff fea5 	bl	8009488 <LL_ADC_IsEnabled>
 800973e:	4604      	mov	r4, r0
 8009740:	4835      	ldr	r0, [pc, #212]	; (8009818 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009742:	f7ff fea1 	bl	8009488 <LL_ADC_IsEnabled>
 8009746:	4603      	mov	r3, r0
 8009748:	4323      	orrs	r3, r4
 800974a:	2b00      	cmp	r3, #0
 800974c:	bf0c      	ite	eq
 800974e:	2301      	moveq	r3, #1
 8009750:	2300      	movne	r3, #0
 8009752:	b2db      	uxtb	r3, r3
 8009754:	e008      	b.n	8009768 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009756:	4833      	ldr	r0, [pc, #204]	; (8009824 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8009758:	f7ff fe96 	bl	8009488 <LL_ADC_IsEnabled>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	bf0c      	ite	eq
 8009762:	2301      	moveq	r3, #1
 8009764:	2300      	movne	r3, #0
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	d047      	beq.n	80097fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800976c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800976e:	689a      	ldr	r2, [r3, #8]
 8009770:	4b2d      	ldr	r3, [pc, #180]	; (8009828 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8009772:	4013      	ands	r3, r2
 8009774:	683a      	ldr	r2, [r7, #0]
 8009776:	6811      	ldr	r1, [r2, #0]
 8009778:	683a      	ldr	r2, [r7, #0]
 800977a:	6892      	ldr	r2, [r2, #8]
 800977c:	430a      	orrs	r2, r1
 800977e:	431a      	orrs	r2, r3
 8009780:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009782:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009784:	e03a      	b.n	80097fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8009786:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800978e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009790:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4a1f      	ldr	r2, [pc, #124]	; (8009814 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d004      	beq.n	80097a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a1d      	ldr	r2, [pc, #116]	; (8009818 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d10e      	bne.n	80097c4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80097a6:	481b      	ldr	r0, [pc, #108]	; (8009814 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80097a8:	f7ff fe6e 	bl	8009488 <LL_ADC_IsEnabled>
 80097ac:	4604      	mov	r4, r0
 80097ae:	481a      	ldr	r0, [pc, #104]	; (8009818 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80097b0:	f7ff fe6a 	bl	8009488 <LL_ADC_IsEnabled>
 80097b4:	4603      	mov	r3, r0
 80097b6:	4323      	orrs	r3, r4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	bf0c      	ite	eq
 80097bc:	2301      	moveq	r3, #1
 80097be:	2300      	movne	r3, #0
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	e008      	b.n	80097d6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80097c4:	4817      	ldr	r0, [pc, #92]	; (8009824 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80097c6:	f7ff fe5f 	bl	8009488 <LL_ADC_IsEnabled>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	bf0c      	ite	eq
 80097d0:	2301      	moveq	r3, #1
 80097d2:	2300      	movne	r3, #0
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d010      	beq.n	80097fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80097da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097dc:	689a      	ldr	r2, [r3, #8]
 80097de:	4b12      	ldr	r3, [pc, #72]	; (8009828 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80097e0:	4013      	ands	r3, r2
 80097e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80097e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80097e6:	e009      	b.n	80097fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097ec:	f043 0220 	orr.w	r2, r3, #32
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80097f4:	2301      	movs	r3, #1
 80097f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80097fa:	e000      	b.n	80097fe <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80097fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8009806:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800980a:	4618      	mov	r0, r3
 800980c:	378c      	adds	r7, #140	; 0x8c
 800980e:	46bd      	mov	sp, r7
 8009810:	bd90      	pop	{r4, r7, pc}
 8009812:	bf00      	nop
 8009814:	40022000 	.word	0x40022000
 8009818:	40022100 	.word	0x40022100
 800981c:	40022300 	.word	0x40022300
 8009820:	58026300 	.word	0x58026300
 8009824:	58026000 	.word	0x58026000
 8009828:	fffff0e0 	.word	0xfffff0e0

0800982c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f003 0307 	and.w	r3, r3, #7
 800983a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800983c:	4b0b      	ldr	r3, [pc, #44]	; (800986c <__NVIC_SetPriorityGrouping+0x40>)
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009848:	4013      	ands	r3, r2
 800984a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009854:	4b06      	ldr	r3, [pc, #24]	; (8009870 <__NVIC_SetPriorityGrouping+0x44>)
 8009856:	4313      	orrs	r3, r2
 8009858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800985a:	4a04      	ldr	r2, [pc, #16]	; (800986c <__NVIC_SetPriorityGrouping+0x40>)
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	60d3      	str	r3, [r2, #12]
}
 8009860:	bf00      	nop
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	e000ed00 	.word	0xe000ed00
 8009870:	05fa0000 	.word	0x05fa0000

08009874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009878:	4b04      	ldr	r3, [pc, #16]	; (800988c <__NVIC_GetPriorityGrouping+0x18>)
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	0a1b      	lsrs	r3, r3, #8
 800987e:	f003 0307 	and.w	r3, r3, #7
}
 8009882:	4618      	mov	r0, r3
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	e000ed00 	.word	0xe000ed00

08009890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	4603      	mov	r3, r0
 8009898:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800989a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	db0b      	blt.n	80098ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098a2:	88fb      	ldrh	r3, [r7, #6]
 80098a4:	f003 021f 	and.w	r2, r3, #31
 80098a8:	4907      	ldr	r1, [pc, #28]	; (80098c8 <__NVIC_EnableIRQ+0x38>)
 80098aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098ae:	095b      	lsrs	r3, r3, #5
 80098b0:	2001      	movs	r0, #1
 80098b2:	fa00 f202 	lsl.w	r2, r0, r2
 80098b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80098ba:	bf00      	nop
 80098bc:	370c      	adds	r7, #12
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	e000e100 	.word	0xe000e100

080098cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b083      	sub	sp, #12
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	6039      	str	r1, [r7, #0]
 80098d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80098d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	db0a      	blt.n	80098f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	490c      	ldr	r1, [pc, #48]	; (8009918 <__NVIC_SetPriority+0x4c>)
 80098e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098ea:	0112      	lsls	r2, r2, #4
 80098ec:	b2d2      	uxtb	r2, r2
 80098ee:	440b      	add	r3, r1
 80098f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80098f4:	e00a      	b.n	800990c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	4908      	ldr	r1, [pc, #32]	; (800991c <__NVIC_SetPriority+0x50>)
 80098fc:	88fb      	ldrh	r3, [r7, #6]
 80098fe:	f003 030f 	and.w	r3, r3, #15
 8009902:	3b04      	subs	r3, #4
 8009904:	0112      	lsls	r2, r2, #4
 8009906:	b2d2      	uxtb	r2, r2
 8009908:	440b      	add	r3, r1
 800990a:	761a      	strb	r2, [r3, #24]
}
 800990c:	bf00      	nop
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr
 8009918:	e000e100 	.word	0xe000e100
 800991c:	e000ed00 	.word	0xe000ed00

08009920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009920:	b480      	push	{r7}
 8009922:	b089      	sub	sp, #36	; 0x24
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f003 0307 	and.w	r3, r3, #7
 8009932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	f1c3 0307 	rsb	r3, r3, #7
 800993a:	2b04      	cmp	r3, #4
 800993c:	bf28      	it	cs
 800993e:	2304      	movcs	r3, #4
 8009940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	3304      	adds	r3, #4
 8009946:	2b06      	cmp	r3, #6
 8009948:	d902      	bls.n	8009950 <NVIC_EncodePriority+0x30>
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	3b03      	subs	r3, #3
 800994e:	e000      	b.n	8009952 <NVIC_EncodePriority+0x32>
 8009950:	2300      	movs	r3, #0
 8009952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009954:	f04f 32ff 	mov.w	r2, #4294967295
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	fa02 f303 	lsl.w	r3, r2, r3
 800995e:	43da      	mvns	r2, r3
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	401a      	ands	r2, r3
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009968:	f04f 31ff 	mov.w	r1, #4294967295
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	fa01 f303 	lsl.w	r3, r1, r3
 8009972:	43d9      	mvns	r1, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009978:	4313      	orrs	r3, r2
         );
}
 800997a:	4618      	mov	r0, r3
 800997c:	3724      	adds	r7, #36	; 0x24
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
	...

08009988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	3b01      	subs	r3, #1
 8009994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009998:	d301      	bcc.n	800999e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800999a:	2301      	movs	r3, #1
 800999c:	e00f      	b.n	80099be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800999e:	4a0a      	ldr	r2, [pc, #40]	; (80099c8 <SysTick_Config+0x40>)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	3b01      	subs	r3, #1
 80099a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099a6:	210f      	movs	r1, #15
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ac:	f7ff ff8e 	bl	80098cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099b0:	4b05      	ldr	r3, [pc, #20]	; (80099c8 <SysTick_Config+0x40>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80099b6:	4b04      	ldr	r3, [pc, #16]	; (80099c8 <SysTick_Config+0x40>)
 80099b8:	2207      	movs	r2, #7
 80099ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3708      	adds	r7, #8
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}
 80099c6:	bf00      	nop
 80099c8:	e000e010 	.word	0xe000e010

080099cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b082      	sub	sp, #8
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7ff ff29 	bl	800982c <__NVIC_SetPriorityGrouping>
}
 80099da:	bf00      	nop
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b086      	sub	sp, #24
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	4603      	mov	r3, r0
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	607a      	str	r2, [r7, #4]
 80099ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80099f0:	f7ff ff40 	bl	8009874 <__NVIC_GetPriorityGrouping>
 80099f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	68b9      	ldr	r1, [r7, #8]
 80099fa:	6978      	ldr	r0, [r7, #20]
 80099fc:	f7ff ff90 	bl	8009920 <NVIC_EncodePriority>
 8009a00:	4602      	mov	r2, r0
 8009a02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a06:	4611      	mov	r1, r2
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7ff ff5f 	bl	80098cc <__NVIC_SetPriority>
}
 8009a0e:	bf00      	nop
 8009a10:	3718      	adds	r7, #24
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b082      	sub	sp, #8
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff ff33 	bl	8009890 <__NVIC_EnableIRQ>
}
 8009a2a:	bf00      	nop
 8009a2c:	3708      	adds	r7, #8
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd80      	pop	{r7, pc}

08009a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7ff ffa4 	bl	8009988 <SysTick_Config>
 8009a40:	4603      	mov	r3, r0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
	...

08009a4c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d101      	bne.n	8009a5e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e054      	b.n	8009b08 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	7f5b      	ldrb	r3, [r3, #29]
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d105      	bne.n	8009a74 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f7f8 f88e 	bl	8001b90 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2202      	movs	r2, #2
 8009a78:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	791b      	ldrb	r3, [r3, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10c      	bne.n	8009a9c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a22      	ldr	r2, [pc, #136]	; (8009b10 <HAL_CRC_Init+0xc4>)
 8009a88:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	689a      	ldr	r2, [r3, #8]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0218 	bic.w	r2, r2, #24
 8009a98:	609a      	str	r2, [r3, #8]
 8009a9a:	e00c      	b.n	8009ab6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6899      	ldr	r1, [r3, #8]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	68db      	ldr	r3, [r3, #12]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f000 f948 	bl	8009d3c <HAL_CRCEx_Polynomial_Set>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d001      	beq.n	8009ab6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e028      	b.n	8009b08 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	795b      	ldrb	r3, [r3, #5]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d105      	bne.n	8009aca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac6:	611a      	str	r2, [r3, #16]
 8009ac8:	e004      	b.n	8009ad4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	6912      	ldr	r2, [r2, #16]
 8009ad2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	695a      	ldr	r2, [r3, #20]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	699a      	ldr	r2, [r3, #24]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	430a      	orrs	r2, r1
 8009afe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009b06:	2300      	movs	r3, #0
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	04c11db7 	.word	0x04c11db7

08009b14 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b086      	sub	sp, #24
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8009b20:	2300      	movs	r3, #0
 8009b22:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2202      	movs	r2, #2
 8009b28:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	689a      	ldr	r2, [r3, #8]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	f042 0201 	orr.w	r2, r2, #1
 8009b38:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	2b03      	cmp	r3, #3
 8009b40:	d006      	beq.n	8009b50 <HAL_CRC_Calculate+0x3c>
 8009b42:	2b03      	cmp	r3, #3
 8009b44:	d829      	bhi.n	8009b9a <HAL_CRC_Calculate+0x86>
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	d019      	beq.n	8009b7e <HAL_CRC_Calculate+0x6a>
 8009b4a:	2b02      	cmp	r3, #2
 8009b4c:	d01e      	beq.n	8009b8c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8009b4e:	e024      	b.n	8009b9a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8009b50:	2300      	movs	r3, #0
 8009b52:	617b      	str	r3, [r7, #20]
 8009b54:	e00a      	b.n	8009b6c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	441a      	add	r2, r3
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6812      	ldr	r2, [r2, #0]
 8009b64:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	617b      	str	r3, [r7, #20]
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d3f0      	bcc.n	8009b56 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	613b      	str	r3, [r7, #16]
      break;
 8009b7c:	e00e      	b.n	8009b9c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 f812 	bl	8009bac <CRC_Handle_8>
 8009b88:	6138      	str	r0, [r7, #16]
      break;
 8009b8a:	e007      	b.n	8009b9c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	68b9      	ldr	r1, [r7, #8]
 8009b90:	68f8      	ldr	r0, [r7, #12]
 8009b92:	f000 f899 	bl	8009cc8 <CRC_Handle_16>
 8009b96:	6138      	str	r0, [r7, #16]
      break;
 8009b98:	e000      	b.n	8009b9c <HAL_CRC_Calculate+0x88>
      break;
 8009b9a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8009ba2:	693b      	ldr	r3, [r7, #16]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3718      	adds	r7, #24
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b089      	sub	sp, #36	; 0x24
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009bb8:	2300      	movs	r3, #0
 8009bba:	61fb      	str	r3, [r7, #28]
 8009bbc:	e023      	b.n	8009c06 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	3301      	adds	r3, #1
 8009bd0:	68b9      	ldr	r1, [r7, #8]
 8009bd2:	440b      	add	r3, r1
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009bd8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009bda:	69fb      	ldr	r3, [r7, #28]
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	3302      	adds	r3, #2
 8009be0:	68b9      	ldr	r1, [r7, #8]
 8009be2:	440b      	add	r3, r1
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009be8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	3303      	adds	r3, #3
 8009bf0:	68b9      	ldr	r1, [r7, #8]
 8009bf2:	440b      	add	r3, r1
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009bfc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009bfe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	3301      	adds	r3, #1
 8009c04:	61fb      	str	r3, [r7, #28]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	089b      	lsrs	r3, r3, #2
 8009c0a:	69fa      	ldr	r2, [r7, #28]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d3d6      	bcc.n	8009bbe <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f003 0303 	and.w	r3, r3, #3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d04d      	beq.n	8009cb6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	f003 0303 	and.w	r3, r3, #3
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d107      	bne.n	8009c34 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	4413      	add	r3, r2
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	6812      	ldr	r2, [r2, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f003 0303 	and.w	r3, r3, #3
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d116      	bne.n	8009c6c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	68ba      	ldr	r2, [r7, #8]
 8009c44:	4413      	add	r3, r2
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	021b      	lsls	r3, r3, #8
 8009c4a:	b21a      	sxth	r2, r3
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	009b      	lsls	r3, r3, #2
 8009c50:	3301      	adds	r3, #1
 8009c52:	68b9      	ldr	r1, [r7, #8]
 8009c54:	440b      	add	r3, r1
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	b21b      	sxth	r3, r3
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	b21b      	sxth	r3, r3
 8009c5e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	8b7a      	ldrh	r2, [r7, #26]
 8009c6a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f003 0303 	and.w	r3, r3, #3
 8009c72:	2b03      	cmp	r3, #3
 8009c74:	d11f      	bne.n	8009cb6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	021b      	lsls	r3, r3, #8
 8009c82:	b21a      	sxth	r2, r3
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	3301      	adds	r3, #1
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	440b      	add	r3, r1
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	b21b      	sxth	r3, r3
 8009c92:	4313      	orrs	r3, r2
 8009c94:	b21b      	sxth	r3, r3
 8009c96:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	8b7a      	ldrh	r2, [r7, #26]
 8009ca2:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	3302      	adds	r3, #2
 8009caa:	68ba      	ldr	r2, [r7, #8]
 8009cac:	4413      	add	r3, r2
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	6812      	ldr	r2, [r2, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681b      	ldr	r3, [r3, #0]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3724      	adds	r7, #36	; 0x24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	617b      	str	r3, [r7, #20]
 8009cd8:	e013      	b.n	8009d02 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	881b      	ldrh	r3, [r3, #0]
 8009ce4:	041a      	lsls	r2, r3, #16
 8009ce6:	697b      	ldr	r3, [r7, #20]
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	3302      	adds	r3, #2
 8009cec:	68b9      	ldr	r1, [r7, #8]
 8009cee:	440b      	add	r3, r1
 8009cf0:	881b      	ldrh	r3, [r3, #0]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	430a      	orrs	r2, r1
 8009cfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	3301      	adds	r3, #1
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	085b      	lsrs	r3, r3, #1
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	d3e6      	bcc.n	8009cda <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d009      	beq.n	8009d2a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	4413      	add	r3, r2
 8009d24:	881a      	ldrh	r2, [r3, #0]
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	371c      	adds	r7, #28
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b087      	sub	sp, #28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009d4c:	231f      	movs	r3, #31
 8009d4e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009d50:	bf00      	nop
 8009d52:	693b      	ldr	r3, [r7, #16]
 8009d54:	1e5a      	subs	r2, r3, #1
 8009d56:	613a      	str	r2, [r7, #16]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d009      	beq.n	8009d70 <HAL_CRCEx_Polynomial_Set+0x34>
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	f003 031f 	and.w	r3, r3, #31
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	fa22 f303 	lsr.w	r3, r2, r3
 8009d68:	f003 0301 	and.w	r3, r3, #1
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d0f0      	beq.n	8009d52 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b18      	cmp	r3, #24
 8009d74:	d846      	bhi.n	8009e04 <HAL_CRCEx_Polynomial_Set+0xc8>
 8009d76:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <HAL_CRCEx_Polynomial_Set+0x40>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009e0b 	.word	0x08009e0b
 8009d80:	08009e05 	.word	0x08009e05
 8009d84:	08009e05 	.word	0x08009e05
 8009d88:	08009e05 	.word	0x08009e05
 8009d8c:	08009e05 	.word	0x08009e05
 8009d90:	08009e05 	.word	0x08009e05
 8009d94:	08009e05 	.word	0x08009e05
 8009d98:	08009e05 	.word	0x08009e05
 8009d9c:	08009df9 	.word	0x08009df9
 8009da0:	08009e05 	.word	0x08009e05
 8009da4:	08009e05 	.word	0x08009e05
 8009da8:	08009e05 	.word	0x08009e05
 8009dac:	08009e05 	.word	0x08009e05
 8009db0:	08009e05 	.word	0x08009e05
 8009db4:	08009e05 	.word	0x08009e05
 8009db8:	08009e05 	.word	0x08009e05
 8009dbc:	08009ded 	.word	0x08009ded
 8009dc0:	08009e05 	.word	0x08009e05
 8009dc4:	08009e05 	.word	0x08009e05
 8009dc8:	08009e05 	.word	0x08009e05
 8009dcc:	08009e05 	.word	0x08009e05
 8009dd0:	08009e05 	.word	0x08009e05
 8009dd4:	08009e05 	.word	0x08009e05
 8009dd8:	08009e05 	.word	0x08009e05
 8009ddc:	08009de1 	.word	0x08009de1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	2b06      	cmp	r3, #6
 8009de4:	d913      	bls.n	8009e0e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009dea:	e010      	b.n	8009e0e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	2b07      	cmp	r3, #7
 8009df0:	d90f      	bls.n	8009e12 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009df6:	e00c      	b.n	8009e12 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	2b0f      	cmp	r3, #15
 8009dfc:	d90b      	bls.n	8009e16 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009e02:	e008      	b.n	8009e16 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	75fb      	strb	r3, [r7, #23]
      break;
 8009e08:	e006      	b.n	8009e18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009e0a:	bf00      	nop
 8009e0c:	e004      	b.n	8009e18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009e0e:	bf00      	nop
 8009e10:	e002      	b.n	8009e18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009e12:	bf00      	nop
 8009e14:	e000      	b.n	8009e18 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009e16:	bf00      	nop
  }
  if (status == HAL_OK)
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d10d      	bne.n	8009e3a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	68ba      	ldr	r2, [r7, #8]
 8009e24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f023 0118 	bic.w	r1, r3, #24
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	371c      	adds	r7, #28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b086      	sub	sp, #24
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009e50:	f7fd fb6e 	bl	8007530 <HAL_GetTick>
 8009e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d101      	bne.n	8009e60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e314      	b.n	800a48a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a66      	ldr	r2, [pc, #408]	; (800a000 <HAL_DMA_Init+0x1b8>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d04a      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a65      	ldr	r2, [pc, #404]	; (800a004 <HAL_DMA_Init+0x1bc>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d045      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a63      	ldr	r2, [pc, #396]	; (800a008 <HAL_DMA_Init+0x1c0>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d040      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a62      	ldr	r2, [pc, #392]	; (800a00c <HAL_DMA_Init+0x1c4>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d03b      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a60      	ldr	r2, [pc, #384]	; (800a010 <HAL_DMA_Init+0x1c8>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d036      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a5f      	ldr	r2, [pc, #380]	; (800a014 <HAL_DMA_Init+0x1cc>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d031      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a5d      	ldr	r2, [pc, #372]	; (800a018 <HAL_DMA_Init+0x1d0>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d02c      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a5c      	ldr	r2, [pc, #368]	; (800a01c <HAL_DMA_Init+0x1d4>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d027      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a5a      	ldr	r2, [pc, #360]	; (800a020 <HAL_DMA_Init+0x1d8>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d022      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a59      	ldr	r2, [pc, #356]	; (800a024 <HAL_DMA_Init+0x1dc>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d01d      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a57      	ldr	r2, [pc, #348]	; (800a028 <HAL_DMA_Init+0x1e0>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d018      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a56      	ldr	r2, [pc, #344]	; (800a02c <HAL_DMA_Init+0x1e4>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d013      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a54      	ldr	r2, [pc, #336]	; (800a030 <HAL_DMA_Init+0x1e8>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d00e      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a53      	ldr	r2, [pc, #332]	; (800a034 <HAL_DMA_Init+0x1ec>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d009      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a51      	ldr	r2, [pc, #324]	; (800a038 <HAL_DMA_Init+0x1f0>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d004      	beq.n	8009f00 <HAL_DMA_Init+0xb8>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a50      	ldr	r2, [pc, #320]	; (800a03c <HAL_DMA_Init+0x1f4>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d101      	bne.n	8009f04 <HAL_DMA_Init+0xbc>
 8009f00:	2301      	movs	r3, #1
 8009f02:	e000      	b.n	8009f06 <HAL_DMA_Init+0xbe>
 8009f04:	2300      	movs	r3, #0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 813c 	beq.w	800a184 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2202      	movs	r2, #2
 8009f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a37      	ldr	r2, [pc, #220]	; (800a000 <HAL_DMA_Init+0x1b8>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d04a      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a36      	ldr	r2, [pc, #216]	; (800a004 <HAL_DMA_Init+0x1bc>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d045      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a34      	ldr	r2, [pc, #208]	; (800a008 <HAL_DMA_Init+0x1c0>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d040      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a33      	ldr	r2, [pc, #204]	; (800a00c <HAL_DMA_Init+0x1c4>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d03b      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a31      	ldr	r2, [pc, #196]	; (800a010 <HAL_DMA_Init+0x1c8>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d036      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a30      	ldr	r2, [pc, #192]	; (800a014 <HAL_DMA_Init+0x1cc>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d031      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a2e      	ldr	r2, [pc, #184]	; (800a018 <HAL_DMA_Init+0x1d0>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d02c      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a2d      	ldr	r2, [pc, #180]	; (800a01c <HAL_DMA_Init+0x1d4>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d027      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a2b      	ldr	r2, [pc, #172]	; (800a020 <HAL_DMA_Init+0x1d8>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d022      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a2a      	ldr	r2, [pc, #168]	; (800a024 <HAL_DMA_Init+0x1dc>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d01d      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a28      	ldr	r2, [pc, #160]	; (800a028 <HAL_DMA_Init+0x1e0>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d018      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a27      	ldr	r2, [pc, #156]	; (800a02c <HAL_DMA_Init+0x1e4>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d013      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a25      	ldr	r2, [pc, #148]	; (800a030 <HAL_DMA_Init+0x1e8>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d00e      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a24      	ldr	r2, [pc, #144]	; (800a034 <HAL_DMA_Init+0x1ec>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d009      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a22      	ldr	r2, [pc, #136]	; (800a038 <HAL_DMA_Init+0x1f0>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d004      	beq.n	8009fbc <HAL_DMA_Init+0x174>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a21      	ldr	r2, [pc, #132]	; (800a03c <HAL_DMA_Init+0x1f4>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d108      	bne.n	8009fce <HAL_DMA_Init+0x186>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f022 0201 	bic.w	r2, r2, #1
 8009fca:	601a      	str	r2, [r3, #0]
 8009fcc:	e007      	b.n	8009fde <HAL_DMA_Init+0x196>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f022 0201 	bic.w	r2, r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009fde:	e02f      	b.n	800a040 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009fe0:	f7fd faa6 	bl	8007530 <HAL_GetTick>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	1ad3      	subs	r3, r2, r3
 8009fea:	2b05      	cmp	r3, #5
 8009fec:	d928      	bls.n	800a040 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2220      	movs	r2, #32
 8009ff2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2203      	movs	r2, #3
 8009ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e244      	b.n	800a48a <HAL_DMA_Init+0x642>
 800a000:	40020010 	.word	0x40020010
 800a004:	40020028 	.word	0x40020028
 800a008:	40020040 	.word	0x40020040
 800a00c:	40020058 	.word	0x40020058
 800a010:	40020070 	.word	0x40020070
 800a014:	40020088 	.word	0x40020088
 800a018:	400200a0 	.word	0x400200a0
 800a01c:	400200b8 	.word	0x400200b8
 800a020:	40020410 	.word	0x40020410
 800a024:	40020428 	.word	0x40020428
 800a028:	40020440 	.word	0x40020440
 800a02c:	40020458 	.word	0x40020458
 800a030:	40020470 	.word	0x40020470
 800a034:	40020488 	.word	0x40020488
 800a038:	400204a0 	.word	0x400204a0
 800a03c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d1c8      	bne.n	8009fe0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a056:	697a      	ldr	r2, [r7, #20]
 800a058:	4b84      	ldr	r3, [pc, #528]	; (800a26c <HAL_DMA_Init+0x424>)
 800a05a:	4013      	ands	r3, r2
 800a05c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800a066:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a072:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a07e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	6a1b      	ldr	r3, [r3, #32]
 800a084:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800a086:	697a      	ldr	r2, [r7, #20]
 800a088:	4313      	orrs	r3, r2
 800a08a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	2b04      	cmp	r3, #4
 800a092:	d107      	bne.n	800a0a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a09c:	4313      	orrs	r3, r2
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	2b28      	cmp	r3, #40	; 0x28
 800a0aa:	d903      	bls.n	800a0b4 <HAL_DMA_Init+0x26c>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	2b2e      	cmp	r3, #46	; 0x2e
 800a0b2:	d91f      	bls.n	800a0f4 <HAL_DMA_Init+0x2ac>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	2b3e      	cmp	r3, #62	; 0x3e
 800a0ba:	d903      	bls.n	800a0c4 <HAL_DMA_Init+0x27c>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2b42      	cmp	r3, #66	; 0x42
 800a0c2:	d917      	bls.n	800a0f4 <HAL_DMA_Init+0x2ac>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	2b46      	cmp	r3, #70	; 0x46
 800a0ca:	d903      	bls.n	800a0d4 <HAL_DMA_Init+0x28c>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	2b48      	cmp	r3, #72	; 0x48
 800a0d2:	d90f      	bls.n	800a0f4 <HAL_DMA_Init+0x2ac>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2b4e      	cmp	r3, #78	; 0x4e
 800a0da:	d903      	bls.n	800a0e4 <HAL_DMA_Init+0x29c>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2b52      	cmp	r3, #82	; 0x52
 800a0e2:	d907      	bls.n	800a0f4 <HAL_DMA_Init+0x2ac>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	2b73      	cmp	r3, #115	; 0x73
 800a0ea:	d905      	bls.n	800a0f8 <HAL_DMA_Init+0x2b0>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	2b77      	cmp	r3, #119	; 0x77
 800a0f2:	d801      	bhi.n	800a0f8 <HAL_DMA_Init+0x2b0>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	e000      	b.n	800a0fa <HAL_DMA_Init+0x2b2>
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a104:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	697a      	ldr	r2, [r7, #20]
 800a10c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	695b      	ldr	r3, [r3, #20]
 800a114:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f023 0307 	bic.w	r3, r3, #7
 800a11c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	4313      	orrs	r3, r2
 800a126:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	d117      	bne.n	800a160 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	4313      	orrs	r3, r2
 800a138:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00e      	beq.n	800a160 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f002 fb3e 	bl	800c7c4 <DMA_CheckFifoParam>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d008      	beq.n	800a160 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2240      	movs	r2, #64	; 0x40
 800a152:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e194      	b.n	800a48a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	697a      	ldr	r2, [r7, #20]
 800a166:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f002 fa79 	bl	800c660 <DMA_CalcBaseAndBitshift>
 800a16e:	4603      	mov	r3, r0
 800a170:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a176:	f003 031f 	and.w	r3, r3, #31
 800a17a:	223f      	movs	r2, #63	; 0x3f
 800a17c:	409a      	lsls	r2, r3
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	609a      	str	r2, [r3, #8]
 800a182:	e0ca      	b.n	800a31a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a39      	ldr	r2, [pc, #228]	; (800a270 <HAL_DMA_Init+0x428>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d022      	beq.n	800a1d4 <HAL_DMA_Init+0x38c>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a38      	ldr	r2, [pc, #224]	; (800a274 <HAL_DMA_Init+0x42c>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d01d      	beq.n	800a1d4 <HAL_DMA_Init+0x38c>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a36      	ldr	r2, [pc, #216]	; (800a278 <HAL_DMA_Init+0x430>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d018      	beq.n	800a1d4 <HAL_DMA_Init+0x38c>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a35      	ldr	r2, [pc, #212]	; (800a27c <HAL_DMA_Init+0x434>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d013      	beq.n	800a1d4 <HAL_DMA_Init+0x38c>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a33      	ldr	r2, [pc, #204]	; (800a280 <HAL_DMA_Init+0x438>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d00e      	beq.n	800a1d4 <HAL_DMA_Init+0x38c>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	4a32      	ldr	r2, [pc, #200]	; (800a284 <HAL_DMA_Init+0x43c>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d009      	beq.n	800a1d4 <HAL_DMA_Init+0x38c>
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4a30      	ldr	r2, [pc, #192]	; (800a288 <HAL_DMA_Init+0x440>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d004      	beq.n	800a1d4 <HAL_DMA_Init+0x38c>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a2f      	ldr	r2, [pc, #188]	; (800a28c <HAL_DMA_Init+0x444>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d101      	bne.n	800a1d8 <HAL_DMA_Init+0x390>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e000      	b.n	800a1da <HAL_DMA_Init+0x392>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 8094 	beq.w	800a308 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a22      	ldr	r2, [pc, #136]	; (800a270 <HAL_DMA_Init+0x428>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d021      	beq.n	800a22e <HAL_DMA_Init+0x3e6>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a21      	ldr	r2, [pc, #132]	; (800a274 <HAL_DMA_Init+0x42c>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d01c      	beq.n	800a22e <HAL_DMA_Init+0x3e6>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a1f      	ldr	r2, [pc, #124]	; (800a278 <HAL_DMA_Init+0x430>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d017      	beq.n	800a22e <HAL_DMA_Init+0x3e6>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4a1e      	ldr	r2, [pc, #120]	; (800a27c <HAL_DMA_Init+0x434>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d012      	beq.n	800a22e <HAL_DMA_Init+0x3e6>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a1c      	ldr	r2, [pc, #112]	; (800a280 <HAL_DMA_Init+0x438>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d00d      	beq.n	800a22e <HAL_DMA_Init+0x3e6>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a1b      	ldr	r2, [pc, #108]	; (800a284 <HAL_DMA_Init+0x43c>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d008      	beq.n	800a22e <HAL_DMA_Init+0x3e6>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4a19      	ldr	r2, [pc, #100]	; (800a288 <HAL_DMA_Init+0x440>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d003      	beq.n	800a22e <HAL_DMA_Init+0x3e6>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a18      	ldr	r2, [pc, #96]	; (800a28c <HAL_DMA_Init+0x444>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	4b11      	ldr	r3, [pc, #68]	; (800a290 <HAL_DMA_Init+0x448>)
 800a24c:	4013      	ands	r3, r2
 800a24e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	2b40      	cmp	r3, #64	; 0x40
 800a256:	d01d      	beq.n	800a294 <HAL_DMA_Init+0x44c>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	689b      	ldr	r3, [r3, #8]
 800a25c:	2b80      	cmp	r3, #128	; 0x80
 800a25e:	d102      	bne.n	800a266 <HAL_DMA_Init+0x41e>
 800a260:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a264:	e017      	b.n	800a296 <HAL_DMA_Init+0x44e>
 800a266:	2300      	movs	r3, #0
 800a268:	e015      	b.n	800a296 <HAL_DMA_Init+0x44e>
 800a26a:	bf00      	nop
 800a26c:	fe10803f 	.word	0xfe10803f
 800a270:	58025408 	.word	0x58025408
 800a274:	5802541c 	.word	0x5802541c
 800a278:	58025430 	.word	0x58025430
 800a27c:	58025444 	.word	0x58025444
 800a280:	58025458 	.word	0x58025458
 800a284:	5802546c 	.word	0x5802546c
 800a288:	58025480 	.word	0x58025480
 800a28c:	58025494 	.word	0x58025494
 800a290:	fffe000f 	.word	0xfffe000f
 800a294:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	68d2      	ldr	r2, [r2, #12]
 800a29a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a29c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a2a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	695b      	ldr	r3, [r3, #20]
 800a2aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a2ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a2b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	69db      	ldr	r3, [r3, #28]
 800a2ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a2bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a2c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	461a      	mov	r2, r3
 800a2da:	4b6e      	ldr	r3, [pc, #440]	; (800a494 <HAL_DMA_Init+0x64c>)
 800a2dc:	4413      	add	r3, r2
 800a2de:	4a6e      	ldr	r2, [pc, #440]	; (800a498 <HAL_DMA_Init+0x650>)
 800a2e0:	fba2 2303 	umull	r2, r3, r2, r3
 800a2e4:	091b      	lsrs	r3, r3, #4
 800a2e6:	009a      	lsls	r2, r3, #2
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f002 f9b7 	bl	800c660 <DMA_CalcBaseAndBitshift>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2fa:	f003 031f 	and.w	r3, r3, #31
 800a2fe:	2201      	movs	r2, #1
 800a300:	409a      	lsls	r2, r3
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	605a      	str	r2, [r3, #4]
 800a306:	e008      	b.n	800a31a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2240      	movs	r2, #64	; 0x40
 800a30c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2203      	movs	r2, #3
 800a312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e0b7      	b.n	800a48a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a5f      	ldr	r2, [pc, #380]	; (800a49c <HAL_DMA_Init+0x654>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d072      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a5d      	ldr	r2, [pc, #372]	; (800a4a0 <HAL_DMA_Init+0x658>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d06d      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a5c      	ldr	r2, [pc, #368]	; (800a4a4 <HAL_DMA_Init+0x65c>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d068      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a5a      	ldr	r2, [pc, #360]	; (800a4a8 <HAL_DMA_Init+0x660>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d063      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a59      	ldr	r2, [pc, #356]	; (800a4ac <HAL_DMA_Init+0x664>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d05e      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a57      	ldr	r2, [pc, #348]	; (800a4b0 <HAL_DMA_Init+0x668>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d059      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a56      	ldr	r2, [pc, #344]	; (800a4b4 <HAL_DMA_Init+0x66c>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d054      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a54      	ldr	r2, [pc, #336]	; (800a4b8 <HAL_DMA_Init+0x670>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d04f      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a53      	ldr	r2, [pc, #332]	; (800a4bc <HAL_DMA_Init+0x674>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d04a      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a51      	ldr	r2, [pc, #324]	; (800a4c0 <HAL_DMA_Init+0x678>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d045      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	4a50      	ldr	r2, [pc, #320]	; (800a4c4 <HAL_DMA_Init+0x67c>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d040      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a4e      	ldr	r2, [pc, #312]	; (800a4c8 <HAL_DMA_Init+0x680>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d03b      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a4d      	ldr	r2, [pc, #308]	; (800a4cc <HAL_DMA_Init+0x684>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d036      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a4b      	ldr	r2, [pc, #300]	; (800a4d0 <HAL_DMA_Init+0x688>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d031      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4a4a      	ldr	r2, [pc, #296]	; (800a4d4 <HAL_DMA_Init+0x68c>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	d02c      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a48      	ldr	r2, [pc, #288]	; (800a4d8 <HAL_DMA_Init+0x690>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d027      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a47      	ldr	r2, [pc, #284]	; (800a4dc <HAL_DMA_Init+0x694>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d022      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a45      	ldr	r2, [pc, #276]	; (800a4e0 <HAL_DMA_Init+0x698>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d01d      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a44      	ldr	r2, [pc, #272]	; (800a4e4 <HAL_DMA_Init+0x69c>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d018      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a42      	ldr	r2, [pc, #264]	; (800a4e8 <HAL_DMA_Init+0x6a0>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d013      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a41      	ldr	r2, [pc, #260]	; (800a4ec <HAL_DMA_Init+0x6a4>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d00e      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a3f      	ldr	r2, [pc, #252]	; (800a4f0 <HAL_DMA_Init+0x6a8>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d009      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a3e      	ldr	r2, [pc, #248]	; (800a4f4 <HAL_DMA_Init+0x6ac>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d004      	beq.n	800a40a <HAL_DMA_Init+0x5c2>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a3c      	ldr	r2, [pc, #240]	; (800a4f8 <HAL_DMA_Init+0x6b0>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d101      	bne.n	800a40e <HAL_DMA_Init+0x5c6>
 800a40a:	2301      	movs	r3, #1
 800a40c:	e000      	b.n	800a410 <HAL_DMA_Init+0x5c8>
 800a40e:	2300      	movs	r3, #0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d032      	beq.n	800a47a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f002 fa51 	bl	800c8bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	2b80      	cmp	r3, #128	; 0x80
 800a420:	d102      	bne.n	800a428 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a430:	b2d2      	uxtb	r2, r2
 800a432:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a43c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d010      	beq.n	800a468 <HAL_DMA_Init+0x620>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	2b08      	cmp	r3, #8
 800a44c:	d80c      	bhi.n	800a468 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f002 face 	bl	800c9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a458:	2200      	movs	r2, #0
 800a45a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a464:	605a      	str	r2, [r3, #4]
 800a466:	e008      	b.n	800a47a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2200      	movs	r2, #0
 800a46c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2201      	movs	r2, #1
 800a484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3718      	adds	r7, #24
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
 800a492:	bf00      	nop
 800a494:	a7fdabf8 	.word	0xa7fdabf8
 800a498:	cccccccd 	.word	0xcccccccd
 800a49c:	40020010 	.word	0x40020010
 800a4a0:	40020028 	.word	0x40020028
 800a4a4:	40020040 	.word	0x40020040
 800a4a8:	40020058 	.word	0x40020058
 800a4ac:	40020070 	.word	0x40020070
 800a4b0:	40020088 	.word	0x40020088
 800a4b4:	400200a0 	.word	0x400200a0
 800a4b8:	400200b8 	.word	0x400200b8
 800a4bc:	40020410 	.word	0x40020410
 800a4c0:	40020428 	.word	0x40020428
 800a4c4:	40020440 	.word	0x40020440
 800a4c8:	40020458 	.word	0x40020458
 800a4cc:	40020470 	.word	0x40020470
 800a4d0:	40020488 	.word	0x40020488
 800a4d4:	400204a0 	.word	0x400204a0
 800a4d8:	400204b8 	.word	0x400204b8
 800a4dc:	58025408 	.word	0x58025408
 800a4e0:	5802541c 	.word	0x5802541c
 800a4e4:	58025430 	.word	0x58025430
 800a4e8:	58025444 	.word	0x58025444
 800a4ec:	58025458 	.word	0x58025458
 800a4f0:	5802546c 	.word	0x5802546c
 800a4f4:	58025480 	.word	0x58025480
 800a4f8:	58025494 	.word	0x58025494

0800a4fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e226      	b.n	800a966 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d101      	bne.n	800a526 <HAL_DMA_Start_IT+0x2a>
 800a522:	2302      	movs	r3, #2
 800a524:	e21f      	b.n	800a966 <HAL_DMA_Start_IT+0x46a>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b01      	cmp	r3, #1
 800a538:	f040 820a 	bne.w	800a950 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2202      	movs	r2, #2
 800a540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a68      	ldr	r2, [pc, #416]	; (800a6f0 <HAL_DMA_Start_IT+0x1f4>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d04a      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a66      	ldr	r2, [pc, #408]	; (800a6f4 <HAL_DMA_Start_IT+0x1f8>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d045      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a65      	ldr	r2, [pc, #404]	; (800a6f8 <HAL_DMA_Start_IT+0x1fc>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d040      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a63      	ldr	r2, [pc, #396]	; (800a6fc <HAL_DMA_Start_IT+0x200>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d03b      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a62      	ldr	r2, [pc, #392]	; (800a700 <HAL_DMA_Start_IT+0x204>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d036      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a60      	ldr	r2, [pc, #384]	; (800a704 <HAL_DMA_Start_IT+0x208>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d031      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a5f      	ldr	r2, [pc, #380]	; (800a708 <HAL_DMA_Start_IT+0x20c>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d02c      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a5d      	ldr	r2, [pc, #372]	; (800a70c <HAL_DMA_Start_IT+0x210>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d027      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a5c      	ldr	r2, [pc, #368]	; (800a710 <HAL_DMA_Start_IT+0x214>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d022      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a5a      	ldr	r2, [pc, #360]	; (800a714 <HAL_DMA_Start_IT+0x218>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d01d      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a59      	ldr	r2, [pc, #356]	; (800a718 <HAL_DMA_Start_IT+0x21c>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d018      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a57      	ldr	r2, [pc, #348]	; (800a71c <HAL_DMA_Start_IT+0x220>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d013      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a56      	ldr	r2, [pc, #344]	; (800a720 <HAL_DMA_Start_IT+0x224>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d00e      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a54      	ldr	r2, [pc, #336]	; (800a724 <HAL_DMA_Start_IT+0x228>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	d009      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a53      	ldr	r2, [pc, #332]	; (800a728 <HAL_DMA_Start_IT+0x22c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d004      	beq.n	800a5ea <HAL_DMA_Start_IT+0xee>
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a51      	ldr	r2, [pc, #324]	; (800a72c <HAL_DMA_Start_IT+0x230>)
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	d108      	bne.n	800a5fc <HAL_DMA_Start_IT+0x100>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f022 0201 	bic.w	r2, r2, #1
 800a5f8:	601a      	str	r2, [r3, #0]
 800a5fa:	e007      	b.n	800a60c <HAL_DMA_Start_IT+0x110>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f022 0201 	bic.w	r2, r2, #1
 800a60a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	68b9      	ldr	r1, [r7, #8]
 800a612:	68f8      	ldr	r0, [r7, #12]
 800a614:	f001 fe78 	bl	800c308 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a34      	ldr	r2, [pc, #208]	; (800a6f0 <HAL_DMA_Start_IT+0x1f4>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d04a      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a33      	ldr	r2, [pc, #204]	; (800a6f4 <HAL_DMA_Start_IT+0x1f8>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d045      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a31      	ldr	r2, [pc, #196]	; (800a6f8 <HAL_DMA_Start_IT+0x1fc>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d040      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a30      	ldr	r2, [pc, #192]	; (800a6fc <HAL_DMA_Start_IT+0x200>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d03b      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a2e      	ldr	r2, [pc, #184]	; (800a700 <HAL_DMA_Start_IT+0x204>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d036      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4a2d      	ldr	r2, [pc, #180]	; (800a704 <HAL_DMA_Start_IT+0x208>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d031      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a2b      	ldr	r2, [pc, #172]	; (800a708 <HAL_DMA_Start_IT+0x20c>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d02c      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a2a      	ldr	r2, [pc, #168]	; (800a70c <HAL_DMA_Start_IT+0x210>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d027      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a28      	ldr	r2, [pc, #160]	; (800a710 <HAL_DMA_Start_IT+0x214>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d022      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	4a27      	ldr	r2, [pc, #156]	; (800a714 <HAL_DMA_Start_IT+0x218>)
 800a678:	4293      	cmp	r3, r2
 800a67a:	d01d      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a25      	ldr	r2, [pc, #148]	; (800a718 <HAL_DMA_Start_IT+0x21c>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d018      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a24      	ldr	r2, [pc, #144]	; (800a71c <HAL_DMA_Start_IT+0x220>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d013      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a22      	ldr	r2, [pc, #136]	; (800a720 <HAL_DMA_Start_IT+0x224>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d00e      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a21      	ldr	r2, [pc, #132]	; (800a724 <HAL_DMA_Start_IT+0x228>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d009      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a1f      	ldr	r2, [pc, #124]	; (800a728 <HAL_DMA_Start_IT+0x22c>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d004      	beq.n	800a6b8 <HAL_DMA_Start_IT+0x1bc>
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a1e      	ldr	r2, [pc, #120]	; (800a72c <HAL_DMA_Start_IT+0x230>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d101      	bne.n	800a6bc <HAL_DMA_Start_IT+0x1c0>
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e000      	b.n	800a6be <HAL_DMA_Start_IT+0x1c2>
 800a6bc:	2300      	movs	r3, #0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d036      	beq.n	800a730 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f023 021e 	bic.w	r2, r3, #30
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f042 0216 	orr.w	r2, r2, #22
 800a6d4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d03e      	beq.n	800a75c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f042 0208 	orr.w	r2, r2, #8
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	e035      	b.n	800a75c <HAL_DMA_Start_IT+0x260>
 800a6f0:	40020010 	.word	0x40020010
 800a6f4:	40020028 	.word	0x40020028
 800a6f8:	40020040 	.word	0x40020040
 800a6fc:	40020058 	.word	0x40020058
 800a700:	40020070 	.word	0x40020070
 800a704:	40020088 	.word	0x40020088
 800a708:	400200a0 	.word	0x400200a0
 800a70c:	400200b8 	.word	0x400200b8
 800a710:	40020410 	.word	0x40020410
 800a714:	40020428 	.word	0x40020428
 800a718:	40020440 	.word	0x40020440
 800a71c:	40020458 	.word	0x40020458
 800a720:	40020470 	.word	0x40020470
 800a724:	40020488 	.word	0x40020488
 800a728:	400204a0 	.word	0x400204a0
 800a72c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f023 020e 	bic.w	r2, r3, #14
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f042 020a 	orr.w	r2, r2, #10
 800a742:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d007      	beq.n	800a75c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0204 	orr.w	r2, r2, #4
 800a75a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a83      	ldr	r2, [pc, #524]	; (800a970 <HAL_DMA_Start_IT+0x474>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d072      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a82      	ldr	r2, [pc, #520]	; (800a974 <HAL_DMA_Start_IT+0x478>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d06d      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a80      	ldr	r2, [pc, #512]	; (800a978 <HAL_DMA_Start_IT+0x47c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d068      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4a7f      	ldr	r2, [pc, #508]	; (800a97c <HAL_DMA_Start_IT+0x480>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d063      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a7d      	ldr	r2, [pc, #500]	; (800a980 <HAL_DMA_Start_IT+0x484>)
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d05e      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a7c      	ldr	r2, [pc, #496]	; (800a984 <HAL_DMA_Start_IT+0x488>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d059      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a7a      	ldr	r2, [pc, #488]	; (800a988 <HAL_DMA_Start_IT+0x48c>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d054      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a79      	ldr	r2, [pc, #484]	; (800a98c <HAL_DMA_Start_IT+0x490>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d04f      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a77      	ldr	r2, [pc, #476]	; (800a990 <HAL_DMA_Start_IT+0x494>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d04a      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a76      	ldr	r2, [pc, #472]	; (800a994 <HAL_DMA_Start_IT+0x498>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d045      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	4a74      	ldr	r2, [pc, #464]	; (800a998 <HAL_DMA_Start_IT+0x49c>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d040      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	4a73      	ldr	r2, [pc, #460]	; (800a99c <HAL_DMA_Start_IT+0x4a0>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d03b      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4a71      	ldr	r2, [pc, #452]	; (800a9a0 <HAL_DMA_Start_IT+0x4a4>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d036      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a70      	ldr	r2, [pc, #448]	; (800a9a4 <HAL_DMA_Start_IT+0x4a8>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d031      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a6e      	ldr	r2, [pc, #440]	; (800a9a8 <HAL_DMA_Start_IT+0x4ac>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d02c      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	4a6d      	ldr	r2, [pc, #436]	; (800a9ac <HAL_DMA_Start_IT+0x4b0>)
 800a7f8:	4293      	cmp	r3, r2
 800a7fa:	d027      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4a6b      	ldr	r2, [pc, #428]	; (800a9b0 <HAL_DMA_Start_IT+0x4b4>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d022      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a6a      	ldr	r2, [pc, #424]	; (800a9b4 <HAL_DMA_Start_IT+0x4b8>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d01d      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a68      	ldr	r2, [pc, #416]	; (800a9b8 <HAL_DMA_Start_IT+0x4bc>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d018      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4a67      	ldr	r2, [pc, #412]	; (800a9bc <HAL_DMA_Start_IT+0x4c0>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d013      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	4a65      	ldr	r2, [pc, #404]	; (800a9c0 <HAL_DMA_Start_IT+0x4c4>)
 800a82a:	4293      	cmp	r3, r2
 800a82c:	d00e      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	4a64      	ldr	r2, [pc, #400]	; (800a9c4 <HAL_DMA_Start_IT+0x4c8>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d009      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a62      	ldr	r2, [pc, #392]	; (800a9c8 <HAL_DMA_Start_IT+0x4cc>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d004      	beq.n	800a84c <HAL_DMA_Start_IT+0x350>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a61      	ldr	r2, [pc, #388]	; (800a9cc <HAL_DMA_Start_IT+0x4d0>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d101      	bne.n	800a850 <HAL_DMA_Start_IT+0x354>
 800a84c:	2301      	movs	r3, #1
 800a84e:	e000      	b.n	800a852 <HAL_DMA_Start_IT+0x356>
 800a850:	2300      	movs	r3, #0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d01a      	beq.n	800a88c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a860:	2b00      	cmp	r3, #0
 800a862:	d007      	beq.n	800a874 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a86e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a872:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d007      	beq.n	800a88c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a88a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a37      	ldr	r2, [pc, #220]	; (800a970 <HAL_DMA_Start_IT+0x474>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d04a      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a36      	ldr	r2, [pc, #216]	; (800a974 <HAL_DMA_Start_IT+0x478>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d045      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	4a34      	ldr	r2, [pc, #208]	; (800a978 <HAL_DMA_Start_IT+0x47c>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d040      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	4a33      	ldr	r2, [pc, #204]	; (800a97c <HAL_DMA_Start_IT+0x480>)
 800a8b0:	4293      	cmp	r3, r2
 800a8b2:	d03b      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a31      	ldr	r2, [pc, #196]	; (800a980 <HAL_DMA_Start_IT+0x484>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d036      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	4a30      	ldr	r2, [pc, #192]	; (800a984 <HAL_DMA_Start_IT+0x488>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d031      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a2e      	ldr	r2, [pc, #184]	; (800a988 <HAL_DMA_Start_IT+0x48c>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d02c      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	4a2d      	ldr	r2, [pc, #180]	; (800a98c <HAL_DMA_Start_IT+0x490>)
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d027      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a2b      	ldr	r2, [pc, #172]	; (800a990 <HAL_DMA_Start_IT+0x494>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d022      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	4a2a      	ldr	r2, [pc, #168]	; (800a994 <HAL_DMA_Start_IT+0x498>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d01d      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a28      	ldr	r2, [pc, #160]	; (800a998 <HAL_DMA_Start_IT+0x49c>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d018      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	4a27      	ldr	r2, [pc, #156]	; (800a99c <HAL_DMA_Start_IT+0x4a0>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d013      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a25      	ldr	r2, [pc, #148]	; (800a9a0 <HAL_DMA_Start_IT+0x4a4>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d00e      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4a24      	ldr	r2, [pc, #144]	; (800a9a4 <HAL_DMA_Start_IT+0x4a8>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d009      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a22      	ldr	r2, [pc, #136]	; (800a9a8 <HAL_DMA_Start_IT+0x4ac>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d004      	beq.n	800a92c <HAL_DMA_Start_IT+0x430>
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	4a21      	ldr	r2, [pc, #132]	; (800a9ac <HAL_DMA_Start_IT+0x4b0>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d108      	bne.n	800a93e <HAL_DMA_Start_IT+0x442>
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f042 0201 	orr.w	r2, r2, #1
 800a93a:	601a      	str	r2, [r3, #0]
 800a93c:	e012      	b.n	800a964 <HAL_DMA_Start_IT+0x468>
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f042 0201 	orr.w	r2, r2, #1
 800a94c:	601a      	str	r2, [r3, #0]
 800a94e:	e009      	b.n	800a964 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a956:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a964:	7dfb      	ldrb	r3, [r7, #23]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3718      	adds	r7, #24
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	40020010 	.word	0x40020010
 800a974:	40020028 	.word	0x40020028
 800a978:	40020040 	.word	0x40020040
 800a97c:	40020058 	.word	0x40020058
 800a980:	40020070 	.word	0x40020070
 800a984:	40020088 	.word	0x40020088
 800a988:	400200a0 	.word	0x400200a0
 800a98c:	400200b8 	.word	0x400200b8
 800a990:	40020410 	.word	0x40020410
 800a994:	40020428 	.word	0x40020428
 800a998:	40020440 	.word	0x40020440
 800a99c:	40020458 	.word	0x40020458
 800a9a0:	40020470 	.word	0x40020470
 800a9a4:	40020488 	.word	0x40020488
 800a9a8:	400204a0 	.word	0x400204a0
 800a9ac:	400204b8 	.word	0x400204b8
 800a9b0:	58025408 	.word	0x58025408
 800a9b4:	5802541c 	.word	0x5802541c
 800a9b8:	58025430 	.word	0x58025430
 800a9bc:	58025444 	.word	0x58025444
 800a9c0:	58025458 	.word	0x58025458
 800a9c4:	5802546c 	.word	0x5802546c
 800a9c8:	58025480 	.word	0x58025480
 800a9cc:	58025494 	.word	0x58025494

0800a9d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b086      	sub	sp, #24
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800a9d8:	f7fc fdaa 	bl	8007530 <HAL_GetTick>
 800a9dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e2dc      	b.n	800afa2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9ee:	b2db      	uxtb	r3, r3
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	d008      	beq.n	800aa06 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2280      	movs	r2, #128	; 0x80
 800a9f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800aa02:	2301      	movs	r3, #1
 800aa04:	e2cd      	b.n	800afa2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a76      	ldr	r2, [pc, #472]	; (800abe4 <HAL_DMA_Abort+0x214>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d04a      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a74      	ldr	r2, [pc, #464]	; (800abe8 <HAL_DMA_Abort+0x218>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d045      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a73      	ldr	r2, [pc, #460]	; (800abec <HAL_DMA_Abort+0x21c>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d040      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a71      	ldr	r2, [pc, #452]	; (800abf0 <HAL_DMA_Abort+0x220>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d03b      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	4a70      	ldr	r2, [pc, #448]	; (800abf4 <HAL_DMA_Abort+0x224>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d036      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a6e      	ldr	r2, [pc, #440]	; (800abf8 <HAL_DMA_Abort+0x228>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d031      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a6d      	ldr	r2, [pc, #436]	; (800abfc <HAL_DMA_Abort+0x22c>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d02c      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a6b      	ldr	r2, [pc, #428]	; (800ac00 <HAL_DMA_Abort+0x230>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d027      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4a6a      	ldr	r2, [pc, #424]	; (800ac04 <HAL_DMA_Abort+0x234>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d022      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	4a68      	ldr	r2, [pc, #416]	; (800ac08 <HAL_DMA_Abort+0x238>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d01d      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a67      	ldr	r2, [pc, #412]	; (800ac0c <HAL_DMA_Abort+0x23c>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d018      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a65      	ldr	r2, [pc, #404]	; (800ac10 <HAL_DMA_Abort+0x240>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d013      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a64      	ldr	r2, [pc, #400]	; (800ac14 <HAL_DMA_Abort+0x244>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d00e      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a62      	ldr	r2, [pc, #392]	; (800ac18 <HAL_DMA_Abort+0x248>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d009      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a61      	ldr	r2, [pc, #388]	; (800ac1c <HAL_DMA_Abort+0x24c>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d004      	beq.n	800aaa6 <HAL_DMA_Abort+0xd6>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a5f      	ldr	r2, [pc, #380]	; (800ac20 <HAL_DMA_Abort+0x250>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d101      	bne.n	800aaaa <HAL_DMA_Abort+0xda>
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e000      	b.n	800aaac <HAL_DMA_Abort+0xdc>
 800aaaa:	2300      	movs	r3, #0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d013      	beq.n	800aad8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f022 021e 	bic.w	r2, r2, #30
 800aabe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	695a      	ldr	r2, [r3, #20]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aace:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	617b      	str	r3, [r7, #20]
 800aad6:	e00a      	b.n	800aaee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f022 020e 	bic.w	r2, r2, #14
 800aae6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a3c      	ldr	r2, [pc, #240]	; (800abe4 <HAL_DMA_Abort+0x214>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d072      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a3a      	ldr	r2, [pc, #232]	; (800abe8 <HAL_DMA_Abort+0x218>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d06d      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a39      	ldr	r2, [pc, #228]	; (800abec <HAL_DMA_Abort+0x21c>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d068      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a37      	ldr	r2, [pc, #220]	; (800abf0 <HAL_DMA_Abort+0x220>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d063      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	4a36      	ldr	r2, [pc, #216]	; (800abf4 <HAL_DMA_Abort+0x224>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d05e      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a34      	ldr	r2, [pc, #208]	; (800abf8 <HAL_DMA_Abort+0x228>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d059      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a33      	ldr	r2, [pc, #204]	; (800abfc <HAL_DMA_Abort+0x22c>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	d054      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	4a31      	ldr	r2, [pc, #196]	; (800ac00 <HAL_DMA_Abort+0x230>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d04f      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a30      	ldr	r2, [pc, #192]	; (800ac04 <HAL_DMA_Abort+0x234>)
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d04a      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a2e      	ldr	r2, [pc, #184]	; (800ac08 <HAL_DMA_Abort+0x238>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d045      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	4a2d      	ldr	r2, [pc, #180]	; (800ac0c <HAL_DMA_Abort+0x23c>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d040      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a2b      	ldr	r2, [pc, #172]	; (800ac10 <HAL_DMA_Abort+0x240>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d03b      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4a2a      	ldr	r2, [pc, #168]	; (800ac14 <HAL_DMA_Abort+0x244>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d036      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4a28      	ldr	r2, [pc, #160]	; (800ac18 <HAL_DMA_Abort+0x248>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d031      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4a27      	ldr	r2, [pc, #156]	; (800ac1c <HAL_DMA_Abort+0x24c>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d02c      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a25      	ldr	r2, [pc, #148]	; (800ac20 <HAL_DMA_Abort+0x250>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d027      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a24      	ldr	r2, [pc, #144]	; (800ac24 <HAL_DMA_Abort+0x254>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d022      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a22      	ldr	r2, [pc, #136]	; (800ac28 <HAL_DMA_Abort+0x258>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d01d      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4a21      	ldr	r2, [pc, #132]	; (800ac2c <HAL_DMA_Abort+0x25c>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d018      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4a1f      	ldr	r2, [pc, #124]	; (800ac30 <HAL_DMA_Abort+0x260>)
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d013      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	4a1e      	ldr	r2, [pc, #120]	; (800ac34 <HAL_DMA_Abort+0x264>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d00e      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a1c      	ldr	r2, [pc, #112]	; (800ac38 <HAL_DMA_Abort+0x268>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d009      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4a1b      	ldr	r2, [pc, #108]	; (800ac3c <HAL_DMA_Abort+0x26c>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d004      	beq.n	800abde <HAL_DMA_Abort+0x20e>
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a19      	ldr	r2, [pc, #100]	; (800ac40 <HAL_DMA_Abort+0x270>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d132      	bne.n	800ac44 <HAL_DMA_Abort+0x274>
 800abde:	2301      	movs	r3, #1
 800abe0:	e031      	b.n	800ac46 <HAL_DMA_Abort+0x276>
 800abe2:	bf00      	nop
 800abe4:	40020010 	.word	0x40020010
 800abe8:	40020028 	.word	0x40020028
 800abec:	40020040 	.word	0x40020040
 800abf0:	40020058 	.word	0x40020058
 800abf4:	40020070 	.word	0x40020070
 800abf8:	40020088 	.word	0x40020088
 800abfc:	400200a0 	.word	0x400200a0
 800ac00:	400200b8 	.word	0x400200b8
 800ac04:	40020410 	.word	0x40020410
 800ac08:	40020428 	.word	0x40020428
 800ac0c:	40020440 	.word	0x40020440
 800ac10:	40020458 	.word	0x40020458
 800ac14:	40020470 	.word	0x40020470
 800ac18:	40020488 	.word	0x40020488
 800ac1c:	400204a0 	.word	0x400204a0
 800ac20:	400204b8 	.word	0x400204b8
 800ac24:	58025408 	.word	0x58025408
 800ac28:	5802541c 	.word	0x5802541c
 800ac2c:	58025430 	.word	0x58025430
 800ac30:	58025444 	.word	0x58025444
 800ac34:	58025458 	.word	0x58025458
 800ac38:	5802546c 	.word	0x5802546c
 800ac3c:	58025480 	.word	0x58025480
 800ac40:	58025494 	.word	0x58025494
 800ac44:	2300      	movs	r3, #0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d007      	beq.n	800ac5a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac58:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4a6d      	ldr	r2, [pc, #436]	; (800ae14 <HAL_DMA_Abort+0x444>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d04a      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a6b      	ldr	r2, [pc, #428]	; (800ae18 <HAL_DMA_Abort+0x448>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d045      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a6a      	ldr	r2, [pc, #424]	; (800ae1c <HAL_DMA_Abort+0x44c>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d040      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a68      	ldr	r2, [pc, #416]	; (800ae20 <HAL_DMA_Abort+0x450>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d03b      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a67      	ldr	r2, [pc, #412]	; (800ae24 <HAL_DMA_Abort+0x454>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d036      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a65      	ldr	r2, [pc, #404]	; (800ae28 <HAL_DMA_Abort+0x458>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d031      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a64      	ldr	r2, [pc, #400]	; (800ae2c <HAL_DMA_Abort+0x45c>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d02c      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a62      	ldr	r2, [pc, #392]	; (800ae30 <HAL_DMA_Abort+0x460>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d027      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a61      	ldr	r2, [pc, #388]	; (800ae34 <HAL_DMA_Abort+0x464>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d022      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	4a5f      	ldr	r2, [pc, #380]	; (800ae38 <HAL_DMA_Abort+0x468>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d01d      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4a5e      	ldr	r2, [pc, #376]	; (800ae3c <HAL_DMA_Abort+0x46c>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d018      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	4a5c      	ldr	r2, [pc, #368]	; (800ae40 <HAL_DMA_Abort+0x470>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d013      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	4a5b      	ldr	r2, [pc, #364]	; (800ae44 <HAL_DMA_Abort+0x474>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d00e      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	4a59      	ldr	r2, [pc, #356]	; (800ae48 <HAL_DMA_Abort+0x478>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d009      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4a58      	ldr	r2, [pc, #352]	; (800ae4c <HAL_DMA_Abort+0x47c>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d004      	beq.n	800acfa <HAL_DMA_Abort+0x32a>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a56      	ldr	r2, [pc, #344]	; (800ae50 <HAL_DMA_Abort+0x480>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d108      	bne.n	800ad0c <HAL_DMA_Abort+0x33c>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f022 0201 	bic.w	r2, r2, #1
 800ad08:	601a      	str	r2, [r3, #0]
 800ad0a:	e007      	b.n	800ad1c <HAL_DMA_Abort+0x34c>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f022 0201 	bic.w	r2, r2, #1
 800ad1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800ad1c:	e013      	b.n	800ad46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ad1e:	f7fc fc07 	bl	8007530 <HAL_GetTick>
 800ad22:	4602      	mov	r2, r0
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	1ad3      	subs	r3, r2, r3
 800ad28:	2b05      	cmp	r3, #5
 800ad2a:	d90c      	bls.n	800ad46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2220      	movs	r2, #32
 800ad30:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2203      	movs	r2, #3
 800ad36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e12d      	b.n	800afa2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e5      	bne.n	800ad1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a2f      	ldr	r2, [pc, #188]	; (800ae14 <HAL_DMA_Abort+0x444>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d04a      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a2d      	ldr	r2, [pc, #180]	; (800ae18 <HAL_DMA_Abort+0x448>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d045      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a2c      	ldr	r2, [pc, #176]	; (800ae1c <HAL_DMA_Abort+0x44c>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d040      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a2a      	ldr	r2, [pc, #168]	; (800ae20 <HAL_DMA_Abort+0x450>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d03b      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a29      	ldr	r2, [pc, #164]	; (800ae24 <HAL_DMA_Abort+0x454>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d036      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a27      	ldr	r2, [pc, #156]	; (800ae28 <HAL_DMA_Abort+0x458>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d031      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a26      	ldr	r2, [pc, #152]	; (800ae2c <HAL_DMA_Abort+0x45c>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d02c      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a24      	ldr	r2, [pc, #144]	; (800ae30 <HAL_DMA_Abort+0x460>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d027      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a23      	ldr	r2, [pc, #140]	; (800ae34 <HAL_DMA_Abort+0x464>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d022      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a21      	ldr	r2, [pc, #132]	; (800ae38 <HAL_DMA_Abort+0x468>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d01d      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a20      	ldr	r2, [pc, #128]	; (800ae3c <HAL_DMA_Abort+0x46c>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d018      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a1e      	ldr	r2, [pc, #120]	; (800ae40 <HAL_DMA_Abort+0x470>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d013      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a1d      	ldr	r2, [pc, #116]	; (800ae44 <HAL_DMA_Abort+0x474>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d00e      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a1b      	ldr	r2, [pc, #108]	; (800ae48 <HAL_DMA_Abort+0x478>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d009      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a1a      	ldr	r2, [pc, #104]	; (800ae4c <HAL_DMA_Abort+0x47c>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d004      	beq.n	800adf2 <HAL_DMA_Abort+0x422>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a18      	ldr	r2, [pc, #96]	; (800ae50 <HAL_DMA_Abort+0x480>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d101      	bne.n	800adf6 <HAL_DMA_Abort+0x426>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e000      	b.n	800adf8 <HAL_DMA_Abort+0x428>
 800adf6:	2300      	movs	r3, #0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d02b      	beq.n	800ae54 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae00:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae06:	f003 031f 	and.w	r3, r3, #31
 800ae0a:	223f      	movs	r2, #63	; 0x3f
 800ae0c:	409a      	lsls	r2, r3
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	609a      	str	r2, [r3, #8]
 800ae12:	e02a      	b.n	800ae6a <HAL_DMA_Abort+0x49a>
 800ae14:	40020010 	.word	0x40020010
 800ae18:	40020028 	.word	0x40020028
 800ae1c:	40020040 	.word	0x40020040
 800ae20:	40020058 	.word	0x40020058
 800ae24:	40020070 	.word	0x40020070
 800ae28:	40020088 	.word	0x40020088
 800ae2c:	400200a0 	.word	0x400200a0
 800ae30:	400200b8 	.word	0x400200b8
 800ae34:	40020410 	.word	0x40020410
 800ae38:	40020428 	.word	0x40020428
 800ae3c:	40020440 	.word	0x40020440
 800ae40:	40020458 	.word	0x40020458
 800ae44:	40020470 	.word	0x40020470
 800ae48:	40020488 	.word	0x40020488
 800ae4c:	400204a0 	.word	0x400204a0
 800ae50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae58:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae5e:	f003 031f 	and.w	r3, r3, #31
 800ae62:	2201      	movs	r2, #1
 800ae64:	409a      	lsls	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	4a4f      	ldr	r2, [pc, #316]	; (800afac <HAL_DMA_Abort+0x5dc>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d072      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	4a4d      	ldr	r2, [pc, #308]	; (800afb0 <HAL_DMA_Abort+0x5e0>)
 800ae7a:	4293      	cmp	r3, r2
 800ae7c:	d06d      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a4c      	ldr	r2, [pc, #304]	; (800afb4 <HAL_DMA_Abort+0x5e4>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d068      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a4a      	ldr	r2, [pc, #296]	; (800afb8 <HAL_DMA_Abort+0x5e8>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d063      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a49      	ldr	r2, [pc, #292]	; (800afbc <HAL_DMA_Abort+0x5ec>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d05e      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a47      	ldr	r2, [pc, #284]	; (800afc0 <HAL_DMA_Abort+0x5f0>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d059      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a46      	ldr	r2, [pc, #280]	; (800afc4 <HAL_DMA_Abort+0x5f4>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d054      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a44      	ldr	r2, [pc, #272]	; (800afc8 <HAL_DMA_Abort+0x5f8>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d04f      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a43      	ldr	r2, [pc, #268]	; (800afcc <HAL_DMA_Abort+0x5fc>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d04a      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a41      	ldr	r2, [pc, #260]	; (800afd0 <HAL_DMA_Abort+0x600>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d045      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a40      	ldr	r2, [pc, #256]	; (800afd4 <HAL_DMA_Abort+0x604>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d040      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a3e      	ldr	r2, [pc, #248]	; (800afd8 <HAL_DMA_Abort+0x608>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d03b      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a3d      	ldr	r2, [pc, #244]	; (800afdc <HAL_DMA_Abort+0x60c>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d036      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a3b      	ldr	r2, [pc, #236]	; (800afe0 <HAL_DMA_Abort+0x610>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d031      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a3a      	ldr	r2, [pc, #232]	; (800afe4 <HAL_DMA_Abort+0x614>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d02c      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a38      	ldr	r2, [pc, #224]	; (800afe8 <HAL_DMA_Abort+0x618>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d027      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a37      	ldr	r2, [pc, #220]	; (800afec <HAL_DMA_Abort+0x61c>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d022      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a35      	ldr	r2, [pc, #212]	; (800aff0 <HAL_DMA_Abort+0x620>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d01d      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a34      	ldr	r2, [pc, #208]	; (800aff4 <HAL_DMA_Abort+0x624>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d018      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a32      	ldr	r2, [pc, #200]	; (800aff8 <HAL_DMA_Abort+0x628>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d013      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a31      	ldr	r2, [pc, #196]	; (800affc <HAL_DMA_Abort+0x62c>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d00e      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a2f      	ldr	r2, [pc, #188]	; (800b000 <HAL_DMA_Abort+0x630>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d009      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a2e      	ldr	r2, [pc, #184]	; (800b004 <HAL_DMA_Abort+0x634>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d004      	beq.n	800af5a <HAL_DMA_Abort+0x58a>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a2c      	ldr	r2, [pc, #176]	; (800b008 <HAL_DMA_Abort+0x638>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d101      	bne.n	800af5e <HAL_DMA_Abort+0x58e>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e000      	b.n	800af60 <HAL_DMA_Abort+0x590>
 800af5e:	2300      	movs	r3, #0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d015      	beq.n	800af90 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af68:	687a      	ldr	r2, [r7, #4]
 800af6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800af6c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00c      	beq.n	800af90 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af84:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800af8e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2201      	movs	r2, #1
 800af94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800afa0:	2300      	movs	r3, #0
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3718      	adds	r7, #24
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	40020010 	.word	0x40020010
 800afb0:	40020028 	.word	0x40020028
 800afb4:	40020040 	.word	0x40020040
 800afb8:	40020058 	.word	0x40020058
 800afbc:	40020070 	.word	0x40020070
 800afc0:	40020088 	.word	0x40020088
 800afc4:	400200a0 	.word	0x400200a0
 800afc8:	400200b8 	.word	0x400200b8
 800afcc:	40020410 	.word	0x40020410
 800afd0:	40020428 	.word	0x40020428
 800afd4:	40020440 	.word	0x40020440
 800afd8:	40020458 	.word	0x40020458
 800afdc:	40020470 	.word	0x40020470
 800afe0:	40020488 	.word	0x40020488
 800afe4:	400204a0 	.word	0x400204a0
 800afe8:	400204b8 	.word	0x400204b8
 800afec:	58025408 	.word	0x58025408
 800aff0:	5802541c 	.word	0x5802541c
 800aff4:	58025430 	.word	0x58025430
 800aff8:	58025444 	.word	0x58025444
 800affc:	58025458 	.word	0x58025458
 800b000:	5802546c 	.word	0x5802546c
 800b004:	58025480 	.word	0x58025480
 800b008:	58025494 	.word	0x58025494

0800b00c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d101      	bne.n	800b01e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e237      	b.n	800b48e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b024:	b2db      	uxtb	r3, r3
 800b026:	2b02      	cmp	r3, #2
 800b028:	d004      	beq.n	800b034 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2280      	movs	r2, #128	; 0x80
 800b02e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b030:	2301      	movs	r3, #1
 800b032:	e22c      	b.n	800b48e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a5c      	ldr	r2, [pc, #368]	; (800b1ac <HAL_DMA_Abort_IT+0x1a0>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d04a      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4a5b      	ldr	r2, [pc, #364]	; (800b1b0 <HAL_DMA_Abort_IT+0x1a4>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d045      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4a59      	ldr	r2, [pc, #356]	; (800b1b4 <HAL_DMA_Abort_IT+0x1a8>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	d040      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a58      	ldr	r2, [pc, #352]	; (800b1b8 <HAL_DMA_Abort_IT+0x1ac>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d03b      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a56      	ldr	r2, [pc, #344]	; (800b1bc <HAL_DMA_Abort_IT+0x1b0>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d036      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a55      	ldr	r2, [pc, #340]	; (800b1c0 <HAL_DMA_Abort_IT+0x1b4>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d031      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a53      	ldr	r2, [pc, #332]	; (800b1c4 <HAL_DMA_Abort_IT+0x1b8>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d02c      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a52      	ldr	r2, [pc, #328]	; (800b1c8 <HAL_DMA_Abort_IT+0x1bc>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d027      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a50      	ldr	r2, [pc, #320]	; (800b1cc <HAL_DMA_Abort_IT+0x1c0>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d022      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4a4f      	ldr	r2, [pc, #316]	; (800b1d0 <HAL_DMA_Abort_IT+0x1c4>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d01d      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a4d      	ldr	r2, [pc, #308]	; (800b1d4 <HAL_DMA_Abort_IT+0x1c8>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d018      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a4c      	ldr	r2, [pc, #304]	; (800b1d8 <HAL_DMA_Abort_IT+0x1cc>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d013      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a4a      	ldr	r2, [pc, #296]	; (800b1dc <HAL_DMA_Abort_IT+0x1d0>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d00e      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a49      	ldr	r2, [pc, #292]	; (800b1e0 <HAL_DMA_Abort_IT+0x1d4>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d009      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a47      	ldr	r2, [pc, #284]	; (800b1e4 <HAL_DMA_Abort_IT+0x1d8>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d004      	beq.n	800b0d4 <HAL_DMA_Abort_IT+0xc8>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	4a46      	ldr	r2, [pc, #280]	; (800b1e8 <HAL_DMA_Abort_IT+0x1dc>)
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	d101      	bne.n	800b0d8 <HAL_DMA_Abort_IT+0xcc>
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	e000      	b.n	800b0da <HAL_DMA_Abort_IT+0xce>
 800b0d8:	2300      	movs	r3, #0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f000 8086 	beq.w	800b1ec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2204      	movs	r2, #4
 800b0e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a2f      	ldr	r2, [pc, #188]	; (800b1ac <HAL_DMA_Abort_IT+0x1a0>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d04a      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	4a2e      	ldr	r2, [pc, #184]	; (800b1b0 <HAL_DMA_Abort_IT+0x1a4>)
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d045      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a2c      	ldr	r2, [pc, #176]	; (800b1b4 <HAL_DMA_Abort_IT+0x1a8>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d040      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a2b      	ldr	r2, [pc, #172]	; (800b1b8 <HAL_DMA_Abort_IT+0x1ac>)
 800b10c:	4293      	cmp	r3, r2
 800b10e:	d03b      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a29      	ldr	r2, [pc, #164]	; (800b1bc <HAL_DMA_Abort_IT+0x1b0>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d036      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a28      	ldr	r2, [pc, #160]	; (800b1c0 <HAL_DMA_Abort_IT+0x1b4>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d031      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a26      	ldr	r2, [pc, #152]	; (800b1c4 <HAL_DMA_Abort_IT+0x1b8>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d02c      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a25      	ldr	r2, [pc, #148]	; (800b1c8 <HAL_DMA_Abort_IT+0x1bc>)
 800b134:	4293      	cmp	r3, r2
 800b136:	d027      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	4a23      	ldr	r2, [pc, #140]	; (800b1cc <HAL_DMA_Abort_IT+0x1c0>)
 800b13e:	4293      	cmp	r3, r2
 800b140:	d022      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a22      	ldr	r2, [pc, #136]	; (800b1d0 <HAL_DMA_Abort_IT+0x1c4>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d01d      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	4a20      	ldr	r2, [pc, #128]	; (800b1d4 <HAL_DMA_Abort_IT+0x1c8>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d018      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	4a1f      	ldr	r2, [pc, #124]	; (800b1d8 <HAL_DMA_Abort_IT+0x1cc>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d013      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4a1d      	ldr	r2, [pc, #116]	; (800b1dc <HAL_DMA_Abort_IT+0x1d0>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d00e      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	4a1c      	ldr	r2, [pc, #112]	; (800b1e0 <HAL_DMA_Abort_IT+0x1d4>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d009      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a1a      	ldr	r2, [pc, #104]	; (800b1e4 <HAL_DMA_Abort_IT+0x1d8>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d004      	beq.n	800b188 <HAL_DMA_Abort_IT+0x17c>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a19      	ldr	r2, [pc, #100]	; (800b1e8 <HAL_DMA_Abort_IT+0x1dc>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d108      	bne.n	800b19a <HAL_DMA_Abort_IT+0x18e>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f022 0201 	bic.w	r2, r2, #1
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	e178      	b.n	800b48c <HAL_DMA_Abort_IT+0x480>
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f022 0201 	bic.w	r2, r2, #1
 800b1a8:	601a      	str	r2, [r3, #0]
 800b1aa:	e16f      	b.n	800b48c <HAL_DMA_Abort_IT+0x480>
 800b1ac:	40020010 	.word	0x40020010
 800b1b0:	40020028 	.word	0x40020028
 800b1b4:	40020040 	.word	0x40020040
 800b1b8:	40020058 	.word	0x40020058
 800b1bc:	40020070 	.word	0x40020070
 800b1c0:	40020088 	.word	0x40020088
 800b1c4:	400200a0 	.word	0x400200a0
 800b1c8:	400200b8 	.word	0x400200b8
 800b1cc:	40020410 	.word	0x40020410
 800b1d0:	40020428 	.word	0x40020428
 800b1d4:	40020440 	.word	0x40020440
 800b1d8:	40020458 	.word	0x40020458
 800b1dc:	40020470 	.word	0x40020470
 800b1e0:	40020488 	.word	0x40020488
 800b1e4:	400204a0 	.word	0x400204a0
 800b1e8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681a      	ldr	r2, [r3, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f022 020e 	bic.w	r2, r2, #14
 800b1fa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a6c      	ldr	r2, [pc, #432]	; (800b3b4 <HAL_DMA_Abort_IT+0x3a8>)
 800b202:	4293      	cmp	r3, r2
 800b204:	d04a      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a6b      	ldr	r2, [pc, #428]	; (800b3b8 <HAL_DMA_Abort_IT+0x3ac>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d045      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	4a69      	ldr	r2, [pc, #420]	; (800b3bc <HAL_DMA_Abort_IT+0x3b0>)
 800b216:	4293      	cmp	r3, r2
 800b218:	d040      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a68      	ldr	r2, [pc, #416]	; (800b3c0 <HAL_DMA_Abort_IT+0x3b4>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d03b      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a66      	ldr	r2, [pc, #408]	; (800b3c4 <HAL_DMA_Abort_IT+0x3b8>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d036      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	4a65      	ldr	r2, [pc, #404]	; (800b3c8 <HAL_DMA_Abort_IT+0x3bc>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d031      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a63      	ldr	r2, [pc, #396]	; (800b3cc <HAL_DMA_Abort_IT+0x3c0>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d02c      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a62      	ldr	r2, [pc, #392]	; (800b3d0 <HAL_DMA_Abort_IT+0x3c4>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d027      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a60      	ldr	r2, [pc, #384]	; (800b3d4 <HAL_DMA_Abort_IT+0x3c8>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d022      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a5f      	ldr	r2, [pc, #380]	; (800b3d8 <HAL_DMA_Abort_IT+0x3cc>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d01d      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a5d      	ldr	r2, [pc, #372]	; (800b3dc <HAL_DMA_Abort_IT+0x3d0>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d018      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a5c      	ldr	r2, [pc, #368]	; (800b3e0 <HAL_DMA_Abort_IT+0x3d4>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d013      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a5a      	ldr	r2, [pc, #360]	; (800b3e4 <HAL_DMA_Abort_IT+0x3d8>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d00e      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a59      	ldr	r2, [pc, #356]	; (800b3e8 <HAL_DMA_Abort_IT+0x3dc>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d009      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	4a57      	ldr	r2, [pc, #348]	; (800b3ec <HAL_DMA_Abort_IT+0x3e0>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d004      	beq.n	800b29c <HAL_DMA_Abort_IT+0x290>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a56      	ldr	r2, [pc, #344]	; (800b3f0 <HAL_DMA_Abort_IT+0x3e4>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d108      	bne.n	800b2ae <HAL_DMA_Abort_IT+0x2a2>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f022 0201 	bic.w	r2, r2, #1
 800b2aa:	601a      	str	r2, [r3, #0]
 800b2ac:	e007      	b.n	800b2be <HAL_DMA_Abort_IT+0x2b2>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f022 0201 	bic.w	r2, r2, #1
 800b2bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a3c      	ldr	r2, [pc, #240]	; (800b3b4 <HAL_DMA_Abort_IT+0x3a8>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d072      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a3a      	ldr	r2, [pc, #232]	; (800b3b8 <HAL_DMA_Abort_IT+0x3ac>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d06d      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a39      	ldr	r2, [pc, #228]	; (800b3bc <HAL_DMA_Abort_IT+0x3b0>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d068      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a37      	ldr	r2, [pc, #220]	; (800b3c0 <HAL_DMA_Abort_IT+0x3b4>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d063      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a36      	ldr	r2, [pc, #216]	; (800b3c4 <HAL_DMA_Abort_IT+0x3b8>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d05e      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a34      	ldr	r2, [pc, #208]	; (800b3c8 <HAL_DMA_Abort_IT+0x3bc>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d059      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a33      	ldr	r2, [pc, #204]	; (800b3cc <HAL_DMA_Abort_IT+0x3c0>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d054      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4a31      	ldr	r2, [pc, #196]	; (800b3d0 <HAL_DMA_Abort_IT+0x3c4>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d04f      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	4a30      	ldr	r2, [pc, #192]	; (800b3d4 <HAL_DMA_Abort_IT+0x3c8>)
 800b314:	4293      	cmp	r3, r2
 800b316:	d04a      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a2e      	ldr	r2, [pc, #184]	; (800b3d8 <HAL_DMA_Abort_IT+0x3cc>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d045      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a2d      	ldr	r2, [pc, #180]	; (800b3dc <HAL_DMA_Abort_IT+0x3d0>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d040      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a2b      	ldr	r2, [pc, #172]	; (800b3e0 <HAL_DMA_Abort_IT+0x3d4>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d03b      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4a2a      	ldr	r2, [pc, #168]	; (800b3e4 <HAL_DMA_Abort_IT+0x3d8>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d036      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a28      	ldr	r2, [pc, #160]	; (800b3e8 <HAL_DMA_Abort_IT+0x3dc>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d031      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a27      	ldr	r2, [pc, #156]	; (800b3ec <HAL_DMA_Abort_IT+0x3e0>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d02c      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a25      	ldr	r2, [pc, #148]	; (800b3f0 <HAL_DMA_Abort_IT+0x3e4>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d027      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a24      	ldr	r2, [pc, #144]	; (800b3f4 <HAL_DMA_Abort_IT+0x3e8>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d022      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a22      	ldr	r2, [pc, #136]	; (800b3f8 <HAL_DMA_Abort_IT+0x3ec>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d01d      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a21      	ldr	r2, [pc, #132]	; (800b3fc <HAL_DMA_Abort_IT+0x3f0>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d018      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a1f      	ldr	r2, [pc, #124]	; (800b400 <HAL_DMA_Abort_IT+0x3f4>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d013      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a1e      	ldr	r2, [pc, #120]	; (800b404 <HAL_DMA_Abort_IT+0x3f8>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d00e      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4a1c      	ldr	r2, [pc, #112]	; (800b408 <HAL_DMA_Abort_IT+0x3fc>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d009      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	4a1b      	ldr	r2, [pc, #108]	; (800b40c <HAL_DMA_Abort_IT+0x400>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d004      	beq.n	800b3ae <HAL_DMA_Abort_IT+0x3a2>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a19      	ldr	r2, [pc, #100]	; (800b410 <HAL_DMA_Abort_IT+0x404>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d132      	bne.n	800b414 <HAL_DMA_Abort_IT+0x408>
 800b3ae:	2301      	movs	r3, #1
 800b3b0:	e031      	b.n	800b416 <HAL_DMA_Abort_IT+0x40a>
 800b3b2:	bf00      	nop
 800b3b4:	40020010 	.word	0x40020010
 800b3b8:	40020028 	.word	0x40020028
 800b3bc:	40020040 	.word	0x40020040
 800b3c0:	40020058 	.word	0x40020058
 800b3c4:	40020070 	.word	0x40020070
 800b3c8:	40020088 	.word	0x40020088
 800b3cc:	400200a0 	.word	0x400200a0
 800b3d0:	400200b8 	.word	0x400200b8
 800b3d4:	40020410 	.word	0x40020410
 800b3d8:	40020428 	.word	0x40020428
 800b3dc:	40020440 	.word	0x40020440
 800b3e0:	40020458 	.word	0x40020458
 800b3e4:	40020470 	.word	0x40020470
 800b3e8:	40020488 	.word	0x40020488
 800b3ec:	400204a0 	.word	0x400204a0
 800b3f0:	400204b8 	.word	0x400204b8
 800b3f4:	58025408 	.word	0x58025408
 800b3f8:	5802541c 	.word	0x5802541c
 800b3fc:	58025430 	.word	0x58025430
 800b400:	58025444 	.word	0x58025444
 800b404:	58025458 	.word	0x58025458
 800b408:	5802546c 	.word	0x5802546c
 800b40c:	58025480 	.word	0x58025480
 800b410:	58025494 	.word	0x58025494
 800b414:	2300      	movs	r3, #0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d028      	beq.n	800b46c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b424:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b428:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b42e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b434:	f003 031f 	and.w	r3, r3, #31
 800b438:	2201      	movs	r2, #1
 800b43a:	409a      	lsls	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b448:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00c      	beq.n	800b46c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b45c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b460:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b46a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b480:	2b00      	cmp	r3, #0
 800b482:	d003      	beq.n	800b48c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b488:	6878      	ldr	r0, [r7, #4]
 800b48a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop

0800b498 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b08a      	sub	sp, #40	; 0x28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b4a4:	4b67      	ldr	r3, [pc, #412]	; (800b644 <HAL_DMA_IRQHandler+0x1ac>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	4a67      	ldr	r2, [pc, #412]	; (800b648 <HAL_DMA_IRQHandler+0x1b0>)
 800b4aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ae:	0a9b      	lsrs	r3, r3, #10
 800b4b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a5f      	ldr	r2, [pc, #380]	; (800b64c <HAL_DMA_IRQHandler+0x1b4>)
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d04a      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	4a5d      	ldr	r2, [pc, #372]	; (800b650 <HAL_DMA_IRQHandler+0x1b8>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d045      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	4a5c      	ldr	r2, [pc, #368]	; (800b654 <HAL_DMA_IRQHandler+0x1bc>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d040      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a5a      	ldr	r2, [pc, #360]	; (800b658 <HAL_DMA_IRQHandler+0x1c0>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d03b      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	4a59      	ldr	r2, [pc, #356]	; (800b65c <HAL_DMA_IRQHandler+0x1c4>)
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	d036      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a57      	ldr	r2, [pc, #348]	; (800b660 <HAL_DMA_IRQHandler+0x1c8>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d031      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a56      	ldr	r2, [pc, #344]	; (800b664 <HAL_DMA_IRQHandler+0x1cc>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d02c      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4a54      	ldr	r2, [pc, #336]	; (800b668 <HAL_DMA_IRQHandler+0x1d0>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d027      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a53      	ldr	r2, [pc, #332]	; (800b66c <HAL_DMA_IRQHandler+0x1d4>)
 800b520:	4293      	cmp	r3, r2
 800b522:	d022      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a51      	ldr	r2, [pc, #324]	; (800b670 <HAL_DMA_IRQHandler+0x1d8>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d01d      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a50      	ldr	r2, [pc, #320]	; (800b674 <HAL_DMA_IRQHandler+0x1dc>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d018      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a4e      	ldr	r2, [pc, #312]	; (800b678 <HAL_DMA_IRQHandler+0x1e0>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d013      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a4d      	ldr	r2, [pc, #308]	; (800b67c <HAL_DMA_IRQHandler+0x1e4>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d00e      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a4b      	ldr	r2, [pc, #300]	; (800b680 <HAL_DMA_IRQHandler+0x1e8>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d009      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a4a      	ldr	r2, [pc, #296]	; (800b684 <HAL_DMA_IRQHandler+0x1ec>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d004      	beq.n	800b56a <HAL_DMA_IRQHandler+0xd2>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a48      	ldr	r2, [pc, #288]	; (800b688 <HAL_DMA_IRQHandler+0x1f0>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d101      	bne.n	800b56e <HAL_DMA_IRQHandler+0xd6>
 800b56a:	2301      	movs	r3, #1
 800b56c:	e000      	b.n	800b570 <HAL_DMA_IRQHandler+0xd8>
 800b56e:	2300      	movs	r3, #0
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 842b 	beq.w	800bdcc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b57a:	f003 031f 	and.w	r3, r3, #31
 800b57e:	2208      	movs	r2, #8
 800b580:	409a      	lsls	r2, r3
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	4013      	ands	r3, r2
 800b586:	2b00      	cmp	r3, #0
 800b588:	f000 80a2 	beq.w	800b6d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a2e      	ldr	r2, [pc, #184]	; (800b64c <HAL_DMA_IRQHandler+0x1b4>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d04a      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a2d      	ldr	r2, [pc, #180]	; (800b650 <HAL_DMA_IRQHandler+0x1b8>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d045      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a2b      	ldr	r2, [pc, #172]	; (800b654 <HAL_DMA_IRQHandler+0x1bc>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d040      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a2a      	ldr	r2, [pc, #168]	; (800b658 <HAL_DMA_IRQHandler+0x1c0>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d03b      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a28      	ldr	r2, [pc, #160]	; (800b65c <HAL_DMA_IRQHandler+0x1c4>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d036      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a27      	ldr	r2, [pc, #156]	; (800b660 <HAL_DMA_IRQHandler+0x1c8>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d031      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4a25      	ldr	r2, [pc, #148]	; (800b664 <HAL_DMA_IRQHandler+0x1cc>)
 800b5ce:	4293      	cmp	r3, r2
 800b5d0:	d02c      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	4a24      	ldr	r2, [pc, #144]	; (800b668 <HAL_DMA_IRQHandler+0x1d0>)
 800b5d8:	4293      	cmp	r3, r2
 800b5da:	d027      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	4a22      	ldr	r2, [pc, #136]	; (800b66c <HAL_DMA_IRQHandler+0x1d4>)
 800b5e2:	4293      	cmp	r3, r2
 800b5e4:	d022      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	4a21      	ldr	r2, [pc, #132]	; (800b670 <HAL_DMA_IRQHandler+0x1d8>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d01d      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	4a1f      	ldr	r2, [pc, #124]	; (800b674 <HAL_DMA_IRQHandler+0x1dc>)
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d018      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	4a1e      	ldr	r2, [pc, #120]	; (800b678 <HAL_DMA_IRQHandler+0x1e0>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d013      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a1c      	ldr	r2, [pc, #112]	; (800b67c <HAL_DMA_IRQHandler+0x1e4>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d00e      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a1b      	ldr	r2, [pc, #108]	; (800b680 <HAL_DMA_IRQHandler+0x1e8>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d009      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a19      	ldr	r2, [pc, #100]	; (800b684 <HAL_DMA_IRQHandler+0x1ec>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d004      	beq.n	800b62c <HAL_DMA_IRQHandler+0x194>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a18      	ldr	r2, [pc, #96]	; (800b688 <HAL_DMA_IRQHandler+0x1f0>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d12f      	bne.n	800b68c <HAL_DMA_IRQHandler+0x1f4>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0304 	and.w	r3, r3, #4
 800b636:	2b00      	cmp	r3, #0
 800b638:	bf14      	ite	ne
 800b63a:	2301      	movne	r3, #1
 800b63c:	2300      	moveq	r3, #0
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	e02e      	b.n	800b6a0 <HAL_DMA_IRQHandler+0x208>
 800b642:	bf00      	nop
 800b644:	20000020 	.word	0x20000020
 800b648:	1b4e81b5 	.word	0x1b4e81b5
 800b64c:	40020010 	.word	0x40020010
 800b650:	40020028 	.word	0x40020028
 800b654:	40020040 	.word	0x40020040
 800b658:	40020058 	.word	0x40020058
 800b65c:	40020070 	.word	0x40020070
 800b660:	40020088 	.word	0x40020088
 800b664:	400200a0 	.word	0x400200a0
 800b668:	400200b8 	.word	0x400200b8
 800b66c:	40020410 	.word	0x40020410
 800b670:	40020428 	.word	0x40020428
 800b674:	40020440 	.word	0x40020440
 800b678:	40020458 	.word	0x40020458
 800b67c:	40020470 	.word	0x40020470
 800b680:	40020488 	.word	0x40020488
 800b684:	400204a0 	.word	0x400204a0
 800b688:	400204b8 	.word	0x400204b8
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f003 0308 	and.w	r3, r3, #8
 800b696:	2b00      	cmp	r3, #0
 800b698:	bf14      	ite	ne
 800b69a:	2301      	movne	r3, #1
 800b69c:	2300      	moveq	r3, #0
 800b69e:	b2db      	uxtb	r3, r3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d015      	beq.n	800b6d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f022 0204 	bic.w	r2, r2, #4
 800b6b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6b8:	f003 031f 	and.w	r3, r3, #31
 800b6bc:	2208      	movs	r2, #8
 800b6be:	409a      	lsls	r2, r3
 800b6c0:	6a3b      	ldr	r3, [r7, #32]
 800b6c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6c8:	f043 0201 	orr.w	r2, r3, #1
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6d4:	f003 031f 	and.w	r3, r3, #31
 800b6d8:	69ba      	ldr	r2, [r7, #24]
 800b6da:	fa22 f303 	lsr.w	r3, r2, r3
 800b6de:	f003 0301 	and.w	r3, r3, #1
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d06e      	beq.n	800b7c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a69      	ldr	r2, [pc, #420]	; (800b890 <HAL_DMA_IRQHandler+0x3f8>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d04a      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a67      	ldr	r2, [pc, #412]	; (800b894 <HAL_DMA_IRQHandler+0x3fc>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d045      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a66      	ldr	r2, [pc, #408]	; (800b898 <HAL_DMA_IRQHandler+0x400>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d040      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a64      	ldr	r2, [pc, #400]	; (800b89c <HAL_DMA_IRQHandler+0x404>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d03b      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a63      	ldr	r2, [pc, #396]	; (800b8a0 <HAL_DMA_IRQHandler+0x408>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d036      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4a61      	ldr	r2, [pc, #388]	; (800b8a4 <HAL_DMA_IRQHandler+0x40c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d031      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	4a60      	ldr	r2, [pc, #384]	; (800b8a8 <HAL_DMA_IRQHandler+0x410>)
 800b728:	4293      	cmp	r3, r2
 800b72a:	d02c      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a5e      	ldr	r2, [pc, #376]	; (800b8ac <HAL_DMA_IRQHandler+0x414>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d027      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a5d      	ldr	r2, [pc, #372]	; (800b8b0 <HAL_DMA_IRQHandler+0x418>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d022      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	4a5b      	ldr	r2, [pc, #364]	; (800b8b4 <HAL_DMA_IRQHandler+0x41c>)
 800b746:	4293      	cmp	r3, r2
 800b748:	d01d      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	4a5a      	ldr	r2, [pc, #360]	; (800b8b8 <HAL_DMA_IRQHandler+0x420>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d018      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4a58      	ldr	r2, [pc, #352]	; (800b8bc <HAL_DMA_IRQHandler+0x424>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d013      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4a57      	ldr	r2, [pc, #348]	; (800b8c0 <HAL_DMA_IRQHandler+0x428>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d00e      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	4a55      	ldr	r2, [pc, #340]	; (800b8c4 <HAL_DMA_IRQHandler+0x42c>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d009      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4a54      	ldr	r2, [pc, #336]	; (800b8c8 <HAL_DMA_IRQHandler+0x430>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d004      	beq.n	800b786 <HAL_DMA_IRQHandler+0x2ee>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a52      	ldr	r2, [pc, #328]	; (800b8cc <HAL_DMA_IRQHandler+0x434>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d10a      	bne.n	800b79c <HAL_DMA_IRQHandler+0x304>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	695b      	ldr	r3, [r3, #20]
 800b78c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b790:	2b00      	cmp	r3, #0
 800b792:	bf14      	ite	ne
 800b794:	2301      	movne	r3, #1
 800b796:	2300      	moveq	r3, #0
 800b798:	b2db      	uxtb	r3, r3
 800b79a:	e003      	b.n	800b7a4 <HAL_DMA_IRQHandler+0x30c>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d00d      	beq.n	800b7c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7ac:	f003 031f 	and.w	r3, r3, #31
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	409a      	lsls	r2, r3
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7bc:	f043 0202 	orr.w	r2, r3, #2
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7c8:	f003 031f 	and.w	r3, r3, #31
 800b7cc:	2204      	movs	r2, #4
 800b7ce:	409a      	lsls	r2, r3
 800b7d0:	69bb      	ldr	r3, [r7, #24]
 800b7d2:	4013      	ands	r3, r2
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	f000 808f 	beq.w	800b8f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4a2c      	ldr	r2, [pc, #176]	; (800b890 <HAL_DMA_IRQHandler+0x3f8>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d04a      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	4a2a      	ldr	r2, [pc, #168]	; (800b894 <HAL_DMA_IRQHandler+0x3fc>)
 800b7ea:	4293      	cmp	r3, r2
 800b7ec:	d045      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a29      	ldr	r2, [pc, #164]	; (800b898 <HAL_DMA_IRQHandler+0x400>)
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d040      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	4a27      	ldr	r2, [pc, #156]	; (800b89c <HAL_DMA_IRQHandler+0x404>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d03b      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	4a26      	ldr	r2, [pc, #152]	; (800b8a0 <HAL_DMA_IRQHandler+0x408>)
 800b808:	4293      	cmp	r3, r2
 800b80a:	d036      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a24      	ldr	r2, [pc, #144]	; (800b8a4 <HAL_DMA_IRQHandler+0x40c>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d031      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a23      	ldr	r2, [pc, #140]	; (800b8a8 <HAL_DMA_IRQHandler+0x410>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d02c      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a21      	ldr	r2, [pc, #132]	; (800b8ac <HAL_DMA_IRQHandler+0x414>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d027      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a20      	ldr	r2, [pc, #128]	; (800b8b0 <HAL_DMA_IRQHandler+0x418>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d022      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a1e      	ldr	r2, [pc, #120]	; (800b8b4 <HAL_DMA_IRQHandler+0x41c>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d01d      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a1d      	ldr	r2, [pc, #116]	; (800b8b8 <HAL_DMA_IRQHandler+0x420>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d018      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a1b      	ldr	r2, [pc, #108]	; (800b8bc <HAL_DMA_IRQHandler+0x424>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d013      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a1a      	ldr	r2, [pc, #104]	; (800b8c0 <HAL_DMA_IRQHandler+0x428>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d00e      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a18      	ldr	r2, [pc, #96]	; (800b8c4 <HAL_DMA_IRQHandler+0x42c>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d009      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a17      	ldr	r2, [pc, #92]	; (800b8c8 <HAL_DMA_IRQHandler+0x430>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d004      	beq.n	800b87a <HAL_DMA_IRQHandler+0x3e2>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a15      	ldr	r2, [pc, #84]	; (800b8cc <HAL_DMA_IRQHandler+0x434>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d12a      	bne.n	800b8d0 <HAL_DMA_IRQHandler+0x438>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0302 	and.w	r3, r3, #2
 800b884:	2b00      	cmp	r3, #0
 800b886:	bf14      	ite	ne
 800b888:	2301      	movne	r3, #1
 800b88a:	2300      	moveq	r3, #0
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	e023      	b.n	800b8d8 <HAL_DMA_IRQHandler+0x440>
 800b890:	40020010 	.word	0x40020010
 800b894:	40020028 	.word	0x40020028
 800b898:	40020040 	.word	0x40020040
 800b89c:	40020058 	.word	0x40020058
 800b8a0:	40020070 	.word	0x40020070
 800b8a4:	40020088 	.word	0x40020088
 800b8a8:	400200a0 	.word	0x400200a0
 800b8ac:	400200b8 	.word	0x400200b8
 800b8b0:	40020410 	.word	0x40020410
 800b8b4:	40020428 	.word	0x40020428
 800b8b8:	40020440 	.word	0x40020440
 800b8bc:	40020458 	.word	0x40020458
 800b8c0:	40020470 	.word	0x40020470
 800b8c4:	40020488 	.word	0x40020488
 800b8c8:	400204a0 	.word	0x400204a0
 800b8cc:	400204b8 	.word	0x400204b8
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d00d      	beq.n	800b8f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8e0:	f003 031f 	and.w	r3, r3, #31
 800b8e4:	2204      	movs	r2, #4
 800b8e6:	409a      	lsls	r2, r3
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f0:	f043 0204 	orr.w	r2, r3, #4
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8fc:	f003 031f 	and.w	r3, r3, #31
 800b900:	2210      	movs	r2, #16
 800b902:	409a      	lsls	r2, r3
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	4013      	ands	r3, r2
 800b908:	2b00      	cmp	r3, #0
 800b90a:	f000 80a6 	beq.w	800ba5a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a85      	ldr	r2, [pc, #532]	; (800bb28 <HAL_DMA_IRQHandler+0x690>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d04a      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	4a83      	ldr	r2, [pc, #524]	; (800bb2c <HAL_DMA_IRQHandler+0x694>)
 800b91e:	4293      	cmp	r3, r2
 800b920:	d045      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a82      	ldr	r2, [pc, #520]	; (800bb30 <HAL_DMA_IRQHandler+0x698>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d040      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a80      	ldr	r2, [pc, #512]	; (800bb34 <HAL_DMA_IRQHandler+0x69c>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d03b      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a7f      	ldr	r2, [pc, #508]	; (800bb38 <HAL_DMA_IRQHandler+0x6a0>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d036      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	4a7d      	ldr	r2, [pc, #500]	; (800bb3c <HAL_DMA_IRQHandler+0x6a4>)
 800b946:	4293      	cmp	r3, r2
 800b948:	d031      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	4a7c      	ldr	r2, [pc, #496]	; (800bb40 <HAL_DMA_IRQHandler+0x6a8>)
 800b950:	4293      	cmp	r3, r2
 800b952:	d02c      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	4a7a      	ldr	r2, [pc, #488]	; (800bb44 <HAL_DMA_IRQHandler+0x6ac>)
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d027      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a79      	ldr	r2, [pc, #484]	; (800bb48 <HAL_DMA_IRQHandler+0x6b0>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d022      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	4a77      	ldr	r2, [pc, #476]	; (800bb4c <HAL_DMA_IRQHandler+0x6b4>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d01d      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	4a76      	ldr	r2, [pc, #472]	; (800bb50 <HAL_DMA_IRQHandler+0x6b8>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d018      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a74      	ldr	r2, [pc, #464]	; (800bb54 <HAL_DMA_IRQHandler+0x6bc>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d013      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	4a73      	ldr	r2, [pc, #460]	; (800bb58 <HAL_DMA_IRQHandler+0x6c0>)
 800b98c:	4293      	cmp	r3, r2
 800b98e:	d00e      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a71      	ldr	r2, [pc, #452]	; (800bb5c <HAL_DMA_IRQHandler+0x6c4>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d009      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a70      	ldr	r2, [pc, #448]	; (800bb60 <HAL_DMA_IRQHandler+0x6c8>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d004      	beq.n	800b9ae <HAL_DMA_IRQHandler+0x516>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	4a6e      	ldr	r2, [pc, #440]	; (800bb64 <HAL_DMA_IRQHandler+0x6cc>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d10a      	bne.n	800b9c4 <HAL_DMA_IRQHandler+0x52c>
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f003 0308 	and.w	r3, r3, #8
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	bf14      	ite	ne
 800b9bc:	2301      	movne	r3, #1
 800b9be:	2300      	moveq	r3, #0
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	e009      	b.n	800b9d8 <HAL_DMA_IRQHandler+0x540>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f003 0304 	and.w	r3, r3, #4
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	bf14      	ite	ne
 800b9d2:	2301      	movne	r3, #1
 800b9d4:	2300      	moveq	r3, #0
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d03e      	beq.n	800ba5a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9e0:	f003 031f 	and.w	r3, r3, #31
 800b9e4:	2210      	movs	r2, #16
 800b9e6:	409a      	lsls	r2, r3
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
 800b9ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d018      	beq.n	800ba2c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d108      	bne.n	800ba1a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d024      	beq.n	800ba5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	4798      	blx	r3
 800ba18:	e01f      	b.n	800ba5a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d01b      	beq.n	800ba5a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	4798      	blx	r3
 800ba2a:	e016      	b.n	800ba5a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d107      	bne.n	800ba4a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f022 0208 	bic.w	r2, r2, #8
 800ba48:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d003      	beq.n	800ba5a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba5e:	f003 031f 	and.w	r3, r3, #31
 800ba62:	2220      	movs	r2, #32
 800ba64:	409a      	lsls	r2, r3
 800ba66:	69bb      	ldr	r3, [r7, #24]
 800ba68:	4013      	ands	r3, r2
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f000 8110 	beq.w	800bc90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	4a2c      	ldr	r2, [pc, #176]	; (800bb28 <HAL_DMA_IRQHandler+0x690>)
 800ba76:	4293      	cmp	r3, r2
 800ba78:	d04a      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a2b      	ldr	r2, [pc, #172]	; (800bb2c <HAL_DMA_IRQHandler+0x694>)
 800ba80:	4293      	cmp	r3, r2
 800ba82:	d045      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a29      	ldr	r2, [pc, #164]	; (800bb30 <HAL_DMA_IRQHandler+0x698>)
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d040      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4a28      	ldr	r2, [pc, #160]	; (800bb34 <HAL_DMA_IRQHandler+0x69c>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d03b      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a26      	ldr	r2, [pc, #152]	; (800bb38 <HAL_DMA_IRQHandler+0x6a0>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d036      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	4a25      	ldr	r2, [pc, #148]	; (800bb3c <HAL_DMA_IRQHandler+0x6a4>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d031      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a23      	ldr	r2, [pc, #140]	; (800bb40 <HAL_DMA_IRQHandler+0x6a8>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d02c      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a22      	ldr	r2, [pc, #136]	; (800bb44 <HAL_DMA_IRQHandler+0x6ac>)
 800babc:	4293      	cmp	r3, r2
 800babe:	d027      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a20      	ldr	r2, [pc, #128]	; (800bb48 <HAL_DMA_IRQHandler+0x6b0>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d022      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	4a1f      	ldr	r2, [pc, #124]	; (800bb4c <HAL_DMA_IRQHandler+0x6b4>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d01d      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	4a1d      	ldr	r2, [pc, #116]	; (800bb50 <HAL_DMA_IRQHandler+0x6b8>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d018      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	4a1c      	ldr	r2, [pc, #112]	; (800bb54 <HAL_DMA_IRQHandler+0x6bc>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d013      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4a1a      	ldr	r2, [pc, #104]	; (800bb58 <HAL_DMA_IRQHandler+0x6c0>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d00e      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a19      	ldr	r2, [pc, #100]	; (800bb5c <HAL_DMA_IRQHandler+0x6c4>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d009      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a17      	ldr	r2, [pc, #92]	; (800bb60 <HAL_DMA_IRQHandler+0x6c8>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d004      	beq.n	800bb10 <HAL_DMA_IRQHandler+0x678>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a16      	ldr	r2, [pc, #88]	; (800bb64 <HAL_DMA_IRQHandler+0x6cc>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d12b      	bne.n	800bb68 <HAL_DMA_IRQHandler+0x6d0>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f003 0310 	and.w	r3, r3, #16
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	bf14      	ite	ne
 800bb1e:	2301      	movne	r3, #1
 800bb20:	2300      	moveq	r3, #0
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	e02a      	b.n	800bb7c <HAL_DMA_IRQHandler+0x6e4>
 800bb26:	bf00      	nop
 800bb28:	40020010 	.word	0x40020010
 800bb2c:	40020028 	.word	0x40020028
 800bb30:	40020040 	.word	0x40020040
 800bb34:	40020058 	.word	0x40020058
 800bb38:	40020070 	.word	0x40020070
 800bb3c:	40020088 	.word	0x40020088
 800bb40:	400200a0 	.word	0x400200a0
 800bb44:	400200b8 	.word	0x400200b8
 800bb48:	40020410 	.word	0x40020410
 800bb4c:	40020428 	.word	0x40020428
 800bb50:	40020440 	.word	0x40020440
 800bb54:	40020458 	.word	0x40020458
 800bb58:	40020470 	.word	0x40020470
 800bb5c:	40020488 	.word	0x40020488
 800bb60:	400204a0 	.word	0x400204a0
 800bb64:	400204b8 	.word	0x400204b8
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0302 	and.w	r3, r3, #2
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	bf14      	ite	ne
 800bb76:	2301      	movne	r3, #1
 800bb78:	2300      	moveq	r3, #0
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 8087 	beq.w	800bc90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb86:	f003 031f 	and.w	r3, r3, #31
 800bb8a:	2220      	movs	r2, #32
 800bb8c:	409a      	lsls	r2, r3
 800bb8e:	6a3b      	ldr	r3, [r7, #32]
 800bb90:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bb98:	b2db      	uxtb	r3, r3
 800bb9a:	2b04      	cmp	r3, #4
 800bb9c:	d139      	bne.n	800bc12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 0216 	bic.w	r2, r2, #22
 800bbac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	695a      	ldr	r2, [r3, #20]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbbc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d103      	bne.n	800bbce <HAL_DMA_IRQHandler+0x736>
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d007      	beq.n	800bbde <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f022 0208 	bic.w	r2, r2, #8
 800bbdc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbe2:	f003 031f 	and.w	r3, r3, #31
 800bbe6:	223f      	movs	r2, #63	; 0x3f
 800bbe8:	409a      	lsls	r2, r3
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	f000 834a 	beq.w	800c29c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	4798      	blx	r3
          }
          return;
 800bc10:	e344      	b.n	800c29c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d018      	beq.n	800bc52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d108      	bne.n	800bc40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d02c      	beq.n	800bc90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	4798      	blx	r3
 800bc3e:	e027      	b.n	800bc90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d023      	beq.n	800bc90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	4798      	blx	r3
 800bc50:	e01e      	b.n	800bc90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d10f      	bne.n	800bc80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681a      	ldr	r2, [r3, #0]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f022 0210 	bic.w	r2, r2, #16
 800bc6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d003      	beq.n	800bc90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 8306 	beq.w	800c2a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	f000 8088 	beq.w	800bdb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2204      	movs	r2, #4
 800bcac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a7a      	ldr	r2, [pc, #488]	; (800bea0 <HAL_DMA_IRQHandler+0xa08>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d04a      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a79      	ldr	r2, [pc, #484]	; (800bea4 <HAL_DMA_IRQHandler+0xa0c>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d045      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a77      	ldr	r2, [pc, #476]	; (800bea8 <HAL_DMA_IRQHandler+0xa10>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d040      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a76      	ldr	r2, [pc, #472]	; (800beac <HAL_DMA_IRQHandler+0xa14>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d03b      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a74      	ldr	r2, [pc, #464]	; (800beb0 <HAL_DMA_IRQHandler+0xa18>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d036      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a73      	ldr	r2, [pc, #460]	; (800beb4 <HAL_DMA_IRQHandler+0xa1c>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d031      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a71      	ldr	r2, [pc, #452]	; (800beb8 <HAL_DMA_IRQHandler+0xa20>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d02c      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a70      	ldr	r2, [pc, #448]	; (800bebc <HAL_DMA_IRQHandler+0xa24>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d027      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	4a6e      	ldr	r2, [pc, #440]	; (800bec0 <HAL_DMA_IRQHandler+0xa28>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d022      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	4a6d      	ldr	r2, [pc, #436]	; (800bec4 <HAL_DMA_IRQHandler+0xa2c>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d01d      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a6b      	ldr	r2, [pc, #428]	; (800bec8 <HAL_DMA_IRQHandler+0xa30>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d018      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4a6a      	ldr	r2, [pc, #424]	; (800becc <HAL_DMA_IRQHandler+0xa34>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d013      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a68      	ldr	r2, [pc, #416]	; (800bed0 <HAL_DMA_IRQHandler+0xa38>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d00e      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a67      	ldr	r2, [pc, #412]	; (800bed4 <HAL_DMA_IRQHandler+0xa3c>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d009      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	4a65      	ldr	r2, [pc, #404]	; (800bed8 <HAL_DMA_IRQHandler+0xa40>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d004      	beq.n	800bd50 <HAL_DMA_IRQHandler+0x8b8>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	4a64      	ldr	r2, [pc, #400]	; (800bedc <HAL_DMA_IRQHandler+0xa44>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d108      	bne.n	800bd62 <HAL_DMA_IRQHandler+0x8ca>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f022 0201 	bic.w	r2, r2, #1
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	e007      	b.n	800bd72 <HAL_DMA_IRQHandler+0x8da>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	681a      	ldr	r2, [r3, #0]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f022 0201 	bic.w	r2, r2, #1
 800bd70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	3301      	adds	r3, #1
 800bd76:	60fb      	str	r3, [r7, #12]
 800bd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d307      	bcc.n	800bd8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f003 0301 	and.w	r3, r3, #1
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1f2      	bne.n	800bd72 <HAL_DMA_IRQHandler+0x8da>
 800bd8c:	e000      	b.n	800bd90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800bd8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d004      	beq.n	800bda8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	2203      	movs	r2, #3
 800bda2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800bda6:	e003      	b.n	800bdb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f000 8272 	beq.w	800c2a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	4798      	blx	r3
 800bdca:	e26c      	b.n	800c2a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	4a43      	ldr	r2, [pc, #268]	; (800bee0 <HAL_DMA_IRQHandler+0xa48>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d022      	beq.n	800be1c <HAL_DMA_IRQHandler+0x984>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a42      	ldr	r2, [pc, #264]	; (800bee4 <HAL_DMA_IRQHandler+0xa4c>)
 800bddc:	4293      	cmp	r3, r2
 800bdde:	d01d      	beq.n	800be1c <HAL_DMA_IRQHandler+0x984>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	4a40      	ldr	r2, [pc, #256]	; (800bee8 <HAL_DMA_IRQHandler+0xa50>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d018      	beq.n	800be1c <HAL_DMA_IRQHandler+0x984>
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a3f      	ldr	r2, [pc, #252]	; (800beec <HAL_DMA_IRQHandler+0xa54>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d013      	beq.n	800be1c <HAL_DMA_IRQHandler+0x984>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a3d      	ldr	r2, [pc, #244]	; (800bef0 <HAL_DMA_IRQHandler+0xa58>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d00e      	beq.n	800be1c <HAL_DMA_IRQHandler+0x984>
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a3c      	ldr	r2, [pc, #240]	; (800bef4 <HAL_DMA_IRQHandler+0xa5c>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d009      	beq.n	800be1c <HAL_DMA_IRQHandler+0x984>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	4a3a      	ldr	r2, [pc, #232]	; (800bef8 <HAL_DMA_IRQHandler+0xa60>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d004      	beq.n	800be1c <HAL_DMA_IRQHandler+0x984>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4a39      	ldr	r2, [pc, #228]	; (800befc <HAL_DMA_IRQHandler+0xa64>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d101      	bne.n	800be20 <HAL_DMA_IRQHandler+0x988>
 800be1c:	2301      	movs	r3, #1
 800be1e:	e000      	b.n	800be22 <HAL_DMA_IRQHandler+0x98a>
 800be20:	2300      	movs	r3, #0
 800be22:	2b00      	cmp	r3, #0
 800be24:	f000 823f 	beq.w	800c2a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be34:	f003 031f 	and.w	r3, r3, #31
 800be38:	2204      	movs	r2, #4
 800be3a:	409a      	lsls	r2, r3
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	4013      	ands	r3, r2
 800be40:	2b00      	cmp	r3, #0
 800be42:	f000 80cd 	beq.w	800bfe0 <HAL_DMA_IRQHandler+0xb48>
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	f003 0304 	and.w	r3, r3, #4
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	f000 80c7 	beq.w	800bfe0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be56:	f003 031f 	and.w	r3, r3, #31
 800be5a:	2204      	movs	r2, #4
 800be5c:	409a      	lsls	r2, r3
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d049      	beq.n	800bf00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800be6c:	693b      	ldr	r3, [r7, #16]
 800be6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be72:	2b00      	cmp	r3, #0
 800be74:	d109      	bne.n	800be8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f000 8210 	beq.w	800c2a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800be88:	e20a      	b.n	800c2a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f000 8206 	beq.w	800c2a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800be9c:	e200      	b.n	800c2a0 <HAL_DMA_IRQHandler+0xe08>
 800be9e:	bf00      	nop
 800bea0:	40020010 	.word	0x40020010
 800bea4:	40020028 	.word	0x40020028
 800bea8:	40020040 	.word	0x40020040
 800beac:	40020058 	.word	0x40020058
 800beb0:	40020070 	.word	0x40020070
 800beb4:	40020088 	.word	0x40020088
 800beb8:	400200a0 	.word	0x400200a0
 800bebc:	400200b8 	.word	0x400200b8
 800bec0:	40020410 	.word	0x40020410
 800bec4:	40020428 	.word	0x40020428
 800bec8:	40020440 	.word	0x40020440
 800becc:	40020458 	.word	0x40020458
 800bed0:	40020470 	.word	0x40020470
 800bed4:	40020488 	.word	0x40020488
 800bed8:	400204a0 	.word	0x400204a0
 800bedc:	400204b8 	.word	0x400204b8
 800bee0:	58025408 	.word	0x58025408
 800bee4:	5802541c 	.word	0x5802541c
 800bee8:	58025430 	.word	0x58025430
 800beec:	58025444 	.word	0x58025444
 800bef0:	58025458 	.word	0x58025458
 800bef4:	5802546c 	.word	0x5802546c
 800bef8:	58025480 	.word	0x58025480
 800befc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f003 0320 	and.w	r3, r3, #32
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d160      	bne.n	800bfcc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a7f      	ldr	r2, [pc, #508]	; (800c10c <HAL_DMA_IRQHandler+0xc74>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d04a      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a7d      	ldr	r2, [pc, #500]	; (800c110 <HAL_DMA_IRQHandler+0xc78>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d045      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a7c      	ldr	r2, [pc, #496]	; (800c114 <HAL_DMA_IRQHandler+0xc7c>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d040      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a7a      	ldr	r2, [pc, #488]	; (800c118 <HAL_DMA_IRQHandler+0xc80>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d03b      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	4a79      	ldr	r2, [pc, #484]	; (800c11c <HAL_DMA_IRQHandler+0xc84>)
 800bf38:	4293      	cmp	r3, r2
 800bf3a:	d036      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a77      	ldr	r2, [pc, #476]	; (800c120 <HAL_DMA_IRQHandler+0xc88>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d031      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a76      	ldr	r2, [pc, #472]	; (800c124 <HAL_DMA_IRQHandler+0xc8c>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d02c      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a74      	ldr	r2, [pc, #464]	; (800c128 <HAL_DMA_IRQHandler+0xc90>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d027      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4a73      	ldr	r2, [pc, #460]	; (800c12c <HAL_DMA_IRQHandler+0xc94>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d022      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a71      	ldr	r2, [pc, #452]	; (800c130 <HAL_DMA_IRQHandler+0xc98>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d01d      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	4a70      	ldr	r2, [pc, #448]	; (800c134 <HAL_DMA_IRQHandler+0xc9c>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d018      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4a6e      	ldr	r2, [pc, #440]	; (800c138 <HAL_DMA_IRQHandler+0xca0>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d013      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a6d      	ldr	r2, [pc, #436]	; (800c13c <HAL_DMA_IRQHandler+0xca4>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d00e      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	4a6b      	ldr	r2, [pc, #428]	; (800c140 <HAL_DMA_IRQHandler+0xca8>)
 800bf92:	4293      	cmp	r3, r2
 800bf94:	d009      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a6a      	ldr	r2, [pc, #424]	; (800c144 <HAL_DMA_IRQHandler+0xcac>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d004      	beq.n	800bfaa <HAL_DMA_IRQHandler+0xb12>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4a68      	ldr	r2, [pc, #416]	; (800c148 <HAL_DMA_IRQHandler+0xcb0>)
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	d108      	bne.n	800bfbc <HAL_DMA_IRQHandler+0xb24>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f022 0208 	bic.w	r2, r2, #8
 800bfb8:	601a      	str	r2, [r3, #0]
 800bfba:	e007      	b.n	800bfcc <HAL_DMA_IRQHandler+0xb34>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	681a      	ldr	r2, [r3, #0]
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f022 0204 	bic.w	r2, r2, #4
 800bfca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f000 8165 	beq.w	800c2a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bfde:	e15f      	b.n	800c2a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfe4:	f003 031f 	and.w	r3, r3, #31
 800bfe8:	2202      	movs	r2, #2
 800bfea:	409a      	lsls	r2, r3
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	4013      	ands	r3, r2
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f000 80c5 	beq.w	800c180 <HAL_DMA_IRQHandler+0xce8>
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	f003 0302 	and.w	r3, r3, #2
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	f000 80bf 	beq.w	800c180 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c006:	f003 031f 	and.w	r3, r3, #31
 800c00a:	2202      	movs	r2, #2
 800c00c:	409a      	lsls	r2, r3
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d018      	beq.n	800c04e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c022:	2b00      	cmp	r3, #0
 800c024:	d109      	bne.n	800c03a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	f000 813a 	beq.w	800c2a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c038:	e134      	b.n	800c2a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c03e:	2b00      	cmp	r3, #0
 800c040:	f000 8130 	beq.w	800c2a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c04c:	e12a      	b.n	800c2a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	f003 0320 	and.w	r3, r3, #32
 800c054:	2b00      	cmp	r3, #0
 800c056:	f040 8089 	bne.w	800c16c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a2b      	ldr	r2, [pc, #172]	; (800c10c <HAL_DMA_IRQHandler+0xc74>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d04a      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4a29      	ldr	r2, [pc, #164]	; (800c110 <HAL_DMA_IRQHandler+0xc78>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d045      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	4a28      	ldr	r2, [pc, #160]	; (800c114 <HAL_DMA_IRQHandler+0xc7c>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d040      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a26      	ldr	r2, [pc, #152]	; (800c118 <HAL_DMA_IRQHandler+0xc80>)
 800c07e:	4293      	cmp	r3, r2
 800c080:	d03b      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	4a25      	ldr	r2, [pc, #148]	; (800c11c <HAL_DMA_IRQHandler+0xc84>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d036      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a23      	ldr	r2, [pc, #140]	; (800c120 <HAL_DMA_IRQHandler+0xc88>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d031      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a22      	ldr	r2, [pc, #136]	; (800c124 <HAL_DMA_IRQHandler+0xc8c>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d02c      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4a20      	ldr	r2, [pc, #128]	; (800c128 <HAL_DMA_IRQHandler+0xc90>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d027      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	4a1f      	ldr	r2, [pc, #124]	; (800c12c <HAL_DMA_IRQHandler+0xc94>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d022      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4a1d      	ldr	r2, [pc, #116]	; (800c130 <HAL_DMA_IRQHandler+0xc98>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d01d      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a1c      	ldr	r2, [pc, #112]	; (800c134 <HAL_DMA_IRQHandler+0xc9c>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d018      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4a1a      	ldr	r2, [pc, #104]	; (800c138 <HAL_DMA_IRQHandler+0xca0>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d013      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4a19      	ldr	r2, [pc, #100]	; (800c13c <HAL_DMA_IRQHandler+0xca4>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d00e      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	4a17      	ldr	r2, [pc, #92]	; (800c140 <HAL_DMA_IRQHandler+0xca8>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d009      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	4a16      	ldr	r2, [pc, #88]	; (800c144 <HAL_DMA_IRQHandler+0xcac>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d004      	beq.n	800c0fa <HAL_DMA_IRQHandler+0xc62>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a14      	ldr	r2, [pc, #80]	; (800c148 <HAL_DMA_IRQHandler+0xcb0>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d128      	bne.n	800c14c <HAL_DMA_IRQHandler+0xcb4>
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	681a      	ldr	r2, [r3, #0]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f022 0214 	bic.w	r2, r2, #20
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	e027      	b.n	800c15c <HAL_DMA_IRQHandler+0xcc4>
 800c10c:	40020010 	.word	0x40020010
 800c110:	40020028 	.word	0x40020028
 800c114:	40020040 	.word	0x40020040
 800c118:	40020058 	.word	0x40020058
 800c11c:	40020070 	.word	0x40020070
 800c120:	40020088 	.word	0x40020088
 800c124:	400200a0 	.word	0x400200a0
 800c128:	400200b8 	.word	0x400200b8
 800c12c:	40020410 	.word	0x40020410
 800c130:	40020428 	.word	0x40020428
 800c134:	40020440 	.word	0x40020440
 800c138:	40020458 	.word	0x40020458
 800c13c:	40020470 	.word	0x40020470
 800c140:	40020488 	.word	0x40020488
 800c144:	400204a0 	.word	0x400204a0
 800c148:	400204b8 	.word	0x400204b8
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f022 020a 	bic.w	r2, r2, #10
 800c15a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c170:	2b00      	cmp	r3, #0
 800c172:	f000 8097 	beq.w	800c2a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c17e:	e091      	b.n	800c2a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c184:	f003 031f 	and.w	r3, r3, #31
 800c188:	2208      	movs	r2, #8
 800c18a:	409a      	lsls	r2, r3
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	4013      	ands	r3, r2
 800c190:	2b00      	cmp	r3, #0
 800c192:	f000 8088 	beq.w	800c2a6 <HAL_DMA_IRQHandler+0xe0e>
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	f003 0308 	and.w	r3, r3, #8
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f000 8082 	beq.w	800c2a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a41      	ldr	r2, [pc, #260]	; (800c2ac <HAL_DMA_IRQHandler+0xe14>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d04a      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a3f      	ldr	r2, [pc, #252]	; (800c2b0 <HAL_DMA_IRQHandler+0xe18>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d045      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a3e      	ldr	r2, [pc, #248]	; (800c2b4 <HAL_DMA_IRQHandler+0xe1c>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d040      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a3c      	ldr	r2, [pc, #240]	; (800c2b8 <HAL_DMA_IRQHandler+0xe20>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d03b      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	4a3b      	ldr	r2, [pc, #236]	; (800c2bc <HAL_DMA_IRQHandler+0xe24>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d036      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	4a39      	ldr	r2, [pc, #228]	; (800c2c0 <HAL_DMA_IRQHandler+0xe28>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d031      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a38      	ldr	r2, [pc, #224]	; (800c2c4 <HAL_DMA_IRQHandler+0xe2c>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d02c      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a36      	ldr	r2, [pc, #216]	; (800c2c8 <HAL_DMA_IRQHandler+0xe30>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d027      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a35      	ldr	r2, [pc, #212]	; (800c2cc <HAL_DMA_IRQHandler+0xe34>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d022      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a33      	ldr	r2, [pc, #204]	; (800c2d0 <HAL_DMA_IRQHandler+0xe38>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d01d      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a32      	ldr	r2, [pc, #200]	; (800c2d4 <HAL_DMA_IRQHandler+0xe3c>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d018      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a30      	ldr	r2, [pc, #192]	; (800c2d8 <HAL_DMA_IRQHandler+0xe40>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d013      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a2f      	ldr	r2, [pc, #188]	; (800c2dc <HAL_DMA_IRQHandler+0xe44>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d00e      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a2d      	ldr	r2, [pc, #180]	; (800c2e0 <HAL_DMA_IRQHandler+0xe48>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d009      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a2c      	ldr	r2, [pc, #176]	; (800c2e4 <HAL_DMA_IRQHandler+0xe4c>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d004      	beq.n	800c242 <HAL_DMA_IRQHandler+0xdaa>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a2a      	ldr	r2, [pc, #168]	; (800c2e8 <HAL_DMA_IRQHandler+0xe50>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d108      	bne.n	800c254 <HAL_DMA_IRQHandler+0xdbc>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f022 021c 	bic.w	r2, r2, #28
 800c250:	601a      	str	r2, [r3, #0]
 800c252:	e007      	b.n	800c264 <HAL_DMA_IRQHandler+0xdcc>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f022 020e 	bic.w	r2, r2, #14
 800c262:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c268:	f003 031f 	and.w	r3, r3, #31
 800c26c:	2201      	movs	r2, #1
 800c26e:	409a      	lsls	r2, r3
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2201      	movs	r2, #1
 800c278:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2201      	movs	r2, #1
 800c27e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d009      	beq.n	800c2a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	4798      	blx	r3
 800c29a:	e004      	b.n	800c2a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800c29c:	bf00      	nop
 800c29e:	e002      	b.n	800c2a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c2a0:	bf00      	nop
 800c2a2:	e000      	b.n	800c2a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c2a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800c2a6:	3728      	adds	r7, #40	; 0x28
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	40020010 	.word	0x40020010
 800c2b0:	40020028 	.word	0x40020028
 800c2b4:	40020040 	.word	0x40020040
 800c2b8:	40020058 	.word	0x40020058
 800c2bc:	40020070 	.word	0x40020070
 800c2c0:	40020088 	.word	0x40020088
 800c2c4:	400200a0 	.word	0x400200a0
 800c2c8:	400200b8 	.word	0x400200b8
 800c2cc:	40020410 	.word	0x40020410
 800c2d0:	40020428 	.word	0x40020428
 800c2d4:	40020440 	.word	0x40020440
 800c2d8:	40020458 	.word	0x40020458
 800c2dc:	40020470 	.word	0x40020470
 800c2e0:	40020488 	.word	0x40020488
 800c2e4:	400204a0 	.word	0x400204a0
 800c2e8:	400204b8 	.word	0x400204b8

0800c2ec <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b083      	sub	sp, #12
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c2fa:	b2db      	uxtb	r3, r3
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	370c      	adds	r7, #12
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c308:	b480      	push	{r7}
 800c30a:	b087      	sub	sp, #28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	60f8      	str	r0, [r7, #12]
 800c310:	60b9      	str	r1, [r7, #8]
 800c312:	607a      	str	r2, [r7, #4]
 800c314:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c31a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c320:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4a7f      	ldr	r2, [pc, #508]	; (800c524 <DMA_SetConfig+0x21c>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d072      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a7d      	ldr	r2, [pc, #500]	; (800c528 <DMA_SetConfig+0x220>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d06d      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a7c      	ldr	r2, [pc, #496]	; (800c52c <DMA_SetConfig+0x224>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d068      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a7a      	ldr	r2, [pc, #488]	; (800c530 <DMA_SetConfig+0x228>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d063      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a79      	ldr	r2, [pc, #484]	; (800c534 <DMA_SetConfig+0x22c>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d05e      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a77      	ldr	r2, [pc, #476]	; (800c538 <DMA_SetConfig+0x230>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d059      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a76      	ldr	r2, [pc, #472]	; (800c53c <DMA_SetConfig+0x234>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d054      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a74      	ldr	r2, [pc, #464]	; (800c540 <DMA_SetConfig+0x238>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d04f      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a73      	ldr	r2, [pc, #460]	; (800c544 <DMA_SetConfig+0x23c>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d04a      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a71      	ldr	r2, [pc, #452]	; (800c548 <DMA_SetConfig+0x240>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d045      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a70      	ldr	r2, [pc, #448]	; (800c54c <DMA_SetConfig+0x244>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d040      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a6e      	ldr	r2, [pc, #440]	; (800c550 <DMA_SetConfig+0x248>)
 800c396:	4293      	cmp	r3, r2
 800c398:	d03b      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4a6d      	ldr	r2, [pc, #436]	; (800c554 <DMA_SetConfig+0x24c>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d036      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	4a6b      	ldr	r2, [pc, #428]	; (800c558 <DMA_SetConfig+0x250>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d031      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4a6a      	ldr	r2, [pc, #424]	; (800c55c <DMA_SetConfig+0x254>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d02c      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a68      	ldr	r2, [pc, #416]	; (800c560 <DMA_SetConfig+0x258>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d027      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a67      	ldr	r2, [pc, #412]	; (800c564 <DMA_SetConfig+0x25c>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d022      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a65      	ldr	r2, [pc, #404]	; (800c568 <DMA_SetConfig+0x260>)
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	d01d      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	4a64      	ldr	r2, [pc, #400]	; (800c56c <DMA_SetConfig+0x264>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d018      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a62      	ldr	r2, [pc, #392]	; (800c570 <DMA_SetConfig+0x268>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d013      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	4a61      	ldr	r2, [pc, #388]	; (800c574 <DMA_SetConfig+0x26c>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d00e      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a5f      	ldr	r2, [pc, #380]	; (800c578 <DMA_SetConfig+0x270>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d009      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	4a5e      	ldr	r2, [pc, #376]	; (800c57c <DMA_SetConfig+0x274>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d004      	beq.n	800c412 <DMA_SetConfig+0x10a>
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a5c      	ldr	r2, [pc, #368]	; (800c580 <DMA_SetConfig+0x278>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d101      	bne.n	800c416 <DMA_SetConfig+0x10e>
 800c412:	2301      	movs	r3, #1
 800c414:	e000      	b.n	800c418 <DMA_SetConfig+0x110>
 800c416:	2300      	movs	r3, #0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00d      	beq.n	800c438 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c424:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d004      	beq.n	800c438 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c432:	68fa      	ldr	r2, [r7, #12]
 800c434:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c436:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a39      	ldr	r2, [pc, #228]	; (800c524 <DMA_SetConfig+0x21c>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d04a      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a38      	ldr	r2, [pc, #224]	; (800c528 <DMA_SetConfig+0x220>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d045      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a36      	ldr	r2, [pc, #216]	; (800c52c <DMA_SetConfig+0x224>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d040      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4a35      	ldr	r2, [pc, #212]	; (800c530 <DMA_SetConfig+0x228>)
 800c45c:	4293      	cmp	r3, r2
 800c45e:	d03b      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a33      	ldr	r2, [pc, #204]	; (800c534 <DMA_SetConfig+0x22c>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d036      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	4a32      	ldr	r2, [pc, #200]	; (800c538 <DMA_SetConfig+0x230>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d031      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a30      	ldr	r2, [pc, #192]	; (800c53c <DMA_SetConfig+0x234>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d02c      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	4a2f      	ldr	r2, [pc, #188]	; (800c540 <DMA_SetConfig+0x238>)
 800c484:	4293      	cmp	r3, r2
 800c486:	d027      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4a2d      	ldr	r2, [pc, #180]	; (800c544 <DMA_SetConfig+0x23c>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d022      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	4a2c      	ldr	r2, [pc, #176]	; (800c548 <DMA_SetConfig+0x240>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d01d      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a2a      	ldr	r2, [pc, #168]	; (800c54c <DMA_SetConfig+0x244>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d018      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	4a29      	ldr	r2, [pc, #164]	; (800c550 <DMA_SetConfig+0x248>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d013      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	4a27      	ldr	r2, [pc, #156]	; (800c554 <DMA_SetConfig+0x24c>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d00e      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a26      	ldr	r2, [pc, #152]	; (800c558 <DMA_SetConfig+0x250>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d009      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4a24      	ldr	r2, [pc, #144]	; (800c55c <DMA_SetConfig+0x254>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d004      	beq.n	800c4d8 <DMA_SetConfig+0x1d0>
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a23      	ldr	r2, [pc, #140]	; (800c560 <DMA_SetConfig+0x258>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d101      	bne.n	800c4dc <DMA_SetConfig+0x1d4>
 800c4d8:	2301      	movs	r3, #1
 800c4da:	e000      	b.n	800c4de <DMA_SetConfig+0x1d6>
 800c4dc:	2300      	movs	r3, #0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d059      	beq.n	800c596 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4e6:	f003 031f 	and.w	r3, r3, #31
 800c4ea:	223f      	movs	r2, #63	; 0x3f
 800c4ec:	409a      	lsls	r2, r3
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681a      	ldr	r2, [r3, #0]
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c500:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	683a      	ldr	r2, [r7, #0]
 800c508:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	2b40      	cmp	r3, #64	; 0x40
 800c510:	d138      	bne.n	800c584 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800c522:	e086      	b.n	800c632 <DMA_SetConfig+0x32a>
 800c524:	40020010 	.word	0x40020010
 800c528:	40020028 	.word	0x40020028
 800c52c:	40020040 	.word	0x40020040
 800c530:	40020058 	.word	0x40020058
 800c534:	40020070 	.word	0x40020070
 800c538:	40020088 	.word	0x40020088
 800c53c:	400200a0 	.word	0x400200a0
 800c540:	400200b8 	.word	0x400200b8
 800c544:	40020410 	.word	0x40020410
 800c548:	40020428 	.word	0x40020428
 800c54c:	40020440 	.word	0x40020440
 800c550:	40020458 	.word	0x40020458
 800c554:	40020470 	.word	0x40020470
 800c558:	40020488 	.word	0x40020488
 800c55c:	400204a0 	.word	0x400204a0
 800c560:	400204b8 	.word	0x400204b8
 800c564:	58025408 	.word	0x58025408
 800c568:	5802541c 	.word	0x5802541c
 800c56c:	58025430 	.word	0x58025430
 800c570:	58025444 	.word	0x58025444
 800c574:	58025458 	.word	0x58025458
 800c578:	5802546c 	.word	0x5802546c
 800c57c:	58025480 	.word	0x58025480
 800c580:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	68ba      	ldr	r2, [r7, #8]
 800c58a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	60da      	str	r2, [r3, #12]
}
 800c594:	e04d      	b.n	800c632 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a29      	ldr	r2, [pc, #164]	; (800c640 <DMA_SetConfig+0x338>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d022      	beq.n	800c5e6 <DMA_SetConfig+0x2de>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a27      	ldr	r2, [pc, #156]	; (800c644 <DMA_SetConfig+0x33c>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d01d      	beq.n	800c5e6 <DMA_SetConfig+0x2de>
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a26      	ldr	r2, [pc, #152]	; (800c648 <DMA_SetConfig+0x340>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d018      	beq.n	800c5e6 <DMA_SetConfig+0x2de>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a24      	ldr	r2, [pc, #144]	; (800c64c <DMA_SetConfig+0x344>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d013      	beq.n	800c5e6 <DMA_SetConfig+0x2de>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a23      	ldr	r2, [pc, #140]	; (800c650 <DMA_SetConfig+0x348>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d00e      	beq.n	800c5e6 <DMA_SetConfig+0x2de>
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	4a21      	ldr	r2, [pc, #132]	; (800c654 <DMA_SetConfig+0x34c>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d009      	beq.n	800c5e6 <DMA_SetConfig+0x2de>
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a20      	ldr	r2, [pc, #128]	; (800c658 <DMA_SetConfig+0x350>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d004      	beq.n	800c5e6 <DMA_SetConfig+0x2de>
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a1e      	ldr	r2, [pc, #120]	; (800c65c <DMA_SetConfig+0x354>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d101      	bne.n	800c5ea <DMA_SetConfig+0x2e2>
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e000      	b.n	800c5ec <DMA_SetConfig+0x2e4>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d020      	beq.n	800c632 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c5f4:	f003 031f 	and.w	r3, r3, #31
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	409a      	lsls	r2, r3
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	683a      	ldr	r2, [r7, #0]
 800c606:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	2b40      	cmp	r3, #64	; 0x40
 800c60e:	d108      	bne.n	800c622 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	687a      	ldr	r2, [r7, #4]
 800c616:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	68ba      	ldr	r2, [r7, #8]
 800c61e:	60da      	str	r2, [r3, #12]
}
 800c620:	e007      	b.n	800c632 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	60da      	str	r2, [r3, #12]
}
 800c632:	bf00      	nop
 800c634:	371c      	adds	r7, #28
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	58025408 	.word	0x58025408
 800c644:	5802541c 	.word	0x5802541c
 800c648:	58025430 	.word	0x58025430
 800c64c:	58025444 	.word	0x58025444
 800c650:	58025458 	.word	0x58025458
 800c654:	5802546c 	.word	0x5802546c
 800c658:	58025480 	.word	0x58025480
 800c65c:	58025494 	.word	0x58025494

0800c660 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c660:	b480      	push	{r7}
 800c662:	b085      	sub	sp, #20
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	4a42      	ldr	r2, [pc, #264]	; (800c778 <DMA_CalcBaseAndBitshift+0x118>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d04a      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	4a41      	ldr	r2, [pc, #260]	; (800c77c <DMA_CalcBaseAndBitshift+0x11c>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d045      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	4a3f      	ldr	r2, [pc, #252]	; (800c780 <DMA_CalcBaseAndBitshift+0x120>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d040      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4a3e      	ldr	r2, [pc, #248]	; (800c784 <DMA_CalcBaseAndBitshift+0x124>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d03b      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4a3c      	ldr	r2, [pc, #240]	; (800c788 <DMA_CalcBaseAndBitshift+0x128>)
 800c696:	4293      	cmp	r3, r2
 800c698:	d036      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	4a3b      	ldr	r2, [pc, #236]	; (800c78c <DMA_CalcBaseAndBitshift+0x12c>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d031      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	4a39      	ldr	r2, [pc, #228]	; (800c790 <DMA_CalcBaseAndBitshift+0x130>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d02c      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4a38      	ldr	r2, [pc, #224]	; (800c794 <DMA_CalcBaseAndBitshift+0x134>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d027      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a36      	ldr	r2, [pc, #216]	; (800c798 <DMA_CalcBaseAndBitshift+0x138>)
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d022      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	4a35      	ldr	r2, [pc, #212]	; (800c79c <DMA_CalcBaseAndBitshift+0x13c>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d01d      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a33      	ldr	r2, [pc, #204]	; (800c7a0 <DMA_CalcBaseAndBitshift+0x140>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d018      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	4a32      	ldr	r2, [pc, #200]	; (800c7a4 <DMA_CalcBaseAndBitshift+0x144>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d013      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4a30      	ldr	r2, [pc, #192]	; (800c7a8 <DMA_CalcBaseAndBitshift+0x148>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d00e      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	4a2f      	ldr	r2, [pc, #188]	; (800c7ac <DMA_CalcBaseAndBitshift+0x14c>)
 800c6f0:	4293      	cmp	r3, r2
 800c6f2:	d009      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a2d      	ldr	r2, [pc, #180]	; (800c7b0 <DMA_CalcBaseAndBitshift+0x150>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d004      	beq.n	800c708 <DMA_CalcBaseAndBitshift+0xa8>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	4a2c      	ldr	r2, [pc, #176]	; (800c7b4 <DMA_CalcBaseAndBitshift+0x154>)
 800c704:	4293      	cmp	r3, r2
 800c706:	d101      	bne.n	800c70c <DMA_CalcBaseAndBitshift+0xac>
 800c708:	2301      	movs	r3, #1
 800c70a:	e000      	b.n	800c70e <DMA_CalcBaseAndBitshift+0xae>
 800c70c:	2300      	movs	r3, #0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d024      	beq.n	800c75c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	b2db      	uxtb	r3, r3
 800c718:	3b10      	subs	r3, #16
 800c71a:	4a27      	ldr	r2, [pc, #156]	; (800c7b8 <DMA_CalcBaseAndBitshift+0x158>)
 800c71c:	fba2 2303 	umull	r2, r3, r2, r3
 800c720:	091b      	lsrs	r3, r3, #4
 800c722:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f003 0307 	and.w	r3, r3, #7
 800c72a:	4a24      	ldr	r2, [pc, #144]	; (800c7bc <DMA_CalcBaseAndBitshift+0x15c>)
 800c72c:	5cd3      	ldrb	r3, [r2, r3]
 800c72e:	461a      	mov	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2b03      	cmp	r3, #3
 800c738:	d908      	bls.n	800c74c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	461a      	mov	r2, r3
 800c740:	4b1f      	ldr	r3, [pc, #124]	; (800c7c0 <DMA_CalcBaseAndBitshift+0x160>)
 800c742:	4013      	ands	r3, r2
 800c744:	1d1a      	adds	r2, r3, #4
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	659a      	str	r2, [r3, #88]	; 0x58
 800c74a:	e00d      	b.n	800c768 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	461a      	mov	r2, r3
 800c752:	4b1b      	ldr	r3, [pc, #108]	; (800c7c0 <DMA_CalcBaseAndBitshift+0x160>)
 800c754:	4013      	ands	r3, r2
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	6593      	str	r3, [r2, #88]	; 0x58
 800c75a:	e005      	b.n	800c768 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr
 800c778:	40020010 	.word	0x40020010
 800c77c:	40020028 	.word	0x40020028
 800c780:	40020040 	.word	0x40020040
 800c784:	40020058 	.word	0x40020058
 800c788:	40020070 	.word	0x40020070
 800c78c:	40020088 	.word	0x40020088
 800c790:	400200a0 	.word	0x400200a0
 800c794:	400200b8 	.word	0x400200b8
 800c798:	40020410 	.word	0x40020410
 800c79c:	40020428 	.word	0x40020428
 800c7a0:	40020440 	.word	0x40020440
 800c7a4:	40020458 	.word	0x40020458
 800c7a8:	40020470 	.word	0x40020470
 800c7ac:	40020488 	.word	0x40020488
 800c7b0:	400204a0 	.word	0x400204a0
 800c7b4:	400204b8 	.word	0x400204b8
 800c7b8:	aaaaaaab 	.word	0xaaaaaaab
 800c7bc:	08018410 	.word	0x08018410
 800c7c0:	fffffc00 	.word	0xfffffc00

0800c7c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	699b      	ldr	r3, [r3, #24]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d120      	bne.n	800c81a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7dc:	2b03      	cmp	r3, #3
 800c7de:	d858      	bhi.n	800c892 <DMA_CheckFifoParam+0xce>
 800c7e0:	a201      	add	r2, pc, #4	; (adr r2, 800c7e8 <DMA_CheckFifoParam+0x24>)
 800c7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e6:	bf00      	nop
 800c7e8:	0800c7f9 	.word	0x0800c7f9
 800c7ec:	0800c80b 	.word	0x0800c80b
 800c7f0:	0800c7f9 	.word	0x0800c7f9
 800c7f4:	0800c893 	.word	0x0800c893
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c800:	2b00      	cmp	r3, #0
 800c802:	d048      	beq.n	800c896 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800c804:	2301      	movs	r3, #1
 800c806:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c808:	e045      	b.n	800c896 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c812:	d142      	bne.n	800c89a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800c814:	2301      	movs	r3, #1
 800c816:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c818:	e03f      	b.n	800c89a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c822:	d123      	bne.n	800c86c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c828:	2b03      	cmp	r3, #3
 800c82a:	d838      	bhi.n	800c89e <DMA_CheckFifoParam+0xda>
 800c82c:	a201      	add	r2, pc, #4	; (adr r2, 800c834 <DMA_CheckFifoParam+0x70>)
 800c82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c832:	bf00      	nop
 800c834:	0800c845 	.word	0x0800c845
 800c838:	0800c84b 	.word	0x0800c84b
 800c83c:	0800c845 	.word	0x0800c845
 800c840:	0800c85d 	.word	0x0800c85d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800c844:	2301      	movs	r3, #1
 800c846:	73fb      	strb	r3, [r7, #15]
        break;
 800c848:	e030      	b.n	800c8ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c852:	2b00      	cmp	r3, #0
 800c854:	d025      	beq.n	800c8a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800c856:	2301      	movs	r3, #1
 800c858:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c85a:	e022      	b.n	800c8a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c860:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c864:	d11f      	bne.n	800c8a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800c866:	2301      	movs	r3, #1
 800c868:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c86a:	e01c      	b.n	800c8a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c870:	2b02      	cmp	r3, #2
 800c872:	d902      	bls.n	800c87a <DMA_CheckFifoParam+0xb6>
 800c874:	2b03      	cmp	r3, #3
 800c876:	d003      	beq.n	800c880 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800c878:	e018      	b.n	800c8ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800c87a:	2301      	movs	r3, #1
 800c87c:	73fb      	strb	r3, [r7, #15]
        break;
 800c87e:	e015      	b.n	800c8ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c884:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00e      	beq.n	800c8aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800c88c:	2301      	movs	r3, #1
 800c88e:	73fb      	strb	r3, [r7, #15]
    break;
 800c890:	e00b      	b.n	800c8aa <DMA_CheckFifoParam+0xe6>
        break;
 800c892:	bf00      	nop
 800c894:	e00a      	b.n	800c8ac <DMA_CheckFifoParam+0xe8>
        break;
 800c896:	bf00      	nop
 800c898:	e008      	b.n	800c8ac <DMA_CheckFifoParam+0xe8>
        break;
 800c89a:	bf00      	nop
 800c89c:	e006      	b.n	800c8ac <DMA_CheckFifoParam+0xe8>
        break;
 800c89e:	bf00      	nop
 800c8a0:	e004      	b.n	800c8ac <DMA_CheckFifoParam+0xe8>
        break;
 800c8a2:	bf00      	nop
 800c8a4:	e002      	b.n	800c8ac <DMA_CheckFifoParam+0xe8>
        break;
 800c8a6:	bf00      	nop
 800c8a8:	e000      	b.n	800c8ac <DMA_CheckFifoParam+0xe8>
    break;
 800c8aa:	bf00      	nop
    }
  }

  return status;
 800c8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3714      	adds	r7, #20
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b8:	4770      	bx	lr
 800c8ba:	bf00      	nop

0800c8bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b085      	sub	sp, #20
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4a38      	ldr	r2, [pc, #224]	; (800c9b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800c8d0:	4293      	cmp	r3, r2
 800c8d2:	d022      	beq.n	800c91a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a36      	ldr	r2, [pc, #216]	; (800c9b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d01d      	beq.n	800c91a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a35      	ldr	r2, [pc, #212]	; (800c9b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d018      	beq.n	800c91a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a33      	ldr	r2, [pc, #204]	; (800c9bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d013      	beq.n	800c91a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a32      	ldr	r2, [pc, #200]	; (800c9c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d00e      	beq.n	800c91a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a30      	ldr	r2, [pc, #192]	; (800c9c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d009      	beq.n	800c91a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a2f      	ldr	r2, [pc, #188]	; (800c9c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d004      	beq.n	800c91a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a2d      	ldr	r2, [pc, #180]	; (800c9cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d101      	bne.n	800c91e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e000      	b.n	800c920 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800c91e:	2300      	movs	r3, #0
 800c920:	2b00      	cmp	r3, #0
 800c922:	d01a      	beq.n	800c95a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	3b08      	subs	r3, #8
 800c92c:	4a28      	ldr	r2, [pc, #160]	; (800c9d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800c92e:	fba2 2303 	umull	r2, r3, r2, r3
 800c932:	091b      	lsrs	r3, r3, #4
 800c934:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	4b26      	ldr	r3, [pc, #152]	; (800c9d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800c93a:	4413      	add	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	461a      	mov	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	4a24      	ldr	r2, [pc, #144]	; (800c9d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800c948:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f003 031f 	and.w	r3, r3, #31
 800c950:	2201      	movs	r2, #1
 800c952:	409a      	lsls	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800c958:	e024      	b.n	800c9a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	3b10      	subs	r3, #16
 800c962:	4a1e      	ldr	r2, [pc, #120]	; (800c9dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800c964:	fba2 2303 	umull	r2, r3, r2, r3
 800c968:	091b      	lsrs	r3, r3, #4
 800c96a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	4a1c      	ldr	r2, [pc, #112]	; (800c9e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800c970:	4293      	cmp	r3, r2
 800c972:	d806      	bhi.n	800c982 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	4a1b      	ldr	r2, [pc, #108]	; (800c9e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d902      	bls.n	800c982 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	3308      	adds	r3, #8
 800c980:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	4b18      	ldr	r3, [pc, #96]	; (800c9e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800c986:	4413      	add	r3, r2
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	461a      	mov	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4a16      	ldr	r2, [pc, #88]	; (800c9ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800c994:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	f003 031f 	and.w	r3, r3, #31
 800c99c:	2201      	movs	r2, #1
 800c99e:	409a      	lsls	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c9a4:	bf00      	nop
 800c9a6:	3714      	adds	r7, #20
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ae:	4770      	bx	lr
 800c9b0:	58025408 	.word	0x58025408
 800c9b4:	5802541c 	.word	0x5802541c
 800c9b8:	58025430 	.word	0x58025430
 800c9bc:	58025444 	.word	0x58025444
 800c9c0:	58025458 	.word	0x58025458
 800c9c4:	5802546c 	.word	0x5802546c
 800c9c8:	58025480 	.word	0x58025480
 800c9cc:	58025494 	.word	0x58025494
 800c9d0:	cccccccd 	.word	0xcccccccd
 800c9d4:	16009600 	.word	0x16009600
 800c9d8:	58025880 	.word	0x58025880
 800c9dc:	aaaaaaab 	.word	0xaaaaaaab
 800c9e0:	400204b8 	.word	0x400204b8
 800c9e4:	4002040f 	.word	0x4002040f
 800c9e8:	10008200 	.word	0x10008200
 800c9ec:	40020880 	.word	0x40020880

0800c9f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	b2db      	uxtb	r3, r3
 800c9fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d04a      	beq.n	800ca9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2b08      	cmp	r3, #8
 800ca0a:	d847      	bhi.n	800ca9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	4a25      	ldr	r2, [pc, #148]	; (800caa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d022      	beq.n	800ca5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a24      	ldr	r2, [pc, #144]	; (800caac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d01d      	beq.n	800ca5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a22      	ldr	r2, [pc, #136]	; (800cab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d018      	beq.n	800ca5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4a21      	ldr	r2, [pc, #132]	; (800cab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d013      	beq.n	800ca5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a1f      	ldr	r2, [pc, #124]	; (800cab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d00e      	beq.n	800ca5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	4a1e      	ldr	r2, [pc, #120]	; (800cabc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d009      	beq.n	800ca5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a1c      	ldr	r2, [pc, #112]	; (800cac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800ca4e:	4293      	cmp	r3, r2
 800ca50:	d004      	beq.n	800ca5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a1b      	ldr	r2, [pc, #108]	; (800cac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d101      	bne.n	800ca60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e000      	b.n	800ca62 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800ca60:	2300      	movs	r3, #0
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00a      	beq.n	800ca7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800ca66:	68fa      	ldr	r2, [r7, #12]
 800ca68:	4b17      	ldr	r3, [pc, #92]	; (800cac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800ca6a:	4413      	add	r3, r2
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	461a      	mov	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a15      	ldr	r2, [pc, #84]	; (800cacc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ca78:	671a      	str	r2, [r3, #112]	; 0x70
 800ca7a:	e009      	b.n	800ca90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	4b14      	ldr	r3, [pc, #80]	; (800cad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ca80:	4413      	add	r3, r2
 800ca82:	009b      	lsls	r3, r3, #2
 800ca84:	461a      	mov	r2, r3
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	4a11      	ldr	r2, [pc, #68]	; (800cad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800ca8e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	3b01      	subs	r3, #1
 800ca94:	2201      	movs	r2, #1
 800ca96:	409a      	lsls	r2, r3
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800ca9c:	bf00      	nop
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr
 800caa8:	58025408 	.word	0x58025408
 800caac:	5802541c 	.word	0x5802541c
 800cab0:	58025430 	.word	0x58025430
 800cab4:	58025444 	.word	0x58025444
 800cab8:	58025458 	.word	0x58025458
 800cabc:	5802546c 	.word	0x5802546c
 800cac0:	58025480 	.word	0x58025480
 800cac4:	58025494 	.word	0x58025494
 800cac8:	1600963f 	.word	0x1600963f
 800cacc:	58025940 	.word	0x58025940
 800cad0:	1000823f 	.word	0x1000823f
 800cad4:	40020940 	.word	0x40020940

0800cad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cad8:	b480      	push	{r7}
 800cada:	b089      	sub	sp, #36	; 0x24
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
 800cae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800cae2:	2300      	movs	r3, #0
 800cae4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800cae6:	4b86      	ldr	r3, [pc, #536]	; (800cd00 <HAL_GPIO_Init+0x228>)
 800cae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800caea:	e18c      	b.n	800ce06 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	681a      	ldr	r2, [r3, #0]
 800caf0:	2101      	movs	r1, #1
 800caf2:	69fb      	ldr	r3, [r7, #28]
 800caf4:	fa01 f303 	lsl.w	r3, r1, r3
 800caf8:	4013      	ands	r3, r2
 800cafa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800cafc:	693b      	ldr	r3, [r7, #16]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f000 817e 	beq.w	800ce00 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	f003 0303 	and.w	r3, r3, #3
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d005      	beq.n	800cb1c <HAL_GPIO_Init+0x44>
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	f003 0303 	and.w	r3, r3, #3
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d130      	bne.n	800cb7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	2203      	movs	r2, #3
 800cb28:	fa02 f303 	lsl.w	r3, r2, r3
 800cb2c:	43db      	mvns	r3, r3
 800cb2e:	69ba      	ldr	r2, [r7, #24]
 800cb30:	4013      	ands	r3, r2
 800cb32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	68da      	ldr	r2, [r3, #12]
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb40:	69ba      	ldr	r2, [r7, #24]
 800cb42:	4313      	orrs	r3, r2
 800cb44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	69ba      	ldr	r2, [r7, #24]
 800cb4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cb52:	2201      	movs	r2, #1
 800cb54:	69fb      	ldr	r3, [r7, #28]
 800cb56:	fa02 f303 	lsl.w	r3, r2, r3
 800cb5a:	43db      	mvns	r3, r3
 800cb5c:	69ba      	ldr	r2, [r7, #24]
 800cb5e:	4013      	ands	r3, r2
 800cb60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	091b      	lsrs	r3, r3, #4
 800cb68:	f003 0201 	and.w	r2, r3, #1
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb72:	69ba      	ldr	r2, [r7, #24]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	69ba      	ldr	r2, [r7, #24]
 800cb7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	f003 0303 	and.w	r3, r3, #3
 800cb86:	2b03      	cmp	r3, #3
 800cb88:	d017      	beq.n	800cbba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	68db      	ldr	r3, [r3, #12]
 800cb8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cb90:	69fb      	ldr	r3, [r7, #28]
 800cb92:	005b      	lsls	r3, r3, #1
 800cb94:	2203      	movs	r2, #3
 800cb96:	fa02 f303 	lsl.w	r3, r2, r3
 800cb9a:	43db      	mvns	r3, r3
 800cb9c:	69ba      	ldr	r2, [r7, #24]
 800cb9e:	4013      	ands	r3, r2
 800cba0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	689a      	ldr	r2, [r3, #8]
 800cba6:	69fb      	ldr	r3, [r7, #28]
 800cba8:	005b      	lsls	r3, r3, #1
 800cbaa:	fa02 f303 	lsl.w	r3, r2, r3
 800cbae:	69ba      	ldr	r2, [r7, #24]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	69ba      	ldr	r2, [r7, #24]
 800cbb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	f003 0303 	and.w	r3, r3, #3
 800cbc2:	2b02      	cmp	r3, #2
 800cbc4:	d123      	bne.n	800cc0e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	08da      	lsrs	r2, r3, #3
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	3208      	adds	r2, #8
 800cbce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cbd4:	69fb      	ldr	r3, [r7, #28]
 800cbd6:	f003 0307 	and.w	r3, r3, #7
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	220f      	movs	r2, #15
 800cbde:	fa02 f303 	lsl.w	r3, r2, r3
 800cbe2:	43db      	mvns	r3, r3
 800cbe4:	69ba      	ldr	r2, [r7, #24]
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	691a      	ldr	r2, [r3, #16]
 800cbee:	69fb      	ldr	r3, [r7, #28]
 800cbf0:	f003 0307 	and.w	r3, r3, #7
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfa:	69ba      	ldr	r2, [r7, #24]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	08da      	lsrs	r2, r3, #3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	3208      	adds	r2, #8
 800cc08:	69b9      	ldr	r1, [r7, #24]
 800cc0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	005b      	lsls	r3, r3, #1
 800cc18:	2203      	movs	r2, #3
 800cc1a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc1e:	43db      	mvns	r3, r3
 800cc20:	69ba      	ldr	r2, [r7, #24]
 800cc22:	4013      	ands	r3, r2
 800cc24:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	f003 0203 	and.w	r2, r3, #3
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	005b      	lsls	r3, r3, #1
 800cc32:	fa02 f303 	lsl.w	r3, r2, r3
 800cc36:	69ba      	ldr	r2, [r7, #24]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	69ba      	ldr	r2, [r7, #24]
 800cc40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	f000 80d8 	beq.w	800ce00 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cc50:	4b2c      	ldr	r3, [pc, #176]	; (800cd04 <HAL_GPIO_Init+0x22c>)
 800cc52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cc56:	4a2b      	ldr	r2, [pc, #172]	; (800cd04 <HAL_GPIO_Init+0x22c>)
 800cc58:	f043 0302 	orr.w	r3, r3, #2
 800cc5c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cc60:	4b28      	ldr	r3, [pc, #160]	; (800cd04 <HAL_GPIO_Init+0x22c>)
 800cc62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cc66:	f003 0302 	and.w	r3, r3, #2
 800cc6a:	60fb      	str	r3, [r7, #12]
 800cc6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cc6e:	4a26      	ldr	r2, [pc, #152]	; (800cd08 <HAL_GPIO_Init+0x230>)
 800cc70:	69fb      	ldr	r3, [r7, #28]
 800cc72:	089b      	lsrs	r3, r3, #2
 800cc74:	3302      	adds	r3, #2
 800cc76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cc7c:	69fb      	ldr	r3, [r7, #28]
 800cc7e:	f003 0303 	and.w	r3, r3, #3
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	220f      	movs	r2, #15
 800cc86:	fa02 f303 	lsl.w	r3, r2, r3
 800cc8a:	43db      	mvns	r3, r3
 800cc8c:	69ba      	ldr	r2, [r7, #24]
 800cc8e:	4013      	ands	r3, r2
 800cc90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	4a1d      	ldr	r2, [pc, #116]	; (800cd0c <HAL_GPIO_Init+0x234>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d04a      	beq.n	800cd30 <HAL_GPIO_Init+0x258>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	4a1c      	ldr	r2, [pc, #112]	; (800cd10 <HAL_GPIO_Init+0x238>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d02b      	beq.n	800ccfa <HAL_GPIO_Init+0x222>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a1b      	ldr	r2, [pc, #108]	; (800cd14 <HAL_GPIO_Init+0x23c>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d025      	beq.n	800ccf6 <HAL_GPIO_Init+0x21e>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a1a      	ldr	r2, [pc, #104]	; (800cd18 <HAL_GPIO_Init+0x240>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d01f      	beq.n	800ccf2 <HAL_GPIO_Init+0x21a>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a19      	ldr	r2, [pc, #100]	; (800cd1c <HAL_GPIO_Init+0x244>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d019      	beq.n	800ccee <HAL_GPIO_Init+0x216>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a18      	ldr	r2, [pc, #96]	; (800cd20 <HAL_GPIO_Init+0x248>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d013      	beq.n	800ccea <HAL_GPIO_Init+0x212>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a17      	ldr	r2, [pc, #92]	; (800cd24 <HAL_GPIO_Init+0x24c>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d00d      	beq.n	800cce6 <HAL_GPIO_Init+0x20e>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4a16      	ldr	r2, [pc, #88]	; (800cd28 <HAL_GPIO_Init+0x250>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d007      	beq.n	800cce2 <HAL_GPIO_Init+0x20a>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a15      	ldr	r2, [pc, #84]	; (800cd2c <HAL_GPIO_Init+0x254>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d101      	bne.n	800ccde <HAL_GPIO_Init+0x206>
 800ccda:	2309      	movs	r3, #9
 800ccdc:	e029      	b.n	800cd32 <HAL_GPIO_Init+0x25a>
 800ccde:	230a      	movs	r3, #10
 800cce0:	e027      	b.n	800cd32 <HAL_GPIO_Init+0x25a>
 800cce2:	2307      	movs	r3, #7
 800cce4:	e025      	b.n	800cd32 <HAL_GPIO_Init+0x25a>
 800cce6:	2306      	movs	r3, #6
 800cce8:	e023      	b.n	800cd32 <HAL_GPIO_Init+0x25a>
 800ccea:	2305      	movs	r3, #5
 800ccec:	e021      	b.n	800cd32 <HAL_GPIO_Init+0x25a>
 800ccee:	2304      	movs	r3, #4
 800ccf0:	e01f      	b.n	800cd32 <HAL_GPIO_Init+0x25a>
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e01d      	b.n	800cd32 <HAL_GPIO_Init+0x25a>
 800ccf6:	2302      	movs	r3, #2
 800ccf8:	e01b      	b.n	800cd32 <HAL_GPIO_Init+0x25a>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e019      	b.n	800cd32 <HAL_GPIO_Init+0x25a>
 800ccfe:	bf00      	nop
 800cd00:	58000080 	.word	0x58000080
 800cd04:	58024400 	.word	0x58024400
 800cd08:	58000400 	.word	0x58000400
 800cd0c:	58020000 	.word	0x58020000
 800cd10:	58020400 	.word	0x58020400
 800cd14:	58020800 	.word	0x58020800
 800cd18:	58020c00 	.word	0x58020c00
 800cd1c:	58021000 	.word	0x58021000
 800cd20:	58021400 	.word	0x58021400
 800cd24:	58021800 	.word	0x58021800
 800cd28:	58021c00 	.word	0x58021c00
 800cd2c:	58022400 	.word	0x58022400
 800cd30:	2300      	movs	r3, #0
 800cd32:	69fa      	ldr	r2, [r7, #28]
 800cd34:	f002 0203 	and.w	r2, r2, #3
 800cd38:	0092      	lsls	r2, r2, #2
 800cd3a:	4093      	lsls	r3, r2
 800cd3c:	69ba      	ldr	r2, [r7, #24]
 800cd3e:	4313      	orrs	r3, r2
 800cd40:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cd42:	4938      	ldr	r1, [pc, #224]	; (800ce24 <HAL_GPIO_Init+0x34c>)
 800cd44:	69fb      	ldr	r3, [r7, #28]
 800cd46:	089b      	lsrs	r3, r3, #2
 800cd48:	3302      	adds	r3, #2
 800cd4a:	69ba      	ldr	r2, [r7, #24]
 800cd4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cd50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	43db      	mvns	r3, r3
 800cd5c:	69ba      	ldr	r2, [r7, #24]
 800cd5e:	4013      	ands	r3, r2
 800cd60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	685b      	ldr	r3, [r3, #4]
 800cd66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d003      	beq.n	800cd76 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800cd6e:	69ba      	ldr	r2, [r7, #24]
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	4313      	orrs	r3, r2
 800cd74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800cd76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd7a:	69bb      	ldr	r3, [r7, #24]
 800cd7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800cd7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	43db      	mvns	r3, r3
 800cd8a:	69ba      	ldr	r2, [r7, #24]
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d003      	beq.n	800cda4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800cd9c:	69ba      	ldr	r2, [r7, #24]
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	4313      	orrs	r3, r2
 800cda2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800cda4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cdb2:	693b      	ldr	r3, [r7, #16]
 800cdb4:	43db      	mvns	r3, r3
 800cdb6:	69ba      	ldr	r2, [r7, #24]
 800cdb8:	4013      	ands	r3, r2
 800cdba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d003      	beq.n	800cdd0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800cdc8:	69ba      	ldr	r2, [r7, #24]
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	69ba      	ldr	r2, [r7, #24]
 800cdd4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	43db      	mvns	r3, r3
 800cde0:	69ba      	ldr	r2, [r7, #24]
 800cde2:	4013      	ands	r3, r2
 800cde4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d003      	beq.n	800cdfa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800cdf2:	69ba      	ldr	r2, [r7, #24]
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	69ba      	ldr	r2, [r7, #24]
 800cdfe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	3301      	adds	r3, #1
 800ce04:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	f47f ae6b 	bne.w	800caec <HAL_GPIO_Init+0x14>
  }
}
 800ce16:	bf00      	nop
 800ce18:	bf00      	nop
 800ce1a:	3724      	adds	r7, #36	; 0x24
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr
 800ce24:	58000400 	.word	0x58000400

0800ce28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	460b      	mov	r3, r1
 800ce32:	807b      	strh	r3, [r7, #2]
 800ce34:	4613      	mov	r3, r2
 800ce36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ce38:	787b      	ldrb	r3, [r7, #1]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d003      	beq.n	800ce46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ce3e:	887a      	ldrh	r2, [r7, #2]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ce44:	e003      	b.n	800ce4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ce46:	887b      	ldrh	r3, [r7, #2]
 800ce48:	041a      	lsls	r2, r3, #16
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	619a      	str	r2, [r3, #24]
}
 800ce4e:	bf00      	nop
 800ce50:	370c      	adds	r7, #12
 800ce52:	46bd      	mov	sp, r7
 800ce54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce58:	4770      	bx	lr

0800ce5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ce5a:	b480      	push	{r7}
 800ce5c:	b085      	sub	sp, #20
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	6078      	str	r0, [r7, #4]
 800ce62:	460b      	mov	r3, r1
 800ce64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	695b      	ldr	r3, [r3, #20]
 800ce6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ce6c:	887a      	ldrh	r2, [r7, #2]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	4013      	ands	r3, r2
 800ce72:	041a      	lsls	r2, r3, #16
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	43d9      	mvns	r1, r3
 800ce78:	887b      	ldrh	r3, [r7, #2]
 800ce7a:	400b      	ands	r3, r1
 800ce7c:	431a      	orrs	r2, r3
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	619a      	str	r2, [r3, #24]
}
 800ce82:	bf00      	nop
 800ce84:	3714      	adds	r7, #20
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
	...

0800ce90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d101      	bne.n	800cea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e07f      	b.n	800cfa2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7f5 f836 	bl	8001f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2224      	movs	r2, #36	; 0x24
 800cec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	681a      	ldr	r2, [r3, #0]
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	f022 0201 	bic.w	r2, r2, #1
 800ced2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	685a      	ldr	r2, [r3, #4]
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cee0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	689a      	ldr	r2, [r3, #8]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cef0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	68db      	ldr	r3, [r3, #12]
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d107      	bne.n	800cf0a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	689a      	ldr	r2, [r3, #8]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf06:	609a      	str	r2, [r3, #8]
 800cf08:	e006      	b.n	800cf18 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	689a      	ldr	r2, [r3, #8]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cf16:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	2b02      	cmp	r3, #2
 800cf1e:	d104      	bne.n	800cf2a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf28:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	6859      	ldr	r1, [r3, #4]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681a      	ldr	r2, [r3, #0]
 800cf34:	4b1d      	ldr	r3, [pc, #116]	; (800cfac <HAL_I2C_Init+0x11c>)
 800cf36:	430b      	orrs	r3, r1
 800cf38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	68da      	ldr	r2, [r3, #12]
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	691a      	ldr	r2, [r3, #16]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	695b      	ldr	r3, [r3, #20]
 800cf52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	699b      	ldr	r3, [r3, #24]
 800cf5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	430a      	orrs	r2, r1
 800cf62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	69d9      	ldr	r1, [r3, #28]
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6a1a      	ldr	r2, [r3, #32]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	430a      	orrs	r2, r1
 800cf72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f042 0201 	orr.w	r2, r2, #1
 800cf82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2220      	movs	r2, #32
 800cf8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	02008000 	.word	0x02008000

0800cfb0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b088      	sub	sp, #32
 800cfb4:	af02      	add	r7, sp, #8
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	607a      	str	r2, [r7, #4]
 800cfba:	461a      	mov	r2, r3
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	817b      	strh	r3, [r7, #10]
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfca:	b2db      	uxtb	r3, r3
 800cfcc:	2b20      	cmp	r3, #32
 800cfce:	f040 80da 	bne.w	800d186 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d101      	bne.n	800cfe0 <HAL_I2C_Master_Transmit+0x30>
 800cfdc:	2302      	movs	r3, #2
 800cfde:	e0d3      	b.n	800d188 <HAL_I2C_Master_Transmit+0x1d8>
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cfe8:	f7fa faa2 	bl	8007530 <HAL_GetTick>
 800cfec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cfee:	697b      	ldr	r3, [r7, #20]
 800cff0:	9300      	str	r3, [sp, #0]
 800cff2:	2319      	movs	r3, #25
 800cff4:	2201      	movs	r2, #1
 800cff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f000 ffcf 	bl	800df9e <I2C_WaitOnFlagUntilTimeout>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d001      	beq.n	800d00a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e0be      	b.n	800d188 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2221      	movs	r2, #33	; 0x21
 800d00e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	2210      	movs	r2, #16
 800d016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2200      	movs	r2, #0
 800d01e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	687a      	ldr	r2, [r7, #4]
 800d024:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	893a      	ldrh	r2, [r7, #8]
 800d02a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	2200      	movs	r2, #0
 800d030:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d036:	b29b      	uxth	r3, r3
 800d038:	2bff      	cmp	r3, #255	; 0xff
 800d03a:	d90e      	bls.n	800d05a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	22ff      	movs	r2, #255	; 0xff
 800d040:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d046:	b2da      	uxtb	r2, r3
 800d048:	8979      	ldrh	r1, [r7, #10]
 800d04a:	4b51      	ldr	r3, [pc, #324]	; (800d190 <HAL_I2C_Master_Transmit+0x1e0>)
 800d04c:	9300      	str	r3, [sp, #0]
 800d04e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d052:	68f8      	ldr	r0, [r7, #12]
 800d054:	f001 f9c6 	bl	800e3e4 <I2C_TransferConfig>
 800d058:	e06c      	b.n	800d134 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d05e:	b29a      	uxth	r2, r3
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d068:	b2da      	uxtb	r2, r3
 800d06a:	8979      	ldrh	r1, [r7, #10]
 800d06c:	4b48      	ldr	r3, [pc, #288]	; (800d190 <HAL_I2C_Master_Transmit+0x1e0>)
 800d06e:	9300      	str	r3, [sp, #0]
 800d070:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d074:	68f8      	ldr	r0, [r7, #12]
 800d076:	f001 f9b5 	bl	800e3e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800d07a:	e05b      	b.n	800d134 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d07c:	697a      	ldr	r2, [r7, #20]
 800d07e:	6a39      	ldr	r1, [r7, #32]
 800d080:	68f8      	ldr	r0, [r7, #12]
 800d082:	f000 ffcc 	bl	800e01e <I2C_WaitOnTXISFlagUntilTimeout>
 800d086:	4603      	mov	r3, r0
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d001      	beq.n	800d090 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800d08c:	2301      	movs	r3, #1
 800d08e:	e07b      	b.n	800d188 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d094:	781a      	ldrb	r2, [r3, #0]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a0:	1c5a      	adds	r2, r3, #1
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0aa:	b29b      	uxth	r3, r3
 800d0ac:	3b01      	subs	r3, #1
 800d0ae:	b29a      	uxth	r2, r3
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0b8:	3b01      	subs	r3, #1
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d034      	beq.n	800d134 <HAL_I2C_Master_Transmit+0x184>
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d130      	bne.n	800d134 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	2180      	movs	r1, #128	; 0x80
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	f000 ff5e 	bl	800df9e <I2C_WaitOnFlagUntilTimeout>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d001      	beq.n	800d0ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	e04d      	b.n	800d188 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	2bff      	cmp	r3, #255	; 0xff
 800d0f4:	d90e      	bls.n	800d114 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	22ff      	movs	r2, #255	; 0xff
 800d0fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d100:	b2da      	uxtb	r2, r3
 800d102:	8979      	ldrh	r1, [r7, #10]
 800d104:	2300      	movs	r3, #0
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d10c:	68f8      	ldr	r0, [r7, #12]
 800d10e:	f001 f969 	bl	800e3e4 <I2C_TransferConfig>
 800d112:	e00f      	b.n	800d134 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d118:	b29a      	uxth	r2, r3
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d122:	b2da      	uxtb	r2, r3
 800d124:	8979      	ldrh	r1, [r7, #10]
 800d126:	2300      	movs	r3, #0
 800d128:	9300      	str	r3, [sp, #0]
 800d12a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f001 f958 	bl	800e3e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d138:	b29b      	uxth	r3, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d19e      	bne.n	800d07c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	6a39      	ldr	r1, [r7, #32]
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f000 ffab 	bl	800e09e <I2C_WaitOnSTOPFlagUntilTimeout>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d001      	beq.n	800d152 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	e01a      	b.n	800d188 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2220      	movs	r2, #32
 800d158:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6859      	ldr	r1, [r3, #4]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681a      	ldr	r2, [r3, #0]
 800d164:	4b0b      	ldr	r3, [pc, #44]	; (800d194 <HAL_I2C_Master_Transmit+0x1e4>)
 800d166:	400b      	ands	r3, r1
 800d168:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	2220      	movs	r2, #32
 800d16e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2200      	movs	r2, #0
 800d176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2200      	movs	r2, #0
 800d17e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d182:	2300      	movs	r3, #0
 800d184:	e000      	b.n	800d188 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800d186:	2302      	movs	r3, #2
  }
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	80002000 	.word	0x80002000
 800d194:	fe00e800 	.word	0xfe00e800

0800d198 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b088      	sub	sp, #32
 800d19c:	af02      	add	r7, sp, #8
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	607a      	str	r2, [r7, #4]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	460b      	mov	r3, r1
 800d1a6:	817b      	strh	r3, [r7, #10]
 800d1a8:	4613      	mov	r3, r2
 800d1aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b20      	cmp	r3, #32
 800d1b6:	f040 80db 	bne.w	800d370 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1c0:	2b01      	cmp	r3, #1
 800d1c2:	d101      	bne.n	800d1c8 <HAL_I2C_Master_Receive+0x30>
 800d1c4:	2302      	movs	r3, #2
 800d1c6:	e0d4      	b.n	800d372 <HAL_I2C_Master_Receive+0x1da>
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d1d0:	f7fa f9ae 	bl	8007530 <HAL_GetTick>
 800d1d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	2319      	movs	r3, #25
 800d1dc:	2201      	movs	r2, #1
 800d1de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d1e2:	68f8      	ldr	r0, [r7, #12]
 800d1e4:	f000 fedb 	bl	800df9e <I2C_WaitOnFlagUntilTimeout>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d001      	beq.n	800d1f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	e0bf      	b.n	800d372 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2222      	movs	r2, #34	; 0x22
 800d1f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2210      	movs	r2, #16
 800d1fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	687a      	ldr	r2, [r7, #4]
 800d20c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	893a      	ldrh	r2, [r7, #8]
 800d212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2200      	movs	r2, #0
 800d218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d21e:	b29b      	uxth	r3, r3
 800d220:	2bff      	cmp	r3, #255	; 0xff
 800d222:	d90e      	bls.n	800d242 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	22ff      	movs	r2, #255	; 0xff
 800d228:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d22e:	b2da      	uxtb	r2, r3
 800d230:	8979      	ldrh	r1, [r7, #10]
 800d232:	4b52      	ldr	r3, [pc, #328]	; (800d37c <HAL_I2C_Master_Receive+0x1e4>)
 800d234:	9300      	str	r3, [sp, #0]
 800d236:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f001 f8d2 	bl	800e3e4 <I2C_TransferConfig>
 800d240:	e06d      	b.n	800d31e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d246:	b29a      	uxth	r2, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d250:	b2da      	uxtb	r2, r3
 800d252:	8979      	ldrh	r1, [r7, #10]
 800d254:	4b49      	ldr	r3, [pc, #292]	; (800d37c <HAL_I2C_Master_Receive+0x1e4>)
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f001 f8c1 	bl	800e3e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800d262:	e05c      	b.n	800d31e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	6a39      	ldr	r1, [r7, #32]
 800d268:	68f8      	ldr	r0, [r7, #12]
 800d26a:	f000 ff55 	bl	800e118 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d001      	beq.n	800d278 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	e07c      	b.n	800d372 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d282:	b2d2      	uxtb	r2, r2
 800d284:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d28a:	1c5a      	adds	r2, r3, #1
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d294:	3b01      	subs	r3, #1
 800d296:	b29a      	uxth	r2, r3
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	3b01      	subs	r3, #1
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d034      	beq.n	800d31e <HAL_I2C_Master_Receive+0x186>
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d130      	bne.n	800d31e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d2bc:	697b      	ldr	r3, [r7, #20]
 800d2be:	9300      	str	r3, [sp, #0]
 800d2c0:	6a3b      	ldr	r3, [r7, #32]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	2180      	movs	r1, #128	; 0x80
 800d2c6:	68f8      	ldr	r0, [r7, #12]
 800d2c8:	f000 fe69 	bl	800df9e <I2C_WaitOnFlagUntilTimeout>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d001      	beq.n	800d2d6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e04d      	b.n	800d372 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2da:	b29b      	uxth	r3, r3
 800d2dc:	2bff      	cmp	r3, #255	; 0xff
 800d2de:	d90e      	bls.n	800d2fe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	22ff      	movs	r2, #255	; 0xff
 800d2e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2ea:	b2da      	uxtb	r2, r3
 800d2ec:	8979      	ldrh	r1, [r7, #10]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f001 f874 	bl	800e3e4 <I2C_TransferConfig>
 800d2fc:	e00f      	b.n	800d31e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d302:	b29a      	uxth	r2, r3
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d30c:	b2da      	uxtb	r2, r3
 800d30e:	8979      	ldrh	r1, [r7, #10]
 800d310:	2300      	movs	r3, #0
 800d312:	9300      	str	r3, [sp, #0]
 800d314:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d318:	68f8      	ldr	r0, [r7, #12]
 800d31a:	f001 f863 	bl	800e3e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d322:	b29b      	uxth	r3, r3
 800d324:	2b00      	cmp	r3, #0
 800d326:	d19d      	bne.n	800d264 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d328:	697a      	ldr	r2, [r7, #20]
 800d32a:	6a39      	ldr	r1, [r7, #32]
 800d32c:	68f8      	ldr	r0, [r7, #12]
 800d32e:	f000 feb6 	bl	800e09e <I2C_WaitOnSTOPFlagUntilTimeout>
 800d332:	4603      	mov	r3, r0
 800d334:	2b00      	cmp	r3, #0
 800d336:	d001      	beq.n	800d33c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	e01a      	b.n	800d372 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2220      	movs	r2, #32
 800d342:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	6859      	ldr	r1, [r3, #4]
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	4b0c      	ldr	r3, [pc, #48]	; (800d380 <HAL_I2C_Master_Receive+0x1e8>)
 800d350:	400b      	ands	r3, r1
 800d352:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2220      	movs	r2, #32
 800d358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d36c:	2300      	movs	r3, #0
 800d36e:	e000      	b.n	800d372 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800d370:	2302      	movs	r3, #2
  }
}
 800d372:	4618      	mov	r0, r3
 800d374:	3718      	adds	r7, #24
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	80002400 	.word	0x80002400
 800d380:	fe00e800 	.word	0xfe00e800

0800d384 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b086      	sub	sp, #24
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	699b      	ldr	r3, [r3, #24]
 800d392:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	0a1b      	lsrs	r3, r3, #8
 800d3a0:	f003 0301 	and.w	r3, r3, #1
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d010      	beq.n	800d3ca <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	09db      	lsrs	r3, r3, #7
 800d3ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00a      	beq.n	800d3ca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3b8:	f043 0201 	orr.w	r2, r3, #1
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3c8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	0a9b      	lsrs	r3, r3, #10
 800d3ce:	f003 0301 	and.w	r3, r3, #1
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d010      	beq.n	800d3f8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	09db      	lsrs	r3, r3, #7
 800d3da:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d00a      	beq.n	800d3f8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3e6:	f043 0208 	orr.w	r2, r3, #8
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d3f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	0a5b      	lsrs	r3, r3, #9
 800d3fc:	f003 0301 	and.w	r3, r3, #1
 800d400:	2b00      	cmp	r3, #0
 800d402:	d010      	beq.n	800d426 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	09db      	lsrs	r3, r3, #7
 800d408:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00a      	beq.n	800d426 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d414:	f043 0202 	orr.w	r2, r3, #2
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d424:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d42a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f003 030b 	and.w	r3, r3, #11
 800d432:	2b00      	cmp	r3, #0
 800d434:	d003      	beq.n	800d43e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800d436:	68f9      	ldr	r1, [r7, #12]
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 fc77 	bl	800dd2c <I2C_ITError>
  }
}
 800d43e:	bf00      	nop
 800d440:	3718      	adds	r7, #24
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d446:	b480      	push	{r7}
 800d448:	b083      	sub	sp, #12
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d44e:	bf00      	nop
 800d450:	370c      	adds	r7, #12
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr

0800d45a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d45a:	b480      	push	{r7}
 800d45c:	b083      	sub	sp, #12
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d462:	bf00      	nop
 800d464:	370c      	adds	r7, #12
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr

0800d46e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d46e:	b480      	push	{r7}
 800d470:	b083      	sub	sp, #12
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
 800d476:	460b      	mov	r3, r1
 800d478:	70fb      	strb	r3, [r7, #3]
 800d47a:	4613      	mov	r3, r2
 800d47c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d47e:	bf00      	nop
 800d480:	370c      	adds	r7, #12
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr

0800d48a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d48a:	b480      	push	{r7}
 800d48c:	b083      	sub	sp, #12
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800d492:	bf00      	nop
 800d494:	370c      	adds	r7, #12
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr

0800d49e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d49e:	b480      	push	{r7}
 800d4a0:	b083      	sub	sp, #12
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d4a6:	bf00      	nop
 800d4a8:	370c      	adds	r7, #12
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr

0800d4b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d4b2:	b480      	push	{r7}
 800d4b4:	b083      	sub	sp, #12
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d4ba:	bf00      	nop
 800d4bc:	370c      	adds	r7, #12
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b086      	sub	sp, #24
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	60f8      	str	r0, [r7, #12]
 800d4ce:	60b9      	str	r1, [r7, #8]
 800d4d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d101      	bne.n	800d4ea <I2C_Slave_ISR_IT+0x24>
 800d4e6:	2302      	movs	r3, #2
 800d4e8:	e0ec      	b.n	800d6c4 <I2C_Slave_ISR_IT+0x1fe>
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	095b      	lsrs	r3, r3, #5
 800d4f6:	f003 0301 	and.w	r3, r3, #1
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d009      	beq.n	800d512 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	095b      	lsrs	r3, r3, #5
 800d502:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d506:	2b00      	cmp	r3, #0
 800d508:	d003      	beq.n	800d512 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800d50a:	6939      	ldr	r1, [r7, #16]
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f000 f9bf 	bl	800d890 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d512:	693b      	ldr	r3, [r7, #16]
 800d514:	091b      	lsrs	r3, r3, #4
 800d516:	f003 0301 	and.w	r3, r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d04d      	beq.n	800d5ba <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	091b      	lsrs	r3, r3, #4
 800d522:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d526:	2b00      	cmp	r3, #0
 800d528:	d047      	beq.n	800d5ba <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d52e:	b29b      	uxth	r3, r3
 800d530:	2b00      	cmp	r3, #0
 800d532:	d128      	bne.n	800d586 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	2b28      	cmp	r3, #40	; 0x28
 800d53e:	d108      	bne.n	800d552 <I2C_Slave_ISR_IT+0x8c>
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d546:	d104      	bne.n	800d552 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d548:	6939      	ldr	r1, [r7, #16]
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f000 fb98 	bl	800dc80 <I2C_ITListenCplt>
 800d550:	e032      	b.n	800d5b8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	2b29      	cmp	r3, #41	; 0x29
 800d55c:	d10e      	bne.n	800d57c <I2C_Slave_ISR_IT+0xb6>
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d564:	d00a      	beq.n	800d57c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2210      	movs	r2, #16
 800d56c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f000 fcd3 	bl	800df1a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d574:	68f8      	ldr	r0, [r7, #12]
 800d576:	f000 f92d 	bl	800d7d4 <I2C_ITSlaveSeqCplt>
 800d57a:	e01d      	b.n	800d5b8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2210      	movs	r2, #16
 800d582:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800d584:	e096      	b.n	800d6b4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2210      	movs	r2, #16
 800d58c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d592:	f043 0204 	orr.w	r2, r3, #4
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d004      	beq.n	800d5aa <I2C_Slave_ISR_IT+0xe4>
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d5a6:	f040 8085 	bne.w	800d6b4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f000 fbbb 	bl	800dd2c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d5b6:	e07d      	b.n	800d6b4 <I2C_Slave_ISR_IT+0x1ee>
 800d5b8:	e07c      	b.n	800d6b4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	089b      	lsrs	r3, r3, #2
 800d5be:	f003 0301 	and.w	r3, r3, #1
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d030      	beq.n	800d628 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	089b      	lsrs	r3, r3, #2
 800d5ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d02a      	beq.n	800d628 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d018      	beq.n	800d60e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5e6:	b2d2      	uxtb	r2, r2
 800d5e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ee:	1c5a      	adds	r2, r3, #1
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	b29a      	uxth	r2, r3
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d604:	b29b      	uxth	r3, r3
 800d606:	3b01      	subs	r3, #1
 800d608:	b29a      	uxth	r2, r3
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d612:	b29b      	uxth	r3, r3
 800d614:	2b00      	cmp	r3, #0
 800d616:	d14f      	bne.n	800d6b8 <I2C_Slave_ISR_IT+0x1f2>
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d61e:	d04b      	beq.n	800d6b8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f000 f8d7 	bl	800d7d4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800d626:	e047      	b.n	800d6b8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	08db      	lsrs	r3, r3, #3
 800d62c:	f003 0301 	and.w	r3, r3, #1
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00a      	beq.n	800d64a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	08db      	lsrs	r3, r3, #3
 800d638:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d004      	beq.n	800d64a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800d640:	6939      	ldr	r1, [r7, #16]
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f000 f842 	bl	800d6cc <I2C_ITAddrCplt>
 800d648:	e037      	b.n	800d6ba <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	085b      	lsrs	r3, r3, #1
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d031      	beq.n	800d6ba <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	085b      	lsrs	r3, r3, #1
 800d65a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d02b      	beq.n	800d6ba <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d666:	b29b      	uxth	r3, r3
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d018      	beq.n	800d69e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d670:	781a      	ldrb	r2, [r3, #0]
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d67c:	1c5a      	adds	r2, r3, #1
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d686:	b29b      	uxth	r3, r3
 800d688:	3b01      	subs	r3, #1
 800d68a:	b29a      	uxth	r2, r3
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d694:	3b01      	subs	r3, #1
 800d696:	b29a      	uxth	r2, r3
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	851a      	strh	r2, [r3, #40]	; 0x28
 800d69c:	e00d      	b.n	800d6ba <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d6a4:	d002      	beq.n	800d6ac <I2C_Slave_ISR_IT+0x1e6>
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d106      	bne.n	800d6ba <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d6ac:	68f8      	ldr	r0, [r7, #12]
 800d6ae:	f000 f891 	bl	800d7d4 <I2C_ITSlaveSeqCplt>
 800d6b2:	e002      	b.n	800d6ba <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800d6b4:	bf00      	nop
 800d6b6:	e000      	b.n	800d6ba <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800d6b8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2200      	movs	r2, #0
 800d6be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d6c2:	2300      	movs	r3, #0
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	3718      	adds	r7, #24
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}

0800d6cc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6dc:	b2db      	uxtb	r3, r3
 800d6de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d6e2:	2b28      	cmp	r3, #40	; 0x28
 800d6e4:	d16a      	bne.n	800d7bc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	699b      	ldr	r3, [r3, #24]
 800d6ec:	0c1b      	lsrs	r3, r3, #16
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	f003 0301 	and.w	r3, r3, #1
 800d6f4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	699b      	ldr	r3, [r3, #24]
 800d6fc:	0c1b      	lsrs	r3, r3, #16
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d704:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	689b      	ldr	r3, [r3, #8]
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d712:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	68db      	ldr	r3, [r3, #12]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d720:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	2b02      	cmp	r3, #2
 800d728:	d138      	bne.n	800d79c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800d72a:	897b      	ldrh	r3, [r7, #10]
 800d72c:	09db      	lsrs	r3, r3, #7
 800d72e:	b29a      	uxth	r2, r3
 800d730:	89bb      	ldrh	r3, [r7, #12]
 800d732:	4053      	eors	r3, r2
 800d734:	b29b      	uxth	r3, r3
 800d736:	f003 0306 	and.w	r3, r3, #6
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d11c      	bne.n	800d778 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800d73e:	897b      	ldrh	r3, [r7, #10]
 800d740:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d746:	1c5a      	adds	r2, r3, #1
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d750:	2b02      	cmp	r3, #2
 800d752:	d13b      	bne.n	800d7cc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2208      	movs	r2, #8
 800d760:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d76a:	89ba      	ldrh	r2, [r7, #12]
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
 800d76e:	4619      	mov	r1, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7ff fe7c 	bl	800d46e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d776:	e029      	b.n	800d7cc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800d778:	893b      	ldrh	r3, [r7, #8]
 800d77a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d77c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fe61 	bl	800e448 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	2200      	movs	r2, #0
 800d78a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d78e:	89ba      	ldrh	r2, [r7, #12]
 800d790:	7bfb      	ldrb	r3, [r7, #15]
 800d792:	4619      	mov	r1, r3
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f7ff fe6a 	bl	800d46e <HAL_I2C_AddrCallback>
}
 800d79a:	e017      	b.n	800d7cc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d79c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 fe51 	bl	800e448 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d7ae:	89ba      	ldrh	r2, [r7, #12]
 800d7b0:	7bfb      	ldrb	r3, [r7, #15]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f7ff fe5a 	bl	800d46e <HAL_I2C_AddrCallback>
}
 800d7ba:	e007      	b.n	800d7cc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2208      	movs	r2, #8
 800d7c2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800d7cc:	bf00      	nop
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	0b9b      	lsrs	r3, r3, #14
 800d7f0:	f003 0301 	and.w	r3, r3, #1
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d008      	beq.n	800d80a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d806:	601a      	str	r2, [r3, #0]
 800d808:	e00d      	b.n	800d826 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	0bdb      	lsrs	r3, r3, #15
 800d80e:	f003 0301 	and.w	r3, r3, #1
 800d812:	2b00      	cmp	r3, #0
 800d814:	d007      	beq.n	800d826 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	681a      	ldr	r2, [r3, #0]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d824:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	2b29      	cmp	r3, #41	; 0x29
 800d830:	d112      	bne.n	800d858 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2228      	movs	r2, #40	; 0x28
 800d836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2221      	movs	r2, #33	; 0x21
 800d83e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d840:	2101      	movs	r1, #1
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 fe00 	bl	800e448 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2200      	movs	r2, #0
 800d84c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f7ff fdf8 	bl	800d446 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d856:	e017      	b.n	800d888 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	2b2a      	cmp	r3, #42	; 0x2a
 800d862:	d111      	bne.n	800d888 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2228      	movs	r2, #40	; 0x28
 800d868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2222      	movs	r2, #34	; 0x22
 800d870:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d872:	2102      	movs	r1, #2
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fde7 	bl	800e448 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f7ff fde9 	bl	800d45a <HAL_I2C_SlaveRxCpltCallback>
}
 800d888:	bf00      	nop
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8ac:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2220      	movs	r2, #32
 800d8b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d8b6:	7bfb      	ldrb	r3, [r7, #15]
 800d8b8:	2b21      	cmp	r3, #33	; 0x21
 800d8ba:	d002      	beq.n	800d8c2 <I2C_ITSlaveCplt+0x32>
 800d8bc:	7bfb      	ldrb	r3, [r7, #15]
 800d8be:	2b29      	cmp	r3, #41	; 0x29
 800d8c0:	d108      	bne.n	800d8d4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800d8c2:	f248 0101 	movw	r1, #32769	; 0x8001
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f000 fdbe 	bl	800e448 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2221      	movs	r2, #33	; 0x21
 800d8d0:	631a      	str	r2, [r3, #48]	; 0x30
 800d8d2:	e00d      	b.n	800d8f0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	2b22      	cmp	r3, #34	; 0x22
 800d8d8:	d002      	beq.n	800d8e0 <I2C_ITSlaveCplt+0x50>
 800d8da:	7bfb      	ldrb	r3, [r7, #15]
 800d8dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d8de:	d107      	bne.n	800d8f0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800d8e0:	f248 0102 	movw	r1, #32770	; 0x8002
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 fdaf 	bl	800e448 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2222      	movs	r2, #34	; 0x22
 800d8ee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	685a      	ldr	r2, [r3, #4]
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d8fe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	6859      	ldr	r1, [r3, #4]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	4b80      	ldr	r3, [pc, #512]	; (800db0c <I2C_ITSlaveCplt+0x27c>)
 800d90c:	400b      	ands	r3, r1
 800d90e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 fb02 	bl	800df1a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	0b9b      	lsrs	r3, r3, #14
 800d91a:	f003 0301 	and.w	r3, r3, #1
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d07a      	beq.n	800da18 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d930:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d936:	2b00      	cmp	r3, #0
 800d938:	f000 8111 	beq.w	800db5e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a73      	ldr	r2, [pc, #460]	; (800db10 <I2C_ITSlaveCplt+0x280>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d059      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	4a71      	ldr	r2, [pc, #452]	; (800db14 <I2C_ITSlaveCplt+0x284>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d053      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a6f      	ldr	r2, [pc, #444]	; (800db18 <I2C_ITSlaveCplt+0x288>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d04d      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4a6d      	ldr	r2, [pc, #436]	; (800db1c <I2C_ITSlaveCplt+0x28c>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d047      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a6b      	ldr	r2, [pc, #428]	; (800db20 <I2C_ITSlaveCplt+0x290>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d041      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a69      	ldr	r2, [pc, #420]	; (800db24 <I2C_ITSlaveCplt+0x294>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d03b      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a67      	ldr	r2, [pc, #412]	; (800db28 <I2C_ITSlaveCplt+0x298>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d035      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a65      	ldr	r2, [pc, #404]	; (800db2c <I2C_ITSlaveCplt+0x29c>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d02f      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a63      	ldr	r2, [pc, #396]	; (800db30 <I2C_ITSlaveCplt+0x2a0>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d029      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a61      	ldr	r2, [pc, #388]	; (800db34 <I2C_ITSlaveCplt+0x2a4>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d023      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4a5f      	ldr	r2, [pc, #380]	; (800db38 <I2C_ITSlaveCplt+0x2a8>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d01d      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a5d      	ldr	r2, [pc, #372]	; (800db3c <I2C_ITSlaveCplt+0x2ac>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d017      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4a5b      	ldr	r2, [pc, #364]	; (800db40 <I2C_ITSlaveCplt+0x2b0>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d011      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a59      	ldr	r2, [pc, #356]	; (800db44 <I2C_ITSlaveCplt+0x2b4>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d00b      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a57      	ldr	r2, [pc, #348]	; (800db48 <I2C_ITSlaveCplt+0x2b8>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d005      	beq.n	800d9fc <I2C_ITSlaveCplt+0x16c>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a55      	ldr	r2, [pc, #340]	; (800db4c <I2C_ITSlaveCplt+0x2bc>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d105      	bne.n	800da08 <I2C_ITSlaveCplt+0x178>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	685b      	ldr	r3, [r3, #4]
 800da04:	b29b      	uxth	r3, r3
 800da06:	e004      	b.n	800da12 <I2C_ITSlaveCplt+0x182>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	685b      	ldr	r3, [r3, #4]
 800da10:	b29b      	uxth	r3, r3
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	8553      	strh	r3, [r2, #42]	; 0x2a
 800da16:	e0a2      	b.n	800db5e <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	0bdb      	lsrs	r3, r3, #15
 800da1c:	f003 0301 	and.w	r3, r3, #1
 800da20:	2b00      	cmp	r3, #0
 800da22:	f000 809c 	beq.w	800db5e <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800da34:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	f000 808f 	beq.w	800db5e <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a32      	ldr	r2, [pc, #200]	; (800db10 <I2C_ITSlaveCplt+0x280>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d059      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	4a30      	ldr	r2, [pc, #192]	; (800db14 <I2C_ITSlaveCplt+0x284>)
 800da54:	4293      	cmp	r3, r2
 800da56:	d053      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a2e      	ldr	r2, [pc, #184]	; (800db18 <I2C_ITSlaveCplt+0x288>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d04d      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a2c      	ldr	r2, [pc, #176]	; (800db1c <I2C_ITSlaveCplt+0x28c>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d047      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a2a      	ldr	r2, [pc, #168]	; (800db20 <I2C_ITSlaveCplt+0x290>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d041      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a28      	ldr	r2, [pc, #160]	; (800db24 <I2C_ITSlaveCplt+0x294>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d03b      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a26      	ldr	r2, [pc, #152]	; (800db28 <I2C_ITSlaveCplt+0x298>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d035      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a24      	ldr	r2, [pc, #144]	; (800db2c <I2C_ITSlaveCplt+0x29c>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d02f      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a22      	ldr	r2, [pc, #136]	; (800db30 <I2C_ITSlaveCplt+0x2a0>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d029      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a20      	ldr	r2, [pc, #128]	; (800db34 <I2C_ITSlaveCplt+0x2a4>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d023      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a1e      	ldr	r2, [pc, #120]	; (800db38 <I2C_ITSlaveCplt+0x2a8>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d01d      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a1c      	ldr	r2, [pc, #112]	; (800db3c <I2C_ITSlaveCplt+0x2ac>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d017      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a1a      	ldr	r2, [pc, #104]	; (800db40 <I2C_ITSlaveCplt+0x2b0>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d011      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a18      	ldr	r2, [pc, #96]	; (800db44 <I2C_ITSlaveCplt+0x2b4>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d00b      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a16      	ldr	r2, [pc, #88]	; (800db48 <I2C_ITSlaveCplt+0x2b8>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d005      	beq.n	800db00 <I2C_ITSlaveCplt+0x270>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4a14      	ldr	r2, [pc, #80]	; (800db4c <I2C_ITSlaveCplt+0x2bc>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d127      	bne.n	800db50 <I2C_ITSlaveCplt+0x2c0>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	685b      	ldr	r3, [r3, #4]
 800db08:	b29b      	uxth	r3, r3
 800db0a:	e026      	b.n	800db5a <I2C_ITSlaveCplt+0x2ca>
 800db0c:	fe00e800 	.word	0xfe00e800
 800db10:	40020010 	.word	0x40020010
 800db14:	40020028 	.word	0x40020028
 800db18:	40020040 	.word	0x40020040
 800db1c:	40020058 	.word	0x40020058
 800db20:	40020070 	.word	0x40020070
 800db24:	40020088 	.word	0x40020088
 800db28:	400200a0 	.word	0x400200a0
 800db2c:	400200b8 	.word	0x400200b8
 800db30:	40020410 	.word	0x40020410
 800db34:	40020428 	.word	0x40020428
 800db38:	40020440 	.word	0x40020440
 800db3c:	40020458 	.word	0x40020458
 800db40:	40020470 	.word	0x40020470
 800db44:	40020488 	.word	0x40020488
 800db48:	400204a0 	.word	0x400204a0
 800db4c:	400204b8 	.word	0x400204b8
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	685b      	ldr	r3, [r3, #4]
 800db58:	b29b      	uxth	r3, r3
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	089b      	lsrs	r3, r3, #2
 800db62:	f003 0301 	and.w	r3, r3, #1
 800db66:	2b00      	cmp	r3, #0
 800db68:	d020      	beq.n	800dbac <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	f023 0304 	bic.w	r3, r3, #4
 800db70:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db7c:	b2d2      	uxtb	r2, r2
 800db7e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db84:	1c5a      	adds	r2, r3, #1
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00c      	beq.n	800dbac <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db96:	3b01      	subs	r3, #1
 800db98:	b29a      	uxth	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	3b01      	subs	r3, #1
 800dba6:	b29a      	uxth	r2, r3
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d005      	beq.n	800dbc2 <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbba:	f043 0204 	orr.w	r2, r3, #4
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d010      	beq.n	800dbfa <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbdc:	4619      	mov	r1, r3
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f000 f8a4 	bl	800dd2c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	2b28      	cmp	r3, #40	; 0x28
 800dbee:	d141      	bne.n	800dc74 <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800dbf0:	6979      	ldr	r1, [r7, #20]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 f844 	bl	800dc80 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800dbf8:	e03c      	b.n	800dc74 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dc02:	d014      	beq.n	800dc2e <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7ff fde5 	bl	800d7d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a1b      	ldr	r2, [pc, #108]	; (800dc7c <I2C_ITSlaveCplt+0x3ec>)
 800dc0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2220      	movs	r2, #32
 800dc14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f7ff fc2f 	bl	800d48a <HAL_I2C_ListenCpltCallback>
}
 800dc2c:	e022      	b.n	800dc74 <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	2b22      	cmp	r3, #34	; 0x22
 800dc38:	d10e      	bne.n	800dc58 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2220      	movs	r2, #32
 800dc3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f7ff fc02 	bl	800d45a <HAL_I2C_SlaveRxCpltCallback>
}
 800dc56:	e00d      	b.n	800dc74 <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2220      	movs	r2, #32
 800dc5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f7ff fbe9 	bl	800d446 <HAL_I2C_SlaveTxCpltCallback>
}
 800dc74:	bf00      	nop
 800dc76:	3718      	adds	r7, #24
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	bd80      	pop	{r7, pc}
 800dc7c:	ffff0000 	.word	0xffff0000

0800dc80 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	4a26      	ldr	r2, [pc, #152]	; (800dd28 <I2C_ITListenCplt+0xa8>)
 800dc8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	2220      	movs	r2, #32
 800dc9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	2200      	movs	r2, #0
 800dca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	089b      	lsrs	r3, r3, #2
 800dcb0:	f003 0301 	and.w	r3, r3, #1
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d022      	beq.n	800dcfe <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcc2:	b2d2      	uxtb	r2, r2
 800dcc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcca:	1c5a      	adds	r2, r3, #1
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d012      	beq.n	800dcfe <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	b29a      	uxth	r2, r3
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	3b01      	subs	r3, #1
 800dcec:	b29a      	uxth	r2, r3
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcf6:	f043 0204 	orr.w	r2, r3, #4
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dcfe:	f248 0103 	movw	r1, #32771	; 0x8003
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fba0 	bl	800e448 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	2210      	movs	r2, #16
 800dd0e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2200      	movs	r2, #0
 800dd14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f7ff fbb6 	bl	800d48a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800dd1e:	bf00      	nop
 800dd20:	3708      	adds	r7, #8
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}
 800dd26:	bf00      	nop
 800dd28:	ffff0000 	.word	0xffff0000

0800dd2c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a5d      	ldr	r2, [pc, #372]	; (800dec0 <I2C_ITError+0x194>)
 800dd4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	431a      	orrs	r2, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800dd5e:	7bfb      	ldrb	r3, [r7, #15]
 800dd60:	2b28      	cmp	r3, #40	; 0x28
 800dd62:	d005      	beq.n	800dd70 <I2C_ITError+0x44>
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
 800dd66:	2b29      	cmp	r3, #41	; 0x29
 800dd68:	d002      	beq.n	800dd70 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800dd6a:	7bfb      	ldrb	r3, [r7, #15]
 800dd6c:	2b2a      	cmp	r3, #42	; 0x2a
 800dd6e:	d10b      	bne.n	800dd88 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dd70:	2103      	movs	r1, #3
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f000 fb68 	bl	800e448 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2228      	movs	r2, #40	; 0x28
 800dd7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	4a50      	ldr	r2, [pc, #320]	; (800dec4 <I2C_ITError+0x198>)
 800dd84:	635a      	str	r2, [r3, #52]	; 0x34
 800dd86:	e011      	b.n	800ddac <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dd88:	f248 0103 	movw	r1, #32771	; 0x8003
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f000 fb5b 	bl	800e448 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd98:	b2db      	uxtb	r3, r3
 800dd9a:	2b60      	cmp	r3, #96	; 0x60
 800dd9c:	d003      	beq.n	800dda6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2220      	movs	r2, #32
 800dda2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	2200      	movs	r2, #0
 800ddaa:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddb0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d039      	beq.n	800de2e <I2C_ITError+0x102>
 800ddba:	68bb      	ldr	r3, [r7, #8]
 800ddbc:	2b11      	cmp	r3, #17
 800ddbe:	d002      	beq.n	800ddc6 <I2C_ITError+0x9a>
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	2b21      	cmp	r3, #33	; 0x21
 800ddc4:	d133      	bne.n	800de2e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ddd4:	d107      	bne.n	800dde6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dde4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddea:	4618      	mov	r0, r3
 800ddec:	f7fe fa7e 	bl	800c2ec <HAL_DMA_GetState>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b01      	cmp	r3, #1
 800ddf4:	d017      	beq.n	800de26 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddfa:	4a33      	ldr	r2, [pc, #204]	; (800dec8 <I2C_ITError+0x19c>)
 800ddfc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	2200      	movs	r2, #0
 800de02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0a:	4618      	mov	r0, r3
 800de0c:	f7fd f8fe 	bl	800b00c <HAL_DMA_Abort_IT>
 800de10:	4603      	mov	r3, r0
 800de12:	2b00      	cmp	r3, #0
 800de14:	d04d      	beq.n	800deb2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800de20:	4610      	mov	r0, r2
 800de22:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800de24:	e045      	b.n	800deb2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 f850 	bl	800decc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800de2c:	e041      	b.n	800deb2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de32:	2b00      	cmp	r3, #0
 800de34:	d039      	beq.n	800deaa <I2C_ITError+0x17e>
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	2b12      	cmp	r3, #18
 800de3a:	d002      	beq.n	800de42 <I2C_ITError+0x116>
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	2b22      	cmp	r3, #34	; 0x22
 800de40:	d133      	bne.n	800deaa <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de50:	d107      	bne.n	800de62 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	681a      	ldr	r2, [r3, #0]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800de60:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de66:	4618      	mov	r0, r3
 800de68:	f7fe fa40 	bl	800c2ec <HAL_DMA_GetState>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b01      	cmp	r3, #1
 800de70:	d017      	beq.n	800dea2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de76:	4a14      	ldr	r2, [pc, #80]	; (800dec8 <I2C_ITError+0x19c>)
 800de78:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2200      	movs	r2, #0
 800de7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de86:	4618      	mov	r0, r3
 800de88:	f7fd f8c0 	bl	800b00c <HAL_DMA_Abort_IT>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d011      	beq.n	800deb6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800de9c:	4610      	mov	r0, r2
 800de9e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dea0:	e009      	b.n	800deb6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 f812 	bl	800decc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dea8:	e005      	b.n	800deb6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f80e 	bl	800decc <I2C_TreatErrorCallback>
  }
}
 800deb0:	e002      	b.n	800deb8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800deb2:	bf00      	nop
 800deb4:	e000      	b.n	800deb8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800deb6:	bf00      	nop
}
 800deb8:	bf00      	nop
 800deba:	3710      	adds	r7, #16
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}
 800dec0:	ffff0000 	.word	0xffff0000
 800dec4:	0800d4c7 	.word	0x0800d4c7
 800dec8:	0800df63 	.word	0x0800df63

0800decc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b082      	sub	sp, #8
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	2b60      	cmp	r3, #96	; 0x60
 800dede:	d10e      	bne.n	800defe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2220      	movs	r2, #32
 800dee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f7ff fadb 	bl	800d4b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800defc:	e009      	b.n	800df12 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7ff fac6 	bl	800d49e <HAL_I2C_ErrorCallback>
}
 800df12:	bf00      	nop
 800df14:	3708      	adds	r7, #8
 800df16:	46bd      	mov	sp, r7
 800df18:	bd80      	pop	{r7, pc}

0800df1a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b083      	sub	sp, #12
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	699b      	ldr	r3, [r3, #24]
 800df28:	f003 0302 	and.w	r3, r3, #2
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	d103      	bne.n	800df38 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	2200      	movs	r2, #0
 800df36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	699b      	ldr	r3, [r3, #24]
 800df3e:	f003 0301 	and.w	r3, r3, #1
 800df42:	2b01      	cmp	r3, #1
 800df44:	d007      	beq.n	800df56 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	699a      	ldr	r2, [r3, #24]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f042 0201 	orr.w	r2, r2, #1
 800df54:	619a      	str	r2, [r3, #24]
  }
}
 800df56:	bf00      	nop
 800df58:	370c      	adds	r7, #12
 800df5a:	46bd      	mov	sp, r7
 800df5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df60:	4770      	bx	lr

0800df62 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800df62:	b580      	push	{r7, lr}
 800df64:	b084      	sub	sp, #16
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df74:	2b00      	cmp	r3, #0
 800df76:	d003      	beq.n	800df80 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df7c:	2200      	movs	r2, #0
 800df7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df84:	2b00      	cmp	r3, #0
 800df86:	d003      	beq.n	800df90 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df8c:	2200      	movs	r2, #0
 800df8e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f7ff ff9b 	bl	800decc <I2C_TreatErrorCallback>
}
 800df96:	bf00      	nop
 800df98:	3710      	adds	r7, #16
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}

0800df9e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800df9e:	b580      	push	{r7, lr}
 800dfa0:	b084      	sub	sp, #16
 800dfa2:	af00      	add	r7, sp, #0
 800dfa4:	60f8      	str	r0, [r7, #12]
 800dfa6:	60b9      	str	r1, [r7, #8]
 800dfa8:	603b      	str	r3, [r7, #0]
 800dfaa:	4613      	mov	r3, r2
 800dfac:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dfae:	e022      	b.n	800dff6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb6:	d01e      	beq.n	800dff6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dfb8:	f7f9 faba 	bl	8007530 <HAL_GetTick>
 800dfbc:	4602      	mov	r2, r0
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	1ad3      	subs	r3, r2, r3
 800dfc2:	683a      	ldr	r2, [r7, #0]
 800dfc4:	429a      	cmp	r2, r3
 800dfc6:	d302      	bcc.n	800dfce <I2C_WaitOnFlagUntilTimeout+0x30>
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d113      	bne.n	800dff6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfd2:	f043 0220 	orr.w	r2, r3, #32
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2220      	movs	r2, #32
 800dfde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	2200      	movs	r2, #0
 800dfee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800dff2:	2301      	movs	r3, #1
 800dff4:	e00f      	b.n	800e016 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	699a      	ldr	r2, [r3, #24]
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	4013      	ands	r3, r2
 800e000:	68ba      	ldr	r2, [r7, #8]
 800e002:	429a      	cmp	r2, r3
 800e004:	bf0c      	ite	eq
 800e006:	2301      	moveq	r3, #1
 800e008:	2300      	movne	r3, #0
 800e00a:	b2db      	uxtb	r3, r3
 800e00c:	461a      	mov	r2, r3
 800e00e:	79fb      	ldrb	r3, [r7, #7]
 800e010:	429a      	cmp	r2, r3
 800e012:	d0cd      	beq.n	800dfb0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b084      	sub	sp, #16
 800e022:	af00      	add	r7, sp, #0
 800e024:	60f8      	str	r0, [r7, #12]
 800e026:	60b9      	str	r1, [r7, #8]
 800e028:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e02a:	e02c      	b.n	800e086 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e02c:	687a      	ldr	r2, [r7, #4]
 800e02e:	68b9      	ldr	r1, [r7, #8]
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f000 f8eb 	bl	800e20c <I2C_IsErrorOccurred>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d001      	beq.n	800e040 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e03c:	2301      	movs	r3, #1
 800e03e:	e02a      	b.n	800e096 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e046:	d01e      	beq.n	800e086 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e048:	f7f9 fa72 	bl	8007530 <HAL_GetTick>
 800e04c:	4602      	mov	r2, r0
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	1ad3      	subs	r3, r2, r3
 800e052:	68ba      	ldr	r2, [r7, #8]
 800e054:	429a      	cmp	r2, r3
 800e056:	d302      	bcc.n	800e05e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d113      	bne.n	800e086 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e062:	f043 0220 	orr.w	r2, r3, #32
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2220      	movs	r2, #32
 800e06e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2200      	movs	r2, #0
 800e076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2200      	movs	r2, #0
 800e07e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e082:	2301      	movs	r3, #1
 800e084:	e007      	b.n	800e096 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	699b      	ldr	r3, [r3, #24]
 800e08c:	f003 0302 	and.w	r3, r3, #2
 800e090:	2b02      	cmp	r3, #2
 800e092:	d1cb      	bne.n	800e02c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e094:	2300      	movs	r3, #0
}
 800e096:	4618      	mov	r0, r3
 800e098:	3710      	adds	r7, #16
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}

0800e09e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e09e:	b580      	push	{r7, lr}
 800e0a0:	b084      	sub	sp, #16
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	60f8      	str	r0, [r7, #12]
 800e0a6:	60b9      	str	r1, [r7, #8]
 800e0a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e0aa:	e028      	b.n	800e0fe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	68b9      	ldr	r1, [r7, #8]
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	f000 f8ab 	bl	800e20c <I2C_IsErrorOccurred>
 800e0b6:	4603      	mov	r3, r0
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d001      	beq.n	800e0c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	e026      	b.n	800e10e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0c0:	f7f9 fa36 	bl	8007530 <HAL_GetTick>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	68ba      	ldr	r2, [r7, #8]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d302      	bcc.n	800e0d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d113      	bne.n	800e0fe <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0da:	f043 0220 	orr.w	r2, r3, #32
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2220      	movs	r2, #32
 800e0e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	e007      	b.n	800e10e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	699b      	ldr	r3, [r3, #24]
 800e104:	f003 0320 	and.w	r3, r3, #32
 800e108:	2b20      	cmp	r3, #32
 800e10a:	d1cf      	bne.n	800e0ac <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e10c:	2300      	movs	r3, #0
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
	...

0800e118 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	60f8      	str	r0, [r7, #12]
 800e120:	60b9      	str	r1, [r7, #8]
 800e122:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e124:	e064      	b.n	800e1f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e126:	687a      	ldr	r2, [r7, #4]
 800e128:	68b9      	ldr	r1, [r7, #8]
 800e12a:	68f8      	ldr	r0, [r7, #12]
 800e12c:	f000 f86e 	bl	800e20c <I2C_IsErrorOccurred>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d001      	beq.n	800e13a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e136:	2301      	movs	r3, #1
 800e138:	e062      	b.n	800e200 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	699b      	ldr	r3, [r3, #24]
 800e140:	f003 0320 	and.w	r3, r3, #32
 800e144:	2b20      	cmp	r3, #32
 800e146:	d138      	bne.n	800e1ba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	699b      	ldr	r3, [r3, #24]
 800e14e:	f003 0304 	and.w	r3, r3, #4
 800e152:	2b04      	cmp	r3, #4
 800e154:	d105      	bne.n	800e162 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d001      	beq.n	800e162 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800e15e:	2300      	movs	r3, #0
 800e160:	e04e      	b.n	800e200 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	699b      	ldr	r3, [r3, #24]
 800e168:	f003 0310 	and.w	r3, r3, #16
 800e16c:	2b10      	cmp	r3, #16
 800e16e:	d107      	bne.n	800e180 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	2210      	movs	r2, #16
 800e176:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2204      	movs	r2, #4
 800e17c:	645a      	str	r2, [r3, #68]	; 0x44
 800e17e:	e002      	b.n	800e186 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	2200      	movs	r2, #0
 800e184:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	2220      	movs	r2, #32
 800e18c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	6859      	ldr	r1, [r3, #4]
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	4b1b      	ldr	r3, [pc, #108]	; (800e208 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800e19a:	400b      	ands	r3, r1
 800e19c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	2220      	movs	r2, #32
 800e1a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	e022      	b.n	800e200 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1ba:	f7f9 f9b9 	bl	8007530 <HAL_GetTick>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	1ad3      	subs	r3, r2, r3
 800e1c4:	68ba      	ldr	r2, [r7, #8]
 800e1c6:	429a      	cmp	r2, r3
 800e1c8:	d302      	bcc.n	800e1d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d10f      	bne.n	800e1f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1d4:	f043 0220 	orr.w	r2, r3, #32
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	2220      	movs	r2, #32
 800e1e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	e007      	b.n	800e200 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	699b      	ldr	r3, [r3, #24]
 800e1f6:	f003 0304 	and.w	r3, r3, #4
 800e1fa:	2b04      	cmp	r3, #4
 800e1fc:	d193      	bne.n	800e126 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e1fe:	2300      	movs	r3, #0
}
 800e200:	4618      	mov	r0, r3
 800e202:	3710      	adds	r7, #16
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}
 800e208:	fe00e800 	.word	0xfe00e800

0800e20c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b08a      	sub	sp, #40	; 0x28
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e218:	2300      	movs	r3, #0
 800e21a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	699b      	ldr	r3, [r3, #24]
 800e224:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e226:	2300      	movs	r3, #0
 800e228:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e22e:	69bb      	ldr	r3, [r7, #24]
 800e230:	f003 0310 	and.w	r3, r3, #16
 800e234:	2b00      	cmp	r3, #0
 800e236:	d075      	beq.n	800e324 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	2210      	movs	r2, #16
 800e23e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e240:	e056      	b.n	800e2f0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e248:	d052      	beq.n	800e2f0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e24a:	f7f9 f971 	bl	8007530 <HAL_GetTick>
 800e24e:	4602      	mov	r2, r0
 800e250:	69fb      	ldr	r3, [r7, #28]
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	68ba      	ldr	r2, [r7, #8]
 800e256:	429a      	cmp	r2, r3
 800e258:	d302      	bcc.n	800e260 <I2C_IsErrorOccurred+0x54>
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d147      	bne.n	800e2f0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e26a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e272:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e27e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e282:	d12e      	bne.n	800e2e2 <I2C_IsErrorOccurred+0xd6>
 800e284:	697b      	ldr	r3, [r7, #20]
 800e286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e28a:	d02a      	beq.n	800e2e2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800e28c:	7cfb      	ldrb	r3, [r7, #19]
 800e28e:	2b20      	cmp	r3, #32
 800e290:	d027      	beq.n	800e2e2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	685a      	ldr	r2, [r3, #4]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e2a0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e2a2:	f7f9 f945 	bl	8007530 <HAL_GetTick>
 800e2a6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e2a8:	e01b      	b.n	800e2e2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e2aa:	f7f9 f941 	bl	8007530 <HAL_GetTick>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	1ad3      	subs	r3, r2, r3
 800e2b4:	2b19      	cmp	r3, #25
 800e2b6:	d914      	bls.n	800e2e2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2bc:	f043 0220 	orr.w	r2, r3, #32
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2220      	movs	r2, #32
 800e2c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800e2dc:	2301      	movs	r3, #1
 800e2de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	f003 0320 	and.w	r3, r3, #32
 800e2ec:	2b20      	cmp	r3, #32
 800e2ee:	d1dc      	bne.n	800e2aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	699b      	ldr	r3, [r3, #24]
 800e2f6:	f003 0320 	and.w	r3, r3, #32
 800e2fa:	2b20      	cmp	r3, #32
 800e2fc:	d003      	beq.n	800e306 <I2C_IsErrorOccurred+0xfa>
 800e2fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e302:	2b00      	cmp	r3, #0
 800e304:	d09d      	beq.n	800e242 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d103      	bne.n	800e316 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2220      	movs	r2, #32
 800e314:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e316:	6a3b      	ldr	r3, [r7, #32]
 800e318:	f043 0304 	orr.w	r3, r3, #4
 800e31c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	699b      	ldr	r3, [r3, #24]
 800e32a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e32c:	69bb      	ldr	r3, [r7, #24]
 800e32e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00b      	beq.n	800e34e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e336:	6a3b      	ldr	r3, [r7, #32]
 800e338:	f043 0301 	orr.w	r3, r3, #1
 800e33c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e346:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e348:	2301      	movs	r3, #1
 800e34a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e34e:	69bb      	ldr	r3, [r7, #24]
 800e350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00b      	beq.n	800e370 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e358:	6a3b      	ldr	r3, [r7, #32]
 800e35a:	f043 0308 	orr.w	r3, r3, #8
 800e35e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e368:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e36a:	2301      	movs	r3, #1
 800e36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e370:	69bb      	ldr	r3, [r7, #24]
 800e372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00b      	beq.n	800e392 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e37a:	6a3b      	ldr	r3, [r7, #32]
 800e37c:	f043 0302 	orr.w	r3, r3, #2
 800e380:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e38a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e38c:	2301      	movs	r3, #1
 800e38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800e392:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e396:	2b00      	cmp	r3, #0
 800e398:	d01c      	beq.n	800e3d4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e39a:	68f8      	ldr	r0, [r7, #12]
 800e39c:	f7ff fdbd 	bl	800df1a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	6859      	ldr	r1, [r3, #4]
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	681a      	ldr	r2, [r3, #0]
 800e3aa:	4b0d      	ldr	r3, [pc, #52]	; (800e3e0 <I2C_IsErrorOccurred+0x1d4>)
 800e3ac:	400b      	ands	r3, r1
 800e3ae:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3b4:	6a3b      	ldr	r3, [r7, #32]
 800e3b6:	431a      	orrs	r2, r3
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2220      	movs	r2, #32
 800e3c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800e3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3728      	adds	r7, #40	; 0x28
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	fe00e800 	.word	0xfe00e800

0800e3e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	b087      	sub	sp, #28
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	60f8      	str	r0, [r7, #12]
 800e3ec:	607b      	str	r3, [r7, #4]
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	817b      	strh	r3, [r7, #10]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e3f6:	897b      	ldrh	r3, [r7, #10]
 800e3f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e3fc:	7a7b      	ldrb	r3, [r7, #9]
 800e3fe:	041b      	lsls	r3, r3, #16
 800e400:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e404:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e40a:	6a3b      	ldr	r3, [r7, #32]
 800e40c:	4313      	orrs	r3, r2
 800e40e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e412:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	685a      	ldr	r2, [r3, #4]
 800e41a:	6a3b      	ldr	r3, [r7, #32]
 800e41c:	0d5b      	lsrs	r3, r3, #21
 800e41e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e422:	4b08      	ldr	r3, [pc, #32]	; (800e444 <I2C_TransferConfig+0x60>)
 800e424:	430b      	orrs	r3, r1
 800e426:	43db      	mvns	r3, r3
 800e428:	ea02 0103 	and.w	r1, r2, r3
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	697a      	ldr	r2, [r7, #20]
 800e432:	430a      	orrs	r2, r1
 800e434:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e436:	bf00      	nop
 800e438:	371c      	adds	r7, #28
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop
 800e444:	03ff63ff 	.word	0x03ff63ff

0800e448 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	460b      	mov	r3, r1
 800e452:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800e454:	2300      	movs	r3, #0
 800e456:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e458:	887b      	ldrh	r3, [r7, #2]
 800e45a:	f003 0301 	and.w	r3, r3, #1
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d00f      	beq.n	800e482 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800e468:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e470:	b2db      	uxtb	r3, r3
 800e472:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e476:	2b28      	cmp	r3, #40	; 0x28
 800e478:	d003      	beq.n	800e482 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800e480:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e482:	887b      	ldrh	r3, [r7, #2]
 800e484:	f003 0302 	and.w	r3, r3, #2
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d00f      	beq.n	800e4ac <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800e492:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e4a0:	2b28      	cmp	r3, #40	; 0x28
 800e4a2:	d003      	beq.n	800e4ac <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800e4aa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e4ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	da03      	bge.n	800e4bc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800e4ba:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e4bc:	887b      	ldrh	r3, [r7, #2]
 800e4be:	2b10      	cmp	r3, #16
 800e4c0:	d103      	bne.n	800e4ca <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800e4c8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e4ca:	887b      	ldrh	r3, [r7, #2]
 800e4cc:	2b20      	cmp	r3, #32
 800e4ce:	d103      	bne.n	800e4d8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f043 0320 	orr.w	r3, r3, #32
 800e4d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800e4d8:	887b      	ldrh	r3, [r7, #2]
 800e4da:	2b40      	cmp	r3, #64	; 0x40
 800e4dc:	d103      	bne.n	800e4e6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4e4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	6819      	ldr	r1, [r3, #0]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	43da      	mvns	r2, r3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	400a      	ands	r2, r1
 800e4f6:	601a      	str	r2, [r3, #0]
}
 800e4f8:	bf00      	nop
 800e4fa:	3714      	adds	r7, #20
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e502:	4770      	bx	lr

0800e504 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e504:	b480      	push	{r7}
 800e506:	b083      	sub	sp, #12
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e514:	b2db      	uxtb	r3, r3
 800e516:	2b20      	cmp	r3, #32
 800e518:	d138      	bne.n	800e58c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e520:	2b01      	cmp	r3, #1
 800e522:	d101      	bne.n	800e528 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e524:	2302      	movs	r3, #2
 800e526:	e032      	b.n	800e58e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2201      	movs	r2, #1
 800e52c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2224      	movs	r2, #36	; 0x24
 800e534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	f022 0201 	bic.w	r2, r2, #1
 800e546:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	681a      	ldr	r2, [r3, #0]
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e556:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	6819      	ldr	r1, [r3, #0]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	683a      	ldr	r2, [r7, #0]
 800e564:	430a      	orrs	r2, r1
 800e566:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	681a      	ldr	r2, [r3, #0]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	f042 0201 	orr.w	r2, r2, #1
 800e576:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2220      	movs	r2, #32
 800e57c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e588:	2300      	movs	r3, #0
 800e58a:	e000      	b.n	800e58e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e58c:	2302      	movs	r3, #2
  }
}
 800e58e:	4618      	mov	r0, r3
 800e590:	370c      	adds	r7, #12
 800e592:	46bd      	mov	sp, r7
 800e594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e598:	4770      	bx	lr

0800e59a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e59a:	b480      	push	{r7}
 800e59c:	b085      	sub	sp, #20
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
 800e5a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	2b20      	cmp	r3, #32
 800e5ae:	d139      	bne.n	800e624 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e5b6:	2b01      	cmp	r3, #1
 800e5b8:	d101      	bne.n	800e5be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e5ba:	2302      	movs	r3, #2
 800e5bc:	e033      	b.n	800e626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2201      	movs	r2, #1
 800e5c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2224      	movs	r2, #36	; 0x24
 800e5ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	f022 0201 	bic.w	r2, r2, #1
 800e5dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e5ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e5ee:	683b      	ldr	r3, [r7, #0]
 800e5f0:	021b      	lsls	r3, r3, #8
 800e5f2:	68fa      	ldr	r2, [r7, #12]
 800e5f4:	4313      	orrs	r3, r2
 800e5f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	68fa      	ldr	r2, [r7, #12]
 800e5fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f042 0201 	orr.w	r2, r2, #1
 800e60e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2220      	movs	r2, #32
 800e614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e620:	2300      	movs	r3, #0
 800e622:	e000      	b.n	800e626 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e624:	2302      	movs	r3, #2
  }
}
 800e626:	4618      	mov	r0, r3
 800e628:	3714      	adds	r7, #20
 800e62a:	46bd      	mov	sp, r7
 800e62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e630:	4770      	bx	lr
	...

0800e634 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800e63c:	4b19      	ldr	r3, [pc, #100]	; (800e6a4 <HAL_PWREx_ConfigSupply+0x70>)
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	f003 0304 	and.w	r3, r3, #4
 800e644:	2b04      	cmp	r3, #4
 800e646:	d00a      	beq.n	800e65e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e648:	4b16      	ldr	r3, [pc, #88]	; (800e6a4 <HAL_PWREx_ConfigSupply+0x70>)
 800e64a:	68db      	ldr	r3, [r3, #12]
 800e64c:	f003 0307 	and.w	r3, r3, #7
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	429a      	cmp	r2, r3
 800e654:	d001      	beq.n	800e65a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e656:	2301      	movs	r3, #1
 800e658:	e01f      	b.n	800e69a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e65a:	2300      	movs	r3, #0
 800e65c:	e01d      	b.n	800e69a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e65e:	4b11      	ldr	r3, [pc, #68]	; (800e6a4 <HAL_PWREx_ConfigSupply+0x70>)
 800e660:	68db      	ldr	r3, [r3, #12]
 800e662:	f023 0207 	bic.w	r2, r3, #7
 800e666:	490f      	ldr	r1, [pc, #60]	; (800e6a4 <HAL_PWREx_ConfigSupply+0x70>)
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	4313      	orrs	r3, r2
 800e66c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e66e:	f7f8 ff5f 	bl	8007530 <HAL_GetTick>
 800e672:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e674:	e009      	b.n	800e68a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e676:	f7f8 ff5b 	bl	8007530 <HAL_GetTick>
 800e67a:	4602      	mov	r2, r0
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	1ad3      	subs	r3, r2, r3
 800e680:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e684:	d901      	bls.n	800e68a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e686:	2301      	movs	r3, #1
 800e688:	e007      	b.n	800e69a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e68a:	4b06      	ldr	r3, [pc, #24]	; (800e6a4 <HAL_PWREx_ConfigSupply+0x70>)
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e696:	d1ee      	bne.n	800e676 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e698:	2300      	movs	r3, #0
}
 800e69a:	4618      	mov	r0, r3
 800e69c:	3710      	adds	r7, #16
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	58024800 	.word	0x58024800

0800e6a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08c      	sub	sp, #48	; 0x30
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d101      	bne.n	800e6ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e39d      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f003 0301 	and.w	r3, r3, #1
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	f000 8087 	beq.w	800e7d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e6c8:	4b88      	ldr	r3, [pc, #544]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e6ca:	691b      	ldr	r3, [r3, #16]
 800e6cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e6d2:	4b86      	ldr	r3, [pc, #536]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6da:	2b10      	cmp	r3, #16
 800e6dc:	d007      	beq.n	800e6ee <HAL_RCC_OscConfig+0x46>
 800e6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e0:	2b18      	cmp	r3, #24
 800e6e2:	d110      	bne.n	800e706 <HAL_RCC_OscConfig+0x5e>
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	f003 0303 	and.w	r3, r3, #3
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	d10b      	bne.n	800e706 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e6ee:	4b7f      	ldr	r3, [pc, #508]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d06c      	beq.n	800e7d4 <HAL_RCC_OscConfig+0x12c>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d168      	bne.n	800e7d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800e702:	2301      	movs	r3, #1
 800e704:	e377      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e70e:	d106      	bne.n	800e71e <HAL_RCC_OscConfig+0x76>
 800e710:	4b76      	ldr	r3, [pc, #472]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a75      	ldr	r2, [pc, #468]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e716:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e71a:	6013      	str	r3, [r2, #0]
 800e71c:	e02e      	b.n	800e77c <HAL_RCC_OscConfig+0xd4>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d10c      	bne.n	800e740 <HAL_RCC_OscConfig+0x98>
 800e726:	4b71      	ldr	r3, [pc, #452]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	4a70      	ldr	r2, [pc, #448]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e72c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e730:	6013      	str	r3, [r2, #0]
 800e732:	4b6e      	ldr	r3, [pc, #440]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a6d      	ldr	r2, [pc, #436]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e738:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e73c:	6013      	str	r3, [r2, #0]
 800e73e:	e01d      	b.n	800e77c <HAL_RCC_OscConfig+0xd4>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	685b      	ldr	r3, [r3, #4]
 800e744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e748:	d10c      	bne.n	800e764 <HAL_RCC_OscConfig+0xbc>
 800e74a:	4b68      	ldr	r3, [pc, #416]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4a67      	ldr	r2, [pc, #412]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e754:	6013      	str	r3, [r2, #0]
 800e756:	4b65      	ldr	r3, [pc, #404]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4a64      	ldr	r2, [pc, #400]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e75c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e760:	6013      	str	r3, [r2, #0]
 800e762:	e00b      	b.n	800e77c <HAL_RCC_OscConfig+0xd4>
 800e764:	4b61      	ldr	r3, [pc, #388]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	4a60      	ldr	r2, [pc, #384]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e76a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e76e:	6013      	str	r3, [r2, #0]
 800e770:	4b5e      	ldr	r3, [pc, #376]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	4a5d      	ldr	r2, [pc, #372]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e77a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d013      	beq.n	800e7ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e784:	f7f8 fed4 	bl	8007530 <HAL_GetTick>
 800e788:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e78a:	e008      	b.n	800e79e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e78c:	f7f8 fed0 	bl	8007530 <HAL_GetTick>
 800e790:	4602      	mov	r2, r0
 800e792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e794:	1ad3      	subs	r3, r2, r3
 800e796:	2b64      	cmp	r3, #100	; 0x64
 800e798:	d901      	bls.n	800e79e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800e79a:	2303      	movs	r3, #3
 800e79c:	e32b      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e79e:	4b53      	ldr	r3, [pc, #332]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d0f0      	beq.n	800e78c <HAL_RCC_OscConfig+0xe4>
 800e7aa:	e014      	b.n	800e7d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7ac:	f7f8 fec0 	bl	8007530 <HAL_GetTick>
 800e7b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e7b2:	e008      	b.n	800e7c6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e7b4:	f7f8 febc 	bl	8007530 <HAL_GetTick>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	2b64      	cmp	r3, #100	; 0x64
 800e7c0:	d901      	bls.n	800e7c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800e7c2:	2303      	movs	r3, #3
 800e7c4:	e317      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e7c6:	4b49      	ldr	r3, [pc, #292]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d1f0      	bne.n	800e7b4 <HAL_RCC_OscConfig+0x10c>
 800e7d2:	e000      	b.n	800e7d6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e7d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f003 0302 	and.w	r3, r3, #2
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	f000 808c 	beq.w	800e8fc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e7e4:	4b41      	ldr	r3, [pc, #260]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e7e6:	691b      	ldr	r3, [r3, #16]
 800e7e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e7ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e7ee:	4b3f      	ldr	r3, [pc, #252]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7f2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e7f4:	6a3b      	ldr	r3, [r7, #32]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d007      	beq.n	800e80a <HAL_RCC_OscConfig+0x162>
 800e7fa:	6a3b      	ldr	r3, [r7, #32]
 800e7fc:	2b18      	cmp	r3, #24
 800e7fe:	d137      	bne.n	800e870 <HAL_RCC_OscConfig+0x1c8>
 800e800:	69fb      	ldr	r3, [r7, #28]
 800e802:	f003 0303 	and.w	r3, r3, #3
 800e806:	2b00      	cmp	r3, #0
 800e808:	d132      	bne.n	800e870 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e80a:	4b38      	ldr	r3, [pc, #224]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f003 0304 	and.w	r3, r3, #4
 800e812:	2b00      	cmp	r3, #0
 800e814:	d005      	beq.n	800e822 <HAL_RCC_OscConfig+0x17a>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	68db      	ldr	r3, [r3, #12]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d101      	bne.n	800e822 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800e81e:	2301      	movs	r3, #1
 800e820:	e2e9      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e822:	4b32      	ldr	r3, [pc, #200]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f023 0219 	bic.w	r2, r3, #25
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	68db      	ldr	r3, [r3, #12]
 800e82e:	492f      	ldr	r1, [pc, #188]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e830:	4313      	orrs	r3, r2
 800e832:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e834:	f7f8 fe7c 	bl	8007530 <HAL_GetTick>
 800e838:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e83a:	e008      	b.n	800e84e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e83c:	f7f8 fe78 	bl	8007530 <HAL_GetTick>
 800e840:	4602      	mov	r2, r0
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	1ad3      	subs	r3, r2, r3
 800e846:	2b02      	cmp	r3, #2
 800e848:	d901      	bls.n	800e84e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800e84a:	2303      	movs	r3, #3
 800e84c:	e2d3      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e84e:	4b27      	ldr	r3, [pc, #156]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f003 0304 	and.w	r3, r3, #4
 800e856:	2b00      	cmp	r3, #0
 800e858:	d0f0      	beq.n	800e83c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e85a:	4b24      	ldr	r3, [pc, #144]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	691b      	ldr	r3, [r3, #16]
 800e866:	061b      	lsls	r3, r3, #24
 800e868:	4920      	ldr	r1, [pc, #128]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e86a:	4313      	orrs	r3, r2
 800e86c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e86e:	e045      	b.n	800e8fc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d026      	beq.n	800e8c6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e878:	4b1c      	ldr	r3, [pc, #112]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f023 0219 	bic.w	r2, r3, #25
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	68db      	ldr	r3, [r3, #12]
 800e884:	4919      	ldr	r1, [pc, #100]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e886:	4313      	orrs	r3, r2
 800e888:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e88a:	f7f8 fe51 	bl	8007530 <HAL_GetTick>
 800e88e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e890:	e008      	b.n	800e8a4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e892:	f7f8 fe4d 	bl	8007530 <HAL_GetTick>
 800e896:	4602      	mov	r2, r0
 800e898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e89a:	1ad3      	subs	r3, r2, r3
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d901      	bls.n	800e8a4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800e8a0:	2303      	movs	r3, #3
 800e8a2:	e2a8      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e8a4:	4b11      	ldr	r3, [pc, #68]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f003 0304 	and.w	r3, r3, #4
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d0f0      	beq.n	800e892 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e8b0:	4b0e      	ldr	r3, [pc, #56]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	691b      	ldr	r3, [r3, #16]
 800e8bc:	061b      	lsls	r3, r3, #24
 800e8be:	490b      	ldr	r1, [pc, #44]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	604b      	str	r3, [r1, #4]
 800e8c4:	e01a      	b.n	800e8fc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e8c6:	4b09      	ldr	r3, [pc, #36]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	4a08      	ldr	r2, [pc, #32]	; (800e8ec <HAL_RCC_OscConfig+0x244>)
 800e8cc:	f023 0301 	bic.w	r3, r3, #1
 800e8d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8d2:	f7f8 fe2d 	bl	8007530 <HAL_GetTick>
 800e8d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e8d8:	e00a      	b.n	800e8f0 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e8da:	f7f8 fe29 	bl	8007530 <HAL_GetTick>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e2:	1ad3      	subs	r3, r2, r3
 800e8e4:	2b02      	cmp	r3, #2
 800e8e6:	d903      	bls.n	800e8f0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800e8e8:	2303      	movs	r3, #3
 800e8ea:	e284      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
 800e8ec:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e8f0:	4b96      	ldr	r3, [pc, #600]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	f003 0304 	and.w	r3, r3, #4
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1ee      	bne.n	800e8da <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f003 0310 	and.w	r3, r3, #16
 800e904:	2b00      	cmp	r3, #0
 800e906:	d06a      	beq.n	800e9de <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e908:	4b90      	ldr	r3, [pc, #576]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e90a:	691b      	ldr	r3, [r3, #16]
 800e90c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e910:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e912:	4b8e      	ldr	r3, [pc, #568]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e916:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	2b08      	cmp	r3, #8
 800e91c:	d007      	beq.n	800e92e <HAL_RCC_OscConfig+0x286>
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	2b18      	cmp	r3, #24
 800e922:	d11b      	bne.n	800e95c <HAL_RCC_OscConfig+0x2b4>
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	f003 0303 	and.w	r3, r3, #3
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d116      	bne.n	800e95c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e92e:	4b87      	ldr	r3, [pc, #540]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e936:	2b00      	cmp	r3, #0
 800e938:	d005      	beq.n	800e946 <HAL_RCC_OscConfig+0x29e>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	69db      	ldr	r3, [r3, #28]
 800e93e:	2b80      	cmp	r3, #128	; 0x80
 800e940:	d001      	beq.n	800e946 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	e257      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e946:	4b81      	ldr	r3, [pc, #516]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6a1b      	ldr	r3, [r3, #32]
 800e952:	061b      	lsls	r3, r3, #24
 800e954:	497d      	ldr	r1, [pc, #500]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e956:	4313      	orrs	r3, r2
 800e958:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e95a:	e040      	b.n	800e9de <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	69db      	ldr	r3, [r3, #28]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d023      	beq.n	800e9ac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e964:	4b79      	ldr	r3, [pc, #484]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	4a78      	ldr	r2, [pc, #480]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e96a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e96e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e970:	f7f8 fdde 	bl	8007530 <HAL_GetTick>
 800e974:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e976:	e008      	b.n	800e98a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e978:	f7f8 fdda 	bl	8007530 <HAL_GetTick>
 800e97c:	4602      	mov	r2, r0
 800e97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e980:	1ad3      	subs	r3, r2, r3
 800e982:	2b02      	cmp	r3, #2
 800e984:	d901      	bls.n	800e98a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800e986:	2303      	movs	r3, #3
 800e988:	e235      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e98a:	4b70      	ldr	r3, [pc, #448]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e992:	2b00      	cmp	r3, #0
 800e994:	d0f0      	beq.n	800e978 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e996:	4b6d      	ldr	r3, [pc, #436]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	6a1b      	ldr	r3, [r3, #32]
 800e9a2:	061b      	lsls	r3, r3, #24
 800e9a4:	4969      	ldr	r1, [pc, #420]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	60cb      	str	r3, [r1, #12]
 800e9aa:	e018      	b.n	800e9de <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e9ac:	4b67      	ldr	r3, [pc, #412]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4a66      	ldr	r2, [pc, #408]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e9b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9b8:	f7f8 fdba 	bl	8007530 <HAL_GetTick>
 800e9bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e9be:	e008      	b.n	800e9d2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e9c0:	f7f8 fdb6 	bl	8007530 <HAL_GetTick>
 800e9c4:	4602      	mov	r2, r0
 800e9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c8:	1ad3      	subs	r3, r2, r3
 800e9ca:	2b02      	cmp	r3, #2
 800e9cc:	d901      	bls.n	800e9d2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800e9ce:	2303      	movs	r3, #3
 800e9d0:	e211      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e9d2:	4b5e      	ldr	r3, [pc, #376]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d1f0      	bne.n	800e9c0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	f003 0308 	and.w	r3, r3, #8
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d036      	beq.n	800ea58 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	695b      	ldr	r3, [r3, #20]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d019      	beq.n	800ea26 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800e9f2:	4b56      	ldr	r3, [pc, #344]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e9f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9f6:	4a55      	ldr	r2, [pc, #340]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800e9f8:	f043 0301 	orr.w	r3, r3, #1
 800e9fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e9fe:	f7f8 fd97 	bl	8007530 <HAL_GetTick>
 800ea02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ea04:	e008      	b.n	800ea18 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ea06:	f7f8 fd93 	bl	8007530 <HAL_GetTick>
 800ea0a:	4602      	mov	r2, r0
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0e:	1ad3      	subs	r3, r2, r3
 800ea10:	2b02      	cmp	r3, #2
 800ea12:	d901      	bls.n	800ea18 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ea14:	2303      	movs	r3, #3
 800ea16:	e1ee      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ea18:	4b4c      	ldr	r3, [pc, #304]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800ea1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea1c:	f003 0302 	and.w	r3, r3, #2
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d0f0      	beq.n	800ea06 <HAL_RCC_OscConfig+0x35e>
 800ea24:	e018      	b.n	800ea58 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ea26:	4b49      	ldr	r3, [pc, #292]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800ea28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea2a:	4a48      	ldr	r2, [pc, #288]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800ea2c:	f023 0301 	bic.w	r3, r3, #1
 800ea30:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea32:	f7f8 fd7d 	bl	8007530 <HAL_GetTick>
 800ea36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ea38:	e008      	b.n	800ea4c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ea3a:	f7f8 fd79 	bl	8007530 <HAL_GetTick>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea42:	1ad3      	subs	r3, r2, r3
 800ea44:	2b02      	cmp	r3, #2
 800ea46:	d901      	bls.n	800ea4c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	e1d4      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ea4c:	4b3f      	ldr	r3, [pc, #252]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800ea4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea50:	f003 0302 	and.w	r3, r3, #2
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1f0      	bne.n	800ea3a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	f003 0320 	and.w	r3, r3, #32
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d036      	beq.n	800ead2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	699b      	ldr	r3, [r3, #24]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d019      	beq.n	800eaa0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ea6c:	4b37      	ldr	r3, [pc, #220]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4a36      	ldr	r2, [pc, #216]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800ea72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ea76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ea78:	f7f8 fd5a 	bl	8007530 <HAL_GetTick>
 800ea7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ea7e:	e008      	b.n	800ea92 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ea80:	f7f8 fd56 	bl	8007530 <HAL_GetTick>
 800ea84:	4602      	mov	r2, r0
 800ea86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea88:	1ad3      	subs	r3, r2, r3
 800ea8a:	2b02      	cmp	r3, #2
 800ea8c:	d901      	bls.n	800ea92 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800ea8e:	2303      	movs	r3, #3
 800ea90:	e1b1      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ea92:	4b2e      	ldr	r3, [pc, #184]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d0f0      	beq.n	800ea80 <HAL_RCC_OscConfig+0x3d8>
 800ea9e:	e018      	b.n	800ead2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800eaa0:	4b2a      	ldr	r3, [pc, #168]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	4a29      	ldr	r2, [pc, #164]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800eaa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eaaa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800eaac:	f7f8 fd40 	bl	8007530 <HAL_GetTick>
 800eab0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800eab2:	e008      	b.n	800eac6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800eab4:	f7f8 fd3c 	bl	8007530 <HAL_GetTick>
 800eab8:	4602      	mov	r2, r0
 800eaba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	d901      	bls.n	800eac6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800eac2:	2303      	movs	r3, #3
 800eac4:	e197      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800eac6:	4b21      	ldr	r3, [pc, #132]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d1f0      	bne.n	800eab4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f003 0304 	and.w	r3, r3, #4
 800eada:	2b00      	cmp	r3, #0
 800eadc:	f000 8086 	beq.w	800ebec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800eae0:	4b1b      	ldr	r3, [pc, #108]	; (800eb50 <HAL_RCC_OscConfig+0x4a8>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	4a1a      	ldr	r2, [pc, #104]	; (800eb50 <HAL_RCC_OscConfig+0x4a8>)
 800eae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eaea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800eaec:	f7f8 fd20 	bl	8007530 <HAL_GetTick>
 800eaf0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eaf2:	e008      	b.n	800eb06 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800eaf4:	f7f8 fd1c 	bl	8007530 <HAL_GetTick>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	2b64      	cmp	r3, #100	; 0x64
 800eb00:	d901      	bls.n	800eb06 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800eb02:	2303      	movs	r3, #3
 800eb04:	e177      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eb06:	4b12      	ldr	r3, [pc, #72]	; (800eb50 <HAL_RCC_OscConfig+0x4a8>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d0f0      	beq.n	800eaf4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d106      	bne.n	800eb28 <HAL_RCC_OscConfig+0x480>
 800eb1a:	4b0c      	ldr	r3, [pc, #48]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800eb1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb1e:	4a0b      	ldr	r2, [pc, #44]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800eb20:	f043 0301 	orr.w	r3, r3, #1
 800eb24:	6713      	str	r3, [r2, #112]	; 0x70
 800eb26:	e032      	b.n	800eb8e <HAL_RCC_OscConfig+0x4e6>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d111      	bne.n	800eb54 <HAL_RCC_OscConfig+0x4ac>
 800eb30:	4b06      	ldr	r3, [pc, #24]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800eb32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb34:	4a05      	ldr	r2, [pc, #20]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800eb36:	f023 0301 	bic.w	r3, r3, #1
 800eb3a:	6713      	str	r3, [r2, #112]	; 0x70
 800eb3c:	4b03      	ldr	r3, [pc, #12]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800eb3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb40:	4a02      	ldr	r2, [pc, #8]	; (800eb4c <HAL_RCC_OscConfig+0x4a4>)
 800eb42:	f023 0304 	bic.w	r3, r3, #4
 800eb46:	6713      	str	r3, [r2, #112]	; 0x70
 800eb48:	e021      	b.n	800eb8e <HAL_RCC_OscConfig+0x4e6>
 800eb4a:	bf00      	nop
 800eb4c:	58024400 	.word	0x58024400
 800eb50:	58024800 	.word	0x58024800
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	2b05      	cmp	r3, #5
 800eb5a:	d10c      	bne.n	800eb76 <HAL_RCC_OscConfig+0x4ce>
 800eb5c:	4b83      	ldr	r3, [pc, #524]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800eb5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb60:	4a82      	ldr	r2, [pc, #520]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800eb62:	f043 0304 	orr.w	r3, r3, #4
 800eb66:	6713      	str	r3, [r2, #112]	; 0x70
 800eb68:	4b80      	ldr	r3, [pc, #512]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800eb6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb6c:	4a7f      	ldr	r2, [pc, #508]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800eb6e:	f043 0301 	orr.w	r3, r3, #1
 800eb72:	6713      	str	r3, [r2, #112]	; 0x70
 800eb74:	e00b      	b.n	800eb8e <HAL_RCC_OscConfig+0x4e6>
 800eb76:	4b7d      	ldr	r3, [pc, #500]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800eb78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb7a:	4a7c      	ldr	r2, [pc, #496]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800eb7c:	f023 0301 	bic.w	r3, r3, #1
 800eb80:	6713      	str	r3, [r2, #112]	; 0x70
 800eb82:	4b7a      	ldr	r3, [pc, #488]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800eb84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb86:	4a79      	ldr	r2, [pc, #484]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800eb88:	f023 0304 	bic.w	r3, r3, #4
 800eb8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	689b      	ldr	r3, [r3, #8]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d015      	beq.n	800ebc2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800eb96:	f7f8 fccb 	bl	8007530 <HAL_GetTick>
 800eb9a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800eb9c:	e00a      	b.n	800ebb4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eb9e:	f7f8 fcc7 	bl	8007530 <HAL_GetTick>
 800eba2:	4602      	mov	r2, r0
 800eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba6:	1ad3      	subs	r3, r2, r3
 800eba8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d901      	bls.n	800ebb4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ebb0:	2303      	movs	r3, #3
 800ebb2:	e120      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ebb4:	4b6d      	ldr	r3, [pc, #436]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ebb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebb8:	f003 0302 	and.w	r3, r3, #2
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d0ee      	beq.n	800eb9e <HAL_RCC_OscConfig+0x4f6>
 800ebc0:	e014      	b.n	800ebec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebc2:	f7f8 fcb5 	bl	8007530 <HAL_GetTick>
 800ebc6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ebc8:	e00a      	b.n	800ebe0 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ebca:	f7f8 fcb1 	bl	8007530 <HAL_GetTick>
 800ebce:	4602      	mov	r2, r0
 800ebd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebd2:	1ad3      	subs	r3, r2, r3
 800ebd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	d901      	bls.n	800ebe0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ebdc:	2303      	movs	r3, #3
 800ebde:	e10a      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ebe0:	4b62      	ldr	r3, [pc, #392]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ebe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebe4:	f003 0302 	and.w	r3, r3, #2
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1ee      	bne.n	800ebca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	f000 80ff 	beq.w	800edf4 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ebf6:	4b5d      	ldr	r3, [pc, #372]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ebfe:	2b18      	cmp	r3, #24
 800ec00:	f000 80ba 	beq.w	800ed78 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec08:	2b02      	cmp	r3, #2
 800ec0a:	f040 8095 	bne.w	800ed38 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec0e:	4b57      	ldr	r3, [pc, #348]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4a56      	ldr	r2, [pc, #344]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ec14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec1a:	f7f8 fc89 	bl	8007530 <HAL_GetTick>
 800ec1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ec20:	e008      	b.n	800ec34 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ec22:	f7f8 fc85 	bl	8007530 <HAL_GetTick>
 800ec26:	4602      	mov	r2, r0
 800ec28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2a:	1ad3      	subs	r3, r2, r3
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d901      	bls.n	800ec34 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ec30:	2303      	movs	r3, #3
 800ec32:	e0e0      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ec34:	4b4d      	ldr	r3, [pc, #308]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d1f0      	bne.n	800ec22 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ec40:	4b4a      	ldr	r3, [pc, #296]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ec42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec44:	4b4a      	ldr	r3, [pc, #296]	; (800ed70 <HAL_RCC_OscConfig+0x6c8>)
 800ec46:	4013      	ands	r3, r2
 800ec48:	687a      	ldr	r2, [r7, #4]
 800ec4a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ec50:	0112      	lsls	r2, r2, #4
 800ec52:	430a      	orrs	r2, r1
 800ec54:	4945      	ldr	r1, [pc, #276]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ec56:	4313      	orrs	r3, r2
 800ec58:	628b      	str	r3, [r1, #40]	; 0x28
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec5e:	3b01      	subs	r3, #1
 800ec60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	025b      	lsls	r3, r3, #9
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	431a      	orrs	r2, r3
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec74:	3b01      	subs	r3, #1
 800ec76:	041b      	lsls	r3, r3, #16
 800ec78:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ec7c:	431a      	orrs	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec82:	3b01      	subs	r3, #1
 800ec84:	061b      	lsls	r3, r3, #24
 800ec86:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ec8a:	4938      	ldr	r1, [pc, #224]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ec8c:	4313      	orrs	r3, r2
 800ec8e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800ec90:	4b36      	ldr	r3, [pc, #216]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ec92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec94:	4a35      	ldr	r2, [pc, #212]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ec96:	f023 0301 	bic.w	r3, r3, #1
 800ec9a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ec9c:	4b33      	ldr	r3, [pc, #204]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ec9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eca0:	4b34      	ldr	r3, [pc, #208]	; (800ed74 <HAL_RCC_OscConfig+0x6cc>)
 800eca2:	4013      	ands	r3, r2
 800eca4:	687a      	ldr	r2, [r7, #4]
 800eca6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800eca8:	00d2      	lsls	r2, r2, #3
 800ecaa:	4930      	ldr	r1, [pc, #192]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ecac:	4313      	orrs	r3, r2
 800ecae:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ecb0:	4b2e      	ldr	r3, [pc, #184]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ecb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb4:	f023 020c 	bic.w	r2, r3, #12
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecbc:	492b      	ldr	r1, [pc, #172]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ecc2:	4b2a      	ldr	r3, [pc, #168]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ecc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc6:	f023 0202 	bic.w	r2, r3, #2
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecce:	4927      	ldr	r1, [pc, #156]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ecd4:	4b25      	ldr	r3, [pc, #148]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ecd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecd8:	4a24      	ldr	r2, [pc, #144]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ecda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ecde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ece0:	4b22      	ldr	r3, [pc, #136]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ece2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ece4:	4a21      	ldr	r2, [pc, #132]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ece6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ecea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ecec:	4b1f      	ldr	r3, [pc, #124]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ecee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf0:	4a1e      	ldr	r2, [pc, #120]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ecf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ecf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ecf8:	4b1c      	ldr	r3, [pc, #112]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ecfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecfc:	4a1b      	ldr	r2, [pc, #108]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ecfe:	f043 0301 	orr.w	r3, r3, #1
 800ed02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ed04:	4b19      	ldr	r3, [pc, #100]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	4a18      	ldr	r2, [pc, #96]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ed0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ed0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed10:	f7f8 fc0e 	bl	8007530 <HAL_GetTick>
 800ed14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ed16:	e008      	b.n	800ed2a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed18:	f7f8 fc0a 	bl	8007530 <HAL_GetTick>
 800ed1c:	4602      	mov	r2, r0
 800ed1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed20:	1ad3      	subs	r3, r2, r3
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	d901      	bls.n	800ed2a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ed26:	2303      	movs	r3, #3
 800ed28:	e065      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ed2a:	4b10      	ldr	r3, [pc, #64]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d0f0      	beq.n	800ed18 <HAL_RCC_OscConfig+0x670>
 800ed36:	e05d      	b.n	800edf4 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed38:	4b0c      	ldr	r3, [pc, #48]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4a0b      	ldr	r2, [pc, #44]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ed3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ed42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed44:	f7f8 fbf4 	bl	8007530 <HAL_GetTick>
 800ed48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ed4a:	e008      	b.n	800ed5e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed4c:	f7f8 fbf0 	bl	8007530 <HAL_GetTick>
 800ed50:	4602      	mov	r2, r0
 800ed52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed54:	1ad3      	subs	r3, r2, r3
 800ed56:	2b02      	cmp	r3, #2
 800ed58:	d901      	bls.n	800ed5e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ed5a:	2303      	movs	r3, #3
 800ed5c:	e04b      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ed5e:	4b03      	ldr	r3, [pc, #12]	; (800ed6c <HAL_RCC_OscConfig+0x6c4>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1f0      	bne.n	800ed4c <HAL_RCC_OscConfig+0x6a4>
 800ed6a:	e043      	b.n	800edf4 <HAL_RCC_OscConfig+0x74c>
 800ed6c:	58024400 	.word	0x58024400
 800ed70:	fffffc0c 	.word	0xfffffc0c
 800ed74:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ed78:	4b21      	ldr	r3, [pc, #132]	; (800ee00 <HAL_RCC_OscConfig+0x758>)
 800ed7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ed7e:	4b20      	ldr	r3, [pc, #128]	; (800ee00 <HAL_RCC_OscConfig+0x758>)
 800ed80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed82:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed88:	2b01      	cmp	r3, #1
 800ed8a:	d031      	beq.n	800edf0 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	f003 0203 	and.w	r2, r3, #3
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ed96:	429a      	cmp	r2, r3
 800ed98:	d12a      	bne.n	800edf0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	091b      	lsrs	r3, r3, #4
 800ed9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d122      	bne.n	800edf0 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800edb6:	429a      	cmp	r2, r3
 800edb8:	d11a      	bne.n	800edf0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	0a5b      	lsrs	r3, r3, #9
 800edbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edc6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800edc8:	429a      	cmp	r2, r3
 800edca:	d111      	bne.n	800edf0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	0c1b      	lsrs	r3, r3, #16
 800edd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800edda:	429a      	cmp	r2, r3
 800eddc:	d108      	bne.n	800edf0 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	0e1b      	lsrs	r3, r3, #24
 800ede2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800edec:	429a      	cmp	r2, r3
 800edee:	d001      	beq.n	800edf4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800edf0:	2301      	movs	r3, #1
 800edf2:	e000      	b.n	800edf6 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800edf4:	2300      	movs	r3, #0
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3730      	adds	r7, #48	; 0x30
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop
 800ee00:	58024400 	.word	0x58024400

0800ee04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b086      	sub	sp, #24
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d101      	bne.n	800ee18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ee14:	2301      	movs	r3, #1
 800ee16:	e19c      	b.n	800f152 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ee18:	4b8a      	ldr	r3, [pc, #552]	; (800f044 <HAL_RCC_ClockConfig+0x240>)
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f003 030f 	and.w	r3, r3, #15
 800ee20:	683a      	ldr	r2, [r7, #0]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d910      	bls.n	800ee48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee26:	4b87      	ldr	r3, [pc, #540]	; (800f044 <HAL_RCC_ClockConfig+0x240>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f023 020f 	bic.w	r2, r3, #15
 800ee2e:	4985      	ldr	r1, [pc, #532]	; (800f044 <HAL_RCC_ClockConfig+0x240>)
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	4313      	orrs	r3, r2
 800ee34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee36:	4b83      	ldr	r3, [pc, #524]	; (800f044 <HAL_RCC_ClockConfig+0x240>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f003 030f 	and.w	r3, r3, #15
 800ee3e:	683a      	ldr	r2, [r7, #0]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d001      	beq.n	800ee48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ee44:	2301      	movs	r3, #1
 800ee46:	e184      	b.n	800f152 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f003 0304 	and.w	r3, r3, #4
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d010      	beq.n	800ee76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	691a      	ldr	r2, [r3, #16]
 800ee58:	4b7b      	ldr	r3, [pc, #492]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ee5a:	699b      	ldr	r3, [r3, #24]
 800ee5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d908      	bls.n	800ee76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ee64:	4b78      	ldr	r3, [pc, #480]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ee66:	699b      	ldr	r3, [r3, #24]
 800ee68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	4975      	ldr	r1, [pc, #468]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ee72:	4313      	orrs	r3, r2
 800ee74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f003 0308 	and.w	r3, r3, #8
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d010      	beq.n	800eea4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	695a      	ldr	r2, [r3, #20]
 800ee86:	4b70      	ldr	r3, [pc, #448]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ee88:	69db      	ldr	r3, [r3, #28]
 800ee8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d908      	bls.n	800eea4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ee92:	4b6d      	ldr	r3, [pc, #436]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ee94:	69db      	ldr	r3, [r3, #28]
 800ee96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	695b      	ldr	r3, [r3, #20]
 800ee9e:	496a      	ldr	r1, [pc, #424]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800eea0:	4313      	orrs	r3, r2
 800eea2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f003 0310 	and.w	r3, r3, #16
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d010      	beq.n	800eed2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	699a      	ldr	r2, [r3, #24]
 800eeb4:	4b64      	ldr	r3, [pc, #400]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800eeb6:	69db      	ldr	r3, [r3, #28]
 800eeb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d908      	bls.n	800eed2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800eec0:	4b61      	ldr	r3, [pc, #388]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800eec2:	69db      	ldr	r3, [r3, #28]
 800eec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	699b      	ldr	r3, [r3, #24]
 800eecc:	495e      	ldr	r1, [pc, #376]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800eece:	4313      	orrs	r3, r2
 800eed0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f003 0320 	and.w	r3, r3, #32
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d010      	beq.n	800ef00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	69da      	ldr	r2, [r3, #28]
 800eee2:	4b59      	ldr	r3, [pc, #356]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800eee4:	6a1b      	ldr	r3, [r3, #32]
 800eee6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eeea:	429a      	cmp	r2, r3
 800eeec:	d908      	bls.n	800ef00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800eeee:	4b56      	ldr	r3, [pc, #344]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800eef0:	6a1b      	ldr	r3, [r3, #32]
 800eef2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	69db      	ldr	r3, [r3, #28]
 800eefa:	4953      	ldr	r1, [pc, #332]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800eefc:	4313      	orrs	r3, r2
 800eefe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f003 0302 	and.w	r3, r3, #2
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d010      	beq.n	800ef2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	68da      	ldr	r2, [r3, #12]
 800ef10:	4b4d      	ldr	r3, [pc, #308]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ef12:	699b      	ldr	r3, [r3, #24]
 800ef14:	f003 030f 	and.w	r3, r3, #15
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d908      	bls.n	800ef2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ef1c:	4b4a      	ldr	r3, [pc, #296]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ef1e:	699b      	ldr	r3, [r3, #24]
 800ef20:	f023 020f 	bic.w	r2, r3, #15
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	4947      	ldr	r1, [pc, #284]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ef2a:	4313      	orrs	r3, r2
 800ef2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f003 0301 	and.w	r3, r3, #1
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d055      	beq.n	800efe6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ef3a:	4b43      	ldr	r3, [pc, #268]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ef3c:	699b      	ldr	r3, [r3, #24]
 800ef3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	689b      	ldr	r3, [r3, #8]
 800ef46:	4940      	ldr	r1, [pc, #256]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ef48:	4313      	orrs	r3, r2
 800ef4a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	685b      	ldr	r3, [r3, #4]
 800ef50:	2b02      	cmp	r3, #2
 800ef52:	d107      	bne.n	800ef64 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ef54:	4b3c      	ldr	r3, [pc, #240]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d121      	bne.n	800efa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ef60:	2301      	movs	r3, #1
 800ef62:	e0f6      	b.n	800f152 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	2b03      	cmp	r3, #3
 800ef6a:	d107      	bne.n	800ef7c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ef6c:	4b36      	ldr	r3, [pc, #216]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d115      	bne.n	800efa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	e0ea      	b.n	800f152 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	2b01      	cmp	r3, #1
 800ef82:	d107      	bne.n	800ef94 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ef84:	4b30      	ldr	r3, [pc, #192]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d109      	bne.n	800efa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	e0de      	b.n	800f152 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ef94:	4b2c      	ldr	r3, [pc, #176]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	f003 0304 	and.w	r3, r3, #4
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d101      	bne.n	800efa4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800efa0:	2301      	movs	r3, #1
 800efa2:	e0d6      	b.n	800f152 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800efa4:	4b28      	ldr	r3, [pc, #160]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800efa6:	691b      	ldr	r3, [r3, #16]
 800efa8:	f023 0207 	bic.w	r2, r3, #7
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	4925      	ldr	r1, [pc, #148]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800efb2:	4313      	orrs	r3, r2
 800efb4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800efb6:	f7f8 fabb 	bl	8007530 <HAL_GetTick>
 800efba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800efbc:	e00a      	b.n	800efd4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800efbe:	f7f8 fab7 	bl	8007530 <HAL_GetTick>
 800efc2:	4602      	mov	r2, r0
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	1ad3      	subs	r3, r2, r3
 800efc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800efcc:	4293      	cmp	r3, r2
 800efce:	d901      	bls.n	800efd4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800efd0:	2303      	movs	r3, #3
 800efd2:	e0be      	b.n	800f152 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800efd4:	4b1c      	ldr	r3, [pc, #112]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800efd6:	691b      	ldr	r3, [r3, #16]
 800efd8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	685b      	ldr	r3, [r3, #4]
 800efe0:	00db      	lsls	r3, r3, #3
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d1eb      	bne.n	800efbe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f003 0302 	and.w	r3, r3, #2
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d010      	beq.n	800f014 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	68da      	ldr	r2, [r3, #12]
 800eff6:	4b14      	ldr	r3, [pc, #80]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800eff8:	699b      	ldr	r3, [r3, #24]
 800effa:	f003 030f 	and.w	r3, r3, #15
 800effe:	429a      	cmp	r2, r3
 800f000:	d208      	bcs.n	800f014 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f002:	4b11      	ldr	r3, [pc, #68]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800f004:	699b      	ldr	r3, [r3, #24]
 800f006:	f023 020f 	bic.w	r2, r3, #15
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	490e      	ldr	r1, [pc, #56]	; (800f048 <HAL_RCC_ClockConfig+0x244>)
 800f010:	4313      	orrs	r3, r2
 800f012:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f014:	4b0b      	ldr	r3, [pc, #44]	; (800f044 <HAL_RCC_ClockConfig+0x240>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	f003 030f 	and.w	r3, r3, #15
 800f01c:	683a      	ldr	r2, [r7, #0]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d214      	bcs.n	800f04c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f022:	4b08      	ldr	r3, [pc, #32]	; (800f044 <HAL_RCC_ClockConfig+0x240>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	f023 020f 	bic.w	r2, r3, #15
 800f02a:	4906      	ldr	r1, [pc, #24]	; (800f044 <HAL_RCC_ClockConfig+0x240>)
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	4313      	orrs	r3, r2
 800f030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f032:	4b04      	ldr	r3, [pc, #16]	; (800f044 <HAL_RCC_ClockConfig+0x240>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f003 030f 	and.w	r3, r3, #15
 800f03a:	683a      	ldr	r2, [r7, #0]
 800f03c:	429a      	cmp	r2, r3
 800f03e:	d005      	beq.n	800f04c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800f040:	2301      	movs	r3, #1
 800f042:	e086      	b.n	800f152 <HAL_RCC_ClockConfig+0x34e>
 800f044:	52002000 	.word	0x52002000
 800f048:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	f003 0304 	and.w	r3, r3, #4
 800f054:	2b00      	cmp	r3, #0
 800f056:	d010      	beq.n	800f07a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	691a      	ldr	r2, [r3, #16]
 800f05c:	4b3f      	ldr	r3, [pc, #252]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f05e:	699b      	ldr	r3, [r3, #24]
 800f060:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f064:	429a      	cmp	r2, r3
 800f066:	d208      	bcs.n	800f07a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f068:	4b3c      	ldr	r3, [pc, #240]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f06a:	699b      	ldr	r3, [r3, #24]
 800f06c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	691b      	ldr	r3, [r3, #16]
 800f074:	4939      	ldr	r1, [pc, #228]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f076:	4313      	orrs	r3, r2
 800f078:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	f003 0308 	and.w	r3, r3, #8
 800f082:	2b00      	cmp	r3, #0
 800f084:	d010      	beq.n	800f0a8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	695a      	ldr	r2, [r3, #20]
 800f08a:	4b34      	ldr	r3, [pc, #208]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f08c:	69db      	ldr	r3, [r3, #28]
 800f08e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f092:	429a      	cmp	r2, r3
 800f094:	d208      	bcs.n	800f0a8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f096:	4b31      	ldr	r3, [pc, #196]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f098:	69db      	ldr	r3, [r3, #28]
 800f09a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	695b      	ldr	r3, [r3, #20]
 800f0a2:	492e      	ldr	r1, [pc, #184]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f0a4:	4313      	orrs	r3, r2
 800f0a6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f003 0310 	and.w	r3, r3, #16
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d010      	beq.n	800f0d6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	699a      	ldr	r2, [r3, #24]
 800f0b8:	4b28      	ldr	r3, [pc, #160]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f0ba:	69db      	ldr	r3, [r3, #28]
 800f0bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d208      	bcs.n	800f0d6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f0c4:	4b25      	ldr	r3, [pc, #148]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f0c6:	69db      	ldr	r3, [r3, #28]
 800f0c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	699b      	ldr	r3, [r3, #24]
 800f0d0:	4922      	ldr	r1, [pc, #136]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f0d2:	4313      	orrs	r3, r2
 800f0d4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	f003 0320 	and.w	r3, r3, #32
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d010      	beq.n	800f104 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	69da      	ldr	r2, [r3, #28]
 800f0e6:	4b1d      	ldr	r3, [pc, #116]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f0e8:	6a1b      	ldr	r3, [r3, #32]
 800f0ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	d208      	bcs.n	800f104 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800f0f2:	4b1a      	ldr	r3, [pc, #104]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f0f4:	6a1b      	ldr	r3, [r3, #32]
 800f0f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	69db      	ldr	r3, [r3, #28]
 800f0fe:	4917      	ldr	r1, [pc, #92]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f100:	4313      	orrs	r3, r2
 800f102:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f104:	f000 f834 	bl	800f170 <HAL_RCC_GetSysClockFreq>
 800f108:	4602      	mov	r2, r0
 800f10a:	4b14      	ldr	r3, [pc, #80]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f10c:	699b      	ldr	r3, [r3, #24]
 800f10e:	0a1b      	lsrs	r3, r3, #8
 800f110:	f003 030f 	and.w	r3, r3, #15
 800f114:	4912      	ldr	r1, [pc, #72]	; (800f160 <HAL_RCC_ClockConfig+0x35c>)
 800f116:	5ccb      	ldrb	r3, [r1, r3]
 800f118:	f003 031f 	and.w	r3, r3, #31
 800f11c:	fa22 f303 	lsr.w	r3, r2, r3
 800f120:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f122:	4b0e      	ldr	r3, [pc, #56]	; (800f15c <HAL_RCC_ClockConfig+0x358>)
 800f124:	699b      	ldr	r3, [r3, #24]
 800f126:	f003 030f 	and.w	r3, r3, #15
 800f12a:	4a0d      	ldr	r2, [pc, #52]	; (800f160 <HAL_RCC_ClockConfig+0x35c>)
 800f12c:	5cd3      	ldrb	r3, [r2, r3]
 800f12e:	f003 031f 	and.w	r3, r3, #31
 800f132:	693a      	ldr	r2, [r7, #16]
 800f134:	fa22 f303 	lsr.w	r3, r2, r3
 800f138:	4a0a      	ldr	r2, [pc, #40]	; (800f164 <HAL_RCC_ClockConfig+0x360>)
 800f13a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f13c:	4a0a      	ldr	r2, [pc, #40]	; (800f168 <HAL_RCC_ClockConfig+0x364>)
 800f13e:	693b      	ldr	r3, [r7, #16]
 800f140:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800f142:	4b0a      	ldr	r3, [pc, #40]	; (800f16c <HAL_RCC_ClockConfig+0x368>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	4618      	mov	r0, r3
 800f148:	f7f8 f9a8 	bl	800749c <HAL_InitTick>
 800f14c:	4603      	mov	r3, r0
 800f14e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800f150:	7bfb      	ldrb	r3, [r7, #15]
}
 800f152:	4618      	mov	r0, r3
 800f154:	3718      	adds	r7, #24
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop
 800f15c:	58024400 	.word	0x58024400
 800f160:	08018400 	.word	0x08018400
 800f164:	20000024 	.word	0x20000024
 800f168:	20000020 	.word	0x20000020
 800f16c:	20000028 	.word	0x20000028

0800f170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f170:	b480      	push	{r7}
 800f172:	b089      	sub	sp, #36	; 0x24
 800f174:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f176:	4bb3      	ldr	r3, [pc, #716]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f178:	691b      	ldr	r3, [r3, #16]
 800f17a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f17e:	2b18      	cmp	r3, #24
 800f180:	f200 8155 	bhi.w	800f42e <HAL_RCC_GetSysClockFreq+0x2be>
 800f184:	a201      	add	r2, pc, #4	; (adr r2, 800f18c <HAL_RCC_GetSysClockFreq+0x1c>)
 800f186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f18a:	bf00      	nop
 800f18c:	0800f1f1 	.word	0x0800f1f1
 800f190:	0800f42f 	.word	0x0800f42f
 800f194:	0800f42f 	.word	0x0800f42f
 800f198:	0800f42f 	.word	0x0800f42f
 800f19c:	0800f42f 	.word	0x0800f42f
 800f1a0:	0800f42f 	.word	0x0800f42f
 800f1a4:	0800f42f 	.word	0x0800f42f
 800f1a8:	0800f42f 	.word	0x0800f42f
 800f1ac:	0800f217 	.word	0x0800f217
 800f1b0:	0800f42f 	.word	0x0800f42f
 800f1b4:	0800f42f 	.word	0x0800f42f
 800f1b8:	0800f42f 	.word	0x0800f42f
 800f1bc:	0800f42f 	.word	0x0800f42f
 800f1c0:	0800f42f 	.word	0x0800f42f
 800f1c4:	0800f42f 	.word	0x0800f42f
 800f1c8:	0800f42f 	.word	0x0800f42f
 800f1cc:	0800f21d 	.word	0x0800f21d
 800f1d0:	0800f42f 	.word	0x0800f42f
 800f1d4:	0800f42f 	.word	0x0800f42f
 800f1d8:	0800f42f 	.word	0x0800f42f
 800f1dc:	0800f42f 	.word	0x0800f42f
 800f1e0:	0800f42f 	.word	0x0800f42f
 800f1e4:	0800f42f 	.word	0x0800f42f
 800f1e8:	0800f42f 	.word	0x0800f42f
 800f1ec:	0800f223 	.word	0x0800f223
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f1f0:	4b94      	ldr	r3, [pc, #592]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	f003 0320 	and.w	r3, r3, #32
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d009      	beq.n	800f210 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f1fc:	4b91      	ldr	r3, [pc, #580]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	08db      	lsrs	r3, r3, #3
 800f202:	f003 0303 	and.w	r3, r3, #3
 800f206:	4a90      	ldr	r2, [pc, #576]	; (800f448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f208:	fa22 f303 	lsr.w	r3, r2, r3
 800f20c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800f20e:	e111      	b.n	800f434 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f210:	4b8d      	ldr	r3, [pc, #564]	; (800f448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f212:	61bb      	str	r3, [r7, #24]
    break;
 800f214:	e10e      	b.n	800f434 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800f216:	4b8d      	ldr	r3, [pc, #564]	; (800f44c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f218:	61bb      	str	r3, [r7, #24]
    break;
 800f21a:	e10b      	b.n	800f434 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800f21c:	4b8c      	ldr	r3, [pc, #560]	; (800f450 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800f21e:	61bb      	str	r3, [r7, #24]
    break;
 800f220:	e108      	b.n	800f434 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f222:	4b88      	ldr	r3, [pc, #544]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f226:	f003 0303 	and.w	r3, r3, #3
 800f22a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f22c:	4b85      	ldr	r3, [pc, #532]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f22e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f230:	091b      	lsrs	r3, r3, #4
 800f232:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f236:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f238:	4b82      	ldr	r3, [pc, #520]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f23c:	f003 0301 	and.w	r3, r3, #1
 800f240:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f242:	4b80      	ldr	r3, [pc, #512]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f246:	08db      	lsrs	r3, r3, #3
 800f248:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f24c:	68fa      	ldr	r2, [r7, #12]
 800f24e:	fb02 f303 	mul.w	r3, r2, r3
 800f252:	ee07 3a90 	vmov	s15, r3
 800f256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f25a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	2b00      	cmp	r3, #0
 800f262:	f000 80e1 	beq.w	800f428 <HAL_RCC_GetSysClockFreq+0x2b8>
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	2b02      	cmp	r3, #2
 800f26a:	f000 8083 	beq.w	800f374 <HAL_RCC_GetSysClockFreq+0x204>
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	2b02      	cmp	r3, #2
 800f272:	f200 80a1 	bhi.w	800f3b8 <HAL_RCC_GetSysClockFreq+0x248>
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d003      	beq.n	800f284 <HAL_RCC_GetSysClockFreq+0x114>
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	2b01      	cmp	r3, #1
 800f280:	d056      	beq.n	800f330 <HAL_RCC_GetSysClockFreq+0x1c0>
 800f282:	e099      	b.n	800f3b8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f284:	4b6f      	ldr	r3, [pc, #444]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	f003 0320 	and.w	r3, r3, #32
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d02d      	beq.n	800f2ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f290:	4b6c      	ldr	r3, [pc, #432]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	08db      	lsrs	r3, r3, #3
 800f296:	f003 0303 	and.w	r3, r3, #3
 800f29a:	4a6b      	ldr	r2, [pc, #428]	; (800f448 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f29c:	fa22 f303 	lsr.w	r3, r2, r3
 800f2a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	ee07 3a90 	vmov	s15, r3
 800f2a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2ac:	693b      	ldr	r3, [r7, #16]
 800f2ae:	ee07 3a90 	vmov	s15, r3
 800f2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2ba:	4b62      	ldr	r3, [pc, #392]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2c2:	ee07 3a90 	vmov	s15, r3
 800f2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800f2ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 800f454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800f2ea:	e087      	b.n	800f3fc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	ee07 3a90 	vmov	s15, r3
 800f2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 800f458 <HAL_RCC_GetSysClockFreq+0x2e8>
 800f2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2fe:	4b51      	ldr	r3, [pc, #324]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f306:	ee07 3a90 	vmov	s15, r3
 800f30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f30e:	ed97 6a02 	vldr	s12, [r7, #8]
 800f312:	eddf 5a50 	vldr	s11, [pc, #320]	; 800f454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f31e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f32a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f32e:	e065      	b.n	800f3fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	ee07 3a90 	vmov	s15, r3
 800f336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f33a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800f45c <HAL_RCC_GetSysClockFreq+0x2ec>
 800f33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f342:	4b40      	ldr	r3, [pc, #256]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f34a:	ee07 3a90 	vmov	s15, r3
 800f34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f352:	ed97 6a02 	vldr	s12, [r7, #8]
 800f356:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f36e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f372:	e043      	b.n	800f3fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	ee07 3a90 	vmov	s15, r3
 800f37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f37e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800f460 <HAL_RCC_GetSysClockFreq+0x2f0>
 800f382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f386:	4b2f      	ldr	r3, [pc, #188]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f38e:	ee07 3a90 	vmov	s15, r3
 800f392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f396:	ed97 6a02 	vldr	s12, [r7, #8]
 800f39a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800f454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f3b6:	e021      	b.n	800f3fc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f3b8:	693b      	ldr	r3, [r7, #16]
 800f3ba:	ee07 3a90 	vmov	s15, r3
 800f3be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f45c <HAL_RCC_GetSysClockFreq+0x2ec>
 800f3c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3ca:	4b1e      	ldr	r3, [pc, #120]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f3cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3d2:	ee07 3a90 	vmov	s15, r3
 800f3d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3da:	ed97 6a02 	vldr	s12, [r7, #8]
 800f3de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800f454 <HAL_RCC_GetSysClockFreq+0x2e4>
 800f3e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f3fa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800f3fc:	4b11      	ldr	r3, [pc, #68]	; (800f444 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f400:	0a5b      	lsrs	r3, r3, #9
 800f402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f406:	3301      	adds	r3, #1
 800f408:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	ee07 3a90 	vmov	s15, r3
 800f410:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f414:	edd7 6a07 	vldr	s13, [r7, #28]
 800f418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f41c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f420:	ee17 3a90 	vmov	r3, s15
 800f424:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800f426:	e005      	b.n	800f434 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800f428:	2300      	movs	r3, #0
 800f42a:	61bb      	str	r3, [r7, #24]
    break;
 800f42c:	e002      	b.n	800f434 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800f42e:	4b07      	ldr	r3, [pc, #28]	; (800f44c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f430:	61bb      	str	r3, [r7, #24]
    break;
 800f432:	bf00      	nop
  }

  return sysclockfreq;
 800f434:	69bb      	ldr	r3, [r7, #24]
}
 800f436:	4618      	mov	r0, r3
 800f438:	3724      	adds	r7, #36	; 0x24
 800f43a:	46bd      	mov	sp, r7
 800f43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f440:	4770      	bx	lr
 800f442:	bf00      	nop
 800f444:	58024400 	.word	0x58024400
 800f448:	03d09000 	.word	0x03d09000
 800f44c:	003d0900 	.word	0x003d0900
 800f450:	017d7840 	.word	0x017d7840
 800f454:	46000000 	.word	0x46000000
 800f458:	4c742400 	.word	0x4c742400
 800f45c:	4a742400 	.word	0x4a742400
 800f460:	4bbebc20 	.word	0x4bbebc20

0800f464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f46a:	f7ff fe81 	bl	800f170 <HAL_RCC_GetSysClockFreq>
 800f46e:	4602      	mov	r2, r0
 800f470:	4b10      	ldr	r3, [pc, #64]	; (800f4b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800f472:	699b      	ldr	r3, [r3, #24]
 800f474:	0a1b      	lsrs	r3, r3, #8
 800f476:	f003 030f 	and.w	r3, r3, #15
 800f47a:	490f      	ldr	r1, [pc, #60]	; (800f4b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800f47c:	5ccb      	ldrb	r3, [r1, r3]
 800f47e:	f003 031f 	and.w	r3, r3, #31
 800f482:	fa22 f303 	lsr.w	r3, r2, r3
 800f486:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f488:	4b0a      	ldr	r3, [pc, #40]	; (800f4b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800f48a:	699b      	ldr	r3, [r3, #24]
 800f48c:	f003 030f 	and.w	r3, r3, #15
 800f490:	4a09      	ldr	r2, [pc, #36]	; (800f4b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800f492:	5cd3      	ldrb	r3, [r2, r3]
 800f494:	f003 031f 	and.w	r3, r3, #31
 800f498:	687a      	ldr	r2, [r7, #4]
 800f49a:	fa22 f303 	lsr.w	r3, r2, r3
 800f49e:	4a07      	ldr	r2, [pc, #28]	; (800f4bc <HAL_RCC_GetHCLKFreq+0x58>)
 800f4a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f4a2:	4a07      	ldr	r2, [pc, #28]	; (800f4c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800f4a8:	4b04      	ldr	r3, [pc, #16]	; (800f4bc <HAL_RCC_GetHCLKFreq+0x58>)
 800f4aa:	681b      	ldr	r3, [r3, #0]
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	58024400 	.word	0x58024400
 800f4b8:	08018400 	.word	0x08018400
 800f4bc:	20000024 	.word	0x20000024
 800f4c0:	20000020 	.word	0x20000020

0800f4c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f4c8:	f7ff ffcc 	bl	800f464 <HAL_RCC_GetHCLKFreq>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	4b06      	ldr	r3, [pc, #24]	; (800f4e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f4d0:	69db      	ldr	r3, [r3, #28]
 800f4d2:	091b      	lsrs	r3, r3, #4
 800f4d4:	f003 0307 	and.w	r3, r3, #7
 800f4d8:	4904      	ldr	r1, [pc, #16]	; (800f4ec <HAL_RCC_GetPCLK1Freq+0x28>)
 800f4da:	5ccb      	ldrb	r3, [r1, r3]
 800f4dc:	f003 031f 	and.w	r3, r3, #31
 800f4e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	58024400 	.word	0x58024400
 800f4ec:	08018400 	.word	0x08018400

0800f4f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f4f4:	f7ff ffb6 	bl	800f464 <HAL_RCC_GetHCLKFreq>
 800f4f8:	4602      	mov	r2, r0
 800f4fa:	4b06      	ldr	r3, [pc, #24]	; (800f514 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f4fc:	69db      	ldr	r3, [r3, #28]
 800f4fe:	0a1b      	lsrs	r3, r3, #8
 800f500:	f003 0307 	and.w	r3, r3, #7
 800f504:	4904      	ldr	r1, [pc, #16]	; (800f518 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f506:	5ccb      	ldrb	r3, [r1, r3]
 800f508:	f003 031f 	and.w	r3, r3, #31
 800f50c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f510:	4618      	mov	r0, r3
 800f512:	bd80      	pop	{r7, pc}
 800f514:	58024400 	.word	0x58024400
 800f518:	08018400 	.word	0x08018400

0800f51c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b086      	sub	sp, #24
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f524:	2300      	movs	r3, #0
 800f526:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f528:	2300      	movs	r3, #0
 800f52a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f534:	2b00      	cmp	r3, #0
 800f536:	d03f      	beq.n	800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f53c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f540:	d02a      	beq.n	800f598 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800f542:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f546:	d824      	bhi.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f54c:	d018      	beq.n	800f580 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f54e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f552:	d81e      	bhi.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f554:	2b00      	cmp	r3, #0
 800f556:	d003      	beq.n	800f560 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800f558:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f55c:	d007      	beq.n	800f56e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800f55e:	e018      	b.n	800f592 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f560:	4ba4      	ldr	r3, [pc, #656]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f564:	4aa3      	ldr	r2, [pc, #652]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f56a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f56c:	e015      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	3304      	adds	r3, #4
 800f572:	2102      	movs	r1, #2
 800f574:	4618      	mov	r0, r3
 800f576:	f001 ff01 	bl	801137c <RCCEx_PLL2_Config>
 800f57a:	4603      	mov	r3, r0
 800f57c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f57e:	e00c      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	3324      	adds	r3, #36	; 0x24
 800f584:	2102      	movs	r1, #2
 800f586:	4618      	mov	r0, r3
 800f588:	f001 ffaa 	bl	80114e0 <RCCEx_PLL3_Config>
 800f58c:	4603      	mov	r3, r0
 800f58e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f590:	e003      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f592:	2301      	movs	r3, #1
 800f594:	75fb      	strb	r3, [r7, #23]
      break;
 800f596:	e000      	b.n	800f59a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800f598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f59a:	7dfb      	ldrb	r3, [r7, #23]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d109      	bne.n	800f5b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f5a0:	4b94      	ldr	r3, [pc, #592]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f5a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5ac:	4991      	ldr	r1, [pc, #580]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f5ae:	4313      	orrs	r3, r2
 800f5b0:	650b      	str	r3, [r1, #80]	; 0x50
 800f5b2:	e001      	b.n	800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5b4:	7dfb      	ldrb	r3, [r7, #23]
 800f5b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d03d      	beq.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5c8:	2b04      	cmp	r3, #4
 800f5ca:	d826      	bhi.n	800f61a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800f5cc:	a201      	add	r2, pc, #4	; (adr r2, 800f5d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800f5ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5d2:	bf00      	nop
 800f5d4:	0800f5e9 	.word	0x0800f5e9
 800f5d8:	0800f5f7 	.word	0x0800f5f7
 800f5dc:	0800f609 	.word	0x0800f609
 800f5e0:	0800f621 	.word	0x0800f621
 800f5e4:	0800f621 	.word	0x0800f621
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f5e8:	4b82      	ldr	r3, [pc, #520]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ec:	4a81      	ldr	r2, [pc, #516]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f5ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f5f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f5f4:	e015      	b.n	800f622 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	3304      	adds	r3, #4
 800f5fa:	2100      	movs	r1, #0
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f001 febd 	bl	801137c <RCCEx_PLL2_Config>
 800f602:	4603      	mov	r3, r0
 800f604:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f606:	e00c      	b.n	800f622 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	3324      	adds	r3, #36	; 0x24
 800f60c:	2100      	movs	r1, #0
 800f60e:	4618      	mov	r0, r3
 800f610:	f001 ff66 	bl	80114e0 <RCCEx_PLL3_Config>
 800f614:	4603      	mov	r3, r0
 800f616:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f618:	e003      	b.n	800f622 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f61a:	2301      	movs	r3, #1
 800f61c:	75fb      	strb	r3, [r7, #23]
      break;
 800f61e:	e000      	b.n	800f622 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800f620:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f622:	7dfb      	ldrb	r3, [r7, #23]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d109      	bne.n	800f63c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f628:	4b72      	ldr	r3, [pc, #456]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f62a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f62c:	f023 0207 	bic.w	r2, r3, #7
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f634:	496f      	ldr	r1, [pc, #444]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f636:	4313      	orrs	r3, r2
 800f638:	650b      	str	r3, [r1, #80]	; 0x50
 800f63a:	e001      	b.n	800f640 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f63c:	7dfb      	ldrb	r3, [r7, #23]
 800f63e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d051      	beq.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f652:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800f656:	d036      	beq.n	800f6c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800f658:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800f65c:	d830      	bhi.n	800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f65e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f662:	d032      	beq.n	800f6ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f664:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f668:	d82a      	bhi.n	800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f66a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f66e:	d02e      	beq.n	800f6ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800f670:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f674:	d824      	bhi.n	800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f67a:	d018      	beq.n	800f6ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 800f67c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f680:	d81e      	bhi.n	800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f682:	2b00      	cmp	r3, #0
 800f684:	d003      	beq.n	800f68e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800f686:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f68a:	d007      	beq.n	800f69c <HAL_RCCEx_PeriphCLKConfig+0x180>
 800f68c:	e018      	b.n	800f6c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f68e:	4b59      	ldr	r3, [pc, #356]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f692:	4a58      	ldr	r2, [pc, #352]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f698:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f69a:	e019      	b.n	800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	3304      	adds	r3, #4
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f001 fe6a 	bl	801137c <RCCEx_PLL2_Config>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800f6ac:	e010      	b.n	800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	3324      	adds	r3, #36	; 0x24
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f001 ff13 	bl	80114e0 <RCCEx_PLL3_Config>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f6be:	e007      	b.n	800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	75fb      	strb	r3, [r7, #23]
      break;
 800f6c4:	e004      	b.n	800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800f6c6:	bf00      	nop
 800f6c8:	e002      	b.n	800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800f6ca:	bf00      	nop
 800f6cc:	e000      	b.n	800f6d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800f6ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f6d0:	7dfb      	ldrb	r3, [r7, #23]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d10a      	bne.n	800f6ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f6d6:	4b47      	ldr	r3, [pc, #284]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f6d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6da:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f6e4:	4943      	ldr	r1, [pc, #268]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	658b      	str	r3, [r1, #88]	; 0x58
 800f6ea:	e001      	b.n	800f6f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f6ec:	7dfb      	ldrb	r3, [r7, #23]
 800f6ee:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d051      	beq.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f702:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800f706:	d036      	beq.n	800f776 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800f708:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800f70c:	d830      	bhi.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f70e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f712:	d032      	beq.n	800f77a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800f714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f718:	d82a      	bhi.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f71a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f71e:	d02e      	beq.n	800f77e <HAL_RCCEx_PeriphCLKConfig+0x262>
 800f720:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f724:	d824      	bhi.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f72a:	d018      	beq.n	800f75e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800f72c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f730:	d81e      	bhi.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f732:	2b00      	cmp	r3, #0
 800f734:	d003      	beq.n	800f73e <HAL_RCCEx_PeriphCLKConfig+0x222>
 800f736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f73a:	d007      	beq.n	800f74c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800f73c:	e018      	b.n	800f770 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f73e:	4b2d      	ldr	r3, [pc, #180]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f742:	4a2c      	ldr	r2, [pc, #176]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f748:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f74a:	e019      	b.n	800f780 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	3304      	adds	r3, #4
 800f750:	2100      	movs	r1, #0
 800f752:	4618      	mov	r0, r3
 800f754:	f001 fe12 	bl	801137c <RCCEx_PLL2_Config>
 800f758:	4603      	mov	r3, r0
 800f75a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800f75c:	e010      	b.n	800f780 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	3324      	adds	r3, #36	; 0x24
 800f762:	2100      	movs	r1, #0
 800f764:	4618      	mov	r0, r3
 800f766:	f001 febb 	bl	80114e0 <RCCEx_PLL3_Config>
 800f76a:	4603      	mov	r3, r0
 800f76c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f76e:	e007      	b.n	800f780 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800f770:	2301      	movs	r3, #1
 800f772:	75fb      	strb	r3, [r7, #23]
      break;
 800f774:	e004      	b.n	800f780 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800f776:	bf00      	nop
 800f778:	e002      	b.n	800f780 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800f77a:	bf00      	nop
 800f77c:	e000      	b.n	800f780 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800f77e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f780:	7dfb      	ldrb	r3, [r7, #23]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d10a      	bne.n	800f79c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f786:	4b1b      	ldr	r3, [pc, #108]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f78a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f794:	4917      	ldr	r1, [pc, #92]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f796:	4313      	orrs	r3, r2
 800f798:	658b      	str	r3, [r1, #88]	; 0x58
 800f79a:	e001      	b.n	800f7a0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f79c:	7dfb      	ldrb	r3, [r7, #23]
 800f79e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d035      	beq.n	800f818 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7b0:	2b30      	cmp	r3, #48	; 0x30
 800f7b2:	d01c      	beq.n	800f7ee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800f7b4:	2b30      	cmp	r3, #48	; 0x30
 800f7b6:	d817      	bhi.n	800f7e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800f7b8:	2b20      	cmp	r3, #32
 800f7ba:	d00c      	beq.n	800f7d6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800f7bc:	2b20      	cmp	r3, #32
 800f7be:	d813      	bhi.n	800f7e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d019      	beq.n	800f7f8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800f7c4:	2b10      	cmp	r3, #16
 800f7c6:	d10f      	bne.n	800f7e8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f7c8:	4b0a      	ldr	r3, [pc, #40]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7cc:	4a09      	ldr	r2, [pc, #36]	; (800f7f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f7ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800f7d4:	e011      	b.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	3304      	adds	r3, #4
 800f7da:	2102      	movs	r1, #2
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f001 fdcd 	bl	801137c <RCCEx_PLL2_Config>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800f7e6:	e008      	b.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	75fb      	strb	r3, [r7, #23]
      break;
 800f7ec:	e005      	b.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800f7ee:	bf00      	nop
 800f7f0:	e003      	b.n	800f7fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800f7f2:	bf00      	nop
 800f7f4:	58024400 	.word	0x58024400
      break;
 800f7f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f7fa:	7dfb      	ldrb	r3, [r7, #23]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d109      	bne.n	800f814 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800f800:	4ba3      	ldr	r3, [pc, #652]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f804:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f80c:	49a0      	ldr	r1, [pc, #640]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f80e:	4313      	orrs	r3, r2
 800f810:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f812:	e001      	b.n	800f818 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f814:	7dfb      	ldrb	r3, [r7, #23]
 800f816:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f820:	2b00      	cmp	r3, #0
 800f822:	d047      	beq.n	800f8b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f82c:	d030      	beq.n	800f890 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800f82e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f832:	d82a      	bhi.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800f834:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f838:	d02c      	beq.n	800f894 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800f83a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f83e:	d824      	bhi.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800f840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f844:	d018      	beq.n	800f878 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800f846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f84a:	d81e      	bhi.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d003      	beq.n	800f858 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f854:	d007      	beq.n	800f866 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f856:	e018      	b.n	800f88a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f858:	4b8d      	ldr	r3, [pc, #564]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f85c:	4a8c      	ldr	r2, [pc, #560]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f85e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f862:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f864:	e017      	b.n	800f896 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	3304      	adds	r3, #4
 800f86a:	2100      	movs	r1, #0
 800f86c:	4618      	mov	r0, r3
 800f86e:	f001 fd85 	bl	801137c <RCCEx_PLL2_Config>
 800f872:	4603      	mov	r3, r0
 800f874:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f876:	e00e      	b.n	800f896 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	3324      	adds	r3, #36	; 0x24
 800f87c:	2100      	movs	r1, #0
 800f87e:	4618      	mov	r0, r3
 800f880:	f001 fe2e 	bl	80114e0 <RCCEx_PLL3_Config>
 800f884:	4603      	mov	r3, r0
 800f886:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f888:	e005      	b.n	800f896 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f88a:	2301      	movs	r3, #1
 800f88c:	75fb      	strb	r3, [r7, #23]
      break;
 800f88e:	e002      	b.n	800f896 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800f890:	bf00      	nop
 800f892:	e000      	b.n	800f896 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800f894:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f896:	7dfb      	ldrb	r3, [r7, #23]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d109      	bne.n	800f8b0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f89c:	4b7c      	ldr	r3, [pc, #496]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f89e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8a0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8a8:	4979      	ldr	r1, [pc, #484]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	650b      	str	r3, [r1, #80]	; 0x50
 800f8ae:	e001      	b.n	800f8b4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8b0:	7dfb      	ldrb	r3, [r7, #23]
 800f8b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d049      	beq.n	800f954 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f8c8:	d02e      	beq.n	800f928 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800f8ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f8ce:	d828      	bhi.n	800f922 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f8d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f8d4:	d02a      	beq.n	800f92c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800f8d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f8da:	d822      	bhi.n	800f922 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f8dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f8e0:	d026      	beq.n	800f930 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800f8e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f8e6:	d81c      	bhi.n	800f922 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f8e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f8ec:	d010      	beq.n	800f910 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800f8ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f8f2:	d816      	bhi.n	800f922 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d01d      	beq.n	800f934 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800f8f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8fc:	d111      	bne.n	800f922 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	3304      	adds	r3, #4
 800f902:	2101      	movs	r1, #1
 800f904:	4618      	mov	r0, r3
 800f906:	f001 fd39 	bl	801137c <RCCEx_PLL2_Config>
 800f90a:	4603      	mov	r3, r0
 800f90c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f90e:	e012      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	3324      	adds	r3, #36	; 0x24
 800f914:	2101      	movs	r1, #1
 800f916:	4618      	mov	r0, r3
 800f918:	f001 fde2 	bl	80114e0 <RCCEx_PLL3_Config>
 800f91c:	4603      	mov	r3, r0
 800f91e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f920:	e009      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f922:	2301      	movs	r3, #1
 800f924:	75fb      	strb	r3, [r7, #23]
      break;
 800f926:	e006      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f928:	bf00      	nop
 800f92a:	e004      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f92c:	bf00      	nop
 800f92e:	e002      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f930:	bf00      	nop
 800f932:	e000      	b.n	800f936 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f934:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f936:	7dfb      	ldrb	r3, [r7, #23]
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d109      	bne.n	800f950 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f93c:	4b54      	ldr	r3, [pc, #336]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f93e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f940:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f948:	4951      	ldr	r1, [pc, #324]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f94a:	4313      	orrs	r3, r2
 800f94c:	650b      	str	r3, [r1, #80]	; 0x50
 800f94e:	e001      	b.n	800f954 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f950:	7dfb      	ldrb	r3, [r7, #23]
 800f952:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d04b      	beq.n	800f9f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f96a:	d02e      	beq.n	800f9ca <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800f96c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f970:	d828      	bhi.n	800f9c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f976:	d02a      	beq.n	800f9ce <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800f978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f97c:	d822      	bhi.n	800f9c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f97e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f982:	d026      	beq.n	800f9d2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800f984:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f988:	d81c      	bhi.n	800f9c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f98a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f98e:	d010      	beq.n	800f9b2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800f990:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f994:	d816      	bhi.n	800f9c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f996:	2b00      	cmp	r3, #0
 800f998:	d01d      	beq.n	800f9d6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800f99a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f99e:	d111      	bne.n	800f9c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	3304      	adds	r3, #4
 800f9a4:	2101      	movs	r1, #1
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f001 fce8 	bl	801137c <RCCEx_PLL2_Config>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f9b0:	e012      	b.n	800f9d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	3324      	adds	r3, #36	; 0x24
 800f9b6:	2101      	movs	r1, #1
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f001 fd91 	bl	80114e0 <RCCEx_PLL3_Config>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f9c2:	e009      	b.n	800f9d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	75fb      	strb	r3, [r7, #23]
      break;
 800f9c8:	e006      	b.n	800f9d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f9ca:	bf00      	nop
 800f9cc:	e004      	b.n	800f9d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f9ce:	bf00      	nop
 800f9d0:	e002      	b.n	800f9d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f9d2:	bf00      	nop
 800f9d4:	e000      	b.n	800f9d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f9d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f9d8:	7dfb      	ldrb	r3, [r7, #23]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d10a      	bne.n	800f9f4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f9de:	4b2c      	ldr	r3, [pc, #176]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f9e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9e2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f9ec:	4928      	ldr	r1, [pc, #160]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	658b      	str	r3, [r1, #88]	; 0x58
 800f9f2:	e001      	b.n	800f9f8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f9f4:	7dfb      	ldrb	r3, [r7, #23]
 800f9f6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d02f      	beq.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa0c:	d00e      	beq.n	800fa2c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800fa0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa12:	d814      	bhi.n	800fa3e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d015      	beq.n	800fa44 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800fa18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa1c:	d10f      	bne.n	800fa3e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa1e:	4b1c      	ldr	r3, [pc, #112]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800fa20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa22:	4a1b      	ldr	r2, [pc, #108]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800fa24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800fa2a:	e00c      	b.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	3304      	adds	r3, #4
 800fa30:	2101      	movs	r1, #1
 800fa32:	4618      	mov	r0, r3
 800fa34:	f001 fca2 	bl	801137c <RCCEx_PLL2_Config>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800fa3c:	e003      	b.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	75fb      	strb	r3, [r7, #23]
      break;
 800fa42:	e000      	b.n	800fa46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800fa44:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fa46:	7dfb      	ldrb	r3, [r7, #23]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d109      	bne.n	800fa60 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800fa4c:	4b10      	ldr	r3, [pc, #64]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800fa4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa58:	490d      	ldr	r1, [pc, #52]	; (800fa90 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800fa5a:	4313      	orrs	r3, r2
 800fa5c:	650b      	str	r3, [r1, #80]	; 0x50
 800fa5e:	e001      	b.n	800fa64 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa60:	7dfb      	ldrb	r3, [r7, #23]
 800fa62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d034      	beq.n	800fada <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa74:	2b03      	cmp	r3, #3
 800fa76:	d81d      	bhi.n	800fab4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800fa78:	a201      	add	r2, pc, #4	; (adr r2, 800fa80 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800fa7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa7e:	bf00      	nop
 800fa80:	0800fabb 	.word	0x0800fabb
 800fa84:	0800fa95 	.word	0x0800fa95
 800fa88:	0800faa3 	.word	0x0800faa3
 800fa8c:	0800fabb 	.word	0x0800fabb
 800fa90:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa94:	4bb1      	ldr	r3, [pc, #708]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa98:	4ab0      	ldr	r2, [pc, #704]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fa9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800faa0:	e00c      	b.n	800fabc <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	3304      	adds	r3, #4
 800faa6:	2102      	movs	r1, #2
 800faa8:	4618      	mov	r0, r3
 800faaa:	f001 fc67 	bl	801137c <RCCEx_PLL2_Config>
 800faae:	4603      	mov	r3, r0
 800fab0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800fab2:	e003      	b.n	800fabc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800fab4:	2301      	movs	r3, #1
 800fab6:	75fb      	strb	r3, [r7, #23]
      break;
 800fab8:	e000      	b.n	800fabc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800faba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fabc:	7dfb      	ldrb	r3, [r7, #23]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d109      	bne.n	800fad6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800fac2:	4ba6      	ldr	r3, [pc, #664]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fac6:	f023 0203 	bic.w	r2, r3, #3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800face:	49a3      	ldr	r1, [pc, #652]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fad0:	4313      	orrs	r3, r2
 800fad2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800fad4:	e001      	b.n	800fada <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fad6:	7dfb      	ldrb	r3, [r7, #23]
 800fad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f000 8086 	beq.w	800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fae8:	4b9d      	ldr	r3, [pc, #628]	; (800fd60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	4a9c      	ldr	r2, [pc, #624]	; (800fd60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800faee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800faf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800faf4:	f7f7 fd1c 	bl	8007530 <HAL_GetTick>
 800faf8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fafa:	e009      	b.n	800fb10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fafc:	f7f7 fd18 	bl	8007530 <HAL_GetTick>
 800fb00:	4602      	mov	r2, r0
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	1ad3      	subs	r3, r2, r3
 800fb06:	2b64      	cmp	r3, #100	; 0x64
 800fb08:	d902      	bls.n	800fb10 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800fb0a:	2303      	movs	r3, #3
 800fb0c:	75fb      	strb	r3, [r7, #23]
        break;
 800fb0e:	e005      	b.n	800fb1c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fb10:	4b93      	ldr	r3, [pc, #588]	; (800fd60 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d0ef      	beq.n	800fafc <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800fb1c:	7dfb      	ldrb	r3, [r7, #23]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d166      	bne.n	800fbf0 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800fb22:	4b8e      	ldr	r3, [pc, #568]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fb2c:	4053      	eors	r3, r2
 800fb2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d013      	beq.n	800fb5e <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800fb36:	4b89      	ldr	r3, [pc, #548]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb3e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fb40:	4b86      	ldr	r3, [pc, #536]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb44:	4a85      	ldr	r2, [pc, #532]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fb4a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fb4c:	4b83      	ldr	r3, [pc, #524]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb50:	4a82      	ldr	r2, [pc, #520]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb56:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800fb58:	4a80      	ldr	r2, [pc, #512]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fb64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb68:	d115      	bne.n	800fb96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb6a:	f7f7 fce1 	bl	8007530 <HAL_GetTick>
 800fb6e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fb70:	e00b      	b.n	800fb8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fb72:	f7f7 fcdd 	bl	8007530 <HAL_GetTick>
 800fb76:	4602      	mov	r2, r0
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	1ad3      	subs	r3, r2, r3
 800fb7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d902      	bls.n	800fb8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800fb84:	2303      	movs	r3, #3
 800fb86:	75fb      	strb	r3, [r7, #23]
            break;
 800fb88:	e005      	b.n	800fb96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fb8a:	4b74      	ldr	r3, [pc, #464]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb8e:	f003 0302 	and.w	r3, r3, #2
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d0ed      	beq.n	800fb72 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800fb96:	7dfb      	ldrb	r3, [r7, #23]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d126      	bne.n	800fbea <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbaa:	d10d      	bne.n	800fbc8 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800fbac:	4b6b      	ldr	r3, [pc, #428]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbae:	691b      	ldr	r3, [r3, #16]
 800fbb0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fbba:	0919      	lsrs	r1, r3, #4
 800fbbc:	4b69      	ldr	r3, [pc, #420]	; (800fd64 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800fbbe:	400b      	ands	r3, r1
 800fbc0:	4966      	ldr	r1, [pc, #408]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbc2:	4313      	orrs	r3, r2
 800fbc4:	610b      	str	r3, [r1, #16]
 800fbc6:	e005      	b.n	800fbd4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800fbc8:	4b64      	ldr	r3, [pc, #400]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbca:	691b      	ldr	r3, [r3, #16]
 800fbcc:	4a63      	ldr	r2, [pc, #396]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fbd2:	6113      	str	r3, [r2, #16]
 800fbd4:	4b61      	ldr	r3, [pc, #388]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fbde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fbe2:	495e      	ldr	r1, [pc, #376]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	670b      	str	r3, [r1, #112]	; 0x70
 800fbe8:	e004      	b.n	800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800fbea:	7dfb      	ldrb	r3, [r7, #23]
 800fbec:	75bb      	strb	r3, [r7, #22]
 800fbee:	e001      	b.n	800fbf4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fbf0:	7dfb      	ldrb	r3, [r7, #23]
 800fbf2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f003 0301 	and.w	r3, r3, #1
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d07e      	beq.n	800fcfe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc04:	2b28      	cmp	r3, #40	; 0x28
 800fc06:	d867      	bhi.n	800fcd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800fc08:	a201      	add	r2, pc, #4	; (adr r2, 800fc10 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800fc0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc0e:	bf00      	nop
 800fc10:	0800fcdf 	.word	0x0800fcdf
 800fc14:	0800fcd9 	.word	0x0800fcd9
 800fc18:	0800fcd9 	.word	0x0800fcd9
 800fc1c:	0800fcd9 	.word	0x0800fcd9
 800fc20:	0800fcd9 	.word	0x0800fcd9
 800fc24:	0800fcd9 	.word	0x0800fcd9
 800fc28:	0800fcd9 	.word	0x0800fcd9
 800fc2c:	0800fcd9 	.word	0x0800fcd9
 800fc30:	0800fcb5 	.word	0x0800fcb5
 800fc34:	0800fcd9 	.word	0x0800fcd9
 800fc38:	0800fcd9 	.word	0x0800fcd9
 800fc3c:	0800fcd9 	.word	0x0800fcd9
 800fc40:	0800fcd9 	.word	0x0800fcd9
 800fc44:	0800fcd9 	.word	0x0800fcd9
 800fc48:	0800fcd9 	.word	0x0800fcd9
 800fc4c:	0800fcd9 	.word	0x0800fcd9
 800fc50:	0800fcc7 	.word	0x0800fcc7
 800fc54:	0800fcd9 	.word	0x0800fcd9
 800fc58:	0800fcd9 	.word	0x0800fcd9
 800fc5c:	0800fcd9 	.word	0x0800fcd9
 800fc60:	0800fcd9 	.word	0x0800fcd9
 800fc64:	0800fcd9 	.word	0x0800fcd9
 800fc68:	0800fcd9 	.word	0x0800fcd9
 800fc6c:	0800fcd9 	.word	0x0800fcd9
 800fc70:	0800fcdf 	.word	0x0800fcdf
 800fc74:	0800fcd9 	.word	0x0800fcd9
 800fc78:	0800fcd9 	.word	0x0800fcd9
 800fc7c:	0800fcd9 	.word	0x0800fcd9
 800fc80:	0800fcd9 	.word	0x0800fcd9
 800fc84:	0800fcd9 	.word	0x0800fcd9
 800fc88:	0800fcd9 	.word	0x0800fcd9
 800fc8c:	0800fcd9 	.word	0x0800fcd9
 800fc90:	0800fcdf 	.word	0x0800fcdf
 800fc94:	0800fcd9 	.word	0x0800fcd9
 800fc98:	0800fcd9 	.word	0x0800fcd9
 800fc9c:	0800fcd9 	.word	0x0800fcd9
 800fca0:	0800fcd9 	.word	0x0800fcd9
 800fca4:	0800fcd9 	.word	0x0800fcd9
 800fca8:	0800fcd9 	.word	0x0800fcd9
 800fcac:	0800fcd9 	.word	0x0800fcd9
 800fcb0:	0800fcdf 	.word	0x0800fcdf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	3304      	adds	r3, #4
 800fcb8:	2101      	movs	r1, #1
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f001 fb5e 	bl	801137c <RCCEx_PLL2_Config>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800fcc4:	e00c      	b.n	800fce0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	3324      	adds	r3, #36	; 0x24
 800fcca:	2101      	movs	r1, #1
 800fccc:	4618      	mov	r0, r3
 800fcce:	f001 fc07 	bl	80114e0 <RCCEx_PLL3_Config>
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800fcd6:	e003      	b.n	800fce0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	75fb      	strb	r3, [r7, #23]
      break;
 800fcdc:	e000      	b.n	800fce0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800fcde:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fce0:	7dfb      	ldrb	r3, [r7, #23]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d109      	bne.n	800fcfa <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800fce6:	4b1d      	ldr	r3, [pc, #116]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fcea:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcf2:	491a      	ldr	r1, [pc, #104]	; (800fd5c <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	654b      	str	r3, [r1, #84]	; 0x54
 800fcf8:	e001      	b.n	800fcfe <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fcfa:	7dfb      	ldrb	r3, [r7, #23]
 800fcfc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	f003 0302 	and.w	r3, r3, #2
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d03e      	beq.n	800fd88 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd0e:	2b05      	cmp	r3, #5
 800fd10:	d820      	bhi.n	800fd54 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800fd12:	a201      	add	r2, pc, #4	; (adr r2, 800fd18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800fd14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd18:	0800fd69 	.word	0x0800fd69
 800fd1c:	0800fd31 	.word	0x0800fd31
 800fd20:	0800fd43 	.word	0x0800fd43
 800fd24:	0800fd69 	.word	0x0800fd69
 800fd28:	0800fd69 	.word	0x0800fd69
 800fd2c:	0800fd69 	.word	0x0800fd69
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	3304      	adds	r3, #4
 800fd34:	2101      	movs	r1, #1
 800fd36:	4618      	mov	r0, r3
 800fd38:	f001 fb20 	bl	801137c <RCCEx_PLL2_Config>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800fd40:	e013      	b.n	800fd6a <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	3324      	adds	r3, #36	; 0x24
 800fd46:	2101      	movs	r1, #1
 800fd48:	4618      	mov	r0, r3
 800fd4a:	f001 fbc9 	bl	80114e0 <RCCEx_PLL3_Config>
 800fd4e:	4603      	mov	r3, r0
 800fd50:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800fd52:	e00a      	b.n	800fd6a <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fd54:	2301      	movs	r3, #1
 800fd56:	75fb      	strb	r3, [r7, #23]
      break;
 800fd58:	e007      	b.n	800fd6a <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800fd5a:	bf00      	nop
 800fd5c:	58024400 	.word	0x58024400
 800fd60:	58024800 	.word	0x58024800
 800fd64:	00ffffcf 	.word	0x00ffffcf
      break;
 800fd68:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fd6a:	7dfb      	ldrb	r3, [r7, #23]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d109      	bne.n	800fd84 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800fd70:	4b9f      	ldr	r3, [pc, #636]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fd72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd74:	f023 0207 	bic.w	r2, r3, #7
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd7c:	499c      	ldr	r1, [pc, #624]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fd7e:	4313      	orrs	r3, r2
 800fd80:	654b      	str	r3, [r1, #84]	; 0x54
 800fd82:	e001      	b.n	800fd88 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd84:	7dfb      	ldrb	r3, [r7, #23]
 800fd86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	f003 0304 	and.w	r3, r3, #4
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d039      	beq.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fd9a:	2b05      	cmp	r3, #5
 800fd9c:	d820      	bhi.n	800fde0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800fd9e:	a201      	add	r2, pc, #4	; (adr r2, 800fda4 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800fda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fda4:	0800fde7 	.word	0x0800fde7
 800fda8:	0800fdbd 	.word	0x0800fdbd
 800fdac:	0800fdcf 	.word	0x0800fdcf
 800fdb0:	0800fde7 	.word	0x0800fde7
 800fdb4:	0800fde7 	.word	0x0800fde7
 800fdb8:	0800fde7 	.word	0x0800fde7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	3304      	adds	r3, #4
 800fdc0:	2101      	movs	r1, #1
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f001 fada 	bl	801137c <RCCEx_PLL2_Config>
 800fdc8:	4603      	mov	r3, r0
 800fdca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800fdcc:	e00c      	b.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	3324      	adds	r3, #36	; 0x24
 800fdd2:	2101      	movs	r1, #1
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f001 fb83 	bl	80114e0 <RCCEx_PLL3_Config>
 800fdda:	4603      	mov	r3, r0
 800fddc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800fdde:	e003      	b.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fde0:	2301      	movs	r3, #1
 800fde2:	75fb      	strb	r3, [r7, #23]
      break;
 800fde4:	e000      	b.n	800fde8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800fde6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fde8:	7dfb      	ldrb	r3, [r7, #23]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d10a      	bne.n	800fe04 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fdee:	4b80      	ldr	r3, [pc, #512]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fdf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fdf2:	f023 0207 	bic.w	r2, r3, #7
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdfc:	497c      	ldr	r1, [pc, #496]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fdfe:	4313      	orrs	r3, r2
 800fe00:	658b      	str	r3, [r1, #88]	; 0x58
 800fe02:	e001      	b.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe04:	7dfb      	ldrb	r3, [r7, #23]
 800fe06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	f003 0320 	and.w	r3, r3, #32
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d04b      	beq.n	800feac <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fe1e:	d02e      	beq.n	800fe7e <HAL_RCCEx_PeriphCLKConfig+0x962>
 800fe20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fe24:	d828      	bhi.n	800fe78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fe26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe2a:	d02a      	beq.n	800fe82 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800fe2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe30:	d822      	bhi.n	800fe78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fe32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fe36:	d026      	beq.n	800fe86 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800fe38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fe3c:	d81c      	bhi.n	800fe78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fe3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe42:	d010      	beq.n	800fe66 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800fe44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe48:	d816      	bhi.n	800fe78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d01d      	beq.n	800fe8a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800fe4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe52:	d111      	bne.n	800fe78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	3304      	adds	r3, #4
 800fe58:	2100      	movs	r1, #0
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f001 fa8e 	bl	801137c <RCCEx_PLL2_Config>
 800fe60:	4603      	mov	r3, r0
 800fe62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800fe64:	e012      	b.n	800fe8c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	3324      	adds	r3, #36	; 0x24
 800fe6a:	2102      	movs	r1, #2
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f001 fb37 	bl	80114e0 <RCCEx_PLL3_Config>
 800fe72:	4603      	mov	r3, r0
 800fe74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800fe76:	e009      	b.n	800fe8c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fe78:	2301      	movs	r3, #1
 800fe7a:	75fb      	strb	r3, [r7, #23]
      break;
 800fe7c:	e006      	b.n	800fe8c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fe7e:	bf00      	nop
 800fe80:	e004      	b.n	800fe8c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fe82:	bf00      	nop
 800fe84:	e002      	b.n	800fe8c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fe86:	bf00      	nop
 800fe88:	e000      	b.n	800fe8c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fe8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fe8c:	7dfb      	ldrb	r3, [r7, #23]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d10a      	bne.n	800fea8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800fe92:	4b57      	ldr	r3, [pc, #348]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fe94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fea0:	4953      	ldr	r1, [pc, #332]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fea2:	4313      	orrs	r3, r2
 800fea4:	654b      	str	r3, [r1, #84]	; 0x54
 800fea6:	e001      	b.n	800feac <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fea8:	7dfb      	ldrb	r3, [r7, #23]
 800feaa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d04b      	beq.n	800ff50 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800febe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fec2:	d02e      	beq.n	800ff22 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800fec4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fec8:	d828      	bhi.n	800ff1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800feca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fece:	d02a      	beq.n	800ff26 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800fed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fed4:	d822      	bhi.n	800ff1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800fed6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800feda:	d026      	beq.n	800ff2a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800fedc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fee0:	d81c      	bhi.n	800ff1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800fee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fee6:	d010      	beq.n	800ff0a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800fee8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800feec:	d816      	bhi.n	800ff1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d01d      	beq.n	800ff2e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800fef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fef6:	d111      	bne.n	800ff1c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	3304      	adds	r3, #4
 800fefc:	2100      	movs	r1, #0
 800fefe:	4618      	mov	r0, r3
 800ff00:	f001 fa3c 	bl	801137c <RCCEx_PLL2_Config>
 800ff04:	4603      	mov	r3, r0
 800ff06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ff08:	e012      	b.n	800ff30 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	3324      	adds	r3, #36	; 0x24
 800ff0e:	2102      	movs	r1, #2
 800ff10:	4618      	mov	r0, r3
 800ff12:	f001 fae5 	bl	80114e0 <RCCEx_PLL3_Config>
 800ff16:	4603      	mov	r3, r0
 800ff18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ff1a:	e009      	b.n	800ff30 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	75fb      	strb	r3, [r7, #23]
      break;
 800ff20:	e006      	b.n	800ff30 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ff22:	bf00      	nop
 800ff24:	e004      	b.n	800ff30 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ff26:	bf00      	nop
 800ff28:	e002      	b.n	800ff30 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ff2a:	bf00      	nop
 800ff2c:	e000      	b.n	800ff30 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ff2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ff30:	7dfb      	ldrb	r3, [r7, #23]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d10a      	bne.n	800ff4c <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ff36:	4b2e      	ldr	r3, [pc, #184]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ff38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff3a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff44:	492a      	ldr	r1, [pc, #168]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ff46:	4313      	orrs	r3, r2
 800ff48:	658b      	str	r3, [r1, #88]	; 0x58
 800ff4a:	e001      	b.n	800ff50 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff4c:	7dfb      	ldrb	r3, [r7, #23]
 800ff4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d04d      	beq.n	800fff8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ff62:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ff66:	d02e      	beq.n	800ffc6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800ff68:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ff6c:	d828      	bhi.n	800ffc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ff6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff72:	d02a      	beq.n	800ffca <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800ff74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff78:	d822      	bhi.n	800ffc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ff7a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ff7e:	d026      	beq.n	800ffce <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800ff80:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ff84:	d81c      	bhi.n	800ffc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ff86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ff8a:	d010      	beq.n	800ffae <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800ff8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ff90:	d816      	bhi.n	800ffc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d01d      	beq.n	800ffd2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800ff96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff9a:	d111      	bne.n	800ffc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	3304      	adds	r3, #4
 800ffa0:	2100      	movs	r1, #0
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f001 f9ea 	bl	801137c <RCCEx_PLL2_Config>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ffac:	e012      	b.n	800ffd4 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	3324      	adds	r3, #36	; 0x24
 800ffb2:	2102      	movs	r1, #2
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f001 fa93 	bl	80114e0 <RCCEx_PLL3_Config>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ffbe:	e009      	b.n	800ffd4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	75fb      	strb	r3, [r7, #23]
      break;
 800ffc4:	e006      	b.n	800ffd4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ffc6:	bf00      	nop
 800ffc8:	e004      	b.n	800ffd4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ffca:	bf00      	nop
 800ffcc:	e002      	b.n	800ffd4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ffce:	bf00      	nop
 800ffd0:	e000      	b.n	800ffd4 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ffd2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ffd4:	7dfb      	ldrb	r3, [r7, #23]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d10c      	bne.n	800fff4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ffda:	4b05      	ldr	r3, [pc, #20]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ffdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ffe8:	4901      	ldr	r1, [pc, #4]	; (800fff0 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ffea:	4313      	orrs	r3, r2
 800ffec:	658b      	str	r3, [r1, #88]	; 0x58
 800ffee:	e003      	b.n	800fff8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800fff0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fff4:	7dfb      	ldrb	r3, [r7, #23]
 800fff6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	f003 0308 	and.w	r3, r3, #8
 8010000:	2b00      	cmp	r3, #0
 8010002:	d018      	beq.n	8010036 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801000c:	d10a      	bne.n	8010024 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	3324      	adds	r3, #36	; 0x24
 8010012:	2102      	movs	r1, #2
 8010014:	4618      	mov	r0, r3
 8010016:	f001 fa63 	bl	80114e0 <RCCEx_PLL3_Config>
 801001a:	4603      	mov	r3, r0
 801001c:	2b00      	cmp	r3, #0
 801001e:	d001      	beq.n	8010024 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8010020:	2301      	movs	r3, #1
 8010022:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8010024:	4b8a      	ldr	r3, [pc, #552]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010028:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010030:	4987      	ldr	r1, [pc, #540]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010032:	4313      	orrs	r3, r2
 8010034:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	f003 0310 	and.w	r3, r3, #16
 801003e:	2b00      	cmp	r3, #0
 8010040:	d01a      	beq.n	8010078 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801004c:	d10a      	bne.n	8010064 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	3324      	adds	r3, #36	; 0x24
 8010052:	2102      	movs	r1, #2
 8010054:	4618      	mov	r0, r3
 8010056:	f001 fa43 	bl	80114e0 <RCCEx_PLL3_Config>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d001      	beq.n	8010064 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8010060:	2301      	movs	r3, #1
 8010062:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010064:	4b7a      	ldr	r3, [pc, #488]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010072:	4977      	ldr	r1, [pc, #476]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010074:	4313      	orrs	r3, r2
 8010076:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010080:	2b00      	cmp	r3, #0
 8010082:	d034      	beq.n	80100ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801008a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801008e:	d01d      	beq.n	80100cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8010090:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010094:	d817      	bhi.n	80100c6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8010096:	2b00      	cmp	r3, #0
 8010098:	d003      	beq.n	80100a2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 801009a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801009e:	d009      	beq.n	80100b4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80100a0:	e011      	b.n	80100c6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	3304      	adds	r3, #4
 80100a6:	2100      	movs	r1, #0
 80100a8:	4618      	mov	r0, r3
 80100aa:	f001 f967 	bl	801137c <RCCEx_PLL2_Config>
 80100ae:	4603      	mov	r3, r0
 80100b0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80100b2:	e00c      	b.n	80100ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	3324      	adds	r3, #36	; 0x24
 80100b8:	2102      	movs	r1, #2
 80100ba:	4618      	mov	r0, r3
 80100bc:	f001 fa10 	bl	80114e0 <RCCEx_PLL3_Config>
 80100c0:	4603      	mov	r3, r0
 80100c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80100c4:	e003      	b.n	80100ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80100c6:	2301      	movs	r3, #1
 80100c8:	75fb      	strb	r3, [r7, #23]
      break;
 80100ca:	e000      	b.n	80100ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80100cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80100ce:	7dfb      	ldrb	r3, [r7, #23]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d10a      	bne.n	80100ea <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80100d4:	4b5e      	ldr	r3, [pc, #376]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80100d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80100e2:	495b      	ldr	r1, [pc, #364]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80100e4:	4313      	orrs	r3, r2
 80100e6:	658b      	str	r3, [r1, #88]	; 0x58
 80100e8:	e001      	b.n	80100ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80100ea:	7dfb      	ldrb	r3, [r7, #23]
 80100ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d033      	beq.n	8010162 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010100:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010104:	d01c      	beq.n	8010140 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8010106:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801010a:	d816      	bhi.n	801013a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801010c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010110:	d003      	beq.n	801011a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8010112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010116:	d007      	beq.n	8010128 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8010118:	e00f      	b.n	801013a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801011a:	4b4d      	ldr	r3, [pc, #308]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801011c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801011e:	4a4c      	ldr	r2, [pc, #304]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010124:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8010126:	e00c      	b.n	8010142 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	3324      	adds	r3, #36	; 0x24
 801012c:	2101      	movs	r1, #1
 801012e:	4618      	mov	r0, r3
 8010130:	f001 f9d6 	bl	80114e0 <RCCEx_PLL3_Config>
 8010134:	4603      	mov	r3, r0
 8010136:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8010138:	e003      	b.n	8010142 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801013a:	2301      	movs	r3, #1
 801013c:	75fb      	strb	r3, [r7, #23]
      break;
 801013e:	e000      	b.n	8010142 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8010140:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010142:	7dfb      	ldrb	r3, [r7, #23]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d10a      	bne.n	801015e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010148:	4b41      	ldr	r3, [pc, #260]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801014a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801014c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010156:	493e      	ldr	r1, [pc, #248]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010158:	4313      	orrs	r3, r2
 801015a:	654b      	str	r3, [r1, #84]	; 0x54
 801015c:	e001      	b.n	8010162 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801015e:	7dfb      	ldrb	r3, [r7, #23]
 8010160:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801016a:	2b00      	cmp	r3, #0
 801016c:	d029      	beq.n	80101c2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010172:	2b00      	cmp	r3, #0
 8010174:	d003      	beq.n	801017e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8010176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801017a:	d007      	beq.n	801018c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 801017c:	e00f      	b.n	801019e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801017e:	4b34      	ldr	r3, [pc, #208]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010182:	4a33      	ldr	r2, [pc, #204]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010188:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801018a:	e00b      	b.n	80101a4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	3304      	adds	r3, #4
 8010190:	2102      	movs	r1, #2
 8010192:	4618      	mov	r0, r3
 8010194:	f001 f8f2 	bl	801137c <RCCEx_PLL2_Config>
 8010198:	4603      	mov	r3, r0
 801019a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801019c:	e002      	b.n	80101a4 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 801019e:	2301      	movs	r3, #1
 80101a0:	75fb      	strb	r3, [r7, #23]
      break;
 80101a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80101a4:	7dfb      	ldrb	r3, [r7, #23]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d109      	bne.n	80101be <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80101aa:	4b29      	ldr	r3, [pc, #164]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80101ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101b6:	4926      	ldr	r1, [pc, #152]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80101b8:	4313      	orrs	r3, r2
 80101ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 80101bc:	e001      	b.n	80101c2 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101be:	7dfb      	ldrb	r3, [r7, #23]
 80101c0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d00a      	beq.n	80101e4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	3324      	adds	r3, #36	; 0x24
 80101d2:	2102      	movs	r1, #2
 80101d4:	4618      	mov	r0, r3
 80101d6:	f001 f983 	bl	80114e0 <RCCEx_PLL3_Config>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d001      	beq.n	80101e4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80101e0:	2301      	movs	r3, #1
 80101e2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d033      	beq.n	8010258 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80101f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80101f8:	d017      	beq.n	801022a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 80101fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80101fe:	d811      	bhi.n	8010224 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8010200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010204:	d013      	beq.n	801022e <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8010206:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801020a:	d80b      	bhi.n	8010224 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801020c:	2b00      	cmp	r3, #0
 801020e:	d010      	beq.n	8010232 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8010210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010214:	d106      	bne.n	8010224 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010216:	4b0e      	ldr	r3, [pc, #56]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801021a:	4a0d      	ldr	r2, [pc, #52]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801021c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010220:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8010222:	e007      	b.n	8010234 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010224:	2301      	movs	r3, #1
 8010226:	75fb      	strb	r3, [r7, #23]
      break;
 8010228:	e004      	b.n	8010234 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 801022a:	bf00      	nop
 801022c:	e002      	b.n	8010234 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 801022e:	bf00      	nop
 8010230:	e000      	b.n	8010234 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8010232:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010234:	7dfb      	ldrb	r3, [r7, #23]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d10c      	bne.n	8010254 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801023a:	4b05      	ldr	r3, [pc, #20]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801023c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801023e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010246:	4902      	ldr	r1, [pc, #8]	; (8010250 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010248:	4313      	orrs	r3, r2
 801024a:	654b      	str	r3, [r1, #84]	; 0x54
 801024c:	e004      	b.n	8010258 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 801024e:	bf00      	nop
 8010250:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010254:	7dfb      	ldrb	r3, [r7, #23]
 8010256:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010260:	2b00      	cmp	r3, #0
 8010262:	d008      	beq.n	8010276 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010264:	4b29      	ldr	r3, [pc, #164]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010268:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010270:	4926      	ldr	r1, [pc, #152]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010272:	4313      	orrs	r3, r2
 8010274:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801027e:	2b00      	cmp	r3, #0
 8010280:	d008      	beq.n	8010294 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8010282:	4b22      	ldr	r3, [pc, #136]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010286:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801028e:	491f      	ldr	r1, [pc, #124]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8010290:	4313      	orrs	r3, r2
 8010292:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801029c:	2b00      	cmp	r3, #0
 801029e:	d00d      	beq.n	80102bc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80102a0:	4b1a      	ldr	r3, [pc, #104]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102a2:	691b      	ldr	r3, [r3, #16]
 80102a4:	4a19      	ldr	r2, [pc, #100]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80102aa:	6113      	str	r3, [r2, #16]
 80102ac:	4b17      	ldr	r3, [pc, #92]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102ae:	691a      	ldr	r2, [r3, #16]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80102b6:	4915      	ldr	r1, [pc, #84]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102b8:	4313      	orrs	r3, r2
 80102ba:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	da08      	bge.n	80102d6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80102c4:	4b11      	ldr	r3, [pc, #68]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102d0:	490e      	ldr	r1, [pc, #56]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102d2:	4313      	orrs	r3, r2
 80102d4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d009      	beq.n	80102f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80102e2:	4b0a      	ldr	r3, [pc, #40]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80102f0:	4906      	ldr	r1, [pc, #24]	; (801030c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102f2:	4313      	orrs	r3, r2
 80102f4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80102f6:	7dbb      	ldrb	r3, [r7, #22]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d101      	bne.n	8010300 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 80102fc:	2300      	movs	r3, #0
 80102fe:	e000      	b.n	8010302 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8010300:	2301      	movs	r3, #1
}
 8010302:	4618      	mov	r0, r3
 8010304:	3718      	adds	r7, #24
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}
 801030a:	bf00      	nop
 801030c:	58024400 	.word	0x58024400

08010310 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8010310:	b580      	push	{r7, lr}
 8010312:	b090      	sub	sp, #64	; 0x40
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801031e:	f040 8089 	bne.w	8010434 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8010322:	4b95      	ldr	r3, [pc, #596]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010326:	f003 0307 	and.w	r3, r3, #7
 801032a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 801032c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032e:	2b04      	cmp	r3, #4
 8010330:	d87d      	bhi.n	801042e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8010332:	a201      	add	r2, pc, #4	; (adr r2, 8010338 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8010334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010338:	0801034d 	.word	0x0801034d
 801033c:	08010371 	.word	0x08010371
 8010340:	08010395 	.word	0x08010395
 8010344:	08010429 	.word	0x08010429
 8010348:	080103b9 	.word	0x080103b9
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801034c:	4b8a      	ldr	r3, [pc, #552]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010354:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010358:	d107      	bne.n	801036a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801035a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801035e:	4618      	mov	r0, r3
 8010360:	f000 feba 	bl	80110d8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8010364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010366:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010368:	e3ef      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801036a:	2300      	movs	r3, #0
 801036c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801036e:	e3ec      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010370:	4b81      	ldr	r3, [pc, #516]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010378:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801037c:	d107      	bne.n	801038e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801037e:	f107 0318 	add.w	r3, r7, #24
 8010382:	4618      	mov	r0, r3
 8010384:	f000 fc00 	bl	8010b88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801038c:	e3dd      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801038e:	2300      	movs	r3, #0
 8010390:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010392:	e3da      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010394:	4b78      	ldr	r3, [pc, #480]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801039c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103a0:	d107      	bne.n	80103b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103a2:	f107 030c 	add.w	r3, r7, #12
 80103a6:	4618      	mov	r0, r3
 80103a8:	f000 fd42 	bl	8010e30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80103b0:	e3cb      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80103b2:	2300      	movs	r3, #0
 80103b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80103b6:	e3c8      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80103b8:	4b6f      	ldr	r3, [pc, #444]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80103c0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80103c2:	4b6d      	ldr	r3, [pc, #436]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	f003 0304 	and.w	r3, r3, #4
 80103ca:	2b04      	cmp	r3, #4
 80103cc:	d10c      	bne.n	80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80103ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d109      	bne.n	80103e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80103d4:	4b68      	ldr	r3, [pc, #416]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	08db      	lsrs	r3, r3, #3
 80103da:	f003 0303 	and.w	r3, r3, #3
 80103de:	4a67      	ldr	r2, [pc, #412]	; (801057c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80103e0:	fa22 f303 	lsr.w	r3, r2, r3
 80103e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103e6:	e01e      	b.n	8010426 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80103e8:	4b63      	ldr	r3, [pc, #396]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103f4:	d106      	bne.n	8010404 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80103f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80103fc:	d102      	bne.n	8010404 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80103fe:	4b60      	ldr	r3, [pc, #384]	; (8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010402:	e010      	b.n	8010426 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010404:	4b5c      	ldr	r3, [pc, #368]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801040c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010410:	d106      	bne.n	8010420 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8010412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010414:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010418:	d102      	bne.n	8010420 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 801041a:	4b5a      	ldr	r3, [pc, #360]	; (8010584 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 801041c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801041e:	e002      	b.n	8010426 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8010420:	2300      	movs	r3, #0
 8010422:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8010424:	e391      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010426:	e390      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8010428:	4b57      	ldr	r3, [pc, #348]	; (8010588 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801042a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801042c:	e38d      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 801042e:	2300      	movs	r3, #0
 8010430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010432:	e38a      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801043a:	f040 80a7 	bne.w	801058c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 801043e:	4b4e      	ldr	r3, [pc, #312]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010442:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8010446:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8010448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801044a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801044e:	d054      	beq.n	80104fa <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8010450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010452:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010456:	f200 808b 	bhi.w	8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 801045a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801045c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010460:	f000 8083 	beq.w	801056a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8010464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010466:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801046a:	f200 8081 	bhi.w	8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 801046e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010474:	d02f      	beq.n	80104d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8010476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010478:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801047c:	d878      	bhi.n	8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 801047e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010480:	2b00      	cmp	r3, #0
 8010482:	d004      	beq.n	801048e <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8010484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010486:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801048a:	d012      	beq.n	80104b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 801048c:	e070      	b.n	8010570 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801048e:	4b3a      	ldr	r3, [pc, #232]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010496:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801049a:	d107      	bne.n	80104ac <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801049c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104a0:	4618      	mov	r0, r3
 80104a2:	f000 fe19 	bl	80110d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80104a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80104aa:	e34e      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80104ac:	2300      	movs	r3, #0
 80104ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80104b0:	e34b      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80104b2:	4b31      	ldr	r3, [pc, #196]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80104be:	d107      	bne.n	80104d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104c0:	f107 0318 	add.w	r3, r7, #24
 80104c4:	4618      	mov	r0, r3
 80104c6:	f000 fb5f 	bl	8010b88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80104ce:	e33c      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80104d0:	2300      	movs	r3, #0
 80104d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80104d4:	e339      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80104d6:	4b28      	ldr	r3, [pc, #160]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104e2:	d107      	bne.n	80104f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104e4:	f107 030c 	add.w	r3, r7, #12
 80104e8:	4618      	mov	r0, r3
 80104ea:	f000 fca1 	bl	8010e30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80104f2:	e32a      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80104f4:	2300      	movs	r3, #0
 80104f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80104f8:	e327      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80104fa:	4b1f      	ldr	r3, [pc, #124]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80104fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010502:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010504:	4b1c      	ldr	r3, [pc, #112]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	f003 0304 	and.w	r3, r3, #4
 801050c:	2b04      	cmp	r3, #4
 801050e:	d10c      	bne.n	801052a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8010510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010512:	2b00      	cmp	r3, #0
 8010514:	d109      	bne.n	801052a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010516:	4b18      	ldr	r3, [pc, #96]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	08db      	lsrs	r3, r3, #3
 801051c:	f003 0303 	and.w	r3, r3, #3
 8010520:	4a16      	ldr	r2, [pc, #88]	; (801057c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8010522:	fa22 f303 	lsr.w	r3, r2, r3
 8010526:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010528:	e01e      	b.n	8010568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801052a:	4b13      	ldr	r3, [pc, #76]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010536:	d106      	bne.n	8010546 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8010538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801053a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801053e:	d102      	bne.n	8010546 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8010540:	4b0f      	ldr	r3, [pc, #60]	; (8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010544:	e010      	b.n	8010568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010546:	4b0c      	ldr	r3, [pc, #48]	; (8010578 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801054e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010552:	d106      	bne.n	8010562 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8010554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010556:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801055a:	d102      	bne.n	8010562 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 801055c:	4b09      	ldr	r3, [pc, #36]	; (8010584 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 801055e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010560:	e002      	b.n	8010568 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8010562:	2300      	movs	r3, #0
 8010564:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8010566:	e2f0      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010568:	e2ef      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801056a:	4b07      	ldr	r3, [pc, #28]	; (8010588 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 801056c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801056e:	e2ec      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8010570:	2300      	movs	r3, #0
 8010572:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010574:	e2e9      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010576:	bf00      	nop
 8010578:	58024400 	.word	0x58024400
 801057c:	03d09000 	.word	0x03d09000
 8010580:	003d0900 	.word	0x003d0900
 8010584:	017d7840 	.word	0x017d7840
 8010588:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010592:	f040 809c 	bne.w	80106ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8010596:	4b9d      	ldr	r3, [pc, #628]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801059a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801059e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80105a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80105a6:	d054      	beq.n	8010652 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80105a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80105ae:	f200 808b 	bhi.w	80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80105b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80105b8:	f000 8083 	beq.w	80106c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80105bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80105c2:	f200 8081 	bhi.w	80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80105c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105cc:	d02f      	beq.n	801062e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80105ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105d4:	d878      	bhi.n	80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80105d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d004      	beq.n	80105e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80105dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80105e2:	d012      	beq.n	801060a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80105e4:	e070      	b.n	80106c8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80105e6:	4b89      	ldr	r3, [pc, #548]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105f2:	d107      	bne.n	8010604 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80105f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105f8:	4618      	mov	r0, r3
 80105fa:	f000 fd6d 	bl	80110d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80105fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010600:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010602:	e2a2      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010604:	2300      	movs	r3, #0
 8010606:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010608:	e29f      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801060a:	4b80      	ldr	r3, [pc, #512]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010616:	d107      	bne.n	8010628 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010618:	f107 0318 	add.w	r3, r7, #24
 801061c:	4618      	mov	r0, r3
 801061e:	f000 fab3 	bl	8010b88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8010626:	e290      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010628:	2300      	movs	r3, #0
 801062a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801062c:	e28d      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801062e:	4b77      	ldr	r3, [pc, #476]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010636:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801063a:	d107      	bne.n	801064c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801063c:	f107 030c 	add.w	r3, r7, #12
 8010640:	4618      	mov	r0, r3
 8010642:	f000 fbf5 	bl	8010e30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801064a:	e27e      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801064c:	2300      	movs	r3, #0
 801064e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010650:	e27b      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8010652:	4b6e      	ldr	r3, [pc, #440]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010656:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801065a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801065c:	4b6b      	ldr	r3, [pc, #428]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f003 0304 	and.w	r3, r3, #4
 8010664:	2b04      	cmp	r3, #4
 8010666:	d10c      	bne.n	8010682 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801066a:	2b00      	cmp	r3, #0
 801066c:	d109      	bne.n	8010682 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801066e:	4b67      	ldr	r3, [pc, #412]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	08db      	lsrs	r3, r3, #3
 8010674:	f003 0303 	and.w	r3, r3, #3
 8010678:	4a65      	ldr	r2, [pc, #404]	; (8010810 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 801067a:	fa22 f303 	lsr.w	r3, r2, r3
 801067e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010680:	e01e      	b.n	80106c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010682:	4b62      	ldr	r3, [pc, #392]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801068a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801068e:	d106      	bne.n	801069e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8010690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010692:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010696:	d102      	bne.n	801069e <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8010698:	4b5e      	ldr	r3, [pc, #376]	; (8010814 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 801069a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801069c:	e010      	b.n	80106c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801069e:	4b5b      	ldr	r3, [pc, #364]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106aa:	d106      	bne.n	80106ba <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80106ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106b2:	d102      	bne.n	80106ba <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80106b4:	4b58      	ldr	r3, [pc, #352]	; (8010818 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80106b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106b8:	e002      	b.n	80106c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80106ba:	2300      	movs	r3, #0
 80106bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80106be:	e244      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80106c0:	e243      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80106c2:	4b56      	ldr	r3, [pc, #344]	; (801081c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80106c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80106c6:	e240      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80106c8:	2300      	movs	r3, #0
 80106ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80106cc:	e23d      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106d4:	f040 80a7 	bne.w	8010826 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80106d8:	4b4c      	ldr	r3, [pc, #304]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80106da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106dc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80106e0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80106e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80106e8:	d055      	beq.n	8010796 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80106f0:	f200 8096 	bhi.w	8010820 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80106f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80106fa:	f000 8084 	beq.w	8010806 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80106fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010704:	f200 808c 	bhi.w	8010820 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8010708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801070e:	d030      	beq.n	8010772 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8010710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010716:	f200 8083 	bhi.w	8010820 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 801071a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071c:	2b00      	cmp	r3, #0
 801071e:	d004      	beq.n	801072a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8010720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010726:	d012      	beq.n	801074e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 8010728:	e07a      	b.n	8010820 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801072a:	4b38      	ldr	r3, [pc, #224]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 801072c:	681b      	ldr	r3, [r3, #0]
 801072e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010736:	d107      	bne.n	8010748 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801073c:	4618      	mov	r0, r3
 801073e:	f000 fccb 	bl	80110d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010744:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010746:	e200      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010748:	2300      	movs	r3, #0
 801074a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801074c:	e1fd      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801074e:	4b2f      	ldr	r3, [pc, #188]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801075a:	d107      	bne.n	801076c <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801075c:	f107 0318 	add.w	r3, r7, #24
 8010760:	4618      	mov	r0, r3
 8010762:	f000 fa11 	bl	8010b88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801076a:	e1ee      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801076c:	2300      	movs	r3, #0
 801076e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010770:	e1eb      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010772:	4b26      	ldr	r3, [pc, #152]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801077a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801077e:	d107      	bne.n	8010790 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010780:	f107 030c 	add.w	r3, r7, #12
 8010784:	4618      	mov	r0, r3
 8010786:	f000 fb53 	bl	8010e30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801078e:	e1dc      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010790:	2300      	movs	r3, #0
 8010792:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010794:	e1d9      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8010796:	4b1d      	ldr	r3, [pc, #116]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801079a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801079e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80107a0:	4b1a      	ldr	r3, [pc, #104]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	f003 0304 	and.w	r3, r3, #4
 80107a8:	2b04      	cmp	r3, #4
 80107aa:	d10c      	bne.n	80107c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80107ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d109      	bne.n	80107c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80107b2:	4b16      	ldr	r3, [pc, #88]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	08db      	lsrs	r3, r3, #3
 80107b8:	f003 0303 	and.w	r3, r3, #3
 80107bc:	4a14      	ldr	r2, [pc, #80]	; (8010810 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80107be:	fa22 f303 	lsr.w	r3, r2, r3
 80107c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107c4:	e01e      	b.n	8010804 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80107c6:	4b11      	ldr	r3, [pc, #68]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107d2:	d106      	bne.n	80107e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 80107d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107da:	d102      	bne.n	80107e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80107dc:	4b0d      	ldr	r3, [pc, #52]	; (8010814 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80107de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107e0:	e010      	b.n	8010804 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80107e2:	4b0a      	ldr	r3, [pc, #40]	; (801080c <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80107ee:	d106      	bne.n	80107fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 80107f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80107f6:	d102      	bne.n	80107fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80107f8:	4b07      	ldr	r3, [pc, #28]	; (8010818 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80107fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107fc:	e002      	b.n	8010804 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80107fe:	2300      	movs	r3, #0
 8010800:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8010802:	e1a2      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010804:	e1a1      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8010806:	4b05      	ldr	r3, [pc, #20]	; (801081c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8010808:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801080a:	e19e      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801080c:	58024400 	.word	0x58024400
 8010810:	03d09000 	.word	0x03d09000
 8010814:	003d0900 	.word	0x003d0900
 8010818:	017d7840 	.word	0x017d7840
 801081c:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8010820:	2300      	movs	r3, #0
 8010822:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010824:	e191      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801082c:	d173      	bne.n	8010916 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 801082e:	4b9b      	ldr	r3, [pc, #620]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010832:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010836:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8010838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801083a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801083e:	d02f      	beq.n	80108a0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8010840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010842:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010846:	d863      	bhi.n	8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8010848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084a:	2b00      	cmp	r3, #0
 801084c:	d004      	beq.n	8010858 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 801084e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010854:	d012      	beq.n	801087c <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 8010856:	e05b      	b.n	8010910 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010858:	4b90      	ldr	r3, [pc, #576]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010860:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010864:	d107      	bne.n	8010876 <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010866:	f107 0318 	add.w	r3, r7, #24
 801086a:	4618      	mov	r0, r3
 801086c:	f000 f98c 	bl	8010b88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010870:	69bb      	ldr	r3, [r7, #24]
 8010872:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010874:	e169      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010876:	2300      	movs	r3, #0
 8010878:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801087a:	e166      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801087c:	4b87      	ldr	r3, [pc, #540]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010888:	d107      	bne.n	801089a <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801088a:	f107 030c 	add.w	r3, r7, #12
 801088e:	4618      	mov	r0, r3
 8010890:	f000 face 	bl	8010e30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8010894:	697b      	ldr	r3, [r7, #20]
 8010896:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010898:	e157      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801089a:	2300      	movs	r3, #0
 801089c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801089e:	e154      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80108a0:	4b7e      	ldr	r3, [pc, #504]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80108a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80108a8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80108aa:	4b7c      	ldr	r3, [pc, #496]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	f003 0304 	and.w	r3, r3, #4
 80108b2:	2b04      	cmp	r3, #4
 80108b4:	d10c      	bne.n	80108d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80108b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d109      	bne.n	80108d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80108bc:	4b77      	ldr	r3, [pc, #476]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	08db      	lsrs	r3, r3, #3
 80108c2:	f003 0303 	and.w	r3, r3, #3
 80108c6:	4a76      	ldr	r2, [pc, #472]	; (8010aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80108c8:	fa22 f303 	lsr.w	r3, r2, r3
 80108cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108ce:	e01e      	b.n	801090e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80108d0:	4b72      	ldr	r3, [pc, #456]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108dc:	d106      	bne.n	80108ec <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 80108de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80108e4:	d102      	bne.n	80108ec <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80108e6:	4b6f      	ldr	r3, [pc, #444]	; (8010aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 80108e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108ea:	e010      	b.n	801090e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80108ec:	4b6b      	ldr	r3, [pc, #428]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80108f8:	d106      	bne.n	8010908 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 80108fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010900:	d102      	bne.n	8010908 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8010902:	4b69      	ldr	r3, [pc, #420]	; (8010aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8010904:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010906:	e002      	b.n	801090e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8010908:	2300      	movs	r3, #0
 801090a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 801090c:	e11d      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801090e:	e11c      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8010910:	2300      	movs	r3, #0
 8010912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010914:	e119      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801091c:	d133      	bne.n	8010986 <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 801091e:	4b5f      	ldr	r3, [pc, #380]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010926:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8010928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801092a:	2b00      	cmp	r3, #0
 801092c:	d004      	beq.n	8010938 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 801092e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010934:	d012      	beq.n	801095c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8010936:	e023      	b.n	8010980 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010938:	4b58      	ldr	r3, [pc, #352]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010940:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010944:	d107      	bne.n	8010956 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010946:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801094a:	4618      	mov	r0, r3
 801094c:	f000 fbc4 	bl	80110d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010952:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010954:	e0f9      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010956:	2300      	movs	r3, #0
 8010958:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801095a:	e0f6      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801095c:	4b4f      	ldr	r3, [pc, #316]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010964:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010968:	d107      	bne.n	801097a <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801096a:	f107 0318 	add.w	r3, r7, #24
 801096e:	4618      	mov	r0, r3
 8010970:	f000 f90a 	bl	8010b88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8010974:	6a3b      	ldr	r3, [r7, #32]
 8010976:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010978:	e0e7      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 801097a:	2300      	movs	r3, #0
 801097c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801097e:	e0e4      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8010980:	2300      	movs	r3, #0
 8010982:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010984:	e0e1      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801098c:	f040 808e 	bne.w	8010aac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8010990:	4b42      	ldr	r3, [pc, #264]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010994:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8010998:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 801099a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801099c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80109a0:	d06b      	beq.n	8010a7a <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80109a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80109a8:	d874      	bhi.n	8010a94 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80109aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109b0:	d056      	beq.n	8010a60 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 80109b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109b8:	d86c      	bhi.n	8010a94 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80109ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80109c0:	d03b      	beq.n	8010a3a <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80109c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80109c8:	d864      	bhi.n	8010a94 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80109ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109d0:	d021      	beq.n	8010a16 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 80109d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109d8:	d85c      	bhi.n	8010a94 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80109da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d004      	beq.n	80109ea <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80109e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80109e6:	d004      	beq.n	80109f2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 80109e8:	e054      	b.n	8010a94 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80109ea:	f000 f8b7 	bl	8010b5c <HAL_RCCEx_GetD3PCLK1Freq>
 80109ee:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80109f0:	e0ab      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80109f2:	4b2a      	ldr	r3, [pc, #168]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80109fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80109fe:	d107      	bne.n	8010a10 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a00:	f107 0318 	add.w	r3, r7, #24
 8010a04:	4618      	mov	r0, r3
 8010a06:	f000 f8bf 	bl	8010b88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010a0a:	69fb      	ldr	r3, [r7, #28]
 8010a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010a0e:	e09c      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010a10:	2300      	movs	r3, #0
 8010a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a14:	e099      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a16:	4b21      	ldr	r3, [pc, #132]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a22:	d107      	bne.n	8010a34 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a24:	f107 030c 	add.w	r3, r7, #12
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f000 fa01 	bl	8010e30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010a32:	e08a      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010a34:	2300      	movs	r3, #0
 8010a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a38:	e087      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010a3a:	4b18      	ldr	r3, [pc, #96]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	f003 0304 	and.w	r3, r3, #4
 8010a42:	2b04      	cmp	r3, #4
 8010a44:	d109      	bne.n	8010a5a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010a46:	4b15      	ldr	r3, [pc, #84]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	08db      	lsrs	r3, r3, #3
 8010a4c:	f003 0303 	and.w	r3, r3, #3
 8010a50:	4a13      	ldr	r2, [pc, #76]	; (8010aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8010a52:	fa22 f303 	lsr.w	r3, r2, r3
 8010a56:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010a58:	e077      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a5e:	e074      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010a60:	4b0e      	ldr	r3, [pc, #56]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a6c:	d102      	bne.n	8010a74 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 8010a6e:	4b0d      	ldr	r3, [pc, #52]	; (8010aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8010a70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010a72:	e06a      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010a74:	2300      	movs	r3, #0
 8010a76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a78:	e067      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010a7a:	4b08      	ldr	r3, [pc, #32]	; (8010a9c <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010a86:	d102      	bne.n	8010a8e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 8010a88:	4b07      	ldr	r3, [pc, #28]	; (8010aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8010a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010a8c:	e05d      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010a8e:	2300      	movs	r3, #0
 8010a90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a92:	e05a      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8010a94:	2300      	movs	r3, #0
 8010a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a98:	e057      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010a9a:	bf00      	nop
 8010a9c:	58024400 	.word	0x58024400
 8010aa0:	03d09000 	.word	0x03d09000
 8010aa4:	003d0900 	.word	0x003d0900
 8010aa8:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ab2:	d148      	bne.n	8010b46 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8010ab4:	4b27      	ldr	r3, [pc, #156]	; (8010b54 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8010ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ab8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010abc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8010abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ac4:	d02a      	beq.n	8010b1c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8010ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010acc:	d838      	bhi.n	8010b40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8010ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d004      	beq.n	8010ade <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 8010ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010ada:	d00d      	beq.n	8010af8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8010adc:	e030      	b.n	8010b40 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010ade:	4b1d      	ldr	r3, [pc, #116]	; (8010b54 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010ae6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010aea:	d102      	bne.n	8010af2 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 8010aec:	4b1a      	ldr	r3, [pc, #104]	; (8010b58 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8010aee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010af0:	e02b      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010af2:	2300      	movs	r3, #0
 8010af4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010af6:	e028      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010af8:	4b16      	ldr	r3, [pc, #88]	; (8010b54 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010b00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010b04:	d107      	bne.n	8010b16 <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	f000 fae4 	bl	80110d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b12:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010b14:	e019      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010b16:	2300      	movs	r3, #0
 8010b18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010b1a:	e016      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010b1c:	4b0d      	ldr	r3, [pc, #52]	; (8010b54 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010b28:	d107      	bne.n	8010b3a <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b2a:	f107 0318 	add.w	r3, r7, #24
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f000 f82a 	bl	8010b88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010b38:	e007      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010b3e:	e004      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8010b40:	2300      	movs	r3, #0
 8010b42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010b44:	e001      	b.n	8010b4a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 8010b46:	2300      	movs	r3, #0
 8010b48:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8010b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3740      	adds	r7, #64	; 0x40
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}
 8010b54:	58024400 	.word	0x58024400
 8010b58:	017d7840 	.word	0x017d7840

08010b5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010b60:	f7fe fc80 	bl	800f464 <HAL_RCC_GetHCLKFreq>
 8010b64:	4602      	mov	r2, r0
 8010b66:	4b06      	ldr	r3, [pc, #24]	; (8010b80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010b68:	6a1b      	ldr	r3, [r3, #32]
 8010b6a:	091b      	lsrs	r3, r3, #4
 8010b6c:	f003 0307 	and.w	r3, r3, #7
 8010b70:	4904      	ldr	r1, [pc, #16]	; (8010b84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010b72:	5ccb      	ldrb	r3, [r1, r3]
 8010b74:	f003 031f 	and.w	r3, r3, #31
 8010b78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	58024400 	.word	0x58024400
 8010b84:	08018400 	.word	0x08018400

08010b88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8010b88:	b480      	push	{r7}
 8010b8a:	b089      	sub	sp, #36	; 0x24
 8010b8c:	af00      	add	r7, sp, #0
 8010b8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010b90:	4ba1      	ldr	r3, [pc, #644]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b94:	f003 0303 	and.w	r3, r3, #3
 8010b98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8010b9a:	4b9f      	ldr	r3, [pc, #636]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b9e:	0b1b      	lsrs	r3, r3, #12
 8010ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010ba4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010ba6:	4b9c      	ldr	r3, [pc, #624]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010baa:	091b      	lsrs	r3, r3, #4
 8010bac:	f003 0301 	and.w	r3, r3, #1
 8010bb0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010bb2:	4b99      	ldr	r3, [pc, #612]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bb6:	08db      	lsrs	r3, r3, #3
 8010bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010bbc:	693a      	ldr	r2, [r7, #16]
 8010bbe:	fb02 f303 	mul.w	r3, r2, r3
 8010bc2:	ee07 3a90 	vmov	s15, r3
 8010bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	f000 8111 	beq.w	8010df8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010bd6:	69bb      	ldr	r3, [r7, #24]
 8010bd8:	2b02      	cmp	r3, #2
 8010bda:	f000 8083 	beq.w	8010ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010bde:	69bb      	ldr	r3, [r7, #24]
 8010be0:	2b02      	cmp	r3, #2
 8010be2:	f200 80a1 	bhi.w	8010d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010be6:	69bb      	ldr	r3, [r7, #24]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d003      	beq.n	8010bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010bec:	69bb      	ldr	r3, [r7, #24]
 8010bee:	2b01      	cmp	r3, #1
 8010bf0:	d056      	beq.n	8010ca0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010bf2:	e099      	b.n	8010d28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010bf4:	4b88      	ldr	r3, [pc, #544]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	f003 0320 	and.w	r3, r3, #32
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d02d      	beq.n	8010c5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010c00:	4b85      	ldr	r3, [pc, #532]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	08db      	lsrs	r3, r3, #3
 8010c06:	f003 0303 	and.w	r3, r3, #3
 8010c0a:	4a84      	ldr	r2, [pc, #528]	; (8010e1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8010c10:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	ee07 3a90 	vmov	s15, r3
 8010c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c1c:	697b      	ldr	r3, [r7, #20]
 8010c1e:	ee07 3a90 	vmov	s15, r3
 8010c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c2a:	4b7b      	ldr	r3, [pc, #492]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c32:	ee07 3a90 	vmov	s15, r3
 8010c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8010c5a:	e087      	b.n	8010d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	ee07 3a90 	vmov	s15, r3
 8010c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010e24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c6e:	4b6a      	ldr	r3, [pc, #424]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c76:	ee07 3a90 	vmov	s15, r3
 8010c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010c9e:	e065      	b.n	8010d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010ca0:	697b      	ldr	r3, [r7, #20]
 8010ca2:	ee07 3a90 	vmov	s15, r3
 8010ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010caa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010cb2:	4b59      	ldr	r3, [pc, #356]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cba:	ee07 3a90 	vmov	s15, r3
 8010cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010cc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010ce2:	e043      	b.n	8010d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	ee07 3a90 	vmov	s15, r3
 8010cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010e2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010cf6:	4b48      	ldr	r3, [pc, #288]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cfe:	ee07 3a90 	vmov	s15, r3
 8010d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010d26:	e021      	b.n	8010d6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010d28:	697b      	ldr	r3, [r7, #20]
 8010d2a:	ee07 3a90 	vmov	s15, r3
 8010d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d3a:	4b37      	ldr	r3, [pc, #220]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d42:	ee07 3a90 	vmov	s15, r3
 8010d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010e20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010d6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8010d6c:	4b2a      	ldr	r3, [pc, #168]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d70:	0a5b      	lsrs	r3, r3, #9
 8010d72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d76:	ee07 3a90 	vmov	s15, r3
 8010d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d92:	ee17 2a90 	vmov	r2, s15
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8010d9a:	4b1f      	ldr	r3, [pc, #124]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d9e:	0c1b      	lsrs	r3, r3, #16
 8010da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010da4:	ee07 3a90 	vmov	s15, r3
 8010da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8010db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010dc0:	ee17 2a90 	vmov	r2, s15
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8010dc8:	4b13      	ldr	r3, [pc, #76]	; (8010e18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dcc:	0e1b      	lsrs	r3, r3, #24
 8010dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dd2:	ee07 3a90 	vmov	s15, r3
 8010dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8010de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010dee:	ee17 2a90 	vmov	r2, s15
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010df6:	e008      	b.n	8010e0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	2200      	movs	r2, #0
 8010e02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2200      	movs	r2, #0
 8010e08:	609a      	str	r2, [r3, #8]
}
 8010e0a:	bf00      	nop
 8010e0c:	3724      	adds	r7, #36	; 0x24
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	58024400 	.word	0x58024400
 8010e1c:	03d09000 	.word	0x03d09000
 8010e20:	46000000 	.word	0x46000000
 8010e24:	4c742400 	.word	0x4c742400
 8010e28:	4a742400 	.word	0x4a742400
 8010e2c:	4bbebc20 	.word	0x4bbebc20

08010e30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8010e30:	b480      	push	{r7}
 8010e32:	b089      	sub	sp, #36	; 0x24
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010e38:	4ba1      	ldr	r3, [pc, #644]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e3c:	f003 0303 	and.w	r3, r3, #3
 8010e40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8010e42:	4b9f      	ldr	r3, [pc, #636]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e46:	0d1b      	lsrs	r3, r3, #20
 8010e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010e4e:	4b9c      	ldr	r3, [pc, #624]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e52:	0a1b      	lsrs	r3, r3, #8
 8010e54:	f003 0301 	and.w	r3, r3, #1
 8010e58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8010e5a:	4b99      	ldr	r3, [pc, #612]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e5e:	08db      	lsrs	r3, r3, #3
 8010e60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e64:	693a      	ldr	r2, [r7, #16]
 8010e66:	fb02 f303 	mul.w	r3, r2, r3
 8010e6a:	ee07 3a90 	vmov	s15, r3
 8010e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f000 8111 	beq.w	80110a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010e7e:	69bb      	ldr	r3, [r7, #24]
 8010e80:	2b02      	cmp	r3, #2
 8010e82:	f000 8083 	beq.w	8010f8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	2b02      	cmp	r3, #2
 8010e8a:	f200 80a1 	bhi.w	8010fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010e8e:	69bb      	ldr	r3, [r7, #24]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d003      	beq.n	8010e9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010e94:	69bb      	ldr	r3, [r7, #24]
 8010e96:	2b01      	cmp	r3, #1
 8010e98:	d056      	beq.n	8010f48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010e9a:	e099      	b.n	8010fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010e9c:	4b88      	ldr	r3, [pc, #544]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f003 0320 	and.w	r3, r3, #32
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d02d      	beq.n	8010f04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010ea8:	4b85      	ldr	r3, [pc, #532]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	08db      	lsrs	r3, r3, #3
 8010eae:	f003 0303 	and.w	r3, r3, #3
 8010eb2:	4a84      	ldr	r2, [pc, #528]	; (80110c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8010eb8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010eba:	68bb      	ldr	r3, [r7, #8]
 8010ebc:	ee07 3a90 	vmov	s15, r3
 8010ec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	ee07 3a90 	vmov	s15, r3
 8010eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ece:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ed2:	4b7b      	ldr	r3, [pc, #492]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010eda:	ee07 3a90 	vmov	s15, r3
 8010ede:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ee2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ee6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80110c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010eea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ef2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ef6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010efe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8010f02:	e087      	b.n	8011014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010f04:	697b      	ldr	r3, [r7, #20]
 8010f06:	ee07 3a90 	vmov	s15, r3
 8010f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80110cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010f12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f16:	4b6a      	ldr	r3, [pc, #424]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f1e:	ee07 3a90 	vmov	s15, r3
 8010f22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f26:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80110c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010f2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010f46:	e065      	b.n	8011014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	ee07 3a90 	vmov	s15, r3
 8010f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80110d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f5a:	4b59      	ldr	r3, [pc, #356]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f62:	ee07 3a90 	vmov	s15, r3
 8010f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80110c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010f8a:	e043      	b.n	8011014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	ee07 3a90 	vmov	s15, r3
 8010f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80110d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f9e:	4b48      	ldr	r3, [pc, #288]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fa6:	ee07 3a90 	vmov	s15, r3
 8010faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8010fb2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80110c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010fce:	e021      	b.n	8011014 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	ee07 3a90 	vmov	s15, r3
 8010fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fda:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80110d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010fe2:	4b37      	ldr	r3, [pc, #220]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fea:	ee07 3a90 	vmov	s15, r3
 8010fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8010ff6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80110c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801100a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801100e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011012:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8011014:	4b2a      	ldr	r3, [pc, #168]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011018:	0a5b      	lsrs	r3, r3, #9
 801101a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801101e:	ee07 3a90 	vmov	s15, r3
 8011022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801102a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801102e:	edd7 6a07 	vldr	s13, [r7, #28]
 8011032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801103a:	ee17 2a90 	vmov	r2, s15
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8011042:	4b1f      	ldr	r3, [pc, #124]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011046:	0c1b      	lsrs	r3, r3, #16
 8011048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801104c:	ee07 3a90 	vmov	s15, r3
 8011050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011058:	ee37 7a87 	vadd.f32	s14, s15, s14
 801105c:	edd7 6a07 	vldr	s13, [r7, #28]
 8011060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011068:	ee17 2a90 	vmov	r2, s15
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8011070:	4b13      	ldr	r3, [pc, #76]	; (80110c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8011072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011074:	0e1b      	lsrs	r3, r3, #24
 8011076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801107a:	ee07 3a90 	vmov	s15, r3
 801107e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011086:	ee37 7a87 	vadd.f32	s14, s15, s14
 801108a:	edd7 6a07 	vldr	s13, [r7, #28]
 801108e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011096:	ee17 2a90 	vmov	r2, s15
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801109e:	e008      	b.n	80110b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	2200      	movs	r2, #0
 80110a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2200      	movs	r2, #0
 80110aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2200      	movs	r2, #0
 80110b0:	609a      	str	r2, [r3, #8]
}
 80110b2:	bf00      	nop
 80110b4:	3724      	adds	r7, #36	; 0x24
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	58024400 	.word	0x58024400
 80110c4:	03d09000 	.word	0x03d09000
 80110c8:	46000000 	.word	0x46000000
 80110cc:	4c742400 	.word	0x4c742400
 80110d0:	4a742400 	.word	0x4a742400
 80110d4:	4bbebc20 	.word	0x4bbebc20

080110d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80110d8:	b480      	push	{r7}
 80110da:	b089      	sub	sp, #36	; 0x24
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80110e0:	4ba0      	ldr	r3, [pc, #640]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110e4:	f003 0303 	and.w	r3, r3, #3
 80110e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80110ea:	4b9e      	ldr	r3, [pc, #632]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110ee:	091b      	lsrs	r3, r3, #4
 80110f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80110f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80110f6:	4b9b      	ldr	r3, [pc, #620]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110fa:	f003 0301 	and.w	r3, r3, #1
 80110fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8011100:	4b98      	ldr	r3, [pc, #608]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011104:	08db      	lsrs	r3, r3, #3
 8011106:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801110a:	693a      	ldr	r2, [r7, #16]
 801110c:	fb02 f303 	mul.w	r3, r2, r3
 8011110:	ee07 3a90 	vmov	s15, r3
 8011114:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011118:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	2b00      	cmp	r3, #0
 8011120:	f000 8111 	beq.w	8011346 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8011124:	69bb      	ldr	r3, [r7, #24]
 8011126:	2b02      	cmp	r3, #2
 8011128:	f000 8083 	beq.w	8011232 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801112c:	69bb      	ldr	r3, [r7, #24]
 801112e:	2b02      	cmp	r3, #2
 8011130:	f200 80a1 	bhi.w	8011276 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8011134:	69bb      	ldr	r3, [r7, #24]
 8011136:	2b00      	cmp	r3, #0
 8011138:	d003      	beq.n	8011142 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801113a:	69bb      	ldr	r3, [r7, #24]
 801113c:	2b01      	cmp	r3, #1
 801113e:	d056      	beq.n	80111ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011140:	e099      	b.n	8011276 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011142:	4b88      	ldr	r3, [pc, #544]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	f003 0320 	and.w	r3, r3, #32
 801114a:	2b00      	cmp	r3, #0
 801114c:	d02d      	beq.n	80111aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801114e:	4b85      	ldr	r3, [pc, #532]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	08db      	lsrs	r3, r3, #3
 8011154:	f003 0303 	and.w	r3, r3, #3
 8011158:	4a83      	ldr	r2, [pc, #524]	; (8011368 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801115a:	fa22 f303 	lsr.w	r3, r2, r3
 801115e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	ee07 3a90 	vmov	s15, r3
 8011166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	ee07 3a90 	vmov	s15, r3
 8011170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011174:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011178:	4b7a      	ldr	r3, [pc, #488]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801117a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801117c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011180:	ee07 3a90 	vmov	s15, r3
 8011184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011188:	ed97 6a03 	vldr	s12, [r7, #12]
 801118c:	eddf 5a77 	vldr	s11, [pc, #476]	; 801136c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011190:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011194:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011198:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801119c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111a4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80111a8:	e087      	b.n	80112ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	ee07 3a90 	vmov	s15, r3
 80111b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111b4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011370 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80111b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111bc:	4b69      	ldr	r3, [pc, #420]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111c4:	ee07 3a90 	vmov	s15, r3
 80111c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80111d0:	eddf 5a66 	vldr	s11, [pc, #408]	; 801136c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80111d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111e8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80111ec:	e065      	b.n	80112ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	ee07 3a90 	vmov	s15, r3
 80111f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111f8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8011374 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80111fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011200:	4b58      	ldr	r3, [pc, #352]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011208:	ee07 3a90 	vmov	s15, r3
 801120c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011210:	ed97 6a03 	vldr	s12, [r7, #12]
 8011214:	eddf 5a55 	vldr	s11, [pc, #340]	; 801136c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011218:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801121c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011224:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011228:	ee67 7a27 	vmul.f32	s15, s14, s15
 801122c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011230:	e043      	b.n	80112ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	ee07 3a90 	vmov	s15, r3
 8011238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801123c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011378 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011240:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011244:	4b47      	ldr	r3, [pc, #284]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801124c:	ee07 3a90 	vmov	s15, r3
 8011250:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011254:	ed97 6a03 	vldr	s12, [r7, #12]
 8011258:	eddf 5a44 	vldr	s11, [pc, #272]	; 801136c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801125c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011260:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011264:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011268:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801126c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011270:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011274:	e021      	b.n	80112ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011276:	697b      	ldr	r3, [r7, #20]
 8011278:	ee07 3a90 	vmov	s15, r3
 801127c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011280:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011370 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8011284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011288:	4b36      	ldr	r3, [pc, #216]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801128c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011290:	ee07 3a90 	vmov	s15, r3
 8011294:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011298:	ed97 6a03 	vldr	s12, [r7, #12]
 801129c:	eddf 5a33 	vldr	s11, [pc, #204]	; 801136c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80112a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80112a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80112b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80112ba:	4b2a      	ldr	r3, [pc, #168]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80112bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112be:	0a5b      	lsrs	r3, r3, #9
 80112c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112c4:	ee07 3a90 	vmov	s15, r3
 80112c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80112d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112e0:	ee17 2a90 	vmov	r2, s15
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80112e8:	4b1e      	ldr	r3, [pc, #120]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80112ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112ec:	0c1b      	lsrs	r3, r3, #16
 80112ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112f2:	ee07 3a90 	vmov	s15, r3
 80112f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011302:	edd7 6a07 	vldr	s13, [r7, #28]
 8011306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801130a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801130e:	ee17 2a90 	vmov	r2, s15
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8011316:	4b13      	ldr	r3, [pc, #76]	; (8011364 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801131a:	0e1b      	lsrs	r3, r3, #24
 801131c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011320:	ee07 3a90 	vmov	s15, r3
 8011324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801132c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011330:	edd7 6a07 	vldr	s13, [r7, #28]
 8011334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801133c:	ee17 2a90 	vmov	r2, s15
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8011344:	e008      	b.n	8011358 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2200      	movs	r2, #0
 801134a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2200      	movs	r2, #0
 8011350:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	2200      	movs	r2, #0
 8011356:	609a      	str	r2, [r3, #8]
}
 8011358:	bf00      	nop
 801135a:	3724      	adds	r7, #36	; 0x24
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr
 8011364:	58024400 	.word	0x58024400
 8011368:	03d09000 	.word	0x03d09000
 801136c:	46000000 	.word	0x46000000
 8011370:	4c742400 	.word	0x4c742400
 8011374:	4a742400 	.word	0x4a742400
 8011378:	4bbebc20 	.word	0x4bbebc20

0801137c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011386:	2300      	movs	r3, #0
 8011388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801138a:	4b53      	ldr	r3, [pc, #332]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 801138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801138e:	f003 0303 	and.w	r3, r3, #3
 8011392:	2b03      	cmp	r3, #3
 8011394:	d101      	bne.n	801139a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8011396:	2301      	movs	r3, #1
 8011398:	e099      	b.n	80114ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801139a:	4b4f      	ldr	r3, [pc, #316]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	4a4e      	ldr	r2, [pc, #312]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 80113a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80113a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80113a6:	f7f6 f8c3 	bl	8007530 <HAL_GetTick>
 80113aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80113ac:	e008      	b.n	80113c0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80113ae:	f7f6 f8bf 	bl	8007530 <HAL_GetTick>
 80113b2:	4602      	mov	r2, r0
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	1ad3      	subs	r3, r2, r3
 80113b8:	2b02      	cmp	r3, #2
 80113ba:	d901      	bls.n	80113c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80113bc:	2303      	movs	r3, #3
 80113be:	e086      	b.n	80114ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80113c0:	4b45      	ldr	r3, [pc, #276]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d1f0      	bne.n	80113ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80113cc:	4b42      	ldr	r3, [pc, #264]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 80113ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	031b      	lsls	r3, r3, #12
 80113da:	493f      	ldr	r1, [pc, #252]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 80113dc:	4313      	orrs	r3, r2
 80113de:	628b      	str	r3, [r1, #40]	; 0x28
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	3b01      	subs	r3, #1
 80113e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	689b      	ldr	r3, [r3, #8]
 80113ee:	3b01      	subs	r3, #1
 80113f0:	025b      	lsls	r3, r3, #9
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	431a      	orrs	r2, r3
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	3b01      	subs	r3, #1
 80113fc:	041b      	lsls	r3, r3, #16
 80113fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011402:	431a      	orrs	r2, r3
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	691b      	ldr	r3, [r3, #16]
 8011408:	3b01      	subs	r3, #1
 801140a:	061b      	lsls	r3, r3, #24
 801140c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011410:	4931      	ldr	r1, [pc, #196]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011412:	4313      	orrs	r3, r2
 8011414:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8011416:	4b30      	ldr	r3, [pc, #192]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801141a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	695b      	ldr	r3, [r3, #20]
 8011422:	492d      	ldr	r1, [pc, #180]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011424:	4313      	orrs	r3, r2
 8011426:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011428:	4b2b      	ldr	r3, [pc, #172]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 801142a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801142c:	f023 0220 	bic.w	r2, r3, #32
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	699b      	ldr	r3, [r3, #24]
 8011434:	4928      	ldr	r1, [pc, #160]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011436:	4313      	orrs	r3, r2
 8011438:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801143a:	4b27      	ldr	r3, [pc, #156]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 801143c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801143e:	4a26      	ldr	r2, [pc, #152]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011440:	f023 0310 	bic.w	r3, r3, #16
 8011444:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8011446:	4b24      	ldr	r3, [pc, #144]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801144a:	4b24      	ldr	r3, [pc, #144]	; (80114dc <RCCEx_PLL2_Config+0x160>)
 801144c:	4013      	ands	r3, r2
 801144e:	687a      	ldr	r2, [r7, #4]
 8011450:	69d2      	ldr	r2, [r2, #28]
 8011452:	00d2      	lsls	r2, r2, #3
 8011454:	4920      	ldr	r1, [pc, #128]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011456:	4313      	orrs	r3, r2
 8011458:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801145a:	4b1f      	ldr	r3, [pc, #124]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 801145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801145e:	4a1e      	ldr	r2, [pc, #120]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011460:	f043 0310 	orr.w	r3, r3, #16
 8011464:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8011466:	683b      	ldr	r3, [r7, #0]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d106      	bne.n	801147a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801146c:	4b1a      	ldr	r3, [pc, #104]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 801146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011470:	4a19      	ldr	r2, [pc, #100]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011476:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011478:	e00f      	b.n	801149a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	2b01      	cmp	r3, #1
 801147e:	d106      	bne.n	801148e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011480:	4b15      	ldr	r3, [pc, #84]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011484:	4a14      	ldr	r2, [pc, #80]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801148a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801148c:	e005      	b.n	801149a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801148e:	4b12      	ldr	r3, [pc, #72]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011492:	4a11      	ldr	r2, [pc, #68]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 8011494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011498:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801149a:	4b0f      	ldr	r3, [pc, #60]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	4a0e      	ldr	r2, [pc, #56]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 80114a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80114a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80114a6:	f7f6 f843 	bl	8007530 <HAL_GetTick>
 80114aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80114ac:	e008      	b.n	80114c0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80114ae:	f7f6 f83f 	bl	8007530 <HAL_GetTick>
 80114b2:	4602      	mov	r2, r0
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	1ad3      	subs	r3, r2, r3
 80114b8:	2b02      	cmp	r3, #2
 80114ba:	d901      	bls.n	80114c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80114bc:	2303      	movs	r3, #3
 80114be:	e006      	b.n	80114ce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80114c0:	4b05      	ldr	r3, [pc, #20]	; (80114d8 <RCCEx_PLL2_Config+0x15c>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d0f0      	beq.n	80114ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80114cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop
 80114d8:	58024400 	.word	0x58024400
 80114dc:	ffff0007 	.word	0xffff0007

080114e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b084      	sub	sp, #16
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80114ea:	2300      	movs	r3, #0
 80114ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80114ee:	4b53      	ldr	r3, [pc, #332]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80114f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114f2:	f003 0303 	and.w	r3, r3, #3
 80114f6:	2b03      	cmp	r3, #3
 80114f8:	d101      	bne.n	80114fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80114fa:	2301      	movs	r3, #1
 80114fc:	e099      	b.n	8011632 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80114fe:	4b4f      	ldr	r3, [pc, #316]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	4a4e      	ldr	r2, [pc, #312]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 8011504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801150a:	f7f6 f811 	bl	8007530 <HAL_GetTick>
 801150e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011510:	e008      	b.n	8011524 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8011512:	f7f6 f80d 	bl	8007530 <HAL_GetTick>
 8011516:	4602      	mov	r2, r0
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	1ad3      	subs	r3, r2, r3
 801151c:	2b02      	cmp	r3, #2
 801151e:	d901      	bls.n	8011524 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011520:	2303      	movs	r3, #3
 8011522:	e086      	b.n	8011632 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011524:	4b45      	ldr	r3, [pc, #276]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801152c:	2b00      	cmp	r3, #0
 801152e:	d1f0      	bne.n	8011512 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011530:	4b42      	ldr	r3, [pc, #264]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 8011532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011534:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	051b      	lsls	r3, r3, #20
 801153e:	493f      	ldr	r1, [pc, #252]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 8011540:	4313      	orrs	r3, r2
 8011542:	628b      	str	r3, [r1, #40]	; 0x28
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	3b01      	subs	r3, #1
 801154a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	689b      	ldr	r3, [r3, #8]
 8011552:	3b01      	subs	r3, #1
 8011554:	025b      	lsls	r3, r3, #9
 8011556:	b29b      	uxth	r3, r3
 8011558:	431a      	orrs	r2, r3
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	3b01      	subs	r3, #1
 8011560:	041b      	lsls	r3, r3, #16
 8011562:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011566:	431a      	orrs	r2, r3
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	691b      	ldr	r3, [r3, #16]
 801156c:	3b01      	subs	r3, #1
 801156e:	061b      	lsls	r3, r3, #24
 8011570:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011574:	4931      	ldr	r1, [pc, #196]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 8011576:	4313      	orrs	r3, r2
 8011578:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801157a:	4b30      	ldr	r3, [pc, #192]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 801157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801157e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	695b      	ldr	r3, [r3, #20]
 8011586:	492d      	ldr	r1, [pc, #180]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 8011588:	4313      	orrs	r3, r2
 801158a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801158c:	4b2b      	ldr	r3, [pc, #172]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 801158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011590:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	699b      	ldr	r3, [r3, #24]
 8011598:	4928      	ldr	r1, [pc, #160]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 801159a:	4313      	orrs	r3, r2
 801159c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801159e:	4b27      	ldr	r3, [pc, #156]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a2:	4a26      	ldr	r2, [pc, #152]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80115a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80115aa:	4b24      	ldr	r3, [pc, #144]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115ae:	4b24      	ldr	r3, [pc, #144]	; (8011640 <RCCEx_PLL3_Config+0x160>)
 80115b0:	4013      	ands	r3, r2
 80115b2:	687a      	ldr	r2, [r7, #4]
 80115b4:	69d2      	ldr	r2, [r2, #28]
 80115b6:	00d2      	lsls	r2, r2, #3
 80115b8:	4920      	ldr	r1, [pc, #128]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115ba:	4313      	orrs	r3, r2
 80115bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80115be:	4b1f      	ldr	r3, [pc, #124]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c2:	4a1e      	ldr	r2, [pc, #120]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80115c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d106      	bne.n	80115de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80115d0:	4b1a      	ldr	r3, [pc, #104]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115d4:	4a19      	ldr	r2, [pc, #100]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80115da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80115dc:	e00f      	b.n	80115fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80115de:	683b      	ldr	r3, [r7, #0]
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d106      	bne.n	80115f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80115e4:	4b15      	ldr	r3, [pc, #84]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115e8:	4a14      	ldr	r2, [pc, #80]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80115ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80115f0:	e005      	b.n	80115fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80115f2:	4b12      	ldr	r3, [pc, #72]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f6:	4a11      	ldr	r2, [pc, #68]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 80115f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80115fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80115fe:	4b0f      	ldr	r3, [pc, #60]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	4a0e      	ldr	r2, [pc, #56]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 8011604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801160a:	f7f5 ff91 	bl	8007530 <HAL_GetTick>
 801160e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011610:	e008      	b.n	8011624 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8011612:	f7f5 ff8d 	bl	8007530 <HAL_GetTick>
 8011616:	4602      	mov	r2, r0
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	1ad3      	subs	r3, r2, r3
 801161c:	2b02      	cmp	r3, #2
 801161e:	d901      	bls.n	8011624 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011620:	2303      	movs	r3, #3
 8011622:	e006      	b.n	8011632 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011624:	4b05      	ldr	r3, [pc, #20]	; (801163c <RCCEx_PLL3_Config+0x15c>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801162c:	2b00      	cmp	r3, #0
 801162e:	d0f0      	beq.n	8011612 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011630:	7bfb      	ldrb	r3, [r7, #15]
}
 8011632:	4618      	mov	r0, r3
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
 801163a:	bf00      	nop
 801163c:	58024400 	.word	0x58024400
 8011640:	ffff0007 	.word	0xffff0007

08011644 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d101      	bne.n	8011656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011652:	2301      	movs	r3, #1
 8011654:	e0f1      	b.n	801183a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2200      	movs	r2, #0
 801165a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	4a78      	ldr	r2, [pc, #480]	; (8011844 <HAL_SPI_Init+0x200>)
 8011662:	4293      	cmp	r3, r2
 8011664:	d00f      	beq.n	8011686 <HAL_SPI_Init+0x42>
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	4a77      	ldr	r2, [pc, #476]	; (8011848 <HAL_SPI_Init+0x204>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d00a      	beq.n	8011686 <HAL_SPI_Init+0x42>
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4a75      	ldr	r2, [pc, #468]	; (801184c <HAL_SPI_Init+0x208>)
 8011676:	4293      	cmp	r3, r2
 8011678:	d005      	beq.n	8011686 <HAL_SPI_Init+0x42>
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	68db      	ldr	r3, [r3, #12]
 801167e:	2b0f      	cmp	r3, #15
 8011680:	d901      	bls.n	8011686 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8011682:	2301      	movs	r3, #1
 8011684:	e0d9      	b.n	801183a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f000 ff66 	bl	8012558 <SPI_GetPacketSize>
 801168c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	4a6c      	ldr	r2, [pc, #432]	; (8011844 <HAL_SPI_Init+0x200>)
 8011694:	4293      	cmp	r3, r2
 8011696:	d00c      	beq.n	80116b2 <HAL_SPI_Init+0x6e>
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	4a6a      	ldr	r2, [pc, #424]	; (8011848 <HAL_SPI_Init+0x204>)
 801169e:	4293      	cmp	r3, r2
 80116a0:	d007      	beq.n	80116b2 <HAL_SPI_Init+0x6e>
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	681b      	ldr	r3, [r3, #0]
 80116a6:	4a69      	ldr	r2, [pc, #420]	; (801184c <HAL_SPI_Init+0x208>)
 80116a8:	4293      	cmp	r3, r2
 80116aa:	d002      	beq.n	80116b2 <HAL_SPI_Init+0x6e>
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	2b08      	cmp	r3, #8
 80116b0:	d811      	bhi.n	80116d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80116b6:	4a63      	ldr	r2, [pc, #396]	; (8011844 <HAL_SPI_Init+0x200>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d009      	beq.n	80116d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	4a61      	ldr	r2, [pc, #388]	; (8011848 <HAL_SPI_Init+0x204>)
 80116c2:	4293      	cmp	r3, r2
 80116c4:	d004      	beq.n	80116d0 <HAL_SPI_Init+0x8c>
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681b      	ldr	r3, [r3, #0]
 80116ca:	4a60      	ldr	r2, [pc, #384]	; (801184c <HAL_SPI_Init+0x208>)
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d104      	bne.n	80116da <HAL_SPI_Init+0x96>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2b10      	cmp	r3, #16
 80116d4:	d901      	bls.n	80116da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80116d6:	2301      	movs	r3, #1
 80116d8:	e0af      	b.n	801183a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d106      	bne.n	80116f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	2200      	movs	r2, #0
 80116ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f7f4 f956 	bl	80059a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2202      	movs	r2, #2
 80116f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	f022 0201 	bic.w	r2, r2, #1
 801170a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	689b      	ldr	r3, [r3, #8]
 8011712:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8011716:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	699b      	ldr	r3, [r3, #24]
 801171c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011720:	d119      	bne.n	8011756 <HAL_SPI_Init+0x112>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	685b      	ldr	r3, [r3, #4]
 8011726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801172a:	d103      	bne.n	8011734 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011730:	2b00      	cmp	r3, #0
 8011732:	d008      	beq.n	8011746 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011738:	2b00      	cmp	r3, #0
 801173a:	d10c      	bne.n	8011756 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011740:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011744:	d107      	bne.n	8011756 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8011754:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	69da      	ldr	r2, [r3, #28]
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801175e:	431a      	orrs	r2, r3
 8011760:	68bb      	ldr	r3, [r7, #8]
 8011762:	431a      	orrs	r2, r3
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011768:	ea42 0103 	orr.w	r1, r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	68da      	ldr	r2, [r3, #12]
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	430a      	orrs	r2, r1
 8011776:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011780:	431a      	orrs	r2, r3
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011786:	431a      	orrs	r2, r3
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	699b      	ldr	r3, [r3, #24]
 801178c:	431a      	orrs	r2, r3
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	691b      	ldr	r3, [r3, #16]
 8011792:	431a      	orrs	r2, r3
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	695b      	ldr	r3, [r3, #20]
 8011798:	431a      	orrs	r2, r3
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6a1b      	ldr	r3, [r3, #32]
 801179e:	431a      	orrs	r2, r3
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	431a      	orrs	r2, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80117aa:	431a      	orrs	r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	689b      	ldr	r3, [r3, #8]
 80117b0:	431a      	orrs	r2, r3
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80117b6:	ea42 0103 	orr.w	r1, r2, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	430a      	orrs	r2, r1
 80117c4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d113      	bne.n	80117f6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	689b      	ldr	r3, [r3, #8]
 80117d4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80117e0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	689b      	ldr	r3, [r3, #8]
 80117e8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80117f4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	f022 0201 	bic.w	r2, r2, #1
 8011804:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801180e:	2b00      	cmp	r3, #0
 8011810:	d00a      	beq.n	8011828 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	68db      	ldr	r3, [r3, #12]
 8011818:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	430a      	orrs	r2, r1
 8011826:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2200      	movs	r2, #0
 801182c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	2201      	movs	r2, #1
 8011834:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011838:	2300      	movs	r3, #0
}
 801183a:	4618      	mov	r0, r3
 801183c:	3710      	adds	r7, #16
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}
 8011842:	bf00      	nop
 8011844:	40013000 	.word	0x40013000
 8011848:	40003800 	.word	0x40003800
 801184c:	40003c00 	.word	0x40003c00

08011850 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b08a      	sub	sp, #40	; 0x28
 8011854:	af02      	add	r7, sp, #8
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	60b9      	str	r1, [r7, #8]
 801185a:	603b      	str	r3, [r7, #0]
 801185c:	4613      	mov	r3, r2
 801185e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	3320      	adds	r3, #32
 8011866:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011868:	2300      	movs	r3, #0
 801186a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011872:	2b01      	cmp	r3, #1
 8011874:	d101      	bne.n	801187a <HAL_SPI_Transmit+0x2a>
 8011876:	2302      	movs	r3, #2
 8011878:	e1d7      	b.n	8011c2a <HAL_SPI_Transmit+0x3da>
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2201      	movs	r2, #1
 801187e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011882:	f7f5 fe55 	bl	8007530 <HAL_GetTick>
 8011886:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801188e:	b2db      	uxtb	r3, r3
 8011890:	2b01      	cmp	r3, #1
 8011892:	d007      	beq.n	80118a4 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8011894:	2302      	movs	r3, #2
 8011896:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	2200      	movs	r2, #0
 801189c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80118a0:	7efb      	ldrb	r3, [r7, #27]
 80118a2:	e1c2      	b.n	8011c2a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d002      	beq.n	80118b0 <HAL_SPI_Transmit+0x60>
 80118aa:	88fb      	ldrh	r3, [r7, #6]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d107      	bne.n	80118c0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80118b0:	2301      	movs	r3, #1
 80118b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	2200      	movs	r2, #0
 80118b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80118bc:	7efb      	ldrb	r3, [r7, #27]
 80118be:	e1b4      	b.n	8011c2a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2203      	movs	r2, #3
 80118c4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2200      	movs	r2, #0
 80118cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	68ba      	ldr	r2, [r7, #8]
 80118d4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	88fa      	ldrh	r2, [r7, #6]
 80118da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	88fa      	ldrh	r2, [r7, #6]
 80118e2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	2200      	movs	r2, #0
 80118ea:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	2200      	movs	r2, #0
 80118f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2200      	movs	r2, #0
 80118f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2200      	movs	r2, #0
 8011900:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	2200      	movs	r2, #0
 8011906:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	689b      	ldr	r3, [r3, #8]
 801190c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011910:	d107      	bne.n	8011922 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011920:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	685a      	ldr	r2, [r3, #4]
 8011928:	4b96      	ldr	r3, [pc, #600]	; (8011b84 <HAL_SPI_Transmit+0x334>)
 801192a:	4013      	ands	r3, r2
 801192c:	88f9      	ldrh	r1, [r7, #6]
 801192e:	68fa      	ldr	r2, [r7, #12]
 8011930:	6812      	ldr	r2, [r2, #0]
 8011932:	430b      	orrs	r3, r1
 8011934:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	681a      	ldr	r2, [r3, #0]
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	f042 0201 	orr.w	r2, r2, #1
 8011944:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801194e:	d107      	bne.n	8011960 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	681a      	ldr	r2, [r3, #0]
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801195e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	68db      	ldr	r3, [r3, #12]
 8011964:	2b0f      	cmp	r3, #15
 8011966:	d947      	bls.n	80119f8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011968:	e03f      	b.n	80119ea <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	695b      	ldr	r3, [r3, #20]
 8011970:	f003 0302 	and.w	r3, r3, #2
 8011974:	2b02      	cmp	r3, #2
 8011976:	d114      	bne.n	80119a2 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	6812      	ldr	r2, [r2, #0]
 8011982:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011988:	1d1a      	adds	r2, r3, #4
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011994:	b29b      	uxth	r3, r3
 8011996:	3b01      	subs	r3, #1
 8011998:	b29a      	uxth	r2, r3
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80119a0:	e023      	b.n	80119ea <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80119a2:	f7f5 fdc5 	bl	8007530 <HAL_GetTick>
 80119a6:	4602      	mov	r2, r0
 80119a8:	697b      	ldr	r3, [r7, #20]
 80119aa:	1ad3      	subs	r3, r2, r3
 80119ac:	683a      	ldr	r2, [r7, #0]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d803      	bhi.n	80119ba <HAL_SPI_Transmit+0x16a>
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119b8:	d102      	bne.n	80119c0 <HAL_SPI_Transmit+0x170>
 80119ba:	683b      	ldr	r3, [r7, #0]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d114      	bne.n	80119ea <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80119c0:	68f8      	ldr	r0, [r7, #12]
 80119c2:	f000 fcfb 	bl	80123bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	2200      	movs	r2, #0
 80119ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	2201      	movs	r2, #1
 80119e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80119e6:	2303      	movs	r3, #3
 80119e8:	e11f      	b.n	8011c2a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d1b9      	bne.n	801196a <HAL_SPI_Transmit+0x11a>
 80119f6:	e0f2      	b.n	8011bde <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	68db      	ldr	r3, [r3, #12]
 80119fc:	2b07      	cmp	r3, #7
 80119fe:	f240 80e7 	bls.w	8011bd0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011a02:	e05d      	b.n	8011ac0 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	695b      	ldr	r3, [r3, #20]
 8011a0a:	f003 0302 	and.w	r3, r3, #2
 8011a0e:	2b02      	cmp	r3, #2
 8011a10:	d132      	bne.n	8011a78 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d918      	bls.n	8011a50 <HAL_SPI_Transmit+0x200>
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d014      	beq.n	8011a50 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	6812      	ldr	r2, [r2, #0]
 8011a30:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a36:	1d1a      	adds	r2, r3, #4
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a42:	b29b      	uxth	r3, r3
 8011a44:	3b02      	subs	r3, #2
 8011a46:	b29a      	uxth	r2, r3
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011a4e:	e037      	b.n	8011ac0 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a54:	881a      	ldrh	r2, [r3, #0]
 8011a56:	69fb      	ldr	r3, [r7, #28]
 8011a58:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a5e:	1c9a      	adds	r2, r3, #2
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a6a:	b29b      	uxth	r3, r3
 8011a6c:	3b01      	subs	r3, #1
 8011a6e:	b29a      	uxth	r2, r3
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011a76:	e023      	b.n	8011ac0 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011a78:	f7f5 fd5a 	bl	8007530 <HAL_GetTick>
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	697b      	ldr	r3, [r7, #20]
 8011a80:	1ad3      	subs	r3, r2, r3
 8011a82:	683a      	ldr	r2, [r7, #0]
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d803      	bhi.n	8011a90 <HAL_SPI_Transmit+0x240>
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a8e:	d102      	bne.n	8011a96 <HAL_SPI_Transmit+0x246>
 8011a90:	683b      	ldr	r3, [r7, #0]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d114      	bne.n	8011ac0 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011a96:	68f8      	ldr	r0, [r7, #12]
 8011a98:	f000 fc90 	bl	80123bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011aaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011abc:	2303      	movs	r3, #3
 8011abe:	e0b4      	b.n	8011c2a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011ac6:	b29b      	uxth	r3, r3
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d19b      	bne.n	8011a04 <HAL_SPI_Transmit+0x1b4>
 8011acc:	e087      	b.n	8011bde <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	695b      	ldr	r3, [r3, #20]
 8011ad4:	f003 0302 	and.w	r3, r3, #2
 8011ad8:	2b02      	cmp	r3, #2
 8011ada:	d155      	bne.n	8011b88 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011ae2:	b29b      	uxth	r3, r3
 8011ae4:	2b03      	cmp	r3, #3
 8011ae6:	d918      	bls.n	8011b1a <HAL_SPI_Transmit+0x2ca>
 8011ae8:	68fb      	ldr	r3, [r7, #12]
 8011aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011aec:	2b40      	cmp	r3, #64	; 0x40
 8011aee:	d914      	bls.n	8011b1a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	6812      	ldr	r2, [r2, #0]
 8011afa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b00:	1d1a      	adds	r2, r3, #4
 8011b02:	68fb      	ldr	r3, [r7, #12]
 8011b04:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	3b04      	subs	r3, #4
 8011b10:	b29a      	uxth	r2, r3
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011b18:	e05a      	b.n	8011bd0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b20:	b29b      	uxth	r3, r3
 8011b22:	2b01      	cmp	r3, #1
 8011b24:	d917      	bls.n	8011b56 <HAL_SPI_Transmit+0x306>
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d013      	beq.n	8011b56 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b32:	881a      	ldrh	r2, [r3, #0]
 8011b34:	69fb      	ldr	r3, [r7, #28]
 8011b36:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b3c:	1c9a      	adds	r2, r3, #2
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b48:	b29b      	uxth	r3, r3
 8011b4a:	3b02      	subs	r3, #2
 8011b4c:	b29a      	uxth	r2, r3
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011b54:	e03c      	b.n	8011bd0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	3320      	adds	r3, #32
 8011b60:	7812      	ldrb	r2, [r2, #0]
 8011b62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b68:	1c5a      	adds	r2, r3, #1
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b74:	b29b      	uxth	r3, r3
 8011b76:	3b01      	subs	r3, #1
 8011b78:	b29a      	uxth	r2, r3
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011b80:	e026      	b.n	8011bd0 <HAL_SPI_Transmit+0x380>
 8011b82:	bf00      	nop
 8011b84:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011b88:	f7f5 fcd2 	bl	8007530 <HAL_GetTick>
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	1ad3      	subs	r3, r2, r3
 8011b92:	683a      	ldr	r2, [r7, #0]
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d803      	bhi.n	8011ba0 <HAL_SPI_Transmit+0x350>
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b9e:	d102      	bne.n	8011ba6 <HAL_SPI_Transmit+0x356>
 8011ba0:	683b      	ldr	r3, [r7, #0]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d114      	bne.n	8011bd0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011ba6:	68f8      	ldr	r0, [r7, #12]
 8011ba8:	f000 fc08 	bl	80123bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	2201      	movs	r2, #1
 8011bc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011bcc:	2303      	movs	r3, #3
 8011bce:	e02c      	b.n	8011c2a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011bd6:	b29b      	uxth	r3, r3
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	f47f af78 	bne.w	8011ace <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	9300      	str	r3, [sp, #0]
 8011be2:	697b      	ldr	r3, [r7, #20]
 8011be4:	2200      	movs	r2, #0
 8011be6:	2108      	movs	r1, #8
 8011be8:	68f8      	ldr	r0, [r7, #12]
 8011bea:	f000 fc87 	bl	80124fc <SPI_WaitOnFlagUntilTimeout>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d007      	beq.n	8011c04 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bfa:	f043 0220 	orr.w	r2, r3, #32
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011c04:	68f8      	ldr	r0, [r7, #12]
 8011c06:	f000 fbd9 	bl	80123bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2201      	movs	r2, #1
 8011c16:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d001      	beq.n	8011c28 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8011c24:	2301      	movs	r3, #1
 8011c26:	e000      	b.n	8011c2a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8011c28:	7efb      	ldrb	r3, [r7, #27]
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3720      	adds	r7, #32
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	bf00      	nop

08011c34 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b08a      	sub	sp, #40	; 0x28
 8011c38:	af02      	add	r7, sp, #8
 8011c3a:	60f8      	str	r0, [r7, #12]
 8011c3c:	60b9      	str	r1, [r7, #8]
 8011c3e:	603b      	str	r3, [r7, #0]
 8011c40:	4613      	mov	r3, r2
 8011c42:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011c44:	2300      	movs	r3, #0
 8011c46:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	3330      	adds	r3, #48	; 0x30
 8011c4e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	685b      	ldr	r3, [r3, #4]
 8011c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011c58:	d112      	bne.n	8011c80 <HAL_SPI_Receive+0x4c>
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	689b      	ldr	r3, [r3, #8]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d10e      	bne.n	8011c80 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	2204      	movs	r2, #4
 8011c66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011c6a:	88fa      	ldrh	r2, [r7, #6]
 8011c6c:	683b      	ldr	r3, [r7, #0]
 8011c6e:	9300      	str	r3, [sp, #0]
 8011c70:	4613      	mov	r3, r2
 8011c72:	68ba      	ldr	r2, [r7, #8]
 8011c74:	68b9      	ldr	r1, [r7, #8]
 8011c76:	68f8      	ldr	r0, [r7, #12]
 8011c78:	f000 f978 	bl	8011f6c <HAL_SPI_TransmitReceive>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	e16f      	b.n	8011f60 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d101      	bne.n	8011c8e <HAL_SPI_Receive+0x5a>
 8011c8a:	2302      	movs	r3, #2
 8011c8c:	e168      	b.n	8011f60 <HAL_SPI_Receive+0x32c>
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	2201      	movs	r2, #1
 8011c92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011c96:	f7f5 fc4b 	bl	8007530 <HAL_GetTick>
 8011c9a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011c9c:	68fb      	ldr	r3, [r7, #12]
 8011c9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011ca2:	b2db      	uxtb	r3, r3
 8011ca4:	2b01      	cmp	r3, #1
 8011ca6:	d007      	beq.n	8011cb8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8011ca8:	2302      	movs	r3, #2
 8011caa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	2200      	movs	r2, #0
 8011cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011cb4:	7ffb      	ldrb	r3, [r7, #31]
 8011cb6:	e153      	b.n	8011f60 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d002      	beq.n	8011cc4 <HAL_SPI_Receive+0x90>
 8011cbe:	88fb      	ldrh	r3, [r7, #6]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d107      	bne.n	8011cd4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8011cc8:	68fb      	ldr	r3, [r7, #12]
 8011cca:	2200      	movs	r2, #0
 8011ccc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011cd0:	7ffb      	ldrb	r3, [r7, #31]
 8011cd2:	e145      	b.n	8011f60 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	2204      	movs	r2, #4
 8011cd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	2200      	movs	r2, #0
 8011ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	68ba      	ldr	r2, [r7, #8]
 8011ce8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	88fa      	ldrh	r2, [r7, #6]
 8011cee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	88fa      	ldrh	r2, [r7, #6]
 8011cf6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2200      	movs	r2, #0
 8011d04:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	2200      	movs	r2, #0
 8011d14:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	2200      	movs	r2, #0
 8011d1a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	689b      	ldr	r3, [r3, #8]
 8011d20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011d24:	d107      	bne.n	8011d36 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	681a      	ldr	r2, [r3, #0]
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011d34:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	685a      	ldr	r2, [r3, #4]
 8011d3c:	4b8a      	ldr	r3, [pc, #552]	; (8011f68 <HAL_SPI_Receive+0x334>)
 8011d3e:	4013      	ands	r3, r2
 8011d40:	88f9      	ldrh	r1, [r7, #6]
 8011d42:	68fa      	ldr	r2, [r7, #12]
 8011d44:	6812      	ldr	r2, [r2, #0]
 8011d46:	430b      	orrs	r3, r1
 8011d48:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	681a      	ldr	r2, [r3, #0]
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	f042 0201 	orr.w	r2, r2, #1
 8011d58:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011d62:	d107      	bne.n	8011d74 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	681a      	ldr	r2, [r3, #0]
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011d72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	68db      	ldr	r3, [r3, #12]
 8011d78:	2b0f      	cmp	r3, #15
 8011d7a:	d948      	bls.n	8011e0e <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8011d7c:	e040      	b.n	8011e00 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	695a      	ldr	r2, [r3, #20]
 8011d84:	f248 0308 	movw	r3, #32776	; 0x8008
 8011d88:	4013      	ands	r3, r2
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d014      	beq.n	8011db8 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	681a      	ldr	r2, [r3, #0]
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011d98:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d9e:	1d1a      	adds	r2, r3, #4
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011daa:	b29b      	uxth	r3, r3
 8011dac:	3b01      	subs	r3, #1
 8011dae:	b29a      	uxth	r2, r3
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011db6:	e023      	b.n	8011e00 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011db8:	f7f5 fbba 	bl	8007530 <HAL_GetTick>
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	1ad3      	subs	r3, r2, r3
 8011dc2:	683a      	ldr	r2, [r7, #0]
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d803      	bhi.n	8011dd0 <HAL_SPI_Receive+0x19c>
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dce:	d102      	bne.n	8011dd6 <HAL_SPI_Receive+0x1a2>
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d114      	bne.n	8011e00 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	f000 faf0 	bl	80123bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	2200      	movs	r2, #0
 8011de0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011dea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2201      	movs	r2, #1
 8011df8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011dfc:	2303      	movs	r3, #3
 8011dfe:	e0af      	b.n	8011f60 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011e06:	b29b      	uxth	r3, r3
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d1b8      	bne.n	8011d7e <HAL_SPI_Receive+0x14a>
 8011e0c:	e095      	b.n	8011f3a <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	68db      	ldr	r3, [r3, #12]
 8011e12:	2b07      	cmp	r3, #7
 8011e14:	f240 808b 	bls.w	8011f2e <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8011e18:	e03f      	b.n	8011e9a <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	695b      	ldr	r3, [r3, #20]
 8011e20:	f003 0301 	and.w	r3, r3, #1
 8011e24:	2b01      	cmp	r3, #1
 8011e26:	d114      	bne.n	8011e52 <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011e28:	68fb      	ldr	r3, [r7, #12]
 8011e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e2c:	69ba      	ldr	r2, [r7, #24]
 8011e2e:	8812      	ldrh	r2, [r2, #0]
 8011e30:	b292      	uxth	r2, r2
 8011e32:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e38:	1c9a      	adds	r2, r3, #2
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011e44:	b29b      	uxth	r3, r3
 8011e46:	3b01      	subs	r3, #1
 8011e48:	b29a      	uxth	r2, r3
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011e50:	e023      	b.n	8011e9a <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011e52:	f7f5 fb6d 	bl	8007530 <HAL_GetTick>
 8011e56:	4602      	mov	r2, r0
 8011e58:	697b      	ldr	r3, [r7, #20]
 8011e5a:	1ad3      	subs	r3, r2, r3
 8011e5c:	683a      	ldr	r2, [r7, #0]
 8011e5e:	429a      	cmp	r2, r3
 8011e60:	d803      	bhi.n	8011e6a <HAL_SPI_Receive+0x236>
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e68:	d102      	bne.n	8011e70 <HAL_SPI_Receive+0x23c>
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d114      	bne.n	8011e9a <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011e70:	68f8      	ldr	r0, [r7, #12]
 8011e72:	f000 faa3 	bl	80123bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	2200      	movs	r2, #0
 8011e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	2201      	movs	r2, #1
 8011e92:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011e96:	2303      	movs	r3, #3
 8011e98:	e062      	b.n	8011f60 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011ea0:	b29b      	uxth	r3, r3
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d1b9      	bne.n	8011e1a <HAL_SPI_Receive+0x1e6>
 8011ea6:	e048      	b.n	8011f3a <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	695b      	ldr	r3, [r3, #20]
 8011eae:	f003 0301 	and.w	r3, r3, #1
 8011eb2:	2b01      	cmp	r3, #1
 8011eb4:	d117      	bne.n	8011ee6 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ec2:	7812      	ldrb	r2, [r2, #0]
 8011ec4:	b2d2      	uxtb	r2, r2
 8011ec6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ecc:	1c5a      	adds	r2, r3, #1
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	3b01      	subs	r3, #1
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011ee4:	e023      	b.n	8011f2e <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011ee6:	f7f5 fb23 	bl	8007530 <HAL_GetTick>
 8011eea:	4602      	mov	r2, r0
 8011eec:	697b      	ldr	r3, [r7, #20]
 8011eee:	1ad3      	subs	r3, r2, r3
 8011ef0:	683a      	ldr	r2, [r7, #0]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d803      	bhi.n	8011efe <HAL_SPI_Receive+0x2ca>
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011efc:	d102      	bne.n	8011f04 <HAL_SPI_Receive+0x2d0>
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d114      	bne.n	8011f2e <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011f04:	68f8      	ldr	r0, [r7, #12]
 8011f06:	f000 fa59 	bl	80123bc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2201      	movs	r2, #1
 8011f26:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011f2a:	2303      	movs	r3, #3
 8011f2c:	e018      	b.n	8011f60 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f34:	b29b      	uxth	r3, r3
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d1b6      	bne.n	8011ea8 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011f3a:	68f8      	ldr	r0, [r7, #12]
 8011f3c:	f000 fa3e 	bl	80123bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2200      	movs	r2, #0
 8011f44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	2201      	movs	r2, #1
 8011f4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d001      	beq.n	8011f5e <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8011f5a:	2301      	movs	r3, #1
 8011f5c:	e000      	b.n	8011f60 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8011f5e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3720      	adds	r7, #32
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}
 8011f68:	ffff0000 	.word	0xffff0000

08011f6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b08e      	sub	sp, #56	; 0x38
 8011f70:	af02      	add	r7, sp, #8
 8011f72:	60f8      	str	r0, [r7, #12]
 8011f74:	60b9      	str	r1, [r7, #8]
 8011f76:	607a      	str	r2, [r7, #4]
 8011f78:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	3320      	adds	r3, #32
 8011f86:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	3330      	adds	r3, #48	; 0x30
 8011f8e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011f96:	2b01      	cmp	r3, #1
 8011f98:	d101      	bne.n	8011f9e <HAL_SPI_TransmitReceive+0x32>
 8011f9a:	2302      	movs	r3, #2
 8011f9c:	e209      	b.n	80123b2 <HAL_SPI_TransmitReceive+0x446>
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	2201      	movs	r2, #1
 8011fa2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011fa6:	f7f5 fac3 	bl	8007530 <HAL_GetTick>
 8011faa:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8011fac:	887b      	ldrh	r3, [r7, #2]
 8011fae:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8011fb0:	887b      	ldrh	r3, [r7, #2]
 8011fb2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011fba:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	685b      	ldr	r3, [r3, #4]
 8011fc0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011fc2:	7efb      	ldrb	r3, [r7, #27]
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d014      	beq.n	8011ff2 <HAL_SPI_TransmitReceive+0x86>
 8011fc8:	697b      	ldr	r3, [r7, #20]
 8011fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011fce:	d106      	bne.n	8011fde <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d102      	bne.n	8011fde <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011fd8:	7efb      	ldrb	r3, [r7, #27]
 8011fda:	2b04      	cmp	r3, #4
 8011fdc:	d009      	beq.n	8011ff2 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8011fde:	2302      	movs	r3, #2
 8011fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011fec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011ff0:	e1df      	b.n	80123b2 <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8011ff2:	68bb      	ldr	r3, [r7, #8]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d005      	beq.n	8012004 <HAL_SPI_TransmitReceive+0x98>
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d002      	beq.n	8012004 <HAL_SPI_TransmitReceive+0x98>
 8011ffe:	887b      	ldrh	r3, [r7, #2]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d109      	bne.n	8012018 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8012004:	2301      	movs	r3, #1
 8012006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	2200      	movs	r2, #0
 801200e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8012012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012016:	e1cc      	b.n	80123b2 <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801201e:	b2db      	uxtb	r3, r3
 8012020:	2b04      	cmp	r3, #4
 8012022:	d003      	beq.n	801202c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2205      	movs	r2, #5
 8012028:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2200      	movs	r2, #0
 8012030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	887a      	ldrh	r2, [r7, #2]
 801203e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	887a      	ldrh	r2, [r7, #2]
 8012046:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	68ba      	ldr	r2, [r7, #8]
 801204e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	887a      	ldrh	r2, [r7, #2]
 8012054:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	887a      	ldrh	r2, [r7, #2]
 801205c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2200      	movs	r2, #0
 8012064:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	2200      	movs	r2, #0
 801206a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	685a      	ldr	r2, [r3, #4]
 8012072:	4b82      	ldr	r3, [pc, #520]	; (801227c <HAL_SPI_TransmitReceive+0x310>)
 8012074:	4013      	ands	r3, r2
 8012076:	8879      	ldrh	r1, [r7, #2]
 8012078:	68fa      	ldr	r2, [r7, #12]
 801207a:	6812      	ldr	r2, [r2, #0]
 801207c:	430b      	orrs	r3, r1
 801207e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	681a      	ldr	r2, [r3, #0]
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	681b      	ldr	r3, [r3, #0]
 801208a:	f042 0201 	orr.w	r2, r2, #1
 801208e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	685b      	ldr	r3, [r3, #4]
 8012094:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012098:	d107      	bne.n	80120aa <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80120a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	2b0f      	cmp	r3, #15
 80120b0:	d970      	bls.n	8012194 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80120b2:	e068      	b.n	8012186 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	695b      	ldr	r3, [r3, #20]
 80120ba:	f003 0302 	and.w	r3, r3, #2
 80120be:	2b02      	cmp	r3, #2
 80120c0:	d11a      	bne.n	80120f8 <HAL_SPI_TransmitReceive+0x18c>
 80120c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d017      	beq.n	80120f8 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	6812      	ldr	r2, [r2, #0]
 80120d2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120d8:	1d1a      	adds	r2, r3, #4
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	3b01      	subs	r3, #1
 80120e8:	b29a      	uxth	r2, r3
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80120f6:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	695a      	ldr	r2, [r3, #20]
 80120fe:	f248 0308 	movw	r3, #32776	; 0x8008
 8012102:	4013      	ands	r3, r2
 8012104:	2b00      	cmp	r3, #0
 8012106:	d01a      	beq.n	801213e <HAL_SPI_TransmitReceive+0x1d2>
 8012108:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801210a:	2b00      	cmp	r3, #0
 801210c:	d017      	beq.n	801213e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681a      	ldr	r2, [r3, #0]
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012116:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012118:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801211e:	1d1a      	adds	r2, r3, #4
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801212a:	b29b      	uxth	r3, r3
 801212c:	3b01      	subs	r3, #1
 801212e:	b29a      	uxth	r2, r3
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801213c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801213e:	f7f5 f9f7 	bl	8007530 <HAL_GetTick>
 8012142:	4602      	mov	r2, r0
 8012144:	69fb      	ldr	r3, [r7, #28]
 8012146:	1ad3      	subs	r3, r2, r3
 8012148:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801214a:	429a      	cmp	r2, r3
 801214c:	d803      	bhi.n	8012156 <HAL_SPI_TransmitReceive+0x1ea>
 801214e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012154:	d102      	bne.n	801215c <HAL_SPI_TransmitReceive+0x1f0>
 8012156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012158:	2b00      	cmp	r3, #0
 801215a:	d114      	bne.n	8012186 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801215c:	68f8      	ldr	r0, [r7, #12]
 801215e:	f000 f92d 	bl	80123bc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	2200      	movs	r2, #0
 8012166:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012170:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2201      	movs	r2, #1
 801217e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8012182:	2303      	movs	r3, #3
 8012184:	e115      	b.n	80123b2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8012186:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012188:	2b00      	cmp	r3, #0
 801218a:	d193      	bne.n	80120b4 <HAL_SPI_TransmitReceive+0x148>
 801218c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801218e:	2b00      	cmp	r3, #0
 8012190:	d190      	bne.n	80120b4 <HAL_SPI_TransmitReceive+0x148>
 8012192:	e0e7      	b.n	8012364 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	68db      	ldr	r3, [r3, #12]
 8012198:	2b07      	cmp	r3, #7
 801219a:	f240 80dd 	bls.w	8012358 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801219e:	e066      	b.n	801226e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	695b      	ldr	r3, [r3, #20]
 80121a6:	f003 0302 	and.w	r3, r3, #2
 80121aa:	2b02      	cmp	r3, #2
 80121ac:	d119      	bne.n	80121e2 <HAL_SPI_TransmitReceive+0x276>
 80121ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d016      	beq.n	80121e2 <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121b8:	881a      	ldrh	r2, [r3, #0]
 80121ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121bc:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121c2:	1c9a      	adds	r2, r3, #2
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	3b01      	subs	r3, #1
 80121d2:	b29a      	uxth	r2, r3
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80121e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	695b      	ldr	r3, [r3, #20]
 80121e8:	f003 0301 	and.w	r3, r3, #1
 80121ec:	2b01      	cmp	r3, #1
 80121ee:	d11a      	bne.n	8012226 <HAL_SPI_TransmitReceive+0x2ba>
 80121f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d017      	beq.n	8012226 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80121fa:	6a3a      	ldr	r2, [r7, #32]
 80121fc:	8812      	ldrh	r2, [r2, #0]
 80121fe:	b292      	uxth	r2, r2
 8012200:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012206:	1c9a      	adds	r2, r3, #2
 8012208:	68fb      	ldr	r3, [r7, #12]
 801220a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012212:	b29b      	uxth	r3, r3
 8012214:	3b01      	subs	r3, #1
 8012216:	b29a      	uxth	r2, r3
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012224:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012226:	f7f5 f983 	bl	8007530 <HAL_GetTick>
 801222a:	4602      	mov	r2, r0
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	1ad3      	subs	r3, r2, r3
 8012230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012232:	429a      	cmp	r2, r3
 8012234:	d803      	bhi.n	801223e <HAL_SPI_TransmitReceive+0x2d2>
 8012236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012238:	f1b3 3fff 	cmp.w	r3, #4294967295
 801223c:	d102      	bne.n	8012244 <HAL_SPI_TransmitReceive+0x2d8>
 801223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012240:	2b00      	cmp	r3, #0
 8012242:	d114      	bne.n	801226e <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8012244:	68f8      	ldr	r0, [r7, #12]
 8012246:	f000 f8b9 	bl	80123bc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	2200      	movs	r2, #0
 801224e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012258:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	2201      	movs	r2, #1
 8012266:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 801226a:	2303      	movs	r3, #3
 801226c:	e0a1      	b.n	80123b2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801226e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012270:	2b00      	cmp	r3, #0
 8012272:	d195      	bne.n	80121a0 <HAL_SPI_TransmitReceive+0x234>
 8012274:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012276:	2b00      	cmp	r3, #0
 8012278:	d192      	bne.n	80121a0 <HAL_SPI_TransmitReceive+0x234>
 801227a:	e073      	b.n	8012364 <HAL_SPI_TransmitReceive+0x3f8>
 801227c:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	695b      	ldr	r3, [r3, #20]
 8012286:	f003 0302 	and.w	r3, r3, #2
 801228a:	2b02      	cmp	r3, #2
 801228c:	d11b      	bne.n	80122c6 <HAL_SPI_TransmitReceive+0x35a>
 801228e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012290:	2b00      	cmp	r3, #0
 8012292:	d018      	beq.n	80122c6 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	3320      	adds	r3, #32
 801229e:	7812      	ldrb	r2, [r2, #0]
 80122a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122a6:	1c5a      	adds	r2, r3, #1
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80122b2:	b29b      	uxth	r3, r3
 80122b4:	3b01      	subs	r3, #1
 80122b6:	b29a      	uxth	r2, r3
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80122c4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	695b      	ldr	r3, [r3, #20]
 80122cc:	f003 0301 	and.w	r3, r3, #1
 80122d0:	2b01      	cmp	r3, #1
 80122d2:	d11d      	bne.n	8012310 <HAL_SPI_TransmitReceive+0x3a4>
 80122d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d01a      	beq.n	8012310 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122e6:	7812      	ldrb	r2, [r2, #0]
 80122e8:	b2d2      	uxtb	r2, r2
 80122ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122f0:	1c5a      	adds	r2, r3, #1
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	3b01      	subs	r3, #1
 8012300:	b29a      	uxth	r2, r3
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801230e:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012310:	f7f5 f90e 	bl	8007530 <HAL_GetTick>
 8012314:	4602      	mov	r2, r0
 8012316:	69fb      	ldr	r3, [r7, #28]
 8012318:	1ad3      	subs	r3, r2, r3
 801231a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801231c:	429a      	cmp	r2, r3
 801231e:	d803      	bhi.n	8012328 <HAL_SPI_TransmitReceive+0x3bc>
 8012320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012326:	d102      	bne.n	801232e <HAL_SPI_TransmitReceive+0x3c2>
 8012328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232a:	2b00      	cmp	r3, #0
 801232c:	d114      	bne.n	8012358 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801232e:	68f8      	ldr	r0, [r7, #12]
 8012330:	f000 f844 	bl	80123bc <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	2200      	movs	r2, #0
 8012338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012342:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	2201      	movs	r2, #1
 8012350:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8012354:	2303      	movs	r3, #3
 8012356:	e02c      	b.n	80123b2 <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8012358:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801235a:	2b00      	cmp	r3, #0
 801235c:	d190      	bne.n	8012280 <HAL_SPI_TransmitReceive+0x314>
 801235e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012360:	2b00      	cmp	r3, #0
 8012362:	d18d      	bne.n	8012280 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8012364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012366:	9300      	str	r3, [sp, #0]
 8012368:	69fb      	ldr	r3, [r7, #28]
 801236a:	2200      	movs	r2, #0
 801236c:	2108      	movs	r1, #8
 801236e:	68f8      	ldr	r0, [r7, #12]
 8012370:	f000 f8c4 	bl	80124fc <SPI_WaitOnFlagUntilTimeout>
 8012374:	4603      	mov	r3, r0
 8012376:	2b00      	cmp	r3, #0
 8012378:	d007      	beq.n	801238a <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012380:	f043 0220 	orr.w	r2, r3, #32
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	f000 f816 	bl	80123bc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2200      	movs	r2, #0
 8012394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2201      	movs	r2, #1
 801239c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d001      	beq.n	80123ae <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80123aa:	2301      	movs	r3, #1
 80123ac:	e001      	b.n	80123b2 <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80123ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3730      	adds	r7, #48	; 0x30
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop

080123bc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80123bc:	b480      	push	{r7}
 80123be:	b085      	sub	sp, #20
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	695b      	ldr	r3, [r3, #20]
 80123ca:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	681b      	ldr	r3, [r3, #0]
 80123d0:	699a      	ldr	r2, [r3, #24]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	f042 0208 	orr.w	r2, r2, #8
 80123da:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	699a      	ldr	r2, [r3, #24]
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	f042 0210 	orr.w	r2, r2, #16
 80123ea:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	681a      	ldr	r2, [r3, #0]
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	f022 0201 	bic.w	r2, r2, #1
 80123fa:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	6919      	ldr	r1, [r3, #16]
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	681a      	ldr	r2, [r3, #0]
 8012406:	4b3c      	ldr	r3, [pc, #240]	; (80124f8 <SPI_CloseTransfer+0x13c>)
 8012408:	400b      	ands	r3, r1
 801240a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	689a      	ldr	r2, [r3, #8]
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801241a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012422:	b2db      	uxtb	r3, r3
 8012424:	2b04      	cmp	r3, #4
 8012426:	d014      	beq.n	8012452 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	f003 0320 	and.w	r3, r3, #32
 801242e:	2b00      	cmp	r3, #0
 8012430:	d00f      	beq.n	8012452 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012438:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	699a      	ldr	r2, [r3, #24]
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	f042 0220 	orr.w	r2, r2, #32
 8012450:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012458:	b2db      	uxtb	r3, r3
 801245a:	2b03      	cmp	r3, #3
 801245c:	d014      	beq.n	8012488 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012464:	2b00      	cmp	r3, #0
 8012466:	d00f      	beq.n	8012488 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801246e:	f043 0204 	orr.w	r2, r3, #4
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	699a      	ldr	r2, [r3, #24]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012486:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801248e:	2b00      	cmp	r3, #0
 8012490:	d00f      	beq.n	80124b2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012498:	f043 0201 	orr.w	r2, r3, #1
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	699a      	ldr	r2, [r3, #24]
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80124b0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d00f      	beq.n	80124dc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124c2:	f043 0208 	orr.w	r2, r3, #8
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	699a      	ldr	r2, [r3, #24]
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80124da:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2200      	movs	r2, #0
 80124e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2200      	movs	r2, #0
 80124e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80124ec:	bf00      	nop
 80124ee:	3714      	adds	r7, #20
 80124f0:	46bd      	mov	sp, r7
 80124f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f6:	4770      	bx	lr
 80124f8:	fffffc90 	.word	0xfffffc90

080124fc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b084      	sub	sp, #16
 8012500:	af00      	add	r7, sp, #0
 8012502:	60f8      	str	r0, [r7, #12]
 8012504:	60b9      	str	r1, [r7, #8]
 8012506:	603b      	str	r3, [r7, #0]
 8012508:	4613      	mov	r3, r2
 801250a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 801250c:	e010      	b.n	8012530 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801250e:	f7f5 f80f 	bl	8007530 <HAL_GetTick>
 8012512:	4602      	mov	r2, r0
 8012514:	683b      	ldr	r3, [r7, #0]
 8012516:	1ad3      	subs	r3, r2, r3
 8012518:	69ba      	ldr	r2, [r7, #24]
 801251a:	429a      	cmp	r2, r3
 801251c:	d803      	bhi.n	8012526 <SPI_WaitOnFlagUntilTimeout+0x2a>
 801251e:	69bb      	ldr	r3, [r7, #24]
 8012520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012524:	d102      	bne.n	801252c <SPI_WaitOnFlagUntilTimeout+0x30>
 8012526:	69bb      	ldr	r3, [r7, #24]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d101      	bne.n	8012530 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 801252c:	2303      	movs	r3, #3
 801252e:	e00f      	b.n	8012550 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	695a      	ldr	r2, [r3, #20]
 8012536:	68bb      	ldr	r3, [r7, #8]
 8012538:	4013      	ands	r3, r2
 801253a:	68ba      	ldr	r2, [r7, #8]
 801253c:	429a      	cmp	r2, r3
 801253e:	bf0c      	ite	eq
 8012540:	2301      	moveq	r3, #1
 8012542:	2300      	movne	r3, #0
 8012544:	b2db      	uxtb	r3, r3
 8012546:	461a      	mov	r2, r3
 8012548:	79fb      	ldrb	r3, [r7, #7]
 801254a:	429a      	cmp	r2, r3
 801254c:	d0df      	beq.n	801250e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801254e:	2300      	movs	r3, #0
}
 8012550:	4618      	mov	r0, r3
 8012552:	3710      	adds	r7, #16
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}

08012558 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8012558:	b480      	push	{r7}
 801255a:	b085      	sub	sp, #20
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012564:	095b      	lsrs	r3, r3, #5
 8012566:	3301      	adds	r3, #1
 8012568:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	68db      	ldr	r3, [r3, #12]
 801256e:	3301      	adds	r3, #1
 8012570:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8012572:	68bb      	ldr	r3, [r7, #8]
 8012574:	3307      	adds	r3, #7
 8012576:	08db      	lsrs	r3, r3, #3
 8012578:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	68fa      	ldr	r2, [r7, #12]
 801257e:	fb02 f303 	mul.w	r3, r2, r3
}
 8012582:	4618      	mov	r0, r3
 8012584:	3714      	adds	r7, #20
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr

0801258e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801258e:	b580      	push	{r7, lr}
 8012590:	b082      	sub	sp, #8
 8012592:	af00      	add	r7, sp, #0
 8012594:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d101      	bne.n	80125a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801259c:	2301      	movs	r3, #1
 801259e:	e049      	b.n	8012634 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80125a6:	b2db      	uxtb	r3, r3
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d106      	bne.n	80125ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2200      	movs	r2, #0
 80125b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f7f4 fabd 	bl	8006b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	2202      	movs	r2, #2
 80125be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681a      	ldr	r2, [r3, #0]
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	3304      	adds	r3, #4
 80125ca:	4619      	mov	r1, r3
 80125cc:	4610      	mov	r0, r2
 80125ce:	f001 fabf 	bl	8013b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2201      	movs	r2, #1
 80125d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2201      	movs	r2, #1
 80125de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2201      	movs	r2, #1
 80125e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2201      	movs	r2, #1
 80125ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2201      	movs	r2, #1
 80125f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2201      	movs	r2, #1
 80125fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2201      	movs	r2, #1
 8012606:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2201      	movs	r2, #1
 801260e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2201      	movs	r2, #1
 8012616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2201      	movs	r2, #1
 801261e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2201      	movs	r2, #1
 8012626:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2201      	movs	r2, #1
 801262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012632:	2300      	movs	r3, #0
}
 8012634:	4618      	mov	r0, r3
 8012636:	3708      	adds	r7, #8
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801263c:	b480      	push	{r7}
 801263e:	b085      	sub	sp, #20
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801264a:	b2db      	uxtb	r3, r3
 801264c:	2b01      	cmp	r3, #1
 801264e:	d001      	beq.n	8012654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012650:	2301      	movs	r3, #1
 8012652:	e05e      	b.n	8012712 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	2202      	movs	r2, #2
 8012658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	68da      	ldr	r2, [r3, #12]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	f042 0201 	orr.w	r2, r2, #1
 801266a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	4a2b      	ldr	r2, [pc, #172]	; (8012720 <HAL_TIM_Base_Start_IT+0xe4>)
 8012672:	4293      	cmp	r3, r2
 8012674:	d02c      	beq.n	80126d0 <HAL_TIM_Base_Start_IT+0x94>
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801267e:	d027      	beq.n	80126d0 <HAL_TIM_Base_Start_IT+0x94>
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	4a27      	ldr	r2, [pc, #156]	; (8012724 <HAL_TIM_Base_Start_IT+0xe8>)
 8012686:	4293      	cmp	r3, r2
 8012688:	d022      	beq.n	80126d0 <HAL_TIM_Base_Start_IT+0x94>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	4a26      	ldr	r2, [pc, #152]	; (8012728 <HAL_TIM_Base_Start_IT+0xec>)
 8012690:	4293      	cmp	r3, r2
 8012692:	d01d      	beq.n	80126d0 <HAL_TIM_Base_Start_IT+0x94>
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	4a24      	ldr	r2, [pc, #144]	; (801272c <HAL_TIM_Base_Start_IT+0xf0>)
 801269a:	4293      	cmp	r3, r2
 801269c:	d018      	beq.n	80126d0 <HAL_TIM_Base_Start_IT+0x94>
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	4a23      	ldr	r2, [pc, #140]	; (8012730 <HAL_TIM_Base_Start_IT+0xf4>)
 80126a4:	4293      	cmp	r3, r2
 80126a6:	d013      	beq.n	80126d0 <HAL_TIM_Base_Start_IT+0x94>
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	4a21      	ldr	r2, [pc, #132]	; (8012734 <HAL_TIM_Base_Start_IT+0xf8>)
 80126ae:	4293      	cmp	r3, r2
 80126b0:	d00e      	beq.n	80126d0 <HAL_TIM_Base_Start_IT+0x94>
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	4a20      	ldr	r2, [pc, #128]	; (8012738 <HAL_TIM_Base_Start_IT+0xfc>)
 80126b8:	4293      	cmp	r3, r2
 80126ba:	d009      	beq.n	80126d0 <HAL_TIM_Base_Start_IT+0x94>
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	4a1e      	ldr	r2, [pc, #120]	; (801273c <HAL_TIM_Base_Start_IT+0x100>)
 80126c2:	4293      	cmp	r3, r2
 80126c4:	d004      	beq.n	80126d0 <HAL_TIM_Base_Start_IT+0x94>
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	4a1d      	ldr	r2, [pc, #116]	; (8012740 <HAL_TIM_Base_Start_IT+0x104>)
 80126cc:	4293      	cmp	r3, r2
 80126ce:	d115      	bne.n	80126fc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	689a      	ldr	r2, [r3, #8]
 80126d6:	4b1b      	ldr	r3, [pc, #108]	; (8012744 <HAL_TIM_Base_Start_IT+0x108>)
 80126d8:	4013      	ands	r3, r2
 80126da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	2b06      	cmp	r3, #6
 80126e0:	d015      	beq.n	801270e <HAL_TIM_Base_Start_IT+0xd2>
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126e8:	d011      	beq.n	801270e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	681a      	ldr	r2, [r3, #0]
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	f042 0201 	orr.w	r2, r2, #1
 80126f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126fa:	e008      	b.n	801270e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	f042 0201 	orr.w	r2, r2, #1
 801270a:	601a      	str	r2, [r3, #0]
 801270c:	e000      	b.n	8012710 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801270e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012710:	2300      	movs	r3, #0
}
 8012712:	4618      	mov	r0, r3
 8012714:	3714      	adds	r7, #20
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop
 8012720:	40010000 	.word	0x40010000
 8012724:	40000400 	.word	0x40000400
 8012728:	40000800 	.word	0x40000800
 801272c:	40000c00 	.word	0x40000c00
 8012730:	40010400 	.word	0x40010400
 8012734:	40001800 	.word	0x40001800
 8012738:	40014000 	.word	0x40014000
 801273c:	4000e000 	.word	0x4000e000
 8012740:	4000e400 	.word	0x4000e400
 8012744:	00010007 	.word	0x00010007

08012748 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012748:	b580      	push	{r7, lr}
 801274a:	b082      	sub	sp, #8
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d101      	bne.n	801275a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012756:	2301      	movs	r3, #1
 8012758:	e049      	b.n	80127ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012760:	b2db      	uxtb	r3, r3
 8012762:	2b00      	cmp	r3, #0
 8012764:	d106      	bne.n	8012774 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2200      	movs	r2, #0
 801276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801276e:	6878      	ldr	r0, [r7, #4]
 8012770:	f7f4 f872 	bl	8006858 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	2202      	movs	r2, #2
 8012778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681a      	ldr	r2, [r3, #0]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	3304      	adds	r3, #4
 8012784:	4619      	mov	r1, r3
 8012786:	4610      	mov	r0, r2
 8012788:	f001 f9e2 	bl	8013b50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2201      	movs	r2, #1
 8012790:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	2201      	movs	r2, #1
 8012798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2201      	movs	r2, #1
 80127a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2201      	movs	r2, #1
 80127a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2201      	movs	r2, #1
 80127b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2201      	movs	r2, #1
 80127b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2201      	movs	r2, #1
 80127c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2201      	movs	r2, #1
 80127c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2201      	movs	r2, #1
 80127d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2201      	movs	r2, #1
 80127d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2201      	movs	r2, #1
 80127e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2201      	movs	r2, #1
 80127e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80127ec:	2300      	movs	r3, #0
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	3708      	adds	r7, #8
 80127f2:	46bd      	mov	sp, r7
 80127f4:	bd80      	pop	{r7, pc}
	...

080127f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b084      	sub	sp, #16
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d109      	bne.n	801281c <HAL_TIM_PWM_Start+0x24>
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801280e:	b2db      	uxtb	r3, r3
 8012810:	2b01      	cmp	r3, #1
 8012812:	bf14      	ite	ne
 8012814:	2301      	movne	r3, #1
 8012816:	2300      	moveq	r3, #0
 8012818:	b2db      	uxtb	r3, r3
 801281a:	e03c      	b.n	8012896 <HAL_TIM_PWM_Start+0x9e>
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	2b04      	cmp	r3, #4
 8012820:	d109      	bne.n	8012836 <HAL_TIM_PWM_Start+0x3e>
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012828:	b2db      	uxtb	r3, r3
 801282a:	2b01      	cmp	r3, #1
 801282c:	bf14      	ite	ne
 801282e:	2301      	movne	r3, #1
 8012830:	2300      	moveq	r3, #0
 8012832:	b2db      	uxtb	r3, r3
 8012834:	e02f      	b.n	8012896 <HAL_TIM_PWM_Start+0x9e>
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	2b08      	cmp	r3, #8
 801283a:	d109      	bne.n	8012850 <HAL_TIM_PWM_Start+0x58>
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012842:	b2db      	uxtb	r3, r3
 8012844:	2b01      	cmp	r3, #1
 8012846:	bf14      	ite	ne
 8012848:	2301      	movne	r3, #1
 801284a:	2300      	moveq	r3, #0
 801284c:	b2db      	uxtb	r3, r3
 801284e:	e022      	b.n	8012896 <HAL_TIM_PWM_Start+0x9e>
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	2b0c      	cmp	r3, #12
 8012854:	d109      	bne.n	801286a <HAL_TIM_PWM_Start+0x72>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801285c:	b2db      	uxtb	r3, r3
 801285e:	2b01      	cmp	r3, #1
 8012860:	bf14      	ite	ne
 8012862:	2301      	movne	r3, #1
 8012864:	2300      	moveq	r3, #0
 8012866:	b2db      	uxtb	r3, r3
 8012868:	e015      	b.n	8012896 <HAL_TIM_PWM_Start+0x9e>
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	2b10      	cmp	r3, #16
 801286e:	d109      	bne.n	8012884 <HAL_TIM_PWM_Start+0x8c>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012876:	b2db      	uxtb	r3, r3
 8012878:	2b01      	cmp	r3, #1
 801287a:	bf14      	ite	ne
 801287c:	2301      	movne	r3, #1
 801287e:	2300      	moveq	r3, #0
 8012880:	b2db      	uxtb	r3, r3
 8012882:	e008      	b.n	8012896 <HAL_TIM_PWM_Start+0x9e>
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801288a:	b2db      	uxtb	r3, r3
 801288c:	2b01      	cmp	r3, #1
 801288e:	bf14      	ite	ne
 8012890:	2301      	movne	r3, #1
 8012892:	2300      	moveq	r3, #0
 8012894:	b2db      	uxtb	r3, r3
 8012896:	2b00      	cmp	r3, #0
 8012898:	d001      	beq.n	801289e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801289a:	2301      	movs	r3, #1
 801289c:	e0ab      	b.n	80129f6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801289e:	683b      	ldr	r3, [r7, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d104      	bne.n	80128ae <HAL_TIM_PWM_Start+0xb6>
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2202      	movs	r2, #2
 80128a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80128ac:	e023      	b.n	80128f6 <HAL_TIM_PWM_Start+0xfe>
 80128ae:	683b      	ldr	r3, [r7, #0]
 80128b0:	2b04      	cmp	r3, #4
 80128b2:	d104      	bne.n	80128be <HAL_TIM_PWM_Start+0xc6>
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2202      	movs	r2, #2
 80128b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80128bc:	e01b      	b.n	80128f6 <HAL_TIM_PWM_Start+0xfe>
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	2b08      	cmp	r3, #8
 80128c2:	d104      	bne.n	80128ce <HAL_TIM_PWM_Start+0xd6>
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2202      	movs	r2, #2
 80128c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80128cc:	e013      	b.n	80128f6 <HAL_TIM_PWM_Start+0xfe>
 80128ce:	683b      	ldr	r3, [r7, #0]
 80128d0:	2b0c      	cmp	r3, #12
 80128d2:	d104      	bne.n	80128de <HAL_TIM_PWM_Start+0xe6>
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2202      	movs	r2, #2
 80128d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80128dc:	e00b      	b.n	80128f6 <HAL_TIM_PWM_Start+0xfe>
 80128de:	683b      	ldr	r3, [r7, #0]
 80128e0:	2b10      	cmp	r3, #16
 80128e2:	d104      	bne.n	80128ee <HAL_TIM_PWM_Start+0xf6>
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2202      	movs	r2, #2
 80128e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80128ec:	e003      	b.n	80128f6 <HAL_TIM_PWM_Start+0xfe>
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2202      	movs	r2, #2
 80128f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	2201      	movs	r2, #1
 80128fc:	6839      	ldr	r1, [r7, #0]
 80128fe:	4618      	mov	r0, r3
 8012900:	f001 fd40 	bl	8014384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	4a3d      	ldr	r2, [pc, #244]	; (8012a00 <HAL_TIM_PWM_Start+0x208>)
 801290a:	4293      	cmp	r3, r2
 801290c:	d013      	beq.n	8012936 <HAL_TIM_PWM_Start+0x13e>
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	4a3c      	ldr	r2, [pc, #240]	; (8012a04 <HAL_TIM_PWM_Start+0x20c>)
 8012914:	4293      	cmp	r3, r2
 8012916:	d00e      	beq.n	8012936 <HAL_TIM_PWM_Start+0x13e>
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	4a3a      	ldr	r2, [pc, #232]	; (8012a08 <HAL_TIM_PWM_Start+0x210>)
 801291e:	4293      	cmp	r3, r2
 8012920:	d009      	beq.n	8012936 <HAL_TIM_PWM_Start+0x13e>
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	4a39      	ldr	r2, [pc, #228]	; (8012a0c <HAL_TIM_PWM_Start+0x214>)
 8012928:	4293      	cmp	r3, r2
 801292a:	d004      	beq.n	8012936 <HAL_TIM_PWM_Start+0x13e>
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	4a37      	ldr	r2, [pc, #220]	; (8012a10 <HAL_TIM_PWM_Start+0x218>)
 8012932:	4293      	cmp	r3, r2
 8012934:	d101      	bne.n	801293a <HAL_TIM_PWM_Start+0x142>
 8012936:	2301      	movs	r3, #1
 8012938:	e000      	b.n	801293c <HAL_TIM_PWM_Start+0x144>
 801293a:	2300      	movs	r3, #0
 801293c:	2b00      	cmp	r3, #0
 801293e:	d007      	beq.n	8012950 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801294e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	4a2a      	ldr	r2, [pc, #168]	; (8012a00 <HAL_TIM_PWM_Start+0x208>)
 8012956:	4293      	cmp	r3, r2
 8012958:	d02c      	beq.n	80129b4 <HAL_TIM_PWM_Start+0x1bc>
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012962:	d027      	beq.n	80129b4 <HAL_TIM_PWM_Start+0x1bc>
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	4a2a      	ldr	r2, [pc, #168]	; (8012a14 <HAL_TIM_PWM_Start+0x21c>)
 801296a:	4293      	cmp	r3, r2
 801296c:	d022      	beq.n	80129b4 <HAL_TIM_PWM_Start+0x1bc>
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	4a29      	ldr	r2, [pc, #164]	; (8012a18 <HAL_TIM_PWM_Start+0x220>)
 8012974:	4293      	cmp	r3, r2
 8012976:	d01d      	beq.n	80129b4 <HAL_TIM_PWM_Start+0x1bc>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	4a27      	ldr	r2, [pc, #156]	; (8012a1c <HAL_TIM_PWM_Start+0x224>)
 801297e:	4293      	cmp	r3, r2
 8012980:	d018      	beq.n	80129b4 <HAL_TIM_PWM_Start+0x1bc>
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	4a1f      	ldr	r2, [pc, #124]	; (8012a04 <HAL_TIM_PWM_Start+0x20c>)
 8012988:	4293      	cmp	r3, r2
 801298a:	d013      	beq.n	80129b4 <HAL_TIM_PWM_Start+0x1bc>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4a23      	ldr	r2, [pc, #140]	; (8012a20 <HAL_TIM_PWM_Start+0x228>)
 8012992:	4293      	cmp	r3, r2
 8012994:	d00e      	beq.n	80129b4 <HAL_TIM_PWM_Start+0x1bc>
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4a1b      	ldr	r2, [pc, #108]	; (8012a08 <HAL_TIM_PWM_Start+0x210>)
 801299c:	4293      	cmp	r3, r2
 801299e:	d009      	beq.n	80129b4 <HAL_TIM_PWM_Start+0x1bc>
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	4a1f      	ldr	r2, [pc, #124]	; (8012a24 <HAL_TIM_PWM_Start+0x22c>)
 80129a6:	4293      	cmp	r3, r2
 80129a8:	d004      	beq.n	80129b4 <HAL_TIM_PWM_Start+0x1bc>
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	4a1e      	ldr	r2, [pc, #120]	; (8012a28 <HAL_TIM_PWM_Start+0x230>)
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d115      	bne.n	80129e0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	689a      	ldr	r2, [r3, #8]
 80129ba:	4b1c      	ldr	r3, [pc, #112]	; (8012a2c <HAL_TIM_PWM_Start+0x234>)
 80129bc:	4013      	ands	r3, r2
 80129be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2b06      	cmp	r3, #6
 80129c4:	d015      	beq.n	80129f2 <HAL_TIM_PWM_Start+0x1fa>
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80129cc:	d011      	beq.n	80129f2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	681a      	ldr	r2, [r3, #0]
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	f042 0201 	orr.w	r2, r2, #1
 80129dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129de:	e008      	b.n	80129f2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	681a      	ldr	r2, [r3, #0]
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	f042 0201 	orr.w	r2, r2, #1
 80129ee:	601a      	str	r2, [r3, #0]
 80129f0:	e000      	b.n	80129f4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80129f4:	2300      	movs	r3, #0
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3710      	adds	r7, #16
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}
 80129fe:	bf00      	nop
 8012a00:	40010000 	.word	0x40010000
 8012a04:	40010400 	.word	0x40010400
 8012a08:	40014000 	.word	0x40014000
 8012a0c:	40014400 	.word	0x40014400
 8012a10:	40014800 	.word	0x40014800
 8012a14:	40000400 	.word	0x40000400
 8012a18:	40000800 	.word	0x40000800
 8012a1c:	40000c00 	.word	0x40000c00
 8012a20:	40001800 	.word	0x40001800
 8012a24:	4000e000 	.word	0x4000e000
 8012a28:	4000e400 	.word	0x4000e400
 8012a2c:	00010007 	.word	0x00010007

08012a30 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b086      	sub	sp, #24
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
 8012a3c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8012a3e:	2300      	movs	r3, #0
 8012a40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d109      	bne.n	8012a5c <HAL_TIM_PWM_Start_DMA+0x2c>
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	2b02      	cmp	r3, #2
 8012a52:	bf0c      	ite	eq
 8012a54:	2301      	moveq	r3, #1
 8012a56:	2300      	movne	r3, #0
 8012a58:	b2db      	uxtb	r3, r3
 8012a5a:	e03c      	b.n	8012ad6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	2b04      	cmp	r3, #4
 8012a60:	d109      	bne.n	8012a76 <HAL_TIM_PWM_Start_DMA+0x46>
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012a68:	b2db      	uxtb	r3, r3
 8012a6a:	2b02      	cmp	r3, #2
 8012a6c:	bf0c      	ite	eq
 8012a6e:	2301      	moveq	r3, #1
 8012a70:	2300      	movne	r3, #0
 8012a72:	b2db      	uxtb	r3, r3
 8012a74:	e02f      	b.n	8012ad6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	2b08      	cmp	r3, #8
 8012a7a:	d109      	bne.n	8012a90 <HAL_TIM_PWM_Start_DMA+0x60>
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a82:	b2db      	uxtb	r3, r3
 8012a84:	2b02      	cmp	r3, #2
 8012a86:	bf0c      	ite	eq
 8012a88:	2301      	moveq	r3, #1
 8012a8a:	2300      	movne	r3, #0
 8012a8c:	b2db      	uxtb	r3, r3
 8012a8e:	e022      	b.n	8012ad6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	2b0c      	cmp	r3, #12
 8012a94:	d109      	bne.n	8012aaa <HAL_TIM_PWM_Start_DMA+0x7a>
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	2b02      	cmp	r3, #2
 8012aa0:	bf0c      	ite	eq
 8012aa2:	2301      	moveq	r3, #1
 8012aa4:	2300      	movne	r3, #0
 8012aa6:	b2db      	uxtb	r3, r3
 8012aa8:	e015      	b.n	8012ad6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	2b10      	cmp	r3, #16
 8012aae:	d109      	bne.n	8012ac4 <HAL_TIM_PWM_Start_DMA+0x94>
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ab6:	b2db      	uxtb	r3, r3
 8012ab8:	2b02      	cmp	r3, #2
 8012aba:	bf0c      	ite	eq
 8012abc:	2301      	moveq	r3, #1
 8012abe:	2300      	movne	r3, #0
 8012ac0:	b2db      	uxtb	r3, r3
 8012ac2:	e008      	b.n	8012ad6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	2b02      	cmp	r3, #2
 8012ace:	bf0c      	ite	eq
 8012ad0:	2301      	moveq	r3, #1
 8012ad2:	2300      	movne	r3, #0
 8012ad4:	b2db      	uxtb	r3, r3
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d001      	beq.n	8012ade <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8012ada:	2302      	movs	r3, #2
 8012adc:	e1ba      	b.n	8012e54 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d109      	bne.n	8012af8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012aea:	b2db      	uxtb	r3, r3
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	bf0c      	ite	eq
 8012af0:	2301      	moveq	r3, #1
 8012af2:	2300      	movne	r3, #0
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	e03c      	b.n	8012b72 <HAL_TIM_PWM_Start_DMA+0x142>
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	2b04      	cmp	r3, #4
 8012afc:	d109      	bne.n	8012b12 <HAL_TIM_PWM_Start_DMA+0xe2>
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012b04:	b2db      	uxtb	r3, r3
 8012b06:	2b01      	cmp	r3, #1
 8012b08:	bf0c      	ite	eq
 8012b0a:	2301      	moveq	r3, #1
 8012b0c:	2300      	movne	r3, #0
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	e02f      	b.n	8012b72 <HAL_TIM_PWM_Start_DMA+0x142>
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	2b08      	cmp	r3, #8
 8012b16:	d109      	bne.n	8012b2c <HAL_TIM_PWM_Start_DMA+0xfc>
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b1e:	b2db      	uxtb	r3, r3
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	bf0c      	ite	eq
 8012b24:	2301      	moveq	r3, #1
 8012b26:	2300      	movne	r3, #0
 8012b28:	b2db      	uxtb	r3, r3
 8012b2a:	e022      	b.n	8012b72 <HAL_TIM_PWM_Start_DMA+0x142>
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	2b0c      	cmp	r3, #12
 8012b30:	d109      	bne.n	8012b46 <HAL_TIM_PWM_Start_DMA+0x116>
 8012b32:	68fb      	ldr	r3, [r7, #12]
 8012b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012b38:	b2db      	uxtb	r3, r3
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	bf0c      	ite	eq
 8012b3e:	2301      	moveq	r3, #1
 8012b40:	2300      	movne	r3, #0
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	e015      	b.n	8012b72 <HAL_TIM_PWM_Start_DMA+0x142>
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	2b10      	cmp	r3, #16
 8012b4a:	d109      	bne.n	8012b60 <HAL_TIM_PWM_Start_DMA+0x130>
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b52:	b2db      	uxtb	r3, r3
 8012b54:	2b01      	cmp	r3, #1
 8012b56:	bf0c      	ite	eq
 8012b58:	2301      	moveq	r3, #1
 8012b5a:	2300      	movne	r3, #0
 8012b5c:	b2db      	uxtb	r3, r3
 8012b5e:	e008      	b.n	8012b72 <HAL_TIM_PWM_Start_DMA+0x142>
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012b66:	b2db      	uxtb	r3, r3
 8012b68:	2b01      	cmp	r3, #1
 8012b6a:	bf0c      	ite	eq
 8012b6c:	2301      	moveq	r3, #1
 8012b6e:	2300      	movne	r3, #0
 8012b70:	b2db      	uxtb	r3, r3
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d034      	beq.n	8012be0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d104      	bne.n	8012b86 <HAL_TIM_PWM_Start_DMA+0x156>
 8012b7c:	887b      	ldrh	r3, [r7, #2]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d001      	beq.n	8012b86 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8012b82:	2301      	movs	r3, #1
 8012b84:	e166      	b.n	8012e54 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d104      	bne.n	8012b96 <HAL_TIM_PWM_Start_DMA+0x166>
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	2202      	movs	r2, #2
 8012b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012b94:	e026      	b.n	8012be4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	2b04      	cmp	r3, #4
 8012b9a:	d104      	bne.n	8012ba6 <HAL_TIM_PWM_Start_DMA+0x176>
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	2202      	movs	r2, #2
 8012ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012ba4:	e01e      	b.n	8012be4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	2b08      	cmp	r3, #8
 8012baa:	d104      	bne.n	8012bb6 <HAL_TIM_PWM_Start_DMA+0x186>
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	2202      	movs	r2, #2
 8012bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012bb4:	e016      	b.n	8012be4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	2b0c      	cmp	r3, #12
 8012bba:	d104      	bne.n	8012bc6 <HAL_TIM_PWM_Start_DMA+0x196>
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	2202      	movs	r2, #2
 8012bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012bc4:	e00e      	b.n	8012be4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012bc6:	68bb      	ldr	r3, [r7, #8]
 8012bc8:	2b10      	cmp	r3, #16
 8012bca:	d104      	bne.n	8012bd6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8012bcc:	68fb      	ldr	r3, [r7, #12]
 8012bce:	2202      	movs	r2, #2
 8012bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012bd4:	e006      	b.n	8012be4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2202      	movs	r2, #2
 8012bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012bde:	e001      	b.n	8012be4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8012be0:	2301      	movs	r3, #1
 8012be2:	e137      	b.n	8012e54 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8012be4:	68bb      	ldr	r3, [r7, #8]
 8012be6:	2b0c      	cmp	r3, #12
 8012be8:	f200 80ae 	bhi.w	8012d48 <HAL_TIM_PWM_Start_DMA+0x318>
 8012bec:	a201      	add	r2, pc, #4	; (adr r2, 8012bf4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8012bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bf2:	bf00      	nop
 8012bf4:	08012c29 	.word	0x08012c29
 8012bf8:	08012d49 	.word	0x08012d49
 8012bfc:	08012d49 	.word	0x08012d49
 8012c00:	08012d49 	.word	0x08012d49
 8012c04:	08012c71 	.word	0x08012c71
 8012c08:	08012d49 	.word	0x08012d49
 8012c0c:	08012d49 	.word	0x08012d49
 8012c10:	08012d49 	.word	0x08012d49
 8012c14:	08012cb9 	.word	0x08012cb9
 8012c18:	08012d49 	.word	0x08012d49
 8012c1c:	08012d49 	.word	0x08012d49
 8012c20:	08012d49 	.word	0x08012d49
 8012c24:	08012d01 	.word	0x08012d01
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c2c:	4a8b      	ldr	r2, [pc, #556]	; (8012e5c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012c2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c34:	4a8a      	ldr	r2, [pc, #552]	; (8012e60 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012c36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c3c:	4a89      	ldr	r2, [pc, #548]	; (8012e64 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012c3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012c44:	6879      	ldr	r1, [r7, #4]
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	3334      	adds	r3, #52	; 0x34
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	887b      	ldrh	r3, [r7, #2]
 8012c50:	f7f7 fc54 	bl	800a4fc <HAL_DMA_Start_IT>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d001      	beq.n	8012c5e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012c5a:	2301      	movs	r3, #1
 8012c5c:	e0fa      	b.n	8012e54 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	68da      	ldr	r2, [r3, #12]
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c6c:	60da      	str	r2, [r3, #12]
      break;
 8012c6e:	e06e      	b.n	8012d4e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c74:	4a79      	ldr	r2, [pc, #484]	; (8012e5c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012c76:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c7c:	4a78      	ldr	r2, [pc, #480]	; (8012e60 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012c7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c84:	4a77      	ldr	r2, [pc, #476]	; (8012e64 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012c86:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8012c8c:	6879      	ldr	r1, [r7, #4]
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	3338      	adds	r3, #56	; 0x38
 8012c94:	461a      	mov	r2, r3
 8012c96:	887b      	ldrh	r3, [r7, #2]
 8012c98:	f7f7 fc30 	bl	800a4fc <HAL_DMA_Start_IT>
 8012c9c:	4603      	mov	r3, r0
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d001      	beq.n	8012ca6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012ca2:	2301      	movs	r3, #1
 8012ca4:	e0d6      	b.n	8012e54 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	68da      	ldr	r2, [r3, #12]
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012cb4:	60da      	str	r2, [r3, #12]
      break;
 8012cb6:	e04a      	b.n	8012d4e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cbc:	4a67      	ldr	r2, [pc, #412]	; (8012e5c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012cbe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cc4:	4a66      	ldr	r2, [pc, #408]	; (8012e60 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012cc6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ccc:	4a65      	ldr	r2, [pc, #404]	; (8012e64 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012cce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012cd4:	6879      	ldr	r1, [r7, #4]
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	333c      	adds	r3, #60	; 0x3c
 8012cdc:	461a      	mov	r2, r3
 8012cde:	887b      	ldrh	r3, [r7, #2]
 8012ce0:	f7f7 fc0c 	bl	800a4fc <HAL_DMA_Start_IT>
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d001      	beq.n	8012cee <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012cea:	2301      	movs	r3, #1
 8012cec:	e0b2      	b.n	8012e54 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	68da      	ldr	r2, [r3, #12]
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012cfc:	60da      	str	r2, [r3, #12]
      break;
 8012cfe:	e026      	b.n	8012d4e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d04:	4a55      	ldr	r2, [pc, #340]	; (8012e5c <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012d06:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d0c:	4a54      	ldr	r2, [pc, #336]	; (8012e60 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012d0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d14:	4a53      	ldr	r2, [pc, #332]	; (8012e64 <HAL_TIM_PWM_Start_DMA+0x434>)
 8012d16:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012d1c:	6879      	ldr	r1, [r7, #4]
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	3340      	adds	r3, #64	; 0x40
 8012d24:	461a      	mov	r2, r3
 8012d26:	887b      	ldrh	r3, [r7, #2]
 8012d28:	f7f7 fbe8 	bl	800a4fc <HAL_DMA_Start_IT>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d001      	beq.n	8012d36 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012d32:	2301      	movs	r3, #1
 8012d34:	e08e      	b.n	8012e54 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	68da      	ldr	r2, [r3, #12]
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012d44:	60da      	str	r2, [r3, #12]
      break;
 8012d46:	e002      	b.n	8012d4e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8012d48:	2301      	movs	r3, #1
 8012d4a:	75fb      	strb	r3, [r7, #23]
      break;
 8012d4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8012d4e:	7dfb      	ldrb	r3, [r7, #23]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d17e      	bne.n	8012e52 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	2201      	movs	r2, #1
 8012d5a:	68b9      	ldr	r1, [r7, #8]
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	f001 fb11 	bl	8014384 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	4a40      	ldr	r2, [pc, #256]	; (8012e68 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012d68:	4293      	cmp	r3, r2
 8012d6a:	d013      	beq.n	8012d94 <HAL_TIM_PWM_Start_DMA+0x364>
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	4a3e      	ldr	r2, [pc, #248]	; (8012e6c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012d72:	4293      	cmp	r3, r2
 8012d74:	d00e      	beq.n	8012d94 <HAL_TIM_PWM_Start_DMA+0x364>
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	4a3d      	ldr	r2, [pc, #244]	; (8012e70 <HAL_TIM_PWM_Start_DMA+0x440>)
 8012d7c:	4293      	cmp	r3, r2
 8012d7e:	d009      	beq.n	8012d94 <HAL_TIM_PWM_Start_DMA+0x364>
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	4a3b      	ldr	r2, [pc, #236]	; (8012e74 <HAL_TIM_PWM_Start_DMA+0x444>)
 8012d86:	4293      	cmp	r3, r2
 8012d88:	d004      	beq.n	8012d94 <HAL_TIM_PWM_Start_DMA+0x364>
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	4a3a      	ldr	r2, [pc, #232]	; (8012e78 <HAL_TIM_PWM_Start_DMA+0x448>)
 8012d90:	4293      	cmp	r3, r2
 8012d92:	d101      	bne.n	8012d98 <HAL_TIM_PWM_Start_DMA+0x368>
 8012d94:	2301      	movs	r3, #1
 8012d96:	e000      	b.n	8012d9a <HAL_TIM_PWM_Start_DMA+0x36a>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d007      	beq.n	8012dae <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012dac:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	4a2d      	ldr	r2, [pc, #180]	; (8012e68 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012db4:	4293      	cmp	r3, r2
 8012db6:	d02c      	beq.n	8012e12 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012dc0:	d027      	beq.n	8012e12 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	4a2d      	ldr	r2, [pc, #180]	; (8012e7c <HAL_TIM_PWM_Start_DMA+0x44c>)
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	d022      	beq.n	8012e12 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	4a2b      	ldr	r2, [pc, #172]	; (8012e80 <HAL_TIM_PWM_Start_DMA+0x450>)
 8012dd2:	4293      	cmp	r3, r2
 8012dd4:	d01d      	beq.n	8012e12 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	4a2a      	ldr	r2, [pc, #168]	; (8012e84 <HAL_TIM_PWM_Start_DMA+0x454>)
 8012ddc:	4293      	cmp	r3, r2
 8012dde:	d018      	beq.n	8012e12 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	4a21      	ldr	r2, [pc, #132]	; (8012e6c <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012de6:	4293      	cmp	r3, r2
 8012de8:	d013      	beq.n	8012e12 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	4a26      	ldr	r2, [pc, #152]	; (8012e88 <HAL_TIM_PWM_Start_DMA+0x458>)
 8012df0:	4293      	cmp	r3, r2
 8012df2:	d00e      	beq.n	8012e12 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	4a1d      	ldr	r2, [pc, #116]	; (8012e70 <HAL_TIM_PWM_Start_DMA+0x440>)
 8012dfa:	4293      	cmp	r3, r2
 8012dfc:	d009      	beq.n	8012e12 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	4a22      	ldr	r2, [pc, #136]	; (8012e8c <HAL_TIM_PWM_Start_DMA+0x45c>)
 8012e04:	4293      	cmp	r3, r2
 8012e06:	d004      	beq.n	8012e12 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	4a20      	ldr	r2, [pc, #128]	; (8012e90 <HAL_TIM_PWM_Start_DMA+0x460>)
 8012e0e:	4293      	cmp	r3, r2
 8012e10:	d115      	bne.n	8012e3e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	689a      	ldr	r2, [r3, #8]
 8012e18:	4b1e      	ldr	r3, [pc, #120]	; (8012e94 <HAL_TIM_PWM_Start_DMA+0x464>)
 8012e1a:	4013      	ands	r3, r2
 8012e1c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e1e:	693b      	ldr	r3, [r7, #16]
 8012e20:	2b06      	cmp	r3, #6
 8012e22:	d015      	beq.n	8012e50 <HAL_TIM_PWM_Start_DMA+0x420>
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e2a:	d011      	beq.n	8012e50 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8012e2c:	68fb      	ldr	r3, [r7, #12]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	681a      	ldr	r2, [r3, #0]
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	f042 0201 	orr.w	r2, r2, #1
 8012e3a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e3c:	e008      	b.n	8012e50 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	681a      	ldr	r2, [r3, #0]
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	f042 0201 	orr.w	r2, r2, #1
 8012e4c:	601a      	str	r2, [r3, #0]
 8012e4e:	e000      	b.n	8012e52 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e50:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	3718      	adds	r7, #24
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}
 8012e5c:	08013a3f 	.word	0x08013a3f
 8012e60:	08013ae7 	.word	0x08013ae7
 8012e64:	080139ad 	.word	0x080139ad
 8012e68:	40010000 	.word	0x40010000
 8012e6c:	40010400 	.word	0x40010400
 8012e70:	40014000 	.word	0x40014000
 8012e74:	40014400 	.word	0x40014400
 8012e78:	40014800 	.word	0x40014800
 8012e7c:	40000400 	.word	0x40000400
 8012e80:	40000800 	.word	0x40000800
 8012e84:	40000c00 	.word	0x40000c00
 8012e88:	40001800 	.word	0x40001800
 8012e8c:	4000e000 	.word	0x4000e000
 8012e90:	4000e400 	.word	0x4000e400
 8012e94:	00010007 	.word	0x00010007

08012e98 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b084      	sub	sp, #16
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
 8012ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	2b0c      	cmp	r3, #12
 8012eaa:	d855      	bhi.n	8012f58 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8012eac:	a201      	add	r2, pc, #4	; (adr r2, 8012eb4 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8012eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eb2:	bf00      	nop
 8012eb4:	08012ee9 	.word	0x08012ee9
 8012eb8:	08012f59 	.word	0x08012f59
 8012ebc:	08012f59 	.word	0x08012f59
 8012ec0:	08012f59 	.word	0x08012f59
 8012ec4:	08012f05 	.word	0x08012f05
 8012ec8:	08012f59 	.word	0x08012f59
 8012ecc:	08012f59 	.word	0x08012f59
 8012ed0:	08012f59 	.word	0x08012f59
 8012ed4:	08012f21 	.word	0x08012f21
 8012ed8:	08012f59 	.word	0x08012f59
 8012edc:	08012f59 	.word	0x08012f59
 8012ee0:	08012f59 	.word	0x08012f59
 8012ee4:	08012f3d 	.word	0x08012f3d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	681b      	ldr	r3, [r3, #0]
 8012eec:	68da      	ldr	r2, [r3, #12]
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012ef6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7f8 f885 	bl	800b00c <HAL_DMA_Abort_IT>
      break;
 8012f02:	e02c      	b.n	8012f5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	68da      	ldr	r2, [r3, #12]
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012f12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7f8 f877 	bl	800b00c <HAL_DMA_Abort_IT>
      break;
 8012f1e:	e01e      	b.n	8012f5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	68da      	ldr	r2, [r3, #12]
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012f2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f34:	4618      	mov	r0, r3
 8012f36:	f7f8 f869 	bl	800b00c <HAL_DMA_Abort_IT>
      break;
 8012f3a:	e010      	b.n	8012f5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	68da      	ldr	r2, [r3, #12]
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012f4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f50:	4618      	mov	r0, r3
 8012f52:	f7f8 f85b 	bl	800b00c <HAL_DMA_Abort_IT>
      break;
 8012f56:	e002      	b.n	8012f5e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8012f58:	2301      	movs	r3, #1
 8012f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8012f5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8012f5e:	7bfb      	ldrb	r3, [r7, #15]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	f040 8081 	bne.w	8013068 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	6839      	ldr	r1, [r7, #0]
 8012f6e:	4618      	mov	r0, r3
 8012f70:	f001 fa08 	bl	8014384 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	4a3e      	ldr	r2, [pc, #248]	; (8013074 <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8012f7a:	4293      	cmp	r3, r2
 8012f7c:	d013      	beq.n	8012fa6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	4a3d      	ldr	r2, [pc, #244]	; (8013078 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8012f84:	4293      	cmp	r3, r2
 8012f86:	d00e      	beq.n	8012fa6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	4a3b      	ldr	r2, [pc, #236]	; (801307c <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8012f8e:	4293      	cmp	r3, r2
 8012f90:	d009      	beq.n	8012fa6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681b      	ldr	r3, [r3, #0]
 8012f96:	4a3a      	ldr	r2, [pc, #232]	; (8013080 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8012f98:	4293      	cmp	r3, r2
 8012f9a:	d004      	beq.n	8012fa6 <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a38      	ldr	r2, [pc, #224]	; (8013084 <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8012fa2:	4293      	cmp	r3, r2
 8012fa4:	d101      	bne.n	8012faa <HAL_TIM_PWM_Stop_DMA+0x112>
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	e000      	b.n	8012fac <HAL_TIM_PWM_Stop_DMA+0x114>
 8012faa:	2300      	movs	r3, #0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d017      	beq.n	8012fe0 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	6a1a      	ldr	r2, [r3, #32]
 8012fb6:	f241 1311 	movw	r3, #4369	; 0x1111
 8012fba:	4013      	ands	r3, r2
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d10f      	bne.n	8012fe0 <HAL_TIM_PWM_Stop_DMA+0x148>
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	6a1a      	ldr	r2, [r3, #32]
 8012fc6:	f240 4344 	movw	r3, #1092	; 0x444
 8012fca:	4013      	ands	r3, r2
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d107      	bne.n	8012fe0 <HAL_TIM_PWM_Stop_DMA+0x148>
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012fde:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	6a1a      	ldr	r2, [r3, #32]
 8012fe6:	f241 1311 	movw	r3, #4369	; 0x1111
 8012fea:	4013      	ands	r3, r2
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d10f      	bne.n	8013010 <HAL_TIM_PWM_Stop_DMA+0x178>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	6a1a      	ldr	r2, [r3, #32]
 8012ff6:	f240 4344 	movw	r3, #1092	; 0x444
 8012ffa:	4013      	ands	r3, r2
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d107      	bne.n	8013010 <HAL_TIM_PWM_Stop_DMA+0x178>
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	681a      	ldr	r2, [r3, #0]
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	f022 0201 	bic.w	r2, r2, #1
 801300e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d104      	bne.n	8013020 <HAL_TIM_PWM_Stop_DMA+0x188>
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	2201      	movs	r2, #1
 801301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801301e:	e023      	b.n	8013068 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	2b04      	cmp	r3, #4
 8013024:	d104      	bne.n	8013030 <HAL_TIM_PWM_Stop_DMA+0x198>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2201      	movs	r2, #1
 801302a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801302e:	e01b      	b.n	8013068 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	2b08      	cmp	r3, #8
 8013034:	d104      	bne.n	8013040 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	2201      	movs	r2, #1
 801303a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801303e:	e013      	b.n	8013068 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8013040:	683b      	ldr	r3, [r7, #0]
 8013042:	2b0c      	cmp	r3, #12
 8013044:	d104      	bne.n	8013050 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	2201      	movs	r2, #1
 801304a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801304e:	e00b      	b.n	8013068 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	2b10      	cmp	r3, #16
 8013054:	d104      	bne.n	8013060 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	2201      	movs	r2, #1
 801305a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801305e:	e003      	b.n	8013068 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	2201      	movs	r2, #1
 8013064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8013068:	7bfb      	ldrb	r3, [r7, #15]
}
 801306a:	4618      	mov	r0, r3
 801306c:	3710      	adds	r7, #16
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	40010000 	.word	0x40010000
 8013078:	40010400 	.word	0x40010400
 801307c:	40014000 	.word	0x40014000
 8013080:	40014400 	.word	0x40014400
 8013084:	40014800 	.word	0x40014800

08013088 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b086      	sub	sp, #24
 801308c:	af00      	add	r7, sp, #0
 801308e:	6078      	str	r0, [r7, #4]
 8013090:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d101      	bne.n	801309c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8013098:	2301      	movs	r3, #1
 801309a:	e08f      	b.n	80131bc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80130a2:	b2db      	uxtb	r3, r3
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d106      	bne.n	80130b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	2200      	movs	r2, #0
 80130ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f7f3 fc65 	bl	8006980 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	2202      	movs	r2, #2
 80130ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	6899      	ldr	r1, [r3, #8]
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	681a      	ldr	r2, [r3, #0]
 80130c8:	4b3e      	ldr	r3, [pc, #248]	; (80131c4 <HAL_TIM_Encoder_Init+0x13c>)
 80130ca:	400b      	ands	r3, r1
 80130cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	681a      	ldr	r2, [r3, #0]
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	3304      	adds	r3, #4
 80130d6:	4619      	mov	r1, r3
 80130d8:	4610      	mov	r0, r2
 80130da:	f000 fd39 	bl	8013b50 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	689b      	ldr	r3, [r3, #8]
 80130e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	699b      	ldr	r3, [r3, #24]
 80130ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	6a1b      	ldr	r3, [r3, #32]
 80130f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	697a      	ldr	r2, [r7, #20]
 80130fc:	4313      	orrs	r3, r2
 80130fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8013100:	693a      	ldr	r2, [r7, #16]
 8013102:	4b31      	ldr	r3, [pc, #196]	; (80131c8 <HAL_TIM_Encoder_Init+0x140>)
 8013104:	4013      	ands	r3, r2
 8013106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	689a      	ldr	r2, [r3, #8]
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	699b      	ldr	r3, [r3, #24]
 8013110:	021b      	lsls	r3, r3, #8
 8013112:	4313      	orrs	r3, r2
 8013114:	693a      	ldr	r2, [r7, #16]
 8013116:	4313      	orrs	r3, r2
 8013118:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 801311a:	693a      	ldr	r2, [r7, #16]
 801311c:	4b2b      	ldr	r3, [pc, #172]	; (80131cc <HAL_TIM_Encoder_Init+0x144>)
 801311e:	4013      	ands	r3, r2
 8013120:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8013122:	693a      	ldr	r2, [r7, #16]
 8013124:	4b2a      	ldr	r3, [pc, #168]	; (80131d0 <HAL_TIM_Encoder_Init+0x148>)
 8013126:	4013      	ands	r3, r2
 8013128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	68da      	ldr	r2, [r3, #12]
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	69db      	ldr	r3, [r3, #28]
 8013132:	021b      	lsls	r3, r3, #8
 8013134:	4313      	orrs	r3, r2
 8013136:	693a      	ldr	r2, [r7, #16]
 8013138:	4313      	orrs	r3, r2
 801313a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	691b      	ldr	r3, [r3, #16]
 8013140:	011a      	lsls	r2, r3, #4
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	6a1b      	ldr	r3, [r3, #32]
 8013146:	031b      	lsls	r3, r3, #12
 8013148:	4313      	orrs	r3, r2
 801314a:	693a      	ldr	r2, [r7, #16]
 801314c:	4313      	orrs	r3, r2
 801314e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8013156:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801315e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	685a      	ldr	r2, [r3, #4]
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	695b      	ldr	r3, [r3, #20]
 8013168:	011b      	lsls	r3, r3, #4
 801316a:	4313      	orrs	r3, r2
 801316c:	68fa      	ldr	r2, [r7, #12]
 801316e:	4313      	orrs	r3, r2
 8013170:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	697a      	ldr	r2, [r7, #20]
 8013178:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	693a      	ldr	r2, [r7, #16]
 8013180:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	68fa      	ldr	r2, [r7, #12]
 8013188:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2201      	movs	r2, #1
 801318e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2201      	movs	r2, #1
 8013196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	2201      	movs	r2, #1
 801319e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2201      	movs	r2, #1
 80131a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2201      	movs	r2, #1
 80131ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2201      	movs	r2, #1
 80131b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80131ba:	2300      	movs	r3, #0
}
 80131bc:	4618      	mov	r0, r3
 80131be:	3718      	adds	r7, #24
 80131c0:	46bd      	mov	sp, r7
 80131c2:	bd80      	pop	{r7, pc}
 80131c4:	fffebff8 	.word	0xfffebff8
 80131c8:	fffffcfc 	.word	0xfffffcfc
 80131cc:	fffff3f3 	.word	0xfffff3f3
 80131d0:	ffff0f0f 	.word	0xffff0f0f

080131d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b084      	sub	sp, #16
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
 80131dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80131e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80131ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80131f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80131fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d110      	bne.n	8013226 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8013204:	7bfb      	ldrb	r3, [r7, #15]
 8013206:	2b01      	cmp	r3, #1
 8013208:	d102      	bne.n	8013210 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 801320a:	7b7b      	ldrb	r3, [r7, #13]
 801320c:	2b01      	cmp	r3, #1
 801320e:	d001      	beq.n	8013214 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8013210:	2301      	movs	r3, #1
 8013212:	e069      	b.n	80132e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2202      	movs	r2, #2
 8013218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	2202      	movs	r2, #2
 8013220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013224:	e031      	b.n	801328a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	2b04      	cmp	r3, #4
 801322a:	d110      	bne.n	801324e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801322c:	7bbb      	ldrb	r3, [r7, #14]
 801322e:	2b01      	cmp	r3, #1
 8013230:	d102      	bne.n	8013238 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8013232:	7b3b      	ldrb	r3, [r7, #12]
 8013234:	2b01      	cmp	r3, #1
 8013236:	d001      	beq.n	801323c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8013238:	2301      	movs	r3, #1
 801323a:	e055      	b.n	80132e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	2202      	movs	r2, #2
 8013240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2202      	movs	r2, #2
 8013248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801324c:	e01d      	b.n	801328a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801324e:	7bfb      	ldrb	r3, [r7, #15]
 8013250:	2b01      	cmp	r3, #1
 8013252:	d108      	bne.n	8013266 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8013254:	7bbb      	ldrb	r3, [r7, #14]
 8013256:	2b01      	cmp	r3, #1
 8013258:	d105      	bne.n	8013266 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801325a:	7b7b      	ldrb	r3, [r7, #13]
 801325c:	2b01      	cmp	r3, #1
 801325e:	d102      	bne.n	8013266 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8013260:	7b3b      	ldrb	r3, [r7, #12]
 8013262:	2b01      	cmp	r3, #1
 8013264:	d001      	beq.n	801326a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8013266:	2301      	movs	r3, #1
 8013268:	e03e      	b.n	80132e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	2202      	movs	r2, #2
 801326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	2202      	movs	r2, #2
 8013276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2202      	movs	r2, #2
 801327e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2202      	movs	r2, #2
 8013286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 801328a:	683b      	ldr	r3, [r7, #0]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d003      	beq.n	8013298 <HAL_TIM_Encoder_Start+0xc4>
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	2b04      	cmp	r3, #4
 8013294:	d008      	beq.n	80132a8 <HAL_TIM_Encoder_Start+0xd4>
 8013296:	e00f      	b.n	80132b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	2201      	movs	r2, #1
 801329e:	2100      	movs	r1, #0
 80132a0:	4618      	mov	r0, r3
 80132a2:	f001 f86f 	bl	8014384 <TIM_CCxChannelCmd>
      break;
 80132a6:	e016      	b.n	80132d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	2201      	movs	r2, #1
 80132ae:	2104      	movs	r1, #4
 80132b0:	4618      	mov	r0, r3
 80132b2:	f001 f867 	bl	8014384 <TIM_CCxChannelCmd>
      break;
 80132b6:	e00e      	b.n	80132d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	2201      	movs	r2, #1
 80132be:	2100      	movs	r1, #0
 80132c0:	4618      	mov	r0, r3
 80132c2:	f001 f85f 	bl	8014384 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	2201      	movs	r2, #1
 80132cc:	2104      	movs	r1, #4
 80132ce:	4618      	mov	r0, r3
 80132d0:	f001 f858 	bl	8014384 <TIM_CCxChannelCmd>
      break;
 80132d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	681a      	ldr	r2, [r3, #0]
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	f042 0201 	orr.w	r2, r2, #1
 80132e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80132e6:	2300      	movs	r3, #0
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	3710      	adds	r7, #16
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	691b      	ldr	r3, [r3, #16]
 80132fe:	f003 0302 	and.w	r3, r3, #2
 8013302:	2b02      	cmp	r3, #2
 8013304:	d122      	bne.n	801334c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	68db      	ldr	r3, [r3, #12]
 801330c:	f003 0302 	and.w	r3, r3, #2
 8013310:	2b02      	cmp	r3, #2
 8013312:	d11b      	bne.n	801334c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f06f 0202 	mvn.w	r2, #2
 801331c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2201      	movs	r2, #1
 8013322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	699b      	ldr	r3, [r3, #24]
 801332a:	f003 0303 	and.w	r3, r3, #3
 801332e:	2b00      	cmp	r3, #0
 8013330:	d003      	beq.n	801333a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8013332:	6878      	ldr	r0, [r7, #4]
 8013334:	f000 fb12 	bl	801395c <HAL_TIM_IC_CaptureCallback>
 8013338:	e005      	b.n	8013346 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f000 fb04 	bl	8013948 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013340:	6878      	ldr	r0, [r7, #4]
 8013342:	f7f0 f9a9 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2200      	movs	r2, #0
 801334a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	691b      	ldr	r3, [r3, #16]
 8013352:	f003 0304 	and.w	r3, r3, #4
 8013356:	2b04      	cmp	r3, #4
 8013358:	d122      	bne.n	80133a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	68db      	ldr	r3, [r3, #12]
 8013360:	f003 0304 	and.w	r3, r3, #4
 8013364:	2b04      	cmp	r3, #4
 8013366:	d11b      	bne.n	80133a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	f06f 0204 	mvn.w	r2, #4
 8013370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	2202      	movs	r2, #2
 8013376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	699b      	ldr	r3, [r3, #24]
 801337e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013382:	2b00      	cmp	r3, #0
 8013384:	d003      	beq.n	801338e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f000 fae8 	bl	801395c <HAL_TIM_IC_CaptureCallback>
 801338c:	e005      	b.n	801339a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f000 fada 	bl	8013948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013394:	6878      	ldr	r0, [r7, #4]
 8013396:	f7f0 f97f 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2200      	movs	r2, #0
 801339e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	691b      	ldr	r3, [r3, #16]
 80133a6:	f003 0308 	and.w	r3, r3, #8
 80133aa:	2b08      	cmp	r3, #8
 80133ac:	d122      	bne.n	80133f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	68db      	ldr	r3, [r3, #12]
 80133b4:	f003 0308 	and.w	r3, r3, #8
 80133b8:	2b08      	cmp	r3, #8
 80133ba:	d11b      	bne.n	80133f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	f06f 0208 	mvn.w	r2, #8
 80133c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2204      	movs	r2, #4
 80133ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	69db      	ldr	r3, [r3, #28]
 80133d2:	f003 0303 	and.w	r3, r3, #3
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d003      	beq.n	80133e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80133da:	6878      	ldr	r0, [r7, #4]
 80133dc:	f000 fabe 	bl	801395c <HAL_TIM_IC_CaptureCallback>
 80133e0:	e005      	b.n	80133ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f000 fab0 	bl	8013948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80133e8:	6878      	ldr	r0, [r7, #4]
 80133ea:	f7f0 f955 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2200      	movs	r2, #0
 80133f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	691b      	ldr	r3, [r3, #16]
 80133fa:	f003 0310 	and.w	r3, r3, #16
 80133fe:	2b10      	cmp	r3, #16
 8013400:	d122      	bne.n	8013448 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	68db      	ldr	r3, [r3, #12]
 8013408:	f003 0310 	and.w	r3, r3, #16
 801340c:	2b10      	cmp	r3, #16
 801340e:	d11b      	bne.n	8013448 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	f06f 0210 	mvn.w	r2, #16
 8013418:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	2208      	movs	r2, #8
 801341e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	69db      	ldr	r3, [r3, #28]
 8013426:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801342a:	2b00      	cmp	r3, #0
 801342c:	d003      	beq.n	8013436 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801342e:	6878      	ldr	r0, [r7, #4]
 8013430:	f000 fa94 	bl	801395c <HAL_TIM_IC_CaptureCallback>
 8013434:	e005      	b.n	8013442 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f000 fa86 	bl	8013948 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801343c:	6878      	ldr	r0, [r7, #4]
 801343e:	f7f0 f92b 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	2200      	movs	r2, #0
 8013446:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	691b      	ldr	r3, [r3, #16]
 801344e:	f003 0301 	and.w	r3, r3, #1
 8013452:	2b01      	cmp	r3, #1
 8013454:	d10e      	bne.n	8013474 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	68db      	ldr	r3, [r3, #12]
 801345c:	f003 0301 	and.w	r3, r3, #1
 8013460:	2b01      	cmp	r3, #1
 8013462:	d107      	bne.n	8013474 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	f06f 0201 	mvn.w	r2, #1
 801346c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f7f0 f95e 	bl	8003730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	691b      	ldr	r3, [r3, #16]
 801347a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801347e:	2b80      	cmp	r3, #128	; 0x80
 8013480:	d10e      	bne.n	80134a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801348c:	2b80      	cmp	r3, #128	; 0x80
 801348e:	d107      	bne.n	80134a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8013498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801349a:	6878      	ldr	r0, [r7, #4]
 801349c:	f001 f8de 	bl	801465c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	691b      	ldr	r3, [r3, #16]
 80134a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134ae:	d10e      	bne.n	80134ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	68db      	ldr	r3, [r3, #12]
 80134b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134ba:	2b80      	cmp	r3, #128	; 0x80
 80134bc:	d107      	bne.n	80134ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80134c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80134c8:	6878      	ldr	r0, [r7, #4]
 80134ca:	f001 f8d1 	bl	8014670 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	691b      	ldr	r3, [r3, #16]
 80134d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134d8:	2b40      	cmp	r3, #64	; 0x40
 80134da:	d10e      	bne.n	80134fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	68db      	ldr	r3, [r3, #12]
 80134e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134e6:	2b40      	cmp	r3, #64	; 0x40
 80134e8:	d107      	bne.n	80134fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80134f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f000 fa45 	bl	8013984 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	691b      	ldr	r3, [r3, #16]
 8013500:	f003 0320 	and.w	r3, r3, #32
 8013504:	2b20      	cmp	r3, #32
 8013506:	d10e      	bne.n	8013526 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	f003 0320 	and.w	r3, r3, #32
 8013512:	2b20      	cmp	r3, #32
 8013514:	d107      	bne.n	8013526 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8013516:	687b      	ldr	r3, [r7, #4]
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	f06f 0220 	mvn.w	r2, #32
 801351e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f001 f891 	bl	8014648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8013526:	bf00      	nop
 8013528:	3708      	adds	r7, #8
 801352a:	46bd      	mov	sp, r7
 801352c:	bd80      	pop	{r7, pc}
	...

08013530 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af00      	add	r7, sp, #0
 8013536:	60f8      	str	r0, [r7, #12]
 8013538:	60b9      	str	r1, [r7, #8]
 801353a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801353c:	2300      	movs	r3, #0
 801353e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013546:	2b01      	cmp	r3, #1
 8013548:	d101      	bne.n	801354e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801354a:	2302      	movs	r3, #2
 801354c:	e0ff      	b.n	801374e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	2201      	movs	r2, #1
 8013552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	2b14      	cmp	r3, #20
 801355a:	f200 80f0 	bhi.w	801373e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801355e:	a201      	add	r2, pc, #4	; (adr r2, 8013564 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013564:	080135b9 	.word	0x080135b9
 8013568:	0801373f 	.word	0x0801373f
 801356c:	0801373f 	.word	0x0801373f
 8013570:	0801373f 	.word	0x0801373f
 8013574:	080135f9 	.word	0x080135f9
 8013578:	0801373f 	.word	0x0801373f
 801357c:	0801373f 	.word	0x0801373f
 8013580:	0801373f 	.word	0x0801373f
 8013584:	0801363b 	.word	0x0801363b
 8013588:	0801373f 	.word	0x0801373f
 801358c:	0801373f 	.word	0x0801373f
 8013590:	0801373f 	.word	0x0801373f
 8013594:	0801367b 	.word	0x0801367b
 8013598:	0801373f 	.word	0x0801373f
 801359c:	0801373f 	.word	0x0801373f
 80135a0:	0801373f 	.word	0x0801373f
 80135a4:	080136bd 	.word	0x080136bd
 80135a8:	0801373f 	.word	0x0801373f
 80135ac:	0801373f 	.word	0x0801373f
 80135b0:	0801373f 	.word	0x0801373f
 80135b4:	080136fd 	.word	0x080136fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	68b9      	ldr	r1, [r7, #8]
 80135be:	4618      	mov	r0, r3
 80135c0:	f000 fb6c 	bl	8013c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	699a      	ldr	r2, [r3, #24]
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f042 0208 	orr.w	r2, r2, #8
 80135d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	699a      	ldr	r2, [r3, #24]
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	f022 0204 	bic.w	r2, r2, #4
 80135e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	6999      	ldr	r1, [r3, #24]
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	691a      	ldr	r2, [r3, #16]
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	430a      	orrs	r2, r1
 80135f4:	619a      	str	r2, [r3, #24]
      break;
 80135f6:	e0a5      	b.n	8013744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	68b9      	ldr	r1, [r7, #8]
 80135fe:	4618      	mov	r0, r3
 8013600:	f000 fbdc 	bl	8013dbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	699a      	ldr	r2, [r3, #24]
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013612:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	699a      	ldr	r2, [r3, #24]
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013622:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	6999      	ldr	r1, [r3, #24]
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	691b      	ldr	r3, [r3, #16]
 801362e:	021a      	lsls	r2, r3, #8
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	430a      	orrs	r2, r1
 8013636:	619a      	str	r2, [r3, #24]
      break;
 8013638:	e084      	b.n	8013744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	68b9      	ldr	r1, [r7, #8]
 8013640:	4618      	mov	r0, r3
 8013642:	f000 fc45 	bl	8013ed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	69da      	ldr	r2, [r3, #28]
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	f042 0208 	orr.w	r2, r2, #8
 8013654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	69da      	ldr	r2, [r3, #28]
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	f022 0204 	bic.w	r2, r2, #4
 8013664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	69d9      	ldr	r1, [r3, #28]
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	691a      	ldr	r2, [r3, #16]
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	430a      	orrs	r2, r1
 8013676:	61da      	str	r2, [r3, #28]
      break;
 8013678:	e064      	b.n	8013744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	68b9      	ldr	r1, [r7, #8]
 8013680:	4618      	mov	r0, r3
 8013682:	f000 fcad 	bl	8013fe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	69da      	ldr	r2, [r3, #28]
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013694:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	681b      	ldr	r3, [r3, #0]
 801369a:	69da      	ldr	r2, [r3, #28]
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80136a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	69d9      	ldr	r1, [r3, #28]
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	691b      	ldr	r3, [r3, #16]
 80136b0:	021a      	lsls	r2, r3, #8
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	430a      	orrs	r2, r1
 80136b8:	61da      	str	r2, [r3, #28]
      break;
 80136ba:	e043      	b.n	8013744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	68b9      	ldr	r1, [r7, #8]
 80136c2:	4618      	mov	r0, r3
 80136c4:	f000 fcf6 	bl	80140b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	f042 0208 	orr.w	r2, r2, #8
 80136d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f022 0204 	bic.w	r2, r2, #4
 80136e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	691a      	ldr	r2, [r3, #16]
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	430a      	orrs	r2, r1
 80136f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80136fa:	e023      	b.n	8013744 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	681b      	ldr	r3, [r3, #0]
 8013700:	68b9      	ldr	r1, [r7, #8]
 8013702:	4618      	mov	r0, r3
 8013704:	f000 fd3a 	bl	801417c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013716:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	681b      	ldr	r3, [r3, #0]
 8013722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013726:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	691b      	ldr	r3, [r3, #16]
 8013732:	021a      	lsls	r2, r3, #8
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	430a      	orrs	r2, r1
 801373a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801373c:	e002      	b.n	8013744 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801373e:	2301      	movs	r3, #1
 8013740:	75fb      	strb	r3, [r7, #23]
      break;
 8013742:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	2200      	movs	r2, #0
 8013748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801374c:	7dfb      	ldrb	r3, [r7, #23]
}
 801374e:	4618      	mov	r0, r3
 8013750:	3718      	adds	r7, #24
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
 8013756:	bf00      	nop

08013758 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013758:	b580      	push	{r7, lr}
 801375a:	b084      	sub	sp, #16
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013762:	2300      	movs	r3, #0
 8013764:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801376c:	2b01      	cmp	r3, #1
 801376e:	d101      	bne.n	8013774 <HAL_TIM_ConfigClockSource+0x1c>
 8013770:	2302      	movs	r3, #2
 8013772:	e0dc      	b.n	801392e <HAL_TIM_ConfigClockSource+0x1d6>
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	2201      	movs	r2, #1
 8013778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2202      	movs	r2, #2
 8013780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	689b      	ldr	r3, [r3, #8]
 801378a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801378c:	68ba      	ldr	r2, [r7, #8]
 801378e:	4b6a      	ldr	r3, [pc, #424]	; (8013938 <HAL_TIM_ConfigClockSource+0x1e0>)
 8013790:	4013      	ands	r3, r2
 8013792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801379a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	68ba      	ldr	r2, [r7, #8]
 80137a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	4a64      	ldr	r2, [pc, #400]	; (801393c <HAL_TIM_ConfigClockSource+0x1e4>)
 80137aa:	4293      	cmp	r3, r2
 80137ac:	f000 80a9 	beq.w	8013902 <HAL_TIM_ConfigClockSource+0x1aa>
 80137b0:	4a62      	ldr	r2, [pc, #392]	; (801393c <HAL_TIM_ConfigClockSource+0x1e4>)
 80137b2:	4293      	cmp	r3, r2
 80137b4:	f200 80ae 	bhi.w	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 80137b8:	4a61      	ldr	r2, [pc, #388]	; (8013940 <HAL_TIM_ConfigClockSource+0x1e8>)
 80137ba:	4293      	cmp	r3, r2
 80137bc:	f000 80a1 	beq.w	8013902 <HAL_TIM_ConfigClockSource+0x1aa>
 80137c0:	4a5f      	ldr	r2, [pc, #380]	; (8013940 <HAL_TIM_ConfigClockSource+0x1e8>)
 80137c2:	4293      	cmp	r3, r2
 80137c4:	f200 80a6 	bhi.w	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 80137c8:	4a5e      	ldr	r2, [pc, #376]	; (8013944 <HAL_TIM_ConfigClockSource+0x1ec>)
 80137ca:	4293      	cmp	r3, r2
 80137cc:	f000 8099 	beq.w	8013902 <HAL_TIM_ConfigClockSource+0x1aa>
 80137d0:	4a5c      	ldr	r2, [pc, #368]	; (8013944 <HAL_TIM_ConfigClockSource+0x1ec>)
 80137d2:	4293      	cmp	r3, r2
 80137d4:	f200 809e 	bhi.w	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 80137d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80137dc:	f000 8091 	beq.w	8013902 <HAL_TIM_ConfigClockSource+0x1aa>
 80137e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80137e4:	f200 8096 	bhi.w	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 80137e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80137ec:	f000 8089 	beq.w	8013902 <HAL_TIM_ConfigClockSource+0x1aa>
 80137f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80137f4:	f200 808e 	bhi.w	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 80137f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80137fc:	d03e      	beq.n	801387c <HAL_TIM_ConfigClockSource+0x124>
 80137fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013802:	f200 8087 	bhi.w	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 8013806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801380a:	f000 8086 	beq.w	801391a <HAL_TIM_ConfigClockSource+0x1c2>
 801380e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013812:	d87f      	bhi.n	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 8013814:	2b70      	cmp	r3, #112	; 0x70
 8013816:	d01a      	beq.n	801384e <HAL_TIM_ConfigClockSource+0xf6>
 8013818:	2b70      	cmp	r3, #112	; 0x70
 801381a:	d87b      	bhi.n	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 801381c:	2b60      	cmp	r3, #96	; 0x60
 801381e:	d050      	beq.n	80138c2 <HAL_TIM_ConfigClockSource+0x16a>
 8013820:	2b60      	cmp	r3, #96	; 0x60
 8013822:	d877      	bhi.n	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 8013824:	2b50      	cmp	r3, #80	; 0x50
 8013826:	d03c      	beq.n	80138a2 <HAL_TIM_ConfigClockSource+0x14a>
 8013828:	2b50      	cmp	r3, #80	; 0x50
 801382a:	d873      	bhi.n	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 801382c:	2b40      	cmp	r3, #64	; 0x40
 801382e:	d058      	beq.n	80138e2 <HAL_TIM_ConfigClockSource+0x18a>
 8013830:	2b40      	cmp	r3, #64	; 0x40
 8013832:	d86f      	bhi.n	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 8013834:	2b30      	cmp	r3, #48	; 0x30
 8013836:	d064      	beq.n	8013902 <HAL_TIM_ConfigClockSource+0x1aa>
 8013838:	2b30      	cmp	r3, #48	; 0x30
 801383a:	d86b      	bhi.n	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 801383c:	2b20      	cmp	r3, #32
 801383e:	d060      	beq.n	8013902 <HAL_TIM_ConfigClockSource+0x1aa>
 8013840:	2b20      	cmp	r3, #32
 8013842:	d867      	bhi.n	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
 8013844:	2b00      	cmp	r3, #0
 8013846:	d05c      	beq.n	8013902 <HAL_TIM_ConfigClockSource+0x1aa>
 8013848:	2b10      	cmp	r3, #16
 801384a:	d05a      	beq.n	8013902 <HAL_TIM_ConfigClockSource+0x1aa>
 801384c:	e062      	b.n	8013914 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6818      	ldr	r0, [r3, #0]
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	6899      	ldr	r1, [r3, #8]
 8013856:	683b      	ldr	r3, [r7, #0]
 8013858:	685a      	ldr	r2, [r3, #4]
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	68db      	ldr	r3, [r3, #12]
 801385e:	f000 fd71 	bl	8014344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	689b      	ldr	r3, [r3, #8]
 8013868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	681b      	ldr	r3, [r3, #0]
 8013876:	68ba      	ldr	r2, [r7, #8]
 8013878:	609a      	str	r2, [r3, #8]
      break;
 801387a:	e04f      	b.n	801391c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	6818      	ldr	r0, [r3, #0]
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	6899      	ldr	r1, [r3, #8]
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	685a      	ldr	r2, [r3, #4]
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	68db      	ldr	r3, [r3, #12]
 801388c:	f000 fd5a 	bl	8014344 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	689a      	ldr	r2, [r3, #8]
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801389e:	609a      	str	r2, [r3, #8]
      break;
 80138a0:	e03c      	b.n	801391c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	6818      	ldr	r0, [r3, #0]
 80138a6:	683b      	ldr	r3, [r7, #0]
 80138a8:	6859      	ldr	r1, [r3, #4]
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	68db      	ldr	r3, [r3, #12]
 80138ae:	461a      	mov	r2, r3
 80138b0:	f000 fcca 	bl	8014248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	2150      	movs	r1, #80	; 0x50
 80138ba:	4618      	mov	r0, r3
 80138bc:	f000 fd24 	bl	8014308 <TIM_ITRx_SetConfig>
      break;
 80138c0:	e02c      	b.n	801391c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6818      	ldr	r0, [r3, #0]
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	6859      	ldr	r1, [r3, #4]
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	68db      	ldr	r3, [r3, #12]
 80138ce:	461a      	mov	r2, r3
 80138d0:	f000 fce9 	bl	80142a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	2160      	movs	r1, #96	; 0x60
 80138da:	4618      	mov	r0, r3
 80138dc:	f000 fd14 	bl	8014308 <TIM_ITRx_SetConfig>
      break;
 80138e0:	e01c      	b.n	801391c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	6818      	ldr	r0, [r3, #0]
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	6859      	ldr	r1, [r3, #4]
 80138ea:	683b      	ldr	r3, [r7, #0]
 80138ec:	68db      	ldr	r3, [r3, #12]
 80138ee:	461a      	mov	r2, r3
 80138f0:	f000 fcaa 	bl	8014248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	2140      	movs	r1, #64	; 0x40
 80138fa:	4618      	mov	r0, r3
 80138fc:	f000 fd04 	bl	8014308 <TIM_ITRx_SetConfig>
      break;
 8013900:	e00c      	b.n	801391c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	681a      	ldr	r2, [r3, #0]
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	4619      	mov	r1, r3
 801390c:	4610      	mov	r0, r2
 801390e:	f000 fcfb 	bl	8014308 <TIM_ITRx_SetConfig>
      break;
 8013912:	e003      	b.n	801391c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8013914:	2301      	movs	r3, #1
 8013916:	73fb      	strb	r3, [r7, #15]
      break;
 8013918:	e000      	b.n	801391c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801391a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	2201      	movs	r2, #1
 8013920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2200      	movs	r2, #0
 8013928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801392c:	7bfb      	ldrb	r3, [r7, #15]
}
 801392e:	4618      	mov	r0, r3
 8013930:	3710      	adds	r7, #16
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}
 8013936:	bf00      	nop
 8013938:	ffceff88 	.word	0xffceff88
 801393c:	00100040 	.word	0x00100040
 8013940:	00100030 	.word	0x00100030
 8013944:	00100020 	.word	0x00100020

08013948 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013948:	b480      	push	{r7}
 801394a:	b083      	sub	sp, #12
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013950:	bf00      	nop
 8013952:	370c      	adds	r7, #12
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr

0801395c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801395c:	b480      	push	{r7}
 801395e:	b083      	sub	sp, #12
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8013964:	bf00      	nop
 8013966:	370c      	adds	r7, #12
 8013968:	46bd      	mov	sp, r7
 801396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396e:	4770      	bx	lr

08013970 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8013970:	b480      	push	{r7}
 8013972:	b083      	sub	sp, #12
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8013978:	bf00      	nop
 801397a:	370c      	adds	r7, #12
 801397c:	46bd      	mov	sp, r7
 801397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013982:	4770      	bx	lr

08013984 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8013984:	b480      	push	{r7}
 8013986:	b083      	sub	sp, #12
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801398c:	bf00      	nop
 801398e:	370c      	adds	r7, #12
 8013990:	46bd      	mov	sp, r7
 8013992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013996:	4770      	bx	lr

08013998 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8013998:	b480      	push	{r7}
 801399a:	b083      	sub	sp, #12
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80139a0:	bf00      	nop
 80139a2:	370c      	adds	r7, #12
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr

080139ac <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b084      	sub	sp, #16
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139b8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139be:	687a      	ldr	r2, [r7, #4]
 80139c0:	429a      	cmp	r2, r3
 80139c2:	d107      	bne.n	80139d4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	2201      	movs	r2, #1
 80139c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	2201      	movs	r2, #1
 80139ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80139d2:	e02a      	b.n	8013a2a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139d8:	687a      	ldr	r2, [r7, #4]
 80139da:	429a      	cmp	r2, r3
 80139dc:	d107      	bne.n	80139ee <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	2202      	movs	r2, #2
 80139e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2201      	movs	r2, #1
 80139e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80139ec:	e01d      	b.n	8013a2a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139f2:	687a      	ldr	r2, [r7, #4]
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d107      	bne.n	8013a08 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	2204      	movs	r2, #4
 80139fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	2201      	movs	r2, #1
 8013a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013a06:	e010      	b.n	8013a2a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a0c:	687a      	ldr	r2, [r7, #4]
 8013a0e:	429a      	cmp	r2, r3
 8013a10:	d107      	bne.n	8013a22 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2208      	movs	r2, #8
 8013a16:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	2201      	movs	r2, #1
 8013a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013a20:	e003      	b.n	8013a2a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2201      	movs	r2, #1
 8013a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8013a2a:	68f8      	ldr	r0, [r7, #12]
 8013a2c:	f7ff ffb4 	bl	8013998 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2200      	movs	r2, #0
 8013a34:	771a      	strb	r2, [r3, #28]
}
 8013a36:	bf00      	nop
 8013a38:	3710      	adds	r7, #16
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}

08013a3e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8013a3e:	b580      	push	{r7, lr}
 8013a40:	b084      	sub	sp, #16
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a4a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a50:	687a      	ldr	r2, [r7, #4]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d10b      	bne.n	8013a6e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	2201      	movs	r2, #1
 8013a5a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	69db      	ldr	r3, [r3, #28]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d136      	bne.n	8013ad2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	2201      	movs	r2, #1
 8013a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013a6c:	e031      	b.n	8013ad2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a72:	687a      	ldr	r2, [r7, #4]
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d10b      	bne.n	8013a90 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	2202      	movs	r2, #2
 8013a7c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	69db      	ldr	r3, [r3, #28]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d125      	bne.n	8013ad2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	2201      	movs	r2, #1
 8013a8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013a8e:	e020      	b.n	8013ad2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a94:	687a      	ldr	r2, [r7, #4]
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d10b      	bne.n	8013ab2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	2204      	movs	r2, #4
 8013a9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	69db      	ldr	r3, [r3, #28]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d114      	bne.n	8013ad2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	2201      	movs	r2, #1
 8013aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013ab0:	e00f      	b.n	8013ad2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ab6:	687a      	ldr	r2, [r7, #4]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d10a      	bne.n	8013ad2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	2208      	movs	r2, #8
 8013ac0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	69db      	ldr	r3, [r3, #28]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d103      	bne.n	8013ad2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	2201      	movs	r2, #1
 8013ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013ad2:	68f8      	ldr	r0, [r7, #12]
 8013ad4:	f7ef fde0 	bl	8003698 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013ad8:	68fb      	ldr	r3, [r7, #12]
 8013ada:	2200      	movs	r2, #0
 8013adc:	771a      	strb	r2, [r3, #28]
}
 8013ade:	bf00      	nop
 8013ae0:	3710      	adds	r7, #16
 8013ae2:	46bd      	mov	sp, r7
 8013ae4:	bd80      	pop	{r7, pc}

08013ae6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013ae6:	b580      	push	{r7, lr}
 8013ae8:	b084      	sub	sp, #16
 8013aea:	af00      	add	r7, sp, #0
 8013aec:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013af2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013af8:	687a      	ldr	r2, [r7, #4]
 8013afa:	429a      	cmp	r2, r3
 8013afc:	d103      	bne.n	8013b06 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	2201      	movs	r2, #1
 8013b02:	771a      	strb	r2, [r3, #28]
 8013b04:	e019      	b.n	8013b3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d103      	bne.n	8013b18 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	2202      	movs	r2, #2
 8013b14:	771a      	strb	r2, [r3, #28]
 8013b16:	e010      	b.n	8013b3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b1c:	687a      	ldr	r2, [r7, #4]
 8013b1e:	429a      	cmp	r2, r3
 8013b20:	d103      	bne.n	8013b2a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	2204      	movs	r2, #4
 8013b26:	771a      	strb	r2, [r3, #28]
 8013b28:	e007      	b.n	8013b3a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b2e:	687a      	ldr	r2, [r7, #4]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d102      	bne.n	8013b3a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	2208      	movs	r2, #8
 8013b38:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8013b3a:	68f8      	ldr	r0, [r7, #12]
 8013b3c:	f7ff ff18 	bl	8013970 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	2200      	movs	r2, #0
 8013b44:	771a      	strb	r2, [r3, #28]
}
 8013b46:	bf00      	nop
 8013b48:	3710      	adds	r7, #16
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd80      	pop	{r7, pc}
	...

08013b50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013b50:	b480      	push	{r7}
 8013b52:	b085      	sub	sp, #20
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	4a44      	ldr	r2, [pc, #272]	; (8013c74 <TIM_Base_SetConfig+0x124>)
 8013b64:	4293      	cmp	r3, r2
 8013b66:	d013      	beq.n	8013b90 <TIM_Base_SetConfig+0x40>
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b6e:	d00f      	beq.n	8013b90 <TIM_Base_SetConfig+0x40>
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	4a41      	ldr	r2, [pc, #260]	; (8013c78 <TIM_Base_SetConfig+0x128>)
 8013b74:	4293      	cmp	r3, r2
 8013b76:	d00b      	beq.n	8013b90 <TIM_Base_SetConfig+0x40>
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	4a40      	ldr	r2, [pc, #256]	; (8013c7c <TIM_Base_SetConfig+0x12c>)
 8013b7c:	4293      	cmp	r3, r2
 8013b7e:	d007      	beq.n	8013b90 <TIM_Base_SetConfig+0x40>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	4a3f      	ldr	r2, [pc, #252]	; (8013c80 <TIM_Base_SetConfig+0x130>)
 8013b84:	4293      	cmp	r3, r2
 8013b86:	d003      	beq.n	8013b90 <TIM_Base_SetConfig+0x40>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	4a3e      	ldr	r2, [pc, #248]	; (8013c84 <TIM_Base_SetConfig+0x134>)
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d108      	bne.n	8013ba2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	68fa      	ldr	r2, [r7, #12]
 8013b9e:	4313      	orrs	r3, r2
 8013ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	4a33      	ldr	r2, [pc, #204]	; (8013c74 <TIM_Base_SetConfig+0x124>)
 8013ba6:	4293      	cmp	r3, r2
 8013ba8:	d027      	beq.n	8013bfa <TIM_Base_SetConfig+0xaa>
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013bb0:	d023      	beq.n	8013bfa <TIM_Base_SetConfig+0xaa>
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	4a30      	ldr	r2, [pc, #192]	; (8013c78 <TIM_Base_SetConfig+0x128>)
 8013bb6:	4293      	cmp	r3, r2
 8013bb8:	d01f      	beq.n	8013bfa <TIM_Base_SetConfig+0xaa>
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	4a2f      	ldr	r2, [pc, #188]	; (8013c7c <TIM_Base_SetConfig+0x12c>)
 8013bbe:	4293      	cmp	r3, r2
 8013bc0:	d01b      	beq.n	8013bfa <TIM_Base_SetConfig+0xaa>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	4a2e      	ldr	r2, [pc, #184]	; (8013c80 <TIM_Base_SetConfig+0x130>)
 8013bc6:	4293      	cmp	r3, r2
 8013bc8:	d017      	beq.n	8013bfa <TIM_Base_SetConfig+0xaa>
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	4a2d      	ldr	r2, [pc, #180]	; (8013c84 <TIM_Base_SetConfig+0x134>)
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	d013      	beq.n	8013bfa <TIM_Base_SetConfig+0xaa>
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	4a2c      	ldr	r2, [pc, #176]	; (8013c88 <TIM_Base_SetConfig+0x138>)
 8013bd6:	4293      	cmp	r3, r2
 8013bd8:	d00f      	beq.n	8013bfa <TIM_Base_SetConfig+0xaa>
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	4a2b      	ldr	r2, [pc, #172]	; (8013c8c <TIM_Base_SetConfig+0x13c>)
 8013bde:	4293      	cmp	r3, r2
 8013be0:	d00b      	beq.n	8013bfa <TIM_Base_SetConfig+0xaa>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	4a2a      	ldr	r2, [pc, #168]	; (8013c90 <TIM_Base_SetConfig+0x140>)
 8013be6:	4293      	cmp	r3, r2
 8013be8:	d007      	beq.n	8013bfa <TIM_Base_SetConfig+0xaa>
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	4a29      	ldr	r2, [pc, #164]	; (8013c94 <TIM_Base_SetConfig+0x144>)
 8013bee:	4293      	cmp	r3, r2
 8013bf0:	d003      	beq.n	8013bfa <TIM_Base_SetConfig+0xaa>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	4a28      	ldr	r2, [pc, #160]	; (8013c98 <TIM_Base_SetConfig+0x148>)
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	d108      	bne.n	8013c0c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	68db      	ldr	r3, [r3, #12]
 8013c06:	68fa      	ldr	r2, [r7, #12]
 8013c08:	4313      	orrs	r3, r2
 8013c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013c12:	683b      	ldr	r3, [r7, #0]
 8013c14:	695b      	ldr	r3, [r3, #20]
 8013c16:	4313      	orrs	r3, r2
 8013c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	68fa      	ldr	r2, [r7, #12]
 8013c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013c20:	683b      	ldr	r3, [r7, #0]
 8013c22:	689a      	ldr	r2, [r3, #8]
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	681a      	ldr	r2, [r3, #0]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	4a10      	ldr	r2, [pc, #64]	; (8013c74 <TIM_Base_SetConfig+0x124>)
 8013c34:	4293      	cmp	r3, r2
 8013c36:	d00f      	beq.n	8013c58 <TIM_Base_SetConfig+0x108>
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	4a12      	ldr	r2, [pc, #72]	; (8013c84 <TIM_Base_SetConfig+0x134>)
 8013c3c:	4293      	cmp	r3, r2
 8013c3e:	d00b      	beq.n	8013c58 <TIM_Base_SetConfig+0x108>
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	4a11      	ldr	r2, [pc, #68]	; (8013c88 <TIM_Base_SetConfig+0x138>)
 8013c44:	4293      	cmp	r3, r2
 8013c46:	d007      	beq.n	8013c58 <TIM_Base_SetConfig+0x108>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	4a10      	ldr	r2, [pc, #64]	; (8013c8c <TIM_Base_SetConfig+0x13c>)
 8013c4c:	4293      	cmp	r3, r2
 8013c4e:	d003      	beq.n	8013c58 <TIM_Base_SetConfig+0x108>
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	4a0f      	ldr	r2, [pc, #60]	; (8013c90 <TIM_Base_SetConfig+0x140>)
 8013c54:	4293      	cmp	r3, r2
 8013c56:	d103      	bne.n	8013c60 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013c58:	683b      	ldr	r3, [r7, #0]
 8013c5a:	691a      	ldr	r2, [r3, #16]
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2201      	movs	r2, #1
 8013c64:	615a      	str	r2, [r3, #20]
}
 8013c66:	bf00      	nop
 8013c68:	3714      	adds	r7, #20
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c70:	4770      	bx	lr
 8013c72:	bf00      	nop
 8013c74:	40010000 	.word	0x40010000
 8013c78:	40000400 	.word	0x40000400
 8013c7c:	40000800 	.word	0x40000800
 8013c80:	40000c00 	.word	0x40000c00
 8013c84:	40010400 	.word	0x40010400
 8013c88:	40014000 	.word	0x40014000
 8013c8c:	40014400 	.word	0x40014400
 8013c90:	40014800 	.word	0x40014800
 8013c94:	4000e000 	.word	0x4000e000
 8013c98:	4000e400 	.word	0x4000e400

08013c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013c9c:	b480      	push	{r7}
 8013c9e:	b087      	sub	sp, #28
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
 8013ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	6a1b      	ldr	r3, [r3, #32]
 8013caa:	f023 0201 	bic.w	r2, r3, #1
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6a1b      	ldr	r3, [r3, #32]
 8013cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	699b      	ldr	r3, [r3, #24]
 8013cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013cc4:	68fa      	ldr	r2, [r7, #12]
 8013cc6:	4b37      	ldr	r3, [pc, #220]	; (8013da4 <TIM_OC1_SetConfig+0x108>)
 8013cc8:	4013      	ands	r3, r2
 8013cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	f023 0303 	bic.w	r3, r3, #3
 8013cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	681b      	ldr	r3, [r3, #0]
 8013cd8:	68fa      	ldr	r2, [r7, #12]
 8013cda:	4313      	orrs	r3, r2
 8013cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013cde:	697b      	ldr	r3, [r7, #20]
 8013ce0:	f023 0302 	bic.w	r3, r3, #2
 8013ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013ce6:	683b      	ldr	r3, [r7, #0]
 8013ce8:	689b      	ldr	r3, [r3, #8]
 8013cea:	697a      	ldr	r2, [r7, #20]
 8013cec:	4313      	orrs	r3, r2
 8013cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	4a2d      	ldr	r2, [pc, #180]	; (8013da8 <TIM_OC1_SetConfig+0x10c>)
 8013cf4:	4293      	cmp	r3, r2
 8013cf6:	d00f      	beq.n	8013d18 <TIM_OC1_SetConfig+0x7c>
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	4a2c      	ldr	r2, [pc, #176]	; (8013dac <TIM_OC1_SetConfig+0x110>)
 8013cfc:	4293      	cmp	r3, r2
 8013cfe:	d00b      	beq.n	8013d18 <TIM_OC1_SetConfig+0x7c>
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	4a2b      	ldr	r2, [pc, #172]	; (8013db0 <TIM_OC1_SetConfig+0x114>)
 8013d04:	4293      	cmp	r3, r2
 8013d06:	d007      	beq.n	8013d18 <TIM_OC1_SetConfig+0x7c>
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	4a2a      	ldr	r2, [pc, #168]	; (8013db4 <TIM_OC1_SetConfig+0x118>)
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	d003      	beq.n	8013d18 <TIM_OC1_SetConfig+0x7c>
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	4a29      	ldr	r2, [pc, #164]	; (8013db8 <TIM_OC1_SetConfig+0x11c>)
 8013d14:	4293      	cmp	r3, r2
 8013d16:	d10c      	bne.n	8013d32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013d18:	697b      	ldr	r3, [r7, #20]
 8013d1a:	f023 0308 	bic.w	r3, r3, #8
 8013d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	68db      	ldr	r3, [r3, #12]
 8013d24:	697a      	ldr	r2, [r7, #20]
 8013d26:	4313      	orrs	r3, r2
 8013d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	f023 0304 	bic.w	r3, r3, #4
 8013d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	4a1c      	ldr	r2, [pc, #112]	; (8013da8 <TIM_OC1_SetConfig+0x10c>)
 8013d36:	4293      	cmp	r3, r2
 8013d38:	d00f      	beq.n	8013d5a <TIM_OC1_SetConfig+0xbe>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	4a1b      	ldr	r2, [pc, #108]	; (8013dac <TIM_OC1_SetConfig+0x110>)
 8013d3e:	4293      	cmp	r3, r2
 8013d40:	d00b      	beq.n	8013d5a <TIM_OC1_SetConfig+0xbe>
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	4a1a      	ldr	r2, [pc, #104]	; (8013db0 <TIM_OC1_SetConfig+0x114>)
 8013d46:	4293      	cmp	r3, r2
 8013d48:	d007      	beq.n	8013d5a <TIM_OC1_SetConfig+0xbe>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	4a19      	ldr	r2, [pc, #100]	; (8013db4 <TIM_OC1_SetConfig+0x118>)
 8013d4e:	4293      	cmp	r3, r2
 8013d50:	d003      	beq.n	8013d5a <TIM_OC1_SetConfig+0xbe>
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	4a18      	ldr	r2, [pc, #96]	; (8013db8 <TIM_OC1_SetConfig+0x11c>)
 8013d56:	4293      	cmp	r3, r2
 8013d58:	d111      	bne.n	8013d7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013d5a:	693b      	ldr	r3, [r7, #16]
 8013d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013d62:	693b      	ldr	r3, [r7, #16]
 8013d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	695b      	ldr	r3, [r3, #20]
 8013d6e:	693a      	ldr	r2, [r7, #16]
 8013d70:	4313      	orrs	r3, r2
 8013d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	699b      	ldr	r3, [r3, #24]
 8013d78:	693a      	ldr	r2, [r7, #16]
 8013d7a:	4313      	orrs	r3, r2
 8013d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	693a      	ldr	r2, [r7, #16]
 8013d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	68fa      	ldr	r2, [r7, #12]
 8013d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013d8a:	683b      	ldr	r3, [r7, #0]
 8013d8c:	685a      	ldr	r2, [r3, #4]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	697a      	ldr	r2, [r7, #20]
 8013d96:	621a      	str	r2, [r3, #32]
}
 8013d98:	bf00      	nop
 8013d9a:	371c      	adds	r7, #28
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da2:	4770      	bx	lr
 8013da4:	fffeff8f 	.word	0xfffeff8f
 8013da8:	40010000 	.word	0x40010000
 8013dac:	40010400 	.word	0x40010400
 8013db0:	40014000 	.word	0x40014000
 8013db4:	40014400 	.word	0x40014400
 8013db8:	40014800 	.word	0x40014800

08013dbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013dbc:	b480      	push	{r7}
 8013dbe:	b087      	sub	sp, #28
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	6078      	str	r0, [r7, #4]
 8013dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	6a1b      	ldr	r3, [r3, #32]
 8013dca:	f023 0210 	bic.w	r2, r3, #16
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	6a1b      	ldr	r3, [r3, #32]
 8013dd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	685b      	ldr	r3, [r3, #4]
 8013ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	699b      	ldr	r3, [r3, #24]
 8013de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013de4:	68fa      	ldr	r2, [r7, #12]
 8013de6:	4b34      	ldr	r3, [pc, #208]	; (8013eb8 <TIM_OC2_SetConfig+0xfc>)
 8013de8:	4013      	ands	r3, r2
 8013dea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013df2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	021b      	lsls	r3, r3, #8
 8013dfa:	68fa      	ldr	r2, [r7, #12]
 8013dfc:	4313      	orrs	r3, r2
 8013dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013e00:	697b      	ldr	r3, [r7, #20]
 8013e02:	f023 0320 	bic.w	r3, r3, #32
 8013e06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	689b      	ldr	r3, [r3, #8]
 8013e0c:	011b      	lsls	r3, r3, #4
 8013e0e:	697a      	ldr	r2, [r7, #20]
 8013e10:	4313      	orrs	r3, r2
 8013e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	4a29      	ldr	r2, [pc, #164]	; (8013ebc <TIM_OC2_SetConfig+0x100>)
 8013e18:	4293      	cmp	r3, r2
 8013e1a:	d003      	beq.n	8013e24 <TIM_OC2_SetConfig+0x68>
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	4a28      	ldr	r2, [pc, #160]	; (8013ec0 <TIM_OC2_SetConfig+0x104>)
 8013e20:	4293      	cmp	r3, r2
 8013e22:	d10d      	bne.n	8013e40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013e24:	697b      	ldr	r3, [r7, #20]
 8013e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	68db      	ldr	r3, [r3, #12]
 8013e30:	011b      	lsls	r3, r3, #4
 8013e32:	697a      	ldr	r2, [r7, #20]
 8013e34:	4313      	orrs	r3, r2
 8013e36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013e3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	4a1e      	ldr	r2, [pc, #120]	; (8013ebc <TIM_OC2_SetConfig+0x100>)
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d00f      	beq.n	8013e68 <TIM_OC2_SetConfig+0xac>
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	4a1d      	ldr	r2, [pc, #116]	; (8013ec0 <TIM_OC2_SetConfig+0x104>)
 8013e4c:	4293      	cmp	r3, r2
 8013e4e:	d00b      	beq.n	8013e68 <TIM_OC2_SetConfig+0xac>
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	4a1c      	ldr	r2, [pc, #112]	; (8013ec4 <TIM_OC2_SetConfig+0x108>)
 8013e54:	4293      	cmp	r3, r2
 8013e56:	d007      	beq.n	8013e68 <TIM_OC2_SetConfig+0xac>
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	4a1b      	ldr	r2, [pc, #108]	; (8013ec8 <TIM_OC2_SetConfig+0x10c>)
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	d003      	beq.n	8013e68 <TIM_OC2_SetConfig+0xac>
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	4a1a      	ldr	r2, [pc, #104]	; (8013ecc <TIM_OC2_SetConfig+0x110>)
 8013e64:	4293      	cmp	r3, r2
 8013e66:	d113      	bne.n	8013e90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013e70:	693b      	ldr	r3, [r7, #16]
 8013e72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013e78:	683b      	ldr	r3, [r7, #0]
 8013e7a:	695b      	ldr	r3, [r3, #20]
 8013e7c:	009b      	lsls	r3, r3, #2
 8013e7e:	693a      	ldr	r2, [r7, #16]
 8013e80:	4313      	orrs	r3, r2
 8013e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	699b      	ldr	r3, [r3, #24]
 8013e88:	009b      	lsls	r3, r3, #2
 8013e8a:	693a      	ldr	r2, [r7, #16]
 8013e8c:	4313      	orrs	r3, r2
 8013e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	693a      	ldr	r2, [r7, #16]
 8013e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	68fa      	ldr	r2, [r7, #12]
 8013e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	685a      	ldr	r2, [r3, #4]
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	697a      	ldr	r2, [r7, #20]
 8013ea8:	621a      	str	r2, [r3, #32]
}
 8013eaa:	bf00      	nop
 8013eac:	371c      	adds	r7, #28
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb4:	4770      	bx	lr
 8013eb6:	bf00      	nop
 8013eb8:	feff8fff 	.word	0xfeff8fff
 8013ebc:	40010000 	.word	0x40010000
 8013ec0:	40010400 	.word	0x40010400
 8013ec4:	40014000 	.word	0x40014000
 8013ec8:	40014400 	.word	0x40014400
 8013ecc:	40014800 	.word	0x40014800

08013ed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013ed0:	b480      	push	{r7}
 8013ed2:	b087      	sub	sp, #28
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	6a1b      	ldr	r3, [r3, #32]
 8013ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	6a1b      	ldr	r3, [r3, #32]
 8013eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	685b      	ldr	r3, [r3, #4]
 8013ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	69db      	ldr	r3, [r3, #28]
 8013ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013ef8:	68fa      	ldr	r2, [r7, #12]
 8013efa:	4b33      	ldr	r3, [pc, #204]	; (8013fc8 <TIM_OC3_SetConfig+0xf8>)
 8013efc:	4013      	ands	r3, r2
 8013efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	f023 0303 	bic.w	r3, r3, #3
 8013f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	68fa      	ldr	r2, [r7, #12]
 8013f0e:	4313      	orrs	r3, r2
 8013f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	689b      	ldr	r3, [r3, #8]
 8013f1e:	021b      	lsls	r3, r3, #8
 8013f20:	697a      	ldr	r2, [r7, #20]
 8013f22:	4313      	orrs	r3, r2
 8013f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	4a28      	ldr	r2, [pc, #160]	; (8013fcc <TIM_OC3_SetConfig+0xfc>)
 8013f2a:	4293      	cmp	r3, r2
 8013f2c:	d003      	beq.n	8013f36 <TIM_OC3_SetConfig+0x66>
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	4a27      	ldr	r2, [pc, #156]	; (8013fd0 <TIM_OC3_SetConfig+0x100>)
 8013f32:	4293      	cmp	r3, r2
 8013f34:	d10d      	bne.n	8013f52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013f36:	697b      	ldr	r3, [r7, #20]
 8013f38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	68db      	ldr	r3, [r3, #12]
 8013f42:	021b      	lsls	r3, r3, #8
 8013f44:	697a      	ldr	r2, [r7, #20]
 8013f46:	4313      	orrs	r3, r2
 8013f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013f4a:	697b      	ldr	r3, [r7, #20]
 8013f4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	4a1d      	ldr	r2, [pc, #116]	; (8013fcc <TIM_OC3_SetConfig+0xfc>)
 8013f56:	4293      	cmp	r3, r2
 8013f58:	d00f      	beq.n	8013f7a <TIM_OC3_SetConfig+0xaa>
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	4a1c      	ldr	r2, [pc, #112]	; (8013fd0 <TIM_OC3_SetConfig+0x100>)
 8013f5e:	4293      	cmp	r3, r2
 8013f60:	d00b      	beq.n	8013f7a <TIM_OC3_SetConfig+0xaa>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	4a1b      	ldr	r2, [pc, #108]	; (8013fd4 <TIM_OC3_SetConfig+0x104>)
 8013f66:	4293      	cmp	r3, r2
 8013f68:	d007      	beq.n	8013f7a <TIM_OC3_SetConfig+0xaa>
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	4a1a      	ldr	r2, [pc, #104]	; (8013fd8 <TIM_OC3_SetConfig+0x108>)
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d003      	beq.n	8013f7a <TIM_OC3_SetConfig+0xaa>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	4a19      	ldr	r2, [pc, #100]	; (8013fdc <TIM_OC3_SetConfig+0x10c>)
 8013f76:	4293      	cmp	r3, r2
 8013f78:	d113      	bne.n	8013fa2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013f7a:	693b      	ldr	r3, [r7, #16]
 8013f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013f8a:	683b      	ldr	r3, [r7, #0]
 8013f8c:	695b      	ldr	r3, [r3, #20]
 8013f8e:	011b      	lsls	r3, r3, #4
 8013f90:	693a      	ldr	r2, [r7, #16]
 8013f92:	4313      	orrs	r3, r2
 8013f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	699b      	ldr	r3, [r3, #24]
 8013f9a:	011b      	lsls	r3, r3, #4
 8013f9c:	693a      	ldr	r2, [r7, #16]
 8013f9e:	4313      	orrs	r3, r2
 8013fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	693a      	ldr	r2, [r7, #16]
 8013fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	68fa      	ldr	r2, [r7, #12]
 8013fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	685a      	ldr	r2, [r3, #4]
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	697a      	ldr	r2, [r7, #20]
 8013fba:	621a      	str	r2, [r3, #32]
}
 8013fbc:	bf00      	nop
 8013fbe:	371c      	adds	r7, #28
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr
 8013fc8:	fffeff8f 	.word	0xfffeff8f
 8013fcc:	40010000 	.word	0x40010000
 8013fd0:	40010400 	.word	0x40010400
 8013fd4:	40014000 	.word	0x40014000
 8013fd8:	40014400 	.word	0x40014400
 8013fdc:	40014800 	.word	0x40014800

08013fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b087      	sub	sp, #28
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
 8013fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	6a1b      	ldr	r3, [r3, #32]
 8013fee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	6a1b      	ldr	r3, [r3, #32]
 8013ffa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	685b      	ldr	r3, [r3, #4]
 8014000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	69db      	ldr	r3, [r3, #28]
 8014006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014008:	68fa      	ldr	r2, [r7, #12]
 801400a:	4b24      	ldr	r3, [pc, #144]	; (801409c <TIM_OC4_SetConfig+0xbc>)
 801400c:	4013      	ands	r3, r2
 801400e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	021b      	lsls	r3, r3, #8
 801401e:	68fa      	ldr	r2, [r7, #12]
 8014020:	4313      	orrs	r3, r2
 8014022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014024:	693b      	ldr	r3, [r7, #16]
 8014026:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801402a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	689b      	ldr	r3, [r3, #8]
 8014030:	031b      	lsls	r3, r3, #12
 8014032:	693a      	ldr	r2, [r7, #16]
 8014034:	4313      	orrs	r3, r2
 8014036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	4a19      	ldr	r2, [pc, #100]	; (80140a0 <TIM_OC4_SetConfig+0xc0>)
 801403c:	4293      	cmp	r3, r2
 801403e:	d00f      	beq.n	8014060 <TIM_OC4_SetConfig+0x80>
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	4a18      	ldr	r2, [pc, #96]	; (80140a4 <TIM_OC4_SetConfig+0xc4>)
 8014044:	4293      	cmp	r3, r2
 8014046:	d00b      	beq.n	8014060 <TIM_OC4_SetConfig+0x80>
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	4a17      	ldr	r2, [pc, #92]	; (80140a8 <TIM_OC4_SetConfig+0xc8>)
 801404c:	4293      	cmp	r3, r2
 801404e:	d007      	beq.n	8014060 <TIM_OC4_SetConfig+0x80>
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	4a16      	ldr	r2, [pc, #88]	; (80140ac <TIM_OC4_SetConfig+0xcc>)
 8014054:	4293      	cmp	r3, r2
 8014056:	d003      	beq.n	8014060 <TIM_OC4_SetConfig+0x80>
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	4a15      	ldr	r2, [pc, #84]	; (80140b0 <TIM_OC4_SetConfig+0xd0>)
 801405c:	4293      	cmp	r3, r2
 801405e:	d109      	bne.n	8014074 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014060:	697b      	ldr	r3, [r7, #20]
 8014062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	695b      	ldr	r3, [r3, #20]
 801406c:	019b      	lsls	r3, r3, #6
 801406e:	697a      	ldr	r2, [r7, #20]
 8014070:	4313      	orrs	r3, r2
 8014072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	697a      	ldr	r2, [r7, #20]
 8014078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	68fa      	ldr	r2, [r7, #12]
 801407e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	685a      	ldr	r2, [r3, #4]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	693a      	ldr	r2, [r7, #16]
 801408c:	621a      	str	r2, [r3, #32]
}
 801408e:	bf00      	nop
 8014090:	371c      	adds	r7, #28
 8014092:	46bd      	mov	sp, r7
 8014094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014098:	4770      	bx	lr
 801409a:	bf00      	nop
 801409c:	feff8fff 	.word	0xfeff8fff
 80140a0:	40010000 	.word	0x40010000
 80140a4:	40010400 	.word	0x40010400
 80140a8:	40014000 	.word	0x40014000
 80140ac:	40014400 	.word	0x40014400
 80140b0:	40014800 	.word	0x40014800

080140b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80140b4:	b480      	push	{r7}
 80140b6:	b087      	sub	sp, #28
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
 80140bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	6a1b      	ldr	r3, [r3, #32]
 80140c2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6a1b      	ldr	r3, [r3, #32]
 80140ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	685b      	ldr	r3, [r3, #4]
 80140d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80140dc:	68fa      	ldr	r2, [r7, #12]
 80140de:	4b21      	ldr	r3, [pc, #132]	; (8014164 <TIM_OC5_SetConfig+0xb0>)
 80140e0:	4013      	ands	r3, r2
 80140e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	68fa      	ldr	r2, [r7, #12]
 80140ea:	4313      	orrs	r3, r2
 80140ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80140ee:	693b      	ldr	r3, [r7, #16]
 80140f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80140f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	689b      	ldr	r3, [r3, #8]
 80140fa:	041b      	lsls	r3, r3, #16
 80140fc:	693a      	ldr	r2, [r7, #16]
 80140fe:	4313      	orrs	r3, r2
 8014100:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	4a18      	ldr	r2, [pc, #96]	; (8014168 <TIM_OC5_SetConfig+0xb4>)
 8014106:	4293      	cmp	r3, r2
 8014108:	d00f      	beq.n	801412a <TIM_OC5_SetConfig+0x76>
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	4a17      	ldr	r2, [pc, #92]	; (801416c <TIM_OC5_SetConfig+0xb8>)
 801410e:	4293      	cmp	r3, r2
 8014110:	d00b      	beq.n	801412a <TIM_OC5_SetConfig+0x76>
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	4a16      	ldr	r2, [pc, #88]	; (8014170 <TIM_OC5_SetConfig+0xbc>)
 8014116:	4293      	cmp	r3, r2
 8014118:	d007      	beq.n	801412a <TIM_OC5_SetConfig+0x76>
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	4a15      	ldr	r2, [pc, #84]	; (8014174 <TIM_OC5_SetConfig+0xc0>)
 801411e:	4293      	cmp	r3, r2
 8014120:	d003      	beq.n	801412a <TIM_OC5_SetConfig+0x76>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	4a14      	ldr	r2, [pc, #80]	; (8014178 <TIM_OC5_SetConfig+0xc4>)
 8014126:	4293      	cmp	r3, r2
 8014128:	d109      	bne.n	801413e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014130:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	695b      	ldr	r3, [r3, #20]
 8014136:	021b      	lsls	r3, r3, #8
 8014138:	697a      	ldr	r2, [r7, #20]
 801413a:	4313      	orrs	r3, r2
 801413c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	697a      	ldr	r2, [r7, #20]
 8014142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	68fa      	ldr	r2, [r7, #12]
 8014148:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	685a      	ldr	r2, [r3, #4]
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	693a      	ldr	r2, [r7, #16]
 8014156:	621a      	str	r2, [r3, #32]
}
 8014158:	bf00      	nop
 801415a:	371c      	adds	r7, #28
 801415c:	46bd      	mov	sp, r7
 801415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014162:	4770      	bx	lr
 8014164:	fffeff8f 	.word	0xfffeff8f
 8014168:	40010000 	.word	0x40010000
 801416c:	40010400 	.word	0x40010400
 8014170:	40014000 	.word	0x40014000
 8014174:	40014400 	.word	0x40014400
 8014178:	40014800 	.word	0x40014800

0801417c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801417c:	b480      	push	{r7}
 801417e:	b087      	sub	sp, #28
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
 8014184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6a1b      	ldr	r3, [r3, #32]
 801418a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6a1b      	ldr	r3, [r3, #32]
 8014196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	685b      	ldr	r3, [r3, #4]
 801419c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80141a4:	68fa      	ldr	r2, [r7, #12]
 80141a6:	4b22      	ldr	r3, [pc, #136]	; (8014230 <TIM_OC6_SetConfig+0xb4>)
 80141a8:	4013      	ands	r3, r2
 80141aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	021b      	lsls	r3, r3, #8
 80141b2:	68fa      	ldr	r2, [r7, #12]
 80141b4:	4313      	orrs	r3, r2
 80141b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80141b8:	693b      	ldr	r3, [r7, #16]
 80141ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80141be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80141c0:	683b      	ldr	r3, [r7, #0]
 80141c2:	689b      	ldr	r3, [r3, #8]
 80141c4:	051b      	lsls	r3, r3, #20
 80141c6:	693a      	ldr	r2, [r7, #16]
 80141c8:	4313      	orrs	r3, r2
 80141ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	4a19      	ldr	r2, [pc, #100]	; (8014234 <TIM_OC6_SetConfig+0xb8>)
 80141d0:	4293      	cmp	r3, r2
 80141d2:	d00f      	beq.n	80141f4 <TIM_OC6_SetConfig+0x78>
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	4a18      	ldr	r2, [pc, #96]	; (8014238 <TIM_OC6_SetConfig+0xbc>)
 80141d8:	4293      	cmp	r3, r2
 80141da:	d00b      	beq.n	80141f4 <TIM_OC6_SetConfig+0x78>
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	4a17      	ldr	r2, [pc, #92]	; (801423c <TIM_OC6_SetConfig+0xc0>)
 80141e0:	4293      	cmp	r3, r2
 80141e2:	d007      	beq.n	80141f4 <TIM_OC6_SetConfig+0x78>
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	4a16      	ldr	r2, [pc, #88]	; (8014240 <TIM_OC6_SetConfig+0xc4>)
 80141e8:	4293      	cmp	r3, r2
 80141ea:	d003      	beq.n	80141f4 <TIM_OC6_SetConfig+0x78>
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	4a15      	ldr	r2, [pc, #84]	; (8014244 <TIM_OC6_SetConfig+0xc8>)
 80141f0:	4293      	cmp	r3, r2
 80141f2:	d109      	bne.n	8014208 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80141fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80141fc:	683b      	ldr	r3, [r7, #0]
 80141fe:	695b      	ldr	r3, [r3, #20]
 8014200:	029b      	lsls	r3, r3, #10
 8014202:	697a      	ldr	r2, [r7, #20]
 8014204:	4313      	orrs	r3, r2
 8014206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	697a      	ldr	r2, [r7, #20]
 801420c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	68fa      	ldr	r2, [r7, #12]
 8014212:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8014214:	683b      	ldr	r3, [r7, #0]
 8014216:	685a      	ldr	r2, [r3, #4]
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	693a      	ldr	r2, [r7, #16]
 8014220:	621a      	str	r2, [r3, #32]
}
 8014222:	bf00      	nop
 8014224:	371c      	adds	r7, #28
 8014226:	46bd      	mov	sp, r7
 8014228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801422c:	4770      	bx	lr
 801422e:	bf00      	nop
 8014230:	feff8fff 	.word	0xfeff8fff
 8014234:	40010000 	.word	0x40010000
 8014238:	40010400 	.word	0x40010400
 801423c:	40014000 	.word	0x40014000
 8014240:	40014400 	.word	0x40014400
 8014244:	40014800 	.word	0x40014800

08014248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014248:	b480      	push	{r7}
 801424a:	b087      	sub	sp, #28
 801424c:	af00      	add	r7, sp, #0
 801424e:	60f8      	str	r0, [r7, #12]
 8014250:	60b9      	str	r1, [r7, #8]
 8014252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	6a1b      	ldr	r3, [r3, #32]
 8014258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	6a1b      	ldr	r3, [r3, #32]
 801425e:	f023 0201 	bic.w	r2, r3, #1
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	699b      	ldr	r3, [r3, #24]
 801426a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	011b      	lsls	r3, r3, #4
 8014278:	693a      	ldr	r2, [r7, #16]
 801427a:	4313      	orrs	r3, r2
 801427c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	f023 030a 	bic.w	r3, r3, #10
 8014284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014286:	697a      	ldr	r2, [r7, #20]
 8014288:	68bb      	ldr	r3, [r7, #8]
 801428a:	4313      	orrs	r3, r2
 801428c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801428e:	68fb      	ldr	r3, [r7, #12]
 8014290:	693a      	ldr	r2, [r7, #16]
 8014292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	697a      	ldr	r2, [r7, #20]
 8014298:	621a      	str	r2, [r3, #32]
}
 801429a:	bf00      	nop
 801429c:	371c      	adds	r7, #28
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr

080142a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80142a6:	b480      	push	{r7}
 80142a8:	b087      	sub	sp, #28
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	60f8      	str	r0, [r7, #12]
 80142ae:	60b9      	str	r1, [r7, #8]
 80142b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	6a1b      	ldr	r3, [r3, #32]
 80142b6:	f023 0210 	bic.w	r2, r3, #16
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	699b      	ldr	r3, [r3, #24]
 80142c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	6a1b      	ldr	r3, [r3, #32]
 80142c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80142ca:	697b      	ldr	r3, [r7, #20]
 80142cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80142d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	031b      	lsls	r3, r3, #12
 80142d6:	697a      	ldr	r2, [r7, #20]
 80142d8:	4313      	orrs	r3, r2
 80142da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80142e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80142e4:	68bb      	ldr	r3, [r7, #8]
 80142e6:	011b      	lsls	r3, r3, #4
 80142e8:	693a      	ldr	r2, [r7, #16]
 80142ea:	4313      	orrs	r3, r2
 80142ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	697a      	ldr	r2, [r7, #20]
 80142f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	693a      	ldr	r2, [r7, #16]
 80142f8:	621a      	str	r2, [r3, #32]
}
 80142fa:	bf00      	nop
 80142fc:	371c      	adds	r7, #28
 80142fe:	46bd      	mov	sp, r7
 8014300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014304:	4770      	bx	lr
	...

08014308 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014308:	b480      	push	{r7}
 801430a:	b085      	sub	sp, #20
 801430c:	af00      	add	r7, sp, #0
 801430e:	6078      	str	r0, [r7, #4]
 8014310:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	689b      	ldr	r3, [r3, #8]
 8014316:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014318:	68fa      	ldr	r2, [r7, #12]
 801431a:	4b09      	ldr	r3, [pc, #36]	; (8014340 <TIM_ITRx_SetConfig+0x38>)
 801431c:	4013      	ands	r3, r2
 801431e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014320:	683a      	ldr	r2, [r7, #0]
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	4313      	orrs	r3, r2
 8014326:	f043 0307 	orr.w	r3, r3, #7
 801432a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	68fa      	ldr	r2, [r7, #12]
 8014330:	609a      	str	r2, [r3, #8]
}
 8014332:	bf00      	nop
 8014334:	3714      	adds	r7, #20
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr
 801433e:	bf00      	nop
 8014340:	ffcfff8f 	.word	0xffcfff8f

08014344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014344:	b480      	push	{r7}
 8014346:	b087      	sub	sp, #28
 8014348:	af00      	add	r7, sp, #0
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	607a      	str	r2, [r7, #4]
 8014350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	689b      	ldr	r3, [r3, #8]
 8014356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014358:	697b      	ldr	r3, [r7, #20]
 801435a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801435e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014360:	683b      	ldr	r3, [r7, #0]
 8014362:	021a      	lsls	r2, r3, #8
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	431a      	orrs	r2, r3
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	4313      	orrs	r3, r2
 801436c:	697a      	ldr	r2, [r7, #20]
 801436e:	4313      	orrs	r3, r2
 8014370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	697a      	ldr	r2, [r7, #20]
 8014376:	609a      	str	r2, [r3, #8]
}
 8014378:	bf00      	nop
 801437a:	371c      	adds	r7, #28
 801437c:	46bd      	mov	sp, r7
 801437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014382:	4770      	bx	lr

08014384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8014384:	b480      	push	{r7}
 8014386:	b087      	sub	sp, #28
 8014388:	af00      	add	r7, sp, #0
 801438a:	60f8      	str	r0, [r7, #12]
 801438c:	60b9      	str	r1, [r7, #8]
 801438e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	f003 031f 	and.w	r3, r3, #31
 8014396:	2201      	movs	r2, #1
 8014398:	fa02 f303 	lsl.w	r3, r2, r3
 801439c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	6a1a      	ldr	r2, [r3, #32]
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	43db      	mvns	r3, r3
 80143a6:	401a      	ands	r2, r3
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	6a1a      	ldr	r2, [r3, #32]
 80143b0:	68bb      	ldr	r3, [r7, #8]
 80143b2:	f003 031f 	and.w	r3, r3, #31
 80143b6:	6879      	ldr	r1, [r7, #4]
 80143b8:	fa01 f303 	lsl.w	r3, r1, r3
 80143bc:	431a      	orrs	r2, r3
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	621a      	str	r2, [r3, #32]
}
 80143c2:	bf00      	nop
 80143c4:	371c      	adds	r7, #28
 80143c6:	46bd      	mov	sp, r7
 80143c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143cc:	4770      	bx	lr
	...

080143d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80143d0:	b480      	push	{r7}
 80143d2:	b085      	sub	sp, #20
 80143d4:	af00      	add	r7, sp, #0
 80143d6:	6078      	str	r0, [r7, #4]
 80143d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80143e0:	2b01      	cmp	r3, #1
 80143e2:	d101      	bne.n	80143e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80143e4:	2302      	movs	r3, #2
 80143e6:	e077      	b.n	80144d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2201      	movs	r2, #1
 80143ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2202      	movs	r2, #2
 80143f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	685b      	ldr	r3, [r3, #4]
 80143fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	689b      	ldr	r3, [r3, #8]
 8014406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	4a35      	ldr	r2, [pc, #212]	; (80144e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801440e:	4293      	cmp	r3, r2
 8014410:	d004      	beq.n	801441c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	4a34      	ldr	r2, [pc, #208]	; (80144e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8014418:	4293      	cmp	r3, r2
 801441a:	d108      	bne.n	801442e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8014422:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	685b      	ldr	r3, [r3, #4]
 8014428:	68fa      	ldr	r2, [r7, #12]
 801442a:	4313      	orrs	r3, r2
 801442c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014434:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	68fa      	ldr	r2, [r7, #12]
 801443c:	4313      	orrs	r3, r2
 801443e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	68fa      	ldr	r2, [r7, #12]
 8014446:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	4a25      	ldr	r2, [pc, #148]	; (80144e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801444e:	4293      	cmp	r3, r2
 8014450:	d02c      	beq.n	80144ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801445a:	d027      	beq.n	80144ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	4a22      	ldr	r2, [pc, #136]	; (80144ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8014462:	4293      	cmp	r3, r2
 8014464:	d022      	beq.n	80144ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	4a21      	ldr	r2, [pc, #132]	; (80144f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 801446c:	4293      	cmp	r3, r2
 801446e:	d01d      	beq.n	80144ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	4a1f      	ldr	r2, [pc, #124]	; (80144f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8014476:	4293      	cmp	r3, r2
 8014478:	d018      	beq.n	80144ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	4a1a      	ldr	r2, [pc, #104]	; (80144e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8014480:	4293      	cmp	r3, r2
 8014482:	d013      	beq.n	80144ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	4a1b      	ldr	r2, [pc, #108]	; (80144f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801448a:	4293      	cmp	r3, r2
 801448c:	d00e      	beq.n	80144ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	4a1a      	ldr	r2, [pc, #104]	; (80144fc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8014494:	4293      	cmp	r3, r2
 8014496:	d009      	beq.n	80144ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	4a18      	ldr	r2, [pc, #96]	; (8014500 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 801449e:	4293      	cmp	r3, r2
 80144a0:	d004      	beq.n	80144ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	4a17      	ldr	r2, [pc, #92]	; (8014504 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80144a8:	4293      	cmp	r3, r2
 80144aa:	d10c      	bne.n	80144c6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80144b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80144b4:	683b      	ldr	r3, [r7, #0]
 80144b6:	689b      	ldr	r3, [r3, #8]
 80144b8:	68ba      	ldr	r2, [r7, #8]
 80144ba:	4313      	orrs	r3, r2
 80144bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	68ba      	ldr	r2, [r7, #8]
 80144c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	2201      	movs	r2, #1
 80144ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	2200      	movs	r2, #0
 80144d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80144d6:	2300      	movs	r3, #0
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3714      	adds	r7, #20
 80144dc:	46bd      	mov	sp, r7
 80144de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144e2:	4770      	bx	lr
 80144e4:	40010000 	.word	0x40010000
 80144e8:	40010400 	.word	0x40010400
 80144ec:	40000400 	.word	0x40000400
 80144f0:	40000800 	.word	0x40000800
 80144f4:	40000c00 	.word	0x40000c00
 80144f8:	40001800 	.word	0x40001800
 80144fc:	40014000 	.word	0x40014000
 8014500:	4000e000 	.word	0x4000e000
 8014504:	4000e400 	.word	0x4000e400

08014508 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014508:	b480      	push	{r7}
 801450a:	b085      	sub	sp, #20
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8014512:	2300      	movs	r3, #0
 8014514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801451c:	2b01      	cmp	r3, #1
 801451e:	d101      	bne.n	8014524 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014520:	2302      	movs	r3, #2
 8014522:	e087      	b.n	8014634 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2201      	movs	r2, #1
 8014528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8014532:	683b      	ldr	r3, [r7, #0]
 8014534:	68db      	ldr	r3, [r3, #12]
 8014536:	4313      	orrs	r3, r2
 8014538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801453a:	68fb      	ldr	r3, [r7, #12]
 801453c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	689b      	ldr	r3, [r3, #8]
 8014544:	4313      	orrs	r3, r2
 8014546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	4313      	orrs	r3, r2
 8014554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801455c:	683b      	ldr	r3, [r7, #0]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	4313      	orrs	r3, r2
 8014562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	691b      	ldr	r3, [r3, #16]
 801456e:	4313      	orrs	r3, r2
 8014570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014578:	683b      	ldr	r3, [r7, #0]
 801457a:	695b      	ldr	r3, [r3, #20]
 801457c:	4313      	orrs	r3, r2
 801457e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801458a:	4313      	orrs	r3, r2
 801458c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8014594:	683b      	ldr	r3, [r7, #0]
 8014596:	699b      	ldr	r3, [r3, #24]
 8014598:	041b      	lsls	r3, r3, #16
 801459a:	4313      	orrs	r3, r2
 801459c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	4a27      	ldr	r2, [pc, #156]	; (8014640 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80145a4:	4293      	cmp	r3, r2
 80145a6:	d004      	beq.n	80145b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	4a25      	ldr	r2, [pc, #148]	; (8014644 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80145ae:	4293      	cmp	r3, r2
 80145b0:	d106      	bne.n	80145c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80145b8:	683b      	ldr	r3, [r7, #0]
 80145ba:	69db      	ldr	r3, [r3, #28]
 80145bc:	4313      	orrs	r3, r2
 80145be:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	4a1e      	ldr	r2, [pc, #120]	; (8014640 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80145c6:	4293      	cmp	r3, r2
 80145c8:	d004      	beq.n	80145d4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	4a1d      	ldr	r2, [pc, #116]	; (8014644 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80145d0:	4293      	cmp	r3, r2
 80145d2:	d126      	bne.n	8014622 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80145da:	683b      	ldr	r3, [r7, #0]
 80145dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145de:	051b      	lsls	r3, r3, #20
 80145e0:	4313      	orrs	r3, r2
 80145e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80145ea:	683b      	ldr	r3, [r7, #0]
 80145ec:	6a1b      	ldr	r3, [r3, #32]
 80145ee:	4313      	orrs	r3, r2
 80145f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80145f2:	68fb      	ldr	r3, [r7, #12]
 80145f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80145f8:	683b      	ldr	r3, [r7, #0]
 80145fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145fc:	4313      	orrs	r3, r2
 80145fe:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	4a0e      	ldr	r2, [pc, #56]	; (8014640 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8014606:	4293      	cmp	r3, r2
 8014608:	d004      	beq.n	8014614 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	681b      	ldr	r3, [r3, #0]
 801460e:	4a0d      	ldr	r2, [pc, #52]	; (8014644 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8014610:	4293      	cmp	r3, r2
 8014612:	d106      	bne.n	8014622 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8014614:	68fb      	ldr	r3, [r7, #12]
 8014616:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801461a:	683b      	ldr	r3, [r7, #0]
 801461c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801461e:	4313      	orrs	r3, r2
 8014620:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	68fa      	ldr	r2, [r7, #12]
 8014628:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2200      	movs	r2, #0
 801462e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014632:	2300      	movs	r3, #0
}
 8014634:	4618      	mov	r0, r3
 8014636:	3714      	adds	r7, #20
 8014638:	46bd      	mov	sp, r7
 801463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463e:	4770      	bx	lr
 8014640:	40010000 	.word	0x40010000
 8014644:	40010400 	.word	0x40010400

08014648 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014648:	b480      	push	{r7}
 801464a:	b083      	sub	sp, #12
 801464c:	af00      	add	r7, sp, #0
 801464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014650:	bf00      	nop
 8014652:	370c      	adds	r7, #12
 8014654:	46bd      	mov	sp, r7
 8014656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465a:	4770      	bx	lr

0801465c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801465c:	b480      	push	{r7}
 801465e:	b083      	sub	sp, #12
 8014660:	af00      	add	r7, sp, #0
 8014662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014664:	bf00      	nop
 8014666:	370c      	adds	r7, #12
 8014668:	46bd      	mov	sp, r7
 801466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466e:	4770      	bx	lr

08014670 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014670:	b480      	push	{r7}
 8014672:	b083      	sub	sp, #12
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014678:	bf00      	nop
 801467a:	370c      	adds	r7, #12
 801467c:	46bd      	mov	sp, r7
 801467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014682:	4770      	bx	lr

08014684 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	b082      	sub	sp, #8
 8014688:	af00      	add	r7, sp, #0
 801468a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d101      	bne.n	8014696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014692:	2301      	movs	r3, #1
 8014694:	e042      	b.n	801471c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801469c:	2b00      	cmp	r3, #0
 801469e:	d106      	bne.n	80146ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2200      	movs	r2, #0
 80146a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80146a8:	6878      	ldr	r0, [r7, #4]
 80146aa:	f7f2 fd61 	bl	8007170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2224      	movs	r2, #36	; 0x24
 80146b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	681a      	ldr	r2, [r3, #0]
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	f022 0201 	bic.w	r2, r2, #1
 80146c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80146c6:	6878      	ldr	r0, [r7, #4]
 80146c8:	f000 fce8 	bl	801509c <UART_SetConfig>
 80146cc:	4603      	mov	r3, r0
 80146ce:	2b01      	cmp	r3, #1
 80146d0:	d101      	bne.n	80146d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80146d2:	2301      	movs	r3, #1
 80146d4:	e022      	b.n	801471c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d002      	beq.n	80146e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f001 fb48 	bl	8015d74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	685a      	ldr	r2, [r3, #4]
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	681b      	ldr	r3, [r3, #0]
 80146ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80146f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	681b      	ldr	r3, [r3, #0]
 80146f8:	689a      	ldr	r2, [r3, #8]
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	681a      	ldr	r2, [r3, #0]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	f042 0201 	orr.w	r2, r2, #1
 8014712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f001 fbcf 	bl	8015eb8 <UART_CheckIdleState>
 801471a:	4603      	mov	r3, r0
}
 801471c:	4618      	mov	r0, r3
 801471e:	3708      	adds	r7, #8
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}

08014724 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8014724:	b480      	push	{r7}
 8014726:	b091      	sub	sp, #68	; 0x44
 8014728:	af00      	add	r7, sp, #0
 801472a:	60f8      	str	r0, [r7, #12]
 801472c:	60b9      	str	r1, [r7, #8]
 801472e:	4613      	mov	r3, r2
 8014730:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014732:	68fb      	ldr	r3, [r7, #12]
 8014734:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014738:	2b20      	cmp	r3, #32
 801473a:	f040 808c 	bne.w	8014856 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d002      	beq.n	801474a <HAL_UART_Transmit_IT+0x26>
 8014744:	88fb      	ldrh	r3, [r7, #6]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d101      	bne.n	801474e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 801474a:	2301      	movs	r3, #1
 801474c:	e084      	b.n	8014858 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8014754:	2b01      	cmp	r3, #1
 8014756:	d101      	bne.n	801475c <HAL_UART_Transmit_IT+0x38>
 8014758:	2302      	movs	r3, #2
 801475a:	e07d      	b.n	8014858 <HAL_UART_Transmit_IT+0x134>
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	2201      	movs	r2, #1
 8014760:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	68ba      	ldr	r2, [r7, #8]
 8014768:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	88fa      	ldrh	r2, [r7, #6]
 801476e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	88fa      	ldrh	r2, [r7, #6]
 8014776:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	2200      	movs	r2, #0
 801477e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	2200      	movs	r2, #0
 8014784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	2221      	movs	r2, #33	; 0x21
 801478c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8014798:	d12e      	bne.n	80147f8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	689b      	ldr	r3, [r3, #8]
 801479e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80147a2:	d107      	bne.n	80147b4 <HAL_UART_Transmit_IT+0x90>
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	691b      	ldr	r3, [r3, #16]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d103      	bne.n	80147b4 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	4a2d      	ldr	r2, [pc, #180]	; (8014864 <HAL_UART_Transmit_IT+0x140>)
 80147b0:	675a      	str	r2, [r3, #116]	; 0x74
 80147b2:	e002      	b.n	80147ba <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	4a2c      	ldr	r2, [pc, #176]	; (8014868 <HAL_UART_Transmit_IT+0x144>)
 80147b8:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2200      	movs	r2, #0
 80147be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	3308      	adds	r3, #8
 80147c8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147cc:	e853 3f00 	ldrex	r3, [r3]
 80147d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80147d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80147d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	3308      	adds	r3, #8
 80147e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147e2:	637a      	str	r2, [r7, #52]	; 0x34
 80147e4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80147e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80147ea:	e841 2300 	strex	r3, r2, [r1]
 80147ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80147f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d1e5      	bne.n	80147c2 <HAL_UART_Transmit_IT+0x9e>
 80147f6:	e02c      	b.n	8014852 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	689b      	ldr	r3, [r3, #8]
 80147fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014800:	d107      	bne.n	8014812 <HAL_UART_Transmit_IT+0xee>
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	691b      	ldr	r3, [r3, #16]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d103      	bne.n	8014812 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	4a17      	ldr	r2, [pc, #92]	; (801486c <HAL_UART_Transmit_IT+0x148>)
 801480e:	675a      	str	r2, [r3, #116]	; 0x74
 8014810:	e002      	b.n	8014818 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	4a16      	ldr	r2, [pc, #88]	; (8014870 <HAL_UART_Transmit_IT+0x14c>)
 8014816:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8014818:	68fb      	ldr	r3, [r7, #12]
 801481a:	2200      	movs	r2, #0
 801481c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	e853 3f00 	ldrex	r3, [r3]
 801482c:	613b      	str	r3, [r7, #16]
   return(result);
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014836:	68fb      	ldr	r3, [r7, #12]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	461a      	mov	r2, r3
 801483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801483e:	623b      	str	r3, [r7, #32]
 8014840:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014842:	69f9      	ldr	r1, [r7, #28]
 8014844:	6a3a      	ldr	r2, [r7, #32]
 8014846:	e841 2300 	strex	r3, r2, [r1]
 801484a:	61bb      	str	r3, [r7, #24]
   return(result);
 801484c:	69bb      	ldr	r3, [r7, #24]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d1e6      	bne.n	8014820 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8014852:	2300      	movs	r3, #0
 8014854:	e000      	b.n	8014858 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8014856:	2302      	movs	r3, #2
  }
}
 8014858:	4618      	mov	r0, r3
 801485a:	3744      	adds	r7, #68	; 0x44
 801485c:	46bd      	mov	sp, r7
 801485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014862:	4770      	bx	lr
 8014864:	08016687 	.word	0x08016687
 8014868:	080165a7 	.word	0x080165a7
 801486c:	080164e5 	.word	0x080164e5
 8014870:	0801642d 	.word	0x0801642d

08014874 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b08a      	sub	sp, #40	; 0x28
 8014878:	af00      	add	r7, sp, #0
 801487a:	60f8      	str	r0, [r7, #12]
 801487c:	60b9      	str	r1, [r7, #8]
 801487e:	4613      	mov	r3, r2
 8014880:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014888:	2b20      	cmp	r3, #32
 801488a:	d142      	bne.n	8014912 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d002      	beq.n	8014898 <HAL_UART_Receive_IT+0x24>
 8014892:	88fb      	ldrh	r3, [r7, #6]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d101      	bne.n	801489c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8014898:	2301      	movs	r3, #1
 801489a:	e03b      	b.n	8014914 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80148a2:	2b01      	cmp	r3, #1
 80148a4:	d101      	bne.n	80148aa <HAL_UART_Receive_IT+0x36>
 80148a6:	2302      	movs	r3, #2
 80148a8:	e034      	b.n	8014914 <HAL_UART_Receive_IT+0xa0>
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	2201      	movs	r2, #1
 80148ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	2200      	movs	r2, #0
 80148b6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	681b      	ldr	r3, [r3, #0]
 80148bc:	4a17      	ldr	r2, [pc, #92]	; (801491c <HAL_UART_Receive_IT+0xa8>)
 80148be:	4293      	cmp	r3, r2
 80148c0:	d01f      	beq.n	8014902 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	685b      	ldr	r3, [r3, #4]
 80148c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d018      	beq.n	8014902 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148d6:	697b      	ldr	r3, [r7, #20]
 80148d8:	e853 3f00 	ldrex	r3, [r3]
 80148dc:	613b      	str	r3, [r7, #16]
   return(result);
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80148e4:	627b      	str	r3, [r7, #36]	; 0x24
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	461a      	mov	r2, r3
 80148ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ee:	623b      	str	r3, [r7, #32]
 80148f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80148f2:	69f9      	ldr	r1, [r7, #28]
 80148f4:	6a3a      	ldr	r2, [r7, #32]
 80148f6:	e841 2300 	strex	r3, r2, [r1]
 80148fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80148fc:	69bb      	ldr	r3, [r7, #24]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d1e6      	bne.n	80148d0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8014902:	88fb      	ldrh	r3, [r7, #6]
 8014904:	461a      	mov	r2, r3
 8014906:	68b9      	ldr	r1, [r7, #8]
 8014908:	68f8      	ldr	r0, [r7, #12]
 801490a:	f001 fbe9 	bl	80160e0 <UART_Start_Receive_IT>
 801490e:	4603      	mov	r3, r0
 8014910:	e000      	b.n	8014914 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8014912:	2302      	movs	r3, #2
  }
}
 8014914:	4618      	mov	r0, r3
 8014916:	3728      	adds	r7, #40	; 0x28
 8014918:	46bd      	mov	sp, r7
 801491a:	bd80      	pop	{r7, pc}
 801491c:	58000c00 	.word	0x58000c00

08014920 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014920:	b580      	push	{r7, lr}
 8014922:	b0ba      	sub	sp, #232	; 0xe8
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	69db      	ldr	r3, [r3, #28]
 801492e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	689b      	ldr	r3, [r3, #8]
 8014942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8014946:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801494a:	f640 030f 	movw	r3, #2063	; 0x80f
 801494e:	4013      	ands	r3, r2
 8014950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8014954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014958:	2b00      	cmp	r3, #0
 801495a:	d11b      	bne.n	8014994 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014960:	f003 0320 	and.w	r3, r3, #32
 8014964:	2b00      	cmp	r3, #0
 8014966:	d015      	beq.n	8014994 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801496c:	f003 0320 	and.w	r3, r3, #32
 8014970:	2b00      	cmp	r3, #0
 8014972:	d105      	bne.n	8014980 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014974:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801497c:	2b00      	cmp	r3, #0
 801497e:	d009      	beq.n	8014994 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014984:	2b00      	cmp	r3, #0
 8014986:	f000 835a 	beq.w	801503e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	4798      	blx	r3
      }
      return;
 8014992:	e354      	b.n	801503e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8014994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014998:	2b00      	cmp	r3, #0
 801499a:	f000 811f 	beq.w	8014bdc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801499e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80149a2:	4b8b      	ldr	r3, [pc, #556]	; (8014bd0 <HAL_UART_IRQHandler+0x2b0>)
 80149a4:	4013      	ands	r3, r2
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d106      	bne.n	80149b8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80149aa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80149ae:	4b89      	ldr	r3, [pc, #548]	; (8014bd4 <HAL_UART_IRQHandler+0x2b4>)
 80149b0:	4013      	ands	r3, r2
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	f000 8112 	beq.w	8014bdc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80149b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80149bc:	f003 0301 	and.w	r3, r3, #1
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d011      	beq.n	80149e8 <HAL_UART_IRQHandler+0xc8>
 80149c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80149c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d00b      	beq.n	80149e8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	2201      	movs	r2, #1
 80149d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80149de:	f043 0201 	orr.w	r2, r3, #1
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80149e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80149ec:	f003 0302 	and.w	r3, r3, #2
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d011      	beq.n	8014a18 <HAL_UART_IRQHandler+0xf8>
 80149f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80149f8:	f003 0301 	and.w	r3, r3, #1
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d00b      	beq.n	8014a18 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	2202      	movs	r2, #2
 8014a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014a0e:	f043 0204 	orr.w	r2, r3, #4
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a1c:	f003 0304 	and.w	r3, r3, #4
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d011      	beq.n	8014a48 <HAL_UART_IRQHandler+0x128>
 8014a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a28:	f003 0301 	and.w	r3, r3, #1
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d00b      	beq.n	8014a48 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2204      	movs	r2, #4
 8014a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014a3e:	f043 0202 	orr.w	r2, r3, #2
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a4c:	f003 0308 	and.w	r3, r3, #8
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d017      	beq.n	8014a84 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a58:	f003 0320 	and.w	r3, r3, #32
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d105      	bne.n	8014a6c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014a60:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014a64:	4b5a      	ldr	r3, [pc, #360]	; (8014bd0 <HAL_UART_IRQHandler+0x2b0>)
 8014a66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d00b      	beq.n	8014a84 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	2208      	movs	r2, #8
 8014a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014a7a:	f043 0208 	orr.w	r2, r3, #8
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d012      	beq.n	8014ab6 <HAL_UART_IRQHandler+0x196>
 8014a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d00c      	beq.n	8014ab6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014aa4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014aac:	f043 0220 	orr.w	r2, r3, #32
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	f000 82c0 	beq.w	8015042 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ac6:	f003 0320 	and.w	r3, r3, #32
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d013      	beq.n	8014af6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ad2:	f003 0320 	and.w	r3, r3, #32
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d105      	bne.n	8014ae6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d007      	beq.n	8014af6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d003      	beq.n	8014af6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014af2:	6878      	ldr	r0, [r7, #4]
 8014af4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014afc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	689b      	ldr	r3, [r3, #8]
 8014b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b0a:	2b40      	cmp	r3, #64	; 0x40
 8014b0c:	d005      	beq.n	8014b1a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014b12:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d04f      	beq.n	8014bba <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014b1a:	6878      	ldr	r0, [r7, #4]
 8014b1c:	f001 fc0a 	bl	8016334 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	689b      	ldr	r3, [r3, #8]
 8014b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b2a:	2b40      	cmp	r3, #64	; 0x40
 8014b2c:	d141      	bne.n	8014bb2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	3308      	adds	r3, #8
 8014b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014b3c:	e853 3f00 	ldrex	r3, [r3]
 8014b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014b44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014b4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	3308      	adds	r3, #8
 8014b56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014b5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014b5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014b66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014b6a:	e841 2300 	strex	r3, r2, [r1]
 8014b6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d1d9      	bne.n	8014b2e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d013      	beq.n	8014baa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b86:	4a14      	ldr	r2, [pc, #80]	; (8014bd8 <HAL_UART_IRQHandler+0x2b8>)
 8014b88:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b8e:	4618      	mov	r0, r3
 8014b90:	f7f6 fa3c 	bl	800b00c <HAL_DMA_Abort_IT>
 8014b94:	4603      	mov	r3, r0
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d017      	beq.n	8014bca <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ba0:	687a      	ldr	r2, [r7, #4]
 8014ba2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8014ba4:	4610      	mov	r0, r2
 8014ba6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014ba8:	e00f      	b.n	8014bca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f000 fa60 	bl	8015070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bb0:	e00b      	b.n	8014bca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	f000 fa5c 	bl	8015070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bb8:	e007      	b.n	8014bca <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f000 fa58 	bl	8015070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8014bc8:	e23b      	b.n	8015042 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bca:	bf00      	nop
    return;
 8014bcc:	e239      	b.n	8015042 <HAL_UART_IRQHandler+0x722>
 8014bce:	bf00      	nop
 8014bd0:	10000001 	.word	0x10000001
 8014bd4:	04000120 	.word	0x04000120
 8014bd8:	08016401 	.word	0x08016401

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014be0:	2b01      	cmp	r3, #1
 8014be2:	f040 81ce 	bne.w	8014f82 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014bea:	f003 0310 	and.w	r3, r3, #16
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	f000 81c7 	beq.w	8014f82 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014bf8:	f003 0310 	and.w	r3, r3, #16
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	f000 81c0 	beq.w	8014f82 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	2210      	movs	r2, #16
 8014c08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	689b      	ldr	r3, [r3, #8]
 8014c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c14:	2b40      	cmp	r3, #64	; 0x40
 8014c16:	f040 813b 	bne.w	8014e90 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	4a8b      	ldr	r2, [pc, #556]	; (8014e50 <HAL_UART_IRQHandler+0x530>)
 8014c22:	4293      	cmp	r3, r2
 8014c24:	d059      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	4a89      	ldr	r2, [pc, #548]	; (8014e54 <HAL_UART_IRQHandler+0x534>)
 8014c2e:	4293      	cmp	r3, r2
 8014c30:	d053      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	4a87      	ldr	r2, [pc, #540]	; (8014e58 <HAL_UART_IRQHandler+0x538>)
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	d04d      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	4a85      	ldr	r2, [pc, #532]	; (8014e5c <HAL_UART_IRQHandler+0x53c>)
 8014c46:	4293      	cmp	r3, r2
 8014c48:	d047      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	4a83      	ldr	r2, [pc, #524]	; (8014e60 <HAL_UART_IRQHandler+0x540>)
 8014c52:	4293      	cmp	r3, r2
 8014c54:	d041      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	4a81      	ldr	r2, [pc, #516]	; (8014e64 <HAL_UART_IRQHandler+0x544>)
 8014c5e:	4293      	cmp	r3, r2
 8014c60:	d03b      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	4a7f      	ldr	r2, [pc, #508]	; (8014e68 <HAL_UART_IRQHandler+0x548>)
 8014c6a:	4293      	cmp	r3, r2
 8014c6c:	d035      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	4a7d      	ldr	r2, [pc, #500]	; (8014e6c <HAL_UART_IRQHandler+0x54c>)
 8014c76:	4293      	cmp	r3, r2
 8014c78:	d02f      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	4a7b      	ldr	r2, [pc, #492]	; (8014e70 <HAL_UART_IRQHandler+0x550>)
 8014c82:	4293      	cmp	r3, r2
 8014c84:	d029      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	4a79      	ldr	r2, [pc, #484]	; (8014e74 <HAL_UART_IRQHandler+0x554>)
 8014c8e:	4293      	cmp	r3, r2
 8014c90:	d023      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	4a77      	ldr	r2, [pc, #476]	; (8014e78 <HAL_UART_IRQHandler+0x558>)
 8014c9a:	4293      	cmp	r3, r2
 8014c9c:	d01d      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	4a75      	ldr	r2, [pc, #468]	; (8014e7c <HAL_UART_IRQHandler+0x55c>)
 8014ca6:	4293      	cmp	r3, r2
 8014ca8:	d017      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	4a73      	ldr	r2, [pc, #460]	; (8014e80 <HAL_UART_IRQHandler+0x560>)
 8014cb2:	4293      	cmp	r3, r2
 8014cb4:	d011      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	4a71      	ldr	r2, [pc, #452]	; (8014e84 <HAL_UART_IRQHandler+0x564>)
 8014cbe:	4293      	cmp	r3, r2
 8014cc0:	d00b      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	4a6f      	ldr	r2, [pc, #444]	; (8014e88 <HAL_UART_IRQHandler+0x568>)
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	d005      	beq.n	8014cda <HAL_UART_IRQHandler+0x3ba>
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	4a6d      	ldr	r2, [pc, #436]	; (8014e8c <HAL_UART_IRQHandler+0x56c>)
 8014cd6:	4293      	cmp	r3, r2
 8014cd8:	d105      	bne.n	8014ce6 <HAL_UART_IRQHandler+0x3c6>
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	b29b      	uxth	r3, r3
 8014ce4:	e004      	b.n	8014cf0 <HAL_UART_IRQHandler+0x3d0>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	b29b      	uxth	r3, r3
 8014cf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014cf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	f000 81a4 	beq.w	8015046 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014d04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014d08:	429a      	cmp	r2, r3
 8014d0a:	f080 819c 	bcs.w	8015046 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014d14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d1c:	69db      	ldr	r3, [r3, #28]
 8014d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d22:	f000 8086 	beq.w	8014e32 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	681b      	ldr	r3, [r3, #0]
 8014d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014d32:	e853 3f00 	ldrex	r3, [r3]
 8014d36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014d3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014d42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	461a      	mov	r2, r3
 8014d4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014d54:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d58:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014d5c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014d60:	e841 2300 	strex	r3, r2, [r1]
 8014d64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	d1da      	bne.n	8014d26 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	3308      	adds	r3, #8
 8014d76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d7a:	e853 3f00 	ldrex	r3, [r3]
 8014d7e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014d80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014d82:	f023 0301 	bic.w	r3, r3, #1
 8014d86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	3308      	adds	r3, #8
 8014d90:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014d94:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014d98:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d9a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014d9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014da0:	e841 2300 	strex	r3, r2, [r1]
 8014da4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d1e1      	bne.n	8014d70 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	3308      	adds	r3, #8
 8014db2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014db4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014db6:	e853 3f00 	ldrex	r3, [r3]
 8014dba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	3308      	adds	r3, #8
 8014dcc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014dd0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014dd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dd4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014dd6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014dd8:	e841 2300 	strex	r3, r2, [r1]
 8014ddc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d1e3      	bne.n	8014dac <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	2220      	movs	r2, #32
 8014de8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	2200      	movs	r2, #0
 8014df0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014dfa:	e853 3f00 	ldrex	r3, [r3]
 8014dfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e02:	f023 0310 	bic.w	r3, r3, #16
 8014e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	461a      	mov	r2, r3
 8014e10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e14:	65bb      	str	r3, [r7, #88]	; 0x58
 8014e16:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014e1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014e1c:	e841 2300 	strex	r3, r2, [r1]
 8014e20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d1e4      	bne.n	8014df2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7f5 fdcf 	bl	800a9d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014e3e:	b29b      	uxth	r3, r3
 8014e40:	1ad3      	subs	r3, r2, r3
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	4619      	mov	r1, r3
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f000 f91c 	bl	8015084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014e4c:	e0fb      	b.n	8015046 <HAL_UART_IRQHandler+0x726>
 8014e4e:	bf00      	nop
 8014e50:	40020010 	.word	0x40020010
 8014e54:	40020028 	.word	0x40020028
 8014e58:	40020040 	.word	0x40020040
 8014e5c:	40020058 	.word	0x40020058
 8014e60:	40020070 	.word	0x40020070
 8014e64:	40020088 	.word	0x40020088
 8014e68:	400200a0 	.word	0x400200a0
 8014e6c:	400200b8 	.word	0x400200b8
 8014e70:	40020410 	.word	0x40020410
 8014e74:	40020428 	.word	0x40020428
 8014e78:	40020440 	.word	0x40020440
 8014e7c:	40020458 	.word	0x40020458
 8014e80:	40020470 	.word	0x40020470
 8014e84:	40020488 	.word	0x40020488
 8014e88:	400204a0 	.word	0x400204a0
 8014e8c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	1ad3      	subs	r3, r2, r3
 8014ea0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014eaa:	b29b      	uxth	r3, r3
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	f000 80cc 	beq.w	801504a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8014eb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	f000 80c7 	beq.w	801504a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ec4:	e853 3f00 	ldrex	r3, [r3]
 8014ec8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ecc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014ed0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	461a      	mov	r2, r3
 8014eda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014ede:	647b      	str	r3, [r7, #68]	; 0x44
 8014ee0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014ee2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014ee6:	e841 2300 	strex	r3, r2, [r1]
 8014eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d1e4      	bne.n	8014ebc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	3308      	adds	r3, #8
 8014ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014efc:	e853 3f00 	ldrex	r3, [r3]
 8014f00:	623b      	str	r3, [r7, #32]
   return(result);
 8014f02:	6a3a      	ldr	r2, [r7, #32]
 8014f04:	4b54      	ldr	r3, [pc, #336]	; (8015058 <HAL_UART_IRQHandler+0x738>)
 8014f06:	4013      	ands	r3, r2
 8014f08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	3308      	adds	r3, #8
 8014f12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014f16:	633a      	str	r2, [r7, #48]	; 0x30
 8014f18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f1e:	e841 2300 	strex	r3, r2, [r1]
 8014f22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d1e3      	bne.n	8014ef2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	2220      	movs	r2, #32
 8014f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	2200      	movs	r2, #0
 8014f36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f44:	693b      	ldr	r3, [r7, #16]
 8014f46:	e853 3f00 	ldrex	r3, [r3]
 8014f4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	f023 0310 	bic.w	r3, r3, #16
 8014f52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f60:	61fb      	str	r3, [r7, #28]
 8014f62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f64:	69b9      	ldr	r1, [r7, #24]
 8014f66:	69fa      	ldr	r2, [r7, #28]
 8014f68:	e841 2300 	strex	r3, r2, [r1]
 8014f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d1e4      	bne.n	8014f3e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014f74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014f78:	4619      	mov	r1, r3
 8014f7a:	6878      	ldr	r0, [r7, #4]
 8014f7c:	f000 f882 	bl	8015084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014f80:	e063      	b.n	801504a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d00e      	beq.n	8014fac <HAL_UART_IRQHandler+0x68c>
 8014f8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d008      	beq.n	8014fac <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014fa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f002 f86b 	bl	8017080 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014faa:	e051      	b.n	8015050 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d014      	beq.n	8014fe2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014fb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d105      	bne.n	8014fd0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014fc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014fc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d008      	beq.n	8014fe2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d03a      	beq.n	801504e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	4798      	blx	r3
    }
    return;
 8014fe0:	e035      	b.n	801504e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d009      	beq.n	8015002 <HAL_UART_IRQHandler+0x6e2>
 8014fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d003      	beq.n	8015002 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8014ffa:	6878      	ldr	r0, [r7, #4]
 8014ffc:	f001 fbb8 	bl	8016770 <UART_EndTransmit_IT>
    return;
 8015000:	e026      	b.n	8015050 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8015002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015006:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801500a:	2b00      	cmp	r3, #0
 801500c:	d009      	beq.n	8015022 <HAL_UART_IRQHandler+0x702>
 801500e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015012:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8015016:	2b00      	cmp	r3, #0
 8015018:	d003      	beq.n	8015022 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801501a:	6878      	ldr	r0, [r7, #4]
 801501c:	f002 f844 	bl	80170a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015020:	e016      	b.n	8015050 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8015022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015026:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801502a:	2b00      	cmp	r3, #0
 801502c:	d010      	beq.n	8015050 <HAL_UART_IRQHandler+0x730>
 801502e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015032:	2b00      	cmp	r3, #0
 8015034:	da0c      	bge.n	8015050 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8015036:	6878      	ldr	r0, [r7, #4]
 8015038:	f002 f82c 	bl	8017094 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801503c:	e008      	b.n	8015050 <HAL_UART_IRQHandler+0x730>
      return;
 801503e:	bf00      	nop
 8015040:	e006      	b.n	8015050 <HAL_UART_IRQHandler+0x730>
    return;
 8015042:	bf00      	nop
 8015044:	e004      	b.n	8015050 <HAL_UART_IRQHandler+0x730>
      return;
 8015046:	bf00      	nop
 8015048:	e002      	b.n	8015050 <HAL_UART_IRQHandler+0x730>
      return;
 801504a:	bf00      	nop
 801504c:	e000      	b.n	8015050 <HAL_UART_IRQHandler+0x730>
    return;
 801504e:	bf00      	nop
  }
}
 8015050:	37e8      	adds	r7, #232	; 0xe8
 8015052:	46bd      	mov	sp, r7
 8015054:	bd80      	pop	{r7, pc}
 8015056:	bf00      	nop
 8015058:	effffffe 	.word	0xeffffffe

0801505c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801505c:	b480      	push	{r7}
 801505e:	b083      	sub	sp, #12
 8015060:	af00      	add	r7, sp, #0
 8015062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8015064:	bf00      	nop
 8015066:	370c      	adds	r7, #12
 8015068:	46bd      	mov	sp, r7
 801506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801506e:	4770      	bx	lr

08015070 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015070:	b480      	push	{r7}
 8015072:	b083      	sub	sp, #12
 8015074:	af00      	add	r7, sp, #0
 8015076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8015078:	bf00      	nop
 801507a:	370c      	adds	r7, #12
 801507c:	46bd      	mov	sp, r7
 801507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015082:	4770      	bx	lr

08015084 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8015084:	b480      	push	{r7}
 8015086:	b083      	sub	sp, #12
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	460b      	mov	r3, r1
 801508e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8015090:	bf00      	nop
 8015092:	370c      	adds	r7, #12
 8015094:	46bd      	mov	sp, r7
 8015096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509a:	4770      	bx	lr

0801509c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801509c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80150a0:	b092      	sub	sp, #72	; 0x48
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80150a6:	2300      	movs	r3, #0
 80150a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80150ac:	697b      	ldr	r3, [r7, #20]
 80150ae:	689a      	ldr	r2, [r3, #8]
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	691b      	ldr	r3, [r3, #16]
 80150b4:	431a      	orrs	r2, r3
 80150b6:	697b      	ldr	r3, [r7, #20]
 80150b8:	695b      	ldr	r3, [r3, #20]
 80150ba:	431a      	orrs	r2, r3
 80150bc:	697b      	ldr	r3, [r7, #20]
 80150be:	69db      	ldr	r3, [r3, #28]
 80150c0:	4313      	orrs	r3, r2
 80150c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	681a      	ldr	r2, [r3, #0]
 80150ca:	4bbe      	ldr	r3, [pc, #760]	; (80153c4 <UART_SetConfig+0x328>)
 80150cc:	4013      	ands	r3, r2
 80150ce:	697a      	ldr	r2, [r7, #20]
 80150d0:	6812      	ldr	r2, [r2, #0]
 80150d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80150d4:	430b      	orrs	r3, r1
 80150d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	685b      	ldr	r3, [r3, #4]
 80150de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80150e2:	697b      	ldr	r3, [r7, #20]
 80150e4:	68da      	ldr	r2, [r3, #12]
 80150e6:	697b      	ldr	r3, [r7, #20]
 80150e8:	681b      	ldr	r3, [r3, #0]
 80150ea:	430a      	orrs	r2, r1
 80150ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80150ee:	697b      	ldr	r3, [r7, #20]
 80150f0:	699b      	ldr	r3, [r3, #24]
 80150f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80150f4:	697b      	ldr	r3, [r7, #20]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	4ab3      	ldr	r2, [pc, #716]	; (80153c8 <UART_SetConfig+0x32c>)
 80150fa:	4293      	cmp	r3, r2
 80150fc:	d004      	beq.n	8015108 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	6a1b      	ldr	r3, [r3, #32]
 8015102:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015104:	4313      	orrs	r3, r2
 8015106:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015108:	697b      	ldr	r3, [r7, #20]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	689a      	ldr	r2, [r3, #8]
 801510e:	4baf      	ldr	r3, [pc, #700]	; (80153cc <UART_SetConfig+0x330>)
 8015110:	4013      	ands	r3, r2
 8015112:	697a      	ldr	r2, [r7, #20]
 8015114:	6812      	ldr	r2, [r2, #0]
 8015116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015118:	430b      	orrs	r3, r1
 801511a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801511c:	697b      	ldr	r3, [r7, #20]
 801511e:	681b      	ldr	r3, [r3, #0]
 8015120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015122:	f023 010f 	bic.w	r1, r3, #15
 8015126:	697b      	ldr	r3, [r7, #20]
 8015128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801512a:	697b      	ldr	r3, [r7, #20]
 801512c:	681b      	ldr	r3, [r3, #0]
 801512e:	430a      	orrs	r2, r1
 8015130:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8015132:	697b      	ldr	r3, [r7, #20]
 8015134:	681b      	ldr	r3, [r3, #0]
 8015136:	4aa6      	ldr	r2, [pc, #664]	; (80153d0 <UART_SetConfig+0x334>)
 8015138:	4293      	cmp	r3, r2
 801513a:	d177      	bne.n	801522c <UART_SetConfig+0x190>
 801513c:	4ba5      	ldr	r3, [pc, #660]	; (80153d4 <UART_SetConfig+0x338>)
 801513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015144:	2b28      	cmp	r3, #40	; 0x28
 8015146:	d86d      	bhi.n	8015224 <UART_SetConfig+0x188>
 8015148:	a201      	add	r2, pc, #4	; (adr r2, 8015150 <UART_SetConfig+0xb4>)
 801514a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801514e:	bf00      	nop
 8015150:	080151f5 	.word	0x080151f5
 8015154:	08015225 	.word	0x08015225
 8015158:	08015225 	.word	0x08015225
 801515c:	08015225 	.word	0x08015225
 8015160:	08015225 	.word	0x08015225
 8015164:	08015225 	.word	0x08015225
 8015168:	08015225 	.word	0x08015225
 801516c:	08015225 	.word	0x08015225
 8015170:	080151fd 	.word	0x080151fd
 8015174:	08015225 	.word	0x08015225
 8015178:	08015225 	.word	0x08015225
 801517c:	08015225 	.word	0x08015225
 8015180:	08015225 	.word	0x08015225
 8015184:	08015225 	.word	0x08015225
 8015188:	08015225 	.word	0x08015225
 801518c:	08015225 	.word	0x08015225
 8015190:	08015205 	.word	0x08015205
 8015194:	08015225 	.word	0x08015225
 8015198:	08015225 	.word	0x08015225
 801519c:	08015225 	.word	0x08015225
 80151a0:	08015225 	.word	0x08015225
 80151a4:	08015225 	.word	0x08015225
 80151a8:	08015225 	.word	0x08015225
 80151ac:	08015225 	.word	0x08015225
 80151b0:	0801520d 	.word	0x0801520d
 80151b4:	08015225 	.word	0x08015225
 80151b8:	08015225 	.word	0x08015225
 80151bc:	08015225 	.word	0x08015225
 80151c0:	08015225 	.word	0x08015225
 80151c4:	08015225 	.word	0x08015225
 80151c8:	08015225 	.word	0x08015225
 80151cc:	08015225 	.word	0x08015225
 80151d0:	08015215 	.word	0x08015215
 80151d4:	08015225 	.word	0x08015225
 80151d8:	08015225 	.word	0x08015225
 80151dc:	08015225 	.word	0x08015225
 80151e0:	08015225 	.word	0x08015225
 80151e4:	08015225 	.word	0x08015225
 80151e8:	08015225 	.word	0x08015225
 80151ec:	08015225 	.word	0x08015225
 80151f0:	0801521d 	.word	0x0801521d
 80151f4:	2301      	movs	r3, #1
 80151f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80151fa:	e326      	b.n	801584a <UART_SetConfig+0x7ae>
 80151fc:	2304      	movs	r3, #4
 80151fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015202:	e322      	b.n	801584a <UART_SetConfig+0x7ae>
 8015204:	2308      	movs	r3, #8
 8015206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801520a:	e31e      	b.n	801584a <UART_SetConfig+0x7ae>
 801520c:	2310      	movs	r3, #16
 801520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015212:	e31a      	b.n	801584a <UART_SetConfig+0x7ae>
 8015214:	2320      	movs	r3, #32
 8015216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801521a:	e316      	b.n	801584a <UART_SetConfig+0x7ae>
 801521c:	2340      	movs	r3, #64	; 0x40
 801521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015222:	e312      	b.n	801584a <UART_SetConfig+0x7ae>
 8015224:	2380      	movs	r3, #128	; 0x80
 8015226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801522a:	e30e      	b.n	801584a <UART_SetConfig+0x7ae>
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	4a69      	ldr	r2, [pc, #420]	; (80153d8 <UART_SetConfig+0x33c>)
 8015232:	4293      	cmp	r3, r2
 8015234:	d130      	bne.n	8015298 <UART_SetConfig+0x1fc>
 8015236:	4b67      	ldr	r3, [pc, #412]	; (80153d4 <UART_SetConfig+0x338>)
 8015238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801523a:	f003 0307 	and.w	r3, r3, #7
 801523e:	2b05      	cmp	r3, #5
 8015240:	d826      	bhi.n	8015290 <UART_SetConfig+0x1f4>
 8015242:	a201      	add	r2, pc, #4	; (adr r2, 8015248 <UART_SetConfig+0x1ac>)
 8015244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015248:	08015261 	.word	0x08015261
 801524c:	08015269 	.word	0x08015269
 8015250:	08015271 	.word	0x08015271
 8015254:	08015279 	.word	0x08015279
 8015258:	08015281 	.word	0x08015281
 801525c:	08015289 	.word	0x08015289
 8015260:	2300      	movs	r3, #0
 8015262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015266:	e2f0      	b.n	801584a <UART_SetConfig+0x7ae>
 8015268:	2304      	movs	r3, #4
 801526a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801526e:	e2ec      	b.n	801584a <UART_SetConfig+0x7ae>
 8015270:	2308      	movs	r3, #8
 8015272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015276:	e2e8      	b.n	801584a <UART_SetConfig+0x7ae>
 8015278:	2310      	movs	r3, #16
 801527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801527e:	e2e4      	b.n	801584a <UART_SetConfig+0x7ae>
 8015280:	2320      	movs	r3, #32
 8015282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015286:	e2e0      	b.n	801584a <UART_SetConfig+0x7ae>
 8015288:	2340      	movs	r3, #64	; 0x40
 801528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801528e:	e2dc      	b.n	801584a <UART_SetConfig+0x7ae>
 8015290:	2380      	movs	r3, #128	; 0x80
 8015292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015296:	e2d8      	b.n	801584a <UART_SetConfig+0x7ae>
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	4a4f      	ldr	r2, [pc, #316]	; (80153dc <UART_SetConfig+0x340>)
 801529e:	4293      	cmp	r3, r2
 80152a0:	d130      	bne.n	8015304 <UART_SetConfig+0x268>
 80152a2:	4b4c      	ldr	r3, [pc, #304]	; (80153d4 <UART_SetConfig+0x338>)
 80152a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152a6:	f003 0307 	and.w	r3, r3, #7
 80152aa:	2b05      	cmp	r3, #5
 80152ac:	d826      	bhi.n	80152fc <UART_SetConfig+0x260>
 80152ae:	a201      	add	r2, pc, #4	; (adr r2, 80152b4 <UART_SetConfig+0x218>)
 80152b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152b4:	080152cd 	.word	0x080152cd
 80152b8:	080152d5 	.word	0x080152d5
 80152bc:	080152dd 	.word	0x080152dd
 80152c0:	080152e5 	.word	0x080152e5
 80152c4:	080152ed 	.word	0x080152ed
 80152c8:	080152f5 	.word	0x080152f5
 80152cc:	2300      	movs	r3, #0
 80152ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152d2:	e2ba      	b.n	801584a <UART_SetConfig+0x7ae>
 80152d4:	2304      	movs	r3, #4
 80152d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152da:	e2b6      	b.n	801584a <UART_SetConfig+0x7ae>
 80152dc:	2308      	movs	r3, #8
 80152de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152e2:	e2b2      	b.n	801584a <UART_SetConfig+0x7ae>
 80152e4:	2310      	movs	r3, #16
 80152e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ea:	e2ae      	b.n	801584a <UART_SetConfig+0x7ae>
 80152ec:	2320      	movs	r3, #32
 80152ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152f2:	e2aa      	b.n	801584a <UART_SetConfig+0x7ae>
 80152f4:	2340      	movs	r3, #64	; 0x40
 80152f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152fa:	e2a6      	b.n	801584a <UART_SetConfig+0x7ae>
 80152fc:	2380      	movs	r3, #128	; 0x80
 80152fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015302:	e2a2      	b.n	801584a <UART_SetConfig+0x7ae>
 8015304:	697b      	ldr	r3, [r7, #20]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	4a35      	ldr	r2, [pc, #212]	; (80153e0 <UART_SetConfig+0x344>)
 801530a:	4293      	cmp	r3, r2
 801530c:	d130      	bne.n	8015370 <UART_SetConfig+0x2d4>
 801530e:	4b31      	ldr	r3, [pc, #196]	; (80153d4 <UART_SetConfig+0x338>)
 8015310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015312:	f003 0307 	and.w	r3, r3, #7
 8015316:	2b05      	cmp	r3, #5
 8015318:	d826      	bhi.n	8015368 <UART_SetConfig+0x2cc>
 801531a:	a201      	add	r2, pc, #4	; (adr r2, 8015320 <UART_SetConfig+0x284>)
 801531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015320:	08015339 	.word	0x08015339
 8015324:	08015341 	.word	0x08015341
 8015328:	08015349 	.word	0x08015349
 801532c:	08015351 	.word	0x08015351
 8015330:	08015359 	.word	0x08015359
 8015334:	08015361 	.word	0x08015361
 8015338:	2300      	movs	r3, #0
 801533a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801533e:	e284      	b.n	801584a <UART_SetConfig+0x7ae>
 8015340:	2304      	movs	r3, #4
 8015342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015346:	e280      	b.n	801584a <UART_SetConfig+0x7ae>
 8015348:	2308      	movs	r3, #8
 801534a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801534e:	e27c      	b.n	801584a <UART_SetConfig+0x7ae>
 8015350:	2310      	movs	r3, #16
 8015352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015356:	e278      	b.n	801584a <UART_SetConfig+0x7ae>
 8015358:	2320      	movs	r3, #32
 801535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801535e:	e274      	b.n	801584a <UART_SetConfig+0x7ae>
 8015360:	2340      	movs	r3, #64	; 0x40
 8015362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015366:	e270      	b.n	801584a <UART_SetConfig+0x7ae>
 8015368:	2380      	movs	r3, #128	; 0x80
 801536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801536e:	e26c      	b.n	801584a <UART_SetConfig+0x7ae>
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	681b      	ldr	r3, [r3, #0]
 8015374:	4a1b      	ldr	r2, [pc, #108]	; (80153e4 <UART_SetConfig+0x348>)
 8015376:	4293      	cmp	r3, r2
 8015378:	d142      	bne.n	8015400 <UART_SetConfig+0x364>
 801537a:	4b16      	ldr	r3, [pc, #88]	; (80153d4 <UART_SetConfig+0x338>)
 801537c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801537e:	f003 0307 	and.w	r3, r3, #7
 8015382:	2b05      	cmp	r3, #5
 8015384:	d838      	bhi.n	80153f8 <UART_SetConfig+0x35c>
 8015386:	a201      	add	r2, pc, #4	; (adr r2, 801538c <UART_SetConfig+0x2f0>)
 8015388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801538c:	080153a5 	.word	0x080153a5
 8015390:	080153ad 	.word	0x080153ad
 8015394:	080153b5 	.word	0x080153b5
 8015398:	080153bd 	.word	0x080153bd
 801539c:	080153e9 	.word	0x080153e9
 80153a0:	080153f1 	.word	0x080153f1
 80153a4:	2300      	movs	r3, #0
 80153a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153aa:	e24e      	b.n	801584a <UART_SetConfig+0x7ae>
 80153ac:	2304      	movs	r3, #4
 80153ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153b2:	e24a      	b.n	801584a <UART_SetConfig+0x7ae>
 80153b4:	2308      	movs	r3, #8
 80153b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ba:	e246      	b.n	801584a <UART_SetConfig+0x7ae>
 80153bc:	2310      	movs	r3, #16
 80153be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153c2:	e242      	b.n	801584a <UART_SetConfig+0x7ae>
 80153c4:	cfff69f3 	.word	0xcfff69f3
 80153c8:	58000c00 	.word	0x58000c00
 80153cc:	11fff4ff 	.word	0x11fff4ff
 80153d0:	40011000 	.word	0x40011000
 80153d4:	58024400 	.word	0x58024400
 80153d8:	40004400 	.word	0x40004400
 80153dc:	40004800 	.word	0x40004800
 80153e0:	40004c00 	.word	0x40004c00
 80153e4:	40005000 	.word	0x40005000
 80153e8:	2320      	movs	r3, #32
 80153ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ee:	e22c      	b.n	801584a <UART_SetConfig+0x7ae>
 80153f0:	2340      	movs	r3, #64	; 0x40
 80153f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153f6:	e228      	b.n	801584a <UART_SetConfig+0x7ae>
 80153f8:	2380      	movs	r3, #128	; 0x80
 80153fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153fe:	e224      	b.n	801584a <UART_SetConfig+0x7ae>
 8015400:	697b      	ldr	r3, [r7, #20]
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	4ab1      	ldr	r2, [pc, #708]	; (80156cc <UART_SetConfig+0x630>)
 8015406:	4293      	cmp	r3, r2
 8015408:	d176      	bne.n	80154f8 <UART_SetConfig+0x45c>
 801540a:	4bb1      	ldr	r3, [pc, #708]	; (80156d0 <UART_SetConfig+0x634>)
 801540c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801540e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015412:	2b28      	cmp	r3, #40	; 0x28
 8015414:	d86c      	bhi.n	80154f0 <UART_SetConfig+0x454>
 8015416:	a201      	add	r2, pc, #4	; (adr r2, 801541c <UART_SetConfig+0x380>)
 8015418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801541c:	080154c1 	.word	0x080154c1
 8015420:	080154f1 	.word	0x080154f1
 8015424:	080154f1 	.word	0x080154f1
 8015428:	080154f1 	.word	0x080154f1
 801542c:	080154f1 	.word	0x080154f1
 8015430:	080154f1 	.word	0x080154f1
 8015434:	080154f1 	.word	0x080154f1
 8015438:	080154f1 	.word	0x080154f1
 801543c:	080154c9 	.word	0x080154c9
 8015440:	080154f1 	.word	0x080154f1
 8015444:	080154f1 	.word	0x080154f1
 8015448:	080154f1 	.word	0x080154f1
 801544c:	080154f1 	.word	0x080154f1
 8015450:	080154f1 	.word	0x080154f1
 8015454:	080154f1 	.word	0x080154f1
 8015458:	080154f1 	.word	0x080154f1
 801545c:	080154d1 	.word	0x080154d1
 8015460:	080154f1 	.word	0x080154f1
 8015464:	080154f1 	.word	0x080154f1
 8015468:	080154f1 	.word	0x080154f1
 801546c:	080154f1 	.word	0x080154f1
 8015470:	080154f1 	.word	0x080154f1
 8015474:	080154f1 	.word	0x080154f1
 8015478:	080154f1 	.word	0x080154f1
 801547c:	080154d9 	.word	0x080154d9
 8015480:	080154f1 	.word	0x080154f1
 8015484:	080154f1 	.word	0x080154f1
 8015488:	080154f1 	.word	0x080154f1
 801548c:	080154f1 	.word	0x080154f1
 8015490:	080154f1 	.word	0x080154f1
 8015494:	080154f1 	.word	0x080154f1
 8015498:	080154f1 	.word	0x080154f1
 801549c:	080154e1 	.word	0x080154e1
 80154a0:	080154f1 	.word	0x080154f1
 80154a4:	080154f1 	.word	0x080154f1
 80154a8:	080154f1 	.word	0x080154f1
 80154ac:	080154f1 	.word	0x080154f1
 80154b0:	080154f1 	.word	0x080154f1
 80154b4:	080154f1 	.word	0x080154f1
 80154b8:	080154f1 	.word	0x080154f1
 80154bc:	080154e9 	.word	0x080154e9
 80154c0:	2301      	movs	r3, #1
 80154c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154c6:	e1c0      	b.n	801584a <UART_SetConfig+0x7ae>
 80154c8:	2304      	movs	r3, #4
 80154ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154ce:	e1bc      	b.n	801584a <UART_SetConfig+0x7ae>
 80154d0:	2308      	movs	r3, #8
 80154d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154d6:	e1b8      	b.n	801584a <UART_SetConfig+0x7ae>
 80154d8:	2310      	movs	r3, #16
 80154da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154de:	e1b4      	b.n	801584a <UART_SetConfig+0x7ae>
 80154e0:	2320      	movs	r3, #32
 80154e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154e6:	e1b0      	b.n	801584a <UART_SetConfig+0x7ae>
 80154e8:	2340      	movs	r3, #64	; 0x40
 80154ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154ee:	e1ac      	b.n	801584a <UART_SetConfig+0x7ae>
 80154f0:	2380      	movs	r3, #128	; 0x80
 80154f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154f6:	e1a8      	b.n	801584a <UART_SetConfig+0x7ae>
 80154f8:	697b      	ldr	r3, [r7, #20]
 80154fa:	681b      	ldr	r3, [r3, #0]
 80154fc:	4a75      	ldr	r2, [pc, #468]	; (80156d4 <UART_SetConfig+0x638>)
 80154fe:	4293      	cmp	r3, r2
 8015500:	d130      	bne.n	8015564 <UART_SetConfig+0x4c8>
 8015502:	4b73      	ldr	r3, [pc, #460]	; (80156d0 <UART_SetConfig+0x634>)
 8015504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015506:	f003 0307 	and.w	r3, r3, #7
 801550a:	2b05      	cmp	r3, #5
 801550c:	d826      	bhi.n	801555c <UART_SetConfig+0x4c0>
 801550e:	a201      	add	r2, pc, #4	; (adr r2, 8015514 <UART_SetConfig+0x478>)
 8015510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015514:	0801552d 	.word	0x0801552d
 8015518:	08015535 	.word	0x08015535
 801551c:	0801553d 	.word	0x0801553d
 8015520:	08015545 	.word	0x08015545
 8015524:	0801554d 	.word	0x0801554d
 8015528:	08015555 	.word	0x08015555
 801552c:	2300      	movs	r3, #0
 801552e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015532:	e18a      	b.n	801584a <UART_SetConfig+0x7ae>
 8015534:	2304      	movs	r3, #4
 8015536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801553a:	e186      	b.n	801584a <UART_SetConfig+0x7ae>
 801553c:	2308      	movs	r3, #8
 801553e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015542:	e182      	b.n	801584a <UART_SetConfig+0x7ae>
 8015544:	2310      	movs	r3, #16
 8015546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801554a:	e17e      	b.n	801584a <UART_SetConfig+0x7ae>
 801554c:	2320      	movs	r3, #32
 801554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015552:	e17a      	b.n	801584a <UART_SetConfig+0x7ae>
 8015554:	2340      	movs	r3, #64	; 0x40
 8015556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801555a:	e176      	b.n	801584a <UART_SetConfig+0x7ae>
 801555c:	2380      	movs	r3, #128	; 0x80
 801555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015562:	e172      	b.n	801584a <UART_SetConfig+0x7ae>
 8015564:	697b      	ldr	r3, [r7, #20]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	4a5b      	ldr	r2, [pc, #364]	; (80156d8 <UART_SetConfig+0x63c>)
 801556a:	4293      	cmp	r3, r2
 801556c:	d130      	bne.n	80155d0 <UART_SetConfig+0x534>
 801556e:	4b58      	ldr	r3, [pc, #352]	; (80156d0 <UART_SetConfig+0x634>)
 8015570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015572:	f003 0307 	and.w	r3, r3, #7
 8015576:	2b05      	cmp	r3, #5
 8015578:	d826      	bhi.n	80155c8 <UART_SetConfig+0x52c>
 801557a:	a201      	add	r2, pc, #4	; (adr r2, 8015580 <UART_SetConfig+0x4e4>)
 801557c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015580:	08015599 	.word	0x08015599
 8015584:	080155a1 	.word	0x080155a1
 8015588:	080155a9 	.word	0x080155a9
 801558c:	080155b1 	.word	0x080155b1
 8015590:	080155b9 	.word	0x080155b9
 8015594:	080155c1 	.word	0x080155c1
 8015598:	2300      	movs	r3, #0
 801559a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801559e:	e154      	b.n	801584a <UART_SetConfig+0x7ae>
 80155a0:	2304      	movs	r3, #4
 80155a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155a6:	e150      	b.n	801584a <UART_SetConfig+0x7ae>
 80155a8:	2308      	movs	r3, #8
 80155aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155ae:	e14c      	b.n	801584a <UART_SetConfig+0x7ae>
 80155b0:	2310      	movs	r3, #16
 80155b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155b6:	e148      	b.n	801584a <UART_SetConfig+0x7ae>
 80155b8:	2320      	movs	r3, #32
 80155ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155be:	e144      	b.n	801584a <UART_SetConfig+0x7ae>
 80155c0:	2340      	movs	r3, #64	; 0x40
 80155c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155c6:	e140      	b.n	801584a <UART_SetConfig+0x7ae>
 80155c8:	2380      	movs	r3, #128	; 0x80
 80155ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155ce:	e13c      	b.n	801584a <UART_SetConfig+0x7ae>
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	4a41      	ldr	r2, [pc, #260]	; (80156dc <UART_SetConfig+0x640>)
 80155d6:	4293      	cmp	r3, r2
 80155d8:	f040 8082 	bne.w	80156e0 <UART_SetConfig+0x644>
 80155dc:	4b3c      	ldr	r3, [pc, #240]	; (80156d0 <UART_SetConfig+0x634>)
 80155de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80155e4:	2b28      	cmp	r3, #40	; 0x28
 80155e6:	d86d      	bhi.n	80156c4 <UART_SetConfig+0x628>
 80155e8:	a201      	add	r2, pc, #4	; (adr r2, 80155f0 <UART_SetConfig+0x554>)
 80155ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155ee:	bf00      	nop
 80155f0:	08015695 	.word	0x08015695
 80155f4:	080156c5 	.word	0x080156c5
 80155f8:	080156c5 	.word	0x080156c5
 80155fc:	080156c5 	.word	0x080156c5
 8015600:	080156c5 	.word	0x080156c5
 8015604:	080156c5 	.word	0x080156c5
 8015608:	080156c5 	.word	0x080156c5
 801560c:	080156c5 	.word	0x080156c5
 8015610:	0801569d 	.word	0x0801569d
 8015614:	080156c5 	.word	0x080156c5
 8015618:	080156c5 	.word	0x080156c5
 801561c:	080156c5 	.word	0x080156c5
 8015620:	080156c5 	.word	0x080156c5
 8015624:	080156c5 	.word	0x080156c5
 8015628:	080156c5 	.word	0x080156c5
 801562c:	080156c5 	.word	0x080156c5
 8015630:	080156a5 	.word	0x080156a5
 8015634:	080156c5 	.word	0x080156c5
 8015638:	080156c5 	.word	0x080156c5
 801563c:	080156c5 	.word	0x080156c5
 8015640:	080156c5 	.word	0x080156c5
 8015644:	080156c5 	.word	0x080156c5
 8015648:	080156c5 	.word	0x080156c5
 801564c:	080156c5 	.word	0x080156c5
 8015650:	080156ad 	.word	0x080156ad
 8015654:	080156c5 	.word	0x080156c5
 8015658:	080156c5 	.word	0x080156c5
 801565c:	080156c5 	.word	0x080156c5
 8015660:	080156c5 	.word	0x080156c5
 8015664:	080156c5 	.word	0x080156c5
 8015668:	080156c5 	.word	0x080156c5
 801566c:	080156c5 	.word	0x080156c5
 8015670:	080156b5 	.word	0x080156b5
 8015674:	080156c5 	.word	0x080156c5
 8015678:	080156c5 	.word	0x080156c5
 801567c:	080156c5 	.word	0x080156c5
 8015680:	080156c5 	.word	0x080156c5
 8015684:	080156c5 	.word	0x080156c5
 8015688:	080156c5 	.word	0x080156c5
 801568c:	080156c5 	.word	0x080156c5
 8015690:	080156bd 	.word	0x080156bd
 8015694:	2301      	movs	r3, #1
 8015696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801569a:	e0d6      	b.n	801584a <UART_SetConfig+0x7ae>
 801569c:	2304      	movs	r3, #4
 801569e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156a2:	e0d2      	b.n	801584a <UART_SetConfig+0x7ae>
 80156a4:	2308      	movs	r3, #8
 80156a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156aa:	e0ce      	b.n	801584a <UART_SetConfig+0x7ae>
 80156ac:	2310      	movs	r3, #16
 80156ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156b2:	e0ca      	b.n	801584a <UART_SetConfig+0x7ae>
 80156b4:	2320      	movs	r3, #32
 80156b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156ba:	e0c6      	b.n	801584a <UART_SetConfig+0x7ae>
 80156bc:	2340      	movs	r3, #64	; 0x40
 80156be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156c2:	e0c2      	b.n	801584a <UART_SetConfig+0x7ae>
 80156c4:	2380      	movs	r3, #128	; 0x80
 80156c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156ca:	e0be      	b.n	801584a <UART_SetConfig+0x7ae>
 80156cc:	40011400 	.word	0x40011400
 80156d0:	58024400 	.word	0x58024400
 80156d4:	40007800 	.word	0x40007800
 80156d8:	40007c00 	.word	0x40007c00
 80156dc:	40011800 	.word	0x40011800
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	4aad      	ldr	r2, [pc, #692]	; (801599c <UART_SetConfig+0x900>)
 80156e6:	4293      	cmp	r3, r2
 80156e8:	d176      	bne.n	80157d8 <UART_SetConfig+0x73c>
 80156ea:	4bad      	ldr	r3, [pc, #692]	; (80159a0 <UART_SetConfig+0x904>)
 80156ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80156ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80156f2:	2b28      	cmp	r3, #40	; 0x28
 80156f4:	d86c      	bhi.n	80157d0 <UART_SetConfig+0x734>
 80156f6:	a201      	add	r2, pc, #4	; (adr r2, 80156fc <UART_SetConfig+0x660>)
 80156f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156fc:	080157a1 	.word	0x080157a1
 8015700:	080157d1 	.word	0x080157d1
 8015704:	080157d1 	.word	0x080157d1
 8015708:	080157d1 	.word	0x080157d1
 801570c:	080157d1 	.word	0x080157d1
 8015710:	080157d1 	.word	0x080157d1
 8015714:	080157d1 	.word	0x080157d1
 8015718:	080157d1 	.word	0x080157d1
 801571c:	080157a9 	.word	0x080157a9
 8015720:	080157d1 	.word	0x080157d1
 8015724:	080157d1 	.word	0x080157d1
 8015728:	080157d1 	.word	0x080157d1
 801572c:	080157d1 	.word	0x080157d1
 8015730:	080157d1 	.word	0x080157d1
 8015734:	080157d1 	.word	0x080157d1
 8015738:	080157d1 	.word	0x080157d1
 801573c:	080157b1 	.word	0x080157b1
 8015740:	080157d1 	.word	0x080157d1
 8015744:	080157d1 	.word	0x080157d1
 8015748:	080157d1 	.word	0x080157d1
 801574c:	080157d1 	.word	0x080157d1
 8015750:	080157d1 	.word	0x080157d1
 8015754:	080157d1 	.word	0x080157d1
 8015758:	080157d1 	.word	0x080157d1
 801575c:	080157b9 	.word	0x080157b9
 8015760:	080157d1 	.word	0x080157d1
 8015764:	080157d1 	.word	0x080157d1
 8015768:	080157d1 	.word	0x080157d1
 801576c:	080157d1 	.word	0x080157d1
 8015770:	080157d1 	.word	0x080157d1
 8015774:	080157d1 	.word	0x080157d1
 8015778:	080157d1 	.word	0x080157d1
 801577c:	080157c1 	.word	0x080157c1
 8015780:	080157d1 	.word	0x080157d1
 8015784:	080157d1 	.word	0x080157d1
 8015788:	080157d1 	.word	0x080157d1
 801578c:	080157d1 	.word	0x080157d1
 8015790:	080157d1 	.word	0x080157d1
 8015794:	080157d1 	.word	0x080157d1
 8015798:	080157d1 	.word	0x080157d1
 801579c:	080157c9 	.word	0x080157c9
 80157a0:	2301      	movs	r3, #1
 80157a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157a6:	e050      	b.n	801584a <UART_SetConfig+0x7ae>
 80157a8:	2304      	movs	r3, #4
 80157aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157ae:	e04c      	b.n	801584a <UART_SetConfig+0x7ae>
 80157b0:	2308      	movs	r3, #8
 80157b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157b6:	e048      	b.n	801584a <UART_SetConfig+0x7ae>
 80157b8:	2310      	movs	r3, #16
 80157ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157be:	e044      	b.n	801584a <UART_SetConfig+0x7ae>
 80157c0:	2320      	movs	r3, #32
 80157c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157c6:	e040      	b.n	801584a <UART_SetConfig+0x7ae>
 80157c8:	2340      	movs	r3, #64	; 0x40
 80157ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157ce:	e03c      	b.n	801584a <UART_SetConfig+0x7ae>
 80157d0:	2380      	movs	r3, #128	; 0x80
 80157d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157d6:	e038      	b.n	801584a <UART_SetConfig+0x7ae>
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	681b      	ldr	r3, [r3, #0]
 80157dc:	4a71      	ldr	r2, [pc, #452]	; (80159a4 <UART_SetConfig+0x908>)
 80157de:	4293      	cmp	r3, r2
 80157e0:	d130      	bne.n	8015844 <UART_SetConfig+0x7a8>
 80157e2:	4b6f      	ldr	r3, [pc, #444]	; (80159a0 <UART_SetConfig+0x904>)
 80157e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80157e6:	f003 0307 	and.w	r3, r3, #7
 80157ea:	2b05      	cmp	r3, #5
 80157ec:	d826      	bhi.n	801583c <UART_SetConfig+0x7a0>
 80157ee:	a201      	add	r2, pc, #4	; (adr r2, 80157f4 <UART_SetConfig+0x758>)
 80157f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157f4:	0801580d 	.word	0x0801580d
 80157f8:	08015815 	.word	0x08015815
 80157fc:	0801581d 	.word	0x0801581d
 8015800:	08015825 	.word	0x08015825
 8015804:	0801582d 	.word	0x0801582d
 8015808:	08015835 	.word	0x08015835
 801580c:	2302      	movs	r3, #2
 801580e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015812:	e01a      	b.n	801584a <UART_SetConfig+0x7ae>
 8015814:	2304      	movs	r3, #4
 8015816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801581a:	e016      	b.n	801584a <UART_SetConfig+0x7ae>
 801581c:	2308      	movs	r3, #8
 801581e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015822:	e012      	b.n	801584a <UART_SetConfig+0x7ae>
 8015824:	2310      	movs	r3, #16
 8015826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801582a:	e00e      	b.n	801584a <UART_SetConfig+0x7ae>
 801582c:	2320      	movs	r3, #32
 801582e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015832:	e00a      	b.n	801584a <UART_SetConfig+0x7ae>
 8015834:	2340      	movs	r3, #64	; 0x40
 8015836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801583a:	e006      	b.n	801584a <UART_SetConfig+0x7ae>
 801583c:	2380      	movs	r3, #128	; 0x80
 801583e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015842:	e002      	b.n	801584a <UART_SetConfig+0x7ae>
 8015844:	2380      	movs	r3, #128	; 0x80
 8015846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801584a:	697b      	ldr	r3, [r7, #20]
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	4a55      	ldr	r2, [pc, #340]	; (80159a4 <UART_SetConfig+0x908>)
 8015850:	4293      	cmp	r3, r2
 8015852:	f040 80f8 	bne.w	8015a46 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015856:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801585a:	2b20      	cmp	r3, #32
 801585c:	dc46      	bgt.n	80158ec <UART_SetConfig+0x850>
 801585e:	2b02      	cmp	r3, #2
 8015860:	db75      	blt.n	801594e <UART_SetConfig+0x8b2>
 8015862:	3b02      	subs	r3, #2
 8015864:	2b1e      	cmp	r3, #30
 8015866:	d872      	bhi.n	801594e <UART_SetConfig+0x8b2>
 8015868:	a201      	add	r2, pc, #4	; (adr r2, 8015870 <UART_SetConfig+0x7d4>)
 801586a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801586e:	bf00      	nop
 8015870:	080158f3 	.word	0x080158f3
 8015874:	0801594f 	.word	0x0801594f
 8015878:	080158fb 	.word	0x080158fb
 801587c:	0801594f 	.word	0x0801594f
 8015880:	0801594f 	.word	0x0801594f
 8015884:	0801594f 	.word	0x0801594f
 8015888:	0801590b 	.word	0x0801590b
 801588c:	0801594f 	.word	0x0801594f
 8015890:	0801594f 	.word	0x0801594f
 8015894:	0801594f 	.word	0x0801594f
 8015898:	0801594f 	.word	0x0801594f
 801589c:	0801594f 	.word	0x0801594f
 80158a0:	0801594f 	.word	0x0801594f
 80158a4:	0801594f 	.word	0x0801594f
 80158a8:	0801591b 	.word	0x0801591b
 80158ac:	0801594f 	.word	0x0801594f
 80158b0:	0801594f 	.word	0x0801594f
 80158b4:	0801594f 	.word	0x0801594f
 80158b8:	0801594f 	.word	0x0801594f
 80158bc:	0801594f 	.word	0x0801594f
 80158c0:	0801594f 	.word	0x0801594f
 80158c4:	0801594f 	.word	0x0801594f
 80158c8:	0801594f 	.word	0x0801594f
 80158cc:	0801594f 	.word	0x0801594f
 80158d0:	0801594f 	.word	0x0801594f
 80158d4:	0801594f 	.word	0x0801594f
 80158d8:	0801594f 	.word	0x0801594f
 80158dc:	0801594f 	.word	0x0801594f
 80158e0:	0801594f 	.word	0x0801594f
 80158e4:	0801594f 	.word	0x0801594f
 80158e8:	08015941 	.word	0x08015941
 80158ec:	2b40      	cmp	r3, #64	; 0x40
 80158ee:	d02a      	beq.n	8015946 <UART_SetConfig+0x8aa>
 80158f0:	e02d      	b.n	801594e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80158f2:	f7fb f933 	bl	8010b5c <HAL_RCCEx_GetD3PCLK1Freq>
 80158f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80158f8:	e02f      	b.n	801595a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80158fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80158fe:	4618      	mov	r0, r3
 8015900:	f7fb f942 	bl	8010b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015906:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015908:	e027      	b.n	801595a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801590a:	f107 0318 	add.w	r3, r7, #24
 801590e:	4618      	mov	r0, r3
 8015910:	f7fb fa8e 	bl	8010e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015914:	69fb      	ldr	r3, [r7, #28]
 8015916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015918:	e01f      	b.n	801595a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801591a:	4b21      	ldr	r3, [pc, #132]	; (80159a0 <UART_SetConfig+0x904>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	f003 0320 	and.w	r3, r3, #32
 8015922:	2b00      	cmp	r3, #0
 8015924:	d009      	beq.n	801593a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015926:	4b1e      	ldr	r3, [pc, #120]	; (80159a0 <UART_SetConfig+0x904>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	08db      	lsrs	r3, r3, #3
 801592c:	f003 0303 	and.w	r3, r3, #3
 8015930:	4a1d      	ldr	r2, [pc, #116]	; (80159a8 <UART_SetConfig+0x90c>)
 8015932:	fa22 f303 	lsr.w	r3, r2, r3
 8015936:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015938:	e00f      	b.n	801595a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801593a:	4b1b      	ldr	r3, [pc, #108]	; (80159a8 <UART_SetConfig+0x90c>)
 801593c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801593e:	e00c      	b.n	801595a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015940:	4b1a      	ldr	r3, [pc, #104]	; (80159ac <UART_SetConfig+0x910>)
 8015942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015944:	e009      	b.n	801595a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801594a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801594c:	e005      	b.n	801595a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801594e:	2300      	movs	r3, #0
 8015950:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015952:	2301      	movs	r3, #1
 8015954:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015958:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801595a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801595c:	2b00      	cmp	r3, #0
 801595e:	f000 81ee 	beq.w	8015d3e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015962:	697b      	ldr	r3, [r7, #20]
 8015964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015966:	4a12      	ldr	r2, [pc, #72]	; (80159b0 <UART_SetConfig+0x914>)
 8015968:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801596c:	461a      	mov	r2, r3
 801596e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015970:	fbb3 f3f2 	udiv	r3, r3, r2
 8015974:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	685a      	ldr	r2, [r3, #4]
 801597a:	4613      	mov	r3, r2
 801597c:	005b      	lsls	r3, r3, #1
 801597e:	4413      	add	r3, r2
 8015980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015982:	429a      	cmp	r2, r3
 8015984:	d305      	bcc.n	8015992 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	685b      	ldr	r3, [r3, #4]
 801598a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801598c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801598e:	429a      	cmp	r2, r3
 8015990:	d910      	bls.n	80159b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8015992:	2301      	movs	r3, #1
 8015994:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015998:	e1d1      	b.n	8015d3e <UART_SetConfig+0xca2>
 801599a:	bf00      	nop
 801599c:	40011c00 	.word	0x40011c00
 80159a0:	58024400 	.word	0x58024400
 80159a4:	58000c00 	.word	0x58000c00
 80159a8:	03d09000 	.word	0x03d09000
 80159ac:	003d0900 	.word	0x003d0900
 80159b0:	08018418 	.word	0x08018418
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80159b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159b6:	2200      	movs	r2, #0
 80159b8:	60bb      	str	r3, [r7, #8]
 80159ba:	60fa      	str	r2, [r7, #12]
 80159bc:	697b      	ldr	r3, [r7, #20]
 80159be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159c0:	4ac0      	ldr	r2, [pc, #768]	; (8015cc4 <UART_SetConfig+0xc28>)
 80159c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80159c6:	b29b      	uxth	r3, r3
 80159c8:	2200      	movs	r2, #0
 80159ca:	603b      	str	r3, [r7, #0]
 80159cc:	607a      	str	r2, [r7, #4]
 80159ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80159d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80159d6:	f7ea fc9b 	bl	8000310 <__aeabi_uldivmod>
 80159da:	4602      	mov	r2, r0
 80159dc:	460b      	mov	r3, r1
 80159de:	4610      	mov	r0, r2
 80159e0:	4619      	mov	r1, r3
 80159e2:	f04f 0200 	mov.w	r2, #0
 80159e6:	f04f 0300 	mov.w	r3, #0
 80159ea:	020b      	lsls	r3, r1, #8
 80159ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80159f0:	0202      	lsls	r2, r0, #8
 80159f2:	6979      	ldr	r1, [r7, #20]
 80159f4:	6849      	ldr	r1, [r1, #4]
 80159f6:	0849      	lsrs	r1, r1, #1
 80159f8:	2000      	movs	r0, #0
 80159fa:	460c      	mov	r4, r1
 80159fc:	4605      	mov	r5, r0
 80159fe:	eb12 0804 	adds.w	r8, r2, r4
 8015a02:	eb43 0905 	adc.w	r9, r3, r5
 8015a06:	697b      	ldr	r3, [r7, #20]
 8015a08:	685b      	ldr	r3, [r3, #4]
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	469a      	mov	sl, r3
 8015a0e:	4693      	mov	fp, r2
 8015a10:	4652      	mov	r2, sl
 8015a12:	465b      	mov	r3, fp
 8015a14:	4640      	mov	r0, r8
 8015a16:	4649      	mov	r1, r9
 8015a18:	f7ea fc7a 	bl	8000310 <__aeabi_uldivmod>
 8015a1c:	4602      	mov	r2, r0
 8015a1e:	460b      	mov	r3, r1
 8015a20:	4613      	mov	r3, r2
 8015a22:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015a2a:	d308      	bcc.n	8015a3e <UART_SetConfig+0x9a2>
 8015a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015a32:	d204      	bcs.n	8015a3e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a3a:	60da      	str	r2, [r3, #12]
 8015a3c:	e17f      	b.n	8015d3e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8015a3e:	2301      	movs	r3, #1
 8015a40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015a44:	e17b      	b.n	8015d3e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015a46:	697b      	ldr	r3, [r7, #20]
 8015a48:	69db      	ldr	r3, [r3, #28]
 8015a4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015a4e:	f040 80bd 	bne.w	8015bcc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8015a52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015a56:	2b20      	cmp	r3, #32
 8015a58:	dc48      	bgt.n	8015aec <UART_SetConfig+0xa50>
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	db7b      	blt.n	8015b56 <UART_SetConfig+0xaba>
 8015a5e:	2b20      	cmp	r3, #32
 8015a60:	d879      	bhi.n	8015b56 <UART_SetConfig+0xaba>
 8015a62:	a201      	add	r2, pc, #4	; (adr r2, 8015a68 <UART_SetConfig+0x9cc>)
 8015a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a68:	08015af3 	.word	0x08015af3
 8015a6c:	08015afb 	.word	0x08015afb
 8015a70:	08015b57 	.word	0x08015b57
 8015a74:	08015b57 	.word	0x08015b57
 8015a78:	08015b03 	.word	0x08015b03
 8015a7c:	08015b57 	.word	0x08015b57
 8015a80:	08015b57 	.word	0x08015b57
 8015a84:	08015b57 	.word	0x08015b57
 8015a88:	08015b13 	.word	0x08015b13
 8015a8c:	08015b57 	.word	0x08015b57
 8015a90:	08015b57 	.word	0x08015b57
 8015a94:	08015b57 	.word	0x08015b57
 8015a98:	08015b57 	.word	0x08015b57
 8015a9c:	08015b57 	.word	0x08015b57
 8015aa0:	08015b57 	.word	0x08015b57
 8015aa4:	08015b57 	.word	0x08015b57
 8015aa8:	08015b23 	.word	0x08015b23
 8015aac:	08015b57 	.word	0x08015b57
 8015ab0:	08015b57 	.word	0x08015b57
 8015ab4:	08015b57 	.word	0x08015b57
 8015ab8:	08015b57 	.word	0x08015b57
 8015abc:	08015b57 	.word	0x08015b57
 8015ac0:	08015b57 	.word	0x08015b57
 8015ac4:	08015b57 	.word	0x08015b57
 8015ac8:	08015b57 	.word	0x08015b57
 8015acc:	08015b57 	.word	0x08015b57
 8015ad0:	08015b57 	.word	0x08015b57
 8015ad4:	08015b57 	.word	0x08015b57
 8015ad8:	08015b57 	.word	0x08015b57
 8015adc:	08015b57 	.word	0x08015b57
 8015ae0:	08015b57 	.word	0x08015b57
 8015ae4:	08015b57 	.word	0x08015b57
 8015ae8:	08015b49 	.word	0x08015b49
 8015aec:	2b40      	cmp	r3, #64	; 0x40
 8015aee:	d02e      	beq.n	8015b4e <UART_SetConfig+0xab2>
 8015af0:	e031      	b.n	8015b56 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015af2:	f7f9 fce7 	bl	800f4c4 <HAL_RCC_GetPCLK1Freq>
 8015af6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015af8:	e033      	b.n	8015b62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015afa:	f7f9 fcf9 	bl	800f4f0 <HAL_RCC_GetPCLK2Freq>
 8015afe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015b00:	e02f      	b.n	8015b62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b06:	4618      	mov	r0, r3
 8015b08:	f7fb f83e 	bl	8010b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b10:	e027      	b.n	8015b62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015b12:	f107 0318 	add.w	r3, r7, #24
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7fb f98a 	bl	8010e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015b1c:	69fb      	ldr	r3, [r7, #28]
 8015b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b20:	e01f      	b.n	8015b62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015b22:	4b69      	ldr	r3, [pc, #420]	; (8015cc8 <UART_SetConfig+0xc2c>)
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	f003 0320 	and.w	r3, r3, #32
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d009      	beq.n	8015b42 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015b2e:	4b66      	ldr	r3, [pc, #408]	; (8015cc8 <UART_SetConfig+0xc2c>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	08db      	lsrs	r3, r3, #3
 8015b34:	f003 0303 	and.w	r3, r3, #3
 8015b38:	4a64      	ldr	r2, [pc, #400]	; (8015ccc <UART_SetConfig+0xc30>)
 8015b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8015b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015b40:	e00f      	b.n	8015b62 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8015b42:	4b62      	ldr	r3, [pc, #392]	; (8015ccc <UART_SetConfig+0xc30>)
 8015b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b46:	e00c      	b.n	8015b62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015b48:	4b61      	ldr	r3, [pc, #388]	; (8015cd0 <UART_SetConfig+0xc34>)
 8015b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b4c:	e009      	b.n	8015b62 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b54:	e005      	b.n	8015b62 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8015b56:	2300      	movs	r3, #0
 8015b58:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015b60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	f000 80ea 	beq.w	8015d3e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b6e:	4a55      	ldr	r2, [pc, #340]	; (8015cc4 <UART_SetConfig+0xc28>)
 8015b70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b74:	461a      	mov	r2, r3
 8015b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b78:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b7c:	005a      	lsls	r2, r3, #1
 8015b7e:	697b      	ldr	r3, [r7, #20]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	085b      	lsrs	r3, r3, #1
 8015b84:	441a      	add	r2, r3
 8015b86:	697b      	ldr	r3, [r7, #20]
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8015b8e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b92:	2b0f      	cmp	r3, #15
 8015b94:	d916      	bls.n	8015bc4 <UART_SetConfig+0xb28>
 8015b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b9c:	d212      	bcs.n	8015bc4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ba0:	b29b      	uxth	r3, r3
 8015ba2:	f023 030f 	bic.w	r3, r3, #15
 8015ba6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015baa:	085b      	lsrs	r3, r3, #1
 8015bac:	b29b      	uxth	r3, r3
 8015bae:	f003 0307 	and.w	r3, r3, #7
 8015bb2:	b29a      	uxth	r2, r3
 8015bb4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015bb6:	4313      	orrs	r3, r2
 8015bb8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015bc0:	60da      	str	r2, [r3, #12]
 8015bc2:	e0bc      	b.n	8015d3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015bca:	e0b8      	b.n	8015d3e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015bcc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015bd0:	2b20      	cmp	r3, #32
 8015bd2:	dc4b      	bgt.n	8015c6c <UART_SetConfig+0xbd0>
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	f2c0 8087 	blt.w	8015ce8 <UART_SetConfig+0xc4c>
 8015bda:	2b20      	cmp	r3, #32
 8015bdc:	f200 8084 	bhi.w	8015ce8 <UART_SetConfig+0xc4c>
 8015be0:	a201      	add	r2, pc, #4	; (adr r2, 8015be8 <UART_SetConfig+0xb4c>)
 8015be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015be6:	bf00      	nop
 8015be8:	08015c73 	.word	0x08015c73
 8015bec:	08015c7b 	.word	0x08015c7b
 8015bf0:	08015ce9 	.word	0x08015ce9
 8015bf4:	08015ce9 	.word	0x08015ce9
 8015bf8:	08015c83 	.word	0x08015c83
 8015bfc:	08015ce9 	.word	0x08015ce9
 8015c00:	08015ce9 	.word	0x08015ce9
 8015c04:	08015ce9 	.word	0x08015ce9
 8015c08:	08015c93 	.word	0x08015c93
 8015c0c:	08015ce9 	.word	0x08015ce9
 8015c10:	08015ce9 	.word	0x08015ce9
 8015c14:	08015ce9 	.word	0x08015ce9
 8015c18:	08015ce9 	.word	0x08015ce9
 8015c1c:	08015ce9 	.word	0x08015ce9
 8015c20:	08015ce9 	.word	0x08015ce9
 8015c24:	08015ce9 	.word	0x08015ce9
 8015c28:	08015ca3 	.word	0x08015ca3
 8015c2c:	08015ce9 	.word	0x08015ce9
 8015c30:	08015ce9 	.word	0x08015ce9
 8015c34:	08015ce9 	.word	0x08015ce9
 8015c38:	08015ce9 	.word	0x08015ce9
 8015c3c:	08015ce9 	.word	0x08015ce9
 8015c40:	08015ce9 	.word	0x08015ce9
 8015c44:	08015ce9 	.word	0x08015ce9
 8015c48:	08015ce9 	.word	0x08015ce9
 8015c4c:	08015ce9 	.word	0x08015ce9
 8015c50:	08015ce9 	.word	0x08015ce9
 8015c54:	08015ce9 	.word	0x08015ce9
 8015c58:	08015ce9 	.word	0x08015ce9
 8015c5c:	08015ce9 	.word	0x08015ce9
 8015c60:	08015ce9 	.word	0x08015ce9
 8015c64:	08015ce9 	.word	0x08015ce9
 8015c68:	08015cdb 	.word	0x08015cdb
 8015c6c:	2b40      	cmp	r3, #64	; 0x40
 8015c6e:	d037      	beq.n	8015ce0 <UART_SetConfig+0xc44>
 8015c70:	e03a      	b.n	8015ce8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015c72:	f7f9 fc27 	bl	800f4c4 <HAL_RCC_GetPCLK1Freq>
 8015c76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015c78:	e03c      	b.n	8015cf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015c7a:	f7f9 fc39 	bl	800f4f0 <HAL_RCC_GetPCLK2Freq>
 8015c7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015c80:	e038      	b.n	8015cf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7fa ff7e 	bl	8010b88 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015c90:	e030      	b.n	8015cf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015c92:	f107 0318 	add.w	r3, r7, #24
 8015c96:	4618      	mov	r0, r3
 8015c98:	f7fb f8ca 	bl	8010e30 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015c9c:	69fb      	ldr	r3, [r7, #28]
 8015c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ca0:	e028      	b.n	8015cf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015ca2:	4b09      	ldr	r3, [pc, #36]	; (8015cc8 <UART_SetConfig+0xc2c>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	f003 0320 	and.w	r3, r3, #32
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d012      	beq.n	8015cd4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015cae:	4b06      	ldr	r3, [pc, #24]	; (8015cc8 <UART_SetConfig+0xc2c>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	08db      	lsrs	r3, r3, #3
 8015cb4:	f003 0303 	and.w	r3, r3, #3
 8015cb8:	4a04      	ldr	r2, [pc, #16]	; (8015ccc <UART_SetConfig+0xc30>)
 8015cba:	fa22 f303 	lsr.w	r3, r2, r3
 8015cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015cc0:	e018      	b.n	8015cf4 <UART_SetConfig+0xc58>
 8015cc2:	bf00      	nop
 8015cc4:	08018418 	.word	0x08018418
 8015cc8:	58024400 	.word	0x58024400
 8015ccc:	03d09000 	.word	0x03d09000
 8015cd0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8015cd4:	4b24      	ldr	r3, [pc, #144]	; (8015d68 <UART_SetConfig+0xccc>)
 8015cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015cd8:	e00c      	b.n	8015cf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015cda:	4b24      	ldr	r3, [pc, #144]	; (8015d6c <UART_SetConfig+0xcd0>)
 8015cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015cde:	e009      	b.n	8015cf4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015ce0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ce6:	e005      	b.n	8015cf4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015cec:	2301      	movs	r3, #1
 8015cee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015cf2:	bf00      	nop
    }

    if (pclk != 0U)
 8015cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d021      	beq.n	8015d3e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015cfa:	697b      	ldr	r3, [r7, #20]
 8015cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cfe:	4a1c      	ldr	r2, [pc, #112]	; (8015d70 <UART_SetConfig+0xcd4>)
 8015d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d04:	461a      	mov	r2, r3
 8015d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d08:	fbb3 f2f2 	udiv	r2, r3, r2
 8015d0c:	697b      	ldr	r3, [r7, #20]
 8015d0e:	685b      	ldr	r3, [r3, #4]
 8015d10:	085b      	lsrs	r3, r3, #1
 8015d12:	441a      	add	r2, r3
 8015d14:	697b      	ldr	r3, [r7, #20]
 8015d16:	685b      	ldr	r3, [r3, #4]
 8015d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d1c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d20:	2b0f      	cmp	r3, #15
 8015d22:	d909      	bls.n	8015d38 <UART_SetConfig+0xc9c>
 8015d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d2a:	d205      	bcs.n	8015d38 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d2e:	b29a      	uxth	r2, r3
 8015d30:	697b      	ldr	r3, [r7, #20]
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	60da      	str	r2, [r3, #12]
 8015d36:	e002      	b.n	8015d3e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8015d38:	2301      	movs	r3, #1
 8015d3a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015d3e:	697b      	ldr	r3, [r7, #20]
 8015d40:	2201      	movs	r2, #1
 8015d42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	2201      	movs	r2, #1
 8015d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015d4e:	697b      	ldr	r3, [r7, #20]
 8015d50:	2200      	movs	r2, #0
 8015d52:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8015d54:	697b      	ldr	r3, [r7, #20]
 8015d56:	2200      	movs	r2, #0
 8015d58:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8015d5a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015d5e:	4618      	mov	r0, r3
 8015d60:	3748      	adds	r7, #72	; 0x48
 8015d62:	46bd      	mov	sp, r7
 8015d64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015d68:	03d09000 	.word	0x03d09000
 8015d6c:	003d0900 	.word	0x003d0900
 8015d70:	08018418 	.word	0x08018418

08015d74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015d74:	b480      	push	{r7}
 8015d76:	b083      	sub	sp, #12
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d80:	f003 0301 	and.w	r3, r3, #1
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d00a      	beq.n	8015d9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	685b      	ldr	r3, [r3, #4]
 8015d8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	430a      	orrs	r2, r1
 8015d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015da2:	f003 0302 	and.w	r3, r3, #2
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d00a      	beq.n	8015dc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	685b      	ldr	r3, [r3, #4]
 8015db0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	430a      	orrs	r2, r1
 8015dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015dc4:	f003 0304 	and.w	r3, r3, #4
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d00a      	beq.n	8015de2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	685b      	ldr	r3, [r3, #4]
 8015dd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	430a      	orrs	r2, r1
 8015de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015de6:	f003 0308 	and.w	r3, r3, #8
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d00a      	beq.n	8015e04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	685b      	ldr	r3, [r3, #4]
 8015df4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	430a      	orrs	r2, r1
 8015e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e08:	f003 0310 	and.w	r3, r3, #16
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d00a      	beq.n	8015e26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	689b      	ldr	r3, [r3, #8]
 8015e16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	681b      	ldr	r3, [r3, #0]
 8015e22:	430a      	orrs	r2, r1
 8015e24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e2a:	f003 0320 	and.w	r3, r3, #32
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d00a      	beq.n	8015e48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	689b      	ldr	r3, [r3, #8]
 8015e38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	430a      	orrs	r2, r1
 8015e46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d01a      	beq.n	8015e8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	685b      	ldr	r3, [r3, #4]
 8015e5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	430a      	orrs	r2, r1
 8015e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015e72:	d10a      	bne.n	8015e8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	685b      	ldr	r3, [r3, #4]
 8015e7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	430a      	orrs	r2, r1
 8015e88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d00a      	beq.n	8015eac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	685b      	ldr	r3, [r3, #4]
 8015e9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	430a      	orrs	r2, r1
 8015eaa:	605a      	str	r2, [r3, #4]
  }
}
 8015eac:	bf00      	nop
 8015eae:	370c      	adds	r7, #12
 8015eb0:	46bd      	mov	sp, r7
 8015eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb6:	4770      	bx	lr

08015eb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015eb8:	b580      	push	{r7, lr}
 8015eba:	b086      	sub	sp, #24
 8015ebc:	af02      	add	r7, sp, #8
 8015ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	2200      	movs	r2, #0
 8015ec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015ec8:	f7f1 fb32 	bl	8007530 <HAL_GetTick>
 8015ecc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	f003 0308 	and.w	r3, r3, #8
 8015ed8:	2b08      	cmp	r3, #8
 8015eda:	d10e      	bne.n	8015efa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015edc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015ee0:	9300      	str	r3, [sp, #0]
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	2200      	movs	r2, #0
 8015ee6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f000 f82f 	bl	8015f4e <UART_WaitOnFlagUntilTimeout>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d001      	beq.n	8015efa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015ef6:	2303      	movs	r3, #3
 8015ef8:	e025      	b.n	8015f46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	f003 0304 	and.w	r3, r3, #4
 8015f04:	2b04      	cmp	r3, #4
 8015f06:	d10e      	bne.n	8015f26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015f0c:	9300      	str	r3, [sp, #0]
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	2200      	movs	r2, #0
 8015f12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f000 f819 	bl	8015f4e <UART_WaitOnFlagUntilTimeout>
 8015f1c:	4603      	mov	r3, r0
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d001      	beq.n	8015f26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015f22:	2303      	movs	r3, #3
 8015f24:	e00f      	b.n	8015f46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	2220      	movs	r2, #32
 8015f2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	2220      	movs	r2, #32
 8015f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	2200      	movs	r2, #0
 8015f3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015f44:	2300      	movs	r3, #0
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3710      	adds	r7, #16
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}

08015f4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015f4e:	b580      	push	{r7, lr}
 8015f50:	b09c      	sub	sp, #112	; 0x70
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	60f8      	str	r0, [r7, #12]
 8015f56:	60b9      	str	r1, [r7, #8]
 8015f58:	603b      	str	r3, [r7, #0]
 8015f5a:	4613      	mov	r3, r2
 8015f5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015f5e:	e0a9      	b.n	80160b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f66:	f000 80a5 	beq.w	80160b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015f6a:	f7f1 fae1 	bl	8007530 <HAL_GetTick>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	1ad3      	subs	r3, r2, r3
 8015f74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015f76:	429a      	cmp	r2, r3
 8015f78:	d302      	bcc.n	8015f80 <UART_WaitOnFlagUntilTimeout+0x32>
 8015f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d140      	bne.n	8016002 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f88:	e853 3f00 	ldrex	r3, [r3]
 8015f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015f8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015f94:	667b      	str	r3, [r7, #100]	; 0x64
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	461a      	mov	r2, r3
 8015f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015fa0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fa2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015fa4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015fa6:	e841 2300 	strex	r3, r2, [r1]
 8015faa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d1e6      	bne.n	8015f80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	681b      	ldr	r3, [r3, #0]
 8015fb6:	3308      	adds	r3, #8
 8015fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fbc:	e853 3f00 	ldrex	r3, [r3]
 8015fc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fc4:	f023 0301 	bic.w	r3, r3, #1
 8015fc8:	663b      	str	r3, [r7, #96]	; 0x60
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	3308      	adds	r3, #8
 8015fd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015fd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8015fd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015fd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015fda:	e841 2300 	strex	r3, r2, [r1]
 8015fde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d1e5      	bne.n	8015fb2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	2220      	movs	r2, #32
 8015fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	2220      	movs	r2, #32
 8015ff2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	2200      	movs	r2, #0
 8015ffa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8015ffe:	2303      	movs	r3, #3
 8016000:	e069      	b.n	80160d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	f003 0304 	and.w	r3, r3, #4
 801600c:	2b00      	cmp	r3, #0
 801600e:	d051      	beq.n	80160b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	69db      	ldr	r3, [r3, #28]
 8016016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801601a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801601e:	d149      	bne.n	80160b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	681b      	ldr	r3, [r3, #0]
 8016024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016028:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016032:	e853 3f00 	ldrex	r3, [r3]
 8016036:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801603a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801603e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	681b      	ldr	r3, [r3, #0]
 8016044:	461a      	mov	r2, r3
 8016046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016048:	637b      	str	r3, [r7, #52]	; 0x34
 801604a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801604c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801604e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016050:	e841 2300 	strex	r3, r2, [r1]
 8016054:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8016056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016058:	2b00      	cmp	r3, #0
 801605a:	d1e6      	bne.n	801602a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	681b      	ldr	r3, [r3, #0]
 8016060:	3308      	adds	r3, #8
 8016062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016064:	697b      	ldr	r3, [r7, #20]
 8016066:	e853 3f00 	ldrex	r3, [r3]
 801606a:	613b      	str	r3, [r7, #16]
   return(result);
 801606c:	693b      	ldr	r3, [r7, #16]
 801606e:	f023 0301 	bic.w	r3, r3, #1
 8016072:	66bb      	str	r3, [r7, #104]	; 0x68
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	3308      	adds	r3, #8
 801607a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801607c:	623a      	str	r2, [r7, #32]
 801607e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016080:	69f9      	ldr	r1, [r7, #28]
 8016082:	6a3a      	ldr	r2, [r7, #32]
 8016084:	e841 2300 	strex	r3, r2, [r1]
 8016088:	61bb      	str	r3, [r7, #24]
   return(result);
 801608a:	69bb      	ldr	r3, [r7, #24]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d1e5      	bne.n	801605c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	2220      	movs	r2, #32
 8016094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8016098:	68fb      	ldr	r3, [r7, #12]
 801609a:	2220      	movs	r2, #32
 801609c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80160a0:	68fb      	ldr	r3, [r7, #12]
 80160a2:	2220      	movs	r2, #32
 80160a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	2200      	movs	r2, #0
 80160ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80160b0:	2303      	movs	r3, #3
 80160b2:	e010      	b.n	80160d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	69da      	ldr	r2, [r3, #28]
 80160ba:	68bb      	ldr	r3, [r7, #8]
 80160bc:	4013      	ands	r3, r2
 80160be:	68ba      	ldr	r2, [r7, #8]
 80160c0:	429a      	cmp	r2, r3
 80160c2:	bf0c      	ite	eq
 80160c4:	2301      	moveq	r3, #1
 80160c6:	2300      	movne	r3, #0
 80160c8:	b2db      	uxtb	r3, r3
 80160ca:	461a      	mov	r2, r3
 80160cc:	79fb      	ldrb	r3, [r7, #7]
 80160ce:	429a      	cmp	r2, r3
 80160d0:	f43f af46 	beq.w	8015f60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80160d4:	2300      	movs	r3, #0
}
 80160d6:	4618      	mov	r0, r3
 80160d8:	3770      	adds	r7, #112	; 0x70
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}
	...

080160e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80160e0:	b480      	push	{r7}
 80160e2:	b0a3      	sub	sp, #140	; 0x8c
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	60f8      	str	r0, [r7, #12]
 80160e8:	60b9      	str	r1, [r7, #8]
 80160ea:	4613      	mov	r3, r2
 80160ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	68ba      	ldr	r2, [r7, #8]
 80160f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	88fa      	ldrh	r2, [r7, #6]
 80160f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80160fc:	68fb      	ldr	r3, [r7, #12]
 80160fe:	88fa      	ldrh	r2, [r7, #6]
 8016100:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	2200      	movs	r2, #0
 8016108:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	689b      	ldr	r3, [r3, #8]
 801610e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016112:	d10e      	bne.n	8016132 <UART_Start_Receive_IT+0x52>
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	691b      	ldr	r3, [r3, #16]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d105      	bne.n	8016128 <UART_Start_Receive_IT+0x48>
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8016122:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016126:	e02d      	b.n	8016184 <UART_Start_Receive_IT+0xa4>
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	22ff      	movs	r2, #255	; 0xff
 801612c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016130:	e028      	b.n	8016184 <UART_Start_Receive_IT+0xa4>
 8016132:	68fb      	ldr	r3, [r7, #12]
 8016134:	689b      	ldr	r3, [r3, #8]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d10d      	bne.n	8016156 <UART_Start_Receive_IT+0x76>
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	691b      	ldr	r3, [r3, #16]
 801613e:	2b00      	cmp	r3, #0
 8016140:	d104      	bne.n	801614c <UART_Start_Receive_IT+0x6c>
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	22ff      	movs	r2, #255	; 0xff
 8016146:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801614a:	e01b      	b.n	8016184 <UART_Start_Receive_IT+0xa4>
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	227f      	movs	r2, #127	; 0x7f
 8016150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016154:	e016      	b.n	8016184 <UART_Start_Receive_IT+0xa4>
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	689b      	ldr	r3, [r3, #8]
 801615a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801615e:	d10d      	bne.n	801617c <UART_Start_Receive_IT+0x9c>
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	691b      	ldr	r3, [r3, #16]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d104      	bne.n	8016172 <UART_Start_Receive_IT+0x92>
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	227f      	movs	r2, #127	; 0x7f
 801616c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016170:	e008      	b.n	8016184 <UART_Start_Receive_IT+0xa4>
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	223f      	movs	r2, #63	; 0x3f
 8016176:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801617a:	e003      	b.n	8016184 <UART_Start_Receive_IT+0xa4>
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	2200      	movs	r2, #0
 8016180:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	2200      	movs	r2, #0
 8016188:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	2222      	movs	r2, #34	; 0x22
 8016190:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	3308      	adds	r3, #8
 801619a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801619c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801619e:	e853 3f00 	ldrex	r3, [r3]
 80161a2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80161a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161a6:	f043 0301 	orr.w	r3, r3, #1
 80161aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	3308      	adds	r3, #8
 80161b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80161b8:	673a      	str	r2, [r7, #112]	; 0x70
 80161ba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161bc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80161be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80161c0:	e841 2300 	strex	r3, r2, [r1]
 80161c4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80161c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d1e3      	bne.n	8016194 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80161d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80161d4:	d153      	bne.n	801627e <UART_Start_Receive_IT+0x19e>
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80161dc:	88fa      	ldrh	r2, [r7, #6]
 80161de:	429a      	cmp	r2, r3
 80161e0:	d34d      	bcc.n	801627e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	689b      	ldr	r3, [r3, #8]
 80161e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80161ea:	d107      	bne.n	80161fc <UART_Start_Receive_IT+0x11c>
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	691b      	ldr	r3, [r3, #16]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d103      	bne.n	80161fc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	4a4b      	ldr	r2, [pc, #300]	; (8016324 <UART_Start_Receive_IT+0x244>)
 80161f8:	671a      	str	r2, [r3, #112]	; 0x70
 80161fa:	e002      	b.n	8016202 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	4a4a      	ldr	r2, [pc, #296]	; (8016328 <UART_Start_Receive_IT+0x248>)
 8016200:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	2200      	movs	r2, #0
 8016206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	691b      	ldr	r3, [r3, #16]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d01a      	beq.n	8016248 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016212:	68fb      	ldr	r3, [r7, #12]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801621a:	e853 3f00 	ldrex	r3, [r3]
 801621e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016226:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	461a      	mov	r2, r3
 8016230:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016234:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016236:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016238:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801623a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801623c:	e841 2300 	strex	r3, r2, [r1]
 8016240:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8016242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016244:	2b00      	cmp	r3, #0
 8016246:	d1e4      	bne.n	8016212 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	3308      	adds	r3, #8
 801624e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016252:	e853 3f00 	ldrex	r3, [r3]
 8016256:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801625a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801625e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	3308      	adds	r3, #8
 8016266:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016268:	64ba      	str	r2, [r7, #72]	; 0x48
 801626a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801626c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801626e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016270:	e841 2300 	strex	r3, r2, [r1]
 8016274:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8016276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016278:	2b00      	cmp	r3, #0
 801627a:	d1e5      	bne.n	8016248 <UART_Start_Receive_IT+0x168>
 801627c:	e04a      	b.n	8016314 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801627e:	68fb      	ldr	r3, [r7, #12]
 8016280:	689b      	ldr	r3, [r3, #8]
 8016282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016286:	d107      	bne.n	8016298 <UART_Start_Receive_IT+0x1b8>
 8016288:	68fb      	ldr	r3, [r7, #12]
 801628a:	691b      	ldr	r3, [r3, #16]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d103      	bne.n	8016298 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	4a26      	ldr	r2, [pc, #152]	; (801632c <UART_Start_Receive_IT+0x24c>)
 8016294:	671a      	str	r2, [r3, #112]	; 0x70
 8016296:	e002      	b.n	801629e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	4a25      	ldr	r2, [pc, #148]	; (8016330 <UART_Start_Receive_IT+0x250>)
 801629c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	2200      	movs	r2, #0
 80162a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80162a6:	68fb      	ldr	r3, [r7, #12]
 80162a8:	691b      	ldr	r3, [r3, #16]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d019      	beq.n	80162e2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80162ae:	68fb      	ldr	r3, [r7, #12]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b6:	e853 3f00 	ldrex	r3, [r3]
 80162ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80162bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80162c2:	677b      	str	r3, [r7, #116]	; 0x74
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	681b      	ldr	r3, [r3, #0]
 80162c8:	461a      	mov	r2, r3
 80162ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80162cc:	637b      	str	r3, [r7, #52]	; 0x34
 80162ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80162d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80162d4:	e841 2300 	strex	r3, r2, [r1]
 80162d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80162da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d1e6      	bne.n	80162ae <UART_Start_Receive_IT+0x1ce>
 80162e0:	e018      	b.n	8016314 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80162e2:	68fb      	ldr	r3, [r7, #12]
 80162e4:	681b      	ldr	r3, [r3, #0]
 80162e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162e8:	697b      	ldr	r3, [r7, #20]
 80162ea:	e853 3f00 	ldrex	r3, [r3]
 80162ee:	613b      	str	r3, [r7, #16]
   return(result);
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	f043 0320 	orr.w	r3, r3, #32
 80162f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	461a      	mov	r2, r3
 80162fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016300:	623b      	str	r3, [r7, #32]
 8016302:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016304:	69f9      	ldr	r1, [r7, #28]
 8016306:	6a3a      	ldr	r2, [r7, #32]
 8016308:	e841 2300 	strex	r3, r2, [r1]
 801630c:	61bb      	str	r3, [r7, #24]
   return(result);
 801630e:	69bb      	ldr	r3, [r7, #24]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d1e6      	bne.n	80162e2 <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 8016314:	2300      	movs	r3, #0
}
 8016316:	4618      	mov	r0, r3
 8016318:	378c      	adds	r7, #140	; 0x8c
 801631a:	46bd      	mov	sp, r7
 801631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016320:	4770      	bx	lr
 8016322:	bf00      	nop
 8016324:	08016d81 	.word	0x08016d81
 8016328:	08016a89 	.word	0x08016a89
 801632c:	08016927 	.word	0x08016927
 8016330:	080167c7 	.word	0x080167c7

08016334 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8016334:	b480      	push	{r7}
 8016336:	b095      	sub	sp, #84	; 0x54
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016344:	e853 3f00 	ldrex	r3, [r3]
 8016348:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801634c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016350:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	461a      	mov	r2, r3
 8016358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801635a:	643b      	str	r3, [r7, #64]	; 0x40
 801635c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801635e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016360:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016362:	e841 2300 	strex	r3, r2, [r1]
 8016366:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801636a:	2b00      	cmp	r3, #0
 801636c:	d1e6      	bne.n	801633c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	3308      	adds	r3, #8
 8016374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016376:	6a3b      	ldr	r3, [r7, #32]
 8016378:	e853 3f00 	ldrex	r3, [r3]
 801637c:	61fb      	str	r3, [r7, #28]
   return(result);
 801637e:	69fa      	ldr	r2, [r7, #28]
 8016380:	4b1e      	ldr	r3, [pc, #120]	; (80163fc <UART_EndRxTransfer+0xc8>)
 8016382:	4013      	ands	r3, r2
 8016384:	64bb      	str	r3, [r7, #72]	; 0x48
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	3308      	adds	r3, #8
 801638c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801638e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016390:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016396:	e841 2300 	strex	r3, r2, [r1]
 801639a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d1e5      	bne.n	801636e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163a6:	2b01      	cmp	r3, #1
 80163a8:	d118      	bne.n	80163dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163b0:	68fb      	ldr	r3, [r7, #12]
 80163b2:	e853 3f00 	ldrex	r3, [r3]
 80163b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80163b8:	68bb      	ldr	r3, [r7, #8]
 80163ba:	f023 0310 	bic.w	r3, r3, #16
 80163be:	647b      	str	r3, [r7, #68]	; 0x44
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	681b      	ldr	r3, [r3, #0]
 80163c4:	461a      	mov	r2, r3
 80163c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163c8:	61bb      	str	r3, [r7, #24]
 80163ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163cc:	6979      	ldr	r1, [r7, #20]
 80163ce:	69ba      	ldr	r2, [r7, #24]
 80163d0:	e841 2300 	strex	r3, r2, [r1]
 80163d4:	613b      	str	r3, [r7, #16]
   return(result);
 80163d6:	693b      	ldr	r3, [r7, #16]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d1e6      	bne.n	80163aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	2220      	movs	r2, #32
 80163e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2200      	movs	r2, #0
 80163e8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	2200      	movs	r2, #0
 80163ee:	671a      	str	r2, [r3, #112]	; 0x70
}
 80163f0:	bf00      	nop
 80163f2:	3754      	adds	r7, #84	; 0x54
 80163f4:	46bd      	mov	sp, r7
 80163f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163fa:	4770      	bx	lr
 80163fc:	effffffe 	.word	0xeffffffe

08016400 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016400:	b580      	push	{r7, lr}
 8016402:	b084      	sub	sp, #16
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801640c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	2200      	movs	r2, #0
 8016412:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	2200      	movs	r2, #0
 801641a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801641e:	68f8      	ldr	r0, [r7, #12]
 8016420:	f7fe fe26 	bl	8015070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8016424:	bf00      	nop
 8016426:	3710      	adds	r7, #16
 8016428:	46bd      	mov	sp, r7
 801642a:	bd80      	pop	{r7, pc}

0801642c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801642c:	b480      	push	{r7}
 801642e:	b08f      	sub	sp, #60	; 0x3c
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801643a:	2b21      	cmp	r3, #33	; 0x21
 801643c:	d14c      	bne.n	80164d8 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016444:	b29b      	uxth	r3, r3
 8016446:	2b00      	cmp	r3, #0
 8016448:	d132      	bne.n	80164b0 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	681b      	ldr	r3, [r3, #0]
 801644e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016450:	6a3b      	ldr	r3, [r7, #32]
 8016452:	e853 3f00 	ldrex	r3, [r3]
 8016456:	61fb      	str	r3, [r7, #28]
   return(result);
 8016458:	69fb      	ldr	r3, [r7, #28]
 801645a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801645e:	637b      	str	r3, [r7, #52]	; 0x34
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	461a      	mov	r2, r3
 8016466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016468:	62fb      	str	r3, [r7, #44]	; 0x2c
 801646a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801646c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801646e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016470:	e841 2300 	strex	r3, r2, [r1]
 8016474:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016478:	2b00      	cmp	r3, #0
 801647a:	d1e6      	bne.n	801644a <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	e853 3f00 	ldrex	r3, [r3]
 8016488:	60bb      	str	r3, [r7, #8]
   return(result);
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016490:	633b      	str	r3, [r7, #48]	; 0x30
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	681b      	ldr	r3, [r3, #0]
 8016496:	461a      	mov	r2, r3
 8016498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801649a:	61bb      	str	r3, [r7, #24]
 801649c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801649e:	6979      	ldr	r1, [r7, #20]
 80164a0:	69ba      	ldr	r2, [r7, #24]
 80164a2:	e841 2300 	strex	r3, r2, [r1]
 80164a6:	613b      	str	r3, [r7, #16]
   return(result);
 80164a8:	693b      	ldr	r3, [r7, #16]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d1e6      	bne.n	801647c <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80164ae:	e013      	b.n	80164d8 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164b4:	781a      	ldrb	r2, [r3, #0]
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164c0:	1c5a      	adds	r2, r3, #1
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80164cc:	b29b      	uxth	r3, r3
 80164ce:	3b01      	subs	r3, #1
 80164d0:	b29a      	uxth	r2, r3
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80164d8:	bf00      	nop
 80164da:	373c      	adds	r7, #60	; 0x3c
 80164dc:	46bd      	mov	sp, r7
 80164de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e2:	4770      	bx	lr

080164e4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80164e4:	b480      	push	{r7}
 80164e6:	b091      	sub	sp, #68	; 0x44
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80164f2:	2b21      	cmp	r3, #33	; 0x21
 80164f4:	d151      	bne.n	801659a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80164fc:	b29b      	uxth	r3, r3
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d132      	bne.n	8016568 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	681b      	ldr	r3, [r3, #0]
 8016506:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801650a:	e853 3f00 	ldrex	r3, [r3]
 801650e:	623b      	str	r3, [r7, #32]
   return(result);
 8016510:	6a3b      	ldr	r3, [r7, #32]
 8016512:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016516:	63bb      	str	r3, [r7, #56]	; 0x38
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	461a      	mov	r2, r3
 801651e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016520:	633b      	str	r3, [r7, #48]	; 0x30
 8016522:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016524:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016528:	e841 2300 	strex	r3, r2, [r1]
 801652c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016530:	2b00      	cmp	r3, #0
 8016532:	d1e6      	bne.n	8016502 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	681b      	ldr	r3, [r3, #0]
 8016538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801653a:	693b      	ldr	r3, [r7, #16]
 801653c:	e853 3f00 	ldrex	r3, [r3]
 8016540:	60fb      	str	r3, [r7, #12]
   return(result);
 8016542:	68fb      	ldr	r3, [r7, #12]
 8016544:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016548:	637b      	str	r3, [r7, #52]	; 0x34
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	461a      	mov	r2, r3
 8016550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016552:	61fb      	str	r3, [r7, #28]
 8016554:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016556:	69b9      	ldr	r1, [r7, #24]
 8016558:	69fa      	ldr	r2, [r7, #28]
 801655a:	e841 2300 	strex	r3, r2, [r1]
 801655e:	617b      	str	r3, [r7, #20]
   return(result);
 8016560:	697b      	ldr	r3, [r7, #20]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d1e6      	bne.n	8016534 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8016566:	e018      	b.n	801659a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801656c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801656e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016570:	881b      	ldrh	r3, [r3, #0]
 8016572:	461a      	mov	r2, r3
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801657c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 801657e:	687b      	ldr	r3, [r7, #4]
 8016580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016582:	1c9a      	adds	r2, r3, #2
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801658e:	b29b      	uxth	r3, r3
 8016590:	3b01      	subs	r3, #1
 8016592:	b29a      	uxth	r2, r3
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 801659a:	bf00      	nop
 801659c:	3744      	adds	r7, #68	; 0x44
 801659e:	46bd      	mov	sp, r7
 80165a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a4:	4770      	bx	lr

080165a6 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80165a6:	b480      	push	{r7}
 80165a8:	b091      	sub	sp, #68	; 0x44
 80165aa:	af00      	add	r7, sp, #0
 80165ac:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80165b4:	2b21      	cmp	r3, #33	; 0x21
 80165b6:	d160      	bne.n	801667a <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80165be:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80165c0:	e057      	b.n	8016672 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80165c8:	b29b      	uxth	r3, r3
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d133      	bne.n	8016636 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	3308      	adds	r3, #8
 80165d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d8:	e853 3f00 	ldrex	r3, [r3]
 80165dc:	623b      	str	r3, [r7, #32]
   return(result);
 80165de:	6a3b      	ldr	r3, [r7, #32]
 80165e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80165e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	3308      	adds	r3, #8
 80165ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80165ee:	633a      	str	r2, [r7, #48]	; 0x30
 80165f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80165f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80165f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80165f6:	e841 2300 	strex	r3, r2, [r1]
 80165fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80165fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d1e5      	bne.n	80165ce <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016608:	693b      	ldr	r3, [r7, #16]
 801660a:	e853 3f00 	ldrex	r3, [r3]
 801660e:	60fb      	str	r3, [r7, #12]
   return(result);
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016616:	637b      	str	r3, [r7, #52]	; 0x34
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	681b      	ldr	r3, [r3, #0]
 801661c:	461a      	mov	r2, r3
 801661e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016620:	61fb      	str	r3, [r7, #28]
 8016622:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016624:	69b9      	ldr	r1, [r7, #24]
 8016626:	69fa      	ldr	r2, [r7, #28]
 8016628:	e841 2300 	strex	r3, r2, [r1]
 801662c:	617b      	str	r3, [r7, #20]
   return(result);
 801662e:	697b      	ldr	r3, [r7, #20]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d1e6      	bne.n	8016602 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8016634:	e021      	b.n	801667a <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	681b      	ldr	r3, [r3, #0]
 801663a:	69db      	ldr	r3, [r3, #28]
 801663c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016640:	2b00      	cmp	r3, #0
 8016642:	d013      	beq.n	801666c <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016648:	781a      	ldrb	r2, [r3, #0]
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016654:	1c5a      	adds	r2, r3, #1
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016660:	b29b      	uxth	r3, r3
 8016662:	3b01      	subs	r3, #1
 8016664:	b29a      	uxth	r2, r3
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801666c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801666e:	3b01      	subs	r3, #1
 8016670:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8016672:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016674:	2b00      	cmp	r3, #0
 8016676:	d1a4      	bne.n	80165c2 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8016678:	e7ff      	b.n	801667a <UART_TxISR_8BIT_FIFOEN+0xd4>
 801667a:	bf00      	nop
 801667c:	3744      	adds	r7, #68	; 0x44
 801667e:	46bd      	mov	sp, r7
 8016680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016684:	4770      	bx	lr

08016686 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016686:	b480      	push	{r7}
 8016688:	b091      	sub	sp, #68	; 0x44
 801668a:	af00      	add	r7, sp, #0
 801668c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016694:	2b21      	cmp	r3, #33	; 0x21
 8016696:	d165      	bne.n	8016764 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801669e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80166a0:	e05c      	b.n	801675c <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80166a8:	b29b      	uxth	r3, r3
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d133      	bne.n	8016716 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	3308      	adds	r3, #8
 80166b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166b6:	6a3b      	ldr	r3, [r7, #32]
 80166b8:	e853 3f00 	ldrex	r3, [r3]
 80166bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80166be:	69fb      	ldr	r3, [r7, #28]
 80166c0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80166c4:	637b      	str	r3, [r7, #52]	; 0x34
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	3308      	adds	r3, #8
 80166cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80166ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80166d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80166d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80166d6:	e841 2300 	strex	r3, r2, [r1]
 80166da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80166dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d1e5      	bne.n	80166ae <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	e853 3f00 	ldrex	r3, [r3]
 80166ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80166f6:	633b      	str	r3, [r7, #48]	; 0x30
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	461a      	mov	r2, r3
 80166fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016700:	61bb      	str	r3, [r7, #24]
 8016702:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016704:	6979      	ldr	r1, [r7, #20]
 8016706:	69ba      	ldr	r2, [r7, #24]
 8016708:	e841 2300 	strex	r3, r2, [r1]
 801670c:	613b      	str	r3, [r7, #16]
   return(result);
 801670e:	693b      	ldr	r3, [r7, #16]
 8016710:	2b00      	cmp	r3, #0
 8016712:	d1e6      	bne.n	80166e2 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8016714:	e026      	b.n	8016764 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	69db      	ldr	r3, [r3, #28]
 801671c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016720:	2b00      	cmp	r3, #0
 8016722:	d018      	beq.n	8016756 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016728:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801672a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801672c:	881b      	ldrh	r3, [r3, #0]
 801672e:	461a      	mov	r2, r3
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016738:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801673e:	1c9a      	adds	r2, r3, #2
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801674a:	b29b      	uxth	r3, r3
 801674c:	3b01      	subs	r3, #1
 801674e:	b29a      	uxth	r2, r3
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8016756:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016758:	3b01      	subs	r3, #1
 801675a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801675c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801675e:	2b00      	cmp	r3, #0
 8016760:	d19f      	bne.n	80166a2 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8016762:	e7ff      	b.n	8016764 <UART_TxISR_16BIT_FIFOEN+0xde>
 8016764:	bf00      	nop
 8016766:	3744      	adds	r7, #68	; 0x44
 8016768:	46bd      	mov	sp, r7
 801676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676e:	4770      	bx	lr

08016770 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016770:	b580      	push	{r7, lr}
 8016772:	b088      	sub	sp, #32
 8016774:	af00      	add	r7, sp, #0
 8016776:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801677e:	68fb      	ldr	r3, [r7, #12]
 8016780:	e853 3f00 	ldrex	r3, [r3]
 8016784:	60bb      	str	r3, [r7, #8]
   return(result);
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801678c:	61fb      	str	r3, [r7, #28]
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	461a      	mov	r2, r3
 8016794:	69fb      	ldr	r3, [r7, #28]
 8016796:	61bb      	str	r3, [r7, #24]
 8016798:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801679a:	6979      	ldr	r1, [r7, #20]
 801679c:	69ba      	ldr	r2, [r7, #24]
 801679e:	e841 2300 	strex	r3, r2, [r1]
 80167a2:	613b      	str	r3, [r7, #16]
   return(result);
 80167a4:	693b      	ldr	r3, [r7, #16]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d1e6      	bne.n	8016778 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	2220      	movs	r2, #32
 80167ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	2200      	movs	r2, #0
 80167b6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80167b8:	6878      	ldr	r0, [r7, #4]
 80167ba:	f7fe fc4f 	bl	801505c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80167be:	bf00      	nop
 80167c0:	3720      	adds	r7, #32
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b096      	sub	sp, #88	; 0x58
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80167d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80167de:	2b22      	cmp	r3, #34	; 0x22
 80167e0:	f040 8095 	bne.w	801690e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167ea:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80167ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80167f2:	b2d9      	uxtb	r1, r3
 80167f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80167f8:	b2da      	uxtb	r2, r3
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167fe:	400a      	ands	r2, r1
 8016800:	b2d2      	uxtb	r2, r2
 8016802:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016808:	1c5a      	adds	r2, r3, #1
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016814:	b29b      	uxth	r3, r3
 8016816:	3b01      	subs	r3, #1
 8016818:	b29a      	uxth	r2, r3
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016826:	b29b      	uxth	r3, r3
 8016828:	2b00      	cmp	r3, #0
 801682a:	d178      	bne.n	801691e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016834:	e853 3f00 	ldrex	r3, [r3]
 8016838:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801683a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801683c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016840:	653b      	str	r3, [r7, #80]	; 0x50
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	461a      	mov	r2, r3
 8016848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801684a:	647b      	str	r3, [r7, #68]	; 0x44
 801684c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801684e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016850:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016852:	e841 2300 	strex	r3, r2, [r1]
 8016856:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801685a:	2b00      	cmp	r3, #0
 801685c:	d1e6      	bne.n	801682c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	3308      	adds	r3, #8
 8016864:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016868:	e853 3f00 	ldrex	r3, [r3]
 801686c:	623b      	str	r3, [r7, #32]
   return(result);
 801686e:	6a3b      	ldr	r3, [r7, #32]
 8016870:	f023 0301 	bic.w	r3, r3, #1
 8016874:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	3308      	adds	r3, #8
 801687c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801687e:	633a      	str	r2, [r7, #48]	; 0x30
 8016880:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016882:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016884:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016886:	e841 2300 	strex	r3, r2, [r1]
 801688a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801688c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801688e:	2b00      	cmp	r3, #0
 8016890:	d1e5      	bne.n	801685e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2220      	movs	r2, #32
 8016896:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	2200      	movs	r2, #0
 801689e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168a4:	2b01      	cmp	r3, #1
 80168a6:	d12e      	bne.n	8016906 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	2200      	movs	r2, #0
 80168ac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168b4:	693b      	ldr	r3, [r7, #16]
 80168b6:	e853 3f00 	ldrex	r3, [r3]
 80168ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	f023 0310 	bic.w	r3, r3, #16
 80168c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	461a      	mov	r2, r3
 80168ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168cc:	61fb      	str	r3, [r7, #28]
 80168ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168d0:	69b9      	ldr	r1, [r7, #24]
 80168d2:	69fa      	ldr	r2, [r7, #28]
 80168d4:	e841 2300 	strex	r3, r2, [r1]
 80168d8:	617b      	str	r3, [r7, #20]
   return(result);
 80168da:	697b      	ldr	r3, [r7, #20]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d1e6      	bne.n	80168ae <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	69db      	ldr	r3, [r3, #28]
 80168e6:	f003 0310 	and.w	r3, r3, #16
 80168ea:	2b10      	cmp	r3, #16
 80168ec:	d103      	bne.n	80168f6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	2210      	movs	r2, #16
 80168f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80168fc:	4619      	mov	r1, r3
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	f7fe fbc0 	bl	8015084 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016904:	e00b      	b.n	801691e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f7ec feb0 	bl	800366c <HAL_UART_RxCpltCallback>
}
 801690c:	e007      	b.n	801691e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	681b      	ldr	r3, [r3, #0]
 8016912:	699a      	ldr	r2, [r3, #24]
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	f042 0208 	orr.w	r2, r2, #8
 801691c:	619a      	str	r2, [r3, #24]
}
 801691e:	bf00      	nop
 8016920:	3758      	adds	r7, #88	; 0x58
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}

08016926 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8016926:	b580      	push	{r7, lr}
 8016928:	b096      	sub	sp, #88	; 0x58
 801692a:	af00      	add	r7, sp, #0
 801692c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016934:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801693e:	2b22      	cmp	r3, #34	; 0x22
 8016940:	f040 8095 	bne.w	8016a6e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801694a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016952:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8016954:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8016958:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801695c:	4013      	ands	r3, r2
 801695e:	b29a      	uxth	r2, r3
 8016960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016962:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8016964:	687b      	ldr	r3, [r7, #4]
 8016966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016968:	1c9a      	adds	r2, r3, #2
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016974:	b29b      	uxth	r3, r3
 8016976:	3b01      	subs	r3, #1
 8016978:	b29a      	uxth	r2, r3
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016986:	b29b      	uxth	r3, r3
 8016988:	2b00      	cmp	r3, #0
 801698a:	d178      	bne.n	8016a7e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	681b      	ldr	r3, [r3, #0]
 8016990:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016994:	e853 3f00 	ldrex	r3, [r3]
 8016998:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801699c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80169a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	461a      	mov	r2, r3
 80169a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169aa:	643b      	str	r3, [r7, #64]	; 0x40
 80169ac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80169b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80169b2:	e841 2300 	strex	r3, r2, [r1]
 80169b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80169b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d1e6      	bne.n	801698c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	3308      	adds	r3, #8
 80169c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169c6:	6a3b      	ldr	r3, [r7, #32]
 80169c8:	e853 3f00 	ldrex	r3, [r3]
 80169cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80169ce:	69fb      	ldr	r3, [r7, #28]
 80169d0:	f023 0301 	bic.w	r3, r3, #1
 80169d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	3308      	adds	r3, #8
 80169dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80169de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80169e0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80169e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80169e6:	e841 2300 	strex	r3, r2, [r1]
 80169ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80169ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d1e5      	bne.n	80169be <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2220      	movs	r2, #32
 80169f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	2200      	movs	r2, #0
 80169fe:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a04:	2b01      	cmp	r3, #1
 8016a06:	d12e      	bne.n	8016a66 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	e853 3f00 	ldrex	r3, [r3]
 8016a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8016a1c:	68bb      	ldr	r3, [r7, #8]
 8016a1e:	f023 0310 	bic.w	r3, r3, #16
 8016a22:	647b      	str	r3, [r7, #68]	; 0x44
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	461a      	mov	r2, r3
 8016a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a2c:	61bb      	str	r3, [r7, #24]
 8016a2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a30:	6979      	ldr	r1, [r7, #20]
 8016a32:	69ba      	ldr	r2, [r7, #24]
 8016a34:	e841 2300 	strex	r3, r2, [r1]
 8016a38:	613b      	str	r3, [r7, #16]
   return(result);
 8016a3a:	693b      	ldr	r3, [r7, #16]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d1e6      	bne.n	8016a0e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	69db      	ldr	r3, [r3, #28]
 8016a46:	f003 0310 	and.w	r3, r3, #16
 8016a4a:	2b10      	cmp	r3, #16
 8016a4c:	d103      	bne.n	8016a56 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	2210      	movs	r2, #16
 8016a54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016a5c:	4619      	mov	r1, r3
 8016a5e:	6878      	ldr	r0, [r7, #4]
 8016a60:	f7fe fb10 	bl	8015084 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016a64:	e00b      	b.n	8016a7e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	f7ec fe00 	bl	800366c <HAL_UART_RxCpltCallback>
}
 8016a6c:	e007      	b.n	8016a7e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	699a      	ldr	r2, [r3, #24]
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	f042 0208 	orr.w	r2, r2, #8
 8016a7c:	619a      	str	r2, [r3, #24]
}
 8016a7e:	bf00      	nop
 8016a80:	3758      	adds	r7, #88	; 0x58
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}
	...

08016a88 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016a88:	b580      	push	{r7, lr}
 8016a8a:	b0a6      	sub	sp, #152	; 0x98
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016a96:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	69db      	ldr	r3, [r3, #28]
 8016aa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681b      	ldr	r3, [r3, #0]
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	681b      	ldr	r3, [r3, #0]
 8016ab2:	689b      	ldr	r3, [r3, #8]
 8016ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016abe:	2b22      	cmp	r3, #34	; 0x22
 8016ac0:	f040 814d 	bne.w	8016d5e <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016aca:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016ace:	e0f4      	b.n	8016cba <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ad6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016ada:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8016ade:	b2d9      	uxtb	r1, r3
 8016ae0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8016ae4:	b2da      	uxtb	r2, r3
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016aea:	400a      	ands	r2, r1
 8016aec:	b2d2      	uxtb	r2, r2
 8016aee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016af4:	1c5a      	adds	r2, r3, #1
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016afa:	687b      	ldr	r3, [r7, #4]
 8016afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016b00:	b29b      	uxth	r3, r3
 8016b02:	3b01      	subs	r3, #1
 8016b04:	b29a      	uxth	r2, r3
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	681b      	ldr	r3, [r3, #0]
 8016b10:	69db      	ldr	r3, [r3, #28]
 8016b12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016b16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b1a:	f003 0307 	and.w	r3, r3, #7
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d053      	beq.n	8016bca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016b22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b26:	f003 0301 	and.w	r3, r3, #1
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d011      	beq.n	8016b52 <UART_RxISR_8BIT_FIFOEN+0xca>
 8016b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d00b      	beq.n	8016b52 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	2201      	movs	r2, #1
 8016b40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016b48:	f043 0201 	orr.w	r2, r3, #1
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016b52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b56:	f003 0302 	and.w	r3, r3, #2
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d011      	beq.n	8016b82 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8016b5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b62:	f003 0301 	and.w	r3, r3, #1
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d00b      	beq.n	8016b82 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	2202      	movs	r2, #2
 8016b70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016b78:	f043 0204 	orr.w	r2, r3, #4
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016b82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b86:	f003 0304 	and.w	r3, r3, #4
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d011      	beq.n	8016bb2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8016b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b92:	f003 0301 	and.w	r3, r3, #1
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d00b      	beq.n	8016bb2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	2204      	movs	r2, #4
 8016ba0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016ba8:	f043 0202 	orr.w	r2, r3, #2
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d006      	beq.n	8016bca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016bbc:	6878      	ldr	r0, [r7, #4]
 8016bbe:	f7fe fa57 	bl	8015070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016bd0:	b29b      	uxth	r3, r3
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d171      	bne.n	8016cba <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016bde:	e853 3f00 	ldrex	r3, [r3]
 8016be2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8016be4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016be6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016bea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	461a      	mov	r2, r3
 8016bf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016bf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8016bfa:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016bfc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016bfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016c00:	e841 2300 	strex	r3, r2, [r1]
 8016c04:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d1e4      	bne.n	8016bd6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	3308      	adds	r3, #8
 8016c12:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c16:	e853 3f00 	ldrex	r3, [r3]
 8016c1a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016c1e:	4b56      	ldr	r3, [pc, #344]	; (8016d78 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8016c20:	4013      	ands	r3, r2
 8016c22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	3308      	adds	r3, #8
 8016c2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016c2c:	657a      	str	r2, [r7, #84]	; 0x54
 8016c2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016c32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016c34:	e841 2300 	strex	r3, r2, [r1]
 8016c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d1e5      	bne.n	8016c0c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	2220      	movs	r2, #32
 8016c44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	2200      	movs	r2, #0
 8016c4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c52:	2b01      	cmp	r3, #1
 8016c54:	d12e      	bne.n	8016cb4 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	2200      	movs	r2, #0
 8016c5a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c64:	e853 3f00 	ldrex	r3, [r3]
 8016c68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c6c:	f023 0310 	bic.w	r3, r3, #16
 8016c70:	67bb      	str	r3, [r7, #120]	; 0x78
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	461a      	mov	r2, r3
 8016c78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016c7a:	643b      	str	r3, [r7, #64]	; 0x40
 8016c7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016c80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016c82:	e841 2300 	strex	r3, r2, [r1]
 8016c86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d1e6      	bne.n	8016c5c <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	69db      	ldr	r3, [r3, #28]
 8016c94:	f003 0310 	and.w	r3, r3, #16
 8016c98:	2b10      	cmp	r3, #16
 8016c9a:	d103      	bne.n	8016ca4 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	2210      	movs	r2, #16
 8016ca2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016caa:	4619      	mov	r1, r3
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f7fe f9e9 	bl	8015084 <HAL_UARTEx_RxEventCallback>
 8016cb2:	e002      	b.n	8016cba <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016cb4:	6878      	ldr	r0, [r7, #4]
 8016cb6:	f7ec fcd9 	bl	800366c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016cba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d006      	beq.n	8016cd0 <UART_RxISR_8BIT_FIFOEN+0x248>
 8016cc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016cc6:	f003 0320 	and.w	r3, r3, #32
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	f47f af00 	bne.w	8016ad0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016cd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016cda:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d045      	beq.n	8016d6e <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016ce8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8016cec:	429a      	cmp	r2, r3
 8016cee:	d23e      	bcs.n	8016d6e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	3308      	adds	r3, #8
 8016cf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016cf8:	6a3b      	ldr	r3, [r7, #32]
 8016cfa:	e853 3f00 	ldrex	r3, [r3]
 8016cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8016d00:	69fb      	ldr	r3, [r7, #28]
 8016d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016d06:	673b      	str	r3, [r7, #112]	; 0x70
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	3308      	adds	r3, #8
 8016d0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016d10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016d12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d18:	e841 2300 	strex	r3, r2, [r1]
 8016d1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d1e5      	bne.n	8016cf0 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	4a15      	ldr	r2, [pc, #84]	; (8016d7c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8016d28:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	e853 3f00 	ldrex	r3, [r3]
 8016d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8016d38:	68bb      	ldr	r3, [r7, #8]
 8016d3a:	f043 0320 	orr.w	r3, r3, #32
 8016d3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	461a      	mov	r2, r3
 8016d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016d48:	61bb      	str	r3, [r7, #24]
 8016d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d4c:	6979      	ldr	r1, [r7, #20]
 8016d4e:	69ba      	ldr	r2, [r7, #24]
 8016d50:	e841 2300 	strex	r3, r2, [r1]
 8016d54:	613b      	str	r3, [r7, #16]
   return(result);
 8016d56:	693b      	ldr	r3, [r7, #16]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d1e6      	bne.n	8016d2a <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016d5c:	e007      	b.n	8016d6e <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	699a      	ldr	r2, [r3, #24]
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	f042 0208 	orr.w	r2, r2, #8
 8016d6c:	619a      	str	r2, [r3, #24]
}
 8016d6e:	bf00      	nop
 8016d70:	3798      	adds	r7, #152	; 0x98
 8016d72:	46bd      	mov	sp, r7
 8016d74:	bd80      	pop	{r7, pc}
 8016d76:	bf00      	nop
 8016d78:	effffffe 	.word	0xeffffffe
 8016d7c:	080167c7 	.word	0x080167c7

08016d80 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b0a8      	sub	sp, #160	; 0xa0
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016d8e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	69db      	ldr	r3, [r3, #28]
 8016d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	681b      	ldr	r3, [r3, #0]
 8016daa:	689b      	ldr	r3, [r3, #8]
 8016dac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016db6:	2b22      	cmp	r3, #34	; 0x22
 8016db8:	f040 8151 	bne.w	801705e <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016dc2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016dc6:	e0f8      	b.n	8016fba <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dce:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016dd6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8016dda:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8016dde:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8016de2:	4013      	ands	r3, r2
 8016de4:	b29a      	uxth	r2, r3
 8016de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016dea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016df0:	1c9a      	adds	r2, r3, #2
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016dfc:	b29b      	uxth	r3, r3
 8016dfe:	3b01      	subs	r3, #1
 8016e00:	b29a      	uxth	r2, r3
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	69db      	ldr	r3, [r3, #28]
 8016e0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016e12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e16:	f003 0307 	and.w	r3, r3, #7
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d053      	beq.n	8016ec6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016e1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e22:	f003 0301 	and.w	r3, r3, #1
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d011      	beq.n	8016e4e <UART_RxISR_16BIT_FIFOEN+0xce>
 8016e2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d00b      	beq.n	8016e4e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	2201      	movs	r2, #1
 8016e3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016e44:	f043 0201 	orr.w	r2, r3, #1
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016e4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e52:	f003 0302 	and.w	r3, r3, #2
 8016e56:	2b00      	cmp	r3, #0
 8016e58:	d011      	beq.n	8016e7e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016e5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016e5e:	f003 0301 	and.w	r3, r3, #1
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d00b      	beq.n	8016e7e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	681b      	ldr	r3, [r3, #0]
 8016e6a:	2202      	movs	r2, #2
 8016e6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016e74:	f043 0204 	orr.w	r2, r3, #4
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016e7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e82:	f003 0304 	and.w	r3, r3, #4
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d011      	beq.n	8016eae <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016e8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016e8e:	f003 0301 	and.w	r3, r3, #1
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d00b      	beq.n	8016eae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	2204      	movs	r2, #4
 8016e9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016ea4:	f043 0202 	orr.w	r2, r3, #2
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	d006      	beq.n	8016ec6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016eb8:	6878      	ldr	r0, [r7, #4]
 8016eba:	f7fe f8d9 	bl	8015070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ecc:	b29b      	uxth	r3, r3
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d173      	bne.n	8016fba <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016eda:	e853 3f00 	ldrex	r3, [r3]
 8016ede:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016ee2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016ee6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	461a      	mov	r2, r3
 8016ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016ef4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016ef6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016ef8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016efa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016efc:	e841 2300 	strex	r3, r2, [r1]
 8016f00:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016f02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d1e4      	bne.n	8016ed2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	3308      	adds	r3, #8
 8016f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f12:	e853 3f00 	ldrex	r3, [r3]
 8016f16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016f18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016f1a:	4b57      	ldr	r3, [pc, #348]	; (8017078 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8016f1c:	4013      	ands	r3, r2
 8016f1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	3308      	adds	r3, #8
 8016f28:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016f2c:	65ba      	str	r2, [r7, #88]	; 0x58
 8016f2e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016f32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016f34:	e841 2300 	strex	r3, r2, [r1]
 8016f38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d1e3      	bne.n	8016f08 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	2220      	movs	r2, #32
 8016f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f52:	2b01      	cmp	r3, #1
 8016f54:	d12e      	bne.n	8016fb4 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f64:	e853 3f00 	ldrex	r3, [r3]
 8016f68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f6c:	f023 0310 	bic.w	r3, r3, #16
 8016f70:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	461a      	mov	r2, r3
 8016f78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016f7a:	647b      	str	r3, [r7, #68]	; 0x44
 8016f7c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f82:	e841 2300 	strex	r3, r2, [r1]
 8016f86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d1e6      	bne.n	8016f5c <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	69db      	ldr	r3, [r3, #28]
 8016f94:	f003 0310 	and.w	r3, r3, #16
 8016f98:	2b10      	cmp	r3, #16
 8016f9a:	d103      	bne.n	8016fa4 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	2210      	movs	r2, #16
 8016fa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016faa:	4619      	mov	r1, r3
 8016fac:	6878      	ldr	r0, [r7, #4]
 8016fae:	f7fe f869 	bl	8015084 <HAL_UARTEx_RxEventCallback>
 8016fb2:	e002      	b.n	8016fba <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016fb4:	6878      	ldr	r0, [r7, #4]
 8016fb6:	f7ec fb59 	bl	800366c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016fba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d006      	beq.n	8016fd0 <UART_RxISR_16BIT_FIFOEN+0x250>
 8016fc2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016fc6:	f003 0320 	and.w	r3, r3, #32
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	f47f aefc 	bne.w	8016dc8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016fd6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016fda:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d045      	beq.n	801706e <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016fe8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8016fec:	429a      	cmp	r2, r3
 8016fee:	d23e      	bcs.n	801706e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	3308      	adds	r3, #8
 8016ff6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ffa:	e853 3f00 	ldrex	r3, [r3]
 8016ffe:	623b      	str	r3, [r7, #32]
   return(result);
 8017000:	6a3b      	ldr	r3, [r7, #32]
 8017002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017006:	677b      	str	r3, [r7, #116]	; 0x74
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	3308      	adds	r3, #8
 801700e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017010:	633a      	str	r2, [r7, #48]	; 0x30
 8017012:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017014:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017018:	e841 2300 	strex	r3, r2, [r1]
 801701c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801701e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017020:	2b00      	cmp	r3, #0
 8017022:	d1e5      	bne.n	8016ff0 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	4a15      	ldr	r2, [pc, #84]	; (801707c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8017028:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017030:	693b      	ldr	r3, [r7, #16]
 8017032:	e853 3f00 	ldrex	r3, [r3]
 8017036:	60fb      	str	r3, [r7, #12]
   return(result);
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	f043 0320 	orr.w	r3, r3, #32
 801703e:	673b      	str	r3, [r7, #112]	; 0x70
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	461a      	mov	r2, r3
 8017046:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017048:	61fb      	str	r3, [r7, #28]
 801704a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801704c:	69b9      	ldr	r1, [r7, #24]
 801704e:	69fa      	ldr	r2, [r7, #28]
 8017050:	e841 2300 	strex	r3, r2, [r1]
 8017054:	617b      	str	r3, [r7, #20]
   return(result);
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d1e6      	bne.n	801702a <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801705c:	e007      	b.n	801706e <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	699a      	ldr	r2, [r3, #24]
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	f042 0208 	orr.w	r2, r2, #8
 801706c:	619a      	str	r2, [r3, #24]
}
 801706e:	bf00      	nop
 8017070:	37a0      	adds	r7, #160	; 0xa0
 8017072:	46bd      	mov	sp, r7
 8017074:	bd80      	pop	{r7, pc}
 8017076:	bf00      	nop
 8017078:	effffffe 	.word	0xeffffffe
 801707c:	08016927 	.word	0x08016927

08017080 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8017080:	b480      	push	{r7}
 8017082:	b083      	sub	sp, #12
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8017088:	bf00      	nop
 801708a:	370c      	adds	r7, #12
 801708c:	46bd      	mov	sp, r7
 801708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017092:	4770      	bx	lr

08017094 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8017094:	b480      	push	{r7}
 8017096:	b083      	sub	sp, #12
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801709c:	bf00      	nop
 801709e:	370c      	adds	r7, #12
 80170a0:	46bd      	mov	sp, r7
 80170a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a6:	4770      	bx	lr

080170a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80170a8:	b480      	push	{r7}
 80170aa:	b083      	sub	sp, #12
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80170b0:	bf00      	nop
 80170b2:	370c      	adds	r7, #12
 80170b4:	46bd      	mov	sp, r7
 80170b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ba:	4770      	bx	lr

080170bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80170bc:	b480      	push	{r7}
 80170be:	b085      	sub	sp, #20
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80170ca:	2b01      	cmp	r3, #1
 80170cc:	d101      	bne.n	80170d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80170ce:	2302      	movs	r3, #2
 80170d0:	e027      	b.n	8017122 <HAL_UARTEx_DisableFifoMode+0x66>
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2201      	movs	r2, #1
 80170d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	2224      	movs	r2, #36	; 0x24
 80170de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	681a      	ldr	r2, [r3, #0]
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	f022 0201 	bic.w	r2, r2, #1
 80170f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8017100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	2200      	movs	r2, #0
 8017106:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	68fa      	ldr	r2, [r7, #12]
 801710e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2220      	movs	r2, #32
 8017114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017118:	687b      	ldr	r3, [r7, #4]
 801711a:	2200      	movs	r2, #0
 801711c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8017120:	2300      	movs	r3, #0
}
 8017122:	4618      	mov	r0, r3
 8017124:	3714      	adds	r7, #20
 8017126:	46bd      	mov	sp, r7
 8017128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712c:	4770      	bx	lr

0801712e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801712e:	b580      	push	{r7, lr}
 8017130:	b084      	sub	sp, #16
 8017132:	af00      	add	r7, sp, #0
 8017134:	6078      	str	r0, [r7, #4]
 8017136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801713e:	2b01      	cmp	r3, #1
 8017140:	d101      	bne.n	8017146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8017142:	2302      	movs	r3, #2
 8017144:	e02d      	b.n	80171a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	2201      	movs	r2, #1
 801714a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	2224      	movs	r2, #36	; 0x24
 8017152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	681b      	ldr	r3, [r3, #0]
 801715c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	681a      	ldr	r2, [r3, #0]
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	681b      	ldr	r3, [r3, #0]
 8017168:	f022 0201 	bic.w	r2, r2, #1
 801716c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	689b      	ldr	r3, [r3, #8]
 8017174:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	683a      	ldr	r2, [r7, #0]
 801717e:	430a      	orrs	r2, r1
 8017180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017182:	6878      	ldr	r0, [r7, #4]
 8017184:	f000 f850 	bl	8017228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	68fa      	ldr	r2, [r7, #12]
 801718e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2220      	movs	r2, #32
 8017194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	2200      	movs	r2, #0
 801719c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80171a0:	2300      	movs	r3, #0
}
 80171a2:	4618      	mov	r0, r3
 80171a4:	3710      	adds	r7, #16
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}

080171aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80171aa:	b580      	push	{r7, lr}
 80171ac:	b084      	sub	sp, #16
 80171ae:	af00      	add	r7, sp, #0
 80171b0:	6078      	str	r0, [r7, #4]
 80171b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80171ba:	2b01      	cmp	r3, #1
 80171bc:	d101      	bne.n	80171c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80171be:	2302      	movs	r3, #2
 80171c0:	e02d      	b.n	801721e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	2201      	movs	r2, #1
 80171c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	2224      	movs	r2, #36	; 0x24
 80171ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	681a      	ldr	r2, [r3, #0]
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	f022 0201 	bic.w	r2, r2, #1
 80171e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	689b      	ldr	r3, [r3, #8]
 80171f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	683a      	ldr	r2, [r7, #0]
 80171fa:	430a      	orrs	r2, r1
 80171fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80171fe:	6878      	ldr	r0, [r7, #4]
 8017200:	f000 f812 	bl	8017228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	68fa      	ldr	r2, [r7, #12]
 801720a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	2220      	movs	r2, #32
 8017210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2200      	movs	r2, #0
 8017218:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801721c:	2300      	movs	r3, #0
}
 801721e:	4618      	mov	r0, r3
 8017220:	3710      	adds	r7, #16
 8017222:	46bd      	mov	sp, r7
 8017224:	bd80      	pop	{r7, pc}
	...

08017228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8017228:	b480      	push	{r7}
 801722a:	b085      	sub	sp, #20
 801722c:	af00      	add	r7, sp, #0
 801722e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017234:	2b00      	cmp	r3, #0
 8017236:	d108      	bne.n	801724a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	2201      	movs	r2, #1
 801723c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	2201      	movs	r2, #1
 8017244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8017248:	e031      	b.n	80172ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801724a:	2310      	movs	r3, #16
 801724c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801724e:	2310      	movs	r3, #16
 8017250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	689b      	ldr	r3, [r3, #8]
 8017258:	0e5b      	lsrs	r3, r3, #25
 801725a:	b2db      	uxtb	r3, r3
 801725c:	f003 0307 	and.w	r3, r3, #7
 8017260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	689b      	ldr	r3, [r3, #8]
 8017268:	0f5b      	lsrs	r3, r3, #29
 801726a:	b2db      	uxtb	r3, r3
 801726c:	f003 0307 	and.w	r3, r3, #7
 8017270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017272:	7bbb      	ldrb	r3, [r7, #14]
 8017274:	7b3a      	ldrb	r2, [r7, #12]
 8017276:	4911      	ldr	r1, [pc, #68]	; (80172bc <UARTEx_SetNbDataToProcess+0x94>)
 8017278:	5c8a      	ldrb	r2, [r1, r2]
 801727a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801727e:	7b3a      	ldrb	r2, [r7, #12]
 8017280:	490f      	ldr	r1, [pc, #60]	; (80172c0 <UARTEx_SetNbDataToProcess+0x98>)
 8017282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8017284:	fb93 f3f2 	sdiv	r3, r3, r2
 8017288:	b29a      	uxth	r2, r3
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8017290:	7bfb      	ldrb	r3, [r7, #15]
 8017292:	7b7a      	ldrb	r2, [r7, #13]
 8017294:	4909      	ldr	r1, [pc, #36]	; (80172bc <UARTEx_SetNbDataToProcess+0x94>)
 8017296:	5c8a      	ldrb	r2, [r1, r2]
 8017298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801729c:	7b7a      	ldrb	r2, [r7, #13]
 801729e:	4908      	ldr	r1, [pc, #32]	; (80172c0 <UARTEx_SetNbDataToProcess+0x98>)
 80172a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80172a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80172a6:	b29a      	uxth	r2, r3
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80172ae:	bf00      	nop
 80172b0:	3714      	adds	r7, #20
 80172b2:	46bd      	mov	sp, r7
 80172b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b8:	4770      	bx	lr
 80172ba:	bf00      	nop
 80172bc:	08018430 	.word	0x08018430
 80172c0:	08018438 	.word	0x08018438

080172c4 <__errno>:
 80172c4:	4b01      	ldr	r3, [pc, #4]	; (80172cc <__errno+0x8>)
 80172c6:	6818      	ldr	r0, [r3, #0]
 80172c8:	4770      	bx	lr
 80172ca:	bf00      	nop
 80172cc:	20000030 	.word	0x20000030

080172d0 <__libc_init_array>:
 80172d0:	b570      	push	{r4, r5, r6, lr}
 80172d2:	4d0d      	ldr	r5, [pc, #52]	; (8017308 <__libc_init_array+0x38>)
 80172d4:	4c0d      	ldr	r4, [pc, #52]	; (801730c <__libc_init_array+0x3c>)
 80172d6:	1b64      	subs	r4, r4, r5
 80172d8:	10a4      	asrs	r4, r4, #2
 80172da:	2600      	movs	r6, #0
 80172dc:	42a6      	cmp	r6, r4
 80172de:	d109      	bne.n	80172f4 <__libc_init_array+0x24>
 80172e0:	4d0b      	ldr	r5, [pc, #44]	; (8017310 <__libc_init_array+0x40>)
 80172e2:	4c0c      	ldr	r4, [pc, #48]	; (8017314 <__libc_init_array+0x44>)
 80172e4:	f001 f846 	bl	8018374 <_init>
 80172e8:	1b64      	subs	r4, r4, r5
 80172ea:	10a4      	asrs	r4, r4, #2
 80172ec:	2600      	movs	r6, #0
 80172ee:	42a6      	cmp	r6, r4
 80172f0:	d105      	bne.n	80172fe <__libc_init_array+0x2e>
 80172f2:	bd70      	pop	{r4, r5, r6, pc}
 80172f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80172f8:	4798      	blx	r3
 80172fa:	3601      	adds	r6, #1
 80172fc:	e7ee      	b.n	80172dc <__libc_init_array+0xc>
 80172fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8017302:	4798      	blx	r3
 8017304:	3601      	adds	r6, #1
 8017306:	e7f2      	b.n	80172ee <__libc_init_array+0x1e>
 8017308:	08018690 	.word	0x08018690
 801730c:	08018690 	.word	0x08018690
 8017310:	08018690 	.word	0x08018690
 8017314:	08018694 	.word	0x08018694

08017318 <memset>:
 8017318:	4402      	add	r2, r0
 801731a:	4603      	mov	r3, r0
 801731c:	4293      	cmp	r3, r2
 801731e:	d100      	bne.n	8017322 <memset+0xa>
 8017320:	4770      	bx	lr
 8017322:	f803 1b01 	strb.w	r1, [r3], #1
 8017326:	e7f9      	b.n	801731c <memset+0x4>

08017328 <cos>:
 8017328:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801732a:	eeb0 7b40 	vmov.f64	d7, d0
 801732e:	ee17 3a90 	vmov	r3, s15
 8017332:	4a21      	ldr	r2, [pc, #132]	; (80173b8 <cos+0x90>)
 8017334:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017338:	4293      	cmp	r3, r2
 801733a:	dc06      	bgt.n	801734a <cos+0x22>
 801733c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80173b0 <cos+0x88>
 8017340:	b005      	add	sp, #20
 8017342:	f85d eb04 	ldr.w	lr, [sp], #4
 8017346:	f000 bab7 	b.w	80178b8 <__kernel_cos>
 801734a:	4a1c      	ldr	r2, [pc, #112]	; (80173bc <cos+0x94>)
 801734c:	4293      	cmp	r3, r2
 801734e:	dd04      	ble.n	801735a <cos+0x32>
 8017350:	ee30 0b40 	vsub.f64	d0, d0, d0
 8017354:	b005      	add	sp, #20
 8017356:	f85d fb04 	ldr.w	pc, [sp], #4
 801735a:	4668      	mov	r0, sp
 801735c:	f000 f964 	bl	8017628 <__ieee754_rem_pio2>
 8017360:	f000 0003 	and.w	r0, r0, #3
 8017364:	2801      	cmp	r0, #1
 8017366:	d009      	beq.n	801737c <cos+0x54>
 8017368:	2802      	cmp	r0, #2
 801736a:	d010      	beq.n	801738e <cos+0x66>
 801736c:	b9b0      	cbnz	r0, 801739c <cos+0x74>
 801736e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017372:	ed9d 0b00 	vldr	d0, [sp]
 8017376:	f000 fa9f 	bl	80178b8 <__kernel_cos>
 801737a:	e7eb      	b.n	8017354 <cos+0x2c>
 801737c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017380:	ed9d 0b00 	vldr	d0, [sp]
 8017384:	f000 fd9c 	bl	8017ec0 <__kernel_sin>
 8017388:	eeb1 0b40 	vneg.f64	d0, d0
 801738c:	e7e2      	b.n	8017354 <cos+0x2c>
 801738e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017392:	ed9d 0b00 	vldr	d0, [sp]
 8017396:	f000 fa8f 	bl	80178b8 <__kernel_cos>
 801739a:	e7f5      	b.n	8017388 <cos+0x60>
 801739c:	ed9d 1b02 	vldr	d1, [sp, #8]
 80173a0:	ed9d 0b00 	vldr	d0, [sp]
 80173a4:	2001      	movs	r0, #1
 80173a6:	f000 fd8b 	bl	8017ec0 <__kernel_sin>
 80173aa:	e7d3      	b.n	8017354 <cos+0x2c>
 80173ac:	f3af 8000 	nop.w
	...
 80173b8:	3fe921fb 	.word	0x3fe921fb
 80173bc:	7fefffff 	.word	0x7fefffff

080173c0 <sin>:
 80173c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80173c2:	eeb0 7b40 	vmov.f64	d7, d0
 80173c6:	ee17 3a90 	vmov	r3, s15
 80173ca:	4a21      	ldr	r2, [pc, #132]	; (8017450 <sin+0x90>)
 80173cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80173d0:	4293      	cmp	r3, r2
 80173d2:	dc07      	bgt.n	80173e4 <sin+0x24>
 80173d4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8017448 <sin+0x88>
 80173d8:	2000      	movs	r0, #0
 80173da:	b005      	add	sp, #20
 80173dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80173e0:	f000 bd6e 	b.w	8017ec0 <__kernel_sin>
 80173e4:	4a1b      	ldr	r2, [pc, #108]	; (8017454 <sin+0x94>)
 80173e6:	4293      	cmp	r3, r2
 80173e8:	dd04      	ble.n	80173f4 <sin+0x34>
 80173ea:	ee30 0b40 	vsub.f64	d0, d0, d0
 80173ee:	b005      	add	sp, #20
 80173f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80173f4:	4668      	mov	r0, sp
 80173f6:	f000 f917 	bl	8017628 <__ieee754_rem_pio2>
 80173fa:	f000 0003 	and.w	r0, r0, #3
 80173fe:	2801      	cmp	r0, #1
 8017400:	d00a      	beq.n	8017418 <sin+0x58>
 8017402:	2802      	cmp	r0, #2
 8017404:	d00f      	beq.n	8017426 <sin+0x66>
 8017406:	b9c0      	cbnz	r0, 801743a <sin+0x7a>
 8017408:	ed9d 1b02 	vldr	d1, [sp, #8]
 801740c:	ed9d 0b00 	vldr	d0, [sp]
 8017410:	2001      	movs	r0, #1
 8017412:	f000 fd55 	bl	8017ec0 <__kernel_sin>
 8017416:	e7ea      	b.n	80173ee <sin+0x2e>
 8017418:	ed9d 1b02 	vldr	d1, [sp, #8]
 801741c:	ed9d 0b00 	vldr	d0, [sp]
 8017420:	f000 fa4a 	bl	80178b8 <__kernel_cos>
 8017424:	e7e3      	b.n	80173ee <sin+0x2e>
 8017426:	ed9d 1b02 	vldr	d1, [sp, #8]
 801742a:	ed9d 0b00 	vldr	d0, [sp]
 801742e:	2001      	movs	r0, #1
 8017430:	f000 fd46 	bl	8017ec0 <__kernel_sin>
 8017434:	eeb1 0b40 	vneg.f64	d0, d0
 8017438:	e7d9      	b.n	80173ee <sin+0x2e>
 801743a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801743e:	ed9d 0b00 	vldr	d0, [sp]
 8017442:	f000 fa39 	bl	80178b8 <__kernel_cos>
 8017446:	e7f5      	b.n	8017434 <sin+0x74>
	...
 8017450:	3fe921fb 	.word	0x3fe921fb
 8017454:	7fefffff 	.word	0x7fefffff

08017458 <atan2>:
 8017458:	f000 b822 	b.w	80174a0 <__ieee754_atan2>
 801745c:	0000      	movs	r0, r0
	...

08017460 <sqrt>:
 8017460:	b508      	push	{r3, lr}
 8017462:	ed2d 8b04 	vpush	{d8-d9}
 8017466:	eeb0 8b40 	vmov.f64	d8, d0
 801746a:	f000 fa21 	bl	80178b0 <__ieee754_sqrt>
 801746e:	eeb4 8b48 	vcmp.f64	d8, d8
 8017472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017476:	d60c      	bvs.n	8017492 <sqrt+0x32>
 8017478:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8017498 <sqrt+0x38>
 801747c:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8017480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017484:	d505      	bpl.n	8017492 <sqrt+0x32>
 8017486:	f7ff ff1d 	bl	80172c4 <__errno>
 801748a:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801748e:	2321      	movs	r3, #33	; 0x21
 8017490:	6003      	str	r3, [r0, #0]
 8017492:	ecbd 8b04 	vpop	{d8-d9}
 8017496:	bd08      	pop	{r3, pc}
	...

080174a0 <__ieee754_atan2>:
 80174a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174a2:	eeb0 7b40 	vmov.f64	d7, d0
 80174a6:	ee11 6a10 	vmov	r6, s2
 80174aa:	ee11 0a90 	vmov	r0, s3
 80174ae:	4273      	negs	r3, r6
 80174b0:	4f59      	ldr	r7, [pc, #356]	; (8017618 <__ieee754_atan2+0x178>)
 80174b2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80174b6:	4333      	orrs	r3, r6
 80174b8:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80174bc:	42bb      	cmp	r3, r7
 80174be:	d80d      	bhi.n	80174dc <__ieee754_atan2+0x3c>
 80174c0:	ee10 ca10 	vmov	ip, s0
 80174c4:	ee17 5a90 	vmov	r5, s15
 80174c8:	f1cc 0100 	rsb	r1, ip, #0
 80174cc:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80174d0:	ea41 010c 	orr.w	r1, r1, ip
 80174d4:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80174d8:	42b9      	cmp	r1, r7
 80174da:	d904      	bls.n	80174e6 <__ieee754_atan2+0x46>
 80174dc:	ee37 7b01 	vadd.f64	d7, d7, d1
 80174e0:	eeb0 0b47 	vmov.f64	d0, d7
 80174e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174e6:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 80174ea:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 80174ee:	4331      	orrs	r1, r6
 80174f0:	d103      	bne.n	80174fa <__ieee754_atan2+0x5a>
 80174f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80174f6:	f000 bd3b 	b.w	8017f70 <atan>
 80174fa:	1784      	asrs	r4, r0, #30
 80174fc:	f004 0402 	and.w	r4, r4, #2
 8017500:	ea53 010c 	orrs.w	r1, r3, ip
 8017504:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8017508:	d107      	bne.n	801751a <__ieee754_atan2+0x7a>
 801750a:	2c02      	cmp	r4, #2
 801750c:	d05d      	beq.n	80175ca <__ieee754_atan2+0x12a>
 801750e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80175e0 <__ieee754_atan2+0x140>
 8017512:	2c03      	cmp	r4, #3
 8017514:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8017518:	e7e2      	b.n	80174e0 <__ieee754_atan2+0x40>
 801751a:	ea52 0106 	orrs.w	r1, r2, r6
 801751e:	d107      	bne.n	8017530 <__ieee754_atan2+0x90>
 8017520:	ed9f 7b31 	vldr	d7, [pc, #196]	; 80175e8 <__ieee754_atan2+0x148>
 8017524:	ed9f 0b32 	vldr	d0, [pc, #200]	; 80175f0 <__ieee754_atan2+0x150>
 8017528:	2d00      	cmp	r5, #0
 801752a:	fe27 7b00 	vselge.f64	d7, d7, d0
 801752e:	e7d7      	b.n	80174e0 <__ieee754_atan2+0x40>
 8017530:	42ba      	cmp	r2, r7
 8017532:	d10f      	bne.n	8017554 <__ieee754_atan2+0xb4>
 8017534:	4293      	cmp	r3, r2
 8017536:	f104 34ff 	add.w	r4, r4, #4294967295
 801753a:	d107      	bne.n	801754c <__ieee754_atan2+0xac>
 801753c:	2c02      	cmp	r4, #2
 801753e:	d847      	bhi.n	80175d0 <__ieee754_atan2+0x130>
 8017540:	4b36      	ldr	r3, [pc, #216]	; (801761c <__ieee754_atan2+0x17c>)
 8017542:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8017546:	ed94 7b00 	vldr	d7, [r4]
 801754a:	e7c9      	b.n	80174e0 <__ieee754_atan2+0x40>
 801754c:	2c02      	cmp	r4, #2
 801754e:	d842      	bhi.n	80175d6 <__ieee754_atan2+0x136>
 8017550:	4b33      	ldr	r3, [pc, #204]	; (8017620 <__ieee754_atan2+0x180>)
 8017552:	e7f6      	b.n	8017542 <__ieee754_atan2+0xa2>
 8017554:	42bb      	cmp	r3, r7
 8017556:	d0e3      	beq.n	8017520 <__ieee754_atan2+0x80>
 8017558:	1a9b      	subs	r3, r3, r2
 801755a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801755e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8017562:	da1a      	bge.n	801759a <__ieee754_atan2+0xfa>
 8017564:	2800      	cmp	r0, #0
 8017566:	da01      	bge.n	801756c <__ieee754_atan2+0xcc>
 8017568:	323c      	adds	r2, #60	; 0x3c
 801756a:	db19      	blt.n	80175a0 <__ieee754_atan2+0x100>
 801756c:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8017570:	f000 fdf8 	bl	8018164 <fabs>
 8017574:	f000 fcfc 	bl	8017f70 <atan>
 8017578:	eeb0 7b40 	vmov.f64	d7, d0
 801757c:	2c01      	cmp	r4, #1
 801757e:	d012      	beq.n	80175a6 <__ieee754_atan2+0x106>
 8017580:	2c02      	cmp	r4, #2
 8017582:	d019      	beq.n	80175b8 <__ieee754_atan2+0x118>
 8017584:	2c00      	cmp	r4, #0
 8017586:	d0ab      	beq.n	80174e0 <__ieee754_atan2+0x40>
 8017588:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 80175f8 <__ieee754_atan2+0x158>
 801758c:	ee37 7b40 	vsub.f64	d7, d7, d0
 8017590:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8017600 <__ieee754_atan2+0x160>
 8017594:	ee37 7b40 	vsub.f64	d7, d7, d0
 8017598:	e7a2      	b.n	80174e0 <__ieee754_atan2+0x40>
 801759a:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80175e8 <__ieee754_atan2+0x148>
 801759e:	e7ed      	b.n	801757c <__ieee754_atan2+0xdc>
 80175a0:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8017608 <__ieee754_atan2+0x168>
 80175a4:	e7ea      	b.n	801757c <__ieee754_atan2+0xdc>
 80175a6:	ee17 1a90 	vmov	r1, s15
 80175aa:	ec53 2b17 	vmov	r2, r3, d7
 80175ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80175b2:	ec43 2b17 	vmov	d7, r2, r3
 80175b6:	e793      	b.n	80174e0 <__ieee754_atan2+0x40>
 80175b8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 80175f8 <__ieee754_atan2+0x158>
 80175bc:	ee37 7b40 	vsub.f64	d7, d7, d0
 80175c0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8017600 <__ieee754_atan2+0x160>
 80175c4:	ee30 7b47 	vsub.f64	d7, d0, d7
 80175c8:	e78a      	b.n	80174e0 <__ieee754_atan2+0x40>
 80175ca:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8017600 <__ieee754_atan2+0x160>
 80175ce:	e787      	b.n	80174e0 <__ieee754_atan2+0x40>
 80175d0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8017610 <__ieee754_atan2+0x170>
 80175d4:	e784      	b.n	80174e0 <__ieee754_atan2+0x40>
 80175d6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8017608 <__ieee754_atan2+0x168>
 80175da:	e781      	b.n	80174e0 <__ieee754_atan2+0x40>
 80175dc:	f3af 8000 	nop.w
 80175e0:	54442d18 	.word	0x54442d18
 80175e4:	c00921fb 	.word	0xc00921fb
 80175e8:	54442d18 	.word	0x54442d18
 80175ec:	3ff921fb 	.word	0x3ff921fb
 80175f0:	54442d18 	.word	0x54442d18
 80175f4:	bff921fb 	.word	0xbff921fb
 80175f8:	33145c07 	.word	0x33145c07
 80175fc:	3ca1a626 	.word	0x3ca1a626
 8017600:	54442d18 	.word	0x54442d18
 8017604:	400921fb 	.word	0x400921fb
	...
 8017610:	54442d18 	.word	0x54442d18
 8017614:	3fe921fb 	.word	0x3fe921fb
 8017618:	7ff00000 	.word	0x7ff00000
 801761c:	08018440 	.word	0x08018440
 8017620:	08018458 	.word	0x08018458
 8017624:	00000000 	.word	0x00000000

08017628 <__ieee754_rem_pio2>:
 8017628:	b570      	push	{r4, r5, r6, lr}
 801762a:	eeb0 7b40 	vmov.f64	d7, d0
 801762e:	ee17 5a90 	vmov	r5, s15
 8017632:	4b99      	ldr	r3, [pc, #612]	; (8017898 <__ieee754_rem_pio2+0x270>)
 8017634:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017638:	429e      	cmp	r6, r3
 801763a:	b088      	sub	sp, #32
 801763c:	4604      	mov	r4, r0
 801763e:	dc07      	bgt.n	8017650 <__ieee754_rem_pio2+0x28>
 8017640:	2200      	movs	r2, #0
 8017642:	2300      	movs	r3, #0
 8017644:	ed84 0b00 	vstr	d0, [r4]
 8017648:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801764c:	2000      	movs	r0, #0
 801764e:	e01b      	b.n	8017688 <__ieee754_rem_pio2+0x60>
 8017650:	4b92      	ldr	r3, [pc, #584]	; (801789c <__ieee754_rem_pio2+0x274>)
 8017652:	429e      	cmp	r6, r3
 8017654:	dc3b      	bgt.n	80176ce <__ieee754_rem_pio2+0xa6>
 8017656:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801765a:	2d00      	cmp	r5, #0
 801765c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8017858 <__ieee754_rem_pio2+0x230>
 8017660:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8017664:	dd19      	ble.n	801769a <__ieee754_rem_pio2+0x72>
 8017666:	ee30 7b46 	vsub.f64	d7, d0, d6
 801766a:	429e      	cmp	r6, r3
 801766c:	d00e      	beq.n	801768c <__ieee754_rem_pio2+0x64>
 801766e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8017860 <__ieee754_rem_pio2+0x238>
 8017672:	ee37 5b46 	vsub.f64	d5, d7, d6
 8017676:	ee37 7b45 	vsub.f64	d7, d7, d5
 801767a:	ed84 5b00 	vstr	d5, [r4]
 801767e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017682:	ed84 7b02 	vstr	d7, [r4, #8]
 8017686:	2001      	movs	r0, #1
 8017688:	b008      	add	sp, #32
 801768a:	bd70      	pop	{r4, r5, r6, pc}
 801768c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017868 <__ieee754_rem_pio2+0x240>
 8017690:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017694:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017870 <__ieee754_rem_pio2+0x248>
 8017698:	e7eb      	b.n	8017672 <__ieee754_rem_pio2+0x4a>
 801769a:	429e      	cmp	r6, r3
 801769c:	ee30 7b06 	vadd.f64	d7, d0, d6
 80176a0:	d00e      	beq.n	80176c0 <__ieee754_rem_pio2+0x98>
 80176a2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8017860 <__ieee754_rem_pio2+0x238>
 80176a6:	ee37 5b06 	vadd.f64	d5, d7, d6
 80176aa:	ee37 7b45 	vsub.f64	d7, d7, d5
 80176ae:	ed84 5b00 	vstr	d5, [r4]
 80176b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80176b6:	f04f 30ff 	mov.w	r0, #4294967295
 80176ba:	ed84 7b02 	vstr	d7, [r4, #8]
 80176be:	e7e3      	b.n	8017688 <__ieee754_rem_pio2+0x60>
 80176c0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017868 <__ieee754_rem_pio2+0x240>
 80176c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80176c8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017870 <__ieee754_rem_pio2+0x248>
 80176cc:	e7eb      	b.n	80176a6 <__ieee754_rem_pio2+0x7e>
 80176ce:	4b74      	ldr	r3, [pc, #464]	; (80178a0 <__ieee754_rem_pio2+0x278>)
 80176d0:	429e      	cmp	r6, r3
 80176d2:	dc70      	bgt.n	80177b6 <__ieee754_rem_pio2+0x18e>
 80176d4:	f000 fd46 	bl	8018164 <fabs>
 80176d8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80176dc:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8017878 <__ieee754_rem_pio2+0x250>
 80176e0:	eea0 7b06 	vfma.f64	d7, d0, d6
 80176e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80176e8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80176ec:	ee17 0a90 	vmov	r0, s15
 80176f0:	eeb1 4b45 	vneg.f64	d4, d5
 80176f4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017858 <__ieee754_rem_pio2+0x230>
 80176f8:	eea5 0b47 	vfms.f64	d0, d5, d7
 80176fc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017860 <__ieee754_rem_pio2+0x238>
 8017700:	281f      	cmp	r0, #31
 8017702:	ee25 7b07 	vmul.f64	d7, d5, d7
 8017706:	ee30 6b47 	vsub.f64	d6, d0, d7
 801770a:	dc08      	bgt.n	801771e <__ieee754_rem_pio2+0xf6>
 801770c:	4b65      	ldr	r3, [pc, #404]	; (80178a4 <__ieee754_rem_pio2+0x27c>)
 801770e:	1e42      	subs	r2, r0, #1
 8017710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017714:	42b3      	cmp	r3, r6
 8017716:	d002      	beq.n	801771e <__ieee754_rem_pio2+0xf6>
 8017718:	ed84 6b00 	vstr	d6, [r4]
 801771c:	e026      	b.n	801776c <__ieee754_rem_pio2+0x144>
 801771e:	ee16 3a90 	vmov	r3, s13
 8017722:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8017726:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801772a:	2b10      	cmp	r3, #16
 801772c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8017730:	ddf2      	ble.n	8017718 <__ieee754_rem_pio2+0xf0>
 8017732:	eeb0 6b40 	vmov.f64	d6, d0
 8017736:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8017868 <__ieee754_rem_pio2+0x240>
 801773a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8017870 <__ieee754_rem_pio2+0x248>
 801773e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8017742:	ee30 0b46 	vsub.f64	d0, d0, d6
 8017746:	eea4 0b07 	vfma.f64	d0, d4, d7
 801774a:	eeb0 7b40 	vmov.f64	d7, d0
 801774e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8017752:	ee36 3b47 	vsub.f64	d3, d6, d7
 8017756:	ee13 3a90 	vmov	r3, s7
 801775a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801775e:	1ad3      	subs	r3, r2, r3
 8017760:	2b31      	cmp	r3, #49	; 0x31
 8017762:	dc17      	bgt.n	8017794 <__ieee754_rem_pio2+0x16c>
 8017764:	eeb0 0b46 	vmov.f64	d0, d6
 8017768:	ed84 3b00 	vstr	d3, [r4]
 801776c:	ed94 6b00 	vldr	d6, [r4]
 8017770:	2d00      	cmp	r5, #0
 8017772:	ee30 0b46 	vsub.f64	d0, d0, d6
 8017776:	ee30 0b47 	vsub.f64	d0, d0, d7
 801777a:	ed84 0b02 	vstr	d0, [r4, #8]
 801777e:	da83      	bge.n	8017688 <__ieee754_rem_pio2+0x60>
 8017780:	eeb1 6b46 	vneg.f64	d6, d6
 8017784:	eeb1 0b40 	vneg.f64	d0, d0
 8017788:	ed84 6b00 	vstr	d6, [r4]
 801778c:	ed84 0b02 	vstr	d0, [r4, #8]
 8017790:	4240      	negs	r0, r0
 8017792:	e779      	b.n	8017688 <__ieee754_rem_pio2+0x60>
 8017794:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8017880 <__ieee754_rem_pio2+0x258>
 8017798:	eeb0 0b46 	vmov.f64	d0, d6
 801779c:	eea4 0b03 	vfma.f64	d0, d4, d3
 80177a0:	ee36 7b40 	vsub.f64	d7, d6, d0
 80177a4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8017888 <__ieee754_rem_pio2+0x260>
 80177a8:	eea4 7b03 	vfma.f64	d7, d4, d3
 80177ac:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80177b0:	ee30 6b47 	vsub.f64	d6, d0, d7
 80177b4:	e7b0      	b.n	8017718 <__ieee754_rem_pio2+0xf0>
 80177b6:	4b3c      	ldr	r3, [pc, #240]	; (80178a8 <__ieee754_rem_pio2+0x280>)
 80177b8:	429e      	cmp	r6, r3
 80177ba:	dd06      	ble.n	80177ca <__ieee754_rem_pio2+0x1a2>
 80177bc:	ee30 7b40 	vsub.f64	d7, d0, d0
 80177c0:	ed80 7b02 	vstr	d7, [r0, #8]
 80177c4:	ed80 7b00 	vstr	d7, [r0]
 80177c8:	e740      	b.n	801764c <__ieee754_rem_pio2+0x24>
 80177ca:	1532      	asrs	r2, r6, #20
 80177cc:	ee10 0a10 	vmov	r0, s0
 80177d0:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80177d4:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80177d8:	ec41 0b17 	vmov	d7, r0, r1
 80177dc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80177e0:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8017890 <__ieee754_rem_pio2+0x268>
 80177e4:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80177e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80177ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80177f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80177f4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80177f8:	a902      	add	r1, sp, #8
 80177fa:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 80177fe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017802:	ed8d 6b04 	vstr	d6, [sp, #16]
 8017806:	ee27 7b05 	vmul.f64	d7, d7, d5
 801780a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801780e:	2603      	movs	r6, #3
 8017810:	4608      	mov	r0, r1
 8017812:	ed91 7b04 	vldr	d7, [r1, #16]
 8017816:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801781e:	4633      	mov	r3, r6
 8017820:	f1a1 0108 	sub.w	r1, r1, #8
 8017824:	f106 36ff 	add.w	r6, r6, #4294967295
 8017828:	d0f3      	beq.n	8017812 <__ieee754_rem_pio2+0x1ea>
 801782a:	4920      	ldr	r1, [pc, #128]	; (80178ac <__ieee754_rem_pio2+0x284>)
 801782c:	9101      	str	r1, [sp, #4]
 801782e:	2102      	movs	r1, #2
 8017830:	9100      	str	r1, [sp, #0]
 8017832:	4621      	mov	r1, r4
 8017834:	f000 f8ac 	bl	8017990 <__kernel_rem_pio2>
 8017838:	2d00      	cmp	r5, #0
 801783a:	f6bf af25 	bge.w	8017688 <__ieee754_rem_pio2+0x60>
 801783e:	ed94 7b00 	vldr	d7, [r4]
 8017842:	eeb1 7b47 	vneg.f64	d7, d7
 8017846:	ed84 7b00 	vstr	d7, [r4]
 801784a:	ed94 7b02 	vldr	d7, [r4, #8]
 801784e:	eeb1 7b47 	vneg.f64	d7, d7
 8017852:	ed84 7b02 	vstr	d7, [r4, #8]
 8017856:	e79b      	b.n	8017790 <__ieee754_rem_pio2+0x168>
 8017858:	54400000 	.word	0x54400000
 801785c:	3ff921fb 	.word	0x3ff921fb
 8017860:	1a626331 	.word	0x1a626331
 8017864:	3dd0b461 	.word	0x3dd0b461
 8017868:	1a600000 	.word	0x1a600000
 801786c:	3dd0b461 	.word	0x3dd0b461
 8017870:	2e037073 	.word	0x2e037073
 8017874:	3ba3198a 	.word	0x3ba3198a
 8017878:	6dc9c883 	.word	0x6dc9c883
 801787c:	3fe45f30 	.word	0x3fe45f30
 8017880:	2e000000 	.word	0x2e000000
 8017884:	3ba3198a 	.word	0x3ba3198a
 8017888:	252049c1 	.word	0x252049c1
 801788c:	397b839a 	.word	0x397b839a
 8017890:	00000000 	.word	0x00000000
 8017894:	41700000 	.word	0x41700000
 8017898:	3fe921fb 	.word	0x3fe921fb
 801789c:	4002d97b 	.word	0x4002d97b
 80178a0:	413921fb 	.word	0x413921fb
 80178a4:	08018470 	.word	0x08018470
 80178a8:	7fefffff 	.word	0x7fefffff
 80178ac:	080184f0 	.word	0x080184f0

080178b0 <__ieee754_sqrt>:
 80178b0:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80178b4:	4770      	bx	lr
	...

080178b8 <__kernel_cos>:
 80178b8:	ee10 1a90 	vmov	r1, s1
 80178bc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80178c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80178c4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80178c8:	da05      	bge.n	80178d6 <__kernel_cos+0x1e>
 80178ca:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80178ce:	ee17 3a90 	vmov	r3, s15
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d03d      	beq.n	8017952 <__kernel_cos+0x9a>
 80178d6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80178da:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8017958 <__kernel_cos+0xa0>
 80178de:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017960 <__kernel_cos+0xa8>
 80178e2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80178e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017968 <__kernel_cos+0xb0>
 80178ea:	eea6 7b03 	vfma.f64	d7, d6, d3
 80178ee:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017970 <__kernel_cos+0xb8>
 80178f2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80178f6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017978 <__kernel_cos+0xc0>
 80178fa:	4b23      	ldr	r3, [pc, #140]	; (8017988 <__kernel_cos+0xd0>)
 80178fc:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017900:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8017980 <__kernel_cos+0xc8>
 8017904:	4299      	cmp	r1, r3
 8017906:	eea7 6b03 	vfma.f64	d6, d7, d3
 801790a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801790e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8017912:	ee23 7b07 	vmul.f64	d7, d3, d7
 8017916:	ee21 6b40 	vnmul.f64	d6, d1, d0
 801791a:	eea3 6b05 	vfma.f64	d6, d3, d5
 801791e:	dc04      	bgt.n	801792a <__kernel_cos+0x72>
 8017920:	ee37 6b46 	vsub.f64	d6, d7, d6
 8017924:	ee34 0b46 	vsub.f64	d0, d4, d6
 8017928:	4770      	bx	lr
 801792a:	4b18      	ldr	r3, [pc, #96]	; (801798c <__kernel_cos+0xd4>)
 801792c:	4299      	cmp	r1, r3
 801792e:	dc0d      	bgt.n	801794c <__kernel_cos+0x94>
 8017930:	2200      	movs	r2, #0
 8017932:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8017936:	ec43 2b15 	vmov	d5, r2, r3
 801793a:	ee34 0b45 	vsub.f64	d0, d4, d5
 801793e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017942:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017946:	ee30 0b47 	vsub.f64	d0, d0, d7
 801794a:	4770      	bx	lr
 801794c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8017950:	e7f3      	b.n	801793a <__kernel_cos+0x82>
 8017952:	eeb0 0b44 	vmov.f64	d0, d4
 8017956:	4770      	bx	lr
 8017958:	be8838d4 	.word	0xbe8838d4
 801795c:	bda8fae9 	.word	0xbda8fae9
 8017960:	bdb4b1c4 	.word	0xbdb4b1c4
 8017964:	3e21ee9e 	.word	0x3e21ee9e
 8017968:	809c52ad 	.word	0x809c52ad
 801796c:	be927e4f 	.word	0xbe927e4f
 8017970:	19cb1590 	.word	0x19cb1590
 8017974:	3efa01a0 	.word	0x3efa01a0
 8017978:	16c15177 	.word	0x16c15177
 801797c:	bf56c16c 	.word	0xbf56c16c
 8017980:	5555554c 	.word	0x5555554c
 8017984:	3fa55555 	.word	0x3fa55555
 8017988:	3fd33332 	.word	0x3fd33332
 801798c:	3fe90000 	.word	0x3fe90000

08017990 <__kernel_rem_pio2>:
 8017990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017994:	ed2d 8b06 	vpush	{d8-d10}
 8017998:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801799c:	460f      	mov	r7, r1
 801799e:	9002      	str	r0, [sp, #8]
 80179a0:	49c5      	ldr	r1, [pc, #788]	; (8017cb8 <__kernel_rem_pio2+0x328>)
 80179a2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80179a4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80179a8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80179ac:	9301      	str	r3, [sp, #4]
 80179ae:	f112 0f14 	cmn.w	r2, #20
 80179b2:	bfa8      	it	ge
 80179b4:	2018      	movge	r0, #24
 80179b6:	f103 31ff 	add.w	r1, r3, #4294967295
 80179ba:	bfb8      	it	lt
 80179bc:	2000      	movlt	r0, #0
 80179be:	f06f 0417 	mvn.w	r4, #23
 80179c2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8017ca0 <__kernel_rem_pio2+0x310>
 80179c6:	bfa4      	itt	ge
 80179c8:	f1a2 0a03 	subge.w	sl, r2, #3
 80179cc:	fb9a f0f0 	sdivge	r0, sl, r0
 80179d0:	fb00 4404 	mla	r4, r0, r4, r4
 80179d4:	1a46      	subs	r6, r0, r1
 80179d6:	4414      	add	r4, r2
 80179d8:	eb09 0c01 	add.w	ip, r9, r1
 80179dc:	ad1a      	add	r5, sp, #104	; 0x68
 80179de:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80179e2:	2200      	movs	r2, #0
 80179e4:	4562      	cmp	r2, ip
 80179e6:	dd10      	ble.n	8017a0a <__kernel_rem_pio2+0x7a>
 80179e8:	9a01      	ldr	r2, [sp, #4]
 80179ea:	ab1a      	add	r3, sp, #104	; 0x68
 80179ec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80179f0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80179f4:	f04f 0c00 	mov.w	ip, #0
 80179f8:	45cc      	cmp	ip, r9
 80179fa:	dc26      	bgt.n	8017a4a <__kernel_rem_pio2+0xba>
 80179fc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8017ca0 <__kernel_rem_pio2+0x310>
 8017a00:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8017a04:	4616      	mov	r6, r2
 8017a06:	2500      	movs	r5, #0
 8017a08:	e015      	b.n	8017a36 <__kernel_rem_pio2+0xa6>
 8017a0a:	42d6      	cmn	r6, r2
 8017a0c:	d409      	bmi.n	8017a22 <__kernel_rem_pio2+0x92>
 8017a0e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8017a12:	ee07 3a90 	vmov	s15, r3
 8017a16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017a1a:	eca5 7b02 	vstmia	r5!, {d7}
 8017a1e:	3201      	adds	r2, #1
 8017a20:	e7e0      	b.n	80179e4 <__kernel_rem_pio2+0x54>
 8017a22:	eeb0 7b46 	vmov.f64	d7, d6
 8017a26:	e7f8      	b.n	8017a1a <__kernel_rem_pio2+0x8a>
 8017a28:	ecb8 5b02 	vldmia	r8!, {d5}
 8017a2c:	ed96 6b00 	vldr	d6, [r6]
 8017a30:	3501      	adds	r5, #1
 8017a32:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017a36:	428d      	cmp	r5, r1
 8017a38:	f1a6 0608 	sub.w	r6, r6, #8
 8017a3c:	ddf4      	ble.n	8017a28 <__kernel_rem_pio2+0x98>
 8017a3e:	ecaa 7b02 	vstmia	sl!, {d7}
 8017a42:	f10c 0c01 	add.w	ip, ip, #1
 8017a46:	3208      	adds	r2, #8
 8017a48:	e7d6      	b.n	80179f8 <__kernel_rem_pio2+0x68>
 8017a4a:	ab06      	add	r3, sp, #24
 8017a4c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8017ca8 <__kernel_rem_pio2+0x318>
 8017a50:	ed9f ab97 	vldr	d10, [pc, #604]	; 8017cb0 <__kernel_rem_pio2+0x320>
 8017a54:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8017a58:	9303      	str	r3, [sp, #12]
 8017a5a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8017a5e:	464d      	mov	r5, r9
 8017a60:	00eb      	lsls	r3, r5, #3
 8017a62:	9304      	str	r3, [sp, #16]
 8017a64:	ab92      	add	r3, sp, #584	; 0x248
 8017a66:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8017a6a:	f10d 0b18 	add.w	fp, sp, #24
 8017a6e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8017a70:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8017a74:	465e      	mov	r6, fp
 8017a76:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8017a7a:	4628      	mov	r0, r5
 8017a7c:	2800      	cmp	r0, #0
 8017a7e:	f1a2 0208 	sub.w	r2, r2, #8
 8017a82:	dc4c      	bgt.n	8017b1e <__kernel_rem_pio2+0x18e>
 8017a84:	4620      	mov	r0, r4
 8017a86:	9105      	str	r1, [sp, #20]
 8017a88:	f000 fbea 	bl	8018260 <scalbn>
 8017a8c:	eeb0 8b40 	vmov.f64	d8, d0
 8017a90:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8017a94:	ee28 0b00 	vmul.f64	d0, d8, d0
 8017a98:	f000 fb6e 	bl	8018178 <floor>
 8017a9c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8017aa0:	eea0 8b47 	vfms.f64	d8, d0, d7
 8017aa4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8017aa8:	2c00      	cmp	r4, #0
 8017aaa:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8017aae:	ee17 8a90 	vmov	r8, s15
 8017ab2:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017ab6:	9905      	ldr	r1, [sp, #20]
 8017ab8:	dd43      	ble.n	8017b42 <__kernel_rem_pio2+0x1b2>
 8017aba:	1e68      	subs	r0, r5, #1
 8017abc:	ab06      	add	r3, sp, #24
 8017abe:	f1c4 0c18 	rsb	ip, r4, #24
 8017ac2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017ac6:	fa46 f20c 	asr.w	r2, r6, ip
 8017aca:	4490      	add	r8, r2
 8017acc:	fa02 f20c 	lsl.w	r2, r2, ip
 8017ad0:	1ab6      	subs	r6, r6, r2
 8017ad2:	f1c4 0217 	rsb	r2, r4, #23
 8017ad6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8017ada:	4116      	asrs	r6, r2
 8017adc:	2e00      	cmp	r6, #0
 8017ade:	dd3f      	ble.n	8017b60 <__kernel_rem_pio2+0x1d0>
 8017ae0:	f04f 0c00 	mov.w	ip, #0
 8017ae4:	f108 0801 	add.w	r8, r8, #1
 8017ae8:	4660      	mov	r0, ip
 8017aea:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8017aee:	4565      	cmp	r5, ip
 8017af0:	dc6e      	bgt.n	8017bd0 <__kernel_rem_pio2+0x240>
 8017af2:	2c00      	cmp	r4, #0
 8017af4:	dd04      	ble.n	8017b00 <__kernel_rem_pio2+0x170>
 8017af6:	2c01      	cmp	r4, #1
 8017af8:	d07f      	beq.n	8017bfa <__kernel_rem_pio2+0x26a>
 8017afa:	2c02      	cmp	r4, #2
 8017afc:	f000 8087 	beq.w	8017c0e <__kernel_rem_pio2+0x27e>
 8017b00:	2e02      	cmp	r6, #2
 8017b02:	d12d      	bne.n	8017b60 <__kernel_rem_pio2+0x1d0>
 8017b04:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017b08:	ee30 8b48 	vsub.f64	d8, d0, d8
 8017b0c:	b340      	cbz	r0, 8017b60 <__kernel_rem_pio2+0x1d0>
 8017b0e:	4620      	mov	r0, r4
 8017b10:	9105      	str	r1, [sp, #20]
 8017b12:	f000 fba5 	bl	8018260 <scalbn>
 8017b16:	9905      	ldr	r1, [sp, #20]
 8017b18:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017b1c:	e020      	b.n	8017b60 <__kernel_rem_pio2+0x1d0>
 8017b1e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8017b22:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017b26:	3801      	subs	r0, #1
 8017b28:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8017b2c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8017b30:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017b34:	eca6 0a01 	vstmia	r6!, {s0}
 8017b38:	ed92 0b00 	vldr	d0, [r2]
 8017b3c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8017b40:	e79c      	b.n	8017a7c <__kernel_rem_pio2+0xec>
 8017b42:	d105      	bne.n	8017b50 <__kernel_rem_pio2+0x1c0>
 8017b44:	1e6a      	subs	r2, r5, #1
 8017b46:	ab06      	add	r3, sp, #24
 8017b48:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017b4c:	15f6      	asrs	r6, r6, #23
 8017b4e:	e7c5      	b.n	8017adc <__kernel_rem_pio2+0x14c>
 8017b50:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017b54:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b5c:	da36      	bge.n	8017bcc <__kernel_rem_pio2+0x23c>
 8017b5e:	2600      	movs	r6, #0
 8017b60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b68:	f040 80aa 	bne.w	8017cc0 <__kernel_rem_pio2+0x330>
 8017b6c:	f105 3bff 	add.w	fp, r5, #4294967295
 8017b70:	4658      	mov	r0, fp
 8017b72:	2200      	movs	r2, #0
 8017b74:	4548      	cmp	r0, r9
 8017b76:	da52      	bge.n	8017c1e <__kernel_rem_pio2+0x28e>
 8017b78:	2a00      	cmp	r2, #0
 8017b7a:	f000 8081 	beq.w	8017c80 <__kernel_rem_pio2+0x2f0>
 8017b7e:	ab06      	add	r3, sp, #24
 8017b80:	3c18      	subs	r4, #24
 8017b82:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	f000 8087 	beq.w	8017c9a <__kernel_rem_pio2+0x30a>
 8017b8c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017b90:	4620      	mov	r0, r4
 8017b92:	f000 fb65 	bl	8018260 <scalbn>
 8017b96:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8017b9a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8017ca8 <__kernel_rem_pio2+0x318>
 8017b9e:	a96a      	add	r1, sp, #424	; 0x1a8
 8017ba0:	f103 0208 	add.w	r2, r3, #8
 8017ba4:	1888      	adds	r0, r1, r2
 8017ba6:	4659      	mov	r1, fp
 8017ba8:	2900      	cmp	r1, #0
 8017baa:	f280 80b7 	bge.w	8017d1c <__kernel_rem_pio2+0x38c>
 8017bae:	4659      	mov	r1, fp
 8017bb0:	2900      	cmp	r1, #0
 8017bb2:	f2c0 80d5 	blt.w	8017d60 <__kernel_rem_pio2+0x3d0>
 8017bb6:	a86a      	add	r0, sp, #424	; 0x1a8
 8017bb8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8017bbc:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8017ca0 <__kernel_rem_pio2+0x310>
 8017bc0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8017cbc <__kernel_rem_pio2+0x32c>
 8017bc4:	2400      	movs	r4, #0
 8017bc6:	ebab 0001 	sub.w	r0, fp, r1
 8017bca:	e0be      	b.n	8017d4a <__kernel_rem_pio2+0x3ba>
 8017bcc:	2602      	movs	r6, #2
 8017bce:	e787      	b.n	8017ae0 <__kernel_rem_pio2+0x150>
 8017bd0:	f8db 2000 	ldr.w	r2, [fp]
 8017bd4:	b958      	cbnz	r0, 8017bee <__kernel_rem_pio2+0x25e>
 8017bd6:	b122      	cbz	r2, 8017be2 <__kernel_rem_pio2+0x252>
 8017bd8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8017bdc:	f8cb 2000 	str.w	r2, [fp]
 8017be0:	2201      	movs	r2, #1
 8017be2:	f10c 0c01 	add.w	ip, ip, #1
 8017be6:	f10b 0b04 	add.w	fp, fp, #4
 8017bea:	4610      	mov	r0, r2
 8017bec:	e77f      	b.n	8017aee <__kernel_rem_pio2+0x15e>
 8017bee:	ebae 0202 	sub.w	r2, lr, r2
 8017bf2:	f8cb 2000 	str.w	r2, [fp]
 8017bf6:	4602      	mov	r2, r0
 8017bf8:	e7f3      	b.n	8017be2 <__kernel_rem_pio2+0x252>
 8017bfa:	f105 3cff 	add.w	ip, r5, #4294967295
 8017bfe:	ab06      	add	r3, sp, #24
 8017c00:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8017c04:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8017c08:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8017c0c:	e778      	b.n	8017b00 <__kernel_rem_pio2+0x170>
 8017c0e:	f105 3cff 	add.w	ip, r5, #4294967295
 8017c12:	ab06      	add	r3, sp, #24
 8017c14:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8017c18:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8017c1c:	e7f4      	b.n	8017c08 <__kernel_rem_pio2+0x278>
 8017c1e:	ab06      	add	r3, sp, #24
 8017c20:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017c24:	3801      	subs	r0, #1
 8017c26:	431a      	orrs	r2, r3
 8017c28:	e7a4      	b.n	8017b74 <__kernel_rem_pio2+0x1e4>
 8017c2a:	f10c 0c01 	add.w	ip, ip, #1
 8017c2e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8017c32:	2800      	cmp	r0, #0
 8017c34:	d0f9      	beq.n	8017c2a <__kernel_rem_pio2+0x29a>
 8017c36:	9b04      	ldr	r3, [sp, #16]
 8017c38:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8017c3c:	eb0d 0203 	add.w	r2, sp, r3
 8017c40:	9b01      	ldr	r3, [sp, #4]
 8017c42:	18e8      	adds	r0, r5, r3
 8017c44:	ab1a      	add	r3, sp, #104	; 0x68
 8017c46:	1c6e      	adds	r6, r5, #1
 8017c48:	3a98      	subs	r2, #152	; 0x98
 8017c4a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8017c4e:	4465      	add	r5, ip
 8017c50:	42b5      	cmp	r5, r6
 8017c52:	f6ff af05 	blt.w	8017a60 <__kernel_rem_pio2+0xd0>
 8017c56:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8017c5a:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017c5e:	ee07 3a90 	vmov	s15, r3
 8017c62:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017c66:	f04f 0c00 	mov.w	ip, #0
 8017c6a:	eca0 7b02 	vstmia	r0!, {d7}
 8017c6e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8017ca0 <__kernel_rem_pio2+0x310>
 8017c72:	4680      	mov	r8, r0
 8017c74:	458c      	cmp	ip, r1
 8017c76:	dd07      	ble.n	8017c88 <__kernel_rem_pio2+0x2f8>
 8017c78:	eca2 7b02 	vstmia	r2!, {d7}
 8017c7c:	3601      	adds	r6, #1
 8017c7e:	e7e7      	b.n	8017c50 <__kernel_rem_pio2+0x2c0>
 8017c80:	9a03      	ldr	r2, [sp, #12]
 8017c82:	f04f 0c01 	mov.w	ip, #1
 8017c86:	e7d2      	b.n	8017c2e <__kernel_rem_pio2+0x29e>
 8017c88:	ecbe 5b02 	vldmia	lr!, {d5}
 8017c8c:	ed38 6b02 	vldmdb	r8!, {d6}
 8017c90:	f10c 0c01 	add.w	ip, ip, #1
 8017c94:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017c98:	e7ec      	b.n	8017c74 <__kernel_rem_pio2+0x2e4>
 8017c9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017c9e:	e76e      	b.n	8017b7e <__kernel_rem_pio2+0x1ee>
	...
 8017cac:	3e700000 	.word	0x3e700000
 8017cb0:	00000000 	.word	0x00000000
 8017cb4:	41700000 	.word	0x41700000
 8017cb8:	08018638 	.word	0x08018638
 8017cbc:	080185f8 	.word	0x080185f8
 8017cc0:	4260      	negs	r0, r4
 8017cc2:	eeb0 0b48 	vmov.f64	d0, d8
 8017cc6:	f000 facb 	bl	8018260 <scalbn>
 8017cca:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8017ea8 <__kernel_rem_pio2+0x518>
 8017cce:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8017cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cd6:	db18      	blt.n	8017d0a <__kernel_rem_pio2+0x37a>
 8017cd8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8017eb0 <__kernel_rem_pio2+0x520>
 8017cdc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017ce0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017ce4:	aa06      	add	r2, sp, #24
 8017ce6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8017cea:	eea5 0b46 	vfms.f64	d0, d5, d6
 8017cee:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017cf2:	f105 0b01 	add.w	fp, r5, #1
 8017cf6:	ee10 3a10 	vmov	r3, s0
 8017cfa:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017cfe:	ee17 3a10 	vmov	r3, s14
 8017d02:	3418      	adds	r4, #24
 8017d04:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8017d08:	e740      	b.n	8017b8c <__kernel_rem_pio2+0x1fc>
 8017d0a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017d0e:	aa06      	add	r2, sp, #24
 8017d10:	ee10 3a10 	vmov	r3, s0
 8017d14:	46ab      	mov	fp, r5
 8017d16:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017d1a:	e737      	b.n	8017b8c <__kernel_rem_pio2+0x1fc>
 8017d1c:	ac06      	add	r4, sp, #24
 8017d1e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8017d22:	9401      	str	r4, [sp, #4]
 8017d24:	ee07 4a90 	vmov	s15, r4
 8017d28:	3901      	subs	r1, #1
 8017d2a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017d2e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8017d32:	ee20 0b06 	vmul.f64	d0, d0, d6
 8017d36:	ed20 7b02 	vstmdb	r0!, {d7}
 8017d3a:	e735      	b.n	8017ba8 <__kernel_rem_pio2+0x218>
 8017d3c:	ecbc 5b02 	vldmia	ip!, {d5}
 8017d40:	ecb5 6b02 	vldmia	r5!, {d6}
 8017d44:	3401      	adds	r4, #1
 8017d46:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017d4a:	454c      	cmp	r4, r9
 8017d4c:	dc01      	bgt.n	8017d52 <__kernel_rem_pio2+0x3c2>
 8017d4e:	4284      	cmp	r4, r0
 8017d50:	ddf4      	ble.n	8017d3c <__kernel_rem_pio2+0x3ac>
 8017d52:	ac42      	add	r4, sp, #264	; 0x108
 8017d54:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8017d58:	ed80 7b00 	vstr	d7, [r0]
 8017d5c:	3901      	subs	r1, #1
 8017d5e:	e727      	b.n	8017bb0 <__kernel_rem_pio2+0x220>
 8017d60:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8017d62:	2902      	cmp	r1, #2
 8017d64:	dc0a      	bgt.n	8017d7c <__kernel_rem_pio2+0x3ec>
 8017d66:	2900      	cmp	r1, #0
 8017d68:	dc2c      	bgt.n	8017dc4 <__kernel_rem_pio2+0x434>
 8017d6a:	d045      	beq.n	8017df8 <__kernel_rem_pio2+0x468>
 8017d6c:	f008 0007 	and.w	r0, r8, #7
 8017d70:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8017d74:	ecbd 8b06 	vpop	{d8-d10}
 8017d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d7c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8017d7e:	2a03      	cmp	r2, #3
 8017d80:	d1f4      	bne.n	8017d6c <__kernel_rem_pio2+0x3dc>
 8017d82:	aa42      	add	r2, sp, #264	; 0x108
 8017d84:	4413      	add	r3, r2
 8017d86:	461a      	mov	r2, r3
 8017d88:	4619      	mov	r1, r3
 8017d8a:	4658      	mov	r0, fp
 8017d8c:	2800      	cmp	r0, #0
 8017d8e:	f1a1 0108 	sub.w	r1, r1, #8
 8017d92:	dc54      	bgt.n	8017e3e <__kernel_rem_pio2+0x4ae>
 8017d94:	4659      	mov	r1, fp
 8017d96:	2901      	cmp	r1, #1
 8017d98:	f1a2 0208 	sub.w	r2, r2, #8
 8017d9c:	dc5f      	bgt.n	8017e5e <__kernel_rem_pio2+0x4ce>
 8017d9e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8017eb8 <__kernel_rem_pio2+0x528>
 8017da2:	3308      	adds	r3, #8
 8017da4:	f1bb 0f01 	cmp.w	fp, #1
 8017da8:	dc69      	bgt.n	8017e7e <__kernel_rem_pio2+0x4ee>
 8017daa:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8017dae:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8017db2:	2e00      	cmp	r6, #0
 8017db4:	d16a      	bne.n	8017e8c <__kernel_rem_pio2+0x4fc>
 8017db6:	ed87 5b00 	vstr	d5, [r7]
 8017dba:	ed87 6b02 	vstr	d6, [r7, #8]
 8017dbe:	ed87 7b04 	vstr	d7, [r7, #16]
 8017dc2:	e7d3      	b.n	8017d6c <__kernel_rem_pio2+0x3dc>
 8017dc4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8017eb8 <__kernel_rem_pio2+0x528>
 8017dc8:	ab42      	add	r3, sp, #264	; 0x108
 8017dca:	441a      	add	r2, r3
 8017dcc:	465b      	mov	r3, fp
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	da26      	bge.n	8017e20 <__kernel_rem_pio2+0x490>
 8017dd2:	b35e      	cbz	r6, 8017e2c <__kernel_rem_pio2+0x49c>
 8017dd4:	eeb1 7b46 	vneg.f64	d7, d6
 8017dd8:	ed87 7b00 	vstr	d7, [r7]
 8017ddc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8017de0:	aa44      	add	r2, sp, #272	; 0x110
 8017de2:	2301      	movs	r3, #1
 8017de4:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017de8:	459b      	cmp	fp, r3
 8017dea:	da22      	bge.n	8017e32 <__kernel_rem_pio2+0x4a2>
 8017dec:	b10e      	cbz	r6, 8017df2 <__kernel_rem_pio2+0x462>
 8017dee:	eeb1 7b47 	vneg.f64	d7, d7
 8017df2:	ed87 7b02 	vstr	d7, [r7, #8]
 8017df6:	e7b9      	b.n	8017d6c <__kernel_rem_pio2+0x3dc>
 8017df8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8017eb8 <__kernel_rem_pio2+0x528>
 8017dfc:	ab42      	add	r3, sp, #264	; 0x108
 8017dfe:	441a      	add	r2, r3
 8017e00:	f1bb 0f00 	cmp.w	fp, #0
 8017e04:	da05      	bge.n	8017e12 <__kernel_rem_pio2+0x482>
 8017e06:	b10e      	cbz	r6, 8017e0c <__kernel_rem_pio2+0x47c>
 8017e08:	eeb1 7b47 	vneg.f64	d7, d7
 8017e0c:	ed87 7b00 	vstr	d7, [r7]
 8017e10:	e7ac      	b.n	8017d6c <__kernel_rem_pio2+0x3dc>
 8017e12:	ed32 6b02 	vldmdb	r2!, {d6}
 8017e16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017e1a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017e1e:	e7ef      	b.n	8017e00 <__kernel_rem_pio2+0x470>
 8017e20:	ed32 7b02 	vldmdb	r2!, {d7}
 8017e24:	3b01      	subs	r3, #1
 8017e26:	ee36 6b07 	vadd.f64	d6, d6, d7
 8017e2a:	e7d0      	b.n	8017dce <__kernel_rem_pio2+0x43e>
 8017e2c:	eeb0 7b46 	vmov.f64	d7, d6
 8017e30:	e7d2      	b.n	8017dd8 <__kernel_rem_pio2+0x448>
 8017e32:	ecb2 6b02 	vldmia	r2!, {d6}
 8017e36:	3301      	adds	r3, #1
 8017e38:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017e3c:	e7d4      	b.n	8017de8 <__kernel_rem_pio2+0x458>
 8017e3e:	ed91 7b00 	vldr	d7, [r1]
 8017e42:	ed91 5b02 	vldr	d5, [r1, #8]
 8017e46:	3801      	subs	r0, #1
 8017e48:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017e4c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017e50:	ed81 6b00 	vstr	d6, [r1]
 8017e54:	ee37 7b05 	vadd.f64	d7, d7, d5
 8017e58:	ed81 7b02 	vstr	d7, [r1, #8]
 8017e5c:	e796      	b.n	8017d8c <__kernel_rem_pio2+0x3fc>
 8017e5e:	ed92 7b00 	vldr	d7, [r2]
 8017e62:	ed92 5b02 	vldr	d5, [r2, #8]
 8017e66:	3901      	subs	r1, #1
 8017e68:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017e6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017e70:	ed82 6b00 	vstr	d6, [r2]
 8017e74:	ee37 7b05 	vadd.f64	d7, d7, d5
 8017e78:	ed82 7b02 	vstr	d7, [r2, #8]
 8017e7c:	e78b      	b.n	8017d96 <__kernel_rem_pio2+0x406>
 8017e7e:	ed33 6b02 	vldmdb	r3!, {d6}
 8017e82:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017e86:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017e8a:	e78b      	b.n	8017da4 <__kernel_rem_pio2+0x414>
 8017e8c:	eeb1 5b45 	vneg.f64	d5, d5
 8017e90:	eeb1 6b46 	vneg.f64	d6, d6
 8017e94:	ed87 5b00 	vstr	d5, [r7]
 8017e98:	eeb1 7b47 	vneg.f64	d7, d7
 8017e9c:	ed87 6b02 	vstr	d6, [r7, #8]
 8017ea0:	e78d      	b.n	8017dbe <__kernel_rem_pio2+0x42e>
 8017ea2:	bf00      	nop
 8017ea4:	f3af 8000 	nop.w
 8017ea8:	00000000 	.word	0x00000000
 8017eac:	41700000 	.word	0x41700000
 8017eb0:	00000000 	.word	0x00000000
 8017eb4:	3e700000 	.word	0x3e700000
	...

08017ec0 <__kernel_sin>:
 8017ec0:	ee10 3a90 	vmov	r3, s1
 8017ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ec8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8017ecc:	da04      	bge.n	8017ed8 <__kernel_sin+0x18>
 8017ece:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8017ed2:	ee17 3a90 	vmov	r3, s15
 8017ed6:	b35b      	cbz	r3, 8017f30 <__kernel_sin+0x70>
 8017ed8:	ee20 6b00 	vmul.f64	d6, d0, d0
 8017edc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8017ee0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8017f38 <__kernel_sin+0x78>
 8017ee4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017f40 <__kernel_sin+0x80>
 8017ee8:	eea6 4b07 	vfma.f64	d4, d6, d7
 8017eec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8017f48 <__kernel_sin+0x88>
 8017ef0:	eea4 7b06 	vfma.f64	d7, d4, d6
 8017ef4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017f50 <__kernel_sin+0x90>
 8017ef8:	eea7 4b06 	vfma.f64	d4, d7, d6
 8017efc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8017f58 <__kernel_sin+0x98>
 8017f00:	eea4 7b06 	vfma.f64	d7, d4, d6
 8017f04:	b930      	cbnz	r0, 8017f14 <__kernel_sin+0x54>
 8017f06:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017f60 <__kernel_sin+0xa0>
 8017f0a:	eea6 4b07 	vfma.f64	d4, d6, d7
 8017f0e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8017f12:	4770      	bx	lr
 8017f14:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8017f18:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8017f1c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8017f20:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8017f24:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8017f68 <__kernel_sin+0xa8>
 8017f28:	eea5 1b07 	vfma.f64	d1, d5, d7
 8017f2c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8017f30:	4770      	bx	lr
 8017f32:	bf00      	nop
 8017f34:	f3af 8000 	nop.w
 8017f38:	5acfd57c 	.word	0x5acfd57c
 8017f3c:	3de5d93a 	.word	0x3de5d93a
 8017f40:	8a2b9ceb 	.word	0x8a2b9ceb
 8017f44:	be5ae5e6 	.word	0xbe5ae5e6
 8017f48:	57b1fe7d 	.word	0x57b1fe7d
 8017f4c:	3ec71de3 	.word	0x3ec71de3
 8017f50:	19c161d5 	.word	0x19c161d5
 8017f54:	bf2a01a0 	.word	0xbf2a01a0
 8017f58:	1110f8a6 	.word	0x1110f8a6
 8017f5c:	3f811111 	.word	0x3f811111
 8017f60:	55555549 	.word	0x55555549
 8017f64:	bfc55555 	.word	0xbfc55555
 8017f68:	55555549 	.word	0x55555549
 8017f6c:	3fc55555 	.word	0x3fc55555

08017f70 <atan>:
 8017f70:	b538      	push	{r3, r4, r5, lr}
 8017f72:	eeb0 7b40 	vmov.f64	d7, d0
 8017f76:	ee17 5a90 	vmov	r5, s15
 8017f7a:	4b73      	ldr	r3, [pc, #460]	; (8018148 <atan+0x1d8>)
 8017f7c:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017f80:	429c      	cmp	r4, r3
 8017f82:	dd13      	ble.n	8017fac <atan+0x3c>
 8017f84:	4b71      	ldr	r3, [pc, #452]	; (801814c <atan+0x1dc>)
 8017f86:	429c      	cmp	r4, r3
 8017f88:	dc03      	bgt.n	8017f92 <atan+0x22>
 8017f8a:	d107      	bne.n	8017f9c <atan+0x2c>
 8017f8c:	ee10 3a10 	vmov	r3, s0
 8017f90:	b123      	cbz	r3, 8017f9c <atan+0x2c>
 8017f92:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017f96:	eeb0 0b47 	vmov.f64	d0, d7
 8017f9a:	bd38      	pop	{r3, r4, r5, pc}
 8017f9c:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80180d8 <atan+0x168>
 8017fa0:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80180e0 <atan+0x170>
 8017fa4:	2d00      	cmp	r5, #0
 8017fa6:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8017faa:	e7f4      	b.n	8017f96 <atan+0x26>
 8017fac:	4b68      	ldr	r3, [pc, #416]	; (8018150 <atan+0x1e0>)
 8017fae:	429c      	cmp	r4, r3
 8017fb0:	dc11      	bgt.n	8017fd6 <atan+0x66>
 8017fb2:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017fb6:	429c      	cmp	r4, r3
 8017fb8:	dc0a      	bgt.n	8017fd0 <atan+0x60>
 8017fba:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8017fbe:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80180e8 <atan+0x178>
 8017fc2:	ee30 6b06 	vadd.f64	d6, d0, d6
 8017fc6:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8017fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fce:	dce2      	bgt.n	8017f96 <atan+0x26>
 8017fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8017fd4:	e013      	b.n	8017ffe <atan+0x8e>
 8017fd6:	f000 f8c5 	bl	8018164 <fabs>
 8017fda:	4b5e      	ldr	r3, [pc, #376]	; (8018154 <atan+0x1e4>)
 8017fdc:	429c      	cmp	r4, r3
 8017fde:	dc4f      	bgt.n	8018080 <atan+0x110>
 8017fe0:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8017fe4:	429c      	cmp	r4, r3
 8017fe6:	dc41      	bgt.n	801806c <atan+0xfc>
 8017fe8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8017fec:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	eea0 6b07 	vfma.f64	d6, d0, d7
 8017ff6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8017ffa:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8017ffe:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80180f0 <atan+0x180>
 8018002:	ee27 4b07 	vmul.f64	d4, d7, d7
 8018006:	ee24 5b04 	vmul.f64	d5, d4, d4
 801800a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 80180f8 <atan+0x188>
 801800e:	eea5 3b06 	vfma.f64	d3, d5, d6
 8018012:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8018100 <atan+0x190>
 8018016:	eea3 6b05 	vfma.f64	d6, d3, d5
 801801a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8018108 <atan+0x198>
 801801e:	eea6 3b05 	vfma.f64	d3, d6, d5
 8018022:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8018110 <atan+0x1a0>
 8018026:	eea3 6b05 	vfma.f64	d6, d3, d5
 801802a:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8018118 <atan+0x1a8>
 801802e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8018120 <atan+0x1b0>
 8018032:	eea6 3b05 	vfma.f64	d3, d6, d5
 8018036:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8018128 <atan+0x1b8>
 801803a:	eea5 2b06 	vfma.f64	d2, d5, d6
 801803e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8018130 <atan+0x1c0>
 8018042:	eea2 6b05 	vfma.f64	d6, d2, d5
 8018046:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8018138 <atan+0x1c8>
 801804a:	eea6 2b05 	vfma.f64	d2, d6, d5
 801804e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8018140 <atan+0x1d0>
 8018052:	1c5a      	adds	r2, r3, #1
 8018054:	eea2 6b05 	vfma.f64	d6, d2, d5
 8018058:	ee26 6b05 	vmul.f64	d6, d6, d5
 801805c:	eea3 6b04 	vfma.f64	d6, d3, d4
 8018060:	ee27 6b06 	vmul.f64	d6, d7, d6
 8018064:	d121      	bne.n	80180aa <atan+0x13a>
 8018066:	ee37 7b46 	vsub.f64	d7, d7, d6
 801806a:	e794      	b.n	8017f96 <atan+0x26>
 801806c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8018070:	2301      	movs	r3, #1
 8018072:	ee30 6b47 	vsub.f64	d6, d0, d7
 8018076:	ee30 0b07 	vadd.f64	d0, d0, d7
 801807a:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801807e:	e7be      	b.n	8017ffe <atan+0x8e>
 8018080:	4b35      	ldr	r3, [pc, #212]	; (8018158 <atan+0x1e8>)
 8018082:	429c      	cmp	r4, r3
 8018084:	da0b      	bge.n	801809e <atan+0x12e>
 8018086:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801808a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801808e:	ee30 5b47 	vsub.f64	d5, d0, d7
 8018092:	eea0 6b07 	vfma.f64	d6, d0, d7
 8018096:	2302      	movs	r3, #2
 8018098:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801809c:	e7af      	b.n	8017ffe <atan+0x8e>
 801809e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80180a2:	2303      	movs	r3, #3
 80180a4:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80180a8:	e7a9      	b.n	8017ffe <atan+0x8e>
 80180aa:	4a2c      	ldr	r2, [pc, #176]	; (801815c <atan+0x1ec>)
 80180ac:	492c      	ldr	r1, [pc, #176]	; (8018160 <atan+0x1f0>)
 80180ae:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80180b2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80180b6:	ed93 5b00 	vldr	d5, [r3]
 80180ba:	ee36 6b45 	vsub.f64	d6, d6, d5
 80180be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80180c2:	ed92 6b00 	vldr	d6, [r2]
 80180c6:	2d00      	cmp	r5, #0
 80180c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80180cc:	bfb8      	it	lt
 80180ce:	eeb1 7b47 	vneglt.f64	d7, d7
 80180d2:	e760      	b.n	8017f96 <atan+0x26>
 80180d4:	f3af 8000 	nop.w
 80180d8:	54442d18 	.word	0x54442d18
 80180dc:	3ff921fb 	.word	0x3ff921fb
 80180e0:	54442d18 	.word	0x54442d18
 80180e4:	bff921fb 	.word	0xbff921fb
 80180e8:	8800759c 	.word	0x8800759c
 80180ec:	7e37e43c 	.word	0x7e37e43c
 80180f0:	e322da11 	.word	0xe322da11
 80180f4:	3f90ad3a 	.word	0x3f90ad3a
 80180f8:	24760deb 	.word	0x24760deb
 80180fc:	3fa97b4b 	.word	0x3fa97b4b
 8018100:	a0d03d51 	.word	0xa0d03d51
 8018104:	3fb10d66 	.word	0x3fb10d66
 8018108:	c54c206e 	.word	0xc54c206e
 801810c:	3fb745cd 	.word	0x3fb745cd
 8018110:	920083ff 	.word	0x920083ff
 8018114:	3fc24924 	.word	0x3fc24924
 8018118:	5555550d 	.word	0x5555550d
 801811c:	3fd55555 	.word	0x3fd55555
 8018120:	52defd9a 	.word	0x52defd9a
 8018124:	bfadde2d 	.word	0xbfadde2d
 8018128:	2c6a6c2f 	.word	0x2c6a6c2f
 801812c:	bfa2b444 	.word	0xbfa2b444
 8018130:	af749a6d 	.word	0xaf749a6d
 8018134:	bfb3b0f2 	.word	0xbfb3b0f2
 8018138:	fe231671 	.word	0xfe231671
 801813c:	bfbc71c6 	.word	0xbfbc71c6
 8018140:	9998ebc4 	.word	0x9998ebc4
 8018144:	bfc99999 	.word	0xbfc99999
 8018148:	440fffff 	.word	0x440fffff
 801814c:	7ff00000 	.word	0x7ff00000
 8018150:	3fdbffff 	.word	0x3fdbffff
 8018154:	3ff2ffff 	.word	0x3ff2ffff
 8018158:	40038000 	.word	0x40038000
 801815c:	08018648 	.word	0x08018648
 8018160:	08018668 	.word	0x08018668

08018164 <fabs>:
 8018164:	ec51 0b10 	vmov	r0, r1, d0
 8018168:	ee10 2a10 	vmov	r2, s0
 801816c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018170:	ec43 2b10 	vmov	d0, r2, r3
 8018174:	4770      	bx	lr
	...

08018178 <floor>:
 8018178:	ee10 1a90 	vmov	r1, s1
 801817c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018180:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8018184:	2b13      	cmp	r3, #19
 8018186:	b530      	push	{r4, r5, lr}
 8018188:	ee10 0a10 	vmov	r0, s0
 801818c:	ee10 5a10 	vmov	r5, s0
 8018190:	dc31      	bgt.n	80181f6 <floor+0x7e>
 8018192:	2b00      	cmp	r3, #0
 8018194:	da15      	bge.n	80181c2 <floor+0x4a>
 8018196:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018250 <floor+0xd8>
 801819a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801819e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80181a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181a6:	dd07      	ble.n	80181b8 <floor+0x40>
 80181a8:	2900      	cmp	r1, #0
 80181aa:	da4e      	bge.n	801824a <floor+0xd2>
 80181ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80181b0:	4318      	orrs	r0, r3
 80181b2:	d001      	beq.n	80181b8 <floor+0x40>
 80181b4:	4928      	ldr	r1, [pc, #160]	; (8018258 <floor+0xe0>)
 80181b6:	2000      	movs	r0, #0
 80181b8:	460b      	mov	r3, r1
 80181ba:	4602      	mov	r2, r0
 80181bc:	ec43 2b10 	vmov	d0, r2, r3
 80181c0:	e020      	b.n	8018204 <floor+0x8c>
 80181c2:	4a26      	ldr	r2, [pc, #152]	; (801825c <floor+0xe4>)
 80181c4:	411a      	asrs	r2, r3
 80181c6:	ea01 0402 	and.w	r4, r1, r2
 80181ca:	4304      	orrs	r4, r0
 80181cc:	d01a      	beq.n	8018204 <floor+0x8c>
 80181ce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018250 <floor+0xd8>
 80181d2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80181d6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80181da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181de:	ddeb      	ble.n	80181b8 <floor+0x40>
 80181e0:	2900      	cmp	r1, #0
 80181e2:	bfbe      	ittt	lt
 80181e4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80181e8:	fa40 f303 	asrlt.w	r3, r0, r3
 80181ec:	18c9      	addlt	r1, r1, r3
 80181ee:	ea21 0102 	bic.w	r1, r1, r2
 80181f2:	2000      	movs	r0, #0
 80181f4:	e7e0      	b.n	80181b8 <floor+0x40>
 80181f6:	2b33      	cmp	r3, #51	; 0x33
 80181f8:	dd05      	ble.n	8018206 <floor+0x8e>
 80181fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80181fe:	d101      	bne.n	8018204 <floor+0x8c>
 8018200:	ee30 0b00 	vadd.f64	d0, d0, d0
 8018204:	bd30      	pop	{r4, r5, pc}
 8018206:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801820a:	f04f 32ff 	mov.w	r2, #4294967295
 801820e:	40e2      	lsrs	r2, r4
 8018210:	4202      	tst	r2, r0
 8018212:	d0f7      	beq.n	8018204 <floor+0x8c>
 8018214:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8018250 <floor+0xd8>
 8018218:	ee30 0b07 	vadd.f64	d0, d0, d7
 801821c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018224:	ddc8      	ble.n	80181b8 <floor+0x40>
 8018226:	2900      	cmp	r1, #0
 8018228:	da02      	bge.n	8018230 <floor+0xb8>
 801822a:	2b14      	cmp	r3, #20
 801822c:	d103      	bne.n	8018236 <floor+0xbe>
 801822e:	3101      	adds	r1, #1
 8018230:	ea20 0002 	bic.w	r0, r0, r2
 8018234:	e7c0      	b.n	80181b8 <floor+0x40>
 8018236:	2401      	movs	r4, #1
 8018238:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801823c:	fa04 f303 	lsl.w	r3, r4, r3
 8018240:	4418      	add	r0, r3
 8018242:	42a8      	cmp	r0, r5
 8018244:	bf38      	it	cc
 8018246:	1909      	addcc	r1, r1, r4
 8018248:	e7f2      	b.n	8018230 <floor+0xb8>
 801824a:	2000      	movs	r0, #0
 801824c:	4601      	mov	r1, r0
 801824e:	e7b3      	b.n	80181b8 <floor+0x40>
 8018250:	8800759c 	.word	0x8800759c
 8018254:	7e37e43c 	.word	0x7e37e43c
 8018258:	bff00000 	.word	0xbff00000
 801825c:	000fffff 	.word	0x000fffff

08018260 <scalbn>:
 8018260:	ee10 1a90 	vmov	r1, s1
 8018264:	b510      	push	{r4, lr}
 8018266:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801826a:	b98c      	cbnz	r4, 8018290 <scalbn+0x30>
 801826c:	ee10 3a10 	vmov	r3, s0
 8018270:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8018274:	430b      	orrs	r3, r1
 8018276:	d011      	beq.n	801829c <scalbn+0x3c>
 8018278:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8018340 <scalbn+0xe0>
 801827c:	4b3c      	ldr	r3, [pc, #240]	; (8018370 <scalbn+0x110>)
 801827e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018282:	4298      	cmp	r0, r3
 8018284:	da0b      	bge.n	801829e <scalbn+0x3e>
 8018286:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8018348 <scalbn+0xe8>
 801828a:	ee20 0b07 	vmul.f64	d0, d0, d7
 801828e:	e005      	b.n	801829c <scalbn+0x3c>
 8018290:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8018294:	429c      	cmp	r4, r3
 8018296:	d107      	bne.n	80182a8 <scalbn+0x48>
 8018298:	ee30 0b00 	vadd.f64	d0, d0, d0
 801829c:	bd10      	pop	{r4, pc}
 801829e:	ee10 1a90 	vmov	r1, s1
 80182a2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80182a6:	3c36      	subs	r4, #54	; 0x36
 80182a8:	4404      	add	r4, r0
 80182aa:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80182ae:	429c      	cmp	r4, r3
 80182b0:	dd0d      	ble.n	80182ce <scalbn+0x6e>
 80182b2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8018350 <scalbn+0xf0>
 80182b6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8018358 <scalbn+0xf8>
 80182ba:	eeb0 6b47 	vmov.f64	d6, d7
 80182be:	ee10 3a90 	vmov	r3, s1
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	fe27 7b05 	vselge.f64	d7, d7, d5
 80182c8:	ee27 0b06 	vmul.f64	d0, d7, d6
 80182cc:	e7e6      	b.n	801829c <scalbn+0x3c>
 80182ce:	2c00      	cmp	r4, #0
 80182d0:	dd0a      	ble.n	80182e8 <scalbn+0x88>
 80182d2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80182d6:	ec53 2b10 	vmov	r2, r3, d0
 80182da:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80182de:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80182e2:	ec43 2b10 	vmov	d0, r2, r3
 80182e6:	e7d9      	b.n	801829c <scalbn+0x3c>
 80182e8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80182ec:	da19      	bge.n	8018322 <scalbn+0xc2>
 80182ee:	f24c 3350 	movw	r3, #50000	; 0xc350
 80182f2:	4298      	cmp	r0, r3
 80182f4:	ee10 3a90 	vmov	r3, s1
 80182f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80182fc:	dd09      	ble.n	8018312 <scalbn+0xb2>
 80182fe:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8018350 <scalbn+0xf0>
 8018302:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8018358 <scalbn+0xf8>
 8018306:	eeb0 7b40 	vmov.f64	d7, d0
 801830a:	2b00      	cmp	r3, #0
 801830c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8018310:	e7bb      	b.n	801828a <scalbn+0x2a>
 8018312:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8018348 <scalbn+0xe8>
 8018316:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8018360 <scalbn+0x100>
 801831a:	eeb0 7b40 	vmov.f64	d7, d0
 801831e:	2b00      	cmp	r3, #0
 8018320:	e7f4      	b.n	801830c <scalbn+0xac>
 8018322:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8018326:	ec53 2b10 	vmov	r2, r3, d0
 801832a:	3436      	adds	r4, #54	; 0x36
 801832c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8018330:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8018334:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8018368 <scalbn+0x108>
 8018338:	ec43 2b10 	vmov	d0, r2, r3
 801833c:	e7a5      	b.n	801828a <scalbn+0x2a>
 801833e:	bf00      	nop
 8018340:	00000000 	.word	0x00000000
 8018344:	43500000 	.word	0x43500000
 8018348:	c2f8f359 	.word	0xc2f8f359
 801834c:	01a56e1f 	.word	0x01a56e1f
 8018350:	8800759c 	.word	0x8800759c
 8018354:	7e37e43c 	.word	0x7e37e43c
 8018358:	8800759c 	.word	0x8800759c
 801835c:	fe37e43c 	.word	0xfe37e43c
 8018360:	c2f8f359 	.word	0xc2f8f359
 8018364:	81a56e1f 	.word	0x81a56e1f
 8018368:	00000000 	.word	0x00000000
 801836c:	3c900000 	.word	0x3c900000
 8018370:	ffff3cb0 	.word	0xffff3cb0

08018374 <_init>:
 8018374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018376:	bf00      	nop
 8018378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801837a:	bc08      	pop	{r3}
 801837c:	469e      	mov	lr, r3
 801837e:	4770      	bx	lr

08018380 <_fini>:
 8018380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018382:	bf00      	nop
 8018384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018386:	bc08      	pop	{r3}
 8018388:	469e      	mov	lr, r3
 801838a:	4770      	bx	lr
