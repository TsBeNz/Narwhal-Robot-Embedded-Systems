
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000180d4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080183a8  080183a8  000283a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080186a0  080186a0  000286a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080186a8  080186a8  000286a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080186ac  080186ac  000286ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000094  20000000  080186b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 RAM_D2        0000003d  20000094  08018744  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000013b8  200000d8  08018781  000300d8  2**3
                  ALLOC
  9 ._user_heap_stack 00000600  20001490  08018781  00031490  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300d1  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002cc28  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004c80  00000000  00000000  0005cd27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001dc8  00000000  00000000  000619a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001bd8  00000000  00000000  00063770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039a8f  00000000  00000000  00065348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002d011  00000000  00000000  0009edd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016d10e  00000000  00000000  000cbde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00238ef6  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008180  00000000  00000000  00238f48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	200000d8 	.word	0x200000d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801838c 	.word	0x0801838c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	200000dc 	.word	0x200000dc
 800030c:	0801838c 	.word	0x0801838c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <EncPulse2Rad_Read>:
 *      Author: Thansak Pongpaket
 */

#include "AS5047U.h"

double EncPulse2Rad_Read(AS5047U *Enc,uint8_t inv_dir){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	460b      	mov	r3, r1
 800061e:	70fb      	strb	r3, [r7, #3]
	AS5047U_Position_Highspeed_Read(Enc,inv_dir);
 8000620:	78fb      	ldrb	r3, [r7, #3]
 8000622:	4619      	mov	r1, r3
 8000624:	6878      	ldr	r0, [r7, #4]
 8000626:	f000 f8ef 	bl	8000808 <AS5047U_Position_Highspeed_Read>
	return (Enc->Position * 0.000383495f) - Enc->Offset;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	89db      	ldrh	r3, [r3, #14]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000636:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8000658 <EncPulse2Rad_Read+0x44>
 800063a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	ed93 7b08 	vldr	d7, [r3, #32]
 8000648:	ee36 7b47 	vsub.f64	d7, d6, d7
//	return (Enc->Position * 0.000383495f);
}
 800064c:	eeb0 0b47 	vmov.f64	d0, d7
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	39c90fd4 	.word	0x39c90fd4
 800065c:	00000000 	.word	0x00000000

08000660 <AS5047U_init>:

void AS5047U_init(AS5047U *dev, SPI_HandleTypeDef *hspiHandle,
		GPIO_TypeDef *CSGPIOTypedef, CRC_HandleTypeDef *hcrcHandle,
		uint16_t CSGPIOPin,double offset) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b086      	sub	sp, #24
 8000664:	af00      	add	r7, sp, #0
 8000666:	6178      	str	r0, [r7, #20]
 8000668:	6139      	str	r1, [r7, #16]
 800066a:	60fa      	str	r2, [r7, #12]
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	ed87 0b00 	vstr	d0, [r7]
	dev->hspiHandle = hspiHandle;
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	693a      	ldr	r2, [r7, #16]
 8000676:	601a      	str	r2, [r3, #0]
	dev->hcrcHandle = hcrcHandle;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	605a      	str	r2, [r3, #4]
	dev->CSGPIOTypedef = CSGPIOTypedef;
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	609a      	str	r2, [r3, #8]
	dev->CSGPIOPin = CSGPIOPin;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	8c3a      	ldrh	r2, [r7, #32]
 8000688:	819a      	strh	r2, [r3, #12]
	HAL_GPIO_WritePin(CSGPIOTypedef, CSGPIOPin, 1);
 800068a:	8c3b      	ldrh	r3, [r7, #32]
 800068c:	2201      	movs	r2, #1
 800068e:	4619      	mov	r1, r3
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f00c fbd5 	bl	800ce40 <HAL_GPIO_WritePin>
	dev->Error_Status.CORDIC_Overflow = 0;
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2200      	movs	r2, #0
 800069a:	741a      	strb	r2, [r3, #16]
	dev->Error_Status.Offset_Compensation_Not_Finished = 0;
 800069c:	697b      	ldr	r3, [r7, #20]
 800069e:	2200      	movs	r2, #0
 80006a0:	745a      	strb	r2, [r3, #17]
	dev->Error_Status.Watchdog_Error = 0;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	2200      	movs	r2, #0
 80006a6:	749a      	strb	r2, [r3, #18]
	dev->Error_Status.CRC_Error = 0;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	2200      	movs	r2, #0
 80006ac:	74da      	strb	r2, [r3, #19]
	dev->Error_Status.Command_Error = 0;
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	2200      	movs	r2, #0
 80006b2:	751a      	strb	r2, [r3, #20]
	dev->Error_Status.Framing_Error = 0;
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	2200      	movs	r2, #0
 80006b8:	755a      	strb	r2, [r3, #21]
	dev->Error_Status.P2ram_Error = 0;
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	2200      	movs	r2, #0
 80006be:	759a      	strb	r2, [r3, #22]
	dev->Error_Status.P2ram_Warning = 0;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	2200      	movs	r2, #0
 80006c4:	75da      	strb	r2, [r3, #23]
	dev->Error_Status.MagHalf = 0;
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2200      	movs	r2, #0
 80006ca:	761a      	strb	r2, [r3, #24]
	dev->Error_Status.Agc_warning = 0;
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2200      	movs	r2, #0
 80006d0:	765a      	strb	r2, [r3, #25]

	/* User Variable */
	dev->Offset = offset * 0.000383495f;
 80006d2:	ed97 7b00 	vldr	d7, [r7]
 80006d6:	ed9f 6b06 	vldr	d6, [pc, #24]	; 80006f0 <AS5047U_init+0x90>
 80006da:	ee27 7b06 	vmul.f64	d7, d7, d6
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	ed83 7b08 	vstr	d7, [r3, #32]
}
 80006e4:	bf00      	nop
 80006e6:	3718      	adds	r7, #24
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	f3af 8000 	nop.w
 80006f0:	80000000 	.word	0x80000000
 80006f4:	3f3921fa 	.word	0x3f3921fa

080006f8 <AS5047U_Write>:

/*
 * This function for Non-Volatile Registers (OTP) Only
 */

inline void AS5047U_Write(AS5047U *dev,uint16_t Register_Address, uint16_t Data){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
 8000704:	4613      	mov	r3, r2
 8000706:	803b      	strh	r3, [r7, #0]
	uint8_t Buffer[3] = {};
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <AS5047U_Write+0x10c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	723b      	strb	r3, [r7, #8]
 800070e:	f107 0309 	add.w	r3, r7, #9
 8000712:	2200      	movs	r2, #0
 8000714:	801a      	strh	r2, [r3, #0]

	Buffer[0] = ((uint8_t) (Register_Address >> 8)) & 0xBF;
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000722:	b2db      	uxtb	r3, r3
 8000724:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Register_Address & 0xFF);
 8000726:	887b      	ldrh	r3, [r7, #2]
 8000728:	b2db      	uxtb	r3, r3
 800072a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	685b      	ldr	r3, [r3, #4]
 8000730:	f107 0108 	add.w	r1, r7, #8
 8000734:	2202      	movs	r2, #2
 8000736:	4618      	mov	r0, r3
 8000738:	f009 f9f8 	bl	8009b2c <HAL_CRC_Calculate>
 800073c:	4603      	mov	r3, r0
 800073e:	b2db      	uxtb	r3, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6898      	ldr	r0, [r3, #8]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	899b      	ldrh	r3, [r3, #12]
 800074e:	2200      	movs	r2, #0
 8000750:	4619      	mov	r1, r3
 8000752:	f00c fb75 	bl	800ce40 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 8000756:	2300      	movs	r3, #0
 8000758:	81fb      	strh	r3, [r7, #14]
 800075a:	e002      	b.n	8000762 <AS5047U_Write+0x6a>
 800075c:	89fb      	ldrh	r3, [r7, #14]
 800075e:	3301      	adds	r3, #1
 8000760:	81fb      	strh	r3, [r7, #14]
 8000762:	89fb      	ldrh	r3, [r7, #14]
 8000764:	f240 2226 	movw	r2, #550	; 0x226
 8000768:	4293      	cmp	r3, r2
 800076a:	d9f7      	bls.n	800075c <AS5047U_Write+0x64>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6818      	ldr	r0, [r3, #0]
 8000770:	f107 0108 	add.w	r1, r7, #8
 8000774:	2301      	movs	r3, #1
 8000776:	2203      	movs	r2, #3
 8000778:	f011 f876 	bl	8011868 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6898      	ldr	r0, [r3, #8]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	899b      	ldrh	r3, [r3, #12]
 8000784:	2201      	movs	r2, #1
 8000786:	4619      	mov	r1, r3
 8000788:	f00c fb5a 	bl	800ce40 <HAL_GPIO_WritePin>

	Buffer[0] = (uint8_t) (Data >> 8);
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	0a1b      	lsrs	r3, r3, #8
 8000790:	b29b      	uxth	r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	723b      	strb	r3, [r7, #8]
	Buffer[1] = (uint8_t) (Data & 0xFF);
 8000796:	883b      	ldrh	r3, [r7, #0]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	727b      	strb	r3, [r7, #9]
	Buffer[2] = (uint8_t) HAL_CRC_Calculate(dev->hcrcHandle, (uint32_t *)Buffer, 2) ^ 0xFF;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	f107 0108 	add.w	r1, r7, #8
 80007a4:	2202      	movs	r2, #2
 80007a6:	4618      	mov	r0, r3
 80007a8:	f009 f9c0 	bl	8009b2c <HAL_CRC_Calculate>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6898      	ldr	r0, [r3, #8]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	899b      	ldrh	r3, [r3, #12]
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	f00c fb3d 	bl	800ce40 <HAL_GPIO_WritePin>
	for (uint16_t i=0; i <= 550 ; i++);  			//delay before sent data (#Base clock 550MHz)
 80007c6:	2300      	movs	r3, #0
 80007c8:	81bb      	strh	r3, [r7, #12]
 80007ca:	e002      	b.n	80007d2 <AS5047U_Write+0xda>
 80007cc:	89bb      	ldrh	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	81bb      	strh	r3, [r7, #12]
 80007d2:	89bb      	ldrh	r3, [r7, #12]
 80007d4:	f240 2226 	movw	r2, #550	; 0x226
 80007d8:	4293      	cmp	r3, r2
 80007da:	d9f7      	bls.n	80007cc <AS5047U_Write+0xd4>
	HAL_SPI_Transmit(dev->hspiHandle, Buffer, 3, 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6818      	ldr	r0, [r3, #0]
 80007e0:	f107 0108 	add.w	r1, r7, #8
 80007e4:	2301      	movs	r3, #1
 80007e6:	2203      	movs	r2, #3
 80007e8:	f011 f83e 	bl	8011868 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6898      	ldr	r0, [r3, #8]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	899b      	ldrh	r3, [r3, #12]
 80007f4:	2201      	movs	r2, #1
 80007f6:	4619      	mov	r1, r3
 80007f8:	f00c fb22 	bl	800ce40 <HAL_GPIO_WritePin>
}
 80007fc:	bf00      	nop
 80007fe:	3710      	adds	r7, #16
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	080183a8 	.word	0x080183a8

08000808 <AS5047U_Position_Highspeed_Read>:

/*
 * This function for read Encoder without CRC
 * (high throughput)
 */
inline uint16_t AS5047U_Position_Highspeed_Read(AS5047U *dev,uint8_t dir){
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd[2] = { 0x3F,0xFF };
 8000814:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8000818:	823b      	strh	r3, [r7, #16]
	uint8_t Buffer[2] = {};
 800081a:	2300      	movs	r3, #0
 800081c:	81bb      	strh	r3, [r7, #12]
	for (uint16_t i=0; i <= 400; i++);
 800081e:	2300      	movs	r3, #0
 8000820:	82fb      	strh	r3, [r7, #22]
 8000822:	e002      	b.n	800082a <AS5047U_Position_Highspeed_Read+0x22>
 8000824:	8afb      	ldrh	r3, [r7, #22]
 8000826:	3301      	adds	r3, #1
 8000828:	82fb      	strh	r3, [r7, #22]
 800082a:	8afb      	ldrh	r3, [r7, #22]
 800082c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000830:	d9f8      	bls.n	8000824 <AS5047U_Position_Highspeed_Read+0x1c>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6898      	ldr	r0, [r3, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	899b      	ldrh	r3, [r3, #12]
 800083a:	2200      	movs	r2, #0
 800083c:	4619      	mov	r1, r3
 800083e:	f00c faff 	bl	800ce40 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Transmit(dev->hspiHandle, cmd, 2, 100);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	f107 0110 	add.w	r1, r7, #16
 800084a:	2364      	movs	r3, #100	; 0x64
 800084c:	2202      	movs	r2, #2
 800084e:	f011 f80b 	bl	8011868 <HAL_SPI_Transmit>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6898      	ldr	r0, [r3, #8]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	899b      	ldrh	r3, [r3, #12]
 800085a:	2201      	movs	r2, #1
 800085c:	4619      	mov	r1, r3
 800085e:	f00c faef 	bl	800ce40 <HAL_GPIO_WritePin>

	for (uint16_t i=0; i <= 550; i++);			//delay before sent data (#Base clock 550MHz)
 8000862:	2300      	movs	r3, #0
 8000864:	82bb      	strh	r3, [r7, #20]
 8000866:	e002      	b.n	800086e <AS5047U_Position_Highspeed_Read+0x66>
 8000868:	8abb      	ldrh	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	82bb      	strh	r3, [r7, #20]
 800086e:	8abb      	ldrh	r3, [r7, #20]
 8000870:	f240 2226 	movw	r2, #550	; 0x226
 8000874:	4293      	cmp	r3, r2
 8000876:	d9f7      	bls.n	8000868 <AS5047U_Position_Highspeed_Read+0x60>
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 0);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6898      	ldr	r0, [r3, #8]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	899b      	ldrh	r3, [r3, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	4619      	mov	r1, r3
 8000884:	f00c fadc 	bl	800ce40 <HAL_GPIO_WritePin>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_SPI_Receive(dev->hspiHandle, Buffer, 2, 100);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	f107 010c 	add.w	r1, r7, #12
 8000890:	2364      	movs	r3, #100	; 0x64
 8000892:	2202      	movs	r2, #2
 8000894:	f011 f9da 	bl	8011c4c <HAL_SPI_Receive>
//	for (uint16_t i=0; i <= 400; i++);
	HAL_GPIO_WritePin(dev->CSGPIOTypedef, dev->CSGPIOPin, 1);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	6898      	ldr	r0, [r3, #8]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	899b      	ldrh	r3, [r3, #12]
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	f00c facc 	bl	800ce40 <HAL_GPIO_WritePin>
	if (dir == 1){
 80008a8:	78fb      	ldrb	r3, [r7, #3]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d111      	bne.n	80008d2 <AS5047U_Position_Highspeed_Read+0xca>
		dev->Position = (uint16_t)((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]) ^ 0x3FFF;
 80008ae:	7b3b      	ldrb	r3, [r7, #12]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b21b      	sxth	r3, r3
 80008b4:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008b8:	b21a      	sxth	r2, r3
 80008ba:	7b7b      	ldrb	r3, [r7, #13]
 80008bc:	b21b      	sxth	r3, r3
 80008be:	4313      	orrs	r3, r2
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80008c8:	4053      	eors	r3, r2
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	81da      	strh	r2, [r3, #14]
 80008d0:	e00c      	b.n	80008ec <AS5047U_Position_Highspeed_Read+0xe4>
	}
	else{
		dev->Position = ((((uint16_t)Buffer[0]&0x3F) << 8) | (uint16_t)Buffer[1]);
 80008d2:	7b3b      	ldrb	r3, [r7, #12]
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	b21b      	sxth	r3, r3
 80008d8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80008dc:	b21a      	sxth	r2, r3
 80008de:	7b7b      	ldrb	r3, [r7, #13]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	81da      	strh	r2, [r3, #14]
	}
	return dev->Position;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	89db      	ldrh	r3, [r3, #14]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3718      	adds	r7, #24
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Neopixel_Init>:
 */

#include "Neopixel.h"

void Neopixel_Init(NeopixelParameter *Neopixel_led, TIM_HandleTypeDef *htim_in,
		uint32_t Channel_in) {
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	60f8      	str	r0, [r7, #12]
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
	Neopixel_led->htim = htim_in;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	68ba      	ldr	r2, [r7, #8]
 8000908:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Neopixel_led->timer_Channel = Channel_in;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	Neopixel_led->Pulse_High = (uint16_t) (htim_in->Init.Period * 0.66f);
 8000914:	68bb      	ldr	r3, [r7, #8]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	ee07 3a90 	vmov	s15, r3
 800091c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000920:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8000968 <Neopixel_Init+0x70>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800092c:	ee17 3a90 	vmov	r3, s15
 8000930:	b29a      	uxth	r2, r3
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f8a3 215a 	strh.w	r2, [r3, #346]	; 0x15a
	Neopixel_led->Pulse_Low = (uint16_t) (htim_in->Init.Period * 0.33f);
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	ee07 3a90 	vmov	s15, r3
 8000940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000944:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800096c <Neopixel_Init+0x74>
 8000948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800094c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000950:	ee17 3a90 	vmov	r3, s15
 8000954:	b29a      	uxth	r2, r3
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f8a3 2158 	strh.w	r2, [r3, #344]	; 0x158
}
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	3f28f5c3 	.word	0x3f28f5c3
 800096c:	3ea8f5c3 	.word	0x3ea8f5c3

08000970 <Neopixel_Set>:

inline void Neopixel_Set(NeopixelParameter *Neopixel_led, uint8_t LEDnum,
		uint8_t Red, uint8_t Green, uint8_t Blue) {
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	4608      	mov	r0, r1
 800097a:	4611      	mov	r1, r2
 800097c:	461a      	mov	r2, r3
 800097e:	4603      	mov	r3, r0
 8000980:	70fb      	strb	r3, [r7, #3]
 8000982:	460b      	mov	r3, r1
 8000984:	70bb      	strb	r3, [r7, #2]
 8000986:	4613      	mov	r3, r2
 8000988:	707b      	strb	r3, [r7, #1]
	Neopixel_led->LED_Data[LEDnum][0] = Green;
 800098a:	78fa      	ldrb	r2, [r7, #3]
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	440b      	add	r3, r1
 8000996:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800099a:	787a      	ldrb	r2, [r7, #1]
 800099c:	701a      	strb	r2, [r3, #0]
	Neopixel_led->LED_Data[LEDnum][1] = Red;
 800099e:	78fa      	ldrb	r2, [r7, #3]
 80009a0:	6879      	ldr	r1, [r7, #4]
 80009a2:	4613      	mov	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	440b      	add	r3, r1
 80009aa:	f203 1345 	addw	r3, r3, #325	; 0x145
 80009ae:	78ba      	ldrb	r2, [r7, #2]
 80009b0:	701a      	strb	r2, [r3, #0]
	Neopixel_led->LED_Data[LEDnum][2] = Blue;
 80009b2:	78fa      	ldrb	r2, [r7, #3]
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	440b      	add	r3, r1
 80009be:	f503 73a3 	add.w	r3, r3, #326	; 0x146
 80009c2:	7c3a      	ldrb	r2, [r7, #16]
 80009c4:	701a      	strb	r2, [r3, #0]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr

080009d2 <Neopixel_Sent>:

inline void Neopixel_Sent(NeopixelParameter *Neopixel_led) {
 80009d2:	b580      	push	{r7, lr}
 80009d4:	b088      	sub	sp, #32
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
	uint32_t index = 0;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
	uint32_t data;
	for (int j = 0; j < NUM_LED; j++) {
 80009de:	2300      	movs	r3, #0
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	e046      	b.n	8000a72 <Neopixel_Sent+0xa0>
		data = ((Neopixel_led->LED_Data[j][0] & 0xFF) << 16)
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	69ba      	ldr	r2, [r7, #24]
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	0419      	lsls	r1, r3, #16
				| ((Neopixel_led->LED_Data[j][1] & 0xFF) << 8)
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	69ba      	ldr	r2, [r7, #24]
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	4403      	add	r3, r0
 8000a04:	f203 1345 	addw	r3, r3, #325	; 0x145
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	4319      	orrs	r1, r3
				| (Neopixel_led->LED_Data[j][2] & 0xFF);
 8000a0e:	6878      	ldr	r0, [r7, #4]
 8000a10:	69ba      	ldr	r2, [r7, #24]
 8000a12:	4613      	mov	r3, r2
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	4403      	add	r3, r0
 8000a1a:	f503 73a3 	add.w	r3, r3, #326	; 0x146
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	430b      	orrs	r3, r1
		data = ((Neopixel_led->LED_Data[j][0] & 0xFF) << 16)
 8000a22:	60fb      	str	r3, [r7, #12]
		for (int i = 23; i >= 0; i--) {
 8000a24:	2317      	movs	r3, #23
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e01d      	b.n	8000a66 <Neopixel_Sent+0x94>
			if (data & (1 << i)) {
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4013      	ands	r3, r2
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d007      	beq.n	8000a4c <Neopixel_Sent+0x7a>
				Neopixel_led->pwmData[index] = Neopixel_led->Pulse_High;	//192
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f8b3 115a 	ldrh.w	r1, [r3, #346]	; 0x15a
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	69fa      	ldr	r2, [r7, #28]
 8000a46:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8000a4a:	e006      	b.n	8000a5a <Neopixel_Sent+0x88>
			} else {
				Neopixel_led->pwmData[index] = Neopixel_led->Pulse_Low;		//96
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8b3 1158 	ldrh.w	r1, [r3, #344]	; 0x158
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			}
			index++;
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
		for (int i = 23; i >= 0; i--) {
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	dade      	bge.n	8000a2a <Neopixel_Sent+0x58>
	for (int j = 0; j < NUM_LED; j++) {
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	ddb5      	ble.n	80009e4 <Neopixel_Sent+0x12>
		}
	}
	for (int i = 0; i < 42; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	e00a      	b.n	8000a94 <Neopixel_Sent+0xc2>
		Neopixel_led->pwmData[index] = 0;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	2100      	movs	r1, #0
 8000a84:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		index++;
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < 42; i++) {
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	3301      	adds	r3, #1
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	2b29      	cmp	r3, #41	; 0x29
 8000a98:	ddf1      	ble.n	8000a7e <Neopixel_Sent+0xac>
	}
	HAL_TIM_PWM_Start_DMA(Neopixel_led->htim, TIM_CHANNEL_1,
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
			Neopixel_led->pwmData, index);
 8000aa0:	687a      	ldr	r2, [r7, #4]
	HAL_TIM_PWM_Start_DMA(Neopixel_led->htim, TIM_CHANNEL_1,
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	f011 ffce 	bl	8012a48 <HAL_TIM_PWM_Start_DMA>
}
 8000aac:	bf00      	nop
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Tmp75_Init>:
#include "Tmp75.h"

//I2C_HandleTypeDef hi2c2;

void Tmp75_Init(I2C_HandleTypeDef *hi2c) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	/*configuration register = 0x01
	 [res][res][OS][FQ][POL][TM][SD][RES][RES][RES][RES][RES][RES][RES][RES][RES]
	   0    0   1   0    0    0   0   0    0    0    0    0    0    0    0    0   =  0x2000
	 */
	Write_Register(0x01, 0x2000,hi2c);
 8000abc:	687a      	ldr	r2, [r7, #4]
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	f000 f804 	bl	8000ad0 <Write_Register>

}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Write_Register>:

void Write_Register(uint8_t register_pointer, uint16_t register_value, I2C_HandleTypeDef *hi2c) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	603a      	str	r2, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	460b      	mov	r3, r1
 8000ade:	80bb      	strh	r3, [r7, #4]
	uint8_t data[3];
	data[0] = register_pointer;     // TMP75_ADDR
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	733b      	strb	r3, [r7, #12]
	data[1] = register_value >> 8;    // MSB byte of 16bit data
 8000ae4:	88bb      	ldrh	r3, [r7, #4]
 8000ae6:	0a1b      	lsrs	r3, r3, #8
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	737b      	strb	r3, [r7, #13]
	data[2] = register_value;       // LSB byte of 16bit data
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, data, 3, 100);
 8000af4:	f107 020c 	add.w	r2, r7, #12
 8000af8:	2364      	movs	r3, #100	; 0x64
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2303      	movs	r3, #3
 8000afe:	2192      	movs	r1, #146	; 0x92
 8000b00:	6838      	ldr	r0, [r7, #0]
 8000b02:	f00c fa61 	bl	800cfc8 <HAL_I2C_Master_Transmit>

}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <Read_Register>:

void Read_Register(uint8_t register_pointer, uint8_t* receive_buffer, I2C_HandleTypeDef *hi2c) {
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af02      	add	r7, sp, #8
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
	// first set the register pointer to the register wanted to be read
	HAL_I2C_Master_Transmit(hi2c, TMP75_ADDR, &register_pointer, 1, 100);
 8000b1c:	f107 020f 	add.w	r2, r7, #15
 8000b20:	2364      	movs	r3, #100	; 0x64
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2301      	movs	r3, #1
 8000b26:	2192      	movs	r1, #146	; 0x92
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f00c fa4d 	bl	800cfc8 <HAL_I2C_Master_Transmit>

	// receive the 2 x 8bit data into the receive buffer
	HAL_I2C_Master_Receive(hi2c, TMP75_ADDR, receive_buffer, 2, 100);
 8000b2e:	2364      	movs	r3, #100	; 0x64
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	2302      	movs	r3, #2
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	2192      	movs	r1, #146	; 0x92
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f00c fb39 	bl	800d1b0 <HAL_I2C_Master_Receive>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <One_ShotTemp>:

void One_ShotTemp(I2C_HandleTypeDef *hi2c) {
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	//One-Shot register = 0x04 and write any value to start aconversion
	Write_Register(0x04, 0x0000,hi2c);
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	2100      	movs	r1, #0
 8000b52:	2004      	movs	r0, #4
 8000b54:	f7ff ffbc 	bl	8000ad0 <Write_Register>
}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Read_TempCelsius>:

void Read_TempCelsius(double *receive_buffer,I2C_HandleTypeDef *hi2c) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	uint8_t buffer[2];
	uint16_t TempSum;
	Read_Register(0x00, buffer,hi2c);
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff ffcb 	bl	8000b0e <Read_Register>
	TempSum = (((buffer[0] << 8) | buffer[1]) >> 4);
 8000b78:	7b3b      	ldrb	r3, [r7, #12]
 8000b7a:	021b      	lsls	r3, r3, #8
 8000b7c:	7b7a      	ldrb	r2, [r7, #13]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	111b      	asrs	r3, r3, #4
 8000b82:	81fb      	strh	r3, [r7, #14]
	*receive_buffer = (TempSum * FTMP75_TEMP_AD_STEP);
 8000b84:	89fb      	ldrh	r3, [r7, #14]
 8000b86:	ee07 3a90 	vmov	s15, r3
 8000b8a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b8e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8000ba8 <Read_TempCelsius+0x48>
 8000b92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	ed83 7b00 	vstr	d7, [r3]
}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	f3af 8000 	nop.w
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	3fb00000 	.word	0x3fb00000

08000bb0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2224      	movs	r2, #36	; 0x24
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f016 fbb1 	bl	8017330 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bce:	4b33      	ldr	r3, [pc, #204]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bd0:	4a33      	ldr	r2, [pc, #204]	; (8000ca0 <MX_ADC1_Init+0xf0>)
 8000bd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000bd4:	4b31      	ldr	r3, [pc, #196]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bd6:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000bda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000bdc:	4b2f      	ldr	r3, [pc, #188]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be2:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be8:	4b2c      	ldr	r3, [pc, #176]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bea:	2204      	movs	r2, #4
 8000bec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bee:	4b2b      	ldr	r3, [pc, #172]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf4:	4b29      	ldr	r3, [pc, #164]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000bfa:	4b28      	ldr	r3, [pc, #160]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c00:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c08:	4b24      	ldr	r3, [pc, #144]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0e:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c1a:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000c26:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2e:	481b      	ldr	r0, [pc, #108]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c30:	f006 ff90 	bl	8007b54 <HAL_ADC_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c3a:	f004 fe01 	bl	8005840 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_INJECSIMULT;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DualModeData = ADC_DUALMODEDATAFORMAT_DISABLED;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4812      	ldr	r0, [pc, #72]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c52:	f008 fd15 	bl	8009680 <HAL_ADCEx_MultiModeConfigChannel>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000c5c:	f004 fdf0 	bl	8005840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000c60:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_ADC1_Init+0xf4>)
 8000c62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c64:	2306      	movs	r3, #6
 8000c66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c6c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c70:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c72:	2304      	movs	r3, #4
 8000c74:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_ADC1_Init+0xec>)
 8000c86:	f007 fd09 	bl	800869c <HAL_ADC_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000c90:	f004 fdd6 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3730      	adds	r7, #48	; 0x30
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000f4 	.word	0x200000f4
 8000ca0:	40022000 	.word	0x40022000
 8000ca4:	21800100 	.word	0x21800100

08000ca8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2224      	movs	r2, #36	; 0x24
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f016 fb3b 	bl	8017330 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000cba:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cbc:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <MX_ADC2_Init+0xb8>)
 8000cbe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cc2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000cc6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cce:	4b23      	ldr	r3, [pc, #140]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cfa:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000d06:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d0e:	4813      	ldr	r0, [pc, #76]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d10:	f006 ff20 	bl	8007b54 <HAL_ADC_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC2_Init+0x76>
  {
    Error_Handler();
 8000d1a:	f004 fd91 	bl	8005840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_ADC2_Init+0xbc>)
 8000d20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d22:	2306      	movs	r3, #6
 8000d24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d2a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000d2e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d30:	2304      	movs	r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	4619      	mov	r1, r3
 8000d42:	4806      	ldr	r0, [pc, #24]	; (8000d5c <MX_ADC2_Init+0xb4>)
 8000d44:	f007 fcaa 	bl	800869c <HAL_ADC_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000d4e:	f004 fd77 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	3728      	adds	r7, #40	; 0x28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000164 	.word	0x20000164
 8000d60:	40022100 	.word	0x40022100
 8000d64:	21800100 	.word	0x21800100

08000d68 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2224      	movs	r2, #36	; 0x24
 8000d72:	2100      	movs	r1, #0
 8000d74:	4618      	mov	r0, r3
 8000d76:	f016 fadb 	bl	8017330 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000d7a:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d7c:	4a32      	ldr	r2, [pc, #200]	; (8000e48 <MX_ADC3_Init+0xe0>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d88:	2208      	movs	r2, #8
 8000d8a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000d8c:	4b2d      	ldr	r3, [pc, #180]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d92:	4b2c      	ldr	r3, [pc, #176]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d98:	4b2a      	ldr	r3, [pc, #168]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d9e:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000db0:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000dec:	4815      	ldr	r0, [pc, #84]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000dee:	f006 feb1 	bl	8007b54 <HAL_ADC_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8000df8:	f004 fd22 	bl	8005840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000dfc:	4b13      	ldr	r3, [pc, #76]	; (8000e4c <MX_ADC3_Init+0xe4>)
 8000dfe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e00:	2306      	movs	r3, #6
 8000e02:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000e04:	2306      	movs	r3, #6
 8000e06:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e08:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000e0c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4806      	ldr	r0, [pc, #24]	; (8000e44 <MX_ADC3_Init+0xdc>)
 8000e2c:	f007 fc36 	bl	800869c <HAL_ADC_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000e36:	f004 fd03 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	200001d4 	.word	0x200001d4
 8000e48:	58026000 	.word	0x58026000
 8000e4c:	c7520000 	.word	0xc7520000

08000e50 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08c      	sub	sp, #48	; 0x30
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a47      	ldr	r2, [pc, #284]	; (8000f8c <HAL_ADC_MspInit+0x13c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d133      	bne.n	8000eda <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000e72:	4b47      	ldr	r3, [pc, #284]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a45      	ldr	r2, [pc, #276]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000e7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000e7c:	4b44      	ldr	r3, [pc, #272]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d10e      	bne.n	8000ea2 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e84:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000e86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8a:	4a42      	ldr	r2, [pc, #264]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000e8c:	f043 0320 	orr.w	r3, r3, #32
 8000e90:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e94:	4b3f      	ldr	r3, [pc, #252]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e9a:	f003 0320 	and.w	r3, r3, #32
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	4a3a      	ldr	r2, [pc, #232]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb2:	4b38      	ldr	r3, [pc, #224]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	f003 0304 	and.w	r3, r3, #4
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_INP8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ec0:	2320      	movs	r3, #32
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 031c 	add.w	r3, r7, #28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4831      	ldr	r0, [pc, #196]	; (8000f98 <HAL_ADC_MspInit+0x148>)
 8000ed4:	f00b fe0c 	bl	800caf0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000ed8:	e054      	b.n	8000f84 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC2)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <HAL_ADC_MspInit+0x14c>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d133      	bne.n	8000f4c <HAL_ADC_MspInit+0xfc>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ee4:	4b2a      	ldr	r3, [pc, #168]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a29      	ldr	r2, [pc, #164]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000eec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000eee:	4b28      	ldr	r3, [pc, #160]	; (8000f90 <HAL_ADC_MspInit+0x140>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b01      	cmp	r3, #1
 8000ef4:	d10e      	bne.n	8000f14 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ef6:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000ef8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000efc:	4a25      	ldr	r2, [pc, #148]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000efe:	f043 0320 	orr.w	r3, r3, #32
 8000f02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f0c:	f003 0320 	and.w	r3, r3, #32
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	4a1e      	ldr	r2, [pc, #120]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f24:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f32:	2320      	movs	r3, #32
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f36:	2303      	movs	r3, #3
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f3e:	f107 031c 	add.w	r3, r7, #28
 8000f42:	4619      	mov	r1, r3
 8000f44:	4814      	ldr	r0, [pc, #80]	; (8000f98 <HAL_ADC_MspInit+0x148>)
 8000f46:	f00b fdd3 	bl	800caf0 <HAL_GPIO_Init>
}
 8000f4a:	e01b      	b.n	8000f84 <HAL_ADC_MspInit+0x134>
  else if(adcHandle->Instance==ADC3)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a13      	ldr	r2, [pc, #76]	; (8000fa0 <HAL_ADC_MspInit+0x150>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d116      	bne.n	8000f84 <HAL_ADC_MspInit+0x134>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f5c:	4a0d      	ldr	r2, [pc, #52]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <HAL_ADC_MspInit+0x144>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	207f      	movs	r0, #127	; 0x7f
 8000f7a:	f008 fd3e 	bl	80099fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8000f7e:	207f      	movs	r0, #127	; 0x7f
 8000f80:	f008 fd55 	bl	8009a2e <HAL_NVIC_EnableIRQ>
}
 8000f84:	bf00      	nop
 8000f86:	3730      	adds	r7, #48	; 0x30
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40022000 	.word	0x40022000
 8000f90:	20000244 	.word	0x20000244
 8000f94:	58024400 	.word	0x58024400
 8000f98:	58020800 	.word	0x58020800
 8000f9c:	40022100 	.word	0x40022100
 8000fa0:	58026000 	.word	0x58026000

08000fa4 <Step_Driver_init>:
 * __HAL_TIM_SET_COMPARE();		CCR
 * __HAL_TIM_SET_AUTORELOAD();	ARR
 */
void Step_Driver_init(SteperParameter *step, TIM_HandleTypeDef *htim,
		uint32_t Channel, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		uint32_t f_timer,uint8_t DIR_init) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	603b      	str	r3, [r7, #0]
	step->htim = htim;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	601a      	str	r2, [r3, #0]
	step->Channel = Channel;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	605a      	str	r2, [r3, #4]
	step->GPIOx = GPIOx;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	683a      	ldr	r2, [r7, #0]
 8000fc2:	609a      	str	r2, [r3, #8]
	step->GPIO_Pin = GPIO_Pin;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	8b3a      	ldrh	r2, [r7, #24]
 8000fc8:	819a      	strh	r2, [r3, #12]
	step->f_timer = f_timer;
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	81da      	strh	r2, [r3, #14]
	step->DIR_init = DIR_init;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fd8:	741a      	strb	r2, [r3, #16]
	HAL_TIM_PWM_Start(step->htim, step->Channel);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4610      	mov	r0, r2
 8000fe6:	f011 fc13 	bl	8012810 <HAL_TIM_PWM_Start>
	step->htim->Instance->ARR = 500;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ff4:	62da      	str	r2, [r3, #44]	; 0x2c
	step->htim->Instance->CCR1 = 0;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <Step_Driver>:


void Step_Driver(SteperParameter *step, double f_driver) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	ed87 0b00 	vstr	d0, [r7]
	double abs_f_driver = fabs(f_driver);
 8001014:	ed97 7b00 	vldr	d7, [r7]
 8001018:	eeb0 7bc7 	vabs.f64	d7, d7
 800101c:	ed87 7b06 	vstr	d7, [r7, #24]
	uint16_t reg_out;
	if (abs_f_driver <= 7) {
 8001020:	ed97 7b06 	vldr	d7, [r7, #24]
 8001024:	eeb1 6b0c 	vmov.f64	d6, #28	; 0x40e00000  7.0
 8001028:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800102c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001030:	d80e      	bhi.n	8001050 <Step_Driver+0x48>
		reg_out = 50000;
 8001032:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001036:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = 50000;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = 0;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
 800104e:	e033      	b.n	80010b8 <Step_Driver+0xb0>
	} else if (abs_f_driver < 10) {
 8001050:	ed97 7b06 	vldr	d7, [r7, #24]
 8001054:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8001058:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	d50f      	bpl.n	8001082 <Step_Driver+0x7a>
		reg_out = 50000;
 8001062:	f24c 3350 	movw	r3, #50000	; 0xc350
 8001066:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	8afa      	ldrh	r2, [r7, #22]
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 8001072:	8afb      	ldrh	r3, [r7, #22]
 8001074:	085b      	lsrs	r3, r3, #1
 8001076:	b29a      	uxth	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	635a      	str	r2, [r3, #52]	; 0x34
 8001080:	e01a      	b.n	80010b8 <Step_Driver+0xb0>
	} else {
		reg_out = (uint16_t) (step->f_timer / abs_f_driver);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	89db      	ldrh	r3, [r3, #14]
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800108e:	ed97 6b06 	vldr	d6, [r7, #24]
 8001092:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001096:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800109a:	ee17 3a90 	vmov	r3, s15
 800109e:	82fb      	strh	r3, [r7, #22]
		step->htim->Instance->ARR = reg_out;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	8afa      	ldrh	r2, [r7, #22]
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
		step->htim->Instance->CCR1 = reg_out >> 1;
 80010aa:	8afb      	ldrh	r3, [r7, #22]
 80010ac:	085b      	lsrs	r3, r3, #1
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if (f_driver >= 0) {
 80010b8:	ed97 7b00 	vldr	d7, [r7]
 80010bc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	db09      	blt.n	80010da <Step_Driver+0xd2>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6898      	ldr	r0, [r3, #8]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8999      	ldrh	r1, [r3, #12]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	7c1b      	ldrb	r3, [r3, #16]
 80010d2:	461a      	mov	r2, r3
 80010d4:	f00b feb4 	bl	800ce40 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
	}
}
 80010d8:	e00b      	b.n	80010f2 <Step_Driver+0xea>
		HAL_GPIO_WritePin(step->GPIOx, step->GPIO_Pin, step->DIR_init ^ 0x01);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6898      	ldr	r0, [r3, #8]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	8999      	ldrh	r1, [r3, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	7c1b      	ldrb	r3, [r3, #16]
 80010e6:	f083 0301 	eor.w	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	461a      	mov	r2, r3
 80010ee:	f00b fea7 	bl	800ce40 <HAL_GPIO_WritePin>
}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <Servo_init>:

/*
 * Servo Drive init
 */
void Servo_init(ServoParameter *Servo,TIM_HandleTypeDef *htim,
		uint32_t Channel){
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b084      	sub	sp, #16
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
	Servo->htim = htim;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	601a      	str	r2, [r3, #0]
	Servo->Channel = Channel;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_Start(Servo->htim, Servo->Channel);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4619      	mov	r1, r3
 800111c:	4610      	mov	r0, r2
 800111e:	f011 fb77 	bl	8012810 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d106      	bne.n	8001138 <Servo_init+0x3e>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f240 52db 	movw	r2, #1499	; 0x5db
 8001134:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001136:	e031      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b04      	cmp	r3, #4
 800113e:	d106      	bne.n	800114e <Servo_init+0x54>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	f240 53db 	movw	r3, #1499	; 0x5db
 800114a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800114c:	e026      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b08      	cmp	r3, #8
 8001154:	d106      	bne.n	8001164 <Servo_init+0x6a>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	f240 53db 	movw	r3, #1499	; 0x5db
 8001160:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001162:	e01b      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b0c      	cmp	r3, #12
 800116a:	d106      	bne.n	800117a <Servo_init+0x80>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f240 53db 	movw	r3, #1499	; 0x5db
 8001176:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001178:	e010      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b10      	cmp	r3, #16
 8001180:	d106      	bne.n	8001190 <Servo_init+0x96>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f240 53db 	movw	r3, #1499	; 0x5db
 800118c:	6593      	str	r3, [r2, #88]	; 0x58
}
 800118e:	e005      	b.n	800119c <Servo_init+0xa2>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,1499);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	f240 53db 	movw	r3, #1499	; 0x5db
 800119a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <Servo_Drive>:

/*
 * Servo Drive Function
 * Deg Range (0 -> 180)
 */
void Servo_Drive(ServoParameter *Servo,uint8_t Deg){
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
	uint16_t Pulse_in  =  (uint16_t)((Deg * 8.3333333f) +499);
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001250 <Servo_Drive+0xac>
 80011be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001254 <Servo_Drive+0xb0>
 80011c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011ce:	ee17 3a90 	vmov	r3, s15
 80011d2:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d105      	bne.n	80011e8 <Servo_Drive+0x44>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	89fa      	ldrh	r2, [r7, #14]
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80011e6:	e02c      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d105      	bne.n	80011fc <Servo_Drive+0x58>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80011fa:	e022      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d105      	bne.n	8001210 <Servo_Drive+0x6c>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	89fb      	ldrh	r3, [r7, #14]
 800120c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800120e:	e018      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b0c      	cmp	r3, #12
 8001216:	d105      	bne.n	8001224 <Servo_Drive+0x80>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001222:	e00e      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b10      	cmp	r3, #16
 800122a:	d105      	bne.n	8001238 <Servo_Drive+0x94>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001236:	e004      	b.n	8001242 <Servo_Drive+0x9e>
	__HAL_TIM_SET_COMPARE(Servo->htim,Servo->Channel,Pulse_in);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001242:	bf00      	nop
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	41055555 	.word	0x41055555
 8001254:	43f98000 	.word	0x43f98000

08001258 <Traj_Coeff_Cal>:

void Traj_Coeff_Cal(TrajParameter *Traj, double T, double Pos_Final,
  double Pos_Now, double Vel_Final, double Vel_Now) {
 8001258:	b480      	push	{r7}
 800125a:	b09b      	sub	sp, #108	; 0x6c
 800125c:	af00      	add	r7, sp, #0
 800125e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001260:	ed87 0b08 	vstr	d0, [r7, #32]
 8001264:	ed87 1b06 	vstr	d1, [r7, #24]
 8001268:	ed87 2b04 	vstr	d2, [r7, #16]
 800126c:	ed87 3b02 	vstr	d3, [r7, #8]
 8001270:	ed87 4b00 	vstr	d4, [r7]
 Traj->T = T;
 8001274:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800127a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
 double T_P2 = T * T;
 800127e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001282:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001286:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
 double T_P3 = T_P2 * T;
 800128a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 800128e:	ed97 7b08 	vldr	d7, [r7, #32]
 8001292:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001296:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 double T_P4 = T_P3 * T;
 800129a:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800129e:	ed97 7b08 	vldr	d7, [r7, #32]
 80012a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012a6:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 double T_P5 = T_P4 * T;
 80012aa:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80012ae:	ed97 7b08 	vldr	d7, [r7, #32]
 80012b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012b6:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
 double ds = Pos_Now - Pos_Final;
 80012ba:	ed97 6b04 	vldr	d6, [r7, #16]
 80012be:	ed97 7b06 	vldr	d7, [r7, #24]
 80012c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80012c6:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 double tfv0 = T * Vel_Now;
 80012ca:	ed97 6b08 	vldr	d6, [r7, #32]
 80012ce:	ed97 7b00 	vldr	d7, [r7]
 80012d2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012d6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 double tfv1 = T * Vel_Final;
 80012da:	ed97 6b08 	vldr	d6, [r7, #32]
 80012de:	ed97 7b02 	vldr	d7, [r7, #8]
 80012e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012e6:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
 Traj->TrajCoef[0] = Pos_Now;
 80012ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012f0:	e9c1 2300 	strd	r2, r3, [r1]
 Traj->TrajCoef[1] = Vel_Now;
 80012f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 Traj->TrajCoef[3] = -(2 * (5 * ds + 3 * tfv0 + 2*tfv1)) / T_P3;
 80012fe:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001302:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8001306:	ee27 6b06 	vmul.f64	d6, d7, d6
 800130a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800130e:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001312:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001316:	ee36 6b07 	vadd.f64	d6, d6, d7
 800131a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800131e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001322:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001326:	ee37 7b07 	vadd.f64	d7, d7, d7
 800132a:	eeb1 5b47 	vneg.f64	d5, d7
 800132e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8001332:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001338:	ed83 7b06 	vstr	d7, [r3, #24]
 Traj->TrajCoef[4] = (15 * ds + 8 * tfv0 + 7*tfv1) / T_P4;
 800133c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001340:	eeb2 6b0e 	vmov.f64	d6, #46	; 0x41700000  15.0
 8001344:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001348:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800134c:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8001350:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001354:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001358:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800135c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8001360:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001364:	ee36 5b07 	vadd.f64	d5, d6, d7
 8001368:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800136c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001372:	ed83 7b08 	vstr	d7, [r3, #32]
 Traj->TrajCoef[5] = -(3 * (2 * ds + tfv0 + tfv1)) / T_P5;
 8001376:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800137a:	ee37 6b07 	vadd.f64	d6, d7, d7
 800137e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001382:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001386:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800138a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800138e:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8001392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001396:	eeb1 5b47 	vneg.f64	d5, d7
 800139a:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800139e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a4:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
}
 80013a8:	bf00      	nop
 80013aa:	376c      	adds	r7, #108	; 0x6c
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <TrajFollow>:

void TrajFollow(TrajParameter *Traj, double traj_t[5], double *Position,
		double *Velocity) {
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	ed93 6b00 	vldr	d6, [r3]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	ed93 5b02 	vldr	d5, [r3, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	ed93 7b00 	vldr	d7, [r3]
 80013d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013d8:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[3] * traj_t[2]) + (Traj->TrajCoef[4] * traj_t[3])
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	ed93 5b06 	vldr	d5, [r3, #24]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3310      	adds	r3, #16
 80013e6:	ed93 7b00 	vldr	d7, [r3]
 80013ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80013ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	ed93 5b08 	vldr	d5, [r3, #32]
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3318      	adds	r3, #24
 80013fc:	ed93 7b00 	vldr	d7, [r3]
 8001400:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001404:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (Traj->TrajCoef[5] * traj_t[4]);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3320      	adds	r3, #32
 8001412:	ed93 7b00 	vldr	d7, [r3]
 8001416:	ee25 7b07 	vmul.f64	d7, d5, d7
 800141a:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Position = Traj->TrajCoef[0] + (Traj->TrajCoef[1] * traj_t[0])
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	ed83 7b00 	vstr	d7, [r3]
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	ed93 6b02 	vldr	d6, [r3, #8]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	ed93 7b06 	vldr	d7, [r3, #24]
 8001430:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001434:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	3308      	adds	r3, #8
 800143c:	ed93 7b00 	vldr	d7, [r3]
 8001440:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001444:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((4.0 * Traj->TrajCoef[4]) * traj_t[2])
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	ed93 7b08 	vldr	d7, [r3, #32]
 800144e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001452:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	3310      	adds	r3, #16
 800145a:	ed93 7b00 	vldr	d7, [r3]
 800145e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001462:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ ((5.0 * Traj->TrajCoef[5]) * traj_t[3]);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800146c:	eeb1 5b04 	vmov.f64	d5, #20	; 0x40a00000  5.0
 8001470:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	3318      	adds	r3, #24
 8001478:	ed93 7b00 	vldr	d7, [r3]
 800147c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001480:	ee36 7b07 	vadd.f64	d7, d6, d7
	*Velocity = Traj->TrajCoef[1] + ((3.0 * Traj->TrajCoef[3]) * traj_t[1])
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	ed83 7b00 	vstr	d7, [r3]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <Kalman_init>:
 * KalmanFilter
 *
 * Q -> Process
 * R -> Sensor
 */
void Kalman_init(KalmanParameter *kalman, double Q, double R) {
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6178      	str	r0, [r7, #20]
 80014a0:	ed87 0b02 	vstr	d0, [r7, #8]
 80014a4:	ed87 1b00 	vstr	d1, [r7]
	kalman->Q = Q; 			// Adjustable
 80014a8:	6979      	ldr	r1, [r7, #20]
 80014aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014ae:	e9c1 2300 	strd	r2, r3, [r1]
	kalman->R = R; 			// Adjustable
 80014b2:	6979      	ldr	r1, [r7, #20]
 80014b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	kalman->x1 = 0.0;
 80014bc:	6979      	ldr	r1, [r7, #20]
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	f04f 0300 	mov.w	r3, #0
 80014c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = 0.0;
 80014ca:	6979      	ldr	r1, [r7, #20]
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = 0.05;
 80014d8:	6979      	ldr	r1, [r7, #20]
 80014da:	a30f      	add	r3, pc, #60	; (adr r3, 8001518 <Kalman_init+0x80>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = 0.05;
 80014e4:	6979      	ldr	r1, [r7, #20]
 80014e6:	a30c      	add	r3, pc, #48	; (adr r3, 8001518 <Kalman_init+0x80>)
 80014e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ec:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = 0.05;
 80014f0:	6979      	ldr	r1, [r7, #20]
 80014f2:	a309      	add	r3, pc, #36	; (adr r3, 8001518 <Kalman_init+0x80>)
 80014f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = 0.05;
 80014fc:	6979      	ldr	r1, [r7, #20]
 80014fe:	a306      	add	r3, pc, #24	; (adr r3, 8001518 <Kalman_init+0x80>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 8001508:	bf00      	nop
 800150a:	371c      	adds	r7, #28
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	f3af 8000 	nop.w
 8001518:	9999999a 	.word	0x9999999a
 800151c:	3fa99999 	.word	0x3fa99999

08001520 <KalmanFilter>:


/*
 *	theta_k is Position input
 */
void KalmanFilter(KalmanParameter *kalman ,double theta_k) {
 8001520:	b480      	push	{r7}
 8001522:	b0a5      	sub	sp, #148	; 0x94
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	ed87 0b00 	vstr	d0, [r7]
	double e_xx1_tmp;
	double xx1_tmp;
	double xx1_tmp_tmp;
	double xx2_tmp;
	double xx1,xx2,pp11,pp12,pp21,pp22;
	xx1_tmp = 4.0 * delta_t * kalman->p12;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001532:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8001888 <KalmanFilter+0x368>
 8001536:	ee27 7b06 	vmul.f64	d7, d7, d6
 800153a:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	b_xx1_tmp = 4.0 * delta_t * kalman->p21;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001544:	ed9f 6bd0 	vldr	d6, [pc, #832]	; 8001888 <KalmanFilter+0x368>
 8001548:	ee27 7b06 	vmul.f64	d7, d7, d6
 800154c:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
	c_xx1_tmp = kalman->Q * delta_tPow4;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	ed93 7b00 	vldr	d7, [r3]
 8001556:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8001890 <KalmanFilter+0x370>
 800155a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800155e:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
	xx1_tmp_tmp = delta_tPow2;
 8001562:	a3d1      	add	r3, pc, #836	; (adr r3, 80018a8 <KalmanFilter+0x388>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	d_xx1_tmp = 4.0 * xx1_tmp_tmp * kalman->p22;
 800156c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001570:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001574:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800157e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001582:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68
	e_xx1_tmp = ((((4.0 * kalman->R + 4.0 * kalman->p11) + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	ed93 7b02 	vldr	d7, [r3, #8]
 800158c:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001590:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	ed93 7b08 	vldr	d7, [r3, #32]
 800159a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800159e:	ee27 7b05 	vmul.f64	d7, d7, d5
 80015a2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015a6:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80015aa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015ae:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80015b2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015b6:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80015ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015be:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 80015c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015c6:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			+ d_xx1_tmp;
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80015d0:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80015d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	ed93 7b04 	vldr	d7, [r3, #16]
 80015de:	ee26 6b07 	vmul.f64	d6, d6, d7
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	ed93 7b08 	vldr	d7, [r3, #32]
 80015e8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80015ec:	ee27 5b05 	vmul.f64	d5, d7, d5
 80015f0:	ed97 7b00 	vldr	d7, [r7]
 80015f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80015f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80015fc:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 8001600:	ed97 7b00 	vldr	d7, [r7]
 8001604:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001608:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ 4.0 * kalman->R * delta_t * kalman->x2) + xx1_tmp * theta_k) + b_xx1_tmp * theta_k)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	ed93 7b02 	vldr	d7, [r3, #8]
 8001612:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001616:	ee27 7b05 	vmul.f64	d7, d7, d5
 800161a:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 8001898 <KalmanFilter+0x378>
 800161e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	ed93 7b06 	vldr	d7, [r3, #24]
 8001628:	ee25 7b07 	vmul.f64	d7, d5, d7
 800162c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001630:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 8001634:	ed97 7b00 	vldr	d7, [r7]
 8001638:	ee25 7b07 	vmul.f64	d7, d5, d7
 800163c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001640:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 8001644:	ed97 7b00 	vldr	d7, [r7]
 8001648:	ee25 7b07 	vmul.f64	d7, d5, d7
 800164c:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ c_xx1_tmp * theta_k) / e_xx1_tmp;
 8001650:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 8001654:	ed97 7b00 	vldr	d7, [r7]
 8001658:	ee25 7b07 	vmul.f64	d7, d5, d7
 800165c:	ee36 5b07 	vadd.f64	d5, d6, d7
	xx1 = ((((((4.0 * kalman->R *kalman->x1+ 4.0 * kalman->p11 * theta_k) + d_xx1_tmp * theta_k)
 8001660:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001664:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001668:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
	xx2_tmp = kalman->p22 * delta_t;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001672:	ed9f 6b89 	vldr	d6, [pc, #548]	; 8001898 <KalmanFilter+0x378>
 8001676:	ee27 7b06 	vmul.f64	d7, d7, d6
 800167a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	b_xx2_tmp = kalman->Q * delta_tPow3;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	ed93 7b00 	vldr	d7, [r3]
 8001684:	ed9f 6b86 	vldr	d6, [pc, #536]	; 80018a0 <KalmanFilter+0x380>
 8001688:	ee27 7b06 	vmul.f64	d7, d7, d6
 800168c:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	c_xx2_tmp = b_xx2_tmp / 2.0 + xx2_tmp;
 8001690:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8001694:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001698:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800169c:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80016a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016a4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	d_xx2_tmp = c_xx2_tmp + kalman->p21;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80016ae:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80016b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80016b6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	xx2_tmp = (((kalman->R + kalman->p11) + delta_t * kalman->p21) + c_xx1_tmp / 4.0) + delta_t * (kalman->p12 + xx2_tmp);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	ed93 6b02 	vldr	d6, [r3, #8]
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	ed93 7b08 	vldr	d7, [r3, #32]
 80016c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80016d0:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8001898 <KalmanFilter+0x378>
 80016d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80016d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016dc:	ed97 5b1e 	vldr	d5, [r7, #120]	; 0x78
 80016e0:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
 80016e4:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80016e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 80016f2:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80016f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80016fa:	ed9f 5b67 	vldr	d5, [pc, #412]	; 8001898 <KalmanFilter+0x378>
 80016fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001702:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001706:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	xx2 = kalman->x2 - d_xx2_tmp * ((kalman->x1 - theta_k) + delta_t * kalman->x2) / xx2_tmp;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	ed93 6b06 	vldr	d6, [r3, #24]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	ed93 5b04 	vldr	d5, [r3, #16]
 8001716:	ed97 7b00 	vldr	d7, [r7]
 800171a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	ed93 7b06 	vldr	d7, [r3, #24]
 8001724:	ed9f 4b5c 	vldr	d4, [pc, #368]	; 8001898 <KalmanFilter+0x378>
 8001728:	ee27 7b04 	vmul.f64	d7, d7, d4
 800172c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001730:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001734:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001738:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 800173c:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001740:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001744:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	pp11 = kalman->R * ((((4.0 * kalman->p11 + xx1_tmp) + b_xx1_tmp) + c_xx1_tmp) + d_xx1_tmp)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	ed93 6b02 	vldr	d6, [r3, #8]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	ed93 7b08 	vldr	d7, [r3, #32]
 8001754:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001758:	ee27 5b05 	vmul.f64	d5, d7, d5
 800175c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001760:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001764:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001768:	ee35 5b07 	vadd.f64	d5, d5, d7
 800176c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8001770:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001774:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8001778:	ee35 7b07 	vadd.f64	d7, d5, d7
 800177c:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001780:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001784:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001788:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
			/ e_xx1_tmp;
	xx1_tmp = b_xx2_tmp + 2.0 * kalman->p22 * delta_t;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8001792:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001796:	ed9f 6b40 	vldr	d6, [pc, #256]	; 8001898 <KalmanFilter+0x378>
 800179a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800179e:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80017a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017a6:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
	pp12 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p12) / e_xx1_tmp;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	ed93 7b02 	vldr	d7, [r3, #8]
 80017b0:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80017ba:	ee37 5b07 	vadd.f64	d5, d7, d7
 80017be:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80017c2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017c6:	ee26 5b07 	vmul.f64	d5, d6, d7
 80017ca:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80017ce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017d2:	ed87 7b08 	vstr	d7, [r7, #32]
	pp21 = 2.0 * kalman->R * (xx1_tmp + 2.0 * kalman->p21) / e_xx1_tmp;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80017dc:	ee37 6b07 	vadd.f64	d6, d7, d7
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 80017e6:	ee37 5b07 	vadd.f64	d5, d7, d7
 80017ea:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 80017ee:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017f2:	ee26 5b07 	vmul.f64	d5, d6, d7
 80017f6:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 80017fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80017fe:	ed87 7b06 	vstr	d7, [r7, #24]
	pp22 = (kalman->p22 + kalman->Q * xx1_tmp_tmp) - (c_xx2_tmp + kalman->p12) * d_xx2_tmp / xx2_tmp;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	ed93 6b0e 	vldr	d6, [r3, #56]	; 0x38
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	ed93 5b00 	vldr	d5, [r3]
 800180e:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001812:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001816:	ee36 6b07 	vadd.f64	d6, d6, d7
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	ed93 5b0a 	vldr	d5, [r3, #40]	; 0x28
 8001820:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001824:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001828:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800182c:	ee25 4b07 	vmul.f64	d4, d5, d7
 8001830:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 8001834:	ee84 7b05 	vdiv.f64	d7, d4, d5
 8001838:	ee36 7b47 	vsub.f64	d7, d6, d7
 800183c:	ed87 7b04 	vstr	d7, [r7, #16]

	/*Update Variable*/
	kalman->x1 = xx1;
 8001840:	68f9      	ldr	r1, [r7, #12]
 8001842:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001846:	e9c1 2304 	strd	r2, r3, [r1, #16]
	kalman->x2 = xx2;
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001850:	e9c1 2306 	strd	r2, r3, [r1, #24]
	kalman->p11 = pp11;
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800185a:	e9c1 2308 	strd	r2, r3, [r1, #32]
	kalman->p12 = pp12;
 800185e:	68f9      	ldr	r1, [r7, #12]
 8001860:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001864:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	kalman->p21 = pp21;
 8001868:	68f9      	ldr	r1, [r7, #12]
 800186a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800186e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	kalman->p22 = pp22;
 8001872:	68f9      	ldr	r1, [r7, #12]
 8001874:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001878:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
}
 800187c:	bf00      	nop
 800187e:	3794      	adds	r7, #148	; 0x94
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	d2f1a9fc 	.word	0xd2f1a9fc
 800188c:	3f70624d 	.word	0x3f70624d
 8001890:	812dea12 	.word	0x812dea12
 8001894:	3d719799 	.word	0x3d719799
 8001898:	d2f1a9fc 	.word	0xd2f1a9fc
 800189c:	3f50624d 	.word	0x3f50624d
 80018a0:	e826d695 	.word	0xe826d695
 80018a4:	3e112e0b 	.word	0x3e112e0b
 80018a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80018ac:	3eb0c6f7 	.word	0x3eb0c6f7

080018b0 <PID_init>:

double BaseENCRead(){
	return 970.0f;  //fsaldfkjas;dflkjas;dflksjf;asdf
}

void PID_init(PIDParameter *PID, double Kp, double Ki, double Kd) {
 80018b0:	b480      	push	{r7}
 80018b2:	b089      	sub	sp, #36	; 0x24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	61f8      	str	r0, [r7, #28]
 80018b8:	ed87 0b04 	vstr	d0, [r7, #16]
 80018bc:	ed87 1b02 	vstr	d1, [r7, #8]
 80018c0:	ed87 2b00 	vstr	d2, [r7]
	PID->Kp = Kp;
 80018c4:	69f9      	ldr	r1, [r7, #28]
 80018c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018ca:	e9c1 2300 	strd	r2, r3, [r1]
	PID->Ki = Ki;
 80018ce:	69f9      	ldr	r1, [r7, #28]
 80018d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	PID->Kd = Kd;
 80018d8:	69f9      	ldr	r1, [r7, #28]
 80018da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018de:	e9c1 2304 	strd	r2, r3, [r1, #16]
	PID->ITerm = 0;
 80018e2:	69f9      	ldr	r1, [r7, #28]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9c1 2306 	strd	r2, r3, [r1, #24]
	PID->Setpoint = 0;
 80018f0:	69f9      	ldr	r1, [r7, #28]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Feedback = 0;
 80018fe:	69f9      	ldr	r1, [r7, #28]
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Error[0] = 0;
 800190c:	69f9      	ldr	r1, [r7, #28]
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	f04f 0300 	mov.w	r3, #0
 8001916:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	PID->Error[1] = 0;
 800191a:	69f9      	ldr	r1, [r7, #28]
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	f04f 0300 	mov.w	r3, #0
 8001924:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	PID->Output = 0;
 8001928:	69f9      	ldr	r1, [r7, #28]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
}
 8001936:	bf00      	nop
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <PID_Control>:

double PID_Control(PIDParameter *PID,double Setpoint,double Feedback){
 8001942:	b480      	push	{r7}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	6178      	str	r0, [r7, #20]
 800194a:	ed87 0b02 	vstr	d0, [r7, #8]
 800194e:	ed87 1b00 	vstr	d1, [r7]
	PID->Feedback = Feedback; 	// Feedback Input
 8001952:	6979      	ldr	r1, [r7, #20]
 8001954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001958:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	PID->Setpoint = Setpoint;	// Setpoint Input
 800195c:	6979      	ldr	r1, [r7, #20]
 800195e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001962:	e9c1 2308 	strd	r2, r3, [r1, #32]
	PID->Error[0] = PID->Setpoint - PID->Feedback;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	ed93 6b08 	vldr	d6, [r3, #32]
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8001972:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
	PID->ITerm += PID->Error[0];
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	ed93 6b06 	vldr	d6, [r3, #24]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8001988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	ed83 7b06 	vstr	d7, [r3, #24]
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	ed93 6b00 	vldr	d6, [r3]
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800199e:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	ed93 5b02 	vldr	d5, [r3, #8]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	ed93 7b06 	vldr	d7, [r3, #24]
 80019ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019b2:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ (PID->Kd * (PID->Error[0] - PID->Error[1])));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	ed93 5b04 	vldr	d5, [r3, #16]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80019c8:	ee34 7b47 	vsub.f64	d7, d4, d7
 80019cc:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019d0:	ee36 7b07 	vadd.f64	d7, d6, d7
	PID->Output = ((PID->Kp * PID->Error[0]) + (PID->Ki * PID->ITerm)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
	PID->Error[1] = PID->Error[0]; // Update Error
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80019e0:	6979      	ldr	r1, [r7, #20]
 80019e2:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	return PID->Output;
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80019ec:	ec43 2b17 	vmov	d7, r2, r3
}
 80019f0:	eeb0 0b47 	vmov.f64	d0, d7
 80019f4:	371c      	adds	r7, #28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <CascadeControl_init>:


void CascadeControl_init(ControlParameter *Control,double PosP,double PosI,double PosD,double VelP,double VelI,double VelD, double GFeed){
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b090      	sub	sp, #64	; 0x40
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001a06:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
 8001a0a:	ed87 1b0a 	vstr	d1, [r7, #40]	; 0x28
 8001a0e:	ed87 2b08 	vstr	d2, [r7, #32]
 8001a12:	ed87 3b06 	vstr	d3, [r7, #24]
 8001a16:	ed87 4b04 	vstr	d4, [r7, #16]
 8001a1a:	ed87 5b02 	vstr	d5, [r7, #8]
 8001a1e:	ed87 6b00 	vstr	d6, [r7]
	PID_init(&Control->Pos,PosP,PosI,PosD);
 8001a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a24:	ed97 2b08 	vldr	d2, [r7, #32]
 8001a28:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8001a2c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff3d 	bl	80018b0 <PID_init>
	PID_init(&Control->Vel,VelP,VelI,VelD);
 8001a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a38:	3360      	adds	r3, #96	; 0x60
 8001a3a:	ed97 2b02 	vldr	d2, [r7, #8]
 8001a3e:	ed97 1b04 	vldr	d1, [r7, #16]
 8001a42:	ed97 0b06 	vldr	d0, [r7, #24]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff32 	bl	80018b0 <PID_init>
	Control->Vel_Gfeed = GFeed;
 8001a4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001a4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a52:	e9c1 2332 	strd	r2, r3, [r1, #200]	; 0xc8
}
 8001a56:	bf00      	nop
 8001a58:	3740      	adds	r7, #64	; 0x40
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <CascadeControl>:


void CascadeControl(ControlParameter *Control, KalmanParameter *kalman,
		double Pos_Feed, double pos_set, double vel_set) {
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b088      	sub	sp, #32
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	61f8      	str	r0, [r7, #28]
 8001a66:	61b9      	str	r1, [r7, #24]
 8001a68:	ed87 0b04 	vstr	d0, [r7, #16]
 8001a6c:	ed87 1b02 	vstr	d1, [r7, #8]
 8001a70:	ed87 2b00 	vstr	d2, [r7]
	/*Set Setpoint*/
	Control->PositionSetpoint = pos_set;
 8001a74:	69f9      	ldr	r1, [r7, #28]
 8001a76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a7a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
	Control->VelocitySetpoint = vel_set;
 8001a7e:	69f9      	ldr	r1, [r7, #28]
 8001a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a84:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8

	/*Kalman Filter*/
	KalmanFilter(kalman, Pos_Feed); /*Kalman filter */
 8001a88:	ed97 0b04 	vldr	d0, [r7, #16]
 8001a8c:	69b8      	ldr	r0, [r7, #24]
 8001a8e:	f7ff fd47 	bl	8001520 <KalmanFilter>
	Control->VelocityFeedback = kalman->x2;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001a98:	69f9      	ldr	r1, [r7, #28]
 8001a9a:	e9c1 232e 	strd	r2, r3, [r1, #184]	; 0xb8
	Control->PositionFeedback = kalman->x1;
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001aa4:	69f9      	ldr	r1, [r7, #28]
 8001aa6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

	/*Position PID Control*/
	Control->PositionPIDOutput = PID_Control(&Control->Pos,
 8001aaa:	69fa      	ldr	r2, [r7, #28]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 8001ab8:	eeb0 1b46 	vmov.f64	d1, d6
 8001abc:	eeb0 0b47 	vmov.f64	d0, d7
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f7ff ff3e 	bl	8001942 <PID_Control>
 8001ac6:	eeb0 7b40 	vmov.f64	d7, d0
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	ed83 7b16 	vstr	d7, [r3, #88]	; 0x58
			Control->PositionSetpoint, Control->PositionFeedback);
	/*Feedforward Velocity*/
	Control->SumVelocityFeedForward = Control->PositionPIDOutput + Control->VelocitySetpoint;
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	ed93 7b2a 	vldr	d7, [r3, #168]	; 0xa8
 8001adc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	ed83 7b2c 	vstr	d7, [r3, #176]	; 0xb0
	/*Velocity PID Control*/
	Control->VelocityPIDOutput = PID_Control(&Control->Vel,
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	ed93 6b2e 	vldr	d6, [r3, #184]	; 0xb8
 8001af8:	eeb0 1b46 	vmov.f64	d1, d6
 8001afc:	eeb0 0b47 	vmov.f64	d0, d7
 8001b00:	4610      	mov	r0, r2
 8001b02:	f7ff ff1e 	bl	8001942 <PID_Control>
 8001b06:	eeb0 7b40 	vmov.f64	d7, d0
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	ed83 7b30 	vstr	d7, [r3, #192]	; 0xc0
			Control->SumVelocityFeedForward, Control->VelocityFeedback);
	/*Feedforward Velocity Setpoint*/
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	ed93 6b32 	vldr	d6, [r3, #200]	; 0xc8
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	ed93 7b2c 	vldr	d7, [r3, #176]	; 0xb0
 8001b1c:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ Control->VelocityPIDOutput;
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	ed93 7b30 	vldr	d7, [r3, #192]	; 0xc0
 8001b26:	ee36 7b07 	vadd.f64	d7, d6, d7
	Control->Output = (Control->Vel_Gfeed * Control->SumVelocityFeedForward)
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	ed83 7b34 	vstr	d7, [r3, #208]	; 0xd0
//	Control->Output = Control->VelocityPIDOutput;
}
 8001b30:	bf00      	nop
 8001b32:	3720      	adds	r7, #32
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <MX_CRC_Init+0x54>)
 8001b40:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8001b42:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b50:	221d      	movs	r2, #29
 8001b52:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b56:	2210      	movs	r2, #16
 8001b58:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b5c:	22c4      	movs	r2, #196	; 0xc4
 8001b5e:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_CRC_Init+0x50>)
 8001b74:	f007 ff76 	bl	8009a64 <HAL_CRC_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8001b7e:	f003 fe5f 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000248 	.word	0x20000248
 8001b8c:	58024c00 	.word	0x58024c00

08001b90 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0b      	ldr	r2, [pc, #44]	; (8001bcc <HAL_CRC_MspInit+0x3c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_CRC_MspInit+0x40>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_CRC_MspInit+0x40>)
 8001baa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <HAL_CRC_MspInit+0x40>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	58024c00 	.word	0x58024c00
 8001bd0:	58024400 	.word	0x58024400

08001bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <MX_DMA_Init+0x5c>)
 8001bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001be0:	4a13      	ldr	r2, [pc, #76]	; (8001c30 <MX_DMA_Init+0x5c>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_DMA_Init+0x5c>)
 8001bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	200b      	movs	r0, #11
 8001bfe:	f007 fefc 	bl	80099fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c02:	200b      	movs	r0, #11
 8001c04:	f007 ff13 	bl	8009a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	200c      	movs	r0, #12
 8001c0e:	f007 fef4 	bl	80099fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c12:	200c      	movs	r0, #12
 8001c14:	f007 ff0b 	bl	8009a2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	200d      	movs	r0, #13
 8001c1e:	f007 feec 	bl	80099fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c22:	200d      	movs	r0, #13
 8001c24:	f007 ff03 	bl	8009a2e <HAL_NVIC_EnableIRQ>

}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	58024400 	.word	0x58024400

08001c34 <MX_GPIO_Init>:
        * the Code Generation settings)
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08c      	sub	sp, #48	; 0x30
 8001c38:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c4a:	4b91      	ldr	r3, [pc, #580]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	4a8f      	ldr	r2, [pc, #572]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c52:	f043 0310 	orr.w	r3, r3, #16
 8001c56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c5a:	4b8d      	ldr	r3, [pc, #564]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c60:	f003 0310 	and.w	r3, r3, #16
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c68:	4b89      	ldr	r3, [pc, #548]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6e:	4a88      	ldr	r2, [pc, #544]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c78:	4b85      	ldr	r3, [pc, #532]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7e:	f003 0304 	and.w	r3, r3, #4
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c86:	4b82      	ldr	r3, [pc, #520]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c8c:	4a80      	ldr	r2, [pc, #512]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c96:	4b7e      	ldr	r3, [pc, #504]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca4:	4b7a      	ldr	r3, [pc, #488]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001caa:	4a79      	ldr	r2, [pc, #484]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb4:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b73      	ldr	r3, [pc, #460]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc8:	4a71      	ldr	r2, [pc, #452]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cca:	f043 0302 	orr.w	r3, r3, #2
 8001cce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd2:	4b6f      	ldr	r3, [pc, #444]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce0:	4b6b      	ldr	r3, [pc, #428]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce6:	4a6a      	ldr	r2, [pc, #424]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001ce8:	f043 0308 	orr.w	r3, r3, #8
 8001cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf0:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <MX_GPIO_Init+0x25c>)
 8001cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001d04:	4863      	ldr	r0, [pc, #396]	; (8001e94 <MX_GPIO_Init+0x260>)
 8001d06:	f00b f89b 	bl	800ce40 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED2_Pin, GPIO_PIN_RESET);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8001d10:	4861      	ldr	r0, [pc, #388]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001d12:	f00b f895 	bl	800ce40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001d16:	2200      	movs	r2, #0
 8001d18:	21c4      	movs	r1, #196	; 0xc4
 8001d1a:	4860      	ldr	r0, [pc, #384]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001d1c:	f00b f890 	bl	800ce40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001d26:	485e      	ldr	r0, [pc, #376]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001d28:	f00b f88a 	bl	800ce40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d32:	4859      	ldr	r0, [pc, #356]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001d34:	f00b f884 	bl	800ce40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001d38:	2201      	movs	r2, #1
 8001d3a:	213f      	movs	r1, #63	; 0x3f
 8001d3c:	4858      	ldr	r0, [pc, #352]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001d3e:	f00b f87f 	bl	800ce40 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001d42:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001d46:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d54:	f107 031c 	add.w	r3, r7, #28
 8001d58:	4619      	mov	r1, r3
 8001d5a:	484e      	ldr	r0, [pc, #312]	; (8001e94 <MX_GPIO_Init+0x260>)
 8001d5c:	f00a fec8 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8001d60:	f24e 030f 	movw	r3, #57359	; 0xe00f
 8001d64:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d66:	2303      	movs	r3, #3
 8001d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4619      	mov	r1, r3
 8001d74:	4848      	ldr	r0, [pc, #288]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001d76:	f00a febb 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001d7a:	233c      	movs	r3, #60	; 0x3c
 8001d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4845      	ldr	r0, [pc, #276]	; (8001ea4 <MX_GPIO_Init+0x270>)
 8001d8e:	f00a feaf 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 8001d92:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	483b      	ldr	r0, [pc, #236]	; (8001e98 <MX_GPIO_Init+0x264>)
 8001dac:	f00a fea0 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001db0:	2301      	movs	r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001db4:	2303      	movs	r3, #3
 8001db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4836      	ldr	r0, [pc, #216]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001dc4:	f00a fe94 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	482f      	ldr	r0, [pc, #188]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001dde:	f00a fe87 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001de2:	23c4      	movs	r3, #196	; 0xc4
 8001de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de6:	2301      	movs	r3, #1
 8001de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 031c 	add.w	r3, r7, #28
 8001df6:	4619      	mov	r1, r3
 8001df8:	4828      	ldr	r0, [pc, #160]	; (8001e9c <MX_GPIO_Init+0x268>)
 8001dfa:	f00a fe79 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	4619      	mov	r1, r3
 8001e12:	4820      	ldr	r0, [pc, #128]	; (8001e94 <MX_GPIO_Init+0x260>)
 8001e14:	f00a fe6c 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_7;
 8001e18:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001e1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	481c      	ldr	r0, [pc, #112]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001e2e:	f00a fe5f 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001e32:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001e36:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4815      	ldr	r0, [pc, #84]	; (8001ea0 <MX_GPIO_Init+0x26c>)
 8001e4c:	f00a fe50 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001e50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	480f      	ldr	r0, [pc, #60]	; (8001ea4 <MX_GPIO_Init+0x270>)
 8001e66:	f00a fe43 	bl	800caf0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e70:	2302      	movs	r3, #2
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	4808      	ldr	r0, [pc, #32]	; (8001ea4 <MX_GPIO_Init+0x270>)
 8001e84:	f00a fe34 	bl	800caf0 <HAL_GPIO_Init>

}
 8001e88:	bf00      	nop
 8001e8a:	3730      	adds	r7, #48	; 0x30
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	58024400 	.word	0x58024400
 8001e94:	58021000 	.word	0x58021000
 8001e98:	58020800 	.word	0x58020800
 8001e9c:	58020400 	.word	0x58020400
 8001ea0:	58020c00 	.word	0x58020c00
 8001ea4:	58020000 	.word	0x58020000

08001ea8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eac:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001eae:	4a1c      	ldr	r2, [pc, #112]	; (8001f20 <MX_I2C2_Init+0x78>)
 8001eb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8001eb2:	4b1a      	ldr	r3, [pc, #104]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001eb4:	4a1b      	ldr	r2, [pc, #108]	; (8001f24 <MX_I2C2_Init+0x7c>)
 8001eb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001eb8:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ebe:	4b17      	ldr	r3, [pc, #92]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec4:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ee2:	480e      	ldr	r0, [pc, #56]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ee4:	f00a ffe0 	bl	800cea8 <HAL_I2C_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001eee:	f003 fca7 	bl	8005840 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	4809      	ldr	r0, [pc, #36]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001ef6:	f00c fb11 	bl	800e51c <HAL_I2CEx_ConfigAnalogFilter>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f00:	f003 fc9e 	bl	8005840 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f04:	2100      	movs	r1, #0
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_I2C2_Init+0x74>)
 8001f08:	f00c fb53 	bl	800e5b2 <HAL_I2CEx_ConfigDigitalFilter>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f12:	f003 fc95 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000026c 	.word	0x2000026c
 8001f20:	40005800 	.word	0x40005800
 8001f24:	60404e72 	.word	0x60404e72

08001f28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b0b6      	sub	sp, #216	; 0xd8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f40:	f107 0310 	add.w	r3, r7, #16
 8001f44:	22b4      	movs	r2, #180	; 0xb4
 8001f46:	2100      	movs	r1, #0
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f015 f9f1 	bl	8017330 <memset>
  if(i2cHandle->Instance==I2C2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a29      	ldr	r2, [pc, #164]	; (8001ff8 <HAL_I2C_MspInit+0xd0>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d14a      	bne.n	8001fee <HAL_I2C_MspInit+0xc6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4618      	mov	r0, r3
 8001f68:	f00d fae4 	bl	800f534 <HAL_RCCEx_PeriphCLKConfig>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001f72:	f003 fc65 	bl	8005840 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7c:	4a1f      	ldr	r2, [pc, #124]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f86:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f9c:	2312      	movs	r3, #18
 8001f9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fae:	2304      	movs	r3, #4
 8001fb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4811      	ldr	r0, [pc, #68]	; (8002000 <HAL_I2C_MspInit+0xd8>)
 8001fbc:	f00a fd98 	bl	800caf0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001fc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fc6:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001fc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <HAL_I2C_MspInit+0xd4>)
 8001fd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2022      	movs	r0, #34	; 0x22
 8001fe4:	f007 fd09 	bl	80099fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001fe8:	2022      	movs	r0, #34	; 0x22
 8001fea:	f007 fd20 	bl	8009a2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001fee:	bf00      	nop
 8001ff0:	37d8      	adds	r7, #216	; 0xd8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40005800 	.word	0x40005800
 8001ffc:	58024400 	.word	0x58024400
 8002000:	58020400 	.word	0x58020400
 8002004:	00000000 	.word	0x00000000

08002008 <IPK>:
 *
 **************** Output ********************
 * q[4]				---> JointSpace Position
 *
 */
Kinematics_StatusTypeDef IPK(double gammabar[3], double chi[3], double q[4]) {
 8002008:	b580      	push	{r7, lr}
 800200a:	ed2d 8b02 	vpush	{d8}
 800200e:	b08e      	sub	sp, #56	; 0x38
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
	double c2;
	double q2;
	double q3;
	double s2;
	double x24;
	x24 = gammabar[1] * sqrt(chi[0] * chi[0] + chi[1] * chi[1]) - 20.0;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3308      	adds	r3, #8
 800201c:	ed93 8b00 	vldr	d8, [r3]
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	ed93 6b00 	vldr	d6, [r3]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	ed93 7b00 	vldr	d7, [r3]
 800202c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	3308      	adds	r3, #8
 8002034:	ed93 5b00 	vldr	d5, [r3]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	3308      	adds	r3, #8
 800203c:	ed93 7b00 	vldr	d7, [r3]
 8002040:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002044:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002048:	eeb0 0b47 	vmov.f64	d0, d7
 800204c:	f015 fa14 	bl	8017478 <sqrt>
 8002050:	eeb0 7b40 	vmov.f64	d7, d0
 8002054:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002058:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 800205c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002060:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	c2 = x24 * x24
 8002064:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002068:	ee27 6b07 	vmul.f64	d6, d7, d7
			+ ((chi[2] + 268.23) - 295.89) * ((chi[2] + 268.23) - 295.89);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	3310      	adds	r3, #16
 8002070:	ed93 7b00 	vldr	d7, [r3]
 8002074:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002228 <IPK+0x220>
 8002078:	ee37 7b05 	vadd.f64	d7, d7, d5
 800207c:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8002230 <IPK+0x228>
 8002080:	ee37 5b45 	vsub.f64	d5, d7, d5
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3310      	adds	r3, #16
 8002088:	ed93 7b00 	vldr	d7, [r3]
 800208c:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8002228 <IPK+0x220>
 8002090:	ee37 7b04 	vadd.f64	d7, d7, d4
 8002094:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8002230 <IPK+0x228>
 8002098:	ee37 7b44 	vsub.f64	d7, d7, d4
 800209c:	ee25 7b07 	vmul.f64	d7, d5, d7
	c2 = x24 * x24
 80020a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80020a4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	s2 = sqrt(c2);
 80020a8:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 80020ac:	f015 f9e4 	bl	8017478 <sqrt>
 80020b0:	ed87 0b08 	vstr	d0, [r7, #32]
	if ((s2 <= 760.0) && (s2 >= 0.0)) {
 80020b4:	ed97 7b08 	vldr	d7, [r7, #32]
 80020b8:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8002238 <IPK+0x230>
 80020bc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80020c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020c4:	f200 80a8 	bhi.w	8002218 <IPK+0x210>
 80020c8:	ed97 7b08 	vldr	d7, [r7, #32]
 80020cc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80020d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d4:	f2c0 80a0 	blt.w	8002218 <IPK+0x210>
		c2 = ((c2 - 144400.0) - 144400.0) / 288800.0;
 80020d8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80020dc:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8002240 <IPK+0x238>
 80020e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80020e4:	ed9f 6b56 	vldr	d6, [pc, #344]	; 8002240 <IPK+0x238>
 80020e8:	ee37 6b46 	vsub.f64	d6, d7, d6
 80020ec:	ed9f 5b56 	vldr	d5, [pc, #344]	; 8002248 <IPK+0x240>
 80020f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020f4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
		s2 = gammabar[2] * sqrt(1.0 - c2 * c2);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	3310      	adds	r3, #16
 80020fc:	ed93 8b00 	vldr	d8, [r3]
 8002100:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002104:	ee27 7b07 	vmul.f64	d7, d7, d7
 8002108:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800210c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002110:	eeb0 0b47 	vmov.f64	d0, d7
 8002114:	f015 f9b0 	bl	8017478 <sqrt>
 8002118:	eeb0 7b40 	vmov.f64	d7, d0
 800211c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002120:	ed87 7b08 	vstr	d7, [r7, #32]
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	3310      	adds	r3, #16
 8002128:	ed93 7b00 	vldr	d7, [r3]
 800212c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002228 <IPK+0x220>
 8002130:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002134:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8002230 <IPK+0x228>
 8002138:	ee37 7b46 	vsub.f64	d7, d7, d6
 800213c:	ed97 1b0c 	vldr	d1, [r7, #48]	; 0x30
 8002140:	eeb0 0b47 	vmov.f64	d0, d7
 8002144:	f015 f994 	bl	8017470 <atan2>
 8002148:	eeb0 8b40 	vmov.f64	d8, d0
				- atan2(380.0 * s2, 380.0 * c2 + 380.0)) - 1.5707963267948966;
 800214c:	ed97 7b08 	vldr	d7, [r7, #32]
 8002150:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8002250 <IPK+0x248>
 8002154:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002158:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800215c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 8002250 <IPK+0x248>
 8002160:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002164:	ed9f 5b3a 	vldr	d5, [pc, #232]	; 8002250 <IPK+0x248>
 8002168:	ee37 7b05 	vadd.f64	d7, d7, d5
 800216c:	eeb0 1b47 	vmov.f64	d1, d7
 8002170:	eeb0 0b46 	vmov.f64	d0, d6
 8002174:	f015 f97c 	bl	8017470 <atan2>
 8002178:	eeb0 7b40 	vmov.f64	d7, d0
 800217c:	ee38 7b47 	vsub.f64	d7, d8, d7
		q2 = (atan2((chi[2] + 268.23) - 295.89, x24)
 8002180:	ed9f 6b35 	vldr	d6, [pc, #212]	; 8002258 <IPK+0x250>
 8002184:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002188:	ed87 7b06 	vstr	d7, [r7, #24]
		q3 = atan2(s2, c2) + 1.5707963267948966;
 800218c:	ed97 1b0a 	vldr	d1, [r7, #40]	; 0x28
 8002190:	ed97 0b08 	vldr	d0, [r7, #32]
 8002194:	f015 f96c 	bl	8017470 <atan2>
 8002198:	eeb0 7b40 	vmov.f64	d7, d0
 800219c:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8002258 <IPK+0x250>
 80021a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 80021a4:	ed87 7b04 	vstr	d7, [r7, #16]
		q[0] = atan2(gammabar[0] * chi[1], gammabar[0] * chi[0]);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	ed93 6b00 	vldr	d6, [r3]
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	3308      	adds	r3, #8
 80021b2:	ed93 7b00 	vldr	d7, [r3]
 80021b6:	ee26 5b07 	vmul.f64	d5, d6, d7
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	ed93 6b00 	vldr	d6, [r3]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	ed93 7b00 	vldr	d7, [r3]
 80021c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80021ca:	eeb0 1b47 	vmov.f64	d1, d7
 80021ce:	eeb0 0b45 	vmov.f64	d0, d5
 80021d2:	f015 f94d 	bl	8017470 <atan2>
 80021d6:	eeb0 7b40 	vmov.f64	d7, d0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	ed83 7b00 	vstr	d7, [r3]
		q[1] = q2;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f103 0108 	add.w	r1, r3, #8
 80021e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ea:	e9c1 2300 	strd	r2, r3, [r1]
		q[2] = q3;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f103 0110 	add.w	r1, r3, #16
 80021f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80021f8:	e9c1 2300 	strd	r2, r3, [r1]
		q[3] = -q2 - q3;
 80021fc:	ed97 7b06 	vldr	d7, [r7, #24]
 8002200:	eeb1 6b47 	vneg.f64	d6, d7
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3318      	adds	r3, #24
 8002208:	ed97 7b04 	vldr	d7, [r7, #16]
 800220c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002210:	ed83 7b00 	vstr	d7, [r3]
		return Kinematics_OK;
 8002214:	2300      	movs	r3, #0
 8002216:	e000      	b.n	800221a <IPK+0x212>
	} else {
		return Error_Link_length;
 8002218:	2301      	movs	r3, #1
	}
}
 800221a:	4618      	mov	r0, r3
 800221c:	3738      	adds	r7, #56	; 0x38
 800221e:	46bd      	mov	sp, r7
 8002220:	ecbd 8b02 	vpop	{d8}
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	147ae148 	.word	0x147ae148
 800222c:	4070c3ae 	.word	0x4070c3ae
 8002230:	70a3d70a 	.word	0x70a3d70a
 8002234:	40727e3d 	.word	0x40727e3d
 8002238:	00000000 	.word	0x00000000
 800223c:	4087c000 	.word	0x4087c000
 8002240:	00000000 	.word	0x00000000
 8002244:	4101a080 	.word	0x4101a080
 8002248:	00000000 	.word	0x00000000
 800224c:	4111a080 	.word	0x4111a080
 8002250:	00000000 	.word	0x00000000
 8002254:	4077c000 	.word	0x4077c000
 8002258:	54442d18 	.word	0x54442d18
 800225c:	3ff921fb 	.word	0x3ff921fb

08002260 <IVK>:
 */

//Kinematics_StatusTypeDef IVK(double q[3], double chi_dot[3], double qv[4])

Kinematics_StatusTypeDef IVK(double q[4], double chi_dot[3], double qv[4])
{
 8002260:	b580      	push	{r7, lr}
 8002262:	ed2d 8b04 	vpush	{d8-d9}
 8002266:	b0a6      	sub	sp, #152	; 0x98
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
  double qvbar_idx_1;
  double qvbar_idx_2;
  int r1;
  int r2;
  int rtemp;
  qvbar_idx_1 = q[1] + q[2];
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	3308      	adds	r3, #8
 8002274:	ed93 6b00 	vldr	d6, [r3]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	3310      	adds	r3, #16
 800227c:	ed93 7b00 	vldr	d7, [r3]
 8002280:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002284:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = sin(qvbar_idx_1);
 8002288:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 800228c:	f015 f8a4 	bl	80173d8 <sin>
 8002290:	ed87 0b1e 	vstr	d0, [r7, #120]	; 0x78
  Jv4_tmp = cos(q[0]);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	ed93 7b00 	vldr	d7, [r3]
 800229a:	eeb0 0b47 	vmov.f64	d0, d7
 800229e:	f015 f84f 	bl	8017340 <cos>
 80022a2:	ed87 0b1c 	vstr	d0, [r7, #112]	; 0x70
  b_Jv4_tmp = sin(q[0]);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	ed93 7b00 	vldr	d7, [r3]
 80022ac:	eeb0 0b47 	vmov.f64	d0, d7
 80022b0:	f015 f892 	bl	80173d8 <sin>
 80022b4:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
  qvbar_idx_1 = 380.0 * cos(qvbar_idx_1);
 80022b8:	ed97 0b20 	vldr	d0, [r7, #128]	; 0x80
 80022bc:	f015 f840 	bl	8017340 <cos>
 80022c0:	eeb0 7b40 	vmov.f64	d7, d0
 80022c4:	ed9f 6bc8 	vldr	d6, [pc, #800]	; 80025e8 <IVK+0x388>
 80022c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022cc:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  Jv4_tmp_tmp = 380.0 * sin(q[1]);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	3308      	adds	r3, #8
 80022d4:	ed93 7b00 	vldr	d7, [r3]
 80022d8:	eeb0 0b47 	vmov.f64	d0, d7
 80022dc:	f015 f87c 	bl	80173d8 <sin>
 80022e0:	eeb0 7b40 	vmov.f64	d7, d0
 80022e4:	ed9f 6bc0 	vldr	d6, [pc, #768]	; 80025e8 <IVK+0x388>
 80022e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022ec:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
  c_Jv4_tmp = (qvbar_idx_1 + 20.0) - Jv4_tmp_tmp;
 80022f0:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80022f4:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 80022f8:	ee37 6b06 	vadd.f64	d6, d7, d6
 80022fc:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002300:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002304:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
  Jv4[0] = -b_Jv4_tmp * c_Jv4_tmp;
 8002308:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800230c:	eeb1 6b47 	vneg.f64	d6, d7
 8002310:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002314:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002318:	ed87 7b04 	vstr	d7, [r7, #16]
  Jv4[3] = -Jv4_tmp * (380.0 * qvbar_idx_2 + 380.0 * cos(q[1]));
 800231c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002320:	eeb1 8b47 	vneg.f64	d8, d7
 8002324:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002328:	ed9f 6baf 	vldr	d6, [pc, #700]	; 80025e8 <IVK+0x388>
 800232c:	ee27 9b06 	vmul.f64	d9, d7, d6
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3308      	adds	r3, #8
 8002334:	ed93 7b00 	vldr	d7, [r3]
 8002338:	eeb0 0b47 	vmov.f64	d0, d7
 800233c:	f015 f800 	bl	8017340 <cos>
 8002340:	eeb0 7b40 	vmov.f64	d7, d0
 8002344:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80025e8 <IVK+0x388>
 8002348:	ee27 7b06 	vmul.f64	d7, d7, d6
 800234c:	ee39 7b07 	vadd.f64	d7, d9, d7
 8002350:	ee28 7b07 	vmul.f64	d7, d8, d7
 8002354:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  Jv4[6] = -380.0 * qvbar_idx_2 * Jv4_tmp;
 8002358:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800235c:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80025f0 <IVK+0x390>
 8002360:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002364:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002368:	ee26 7b07 	vmul.f64	d7, d6, d7
 800236c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  Jv4[1] = Jv4_tmp * c_Jv4_tmp;
 8002370:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8002374:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002378:	ee26 7b07 	vmul.f64	d7, d6, d7
 800237c:	ed87 7b06 	vstr	d7, [r7, #24]
  Jv4[4] = -sin(q[0]) * (380.0 * sin(q[1] + q[2]) + 380.0 * cos(q[1]));
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	ed93 7b00 	vldr	d7, [r3]
 8002386:	eeb0 0b47 	vmov.f64	d0, d7
 800238a:	f015 f825 	bl	80173d8 <sin>
 800238e:	eeb0 7b40 	vmov.f64	d7, d0
 8002392:	eeb1 8b47 	vneg.f64	d8, d7
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3308      	adds	r3, #8
 800239a:	ed93 6b00 	vldr	d6, [r3]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	3310      	adds	r3, #16
 80023a2:	ed93 7b00 	vldr	d7, [r3]
 80023a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023aa:	eeb0 0b47 	vmov.f64	d0, d7
 80023ae:	f015 f813 	bl	80173d8 <sin>
 80023b2:	eeb0 7b40 	vmov.f64	d7, d0
 80023b6:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 80025e8 <IVK+0x388>
 80023ba:	ee27 9b06 	vmul.f64	d9, d7, d6
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3308      	adds	r3, #8
 80023c2:	ed93 7b00 	vldr	d7, [r3]
 80023c6:	eeb0 0b47 	vmov.f64	d0, d7
 80023ca:	f014 ffb9 	bl	8017340 <cos>
 80023ce:	eeb0 7b40 	vmov.f64	d7, d0
 80023d2:	ed9f 6b85 	vldr	d6, [pc, #532]	; 80025e8 <IVK+0x388>
 80023d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023da:	ee39 7b07 	vadd.f64	d7, d9, d7
 80023de:	ee28 7b07 	vmul.f64	d7, d8, d7
 80023e2:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  Jv4[7] = -380.0 * sin(q[1] + q[2]) * b_Jv4_tmp;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3308      	adds	r3, #8
 80023ea:	ed93 6b00 	vldr	d6, [r3]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3310      	adds	r3, #16
 80023f2:	ed93 7b00 	vldr	d7, [r3]
 80023f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80023fa:	eeb0 0b47 	vmov.f64	d0, d7
 80023fe:	f014 ffeb 	bl	80173d8 <sin>
 8002402:	eeb0 7b40 	vmov.f64	d7, d0
 8002406:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80025f0 <IVK+0x390>
 800240a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800240e:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002412:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002416:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
  Jv4[2] = 0.0;
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	e9c7 2308 	strd	r2, r3, [r7, #32]
  Jv4[5] = qvbar_idx_1 - Jv4_tmp_tmp;
 8002426:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 800242a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800242e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002432:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[8] = qvbar_idx_1;
 8002436:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800243a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  r1 = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  r2 = 1;
 8002444:	2301      	movs	r3, #1
 8002446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  rtemp = 2;
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (fabs(Jv4[1]) > fabs(Jv4[0])) {
 8002450:	ed97 7b06 	vldr	d7, [r7, #24]
 8002454:	eeb0 6bc7 	vabs.f64	d6, d7
 8002458:	ed97 7b04 	vldr	d7, [r7, #16]
 800245c:	eeb0 7bc7 	vabs.f64	d7, d7
 8002460:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8002464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002468:	dd05      	ble.n	8002476 <IVK+0x216>
    r1 = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    r2 = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  }
  Jv4[r2] /= Jv4[r1];
 8002476:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	3398      	adds	r3, #152	; 0x98
 800247e:	443b      	add	r3, r7
 8002480:	3b88      	subs	r3, #136	; 0x88
 8002482:	ed93 5b00 	vldr	d5, [r3]
 8002486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	3398      	adds	r3, #152	; 0x98
 800248e:	443b      	add	r3, r7
 8002490:	3b88      	subs	r3, #136	; 0x88
 8002492:	ed93 6b00 	vldr	d6, [r3]
 8002496:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800249a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800249e:	00db      	lsls	r3, r3, #3
 80024a0:	3398      	adds	r3, #152	; 0x98
 80024a2:	443b      	add	r3, r7
 80024a4:	3b88      	subs	r3, #136	; 0x88
 80024a6:	ed83 7b00 	vstr	d7, [r3]
  Jv4[2] = 0.0 / Jv4[r1];
 80024aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	3398      	adds	r3, #152	; 0x98
 80024b2:	443b      	add	r3, r7
 80024b4:	3b88      	subs	r3, #136	; 0x88
 80024b6:	ed93 6b00 	vldr	d6, [r3]
 80024ba:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 80025f8 <IVK+0x398>
 80024be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024c2:	ed87 7b08 	vstr	d7, [r7, #32]
  Jv4[r2 + 3] -= Jv4[r2] * Jv4[r1 + 3];
 80024c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024ca:	3303      	adds	r3, #3
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	3398      	adds	r3, #152	; 0x98
 80024d0:	443b      	add	r3, r7
 80024d2:	3b88      	subs	r3, #136	; 0x88
 80024d4:	ed93 6b00 	vldr	d6, [r3]
 80024d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	3398      	adds	r3, #152	; 0x98
 80024e0:	443b      	add	r3, r7
 80024e2:	3b88      	subs	r3, #136	; 0x88
 80024e4:	ed93 5b00 	vldr	d5, [r3]
 80024e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80024ec:	3303      	adds	r3, #3
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	3398      	adds	r3, #152	; 0x98
 80024f2:	443b      	add	r3, r7
 80024f4:	3b88      	subs	r3, #136	; 0x88
 80024f6:	ed93 7b00 	vldr	d7, [r3]
 80024fa:	ee25 7b07 	vmul.f64	d7, d5, d7
 80024fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002502:	3303      	adds	r3, #3
 8002504:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	3398      	adds	r3, #152	; 0x98
 800250c:	443b      	add	r3, r7
 800250e:	3b88      	subs	r3, #136	; 0x88
 8002510:	ed83 7b00 	vstr	d7, [r3]
  Jv4[5] -= Jv4[2] * Jv4[r1 + 3];
 8002514:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8002518:	ed97 5b08 	vldr	d5, [r7, #32]
 800251c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002520:	3303      	adds	r3, #3
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	3398      	adds	r3, #152	; 0x98
 8002526:	443b      	add	r3, r7
 8002528:	3b88      	subs	r3, #136	; 0x88
 800252a:	ed93 7b00 	vldr	d7, [r3]
 800252e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002532:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002536:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  Jv4[r2 + 6] -= Jv4[r2] * Jv4[r1 + 6];
 800253a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800253e:	3306      	adds	r3, #6
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	3398      	adds	r3, #152	; 0x98
 8002544:	443b      	add	r3, r7
 8002546:	3b88      	subs	r3, #136	; 0x88
 8002548:	ed93 6b00 	vldr	d6, [r3]
 800254c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	3398      	adds	r3, #152	; 0x98
 8002554:	443b      	add	r3, r7
 8002556:	3b88      	subs	r3, #136	; 0x88
 8002558:	ed93 5b00 	vldr	d5, [r3]
 800255c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002560:	3306      	adds	r3, #6
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	3398      	adds	r3, #152	; 0x98
 8002566:	443b      	add	r3, r7
 8002568:	3b88      	subs	r3, #136	; 0x88
 800256a:	ed93 7b00 	vldr	d7, [r3]
 800256e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002572:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002576:	3306      	adds	r3, #6
 8002578:	ee36 7b47 	vsub.f64	d7, d6, d7
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	3398      	adds	r3, #152	; 0x98
 8002580:	443b      	add	r3, r7
 8002582:	3b88      	subs	r3, #136	; 0x88
 8002584:	ed83 7b00 	vstr	d7, [r3]
  Jv4[8] -= Jv4[2] * Jv4[r1 + 6];
 8002588:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800258c:	ed97 5b08 	vldr	d5, [r7, #32]
 8002590:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002594:	3306      	adds	r3, #6
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	3398      	adds	r3, #152	; 0x98
 800259a:	443b      	add	r3, r7
 800259c:	3b88      	subs	r3, #136	; 0x88
 800259e:	ed93 7b00 	vldr	d7, [r3]
 80025a2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80025a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80025aa:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
  if (fabs(Jv4[5]) > fabs(Jv4[r2 + 3])) {
 80025ae:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80025b2:	eeb0 6bc7 	vabs.f64	d6, d7
 80025b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025ba:	3303      	adds	r3, #3
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	3398      	adds	r3, #152	; 0x98
 80025c0:	443b      	add	r3, r7
 80025c2:	3b88      	subs	r3, #136	; 0x88
 80025c4:	ed93 7b00 	vldr	d7, [r3]
 80025c8:	eeb0 7bc7 	vabs.f64	d7, d7
 80025cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80025d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025d4:	dd14      	ble.n	8002600 <IVK+0x3a0>
    rtemp = r2;
 80025d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    r2 = 2;
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025e4:	e00c      	b.n	8002600 <IVK+0x3a0>
 80025e6:	bf00      	nop
 80025e8:	00000000 	.word	0x00000000
 80025ec:	4077c000 	.word	0x4077c000
 80025f0:	00000000 	.word	0x00000000
 80025f4:	c077c000 	.word	0xc077c000
	...
  }
  Jv4[rtemp + 3] /= Jv4[r2 + 3];
 8002600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002604:	3303      	adds	r3, #3
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	3398      	adds	r3, #152	; 0x98
 800260a:	443b      	add	r3, r7
 800260c:	3b88      	subs	r3, #136	; 0x88
 800260e:	ed93 5b00 	vldr	d5, [r3]
 8002612:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002616:	3303      	adds	r3, #3
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	3398      	adds	r3, #152	; 0x98
 800261c:	443b      	add	r3, r7
 800261e:	3b88      	subs	r3, #136	; 0x88
 8002620:	ed93 6b00 	vldr	d6, [r3]
 8002624:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002628:	3303      	adds	r3, #3
 800262a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	3398      	adds	r3, #152	; 0x98
 8002632:	443b      	add	r3, r7
 8002634:	3b88      	subs	r3, #136	; 0x88
 8002636:	ed83 7b00 	vstr	d7, [r3]
  Jv4[rtemp + 6] -= Jv4[rtemp + 3] * Jv4[r2 + 6];
 800263a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800263e:	3306      	adds	r3, #6
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	3398      	adds	r3, #152	; 0x98
 8002644:	443b      	add	r3, r7
 8002646:	3b88      	subs	r3, #136	; 0x88
 8002648:	ed93 6b00 	vldr	d6, [r3]
 800264c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002650:	3303      	adds	r3, #3
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	3398      	adds	r3, #152	; 0x98
 8002656:	443b      	add	r3, r7
 8002658:	3b88      	subs	r3, #136	; 0x88
 800265a:	ed93 5b00 	vldr	d5, [r3]
 800265e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002662:	3306      	adds	r3, #6
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	3398      	adds	r3, #152	; 0x98
 8002668:	443b      	add	r3, r7
 800266a:	3b88      	subs	r3, #136	; 0x88
 800266c:	ed93 7b00 	vldr	d7, [r3]
 8002670:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002674:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002678:	3306      	adds	r3, #6
 800267a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	3398      	adds	r3, #152	; 0x98
 8002682:	443b      	add	r3, r7
 8002684:	3b88      	subs	r3, #136	; 0x88
 8002686:	ed83 7b00 	vstr	d7, [r3]
  qvbar_idx_1 = chi_dot[r2] - chi_dot[r1] * Jv4[r2];
 800268a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	68ba      	ldr	r2, [r7, #8]
 8002692:	4413      	add	r3, r2
 8002694:	ed93 6b00 	vldr	d6, [r3]
 8002698:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	4413      	add	r3, r2
 80026a2:	ed93 5b00 	vldr	d5, [r3]
 80026a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	3398      	adds	r3, #152	; 0x98
 80026ae:	443b      	add	r3, r7
 80026b0:	3b88      	subs	r3, #136	; 0x88
 80026b2:	ed93 7b00 	vldr	d7, [r3]
 80026b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80026be:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 80026c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	4413      	add	r3, r2
 80026cc:	ed93 6b00 	vldr	d6, [r3]
 80026d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	4413      	add	r3, r2
 80026da:	ed93 5b00 	vldr	d5, [r3]
 80026de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	3398      	adds	r3, #152	; 0x98
 80026e6:	443b      	add	r3, r7
 80026e8:	3b88      	subs	r3, #136	; 0x88
 80026ea:	ed93 7b00 	vldr	d7, [r3]
 80026ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80026f2:	ee36 6b47 	vsub.f64	d6, d6, d7
                 qvbar_idx_1 * Jv4[rtemp + 3]) /
 80026f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026fa:	3303      	adds	r3, #3
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	3398      	adds	r3, #152	; 0x98
 8002700:	443b      	add	r3, r7
 8002702:	3b88      	subs	r3, #136	; 0x88
 8002704:	ed93 5b00 	vldr	d5, [r3]
 8002708:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800270c:	ee25 7b07 	vmul.f64	d7, d5, d7
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8002710:	ee36 5b47 	vsub.f64	d5, d6, d7
                Jv4[rtemp + 6];
 8002714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002718:	3306      	adds	r3, #6
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	3398      	adds	r3, #152	; 0x98
 800271e:	443b      	add	r3, r7
 8002720:	3b88      	subs	r3, #136	; 0x88
 8002722:	ed93 6b00 	vldr	d6, [r3]
  qvbar_idx_2 = ((chi_dot[rtemp] - chi_dot[r1] * Jv4[rtemp]) -
 8002726:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800272a:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
  qvbar_idx_1 -= qvbar_idx_2 * Jv4[r2 + 6];
 800272e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002732:	3306      	adds	r3, #6
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	3398      	adds	r3, #152	; 0x98
 8002738:	443b      	add	r3, r7
 800273a:	3b88      	subs	r3, #136	; 0x88
 800273c:	ed93 6b00 	vldr	d6, [r3]
 8002740:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002744:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002748:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 800274c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002750:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qvbar_idx_1 /= Jv4[r2 + 3];
 8002754:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002758:	3303      	adds	r3, #3
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	3398      	adds	r3, #152	; 0x98
 800275e:	443b      	add	r3, r7
 8002760:	3b88      	subs	r3, #136	; 0x88
 8002762:	ed93 6b00 	vldr	d6, [r3]
 8002766:	ed97 5b20 	vldr	d5, [r7, #128]	; 0x80
 800276a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800276e:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
  qv[0] =
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 8002772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	4413      	add	r3, r2
 800277c:	ed93 6b00 	vldr	d6, [r3]
 8002780:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002784:	3306      	adds	r3, #6
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	3398      	adds	r3, #152	; 0x98
 800278a:	443b      	add	r3, r7
 800278c:	3b88      	subs	r3, #136	; 0x88
 800278e:	ed93 5b00 	vldr	d5, [r3]
 8002792:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002796:	ee25 7b07 	vmul.f64	d7, d5, d7
 800279a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800279e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027a2:	3303      	adds	r3, #3
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	3398      	adds	r3, #152	; 0x98
 80027a8:	443b      	add	r3, r7
 80027aa:	3b88      	subs	r3, #136	; 0x88
 80027ac:	ed93 5b00 	vldr	d5, [r3]
 80027b0:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80027b4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80027b8:	ee36 5b47 	vsub.f64	d5, d6, d7
      Jv4[r1];
 80027bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	3398      	adds	r3, #152	; 0x98
 80027c4:	443b      	add	r3, r7
 80027c6:	3b88      	subs	r3, #136	; 0x88
 80027c8:	ed93 6b00 	vldr	d6, [r3]
      ((chi_dot[r1] - qvbar_idx_2 * Jv4[r1 + 6]) - qvbar_idx_1 * Jv4[r1 + 3]) /
 80027cc:	ee85 7b06 	vdiv.f64	d7, d5, d6
  qv[0] =
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	ed83 7b00 	vstr	d7, [r3]
  qv[1] = qvbar_idx_1;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f103 0108 	add.w	r1, r3, #8
 80027dc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80027e0:	e9c1 2300 	strd	r2, r3, [r1]
  qv[2] = qvbar_idx_2;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f103 0110 	add.w	r1, r3, #16
 80027ea:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80027ee:	e9c1 2300 	strd	r2, r3, [r1]
  qv[3] = -qvbar_idx_1 - qvbar_idx_2;
 80027f2:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 80027f6:	eeb1 6b47 	vneg.f64	d6, d7
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3318      	adds	r3, #24
 80027fe:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002802:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002806:	ed83 7b00 	vstr	d7, [r3]
  return Kinematics_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3798      	adds	r7, #152	; 0x98
 8002810:	46bd      	mov	sp, r7
 8002812:	ecbd 8b04 	vpop	{d8-d9}
 8002816:	bd80      	pop	{r7, pc}

08002818 <FPK>:
 * Arguments    : const double q[5]
 *                double l3
 *                double Pne[3]
 * Return Type  : void
 */
void FPK(double q[5], double l3, double Pne[3]) {
 8002818:	b580      	push	{r7, lr}
 800281a:	ed2d 8b08 	vpush	{d8-d11}
 800281e:	b094      	sub	sp, #80	; 0x50
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	ed87 0b00 	vstr	d0, [r7]
 8002828:	60b9      	str	r1, [r7, #8]
	double e_Pne_tmp;
	double f_Pne_tmp;
	double g_Pne_tmp;
	double h_Pne_tmp;
	/* offset */
	Pne_tmp = cos(q[0]);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	ed93 7b00 	vldr	d7, [r3]
 8002830:	eeb0 0b47 	vmov.f64	d0, d7
 8002834:	f014 fd84 	bl	8017340 <cos>
 8002838:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	b_Pne_tmp = sin(q[2]);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3310      	adds	r3, #16
 8002840:	ed93 7b00 	vldr	d7, [r3]
 8002844:	eeb0 0b47 	vmov.f64	d0, d7
 8002848:	f014 fdc6 	bl	80173d8 <sin>
 800284c:	ed87 0b10 	vstr	d0, [r7, #64]	; 0x40
	c_Pne_tmp = cos(q[2]);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	3310      	adds	r3, #16
 8002854:	ed93 7b00 	vldr	d7, [r3]
 8002858:	eeb0 0b47 	vmov.f64	d0, d7
 800285c:	f014 fd70 	bl	8017340 <cos>
 8002860:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	d_Pne_tmp = sin(q[1]);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3308      	adds	r3, #8
 8002868:	ed93 7b00 	vldr	d7, [r3]
 800286c:	eeb0 0b47 	vmov.f64	d0, d7
 8002870:	f014 fdb2 	bl	80173d8 <sin>
 8002874:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	e_Pne_tmp = cos(q[1]);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3308      	adds	r3, #8
 800287c:	ed93 7b00 	vldr	d7, [r3]
 8002880:	eeb0 0b47 	vmov.f64	d0, d7
 8002884:	f014 fd5c 	bl	8017340 <cos>
 8002888:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	f_Pne_tmp = sin(q[0]);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	ed93 7b00 	vldr	d7, [r3]
 8002892:	eeb0 0b47 	vmov.f64	d0, d7
 8002896:	f014 fd9f 	bl	80173d8 <sin>
 800289a:	ed87 0b08 	vstr	d0, [r7, #32]
	g_Pne_tmp = cos(q[3]);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	3318      	adds	r3, #24
 80028a2:	ed93 7b00 	vldr	d7, [r3]
 80028a6:	eeb0 0b47 	vmov.f64	d0, d7
 80028aa:	f014 fd49 	bl	8017340 <cos>
 80028ae:	ed87 0b06 	vstr	d0, [r7, #24]
	h_Pne_tmp = sin(q[3]);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3318      	adds	r3, #24
 80028b6:	ed93 7b00 	vldr	d7, [r3]
 80028ba:	eeb0 0b47 	vmov.f64	d0, d7
 80028be:	f014 fd8b 	bl	80173d8 <sin>
 80028c2:	ed87 0b04 	vstr	d0, [r7, #16]
	Pne[0] =
			((380.0
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 80028c6:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80028ca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80028ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 80028d2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80028d6:	ee26 6b07 	vmul.f64	d6, d6, d7
							- Pne_tmp * d_Pne_tmp * b_Pne_tmp)
 80028da:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 80028de:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80028e2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80028e6:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80028ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 80028ee:	ee36 7b47 	vsub.f64	d7, d6, d7
					* (Pne_tmp * e_Pne_tmp * c_Pne_tmp
 80028f2:	ed9f 6bdb 	vldr	d6, [pc, #876]	; 8002c60 <FPK+0x448>
 80028f6:	ee27 8b06 	vmul.f64	d8, d7, d6
					+ l3
							* (g_Pne_tmp
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	ed93 7b00 	vldr	d7, [r3]
 8002900:	eeb0 0b47 	vmov.f64	d0, d7
 8002904:	f014 fd1c 	bl	8017340 <cos>
 8002908:	eeb0 9b40 	vmov.f64	d9, d0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3308      	adds	r3, #8
 8002910:	ed93 7b00 	vldr	d7, [r3]
 8002914:	eeb0 0b47 	vmov.f64	d0, d7
 8002918:	f014 fd12 	bl	8017340 <cos>
 800291c:	eeb0 7b40 	vmov.f64	d7, d0
 8002920:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002924:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002928:	ee26 6b07 	vmul.f64	d6, d6, d7
											+ Pne_tmp * c_Pne_tmp * d_Pne_tmp)
 800292c:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8002930:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002934:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002938:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800293c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002940:	ee36 6b07 	vadd.f64	d6, d6, d7
									* (cos(q[0]) * cos(q[1]) * b_Pne_tmp
 8002944:	ed97 7b06 	vldr	d7, [r7, #24]
 8002948:	ee26 9b07 	vmul.f64	d9, d6, d7
									+ h_Pne_tmp
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	ed93 7b00 	vldr	d7, [r3]
 8002952:	eeb0 0b47 	vmov.f64	d0, d7
 8002956:	f014 fcf3 	bl	8017340 <cos>
 800295a:	eeb0 ab40 	vmov.f64	d10, d0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	3308      	adds	r3, #8
 8002962:	ed93 7b00 	vldr	d7, [r3]
 8002966:	eeb0 0b47 	vmov.f64	d0, d7
 800296a:	f014 fce9 	bl	8017340 <cos>
 800296e:	eeb0 7b40 	vmov.f64	d7, d0
 8002972:	ee2a ab07 	vmul.f64	d10, d10, d7
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	3310      	adds	r3, #16
 800297a:	ed93 7b00 	vldr	d7, [r3]
 800297e:	eeb0 0b47 	vmov.f64	d0, d7
 8002982:	f014 fcdd 	bl	8017340 <cos>
 8002986:	eeb0 7b40 	vmov.f64	d7, d0
 800298a:	ee2a ab07 	vmul.f64	d10, d10, d7
													- cos(q[0]) * sin(q[1])
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	ed93 7b00 	vldr	d7, [r3]
 8002994:	eeb0 0b47 	vmov.f64	d0, d7
 8002998:	f014 fcd2 	bl	8017340 <cos>
 800299c:	eeb0 bb40 	vmov.f64	d11, d0
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	3308      	adds	r3, #8
 80029a4:	ed93 7b00 	vldr	d7, [r3]
 80029a8:	eeb0 0b47 	vmov.f64	d0, d7
 80029ac:	f014 fd14 	bl	80173d8 <sin>
 80029b0:	eeb0 7b40 	vmov.f64	d7, d0
 80029b4:	ee2b bb07 	vmul.f64	d11, d11, d7
															* sin(q[2]))))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	3310      	adds	r3, #16
 80029bc:	ed93 7b00 	vldr	d7, [r3]
 80029c0:	eeb0 0b47 	vmov.f64	d0, d7
 80029c4:	f014 fd08 	bl	80173d8 <sin>
 80029c8:	eeb0 7b40 	vmov.f64	d7, d0
 80029cc:	ee2b 7b07 	vmul.f64	d7, d11, d7
													- cos(q[0]) * sin(q[1])
 80029d0:	ee3a 6b47 	vsub.f64	d6, d10, d7
											* (cos(q[0]) * cos(q[1]) * cos(q[2])
 80029d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80029d8:	ee26 7b07 	vmul.f64	d7, d6, d7
									+ h_Pne_tmp
 80029dc:	ee39 6b07 	vadd.f64	d6, d9, d7
							* (g_Pne_tmp
 80029e0:	ed97 7b00 	vldr	d7, [r7]
 80029e4:	ee26 7b07 	vmul.f64	d7, d6, d7
					+ l3
 80029e8:	ee38 6b07 	vadd.f64	d6, d8, d7
					+ 20.0 * Pne_tmp) - 380.0 * Pne_tmp * d_Pne_tmp;
 80029ec:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80029f0:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 80029f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80029f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80029fc:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002a00:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8002c60 <FPK+0x448>
 8002a04:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002a08:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a0c:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a10:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[0] =
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	ed83 7b00 	vstr	d7, [r3]
	Pne[1] = ((l3
			* (g_Pne_tmp
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 8002a1a:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002a1e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a22:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002a26:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002a2a:	ee26 6b07 	vmul.f64	d6, d6, d7
							+ c_Pne_tmp * f_Pne_tmp * d_Pne_tmp)
 8002a2e:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8002a32:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a36:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a3a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a3e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002a42:	ee36 6b07 	vadd.f64	d6, d6, d7
					* (e_Pne_tmp * f_Pne_tmp * b_Pne_tmp
 8002a46:	ed97 7b06 	vldr	d7, [r7, #24]
 8002a4a:	ee26 6b07 	vmul.f64	d6, d6, d7
					- h_Pne_tmp
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 8002a4e:	ed97 5b08 	vldr	d5, [r7, #32]
 8002a52:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002a56:	ee25 5b07 	vmul.f64	d5, d5, d7
 8002a5a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002a5e:	ee25 5b07 	vmul.f64	d5, d5, d7
									- e_Pne_tmp * c_Pne_tmp * f_Pne_tmp))
 8002a62:	ed97 4b0a 	vldr	d4, [r7, #40]	; 0x28
 8002a66:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002a6a:	ee24 4b07 	vmul.f64	d4, d4, d7
 8002a6e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002a72:	ee24 7b07 	vmul.f64	d7, d4, d7
 8002a76:	ee35 5b47 	vsub.f64	d5, d5, d7
							* (f_Pne_tmp * d_Pne_tmp * b_Pne_tmp
 8002a7a:	ed97 7b04 	vldr	d7, [r7, #16]
 8002a7e:	ee25 7b07 	vmul.f64	d7, d5, d7
					- h_Pne_tmp
 8002a82:	ee36 6b47 	vsub.f64	d6, d6, d7
			* (g_Pne_tmp
 8002a86:	ed97 7b00 	vldr	d7, [r7]
 8002a8a:	ee26 8b07 	vmul.f64	d8, d6, d7
			- 380.0
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	ed93 7b00 	vldr	d7, [r3]
 8002a94:	eeb0 0b47 	vmov.f64	d0, d7
 8002a98:	f014 fc9e 	bl	80173d8 <sin>
 8002a9c:	eeb0 9b40 	vmov.f64	d9, d0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	ed93 7b00 	vldr	d7, [r3]
 8002aa8:	eeb0 0b47 	vmov.f64	d0, d7
 8002aac:	f014 fc94 	bl	80173d8 <sin>
 8002ab0:	eeb0 7b40 	vmov.f64	d7, d0
 8002ab4:	ee29 9b07 	vmul.f64	d9, d9, d7
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	3310      	adds	r3, #16
 8002abc:	ed93 7b00 	vldr	d7, [r3]
 8002ac0:	eeb0 0b47 	vmov.f64	d0, d7
 8002ac4:	f014 fc88 	bl	80173d8 <sin>
 8002ac8:	eeb0 7b40 	vmov.f64	d7, d0
 8002acc:	ee29 9b07 	vmul.f64	d9, d9, d7
							- cos(q[1]) * cos(q[2]) * sin(q[0])))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	ed93 7b00 	vldr	d7, [r3]
 8002ad8:	eeb0 0b47 	vmov.f64	d0, d7
 8002adc:	f014 fc30 	bl	8017340 <cos>
 8002ae0:	eeb0 ab40 	vmov.f64	d10, d0
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3310      	adds	r3, #16
 8002ae8:	ed93 7b00 	vldr	d7, [r3]
 8002aec:	eeb0 0b47 	vmov.f64	d0, d7
 8002af0:	f014 fc26 	bl	8017340 <cos>
 8002af4:	eeb0 7b40 	vmov.f64	d7, d0
 8002af8:	ee2a ab07 	vmul.f64	d10, d10, d7
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	ed93 7b00 	vldr	d7, [r3]
 8002b02:	eeb0 0b47 	vmov.f64	d0, d7
 8002b06:	f014 fc67 	bl	80173d8 <sin>
 8002b0a:	eeb0 7b40 	vmov.f64	d7, d0
 8002b0e:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8002b12:	ee39 7b47 	vsub.f64	d7, d9, d7
					* (sin(q[0]) * sin(q[1]) * sin(q[2])
 8002b16:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8002c60 <FPK+0x448>
 8002b1a:	ee27 7b06 	vmul.f64	d7, d7, d6
			- 380.0
 8002b1e:	ee38 6b47 	vsub.f64	d6, d8, d7
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 8002b22:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b26:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8002b2a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b32:	ed97 7b08 	vldr	d7, [r7, #32]
 8002b36:	ed9f 5b4a 	vldr	d5, [pc, #296]	; 8002c60 <FPK+0x448>
 8002b3a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002b3e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002b42:	ee25 7b07 	vmul.f64	d7, d5, d7
	Pne[1] = ((l3
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3308      	adds	r3, #8
			+ 20.0 * f_Pne_tmp) - 380.0 * f_Pne_tmp * d_Pne_tmp;
 8002b4a:	ee36 7b47 	vsub.f64	d7, d6, d7
	Pne[1] = ((l3
 8002b4e:	ed83 7b00 	vstr	d7, [r3]
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002b52:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002b56:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002b5a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002b5e:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
 8002b62:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002b66:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002b6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b6e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002c60 <FPK+0x448>
 8002b72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002b76:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8002c68 <FPK+0x450>
 8002b7a:	ee37 6b06 	vadd.f64	d6, d7, d6
			+ 380.0 * e_Pne_tmp)
 8002b7e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002b82:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8002c60 <FPK+0x448>
 8002b86:	ee27 7b05 	vmul.f64	d7, d7, d5
 8002b8a:	ee36 8b07 	vadd.f64	d8, d6, d7
			- l3
					* (g_Pne_tmp
							* (cos(q[1]) * cos(q[2]) - d_Pne_tmp * b_Pne_tmp)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3308      	adds	r3, #8
 8002b92:	ed93 7b00 	vldr	d7, [r3]
 8002b96:	eeb0 0b47 	vmov.f64	d0, d7
 8002b9a:	f014 fbd1 	bl	8017340 <cos>
 8002b9e:	eeb0 9b40 	vmov.f64	d9, d0
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	3310      	adds	r3, #16
 8002ba6:	ed93 7b00 	vldr	d7, [r3]
 8002baa:	eeb0 0b47 	vmov.f64	d0, d7
 8002bae:	f014 fbc7 	bl	8017340 <cos>
 8002bb2:	eeb0 7b40 	vmov.f64	d7, d0
 8002bb6:	ee29 6b07 	vmul.f64	d6, d9, d7
 8002bba:	ed97 5b0c 	vldr	d5, [r7, #48]	; 0x30
 8002bbe:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002bc2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002bc6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8002bca:	ed97 7b06 	vldr	d7, [r7, #24]
 8002bce:	ee26 9b07 	vmul.f64	d9, d6, d7
							- h_Pne_tmp
									* (cos(q[1]) * sin(q[2])
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	ed93 7b00 	vldr	d7, [r3]
 8002bda:	eeb0 0b47 	vmov.f64	d0, d7
 8002bde:	f014 fbaf 	bl	8017340 <cos>
 8002be2:	eeb0 ab40 	vmov.f64	d10, d0
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	3310      	adds	r3, #16
 8002bea:	ed93 7b00 	vldr	d7, [r3]
 8002bee:	eeb0 0b47 	vmov.f64	d0, d7
 8002bf2:	f014 fbf1 	bl	80173d8 <sin>
 8002bf6:	eeb0 7b40 	vmov.f64	d7, d0
 8002bfa:	ee2a ab07 	vmul.f64	d10, d10, d7
											+ cos(q[2]) * sin(q[1])));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	3310      	adds	r3, #16
 8002c02:	ed93 7b00 	vldr	d7, [r3]
 8002c06:	eeb0 0b47 	vmov.f64	d0, d7
 8002c0a:	f014 fb99 	bl	8017340 <cos>
 8002c0e:	eeb0 bb40 	vmov.f64	d11, d0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	3308      	adds	r3, #8
 8002c16:	ed93 7b00 	vldr	d7, [r3]
 8002c1a:	eeb0 0b47 	vmov.f64	d0, d7
 8002c1e:	f014 fbdb 	bl	80173d8 <sin>
 8002c22:	eeb0 7b40 	vmov.f64	d7, d0
 8002c26:	ee2b 7b07 	vmul.f64	d7, d11, d7
 8002c2a:	ee3a 6b07 	vadd.f64	d6, d10, d7
									* (cos(q[1]) * sin(q[2])
 8002c2e:	ed97 7b04 	vldr	d7, [r7, #16]
 8002c32:	ee26 7b07 	vmul.f64	d7, d6, d7
							- h_Pne_tmp
 8002c36:	ee39 6b47 	vsub.f64	d6, d9, d7
					* (g_Pne_tmp
 8002c3a:	ed97 7b00 	vldr	d7, [r7]
 8002c3e:	ee26 7b07 	vmul.f64	d7, d6, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3310      	adds	r3, #16
			- l3
 8002c46:	ee38 7b47 	vsub.f64	d7, d8, d7
	Pne[2] = ((380.0 * (e_Pne_tmp * b_Pne_tmp + c_Pne_tmp * d_Pne_tmp) + 295.89)
 8002c4a:	ed83 7b00 	vstr	d7, [r3]
}
 8002c4e:	bf00      	nop
 8002c50:	3750      	adds	r7, #80	; 0x50
 8002c52:	46bd      	mov	sp, r7
 8002c54:	ecbd 8b08 	vpop	{d8-d11}
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	f3af 8000 	nop.w
 8002c60:	00000000 	.word	0x00000000
 8002c64:	4077c000 	.word	0x4077c000
 8002c68:	70a3d70a 	.word	0x70a3d70a
 8002c6c:	40727e3d 	.word	0x40727e3d

08002c70 <ChessPose>:
	twist_tmp = l3 * sin((q[1] + q[2]) + q[3]);
	twist[2] = (qd[1] * ((twist_tmp_tmp - twist_tmp_tmp_tmp) + twist_tmp)
			+ qd[2] * (twist_tmp_tmp + twist_tmp)) + g_twist_tmp * d_twist_tmp;
}

void ChessPose(uint8_t Chess_Index, double Chess_Theta, double ChessPosition[2]) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b098      	sub	sp, #96	; 0x60
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	ed87 0b00 	vstr	d0, [r7]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	73fb      	strb	r3, [r7, #15]
	/*
	 *
	 */
	uint8_t X = (Chess_Index%8) + 1;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t N = (Chess_Index/8) + 1;
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	08db      	lsrs	r3, r3, #3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	3301      	adds	r3, #1
 8002c96:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	double l = 240;
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	4b56      	ldr	r3, [pc, #344]	; (8002df8 <ChessPose+0x188>)
 8002ca0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double L = 405;
 8002ca4:	a352      	add	r3, pc, #328	; (adr r3, 8002df0 <ChessPose+0x180>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	double XOffset = 25;
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	4b52      	ldr	r3, [pc, #328]	; (8002dfc <ChessPose+0x18c>)
 8002cb4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double YOffset = 8;
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <ChessPose+0x190>)
 8002cbe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double b_positionx_tmp;
	double c_positionx_tmp;
	double d_positionx_tmp;
	double e_positionx_tmp;
	double positionx_tmp;
	positionx_tmp = cos(Chess_Theta);
 8002cc2:	ed97 0b00 	vldr	d0, [r7]
 8002cc6:	f014 fb3b 	bl	8017340 <cos>
 8002cca:	ed87 0b0c 	vstr	d0, [r7, #48]	; 0x30
	b_positionx_tmp = sin(Chess_Theta);
 8002cce:	ed97 0b00 	vldr	d0, [r7]
 8002cd2:	f014 fb81 	bl	80173d8 <sin>
 8002cd6:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
	c_positionx_tmp = 9.0 * L / 16.0;
 8002cda:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002cde:	eeb2 6b02 	vmov.f64	d6, #34	; 0x41100000  9.0
 8002ce2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002ce6:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 8002cea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002cee:	ed87 7b08 	vstr	d7, [r7, #32]
	d_positionx_tmp = X * L / 8.0 - c_positionx_tmp;
 8002cf2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002cfe:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002d02:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002d06:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002d0a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002d0e:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d12:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002d16:	ed87 7b06 	vstr	d7, [r7, #24]
	e_positionx_tmp = N * L / 8.0;
 8002d1a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002d26:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002d2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002d2e:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8002d32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002d36:	ed87 7b04 	vstr	d7, [r7, #16]
	ChessPosition[0] = (((b_positionx_tmp * d_positionx_tmp
 8002d3a:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8002d3e:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d42:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp * positionx_tmp)) + l)
 8002d46:	ed97 5b08 	vldr	d5, [r7, #32]
 8002d4a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002d4e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002d52:	ed97 5b04 	vldr	d5, [r7, #16]
 8002d56:	ee35 7b47 	vsub.f64	d7, d5, d7
 8002d5a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d5e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002d62:	ee36 6b07 	vadd.f64	d6, d6, d7
			+ L / 2.0) + XOffset;
 8002d66:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 8002d6a:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8002d6e:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8002d72:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002d76:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002d7a:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[0] = (((b_positionx_tmp * d_positionx_tmp
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	ed83 7b00 	vstr	d7, [r3]
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002d84:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002d88:	eeb1 6b47 	vneg.f64	d6, d7
 8002d8c:	ed97 7b06 	vldr	d7, [r7, #24]
 8002d90:	ee26 6b07 	vmul.f64	d6, d6, d7
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp) + YOffset;
 8002d94:	ed97 5b04 	vldr	d5, [r7, #16]
 8002d98:	ed97 7b08 	vldr	d7, [r7, #32]
 8002d9c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8002da0:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002da4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002da8:	ee36 6b07 	vadd.f64	d6, d6, d7
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3308      	adds	r3, #8
			+ (e_positionx_tmp - c_positionx_tmp) * b_positionx_tmp) + YOffset;
 8002db0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002db4:	ee36 7b07 	vadd.f64	d7, d6, d7
	ChessPosition[1] = (-positionx_tmp * d_positionx_tmp
 8002db8:	ed83 7b00 	vstr	d7, [r3]
	if (ChessPosition[1] > 0){
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	ed93 7b00 	vldr	d7, [r3]
 8002dc4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dcc:	dc00      	bgt.n	8002dd0 <ChessPose+0x160>
		ChessPosition[1] += 10;
	}
}
 8002dce:	e00b      	b.n	8002de8 <ChessPose+0x178>
		ChessPosition[1] += 10;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	ed93 7b00 	vldr	d7, [r3]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	3308      	adds	r3, #8
 8002ddc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002de0:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002de4:	ed83 7b00 	vstr	d7, [r3]
}
 8002de8:	bf00      	nop
 8002dea:	3760      	adds	r7, #96	; 0x60
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	00000000 	.word	0x00000000
 8002df4:	40795000 	.word	0x40795000
 8002df8:	406e0000 	.word	0x406e0000
 8002dfc:	40390000 	.word	0x40390000
 8002e00:	40200000 	.word	0x40200000
 8002e04:	00000000 	.word	0x00000000

08002e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b096      	sub	sp, #88	; 0x58
 8002e0c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e0e:	f004 fb15 	bl	800743c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e12:	f000 fba3 	bl	800355c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002e16:	f000 fc19 	bl	800364c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e1a:	f7fe ff0b 	bl	8001c34 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e1e:	f7fe fed9 	bl	8001bd4 <MX_DMA_Init>
  MX_ADC3_Init();
 8002e22:	f7fd ffa1 	bl	8000d68 <MX_ADC3_Init>
  MX_TIM1_Init();
 8002e26:	f002 ff8d 	bl	8005d44 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002e2a:	f003 f86f 	bl	8005f0c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002e2e:	f003 f8f3 	bl	8006018 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002e32:	f003 f947 	bl	80060c4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8002e36:	f003 fa01 	bl	800623c <MX_TIM8_Init>
  MX_TIM13_Init();
 8002e3a:	f003 fa59 	bl	80062f0 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002e3e:	f003 faa7 	bl	8006390 <MX_TIM14_Init>
  MX_TIM15_Init();
 8002e42:	f003 faf5 	bl	8006430 <MX_TIM15_Init>
  MX_TIM16_Init();
 8002e46:	f003 fb7b 	bl	8006540 <MX_TIM16_Init>
  MX_TIM17_Init();
 8002e4a:	f003 fbf5 	bl	8006638 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002e4e:	f004 f901 	bl	8007054 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8002e52:	f004 f94d 	bl	80070f0 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8002e56:	f002 fd01 	bl	800585c <MX_SPI3_Init>
  MX_SPI4_Init();
 8002e5a:	f002 fd57 	bl	800590c <MX_SPI4_Init>
  MX_I2C2_Init();
 8002e5e:	f7ff f823 	bl	8001ea8 <MX_I2C2_Init>
  MX_CRC_Init();
 8002e62:	f7fe fe69 	bl	8001b38 <MX_CRC_Init>
  MX_TIM24_Init();
 8002e66:	f003 fcb3 	bl	80067d0 <MX_TIM24_Init>
  MX_TIM23_Init();
 8002e6a:	f003 fc61 	bl	8006730 <MX_TIM23_Init>
  MX_TIM6_Init();
 8002e6e:	f003 f9ad 	bl	80061cc <MX_TIM6_Init>
  MX_UART5_Init();
 8002e72:	f004 f89d 	bl	8006fb0 <MX_UART5_Init>
  MX_ADC1_Init();
 8002e76:	f7fd fe9b 	bl	8000bb0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002e7a:	f7fd ff15 	bl	8000ca8 <MX_ADC2_Init>
  MX_TIM2_Init();
 8002e7e:	f002 fff1 	bl	8005e64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	MX_DMA_Init();
 8002e82:	f7fe fea7 	bl	8001bd4 <MX_DMA_Init>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);	// LVDS EN
 8002e86:	2201      	movs	r2, #1
 8002e88:	2140      	movs	r1, #64	; 0x40
 8002e8a:	48c9      	ldr	r0, [pc, #804]	; (80031b0 <main+0x3a8>)
 8002e8c:	f009 ffd8 	bl	800ce40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);	// Level Shifter EN
 8002e90:	2201      	movs	r2, #1
 8002e92:	2140      	movs	r1, #64	; 0x40
 8002e94:	48c7      	ldr	r0, [pc, #796]	; (80031b4 <main+0x3ac>)
 8002e96:	f009 ffd3 	bl	800ce40 <HAL_GPIO_WritePin>

	Temp_Calibration =
			(110.0 - 30.0)
					/ (*(unsigned short*) (0x1FF1E840)
 8002e9a:	4bc7      	ldr	r3, [pc, #796]	; (80031b8 <main+0x3b0>)
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
							- *(unsigned short*) (0x1FF1E820));
 8002ea0:	4bc6      	ldr	r3, [pc, #792]	; (80031bc <main+0x3b4>)
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	1ad3      	subs	r3, r2, r3
					/ (*(unsigned short*) (0x1FF1E840)
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002eae:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 8003148 <main+0x340>
 8002eb2:	ee85 7b06 	vdiv.f64	d7, d5, d6
	Temp_Calibration =
 8002eb6:	4bc2      	ldr	r3, [pc, #776]	; (80031c0 <main+0x3b8>)
 8002eb8:	ed83 7b00 	vstr	d7, [r3]
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002ebc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	48c0      	ldr	r0, [pc, #768]	; (80031c4 <main+0x3bc>)
 8002ec4:	f006 fb46 	bl	8009554 <HAL_ADCEx_Calibration_Start>

	/*			   Encoder				*/
	AS5047U_init(&Encoder[0], &hspi3, GPIOD, &hcrc, GPIO_PIN_0, 6500);
 8002ec8:	2301      	movs	r3, #1
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	ed9f 0ba0 	vldr	d0, [pc, #640]	; 8003150 <main+0x348>
 8002ed0:	4bbd      	ldr	r3, [pc, #756]	; (80031c8 <main+0x3c0>)
 8002ed2:	4ab7      	ldr	r2, [pc, #732]	; (80031b0 <main+0x3a8>)
 8002ed4:	49bd      	ldr	r1, [pc, #756]	; (80031cc <main+0x3c4>)
 8002ed6:	48be      	ldr	r0, [pc, #760]	; (80031d0 <main+0x3c8>)
 8002ed8:	f7fd fbc2 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[1], &hspi3, GPIOD, &hcrc, GPIO_PIN_1, 10100);
 8002edc:	2302      	movs	r3, #2
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	ed9f 0b9d 	vldr	d0, [pc, #628]	; 8003158 <main+0x350>
 8002ee4:	4bb8      	ldr	r3, [pc, #736]	; (80031c8 <main+0x3c0>)
 8002ee6:	4ab2      	ldr	r2, [pc, #712]	; (80031b0 <main+0x3a8>)
 8002ee8:	49b8      	ldr	r1, [pc, #736]	; (80031cc <main+0x3c4>)
 8002eea:	48ba      	ldr	r0, [pc, #744]	; (80031d4 <main+0x3cc>)
 8002eec:	f7fd fbb8 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[2], &hspi3, GPIOD, &hcrc, GPIO_PIN_2, 3165);
 8002ef0:	2304      	movs	r3, #4
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8003160 <main+0x358>
 8002ef8:	4bb3      	ldr	r3, [pc, #716]	; (80031c8 <main+0x3c0>)
 8002efa:	4aad      	ldr	r2, [pc, #692]	; (80031b0 <main+0x3a8>)
 8002efc:	49b3      	ldr	r1, [pc, #716]	; (80031cc <main+0x3c4>)
 8002efe:	48b6      	ldr	r0, [pc, #728]	; (80031d8 <main+0x3d0>)
 8002f00:	f7fd fbae 	bl	8000660 <AS5047U_init>
	AS5047U_init(&Encoder[3], &hspi3, GPIOD, &hcrc, GPIO_PIN_3, 6970);
 8002f04:	2308      	movs	r3, #8
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	ed9f 0b97 	vldr	d0, [pc, #604]	; 8003168 <main+0x360>
 8002f0c:	4bae      	ldr	r3, [pc, #696]	; (80031c8 <main+0x3c0>)
 8002f0e:	4aa8      	ldr	r2, [pc, #672]	; (80031b0 <main+0x3a8>)
 8002f10:	49ae      	ldr	r1, [pc, #696]	; (80031cc <main+0x3c4>)
 8002f12:	48b2      	ldr	r0, [pc, #712]	; (80031dc <main+0x3d4>)
 8002f14:	f7fd fba4 	bl	8000660 <AS5047U_init>

	HAL_Delay(50);
 8002f18:	2032      	movs	r0, #50	; 0x32
 8002f1a:	f004 fb21 	bl	8007560 <HAL_Delay>

	/* Encoder ABI Res Setting */
	AS5047U_Write(&Encoder[0], 0x001A, 0b01000000);
 8002f1e:	2240      	movs	r2, #64	; 0x40
 8002f20:	211a      	movs	r1, #26
 8002f22:	48ab      	ldr	r0, [pc, #684]	; (80031d0 <main+0x3c8>)
 8002f24:	f7fd fbe8 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[1], 0x001A, 0b01000000);
 8002f28:	2240      	movs	r2, #64	; 0x40
 8002f2a:	211a      	movs	r1, #26
 8002f2c:	48a9      	ldr	r0, [pc, #676]	; (80031d4 <main+0x3cc>)
 8002f2e:	f7fd fbe3 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[2], 0x001A, 0b01000000);
 8002f32:	2240      	movs	r2, #64	; 0x40
 8002f34:	211a      	movs	r1, #26
 8002f36:	48a8      	ldr	r0, [pc, #672]	; (80031d8 <main+0x3d0>)
 8002f38:	f7fd fbde 	bl	80006f8 <AS5047U_Write>
	AS5047U_Write(&Encoder[3], 0x001A, 0b01000000);
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	211a      	movs	r1, #26
 8002f40:	48a6      	ldr	r0, [pc, #664]	; (80031dc <main+0x3d4>)
 8002f42:	f7fd fbd9 	bl	80006f8 <AS5047U_Write>

	/* Chess Board Encoder */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8002f46:	213c      	movs	r1, #60	; 0x3c
 8002f48:	48a5      	ldr	r0, [pc, #660]	; (80031e0 <main+0x3d8>)
 8002f4a:	f010 f94f 	bl	80131ec <HAL_TIM_Encoder_Start>

	/*			Kalman Filter			*/
	Kalman_init(&Kalman[0], 5000, 0.001);
 8002f4e:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8003170 <main+0x368>
 8002f52:	ed9f 0b89 	vldr	d0, [pc, #548]	; 8003178 <main+0x370>
 8002f56:	48a3      	ldr	r0, [pc, #652]	; (80031e4 <main+0x3dc>)
 8002f58:	f7fe fa9e 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[1], 5000, 0.001);
 8002f5c:	ed9f 1b84 	vldr	d1, [pc, #528]	; 8003170 <main+0x368>
 8002f60:	ed9f 0b85 	vldr	d0, [pc, #532]	; 8003178 <main+0x370>
 8002f64:	48a0      	ldr	r0, [pc, #640]	; (80031e8 <main+0x3e0>)
 8002f66:	f7fe fa97 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[2], 5000, 0.001);
 8002f6a:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8003170 <main+0x368>
 8002f6e:	ed9f 0b82 	vldr	d0, [pc, #520]	; 8003178 <main+0x370>
 8002f72:	489e      	ldr	r0, [pc, #632]	; (80031ec <main+0x3e4>)
 8002f74:	f7fe fa90 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[3], 5000, 0.001);
 8002f78:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8003170 <main+0x368>
 8002f7c:	ed9f 0b7e 	vldr	d0, [pc, #504]	; 8003178 <main+0x370>
 8002f80:	489b      	ldr	r0, [pc, #620]	; (80031f0 <main+0x3e8>)
 8002f82:	f7fe fa89 	bl	8001498 <Kalman_init>
	Kalman_init(&Kalman[5], 5000, 0.001);
 8002f86:	ed9f 1b7a 	vldr	d1, [pc, #488]	; 8003170 <main+0x368>
 8002f8a:	ed9f 0b7b 	vldr	d0, [pc, #492]	; 8003178 <main+0x370>
 8002f8e:	4899      	ldr	r0, [pc, #612]	; (80031f4 <main+0x3ec>)
 8002f90:	f7fe fa82 	bl	8001498 <Kalman_init>

	/*			CascadeControl			*/
	CascadeControl_init(&Control[0], 0.75, 0, 0, 15, 0.5, 10, 400);
 8002f94:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8003180 <main+0x378>
 8002f98:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002f9c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8002fa0:	eeb2 3b0e 	vmov.f64	d3, #46	; 0x41700000  15.0
 8002fa4:	ed9f 2b78 	vldr	d2, [pc, #480]	; 8003188 <main+0x380>
 8002fa8:	ed9f 1b77 	vldr	d1, [pc, #476]	; 8003188 <main+0x380>
 8002fac:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8002fb0:	4891      	ldr	r0, [pc, #580]	; (80031f8 <main+0x3f0>)
 8002fb2:	f7fe fd24 	bl	80019fe <CascadeControl_init>
	CascadeControl_init(&Control[1], 0.5, 0, 0.5, 10, 0, 30, 410);
 8002fb6:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8003190 <main+0x388>
 8002fba:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002fbe:	ed9f 4b72 	vldr	d4, [pc, #456]	; 8003188 <main+0x380>
 8002fc2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8002fc6:	eeb6 2b00 	vmov.f64	d2, #96	; 0x3f000000  0.5
 8002fca:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8003188 <main+0x380>
 8002fce:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002fd2:	488a      	ldr	r0, [pc, #552]	; (80031fc <main+0x3f4>)
 8002fd4:	f7fe fd13 	bl	80019fe <CascadeControl_init>
	CascadeControl_init(&Control[2], 0.5, 0, 0.3, 25, 0, 30, 800);
 8002fd8:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8003198 <main+0x390>
 8002fdc:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 8002fe0:	ed9f 4b69 	vldr	d4, [pc, #420]	; 8003188 <main+0x380>
 8002fe4:	eeb3 3b09 	vmov.f64	d3, #57	; 0x41c80000  25.0
 8002fe8:	ed9f 2b6d 	vldr	d2, [pc, #436]	; 80031a0 <main+0x398>
 8002fec:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8003188 <main+0x380>
 8002ff0:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8002ff4:	4882      	ldr	r0, [pc, #520]	; (8003200 <main+0x3f8>)
 8002ff6:	f7fe fd02 	bl	80019fe <CascadeControl_init>
	CascadeControl_init(&Control[3], 0.75, 0, 0.3, 9, 0, 3, 420);
 8002ffa:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 80031a8 <main+0x3a0>
 8002ffe:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8003002:	ed9f 4b61 	vldr	d4, [pc, #388]	; 8003188 <main+0x380>
 8003006:	eeb2 3b02 	vmov.f64	d3, #34	; 0x41100000  9.0
 800300a:	ed9f 2b65 	vldr	d2, [pc, #404]	; 80031a0 <main+0x398>
 800300e:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8003188 <main+0x380>
 8003012:	eeb6 0b08 	vmov.f64	d0, #104	; 0x3f400000  0.750
 8003016:	487b      	ldr	r0, [pc, #492]	; (8003204 <main+0x3fc>)
 8003018:	f7fe fcf1 	bl	80019fe <CascadeControl_init>

	/*  Power Supply Temperature Sensor */
	Tmp75_Init(&hi2c2);
 800301c:	487a      	ldr	r0, [pc, #488]	; (8003208 <main+0x400>)
 800301e:	f7fd fd49 	bl	8000ab4 <Tmp75_Init>

	SetPoint_Position[0] = EncPulse2Rad_Read(&Encoder[0], 1);
 8003022:	2101      	movs	r1, #1
 8003024:	486a      	ldr	r0, [pc, #424]	; (80031d0 <main+0x3c8>)
 8003026:	f7fd faf5 	bl	8000614 <EncPulse2Rad_Read>
 800302a:	eeb0 7b40 	vmov.f64	d7, d0
 800302e:	4b77      	ldr	r3, [pc, #476]	; (800320c <main+0x404>)
 8003030:	ed83 7b00 	vstr	d7, [r3]
	SetPoint_Position[1] = EncPulse2Rad_Read(&Encoder[1], 0);
 8003034:	2100      	movs	r1, #0
 8003036:	4867      	ldr	r0, [pc, #412]	; (80031d4 <main+0x3cc>)
 8003038:	f7fd faec 	bl	8000614 <EncPulse2Rad_Read>
 800303c:	eeb0 7b40 	vmov.f64	d7, d0
 8003040:	4b72      	ldr	r3, [pc, #456]	; (800320c <main+0x404>)
 8003042:	ed83 7b02 	vstr	d7, [r3, #8]
	SetPoint_Position[2] = EncPulse2Rad_Read(&Encoder[2], 0);
 8003046:	2100      	movs	r1, #0
 8003048:	4863      	ldr	r0, [pc, #396]	; (80031d8 <main+0x3d0>)
 800304a:	f7fd fae3 	bl	8000614 <EncPulse2Rad_Read>
 800304e:	eeb0 7b40 	vmov.f64	d7, d0
 8003052:	4b6e      	ldr	r3, [pc, #440]	; (800320c <main+0x404>)
 8003054:	ed83 7b04 	vstr	d7, [r3, #16]
	SetPoint_Position[3] = EncPulse2Rad_Read(&Encoder[3], 0);
 8003058:	2100      	movs	r1, #0
 800305a:	4860      	ldr	r0, [pc, #384]	; (80031dc <main+0x3d4>)
 800305c:	f7fd fada 	bl	8000614 <EncPulse2Rad_Read>
 8003060:	eeb0 7b40 	vmov.f64	d7, d0
 8003064:	4b69      	ldr	r3, [pc, #420]	; (800320c <main+0x404>)
 8003066:	ed83 7b06 	vstr	d7, [r3, #24]
	SetPoint_Velocity[0] = 0;
 800306a:	4969      	ldr	r1, [pc, #420]	; (8003210 <main+0x408>)
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9c1 2300 	strd	r2, r3, [r1]
	SetPoint_Velocity[1] = 0;
 8003078:	4965      	ldr	r1, [pc, #404]	; (8003210 <main+0x408>)
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9c1 2302 	strd	r2, r3, [r1, #8]
	SetPoint_Velocity[2] = 0;
 8003086:	4962      	ldr	r1, [pc, #392]	; (8003210 <main+0x408>)
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	e9c1 2304 	strd	r2, r3, [r1, #16]
	SetPoint_Velocity[3] = 0;
 8003094:	495e      	ldr	r1, [pc, #376]	; (8003210 <main+0x408>)
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	e9c1 2306 	strd	r2, r3, [r1, #24]

	/*			Stepper Driver			*/
	Step_Driver_init(&Stepper[0], &htim13, TIM_CHANNEL_1, GPIOE, GPIO_PIN_0, 500000, 1);
 80030a2:	2301      	movs	r3, #1
 80030a4:	9302      	str	r3, [sp, #8]
 80030a6:	4b5b      	ldr	r3, [pc, #364]	; (8003214 <main+0x40c>)
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2301      	movs	r3, #1
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	4b41      	ldr	r3, [pc, #260]	; (80031b4 <main+0x3ac>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	4959      	ldr	r1, [pc, #356]	; (8003218 <main+0x410>)
 80030b4:	4859      	ldr	r0, [pc, #356]	; (800321c <main+0x414>)
 80030b6:	f7fd ff75 	bl	8000fa4 <Step_Driver_init>
	Step_Driver_init(&Stepper[1], &htim14, TIM_CHANNEL_1, GPIOE, GPIO_PIN_1, 500000, 0);
 80030ba:	2300      	movs	r3, #0
 80030bc:	9302      	str	r3, [sp, #8]
 80030be:	4b55      	ldr	r3, [pc, #340]	; (8003214 <main+0x40c>)
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	2302      	movs	r3, #2
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <main+0x3ac>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	4955      	ldr	r1, [pc, #340]	; (8003220 <main+0x418>)
 80030cc:	4855      	ldr	r0, [pc, #340]	; (8003224 <main+0x41c>)
 80030ce:	f7fd ff69 	bl	8000fa4 <Step_Driver_init>
	Step_Driver_init(&Stepper[2], &htim15, TIM_CHANNEL_1, GPIOE, GPIO_PIN_2, 500000, 1);
 80030d2:	2301      	movs	r3, #1
 80030d4:	9302      	str	r3, [sp, #8]
 80030d6:	4b4f      	ldr	r3, [pc, #316]	; (8003214 <main+0x40c>)
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	2304      	movs	r3, #4
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	4b35      	ldr	r3, [pc, #212]	; (80031b4 <main+0x3ac>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	4951      	ldr	r1, [pc, #324]	; (8003228 <main+0x420>)
 80030e4:	4851      	ldr	r0, [pc, #324]	; (800322c <main+0x424>)
 80030e6:	f7fd ff5d 	bl	8000fa4 <Step_Driver_init>
	Step_Driver_init(&Stepper[3], &htim16, TIM_CHANNEL_1, GPIOE, GPIO_PIN_3, 500000, 1);
 80030ea:	2301      	movs	r3, #1
 80030ec:	9302      	str	r3, [sp, #8]
 80030ee:	4b49      	ldr	r3, [pc, #292]	; (8003214 <main+0x40c>)
 80030f0:	9301      	str	r3, [sp, #4]
 80030f2:	2308      	movs	r3, #8
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <main+0x3ac>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	494d      	ldr	r1, [pc, #308]	; (8003230 <main+0x428>)
 80030fc:	484d      	ldr	r0, [pc, #308]	; (8003234 <main+0x42c>)
 80030fe:	f7fd ff51 	bl	8000fa4 <Step_Driver_init>

	/*         	  Servo             */
	Servo_init(&Servo[0], &htim3, TIM_CHANNEL_1);
 8003102:	2200      	movs	r2, #0
 8003104:	494c      	ldr	r1, [pc, #304]	; (8003238 <main+0x430>)
 8003106:	484d      	ldr	r0, [pc, #308]	; (800323c <main+0x434>)
 8003108:	f7fd fff7 	bl	80010fa <Servo_init>
	Servo_init(&Servo[1], &htim3, TIM_CHANNEL_2);
 800310c:	2204      	movs	r2, #4
 800310e:	494a      	ldr	r1, [pc, #296]	; (8003238 <main+0x430>)
 8003110:	484b      	ldr	r0, [pc, #300]	; (8003240 <main+0x438>)
 8003112:	f7fd fff2 	bl	80010fa <Servo_init>
	Servo_Drive(&Servo[0], 90);
 8003116:	215a      	movs	r1, #90	; 0x5a
 8003118:	4848      	ldr	r0, [pc, #288]	; (800323c <main+0x434>)
 800311a:	f7fe f843 	bl	80011a4 <Servo_Drive>
	Servo_Drive(&Servo[1], 90);
 800311e:	215a      	movs	r1, #90	; 0x5a
 8003120:	4847      	ldr	r0, [pc, #284]	; (8003240 <main+0x438>)
 8003122:	f7fe f83f 	bl	80011a4 <Servo_Drive>

	/*			Trajectory			*/
	Test_traj_Val[0] = 0;
 8003126:	4947      	ldr	r1, [pc, #284]	; (8003244 <main+0x43c>)
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	e9c1 2300 	strd	r2, r3, [r1]
	Test_traj_Val[1] = 0;
 8003134:	4943      	ldr	r1, [pc, #268]	; (8003244 <main+0x43c>)
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003142:	e081      	b.n	8003248 <main+0x440>
 8003144:	f3af 8000 	nop.w
 8003148:	00000000 	.word	0x00000000
 800314c:	40540000 	.word	0x40540000
 8003150:	00000000 	.word	0x00000000
 8003154:	40b96400 	.word	0x40b96400
 8003158:	00000000 	.word	0x00000000
 800315c:	40c3ba00 	.word	0x40c3ba00
 8003160:	00000000 	.word	0x00000000
 8003164:	40a8ba00 	.word	0x40a8ba00
 8003168:	00000000 	.word	0x00000000
 800316c:	40bb3a00 	.word	0x40bb3a00
 8003170:	d2f1a9fc 	.word	0xd2f1a9fc
 8003174:	3f50624d 	.word	0x3f50624d
 8003178:	00000000 	.word	0x00000000
 800317c:	40b38800 	.word	0x40b38800
 8003180:	00000000 	.word	0x00000000
 8003184:	40790000 	.word	0x40790000
	...
 8003194:	4079a000 	.word	0x4079a000
 8003198:	00000000 	.word	0x00000000
 800319c:	40890000 	.word	0x40890000
 80031a0:	33333333 	.word	0x33333333
 80031a4:	3fd33333 	.word	0x3fd33333
 80031a8:	00000000 	.word	0x00000000
 80031ac:	407a4000 	.word	0x407a4000
 80031b0:	58020c00 	.word	0x58020c00
 80031b4:	58021000 	.word	0x58021000
 80031b8:	1ff1e840 	.word	0x1ff1e840
 80031bc:	1ff1e820 	.word	0x1ff1e820
 80031c0:	200002c0 	.word	0x200002c0
 80031c4:	200001d4 	.word	0x200001d4
 80031c8:	20000248 	.word	0x20000248
 80031cc:	20000c3c 	.word	0x20000c3c
 80031d0:	200002c8 	.word	0x200002c8
 80031d4:	200002f0 	.word	0x200002f0
 80031d8:	20000318 	.word	0x20000318
 80031dc:	20000340 	.word	0x20000340
 80031e0:	20000d98 	.word	0x20000d98
 80031e4:	20000368 	.word	0x20000368
 80031e8:	200003a8 	.word	0x200003a8
 80031ec:	200003e8 	.word	0x200003e8
 80031f0:	20000428 	.word	0x20000428
 80031f4:	200004a8 	.word	0x200004a8
 80031f8:	200004a8 	.word	0x200004a8
 80031fc:	20000580 	.word	0x20000580
 8003200:	20000658 	.word	0x20000658
 8003204:	20000730 	.word	0x20000730
 8003208:	2000026c 	.word	0x2000026c
 800320c:	20000b70 	.word	0x20000b70
 8003210:	20000b98 	.word	0x20000b98
 8003214:	0007a120 	.word	0x0007a120
 8003218:	20000f60 	.word	0x20000f60
 800321c:	20000808 	.word	0x20000808
 8003220:	20000fac 	.word	0x20000fac
 8003224:	2000081c 	.word	0x2000081c
 8003228:	20000ff8 	.word	0x20000ff8
 800322c:	20000830 	.word	0x20000830
 8003230:	20001044 	.word	0x20001044
 8003234:	20000844 	.word	0x20000844
 8003238:	20000de4 	.word	0x20000de4
 800323c:	20000858 	.word	0x20000858
 8003240:	20000860 	.word	0x20000860
 8003244:	20000c00 	.word	0x20000c00
	Test_traj_Val[2] = 0;
 8003248:	49a9      	ldr	r1, [pc, #676]	; (80034f0 <main+0x6e8>)
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	f04f 0300 	mov.w	r3, #0
 8003252:	e9c1 2304 	strd	r2, r3, [r1, #16]
	Test_traj_Val[3] = 0;
 8003256:	49a6      	ldr	r1, [pc, #664]	; (80034f0 <main+0x6e8>)
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	e9c1 2306 	strd	r2, r3, [r1, #24]
	Traj_Flag = 0;
 8003264:	4ba3      	ldr	r3, [pc, #652]	; (80034f4 <main+0x6ec>)
 8003266:	2200      	movs	r2, #0
 8003268:	701a      	strb	r2, [r3, #0]
	t = 0;
 800326a:	49a3      	ldr	r1, [pc, #652]	; (80034f8 <main+0x6f0>)
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	e9c1 2300 	strd	r2, r3, [r1]

	/*   RGB LED   */
	Neopixel_Init(&Neopixel, &htim1, TIM_CHANNEL_1);
 8003278:	2200      	movs	r2, #0
 800327a:	49a0      	ldr	r1, [pc, #640]	; (80034fc <main+0x6f4>)
 800327c:	48a0      	ldr	r0, [pc, #640]	; (8003500 <main+0x6f8>)
 800327e:	f7fd fb3b 	bl	80008f8 <Neopixel_Init>
	Neopixel_Set(&Neopixel, 0, 255, 0, 0);
 8003282:	2300      	movs	r3, #0
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	2300      	movs	r3, #0
 8003288:	22ff      	movs	r2, #255	; 0xff
 800328a:	2100      	movs	r1, #0
 800328c:	489c      	ldr	r0, [pc, #624]	; (8003500 <main+0x6f8>)
 800328e:	f7fd fb6f 	bl	8000970 <Neopixel_Set>
	Neopixel_Set(&Neopixel, 1, 0, 255, 0);
 8003292:	2300      	movs	r3, #0
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	23ff      	movs	r3, #255	; 0xff
 8003298:	2200      	movs	r2, #0
 800329a:	2101      	movs	r1, #1
 800329c:	4898      	ldr	r0, [pc, #608]	; (8003500 <main+0x6f8>)
 800329e:	f7fd fb67 	bl	8000970 <Neopixel_Set>
	Neopixel_Set(&Neopixel, 2, 0, 0, 255);
 80032a2:	23ff      	movs	r3, #255	; 0xff
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	2300      	movs	r3, #0
 80032a8:	2200      	movs	r2, #0
 80032aa:	2102      	movs	r1, #2
 80032ac:	4894      	ldr	r0, [pc, #592]	; (8003500 <main+0x6f8>)
 80032ae:	f7fd fb5f 	bl	8000970 <Neopixel_Set>
	Neopixel_Sent(&Neopixel);
 80032b2:	4893      	ldr	r0, [pc, #588]	; (8003500 <main+0x6f8>)
 80032b4:	f7fd fb8d 	bl	80009d2 <Neopixel_Sent>


	HAL_TIM_Base_Start_IT(&htim23);   // Start Control Timer
 80032b8:	4892      	ldr	r0, [pc, #584]	; (8003504 <main+0x6fc>)
 80032ba:	f00f f9cb 	bl	8012654 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 80032be:	220e      	movs	r2, #14
 80032c0:	4991      	ldr	r1, [pc, #580]	; (8003508 <main+0x700>)
 80032c2:	4892      	ldr	r0, [pc, #584]	; (800350c <main+0x704>)
 80032c4:	f011 fae2 	bl	801488c <HAL_UART_Receive_IT>
	ChessMoveStates = Chess_idle;
 80032c8:	4b91      	ldr	r3, [pc, #580]	; (8003510 <main+0x708>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	701a      	strb	r2, [r3, #0]

    /* USER CODE BEGIN 3 */
//		Servo_Drive(&Servo[0], Servo_Griper[0]);
//		Servo_Drive(&Servo[1], Servo_Griper[1]);

		if (Test_traj) {
 80032ce:	4b91      	ldr	r3, [pc, #580]	; (8003514 <main+0x70c>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <main+0x4e4>
			Test_traj = 0;
 80032d6:	4b8f      	ldr	r3, [pc, #572]	; (8003514 <main+0x70c>)
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
			JMoveTaskSpace(TaskSpace_Live_Ex1, Time_Live_Ex1);
 80032dc:	4b8e      	ldr	r3, [pc, #568]	; (8003518 <main+0x710>)
 80032de:	ed93 7b00 	vldr	d7, [r3]
 80032e2:	eeb0 0b47 	vmov.f64	d0, d7
 80032e6:	488d      	ldr	r0, [pc, #564]	; (800351c <main+0x714>)
 80032e8:	f001 fd52 	bl	8004d90 <JMoveTaskSpace>
		}
		if (Test_traj2) {
 80032ec:	4b8c      	ldr	r3, [pc, #560]	; (8003520 <main+0x718>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d01f      	beq.n	8003334 <main+0x52c>
			Test_traj2 = 0;
 80032f4:	4b8a      	ldr	r3, [pc, #552]	; (8003520 <main+0x718>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]
			double TaskSpace_Live_Ex1_ChangeZ[3];
			TaskSpace_Live_Ex1_ChangeZ[0] = TaskSpace_Live_Ex1[0];
 80032fa:	4b88      	ldr	r3, [pc, #544]	; (800351c <main+0x714>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	e9c7 2308 	strd	r2, r3, [r7, #32]
			TaskSpace_Live_Ex1_ChangeZ[1] = TaskSpace_Live_Ex1[1];
 8003304:	4b85      	ldr	r3, [pc, #532]	; (800351c <main+0x714>)
 8003306:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800330a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			TaskSpace_Live_Ex1_ChangeZ[2] = TaskSpace_Live_Ex1[2] - 100;
 800330e:	4b83      	ldr	r3, [pc, #524]	; (800351c <main+0x714>)
 8003310:	ed93 7b04 	vldr	d7, [r3, #16]
 8003314:	ed9f 6b72 	vldr	d6, [pc, #456]	; 80034e0 <main+0x6d8>
 8003318:	ee37 7b46 	vsub.f64	d7, d7, d6
 800331c:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
			JMoveTaskSpace(TaskSpace_Live_Ex1_ChangeZ, Time_Live_Ex1);
 8003320:	4b7d      	ldr	r3, [pc, #500]	; (8003518 <main+0x710>)
 8003322:	ed93 7b00 	vldr	d7, [r3]
 8003326:	f107 0320 	add.w	r3, r7, #32
 800332a:	eeb0 0b47 	vmov.f64	d0, d7
 800332e:	4618      	mov	r0, r3
 8003330:	f001 fd2e 	bl	8004d90 <JMoveTaskSpace>
		}

	   uint8_t tune_joint = 3;
 8003334:	2303      	movs	r3, #3
 8003336:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	   if (tune_PID[0] != tune_PID[1]){
 800333a:	4b7a      	ldr	r3, [pc, #488]	; (8003524 <main+0x71c>)
 800333c:	ed93 6b00 	vldr	d6, [r3]
 8003340:	4b78      	ldr	r3, [pc, #480]	; (8003524 <main+0x71c>)
 8003342:	ed93 7b02 	vldr	d7, [r3, #8]
 8003346:	eeb4 6b47 	vcmp.f64	d6, d7
 800334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334e:	d070      	beq.n	8003432 <main+0x62a>
		   	tune_PID[1] = tune_PID[0];
 8003350:	4b74      	ldr	r3, [pc, #464]	; (8003524 <main+0x71c>)
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	4973      	ldr	r1, [pc, #460]	; (8003524 <main+0x71c>)
 8003358:	e9c1 2302 	strd	r2, r3, [r1, #8]
			t = 0;
 800335c:	4966      	ldr	r1, [pc, #408]	; (80034f8 <main+0x6f0>)
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	e9c1 2300 	strd	r2, r3, [r1]
			double Joint[4] = {0,0,0,0};
 800336a:	463b      	mov	r3, r7
 800336c:	2220      	movs	r2, #32
 800336e:	2100      	movs	r1, #0
 8003370:	4618      	mov	r0, r3
 8003372:	f013 ffdd 	bl	8017330 <memset>
			for (int i = 0; i < 4; i++) {
 8003376:	2300      	movs	r3, #0
 8003378:	647b      	str	r3, [r7, #68]	; 0x44
 800337a:	e012      	b.n	80033a2 <main+0x59a>
				Joint[i] = Control[i].PositionFeedback;
 800337c:	4a6a      	ldr	r2, [pc, #424]	; (8003528 <main+0x720>)
 800337e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003380:	21d8      	movs	r1, #216	; 0xd8
 8003382:	fb01 f303 	mul.w	r3, r1, r3
 8003386:	4413      	add	r3, r2
 8003388:	3350      	adds	r3, #80	; 0x50
 800338a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003390:	00c9      	lsls	r1, r1, #3
 8003392:	3148      	adds	r1, #72	; 0x48
 8003394:	4439      	add	r1, r7
 8003396:	3948      	subs	r1, #72	; 0x48
 8003398:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 800339c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339e:	3301      	adds	r3, #1
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
 80033a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033a4:	2b03      	cmp	r3, #3
 80033a6:	dde9      	ble.n	800337c <main+0x574>
			}
			Joint[tune_joint] = tune_PID[0];
 80033a8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80033ac:	4b5d      	ldr	r3, [pc, #372]	; (8003524 <main+0x71c>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	00c9      	lsls	r1, r1, #3
 80033b4:	3148      	adds	r1, #72	; 0x48
 80033b6:	4439      	add	r1, r7
 80033b8:	3948      	subs	r1, #72	; 0x48
 80033ba:	e9c1 2300 	strd	r2, r3, [r1]
			for (int i = 0; i < 4; i++) {
 80033be:	2300      	movs	r3, #0
 80033c0:	643b      	str	r3, [r7, #64]	; 0x40
 80033c2:	e030      	b.n	8003426 <main+0x61e>
				Traj_Coeff_Cal(&Traj[i], T_tune_PID, Joint[i], Control[i].PositionFeedback,0, Control[i].VelocityFeedback);
 80033c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	1a9b      	subs	r3, r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	4a57      	ldr	r2, [pc, #348]	; (800352c <main+0x724>)
 80033d0:	441a      	add	r2, r3
 80033d2:	4b57      	ldr	r3, [pc, #348]	; (8003530 <main+0x728>)
 80033d4:	ed93 7b00 	vldr	d7, [r3]
 80033d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	3348      	adds	r3, #72	; 0x48
 80033de:	443b      	add	r3, r7
 80033e0:	3b48      	subs	r3, #72	; 0x48
 80033e2:	ed93 6b00 	vldr	d6, [r3]
 80033e6:	4950      	ldr	r1, [pc, #320]	; (8003528 <main+0x720>)
 80033e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ea:	20d8      	movs	r0, #216	; 0xd8
 80033ec:	fb00 f303 	mul.w	r3, r0, r3
 80033f0:	440b      	add	r3, r1
 80033f2:	3350      	adds	r3, #80	; 0x50
 80033f4:	ed93 5b00 	vldr	d5, [r3]
 80033f8:	494b      	ldr	r1, [pc, #300]	; (8003528 <main+0x720>)
 80033fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033fc:	20d8      	movs	r0, #216	; 0xd8
 80033fe:	fb00 f303 	mul.w	r3, r0, r3
 8003402:	440b      	add	r3, r1
 8003404:	33b8      	adds	r3, #184	; 0xb8
 8003406:	ed93 4b00 	vldr	d4, [r3]
 800340a:	ed9f 3b37 	vldr	d3, [pc, #220]	; 80034e8 <main+0x6e0>
 800340e:	eeb0 2b45 	vmov.f64	d2, d5
 8003412:	eeb0 1b46 	vmov.f64	d1, d6
 8003416:	eeb0 0b47 	vmov.f64	d0, d7
 800341a:	4610      	mov	r0, r2
 800341c:	f7fd ff1c 	bl	8001258 <Traj_Coeff_Cal>
			for (int i = 0; i < 4; i++) {
 8003420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003422:	3301      	adds	r3, #1
 8003424:	643b      	str	r3, [r7, #64]	; 0x40
 8003426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003428:	2b03      	cmp	r3, #3
 800342a:	ddcb      	ble.n	80033c4 <main+0x5bc>
			}
			Traj_Flag = 0x0F;
 800342c:	4b31      	ldr	r3, [pc, #196]	; (80034f4 <main+0x6ec>)
 800342e:	220f      	movs	r2, #15
 8003430:	701a      	strb	r2, [r3, #0]
	   }

		if (Contorl_Flag) {
 8003432:	4b40      	ldr	r3, [pc, #256]	; (8003534 <main+0x72c>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <main+0x63c>
			Control_Function();
 800343a:	f001 fa41 	bl	80048c0 <Control_Function>
			Contorl_Flag = 0;    // Clear Control Flag
 800343e:	4b3d      	ldr	r3, [pc, #244]	; (8003534 <main+0x72c>)
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
		}

		if (Protocol_Flag) {
 8003444:	4b3c      	ldr	r3, [pc, #240]	; (8003538 <main+0x730>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d004      	beq.n	8003456 <main+0x64e>
			Narwhal_Protocol();
 800344c:	f000 f9e0 	bl	8003810 <Narwhal_Protocol>
			Protocol_Flag = 0;
 8003450:	4b39      	ldr	r3, [pc, #228]	; (8003538 <main+0x730>)
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
		}

		if (HAL_GetTick() - Software_Timer_100ms >= 10) {
 8003456:	f004 f877 	bl	8007548 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	4b37      	ldr	r3, [pc, #220]	; (800353c <main+0x734>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b09      	cmp	r3, #9
 8003464:	d910      	bls.n	8003488 <main+0x680>
			Software_Timer_100ms = HAL_GetTick();
 8003466:	f004 f86f 	bl	8007548 <HAL_GetTick>
 800346a:	4603      	mov	r3, r0
 800346c:	4a33      	ldr	r2, [pc, #204]	; (800353c <main+0x734>)
 800346e:	6013      	str	r3, [r2, #0]
			HAL_ADC_Start_IT(&hadc3); 				//	read temperature sensor
 8003470:	4833      	ldr	r0, [pc, #204]	; (8003540 <main+0x738>)
 8003472:	f004 fd77 	bl	8007f64 <HAL_ADC_Start_IT>
			One_ShotTemp(&hi2c2);
 8003476:	4833      	ldr	r0, [pc, #204]	; (8003544 <main+0x73c>)
 8003478:	f7fd fb65 	bl	8000b46 <One_ShotTemp>
			Read_TempCelsius(&TPM75_Temp,&hi2c2);
 800347c:	4931      	ldr	r1, [pc, #196]	; (8003544 <main+0x73c>)
 800347e:	4832      	ldr	r0, [pc, #200]	; (8003548 <main+0x740>)
 8003480:	f7fd fb6e 	bl	8000b60 <Read_TempCelsius>
			ChessMoveStateMachine();
 8003484:	f001 ff04 	bl	8005290 <ChessMoveStateMachine>
		}

		if (HAL_GetTick() - Software_Timer_1s >= 1000) {		// 	Update System Status
 8003488:	f004 f85e 	bl	8007548 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	4b2f      	ldr	r3, [pc, #188]	; (800354c <main+0x744>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003498:	f4ff af19 	bcc.w	80032ce <main+0x4c6>
			Software_Timer_1s = HAL_GetTick();
 800349c:	f004 f854 	bl	8007548 <HAL_GetTick>
 80034a0:	4603      	mov	r3, r0
 80034a2:	4a2a      	ldr	r2, [pc, #168]	; (800354c <main+0x744>)
 80034a4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80034a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034aa:	4829      	ldr	r0, [pc, #164]	; (8003550 <main+0x748>)
 80034ac:	f009 fce1 	bl	800ce72 <HAL_GPIO_TogglePin>
			if (Comunication_Heartbeat == 0){
 80034b0:	4b28      	ldr	r3, [pc, #160]	; (8003554 <main+0x74c>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <main+0x6be>
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80034b8:	2201      	movs	r2, #1
 80034ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034be:	4826      	ldr	r0, [pc, #152]	; (8003558 <main+0x750>)
 80034c0:	f009 fcbe 	bl	800ce40 <HAL_GPIO_WritePin>
 80034c4:	e703      	b.n	80032ce <main+0x4c6>
			}
			else{
				Comunication_Heartbeat -= 1;
 80034c6:	4b23      	ldr	r3, [pc, #140]	; (8003554 <main+0x74c>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	4b21      	ldr	r3, [pc, #132]	; (8003554 <main+0x74c>)
 80034d0:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80034d8:	481f      	ldr	r0, [pc, #124]	; (8003558 <main+0x750>)
 80034da:	f009 fcb1 	bl	800ce40 <HAL_GPIO_WritePin>
  {
 80034de:	e6f6      	b.n	80032ce <main+0x4c6>
 80034e0:	00000000 	.word	0x00000000
 80034e4:	40590000 	.word	0x40590000
	...
 80034f0:	20000c00 	.word	0x20000c00
 80034f4:	20000bc9 	.word	0x20000bc9
 80034f8:	20000bc0 	.word	0x20000bc0
 80034fc:	20000d4c 	.word	0x20000d4c
 8003500:	20000868 	.word	0x20000868
 8003504:	200010dc 	.word	0x200010dc
 8003508:	20000094 	.word	0x20000094
 800350c:	200011ec 	.word	0x200011ec
 8003510:	20000be1 	.word	0x20000be1
 8003514:	20000bf8 	.word	0x20000bf8
 8003518:	20000018 	.word	0x20000018
 800351c:	20000c20 	.word	0x20000c20
 8003520:	20000bf9 	.word	0x20000bf9
 8003524:	20000be8 	.word	0x20000be8
 8003528:	200004a8 	.word	0x200004a8
 800352c:	200009d0 	.word	0x200009d0
 8003530:	20000010 	.word	0x20000010
 8003534:	20000bc8 	.word	0x20000bc8
 8003538:	20000bca 	.word	0x20000bca
 800353c:	20000bd0 	.word	0x20000bd0
 8003540:	200001d4 	.word	0x200001d4
 8003544:	2000026c 	.word	0x2000026c
 8003548:	20000b68 	.word	0x20000b68
 800354c:	20000bcc 	.word	0x20000bcc
 8003550:	58020800 	.word	0x58020800
 8003554:	20000bd4 	.word	0x20000bd4
 8003558:	58020c00 	.word	0x58020c00

0800355c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b09c      	sub	sp, #112	; 0x70
 8003560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003566:	224c      	movs	r2, #76	; 0x4c
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f013 fee0 	bl	8017330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003570:	1d3b      	adds	r3, r7, #4
 8003572:	2220      	movs	r2, #32
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f013 feda 	bl	8017330 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800357c:	2002      	movs	r0, #2
 800357e:	f00b f865 	bl	800e64c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003582:	2300      	movs	r3, #0
 8003584:	603b      	str	r3, [r7, #0]
 8003586:	4b2f      	ldr	r3, [pc, #188]	; (8003644 <SystemClock_Config+0xe8>)
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	4a2e      	ldr	r2, [pc, #184]	; (8003644 <SystemClock_Config+0xe8>)
 800358c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003590:	6193      	str	r3, [r2, #24]
 8003592:	4b2c      	ldr	r3, [pc, #176]	; (8003644 <SystemClock_Config+0xe8>)
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800359e:	bf00      	nop
 80035a0:	4b28      	ldr	r3, [pc, #160]	; (8003644 <SystemClock_Config+0xe8>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ac:	d1f8      	bne.n	80035a0 <SystemClock_Config+0x44>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80035ae:	4b26      	ldr	r3, [pc, #152]	; (8003648 <SystemClock_Config+0xec>)
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	f023 0303 	bic.w	r3, r3, #3
 80035b6:	4a24      	ldr	r2, [pc, #144]	; (8003648 <SystemClock_Config+0xec>)
 80035b8:	f043 0302 	orr.w	r3, r3, #2
 80035bc:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035be:	2301      	movs	r3, #1
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035c8:	2302      	movs	r3, #2
 80035ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035cc:	2302      	movs	r3, #2
 80035ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80035d0:	2302      	movs	r3, #2
 80035d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80035d4:	232c      	movs	r3, #44	; 0x2c
 80035d6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80035d8:	2301      	movs	r3, #1
 80035da:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80035dc:	2302      	movs	r3, #2
 80035de:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80035e0:	2302      	movs	r3, #2
 80035e2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80035e4:	230c      	movs	r3, #12
 80035e6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80035e8:	2300      	movs	r3, #0
 80035ea:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035f4:	4618      	mov	r0, r3
 80035f6:	f00b f863 	bl	800e6c0 <HAL_RCC_OscConfig>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003600:	f002 f91e 	bl	8005840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003604:	233f      	movs	r3, #63	; 0x3f
 8003606:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003608:	2303      	movs	r3, #3
 800360a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003610:	2308      	movs	r3, #8
 8003612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003614:	2340      	movs	r3, #64	; 0x40
 8003616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003618:	2340      	movs	r3, #64	; 0x40
 800361a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800361c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003620:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003622:	2340      	movs	r3, #64	; 0x40
 8003624:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003626:	1d3b      	adds	r3, r7, #4
 8003628:	2103      	movs	r1, #3
 800362a:	4618      	mov	r0, r3
 800362c:	f00b fbf6 	bl	800ee1c <HAL_RCC_ClockConfig>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <SystemClock_Config+0xde>
  {
    Error_Handler();
 8003636:	f002 f903 	bl	8005840 <Error_Handler>
  }
}
 800363a:	bf00      	nop
 800363c:	3770      	adds	r7, #112	; 0x70
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	58024800 	.word	0x58024800
 8003648:	58024400 	.word	0x58024400

0800364c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b0ae      	sub	sp, #184	; 0xb8
 8003650:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003652:	1d3b      	adds	r3, r7, #4
 8003654:	22b4      	movs	r2, #180	; 0xb4
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f013 fe69 	bl	8017330 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 800365e:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <PeriphCommonClock_Config+0x64>)
 8003660:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003662:	2302      	movs	r3, #2
 8003664:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8003666:	2310      	movs	r3, #16
 8003668:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800366a:	2302      	movs	r3, #2
 800366c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800366e:	2302      	movs	r3, #2
 8003670:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003672:	2302      	movs	r3, #2
 8003674:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003676:	23c0      	movs	r3, #192	; 0xc0
 8003678:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800367a:	2300      	movs	r3, #0
 800367c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800367e:	2300      	movs	r3, #0
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8003682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003686:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8003688:	2301      	movs	r3, #1
 800368a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 800368c:	2308      	movs	r3, #8
 800368e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	4618      	mov	r0, r3
 800369a:	f00b ff4b 	bl	800f534 <HAL_RCCEx_PeriphCLKConfig>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80036a4:	f002 f8cc 	bl	8005840 <Error_Handler>
  }
}
 80036a8:	bf00      	nop
 80036aa:	37b8      	adds	r7, #184	; 0xb8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	00082003 	.word	0x00082003

080036b4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	if (huart == &huart5) {
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a06      	ldr	r2, [pc, #24]	; (80036d8 <HAL_UART_RxCpltCallback+0x24>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d102      	bne.n	80036ca <HAL_UART_RxCpltCallback+0x16>
		Protocol_Flag = 1;
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <HAL_UART_RxCpltCallback+0x28>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
	}
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	200011ec 	.word	0x200011ec
 80036dc:	20000bca 	.word	0x20000bca

080036e0 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 80036e8:	2100      	movs	r1, #0
 80036ea:	4803      	ldr	r0, [pc, #12]	; (80036f8 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 80036ec:	f00f fbe0 	bl	8012eb0 <HAL_TIM_PWM_Stop_DMA>
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20000d4c 	.word	0x20000d4c

080036fc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a18      	ldr	r2, [pc, #96]	; (8003768 <HAL_ADC_ConvCpltCallback+0x6c>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d129      	bne.n	8003760 <HAL_ADC_ConvCpltCallback+0x64>
		uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 800370c:	4816      	ldr	r0, [pc, #88]	; (8003768 <HAL_ADC_ConvCpltCallback+0x6c>)
 800370e:	f004 fd69 	bl	80081e4 <HAL_ADC_GetValue>
 8003712:	60f8      	str	r0, [r7, #12]
		Temperature = ((Temperature * 19)
 8003714:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_ADC_ConvCpltCallback+0x70>)
 8003716:	ed93 7b00 	vldr	d7, [r3]
 800371a:	eeb3 6b03 	vmov.f64	d6, #51	; 0x41980000  19.0
 800371e:	ee27 6b06 	vmul.f64	d6, d7, d6
				+ (Temp_Calibration
						* (double) ((double) ADC_Output
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	ee07 3a90 	vmov	s15, r3
 8003728:	eeb8 5b67 	vcvt.f64.u32	d5, s15
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 800372c:	4b10      	ldr	r3, [pc, #64]	; (8003770 <HAL_ADC_ConvCpltCallback+0x74>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	ee07 3a90 	vmov	s15, r3
						* (double) ((double) ADC_Output
 8003734:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003738:	ee35 5b47 	vsub.f64	d5, d5, d7
 800373c:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <HAL_ADC_ConvCpltCallback+0x78>)
 800373e:	ed93 7b00 	vldr	d7, [r3]
 8003742:	ee25 7b07 	vmul.f64	d7, d5, d7
								- *(unsigned short*) (0x1FF1E820)) + 30.0f))
 8003746:	eeb3 5b0e 	vmov.f64	d5, #62	; 0x41f00000  30.0
 800374a:	ee37 7b05 	vadd.f64	d7, d7, d5
				+ (Temp_Calibration
 800374e:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ 20;
 8003752:	eeb3 5b04 	vmov.f64	d5, #52	; 0x41a00000  20.0
 8003756:	ee86 7b05 	vdiv.f64	d7, d6, d5
		Temperature = ((Temperature * 19)
 800375a:	4b04      	ldr	r3, [pc, #16]	; (800376c <HAL_ADC_ConvCpltCallback+0x70>)
 800375c:	ed83 7b00 	vstr	d7, [r3]
	}
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	200001d4 	.word	0x200001d4
 800376c:	200002b8 	.word	0x200002b8
 8003770:	1ff1e820 	.word	0x1ff1e820
 8003774:	200002c0 	.word	0x200002c0

08003778 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
	if (htim == &htim23) {
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a06      	ldr	r2, [pc, #24]	; (800379c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d102      	bne.n	800378e <HAL_TIM_PeriodElapsedCallback+0x16>
		Contorl_Flag = 1;
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800378a:	2201      	movs	r2, #1
 800378c:	701a      	strb	r2, [r3, #0]
	}
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	200010dc 	.word	0x200010dc
 80037a0:	20000bc8 	.word	0x20000bc8

080037a4 <CRC8>:

inline uint8_t CRC8(uint8_t *Data,uint8_t BufferLength){
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
	return HAL_CRC_Calculate(&hcrc, (uint32_t*) Data, BufferLength) ^ 0xFF;
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	461a      	mov	r2, r3
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4805      	ldr	r0, [pc, #20]	; (80037cc <CRC8+0x28>)
 80037b8:	f006 f9b8 	bl	8009b2c <HAL_CRC_Calculate>
 80037bc:	4603      	mov	r3, r0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000248 	.word	0x20000248

080037d0 <SentData>:
inline void SentData(uint8_t range){
 80037d0:	b590      	push	{r4, r7, lr}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
	UART5_txBuffer[range] = CRC8(UART5_txBuffer, range);
 80037da:	79fc      	ldrb	r4, [r7, #7]
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	4619      	mov	r1, r3
 80037e0:	4809      	ldr	r0, [pc, #36]	; (8003808 <SentData+0x38>)
 80037e2:	f7ff ffdf 	bl	80037a4 <CRC8>
 80037e6:	4603      	mov	r3, r0
 80037e8:	461a      	mov	r2, r3
 80037ea:	4b07      	ldr	r3, [pc, #28]	; (8003808 <SentData+0x38>)
 80037ec:	551a      	strb	r2, [r3, r4]
	HAL_UART_Transmit_IT(&huart5, UART5_txBuffer, range+1);
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3301      	adds	r3, #1
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	4903      	ldr	r1, [pc, #12]	; (8003808 <SentData+0x38>)
 80037fa:	4804      	ldr	r0, [pc, #16]	; (800380c <SentData+0x3c>)
 80037fc:	f010 ff9e 	bl	801473c <HAL_UART_Transmit_IT>
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	bd90      	pop	{r4, r7, pc}
 8003808:	200000a4 	.word	0x200000a4
 800380c:	200011ec 	.word	0x200011ec

08003810 <Narwhal_Protocol>:

inline void Narwhal_Protocol() {
 8003810:	b5b0      	push	{r4, r5, r7, lr}
 8003812:	b0ee      	sub	sp, #440	; 0x1b8
 8003814:	af00      	add	r7, sp, #0
	if (UART5_rxBuffer[0] == 0xFF) {
 8003816:	4bda      	ldr	r3, [pc, #872]	; (8003b80 <Narwhal_Protocol+0x370>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	2bff      	cmp	r3, #255	; 0xff
 800381c:	f041 8025 	bne.w	800486a <Narwhal_Protocol+0x105a>
		uint8_t CRC_Cal = CRC8(UART5_rxBuffer, 13);
 8003820:	210d      	movs	r1, #13
 8003822:	48d7      	ldr	r0, [pc, #860]	; (8003b80 <Narwhal_Protocol+0x370>)
 8003824:	f7ff ffbe 	bl	80037a4 <CRC8>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
		if (CRC_Cal == UART5_rxBuffer[13]) {
 800382e:	4bd4      	ldr	r3, [pc, #848]	; (8003b80 <Narwhal_Protocol+0x370>)
 8003830:	7b5b      	ldrb	r3, [r3, #13]
 8003832:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 8003836:	429a      	cmp	r2, r3
 8003838:	f041 8010 	bne.w	800485c <Narwhal_Protocol+0x104c>
			UART5_txBuffer[0] = 0xFF;
 800383c:	4bd1      	ldr	r3, [pc, #836]	; (8003b84 <Narwhal_Protocol+0x374>)
 800383e:	22ff      	movs	r2, #255	; 0xff
 8003840:	701a      	strb	r2, [r3, #0]
			Comunication_Heartbeat = 2;
 8003842:	4bd1      	ldr	r3, [pc, #836]	; (8003b88 <Narwhal_Protocol+0x378>)
 8003844:	2202      	movs	r2, #2
 8003846:	701a      	strb	r2, [r3, #0]
			double Safe_Zone[4] = { 0, 0.5, -0.5, 0 };
 8003848:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800384c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003850:	4ace      	ldr	r2, [pc, #824]	; (8003b8c <Narwhal_Protocol+0x37c>)
 8003852:	461c      	mov	r4, r3
 8003854:	4615      	mov	r5, r2
 8003856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800385a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800385e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			double q_Feed[4];
			double dq[4];
			double d_Task[3];
			double d_Task_Set[3];
			double q_in[5] = {0,0,0,0,0};
 8003862:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003866:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800386a:	4618      	mov	r0, r3
 800386c:	2328      	movs	r3, #40	; 0x28
 800386e:	461a      	mov	r2, r3
 8003870:	2100      	movs	r1, #0
 8003872:	f013 fd5d 	bl	8017330 <memset>
			double q_in_Set[5] = {0,0,0,0,0};
 8003876:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800387a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800387e:	4618      	mov	r0, r3
 8003880:	2328      	movs	r3, #40	; 0x28
 8003882:	461a      	mov	r2, r3
 8003884:	2100      	movs	r1, #0
 8003886:	f013 fd53 	bl	8017330 <memset>
			double task[3] = { 0, 0, 0 };
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	f04f 0300 	mov.w	r3, #0
 80038aa:	e9c7 233c 	strd	r2, r3, [r7, #240]	; 0xf0
			int Chess_Board_Base_Encoder2Sent;


			uint16_t Temperature_Protocol = Temperature * 1000;
 80038ae:	4bb8      	ldr	r3, [pc, #736]	; (8003b90 <Narwhal_Protocol+0x380>)
 80038b0:	ed93 7b00 	vldr	d7, [r3]
 80038b4:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8003b70 <Narwhal_Protocol+0x360>
 80038b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80038bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80038c0:	ee17 3a90 	vmov	r3, s15
 80038c4:	f8a7 315c 	strh.w	r3, [r7, #348]	; 0x15c
			uint16_t Temperature_Protocol2 = TPM75_Temp * 1000;
 80038c8:	4bb2      	ldr	r3, [pc, #712]	; (8003b94 <Narwhal_Protocol+0x384>)
 80038ca:	ed93 7b00 	vldr	d7, [r3]
 80038ce:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8003b70 <Narwhal_Protocol+0x360>
 80038d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80038d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80038da:	ee17 3a90 	vmov	r3, s15
 80038de:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a

			/* 		Data to MCU Start	*/
			switch (UART5_rxBuffer[1]) {
 80038e2:	4ba7      	ldr	r3, [pc, #668]	; (8003b80 <Narwhal_Protocol+0x370>)
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	3ba0      	subs	r3, #160	; 0xa0
 80038e8:	2b5f      	cmp	r3, #95	; 0x5f
 80038ea:	f200 87b0 	bhi.w	800484e <Narwhal_Protocol+0x103e>
 80038ee:	a201      	add	r2, pc, #4	; (adr r2, 80038f4 <Narwhal_Protocol+0xe4>)
 80038f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f4:	08004315 	.word	0x08004315
 80038f8:	0800433b 	.word	0x0800433b
 80038fc:	08004379 	.word	0x08004379
 8003900:	0800484f 	.word	0x0800484f
 8003904:	0800484f 	.word	0x0800484f
 8003908:	0800484f 	.word	0x0800484f
 800390c:	0800484f 	.word	0x0800484f
 8003910:	0800484f 	.word	0x0800484f
 8003914:	0800484f 	.word	0x0800484f
 8003918:	0800484f 	.word	0x0800484f
 800391c:	080043e9 	.word	0x080043e9
 8003920:	0800446d 	.word	0x0800446d
 8003924:	0800484f 	.word	0x0800484f
 8003928:	0800484f 	.word	0x0800484f
 800392c:	0800484f 	.word	0x0800484f
 8003930:	08004539 	.word	0x08004539
 8003934:	0800484f 	.word	0x0800484f
 8003938:	0800484f 	.word	0x0800484f
 800393c:	0800484f 	.word	0x0800484f
 8003940:	0800484f 	.word	0x0800484f
 8003944:	0800484f 	.word	0x0800484f
 8003948:	0800484f 	.word	0x0800484f
 800394c:	0800484f 	.word	0x0800484f
 8003950:	0800484f 	.word	0x0800484f
 8003954:	0800484f 	.word	0x0800484f
 8003958:	0800484f 	.word	0x0800484f
 800395c:	0800484f 	.word	0x0800484f
 8003960:	0800484f 	.word	0x0800484f
 8003964:	0800484f 	.word	0x0800484f
 8003968:	0800484f 	.word	0x0800484f
 800396c:	0800484f 	.word	0x0800484f
 8003970:	0800484f 	.word	0x0800484f
 8003974:	0800484f 	.word	0x0800484f
 8003978:	0800484f 	.word	0x0800484f
 800397c:	0800484f 	.word	0x0800484f
 8003980:	0800484f 	.word	0x0800484f
 8003984:	0800484f 	.word	0x0800484f
 8003988:	0800484f 	.word	0x0800484f
 800398c:	0800484f 	.word	0x0800484f
 8003990:	0800484f 	.word	0x0800484f
 8003994:	0800484f 	.word	0x0800484f
 8003998:	0800484f 	.word	0x0800484f
 800399c:	0800484f 	.word	0x0800484f
 80039a0:	0800484f 	.word	0x0800484f
 80039a4:	0800484f 	.word	0x0800484f
 80039a8:	0800484f 	.word	0x0800484f
 80039ac:	0800484f 	.word	0x0800484f
 80039b0:	0800484f 	.word	0x0800484f
 80039b4:	0800484f 	.word	0x0800484f
 80039b8:	0800484f 	.word	0x0800484f
 80039bc:	0800484f 	.word	0x0800484f
 80039c0:	0800484f 	.word	0x0800484f
 80039c4:	0800484f 	.word	0x0800484f
 80039c8:	0800484f 	.word	0x0800484f
 80039cc:	0800484f 	.word	0x0800484f
 80039d0:	0800484f 	.word	0x0800484f
 80039d4:	0800484f 	.word	0x0800484f
 80039d8:	0800484f 	.word	0x0800484f
 80039dc:	0800484f 	.word	0x0800484f
 80039e0:	0800484f 	.word	0x0800484f
 80039e4:	0800484f 	.word	0x0800484f
 80039e8:	0800484f 	.word	0x0800484f
 80039ec:	0800484f 	.word	0x0800484f
 80039f0:	0800484f 	.word	0x0800484f
 80039f4:	0800484f 	.word	0x0800484f
 80039f8:	0800484f 	.word	0x0800484f
 80039fc:	0800484f 	.word	0x0800484f
 8003a00:	0800484f 	.word	0x0800484f
 8003a04:	0800484f 	.word	0x0800484f
 8003a08:	0800484f 	.word	0x0800484f
 8003a0c:	0800484f 	.word	0x0800484f
 8003a10:	0800484f 	.word	0x0800484f
 8003a14:	0800484f 	.word	0x0800484f
 8003a18:	0800484f 	.word	0x0800484f
 8003a1c:	0800484f 	.word	0x0800484f
 8003a20:	0800484f 	.word	0x0800484f
 8003a24:	0800484f 	.word	0x0800484f
 8003a28:	0800484f 	.word	0x0800484f
 8003a2c:	0800484f 	.word	0x0800484f
 8003a30:	0800484f 	.word	0x0800484f
 8003a34:	08003a75 	.word	0x08003a75
 8003a38:	08003a8b 	.word	0x08003a8b
 8003a3c:	0800484f 	.word	0x0800484f
 8003a40:	0800484f 	.word	0x0800484f
 8003a44:	0800484f 	.word	0x0800484f
 8003a48:	08003aa1 	.word	0x08003aa1
 8003a4c:	08003b4d 	.word	0x08003b4d
 8003a50:	08003c4f 	.word	0x08003c4f
 8003a54:	0800484f 	.word	0x0800484f
 8003a58:	0800484f 	.word	0x0800484f
 8003a5c:	08003c6d 	.word	0x08003c6d
 8003a60:	08003d5b 	.word	0x08003d5b
 8003a64:	0800484f 	.word	0x0800484f
 8003a68:	08003f19 	.word	0x08003f19
 8003a6c:	0800408d 	.word	0x0800408d
 8003a70:	0800422d 	.word	0x0800422d
			case 0xF0:
				/* Ping */
				UART5_txBuffer[2] = 0x00;
 8003a74:	4b43      	ldr	r3, [pc, #268]	; (8003b84 <Narwhal_Protocol+0x374>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003a7a:	4b42      	ldr	r3, [pc, #264]	; (8003b84 <Narwhal_Protocol+0x374>)
 8003a7c:	22ff      	movs	r2, #255	; 0xff
 8003a7e:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003a80:	2003      	movs	r0, #3
 8003a82:	f7ff fea5 	bl	80037d0 <SentData>
				break;
 8003a86:	f000 bef6 	b.w	8004876 <Narwhal_Protocol+0x1066>
			case 0xF1:
				/* Working Mode Set */
				UART5_txBuffer[2] = 0x01;
 8003a8a:	4b3e      	ldr	r3, [pc, #248]	; (8003b84 <Narwhal_Protocol+0x374>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003a90:	4b3c      	ldr	r3, [pc, #240]	; (8003b84 <Narwhal_Protocol+0x374>)
 8003a92:	22ff      	movs	r2, #255	; 0xff
 8003a94:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003a96:	2003      	movs	r0, #3
 8003a98:	f7ff fe9a 	bl	80037d0 <SentData>
				break;
 8003a9c:	f000 beeb 	b.w	8004876 <Narwhal_Protocol+0x1066>
			case 0xF5:
				/* GoHome */
				if (Traj_Flag == 0) {;
 8003aa0:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <Narwhal_Protocol+0x388>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d146      	bne.n	8003b36 <Narwhal_Protocol+0x326>
					t = 0;
 8003aa8:	493c      	ldr	r1, [pc, #240]	; (8003b9c <Narwhal_Protocol+0x38c>)
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	e9c1 2300 	strd	r2, r3, [r1]
					for (int i = 0; i < 4; i++) {
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003abc:	e02d      	b.n	8003b1a <Narwhal_Protocol+0x30a>
						Traj_Coeff_Cal(&Traj[i], 2, 0,
 8003abe:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	00db      	lsls	r3, r3, #3
 8003aca:	4a35      	ldr	r2, [pc, #212]	; (8003ba0 <Narwhal_Protocol+0x390>)
 8003acc:	441a      	add	r2, r3
 8003ace:	4935      	ldr	r1, [pc, #212]	; (8003ba4 <Narwhal_Protocol+0x394>)
 8003ad0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003ad4:	20d8      	movs	r0, #216	; 0xd8
 8003ad6:	fb00 f303 	mul.w	r3, r0, r3
 8003ada:	440b      	add	r3, r1
 8003adc:	3350      	adds	r3, #80	; 0x50
 8003ade:	ed93 7b00 	vldr	d7, [r3]
 8003ae2:	4930      	ldr	r1, [pc, #192]	; (8003ba4 <Narwhal_Protocol+0x394>)
 8003ae4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003ae8:	20d8      	movs	r0, #216	; 0xd8
 8003aea:	fb00 f303 	mul.w	r3, r0, r3
 8003aee:	440b      	add	r3, r1
 8003af0:	33b8      	adds	r3, #184	; 0xb8
 8003af2:	ed93 6b00 	vldr	d6, [r3]
 8003af6:	eeb0 4b46 	vmov.f64	d4, d6
 8003afa:	ed9f 3b1f 	vldr	d3, [pc, #124]	; 8003b78 <Narwhal_Protocol+0x368>
 8003afe:	eeb0 2b47 	vmov.f64	d2, d7
 8003b02:	ed9f 1b1d 	vldr	d1, [pc, #116]	; 8003b78 <Narwhal_Protocol+0x368>
 8003b06:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	f7fd fba4 	bl	8001258 <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 8003b10:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003b14:	3301      	adds	r3, #1
 8003b16:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8003b1a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003b1e:	2b03      	cmp	r3, #3
 8003b20:	ddcd      	ble.n	8003abe <Narwhal_Protocol+0x2ae>
								Control[i].PositionFeedback, 0,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 8003b22:	4b1d      	ldr	r3, [pc, #116]	; (8003b98 <Narwhal_Protocol+0x388>)
 8003b24:	220f      	movs	r2, #15
 8003b26:	701a      	strb	r2, [r3, #0]
					Chessmove_State = 0;
 8003b28:	4b1f      	ldr	r3, [pc, #124]	; (8003ba8 <Narwhal_Protocol+0x398>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <Narwhal_Protocol+0x374>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	709a      	strb	r2, [r3, #2]
 8003b34:	e002      	b.n	8003b3c <Narwhal_Protocol+0x32c>
				} else {
					UART5_txBuffer[2] = 0x01;
 8003b36:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <Narwhal_Protocol+0x374>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <Narwhal_Protocol+0x374>)
 8003b3e:	22ff      	movs	r2, #255	; 0xff
 8003b40:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003b42:	2003      	movs	r0, #3
 8003b44:	f7ff fe44 	bl	80037d0 <SentData>
				break;
 8003b48:	f000 be95 	b.w	8004876 <Narwhal_Protocol+0x1066>
			case 0xF6:
				/* GoSafe */
				if (Traj_Flag == 0) {
 8003b4c:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <Narwhal_Protocol+0x388>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d171      	bne.n	8003c38 <Narwhal_Protocol+0x428>
					;
					t = 0;
 8003b54:	4911      	ldr	r1, [pc, #68]	; (8003b9c <Narwhal_Protocol+0x38c>)
 8003b56:	f04f 0200 	mov.w	r2, #0
 8003b5a:	f04f 0300 	mov.w	r3, #0
 8003b5e:	e9c1 2300 	strd	r2, r3, [r1]
					for (int i = 0; i < 4; i++) {
 8003b62:	2300      	movs	r3, #0
 8003b64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003b68:	e058      	b.n	8003c1c <Narwhal_Protocol+0x40c>
 8003b6a:	bf00      	nop
 8003b6c:	f3af 8000 	nop.w
 8003b70:	00000000 	.word	0x00000000
 8003b74:	408f4000 	.word	0x408f4000
	...
 8003b80:	20000094 	.word	0x20000094
 8003b84:	200000a4 	.word	0x200000a4
 8003b88:	20000bd4 	.word	0x20000bd4
 8003b8c:	080183b0 	.word	0x080183b0
 8003b90:	200002b8 	.word	0x200002b8
 8003b94:	20000b68 	.word	0x20000b68
 8003b98:	20000bc9 	.word	0x20000bc9
 8003b9c:	20000bc0 	.word	0x20000bc0
 8003ba0:	200009d0 	.word	0x200009d0
 8003ba4:	200004a8 	.word	0x200004a8
 8003ba8:	20000bcb 	.word	0x20000bcb
						Traj_Coeff_Cal(&Traj[i], 2.5, Safe_Zone[i],
 8003bac:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	4acf      	ldr	r2, [pc, #828]	; (8003ef8 <Narwhal_Protocol+0x6e8>)
 8003bba:	1899      	adds	r1, r3, r2
 8003bbc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003bc0:	f5a3 72dc 	sub.w	r2, r3, #440	; 0x1b8
 8003bc4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	ed93 7b00 	vldr	d7, [r3]
 8003bd0:	4aca      	ldr	r2, [pc, #808]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003bd2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003bd6:	20d8      	movs	r0, #216	; 0xd8
 8003bd8:	fb00 f303 	mul.w	r3, r0, r3
 8003bdc:	4413      	add	r3, r2
 8003bde:	3350      	adds	r3, #80	; 0x50
 8003be0:	ed93 6b00 	vldr	d6, [r3]
 8003be4:	4ac5      	ldr	r2, [pc, #788]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003be6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003bea:	20d8      	movs	r0, #216	; 0xd8
 8003bec:	fb00 f303 	mul.w	r3, r0, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	33b8      	adds	r3, #184	; 0xb8
 8003bf4:	ed93 5b00 	vldr	d5, [r3]
 8003bf8:	eeb0 4b45 	vmov.f64	d4, d5
 8003bfc:	ed9f 3bb8 	vldr	d3, [pc, #736]	; 8003ee0 <Narwhal_Protocol+0x6d0>
 8003c00:	eeb0 2b46 	vmov.f64	d2, d6
 8003c04:	eeb0 1b47 	vmov.f64	d1, d7
 8003c08:	eeb0 0b04 	vmov.f64	d0, #4	; 0x40200000  2.5
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	f7fd fb23 	bl	8001258 <Traj_Coeff_Cal>
					for (int i = 0; i < 4; i++) {
 8003c12:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003c16:	3301      	adds	r3, #1
 8003c18:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8003c1c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	ddc3      	ble.n	8003bac <Narwhal_Protocol+0x39c>
								Control[i].PositionFeedback, 0,
								Control[i].VelocityFeedback);
					}
					Traj_Flag = 0x0F;
 8003c24:	4bb6      	ldr	r3, [pc, #728]	; (8003f00 <Narwhal_Protocol+0x6f0>)
 8003c26:	220f      	movs	r2, #15
 8003c28:	701a      	strb	r2, [r3, #0]
					Chessmove_State = 0;
 8003c2a:	4bb6      	ldr	r3, [pc, #728]	; (8003f04 <Narwhal_Protocol+0x6f4>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	701a      	strb	r2, [r3, #0]
					UART5_txBuffer[2] = 0x00;
 8003c30:	4bb5      	ldr	r3, [pc, #724]	; (8003f08 <Narwhal_Protocol+0x6f8>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	709a      	strb	r2, [r3, #2]
 8003c36:	e002      	b.n	8003c3e <Narwhal_Protocol+0x42e>
				} else {
					UART5_txBuffer[2] = 0x01;
 8003c38:	4bb3      	ldr	r3, [pc, #716]	; (8003f08 <Narwhal_Protocol+0x6f8>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	709a      	strb	r2, [r3, #2]
				}
				UART5_txBuffer[1] = 0xFF;
 8003c3e:	4bb2      	ldr	r3, [pc, #712]	; (8003f08 <Narwhal_Protocol+0x6f8>)
 8003c40:	22ff      	movs	r2, #255	; 0xff
 8003c42:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003c44:	2003      	movs	r0, #3
 8003c46:	f7ff fdc3 	bl	80037d0 <SentData>
				break;
 8003c4a:	f000 be14 	b.w	8004876 <Narwhal_Protocol+0x1066>
			case 0xF7:
				/* Set0 BaseEnc */
				Chess_Board_Base_Encoder = 0;
 8003c4e:	49af      	ldr	r1, [pc, #700]	; (8003f0c <Narwhal_Protocol+0x6fc>)
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	e9c1 2300 	strd	r2, r3, [r1]
				UART5_txBuffer[1] = 0xFF;
 8003c5c:	4baa      	ldr	r3, [pc, #680]	; (8003f08 <Narwhal_Protocol+0x6f8>)
 8003c5e:	22ff      	movs	r2, #255	; 0xff
 8003c60:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003c62:	2003      	movs	r0, #3
 8003c64:	f7ff fdb4 	bl	80037d0 <SentData>
				break;
 8003c68:	f000 be05 	b.w	8004876 <Narwhal_Protocol+0x1066>
			case 0xFA:
				/* Joint Jog */
				t = 0;
 8003c6c:	49a8      	ldr	r1, [pc, #672]	; (8003f10 <Narwhal_Protocol+0x700>)
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003c80:	e056      	b.n	8003d30 <Narwhal_Protocol+0x520>
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c86:	3301      	adds	r3, #1
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4aa2      	ldr	r2, [pc, #648]	; (8003f14 <Narwhal_Protocol+0x704>)
 8003c8c:	5cd3      	ldrb	r3, [r2, r3]
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003c8e:	021b      	lsls	r3, r3, #8
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003c90:	b21a      	sxth	r2, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003c92:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	3303      	adds	r3, #3
 8003c9a:	499e      	ldr	r1, [pc, #632]	; (8003f14 <Narwhal_Protocol+0x704>)
 8003c9c:	5ccb      	ldrb	r3, [r1, r3]
 8003c9e:	b21b      	sxth	r3, r3
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	b21b      	sxth	r3, r3
							<< 8) | (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
					double JointJog = (int16_t) (((UART5_rxBuffer[2 + (2 * i)])
 8003cac:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 8003ee8 <Narwhal_Protocol+0x6d8>
 8003cb0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003cb4:	ed87 7b4e 	vstr	d7, [r7, #312]	; 0x138
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003cb8:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	00db      	lsls	r3, r3, #3
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4a8c      	ldr	r2, [pc, #560]	; (8003ef8 <Narwhal_Protocol+0x6e8>)
 8003cc6:	441a      	add	r2, r3
							JointJog + Control[i].PositionFeedback,
 8003cc8:	498c      	ldr	r1, [pc, #560]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003cca:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003cce:	20d8      	movs	r0, #216	; 0xd8
 8003cd0:	fb00 f303 	mul.w	r3, r0, r3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3350      	adds	r3, #80	; 0x50
 8003cd8:	ed93 6b00 	vldr	d6, [r3]
					Traj_Coeff_Cal(&Traj[i], 0.5,
 8003cdc:	ed97 7b4e 	vldr	d7, [r7, #312]	; 0x138
 8003ce0:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003ce4:	4985      	ldr	r1, [pc, #532]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003ce6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003cea:	20d8      	movs	r0, #216	; 0xd8
 8003cec:	fb00 f303 	mul.w	r3, r0, r3
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3350      	adds	r3, #80	; 0x50
 8003cf4:	ed93 6b00 	vldr	d6, [r3]
 8003cf8:	4980      	ldr	r1, [pc, #512]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003cfa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003cfe:	20d8      	movs	r0, #216	; 0xd8
 8003d00:	fb00 f303 	mul.w	r3, r0, r3
 8003d04:	440b      	add	r3, r1
 8003d06:	33b8      	adds	r3, #184	; 0xb8
 8003d08:	ed93 5b00 	vldr	d5, [r3]
 8003d0c:	eeb0 4b45 	vmov.f64	d4, d5
 8003d10:	ed9f 3b73 	vldr	d3, [pc, #460]	; 8003ee0 <Narwhal_Protocol+0x6d0>
 8003d14:	eeb0 2b46 	vmov.f64	d2, d6
 8003d18:	eeb0 1b47 	vmov.f64	d1, d7
 8003d1c:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003d20:	4610      	mov	r0, r2
 8003d22:	f7fd fa99 	bl	8001258 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003d26:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003d30:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	dda4      	ble.n	8003c82 <Narwhal_Protocol+0x472>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003d38:	4b71      	ldr	r3, [pc, #452]	; (8003f00 <Narwhal_Protocol+0x6f0>)
 8003d3a:	220f      	movs	r2, #15
 8003d3c:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003d3e:	4b71      	ldr	r3, [pc, #452]	; (8003f04 <Narwhal_Protocol+0x6f4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003d44:	4b70      	ldr	r3, [pc, #448]	; (8003f08 <Narwhal_Protocol+0x6f8>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003d4a:	4b6f      	ldr	r3, [pc, #444]	; (8003f08 <Narwhal_Protocol+0x6f8>)
 8003d4c:	22ff      	movs	r2, #255	; 0xff
 8003d4e:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003d50:	2003      	movs	r0, #3
 8003d52:	f7ff fd3d 	bl	80037d0 <SentData>
				break;
 8003d56:	f000 bd8e 	b.w	8004876 <Narwhal_Protocol+0x1066>
			case 0xFB:
				/* Cartesian Jog */
				q_Feed[0] = Control[0].PositionFeedback;
 8003d5a:	4b68      	ldr	r3, [pc, #416]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003d5c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8003d60:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d64:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d68:	e9c1 2300 	strd	r2, r3, [r1]
				q_Feed[1] = Control[1].PositionFeedback;
 8003d6c:	4b63      	ldr	r3, [pc, #396]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003d6e:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8003d72:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d76:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
				q_Feed[2] = Control[2].PositionFeedback;
 8003d7e:	4b5f      	ldr	r3, [pc, #380]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003d80:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8003d84:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d88:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d8c:	e9c1 2304 	strd	r2, r3, [r1, #16]
				q_Feed[3] = Control[3].PositionFeedback;
 8003d90:	4b5a      	ldr	r3, [pc, #360]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003d92:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8003d96:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8003d9a:	f5a1 71cc 	sub.w	r1, r1, #408	; 0x198
 8003d9e:	e9c1 2306 	strd	r2, r3, [r1, #24]
				for (int i = 0; i < 3; i++) {
 8003da2:	2300      	movs	r3, #0
 8003da4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003da8:	e026      	b.n	8003df8 <Narwhal_Protocol+0x5e8>
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003daa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003dae:	3301      	adds	r3, #1
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4a58      	ldr	r2, [pc, #352]	; (8003f14 <Narwhal_Protocol+0x704>)
 8003db4:	5cd3      	ldrb	r3, [r2, r3]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003dba:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	3303      	adds	r3, #3
 8003dc2:	4954      	ldr	r1, [pc, #336]	; (8003f14 <Narwhal_Protocol+0x704>)
 8003dc4:	5ccb      	ldrb	r3, [r1, r3]
 8003dc6:	b21b      	sxth	r3, r3
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003dd4:	ed9f 5b46 	vldr	d5, [pc, #280]	; 8003ef0 <Narwhal_Protocol+0x6e0>
 8003dd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
					d_Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003ddc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003de6:	443b      	add	r3, r7
 8003de8:	3ba8      	subs	r3, #168	; 0xa8
 8003dea:	ed83 7b00 	vstr	d7, [r3]
				for (int i = 0; i < 3; i++) {
 8003dee:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003df2:	3301      	adds	r3, #1
 8003df4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003df8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	ddd4      	ble.n	8003daa <Narwhal_Protocol+0x59a>
				}
				IVK(q_Feed, d_Task, dq);
 8003e00:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8003e04:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003e08:	f107 0320 	add.w	r3, r7, #32
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe fa27 	bl	8002260 <IVK>
				t = 0;
 8003e12:	493f      	ldr	r1, [pc, #252]	; (8003f10 <Narwhal_Protocol+0x700>)
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 8003e20:	2300      	movs	r3, #0
 8003e22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003e26:	e045      	b.n	8003eb4 <Narwhal_Protocol+0x6a4>
					double Setpoint = Control[i].PositionFeedback + dq[i];
 8003e28:	4a34      	ldr	r2, [pc, #208]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003e2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e2e:	21d8      	movs	r1, #216	; 0xd8
 8003e30:	fb01 f303 	mul.w	r3, r1, r3
 8003e34:	4413      	add	r3, r2
 8003e36:	3350      	adds	r3, #80	; 0x50
 8003e38:	ed93 6b00 	vldr	d6, [r3]
 8003e3c:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003e40:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003e44:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	ed93 7b00 	vldr	d7, [r3]
 8003e50:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003e54:	ed87 7b50 	vstr	d7, [r7, #320]	; 0x140
					Traj_Coeff_Cal(&Traj[i], 0.5, Setpoint,
 8003e58:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	4a24      	ldr	r2, [pc, #144]	; (8003ef8 <Narwhal_Protocol+0x6e8>)
 8003e66:	441a      	add	r2, r3
 8003e68:	4924      	ldr	r1, [pc, #144]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003e6a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e6e:	20d8      	movs	r0, #216	; 0xd8
 8003e70:	fb00 f303 	mul.w	r3, r0, r3
 8003e74:	440b      	add	r3, r1
 8003e76:	3350      	adds	r3, #80	; 0x50
 8003e78:	ed93 7b00 	vldr	d7, [r3]
 8003e7c:	491f      	ldr	r1, [pc, #124]	; (8003efc <Narwhal_Protocol+0x6ec>)
 8003e7e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e82:	20d8      	movs	r0, #216	; 0xd8
 8003e84:	fb00 f303 	mul.w	r3, r0, r3
 8003e88:	440b      	add	r3, r1
 8003e8a:	33b8      	adds	r3, #184	; 0xb8
 8003e8c:	ed93 6b00 	vldr	d6, [r3]
 8003e90:	eeb0 4b46 	vmov.f64	d4, d6
 8003e94:	ed9f 3b12 	vldr	d3, [pc, #72]	; 8003ee0 <Narwhal_Protocol+0x6d0>
 8003e98:	eeb0 2b47 	vmov.f64	d2, d7
 8003e9c:	ed97 1b50 	vldr	d1, [r7, #320]	; 0x140
 8003ea0:	eeb6 0b00 	vmov.f64	d0, #96	; 0x3f000000  0.5
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	f7fd f9d7 	bl	8001258 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 8003eaa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003eae:	3301      	adds	r3, #1
 8003eb0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003eb4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	ddb5      	ble.n	8003e28 <Narwhal_Protocol+0x618>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 8003ebc:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <Narwhal_Protocol+0x6f0>)
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8003ec2:	4b10      	ldr	r3, [pc, #64]	; (8003f04 <Narwhal_Protocol+0x6f4>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x00;
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <Narwhal_Protocol+0x6f8>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8003ece:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <Narwhal_Protocol+0x6f8>)
 8003ed0:	22ff      	movs	r2, #255	; 0xff
 8003ed2:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8003ed4:	2003      	movs	r0, #3
 8003ed6:	f7ff fc7b 	bl	80037d0 <SentData>
				break;
 8003eda:	f000 bccc 	b.w	8004876 <Narwhal_Protocol+0x1066>
 8003ede:	bf00      	nop
	...
 8003eec:	408f4000 	.word	0x408f4000
 8003ef0:	00000000 	.word	0x00000000
 8003ef4:	40490000 	.word	0x40490000
 8003ef8:	200009d0 	.word	0x200009d0
 8003efc:	200004a8 	.word	0x200004a8
 8003f00:	20000bc9 	.word	0x20000bc9
 8003f04:	20000bcb 	.word	0x20000bcb
 8003f08:	200000a4 	.word	0x200000a4
 8003f0c:	20000b58 	.word	0x20000b58
 8003f10:	20000bc0 	.word	0x20000bc0
 8003f14:	20000094 	.word	0x20000094
			case 0xFD:
				/* Joint Set */
				t = 0;
 8003f18:	49d5      	ldr	r1, [pc, #852]	; (8004270 <Narwhal_Protocol+0xa60>)
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	e9c1 2300 	strd	r2, r3, [r1]
				double Joint[4];
				double T = 1;
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	4bd2      	ldr	r3, [pc, #840]	; (8004274 <Narwhal_Protocol+0xa64>)
 8003f2c:	e9c7 2352 	strd	r2, r3, [r7, #328]	; 0x148
				double Distance = -1;
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	4bd0      	ldr	r3, [pc, #832]	; (8004278 <Narwhal_Protocol+0xa68>)
 8003f36:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
				for (int i = 0; i < 4; i++) {
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003f40:	e044      	b.n	8003fcc <Narwhal_Protocol+0x7bc>
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003f42:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f46:	3301      	adds	r3, #1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4acc      	ldr	r2, [pc, #816]	; (800427c <Narwhal_Protocol+0xa6c>)
 8003f4c:	5cd3      	ldrb	r3, [r2, r3]
 8003f4e:	021b      	lsls	r3, r3, #8
 8003f50:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003f52:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	3303      	adds	r3, #3
 8003f5a:	49c8      	ldr	r1, [pc, #800]	; (800427c <Narwhal_Protocol+0xa6c>)
 8003f5c:	5ccb      	ldrb	r3, [r1, r3]
 8003f5e:	b21b      	sxth	r3, r3
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 1000.0;
 8003f64:	ee07 3a90 	vmov	s15, r3
 8003f68:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003f6c:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 8004238 <Narwhal_Protocol+0xa28>
 8003f70:	ee86 7b05 	vdiv.f64	d7, d6, d5
					Joint[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 8003f74:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f78:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003f7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4413      	add	r3, r2
 8003f84:	ed83 7b00 	vstr	d7, [r3]
					if (Joint[i] > Distance){
 8003f88:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003f8c:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003f90:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4413      	add	r3, r2
 8003f98:	ed93 7b00 	vldr	d7, [r3]
 8003f9c:	ed97 6b66 	vldr	d6, [r7, #408]	; 0x198
 8003fa0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa8:	d50b      	bpl.n	8003fc2 <Narwhal_Protocol+0x7b2>
						Distance = Joint[i];
 8003faa:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8003fae:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 8003fb2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
				for (int i = 0; i < 4; i++) {
 8003fc2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8003fcc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	ddb6      	ble.n	8003f42 <Narwhal_Protocol+0x732>
					}
				}
				T += (Distance * 0.8);
 8003fd4:	ed97 7b66 	vldr	d7, [r7, #408]	; 0x198
 8003fd8:	ed9f 6b99 	vldr	d6, [pc, #612]	; 8004240 <Narwhal_Protocol+0xa30>
 8003fdc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003fe0:	ed97 6b52 	vldr	d6, [r7, #328]	; 0x148
 8003fe4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8003fe8:	ed87 7b52 	vstr	d7, [r7, #328]	; 0x148
				for (int i = 0; i < 4; i++) {
 8003fec:	2300      	movs	r3, #0
 8003fee:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003ff2:	e037      	b.n	8004064 <Narwhal_Protocol+0x854>
					Traj_Coeff_Cal(&Traj[i], T, Joint[i],
 8003ff4:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	4a9f      	ldr	r2, [pc, #636]	; (8004280 <Narwhal_Protocol+0xa70>)
 8004002:	1899      	adds	r1, r3, r2
 8004004:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004008:	f5a3 72bc 	sub.w	r2, r3, #376	; 0x178
 800400c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	ed93 7b00 	vldr	d7, [r3]
 8004018:	4a9a      	ldr	r2, [pc, #616]	; (8004284 <Narwhal_Protocol+0xa74>)
 800401a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800401e:	20d8      	movs	r0, #216	; 0xd8
 8004020:	fb00 f303 	mul.w	r3, r0, r3
 8004024:	4413      	add	r3, r2
 8004026:	3350      	adds	r3, #80	; 0x50
 8004028:	ed93 6b00 	vldr	d6, [r3]
 800402c:	4a95      	ldr	r2, [pc, #596]	; (8004284 <Narwhal_Protocol+0xa74>)
 800402e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004032:	20d8      	movs	r0, #216	; 0xd8
 8004034:	fb00 f303 	mul.w	r3, r0, r3
 8004038:	4413      	add	r3, r2
 800403a:	33b8      	adds	r3, #184	; 0xb8
 800403c:	ed93 5b00 	vldr	d5, [r3]
 8004040:	eeb0 4b45 	vmov.f64	d4, d5
 8004044:	ed9f 3b80 	vldr	d3, [pc, #512]	; 8004248 <Narwhal_Protocol+0xa38>
 8004048:	eeb0 2b46 	vmov.f64	d2, d6
 800404c:	eeb0 1b47 	vmov.f64	d1, d7
 8004050:	ed97 0b52 	vldr	d0, [r7, #328]	; 0x148
 8004054:	4608      	mov	r0, r1
 8004056:	f7fd f8ff 	bl	8001258 <Traj_Coeff_Cal>
				for (int i = 0; i < 4; i++) {
 800405a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800405e:	3301      	adds	r3, #1
 8004060:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8004064:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8004068:	2b03      	cmp	r3, #3
 800406a:	ddc3      	ble.n	8003ff4 <Narwhal_Protocol+0x7e4>
							Control[i].PositionFeedback, 0,
							Control[i].VelocityFeedback);
				}
				Traj_Flag = 0x0F;
 800406c:	4b86      	ldr	r3, [pc, #536]	; (8004288 <Narwhal_Protocol+0xa78>)
 800406e:	220f      	movs	r2, #15
 8004070:	701a      	strb	r2, [r3, #0]
				Chessmove_State = 0;
 8004072:	4b86      	ldr	r3, [pc, #536]	; (800428c <Narwhal_Protocol+0xa7c>)
 8004074:	2200      	movs	r2, #0
 8004076:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x03;
 8004078:	4b85      	ldr	r3, [pc, #532]	; (8004290 <Narwhal_Protocol+0xa80>)
 800407a:	2203      	movs	r2, #3
 800407c:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 800407e:	4b84      	ldr	r3, [pc, #528]	; (8004290 <Narwhal_Protocol+0xa80>)
 8004080:	22ff      	movs	r2, #255	; 0xff
 8004082:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8004084:	2003      	movs	r0, #3
 8004086:	f7ff fba3 	bl	80037d0 <SentData>
				break;
 800408a:	e3f4      	b.n	8004876 <Narwhal_Protocol+0x1066>
			case 0xFE:
				/* Cartesian Set */
				t = 0;
 800408c:	4978      	ldr	r1, [pc, #480]	; (8004270 <Narwhal_Protocol+0xa60>)
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	f04f 0300 	mov.w	r3, #0
 8004096:	e9c1 2300 	strd	r2, r3, [r1]
				double Task[3];
				for (int i = 0; i < 3; i++) {
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80040a0:	e026      	b.n	80040f0 <Narwhal_Protocol+0x8e0>
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 80040a2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040a6:	3301      	adds	r3, #1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	4a74      	ldr	r2, [pc, #464]	; (800427c <Narwhal_Protocol+0xa6c>)
 80040ac:	5cd3      	ldrb	r3, [r2, r3]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	b21a      	sxth	r2, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 80040b2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	3303      	adds	r3, #3
 80040ba:	4970      	ldr	r1, [pc, #448]	; (800427c <Narwhal_Protocol+0xa6c>)
 80040bc:	5ccb      	ldrb	r3, [r1, r3]
 80040be:	b21b      	sxth	r3, r3
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	b21b      	sxth	r3, r3
							| (UART5_rxBuffer[3 + (2 * i)])) / 50.0;
 80040c4:	ee07 3a90 	vmov	s15, r3
 80040c8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80040cc:	ed9f 5b60 	vldr	d5, [pc, #384]	; 8004250 <Narwhal_Protocol+0xa40>
 80040d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
					Task[i] = (int16_t) (((UART5_rxBuffer[2 + (2 * i)]) << 8)
 80040d4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80040de:	443b      	add	r3, r7
 80040e0:	3bf0      	subs	r3, #240	; 0xf0
 80040e2:	ed83 7b00 	vstr	d7, [r3]
				for (int i = 0; i < 3; i++) {
 80040e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040ea:	3301      	adds	r3, #1
 80040ec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80040f0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	ddd4      	ble.n	80040a2 <Narwhal_Protocol+0x892>
				}
				double q_Feed[4];
				double Pne[3];
				q_Feed[0] = Control[0].PositionFeedback;
 80040f8:	4b62      	ldr	r3, [pc, #392]	; (8004284 <Narwhal_Protocol+0xa74>)
 80040fa:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80040fe:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004102:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 8004106:	e9c1 2300 	strd	r2, r3, [r1]
				q_Feed[1] = Control[1].PositionFeedback;
 800410a:	4b5e      	ldr	r3, [pc, #376]	; (8004284 <Narwhal_Protocol+0xa74>)
 800410c:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8004110:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004114:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 8004118:	e9c1 2302 	strd	r2, r3, [r1, #8]
				q_Feed[2] = Control[2].PositionFeedback;
 800411c:	4b59      	ldr	r3, [pc, #356]	; (8004284 <Narwhal_Protocol+0xa74>)
 800411e:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8004122:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004126:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 800412a:	e9c1 2304 	strd	r2, r3, [r1, #16]
				q_Feed[3] = Control[3].PositionFeedback;
 800412e:	4b55      	ldr	r3, [pc, #340]	; (8004284 <Narwhal_Protocol+0xa74>)
 8004130:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8004134:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004138:	f5a1 71bc 	sub.w	r1, r1, #376	; 0x178
 800413c:	e9c1 2306 	strd	r2, r3, [r1, #24]

				FPK(q_Feed, 269.0f, Pne);
 8004140:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8004144:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004148:	4611      	mov	r1, r2
 800414a:	ed9f 0b43 	vldr	d0, [pc, #268]	; 8004258 <Narwhal_Protocol+0xa48>
 800414e:	4618      	mov	r0, r3
 8004150:	f7fe fb62 	bl	8002818 <FPK>
				double Time2MoveDynamic = 1.3;
 8004154:	a342      	add	r3, pc, #264	; (adr r3, 8004260 <Narwhal_Protocol+0xa50>)
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	e9c7 2354 	strd	r2, r3, [r7, #336]	; 0x150
				Time2MoveDynamic += (sqrt(
						((Task[0] - Pne[0]) * (Task[0] - Pne[0]))
 800415e:	ed97 6b32 	vldr	d6, [r7, #200]	; 0xc8
 8004162:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800416a:	ed93 7b00 	vldr	d7, [r3]
 800416e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004172:	ed97 5b32 	vldr	d5, [r7, #200]	; 0xc8
 8004176:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 800417a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800417e:	ed93 7b00 	vldr	d7, [r3]
 8004182:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004186:	ee26 6b07 	vmul.f64	d6, d6, d7
								+ ((Task[1] - Pne[1]) * (Task[1] - Pne[1]))
 800418a:	ed97 5b34 	vldr	d5, [r7, #208]	; 0xd0
 800418e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8004192:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004196:	ed93 7b02 	vldr	d7, [r3, #8]
 800419a:	ee35 5b47 	vsub.f64	d5, d5, d7
 800419e:	ed97 4b34 	vldr	d4, [r7, #208]	; 0xd0
 80041a2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80041a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80041ae:	ee34 7b47 	vsub.f64	d7, d4, d7
 80041b2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80041b6:	ee36 6b07 	vadd.f64	d6, d6, d7
								+ ((Task[2] - Pne[2]) * (Task[2] - Pne[2]))))
 80041ba:	ed97 5b36 	vldr	d5, [r7, #216]	; 0xd8
 80041be:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80041c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041c6:	ed93 7b04 	vldr	d7, [r3, #16]
 80041ca:	ee35 5b47 	vsub.f64	d5, d5, d7
 80041ce:	ed97 4b36 	vldr	d4, [r7, #216]	; 0xd8
 80041d2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80041d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041da:	ed93 7b04 	vldr	d7, [r3, #16]
 80041de:	ee34 7b47 	vsub.f64	d7, d4, d7
 80041e2:	ee25 7b07 	vmul.f64	d7, d5, d7
				Time2MoveDynamic += (sqrt(
 80041e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80041ea:	eeb0 0b47 	vmov.f64	d0, d7
 80041ee:	f013 f943 	bl	8017478 <sqrt>
 80041f2:	eeb0 7b40 	vmov.f64	d7, d0
						* 0.0075;
 80041f6:	ed9f 6b1c 	vldr	d6, [pc, #112]	; 8004268 <Narwhal_Protocol+0xa58>
 80041fa:	ee27 7b06 	vmul.f64	d7, d7, d6
				Time2MoveDynamic += (sqrt(
 80041fe:	ed97 6b54 	vldr	d6, [r7, #336]	; 0x150
 8004202:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004206:	ed87 7b54 	vstr	d7, [r7, #336]	; 0x150

				JMoveTaskSpace(Task, Time2MoveDynamic);
 800420a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800420e:	ed97 0b54 	vldr	d0, [r7, #336]	; 0x150
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fdbc 	bl	8004d90 <JMoveTaskSpace>
				UART5_txBuffer[2] = 0x00;
 8004218:	4b1d      	ldr	r3, [pc, #116]	; (8004290 <Narwhal_Protocol+0xa80>)
 800421a:	2200      	movs	r2, #0
 800421c:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 800421e:	4b1c      	ldr	r3, [pc, #112]	; (8004290 <Narwhal_Protocol+0xa80>)
 8004220:	22ff      	movs	r2, #255	; 0xff
 8004222:	705a      	strb	r2, [r3, #1]
				SentData(3);
 8004224:	2003      	movs	r0, #3
 8004226:	f7ff fad3 	bl	80037d0 <SentData>
				break;
 800422a:	e324      	b.n	8004876 <Narwhal_Protocol+0x1066>
			case 0xFF:
				/* Chess Move */
//				uint8_t ChessIndex[2];
				for (int i = 0; i < 2; i++) {
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8004232:	e03f      	b.n	80042b4 <Narwhal_Protocol+0xaa4>
 8004234:	f3af 8000 	nop.w
 8004238:	00000000 	.word	0x00000000
 800423c:	408f4000 	.word	0x408f4000
 8004240:	9999999a 	.word	0x9999999a
 8004244:	3fe99999 	.word	0x3fe99999
	...
 8004254:	40490000 	.word	0x40490000
 8004258:	00000000 	.word	0x00000000
 800425c:	4070d000 	.word	0x4070d000
 8004260:	cccccccd 	.word	0xcccccccd
 8004264:	3ff4cccc 	.word	0x3ff4cccc
 8004268:	eb851eb8 	.word	0xeb851eb8
 800426c:	3f7eb851 	.word	0x3f7eb851
 8004270:	20000bc0 	.word	0x20000bc0
 8004274:	3ff00000 	.word	0x3ff00000
 8004278:	bff00000 	.word	0xbff00000
 800427c:	20000094 	.word	0x20000094
 8004280:	200009d0 	.word	0x200009d0
 8004284:	200004a8 	.word	0x200004a8
 8004288:	20000bc9 	.word	0x20000bc9
 800428c:	20000bcb 	.word	0x20000bcb
 8004290:	200000a4 	.word	0x200000a4
					ChessIndex[i] = (uint8_t) (UART5_rxBuffer[2 + i]);
 8004294:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8004298:	3302      	adds	r3, #2
 800429a:	4abf      	ldr	r2, [pc, #764]	; (8004598 <Narwhal_Protocol+0xd88>)
 800429c:	5cd1      	ldrb	r1, [r2, r3]
 800429e:	4abf      	ldr	r2, [pc, #764]	; (800459c <Narwhal_Protocol+0xd8c>)
 80042a0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80042a4:	4413      	add	r3, r2
 80042a6:	460a      	mov	r2, r1
 80042a8:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 2; i++) {
 80042aa:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80042ae:	3301      	adds	r3, #1
 80042b0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80042b4:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	ddeb      	ble.n	8004294 <Narwhal_Protocol+0xa84>
				}
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 80042bc:	4bb6      	ldr	r3, [pc, #728]	; (8004598 <Narwhal_Protocol+0xd88>)
 80042be:	791b      	ldrb	r3, [r3, #4]
 80042c0:	021b      	lsls	r3, r3, #8
						| (UART5_rxBuffer[5])) / 100.0f;
 80042c2:	4ab5      	ldr	r2, [pc, #724]	; (8004598 <Narwhal_Protocol+0xd88>)
 80042c4:	7952      	ldrb	r2, [r2, #5]
 80042c6:	4313      	orrs	r3, r2
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 80042c8:	ee07 3a90 	vmov	s15, r3
 80042cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
						| (UART5_rxBuffer[5])) / 100.0f;
 80042d0:	eddf 6ab3 	vldr	s13, [pc, #716]	; 80045a0 <Narwhal_Protocol+0xd90>
 80042d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
				ChessHight = (float)(((UART5_rxBuffer[4]) << 8)
 80042d8:	4bb2      	ldr	r3, [pc, #712]	; (80045a4 <Narwhal_Protocol+0xd94>)
 80042da:	edc3 7a00 	vstr	s15, [r3]

				if (ChessIndex[0] == 65 || ChessIndex[1] == 65){
 80042de:	4baf      	ldr	r3, [pc, #700]	; (800459c <Narwhal_Protocol+0xd8c>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b41      	cmp	r3, #65	; 0x41
 80042e4:	d003      	beq.n	80042ee <Narwhal_Protocol+0xade>
 80042e6:	4bad      	ldr	r3, [pc, #692]	; (800459c <Narwhal_Protocol+0xd8c>)
 80042e8:	785b      	ldrb	r3, [r3, #1]
 80042ea:	2b41      	cmp	r3, #65	; 0x41
 80042ec:	d105      	bne.n	80042fa <Narwhal_Protocol+0xaea>
					ChessMoveStates = ChessMove_Finish;
 80042ee:	4bae      	ldr	r3, [pc, #696]	; (80045a8 <Narwhal_Protocol+0xd98>)
 80042f0:	220a      	movs	r2, #10
 80042f2:	701a      	strb	r2, [r3, #0]
					PositionX_Remove = 0;
 80042f4:	4bad      	ldr	r3, [pc, #692]	; (80045ac <Narwhal_Protocol+0xd9c>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
				}

				Chess_Move_Start_Flag = 1;
 80042fa:	4bad      	ldr	r3, [pc, #692]	; (80045b0 <Narwhal_Protocol+0xda0>)
 80042fc:	2201      	movs	r2, #1
 80042fe:	701a      	strb	r2, [r3, #0]
				UART5_txBuffer[2] = 0x05;
 8004300:	4bac      	ldr	r3, [pc, #688]	; (80045b4 <Narwhal_Protocol+0xda4>)
 8004302:	2205      	movs	r2, #5
 8004304:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[1] = 0xFF;
 8004306:	4bab      	ldr	r3, [pc, #684]	; (80045b4 <Narwhal_Protocol+0xda4>)
 8004308:	22ff      	movs	r2, #255	; 0xff
 800430a:	705a      	strb	r2, [r3, #1]
				SentData(3);
 800430c:	2003      	movs	r0, #3
 800430e:	f7ff fa5f 	bl	80037d0 <SentData>
				break;
 8004312:	e2b0      	b.n	8004876 <Narwhal_Protocol+0x1066>
				/* 		Data to MCU End	*/

				/* 		Sent Data to Master Start 	*/
			case 0xA0:
				/* System Status */
				UART5_txBuffer[1] = 0xEE;
 8004314:	4ba7      	ldr	r3, [pc, #668]	; (80045b4 <Narwhal_Protocol+0xda4>)
 8004316:	22ee      	movs	r2, #238	; 0xee
 8004318:	705a      	strb	r2, [r3, #1]
				UART5_txBuffer[2] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 800431a:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	b29b      	uxth	r3, r3
 8004322:	b2da      	uxtb	r2, r3
 8004324:	4ba3      	ldr	r3, [pc, #652]	; (80045b4 <Narwhal_Protocol+0xda4>)
 8004326:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Temperature_Protocol & 0xFF);
 8004328:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800432c:	b2da      	uxtb	r2, r3
 800432e:	4ba1      	ldr	r3, [pc, #644]	; (80045b4 <Narwhal_Protocol+0xda4>)
 8004330:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8004332:	2004      	movs	r0, #4
 8004334:	f7ff fa4c 	bl	80037d0 <SentData>
				break;
 8004338:	e29d      	b.n	8004876 <Narwhal_Protocol+0x1066>
			case 0xA1:
				/* Station Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 800433a:	4b9e      	ldr	r3, [pc, #632]	; (80045b4 <Narwhal_Protocol+0xda4>)
 800433c:	22ee      	movs	r2, #238	; 0xee
 800433e:	705a      	strb	r2, [r3, #1]
				Chess_Board_Base_Encoder2Sent = (int)(Chess_Board_Base_Encoder * 1000.0f);
 8004340:	4b9d      	ldr	r3, [pc, #628]	; (80045b8 <Narwhal_Protocol+0xda8>)
 8004342:	ed93 7b00 	vldr	d7, [r3]
 8004346:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8004588 <Narwhal_Protocol+0xd78>
 800434a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800434e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004352:	ee17 3a90 	vmov	r3, s15
 8004356:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				UART5_txBuffer[2] = (uint8_t) ((Chess_Board_Base_Encoder2Sent >> 8) & 0xFF);
 800435a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800435e:	121b      	asrs	r3, r3, #8
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4b94      	ldr	r3, [pc, #592]	; (80045b4 <Narwhal_Protocol+0xda4>)
 8004364:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Chess_Board_Base_Encoder2Sent & 0xFF);
 8004366:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800436a:	b2da      	uxtb	r2, r3
 800436c:	4b91      	ldr	r3, [pc, #580]	; (80045b4 <Narwhal_Protocol+0xda4>)
 800436e:	70da      	strb	r2, [r3, #3]
				SentData(4);
 8004370:	2004      	movs	r0, #4
 8004372:	f7ff fa2d 	bl	80037d0 <SentData>
				break;
 8004376:	e27e      	b.n	8004876 <Narwhal_Protocol+0x1066>
			case 0xA2:
				/* Raw Joint Encoder Position */
				UART5_txBuffer[1] = 0xEE;
 8004378:	4b8e      	ldr	r3, [pc, #568]	; (80045b4 <Narwhal_Protocol+0xda4>)
 800437a:	22ee      	movs	r2, #238	; 0xee
 800437c:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 800437e:	2300      	movs	r3, #0
 8004380:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8004384:	e028      	b.n	80043d8 <Narwhal_Protocol+0xbc8>
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Encoder[i].Position >> 8)
 8004386:	498d      	ldr	r1, [pc, #564]	; (80045bc <Narwhal_Protocol+0xdac>)
 8004388:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	00db      	lsls	r3, r3, #3
 8004394:	440b      	add	r3, r1
 8004396:	330e      	adds	r3, #14
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	0a1b      	lsrs	r3, r3, #8
 800439c:	b29a      	uxth	r2, r3
 800439e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80043a2:	3301      	adds	r3, #1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	b2d1      	uxtb	r1, r2
 80043a8:	4a82      	ldr	r2, [pc, #520]	; (80045b4 <Narwhal_Protocol+0xda4>)
 80043aa:	54d1      	strb	r1, [r2, r3]
							& 0xFF);
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Encoder[i].Position & 0xFF);
 80043ac:	4983      	ldr	r1, [pc, #524]	; (80045bc <Narwhal_Protocol+0xdac>)
 80043ae:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	440b      	add	r3, r1
 80043bc:	330e      	adds	r3, #14
 80043be:	881a      	ldrh	r2, [r3, #0]
 80043c0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	3303      	adds	r3, #3
 80043c8:	b2d1      	uxtb	r1, r2
 80043ca:	4a7a      	ldr	r2, [pc, #488]	; (80045b4 <Narwhal_Protocol+0xda4>)
 80043cc:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 80043ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80043d2:	3301      	adds	r3, #1
 80043d4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80043d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80043dc:	2b03      	cmp	r3, #3
 80043de:	ddd2      	ble.n	8004386 <Narwhal_Protocol+0xb76>
				}
				SentData(12);
 80043e0:	200c      	movs	r0, #12
 80043e2:	f7ff f9f5 	bl	80037d0 <SentData>
				break;
 80043e6:	e246      	b.n	8004876 <Narwhal_Protocol+0x1066>
			case 0xAA:
				/* Joint Position */
				UART5_txBuffer[1] = 0xEE;
 80043e8:	4b72      	ldr	r3, [pc, #456]	; (80045b4 <Narwhal_Protocol+0xda4>)
 80043ea:	22ee      	movs	r2, #238	; 0xee
 80043ec:	705a      	strb	r2, [r3, #1]
				for (int i = 0; i < 4; i++) {
 80043ee:	2300      	movs	r3, #0
 80043f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80043f4:	e02c      	b.n	8004450 <Narwhal_Protocol+0xc40>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 80043f6:	4a72      	ldr	r2, [pc, #456]	; (80045c0 <Narwhal_Protocol+0xdb0>)
 80043f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80043fc:	21d8      	movs	r1, #216	; 0xd8
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	3350      	adds	r3, #80	; 0x50
 8004406:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 800440a:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 8004588 <Narwhal_Protocol+0xd78>
 800440e:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 8004412:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004416:	ee17 3a90 	vmov	r3, s15
 800441a:	f8a7 3128 	strh.w	r3, [r7, #296]	; 0x128
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800441e:	f9b7 3128 	ldrsh.w	r3, [r7, #296]	; 0x128
 8004422:	121b      	asrs	r3, r3, #8
 8004424:	b21a      	sxth	r2, r3
 8004426:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800442a:	3301      	adds	r3, #1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	b2d1      	uxtb	r1, r2
 8004430:	4a60      	ldr	r2, [pc, #384]	; (80045b4 <Narwhal_Protocol+0xda4>)
 8004432:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004434:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	3303      	adds	r3, #3
 800443c:	f8b7 2128 	ldrh.w	r2, [r7, #296]	; 0x128
 8004440:	b2d1      	uxtb	r1, r2
 8004442:	4a5c      	ldr	r2, [pc, #368]	; (80045b4 <Narwhal_Protocol+0xda4>)
 8004444:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 8004446:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800444a:	3301      	adds	r3, #1
 800444c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004450:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004454:	2b03      	cmp	r3, #3
 8004456:	ddce      	ble.n	80043f6 <Narwhal_Protocol+0xbe6>
				}
				UART5_txBuffer[10] = 0;
 8004458:	4b56      	ldr	r3, [pc, #344]	; (80045b4 <Narwhal_Protocol+0xda4>)
 800445a:	2200      	movs	r2, #0
 800445c:	729a      	strb	r2, [r3, #10]
				UART5_txBuffer[11] = 0;
 800445e:	4b55      	ldr	r3, [pc, #340]	; (80045b4 <Narwhal_Protocol+0xda4>)
 8004460:	2200      	movs	r2, #0
 8004462:	72da      	strb	r2, [r3, #11]
				SentData(12);
 8004464:	200c      	movs	r0, #12
 8004466:	f7ff f9b3 	bl	80037d0 <SentData>
				break;
 800446a:	e204      	b.n	8004876 <Narwhal_Protocol+0x1066>
			case 0xAB:
				/* Task Space Position */
				UART5_txBuffer[1] = 0xEE;
 800446c:	4b51      	ldr	r3, [pc, #324]	; (80045b4 <Narwhal_Protocol+0xda4>)
 800446e:	22ee      	movs	r2, #238	; 0xee
 8004470:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */

				for (int i = 0; i < 4; i++) {
 8004472:	2300      	movs	r3, #0
 8004474:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004478:	e018      	b.n	80044ac <Narwhal_Protocol+0xc9c>
					q_in[i] = Control[i].PositionFeedback;
 800447a:	4a51      	ldr	r2, [pc, #324]	; (80045c0 <Narwhal_Protocol+0xdb0>)
 800447c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004480:	21d8      	movs	r1, #216	; 0xd8
 8004482:	fb01 f303 	mul.w	r3, r1, r3
 8004486:	4413      	add	r3, r2
 8004488:	3350      	adds	r3, #80	; 0x50
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 8004492:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 8004496:	f8d7 117c 	ldr.w	r1, [r7, #380]	; 0x17c
 800449a:	00c9      	lsls	r1, r1, #3
 800449c:	4401      	add	r1, r0
 800449e:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 80044a2:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80044a6:	3301      	adds	r3, #1
 80044a8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80044ac:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	dde2      	ble.n	800447a <Narwhal_Protocol+0xc6a>
				}
				FPK(q_in, 269.0f, task);
 80044b4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80044b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80044bc:	4611      	mov	r1, r2
 80044be:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8004590 <Narwhal_Protocol+0xd80>
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe f9a8 	bl	8002818 <FPK>

				for (int i = 0; i < 3; i++) {
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 80044ce:	e02b      	b.n	8004528 <Narwhal_Protocol+0xd18>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 80044d0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80044da:	443b      	add	r3, r7
 80044dc:	3bd8      	subs	r3, #216	; 0xd8
 80044de:	ed93 7b00 	vldr	d7, [r3]
 80044e2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80044e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80044ea:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80044ee:	ee17 3a90 	vmov	r3, s15
 80044f2:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
					UART5_txBuffer[2 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80044f6:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 80044fa:	121b      	asrs	r3, r3, #8
 80044fc:	b21a      	sxth	r2, r3
 80044fe:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004502:	3301      	adds	r3, #1
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	b2d1      	uxtb	r1, r2
 8004508:	4a2a      	ldr	r2, [pc, #168]	; (80045b4 <Narwhal_Protocol+0xda4>)
 800450a:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[3 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 800450c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004510:	005b      	lsls	r3, r3, #1
 8004512:	3303      	adds	r3, #3
 8004514:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8004518:	b2d1      	uxtb	r1, r2
 800451a:	4a26      	ldr	r2, [pc, #152]	; (80045b4 <Narwhal_Protocol+0xda4>)
 800451c:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 800451e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004522:	3301      	adds	r3, #1
 8004524:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8004528:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800452c:	2b02      	cmp	r3, #2
 800452e:	ddcf      	ble.n	80044d0 <Narwhal_Protocol+0xcc0>
				}
				SentData(8);
 8004530:	2008      	movs	r0, #8
 8004532:	f7ff f94d 	bl	80037d0 <SentData>
				break;
 8004536:	e19e      	b.n	8004876 <Narwhal_Protocol+0x1066>
			case 0xAF:
				/* UI Feedback */
				UART5_txBuffer[1] = 0xEE;
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <Narwhal_Protocol+0xda4>)
 800453a:	22ee      	movs	r2, #238	; 0xee
 800453c:	705a      	strb	r2, [r3, #1]
				/*	Forward Kinematics */
				for (int i = 0; i < 4; i++) {
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004544:	e018      	b.n	8004578 <Narwhal_Protocol+0xd68>
					q_in[i] = Control[i].PositionFeedback;
 8004546:	4a1e      	ldr	r2, [pc, #120]	; (80045c0 <Narwhal_Protocol+0xdb0>)
 8004548:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800454c:	21d8      	movs	r1, #216	; 0xd8
 800454e:	fb01 f303 	mul.w	r3, r1, r3
 8004552:	4413      	add	r3, r2
 8004554:	3350      	adds	r3, #80	; 0x50
 8004556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455a:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 800455e:	f5a1 70ac 	sub.w	r0, r1, #344	; 0x158
 8004562:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004566:	00c9      	lsls	r1, r1, #3
 8004568:	4401      	add	r1, r0
 800456a:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 800456e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004572:	3301      	adds	r3, #1
 8004574:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8004578:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800457c:	2b03      	cmp	r3, #3
 800457e:	dde2      	ble.n	8004546 <Narwhal_Protocol+0xd36>
				}
				for (int i = 0; i < 4; i++) {
 8004580:	2300      	movs	r3, #0
 8004582:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004586:	e036      	b.n	80045f6 <Narwhal_Protocol+0xde6>
 8004588:	00000000 	.word	0x00000000
 800458c:	408f4000 	.word	0x408f4000
 8004590:	00000000 	.word	0x00000000
 8004594:	4070d000 	.word	0x4070d000
 8004598:	20000094 	.word	0x20000094
 800459c:	20000bd8 	.word	0x20000bd8
 80045a0:	42c80000 	.word	0x42c80000
 80045a4:	20000bdc 	.word	0x20000bdc
 80045a8:	20000be1 	.word	0x20000be1
 80045ac:	20000be2 	.word	0x20000be2
 80045b0:	20000be0 	.word	0x20000be0
 80045b4:	200000a4 	.word	0x200000a4
 80045b8:	20000b58 	.word	0x20000b58
 80045bc:	200002c8 	.word	0x200002c8
 80045c0:	200004a8 	.word	0x200004a8
					q_in_Set[i] = Control[i].PositionSetpoint;
 80045c4:	4ab6      	ldr	r2, [pc, #728]	; (80048a0 <Narwhal_Protocol+0x1090>)
 80045c6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80045ca:	21d8      	movs	r1, #216	; 0xd8
 80045cc:	fb01 f303 	mul.w	r3, r1, r3
 80045d0:	4413      	add	r3, r2
 80045d2:	3348      	adds	r3, #72	; 0x48
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f507 71dc 	add.w	r1, r7, #440	; 0x1b8
 80045dc:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 80045e0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80045e4:	00c9      	lsls	r1, r1, #3
 80045e6:	4401      	add	r1, r0
 80045e8:	e9c1 2300 	strd	r2, r3, [r1]
				for (int i = 0; i < 4; i++) {
 80045ec:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80045f0:	3301      	adds	r3, #1
 80045f2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80045f6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80045fa:	2b03      	cmp	r3, #3
 80045fc:	dde2      	ble.n	80045c4 <Narwhal_Protocol+0xdb4>
				}
				FPK(q_in, 269.0f, task);
 80045fe:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8004602:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004606:	4611      	mov	r1, r2
 8004608:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 8004890 <Narwhal_Protocol+0x1080>
 800460c:	4618      	mov	r0, r3
 800460e:	f7fe f903 	bl	8002818 <FPK>
				FPK(q_in_Set, 269.0f, d_Task_Set);
 8004612:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 8004616:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800461a:	4611      	mov	r1, r2
 800461c:	ed9f 0b9c 	vldr	d0, [pc, #624]	; 8004890 <Narwhal_Protocol+0x1080>
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe f8f9 	bl	8002818 <FPK>

				/* Station Encoder */
				Chess_Board_Base_Encoder2Sent = Chess_Board_Base_Encoder * 1000.0f;
 8004626:	4b9f      	ldr	r3, [pc, #636]	; (80048a4 <Narwhal_Protocol+0x1094>)
 8004628:	ed93 7b00 	vldr	d7, [r3]
 800462c:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8004898 <Narwhal_Protocol+0x1088>
 8004630:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004634:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004638:	ee17 3a90 	vmov	r3, s15
 800463c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
				UART5_txBuffer[2] = (uint8_t) ((Chess_Board_Base_Encoder2Sent >> 8) & 0xFF);
 8004640:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004644:	121b      	asrs	r3, r3, #8
 8004646:	b2da      	uxtb	r2, r3
 8004648:	4b97      	ldr	r3, [pc, #604]	; (80048a8 <Narwhal_Protocol+0x1098>)
 800464a:	709a      	strb	r2, [r3, #2]
				UART5_txBuffer[3] = (uint8_t) (Chess_Board_Base_Encoder2Sent & 0xFF);
 800464c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004650:	b2da      	uxtb	r2, r3
 8004652:	4b95      	ldr	r3, [pc, #596]	; (80048a8 <Narwhal_Protocol+0x1098>)
 8004654:	70da      	strb	r2, [r3, #3]

				/* Temp */
				UART5_txBuffer[4] = (uint8_t) ((Temperature_Protocol >> 8) & 0xFF);
 8004656:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 800465a:	0a1b      	lsrs	r3, r3, #8
 800465c:	b29b      	uxth	r3, r3
 800465e:	b2da      	uxtb	r2, r3
 8004660:	4b91      	ldr	r3, [pc, #580]	; (80048a8 <Narwhal_Protocol+0x1098>)
 8004662:	711a      	strb	r2, [r3, #4]
				UART5_txBuffer[5] = (uint8_t) (Temperature_Protocol & 0xFF);
 8004664:	f8b7 315c 	ldrh.w	r3, [r7, #348]	; 0x15c
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4b8f      	ldr	r3, [pc, #572]	; (80048a8 <Narwhal_Protocol+0x1098>)
 800466c:	715a      	strb	r2, [r3, #5]
				UART5_txBuffer[6] = (uint8_t) ((Temperature_Protocol2 >> 8) & 0xFF);
 800466e:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8004672:	0a1b      	lsrs	r3, r3, #8
 8004674:	b29b      	uxth	r3, r3
 8004676:	b2da      	uxtb	r2, r3
 8004678:	4b8b      	ldr	r3, [pc, #556]	; (80048a8 <Narwhal_Protocol+0x1098>)
 800467a:	719a      	strb	r2, [r3, #6]
				UART5_txBuffer[7] = (uint8_t) (Temperature_Protocol2 & 0xFF);
 800467c:	f8b7 315a 	ldrh.w	r3, [r7, #346]	; 0x15a
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4b89      	ldr	r3, [pc, #548]	; (80048a8 <Narwhal_Protocol+0x1098>)
 8004684:	71da      	strb	r2, [r3, #7]

				/* Joint Current */
				for (int i = 0; i < 4; i++) {
 8004686:	2300      	movs	r3, #0
 8004688:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800468c:	e02c      	b.n	80046e8 <Narwhal_Protocol+0xed8>
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 800468e:	4a84      	ldr	r2, [pc, #528]	; (80048a0 <Narwhal_Protocol+0x1090>)
 8004690:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004694:	21d8      	movs	r1, #216	; 0xd8
 8004696:	fb01 f303 	mul.w	r3, r1, r3
 800469a:	4413      	add	r3, r2
 800469c:	3350      	adds	r3, #80	; 0x50
 800469e:	ed93 7b00 	vldr	d7, [r3]
							* 1000.0f);
 80046a2:	ed9f 6b7d 	vldr	d6, [pc, #500]	; 8004898 <Narwhal_Protocol+0x1088>
 80046a6:	ee27 7b06 	vmul.f64	d7, d7, d6
					int16_t Buf = (int16_t) (Control[i].PositionFeedback
 80046aa:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80046ae:	ee17 3a90 	vmov	r3, s15
 80046b2:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
					UART5_txBuffer[8 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 80046b6:	f9b7 312c 	ldrsh.w	r3, [r7, #300]	; 0x12c
 80046ba:	121b      	asrs	r3, r3, #8
 80046bc:	b21a      	sxth	r2, r3
 80046be:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80046c2:	3304      	adds	r3, #4
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	b2d1      	uxtb	r1, r2
 80046c8:	4a77      	ldr	r2, [pc, #476]	; (80048a8 <Narwhal_Protocol+0x1098>)
 80046ca:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[9 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80046cc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	3309      	adds	r3, #9
 80046d4:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 80046d8:	b2d1      	uxtb	r1, r2
 80046da:	4a73      	ldr	r2, [pc, #460]	; (80048a8 <Narwhal_Protocol+0x1098>)
 80046dc:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 80046de:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80046e2:	3301      	adds	r3, #1
 80046e4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80046e8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	ddce      	ble.n	800468e <Narwhal_Protocol+0xe7e>
				}
				UART5_txBuffer[16] = 0;
 80046f0:	4b6d      	ldr	r3, [pc, #436]	; (80048a8 <Narwhal_Protocol+0x1098>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	741a      	strb	r2, [r3, #16]
				UART5_txBuffer[17] = 0;
 80046f6:	4b6c      	ldr	r3, [pc, #432]	; (80048a8 <Narwhal_Protocol+0x1098>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	745a      	strb	r2, [r3, #17]

				/* Joint Set point*/
				for (int i = 0; i < 4; i++) {
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004702:	e029      	b.n	8004758 <Narwhal_Protocol+0xf48>
					int16_t Buf = (int16_t) (SetPoint_Position[i] * 1000.0f);
 8004704:	4a69      	ldr	r2, [pc, #420]	; (80048ac <Narwhal_Protocol+0x109c>)
 8004706:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4413      	add	r3, r2
 800470e:	ed93 7b00 	vldr	d7, [r3]
 8004712:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8004898 <Narwhal_Protocol+0x1088>
 8004716:	ee27 7b06 	vmul.f64	d7, d7, d6
 800471a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800471e:	ee17 3a90 	vmov	r3, s15
 8004722:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
					UART5_txBuffer[18 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 8004726:	f9b7 312e 	ldrsh.w	r3, [r7, #302]	; 0x12e
 800472a:	121b      	asrs	r3, r3, #8
 800472c:	b21a      	sxth	r2, r3
 800472e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004732:	3309      	adds	r3, #9
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	b2d1      	uxtb	r1, r2
 8004738:	4a5b      	ldr	r2, [pc, #364]	; (80048a8 <Narwhal_Protocol+0x1098>)
 800473a:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[19 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 800473c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	3313      	adds	r3, #19
 8004744:	f8b7 212e 	ldrh.w	r2, [r7, #302]	; 0x12e
 8004748:	b2d1      	uxtb	r1, r2
 800474a:	4a57      	ldr	r2, [pc, #348]	; (80048a8 <Narwhal_Protocol+0x1098>)
 800474c:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 4; i++) {
 800474e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8004752:	3301      	adds	r3, #1
 8004754:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8004758:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800475c:	2b03      	cmp	r3, #3
 800475e:	ddd1      	ble.n	8004704 <Narwhal_Protocol+0xef4>
				}
				UART5_txBuffer[26] = 0;
 8004760:	4b51      	ldr	r3, [pc, #324]	; (80048a8 <Narwhal_Protocol+0x1098>)
 8004762:	2200      	movs	r2, #0
 8004764:	769a      	strb	r2, [r3, #26]
				UART5_txBuffer[27] = 0;
 8004766:	4b50      	ldr	r3, [pc, #320]	; (80048a8 <Narwhal_Protocol+0x1098>)
 8004768:	2200      	movs	r2, #0
 800476a:	76da      	strb	r2, [r3, #27]

				for (int i = 0; i < 3; i++) {
 800476c:	2300      	movs	r3, #0
 800476e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8004772:	e02b      	b.n	80047cc <Narwhal_Protocol+0xfbc>
					int16_t Buf = (int16_t) (task[i] * 10.0f);
 8004774:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004778:	00db      	lsls	r3, r3, #3
 800477a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800477e:	443b      	add	r3, r7
 8004780:	3bd8      	subs	r3, #216	; 0xd8
 8004782:	ed93 7b00 	vldr	d7, [r3]
 8004786:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800478a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800478e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004792:	ee17 3a90 	vmov	r3, s15
 8004796:	f8a7 3130 	strh.w	r3, [r7, #304]	; 0x130
					UART5_txBuffer[28 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800479a:	f9b7 3130 	ldrsh.w	r3, [r7, #304]	; 0x130
 800479e:	121b      	asrs	r3, r3, #8
 80047a0:	b21a      	sxth	r2, r3
 80047a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80047a6:	330e      	adds	r3, #14
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	b2d1      	uxtb	r1, r2
 80047ac:	4a3e      	ldr	r2, [pc, #248]	; (80048a8 <Narwhal_Protocol+0x1098>)
 80047ae:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[29 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 80047b0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	331d      	adds	r3, #29
 80047b8:	f8b7 2130 	ldrh.w	r2, [r7, #304]	; 0x130
 80047bc:	b2d1      	uxtb	r1, r2
 80047be:	4a3a      	ldr	r2, [pc, #232]	; (80048a8 <Narwhal_Protocol+0x1098>)
 80047c0:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 80047c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80047c6:	3301      	adds	r3, #1
 80047c8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 80047cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	ddcf      	ble.n	8004774 <Narwhal_Protocol+0xf64>
				}
				UART5_txBuffer[34] = Chess_Move_Start_Flag;
 80047d4:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <Narwhal_Protocol+0x10a0>)
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	4b33      	ldr	r3, [pc, #204]	; (80048a8 <Narwhal_Protocol+0x1098>)
 80047da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				for (int i = 0; i < 3; i++) {
 80047de:	2300      	movs	r3, #0
 80047e0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80047e4:	e02b      	b.n	800483e <Narwhal_Protocol+0x102e>
					int16_t Buf = (int16_t) (d_Task_Set[i] * 10.0f);
 80047e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80047f0:	443b      	add	r3, r7
 80047f2:	3bc0      	subs	r3, #192	; 0xc0
 80047f4:	ed93 7b00 	vldr	d7, [r3]
 80047f8:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80047fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004800:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8004804:	ee17 3a90 	vmov	r3, s15
 8004808:	f8a7 3132 	strh.w	r3, [r7, #306]	; 0x132
					UART5_txBuffer[35 + (2 * i)] = (uint8_t) ((Buf >> 8) & 0xFF);
 800480c:	f9b7 3132 	ldrsh.w	r3, [r7, #306]	; 0x132
 8004810:	121b      	asrs	r3, r3, #8
 8004812:	b21a      	sxth	r2, r3
 8004814:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	3323      	adds	r3, #35	; 0x23
 800481c:	b2d1      	uxtb	r1, r2
 800481e:	4a22      	ldr	r2, [pc, #136]	; (80048a8 <Narwhal_Protocol+0x1098>)
 8004820:	54d1      	strb	r1, [r2, r3]
					UART5_txBuffer[36 + (2 * i)] = (uint8_t) (Buf & 0xFF);
 8004822:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004826:	3312      	adds	r3, #18
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	f8b7 2132 	ldrh.w	r2, [r7, #306]	; 0x132
 800482e:	b2d1      	uxtb	r1, r2
 8004830:	4a1d      	ldr	r2, [pc, #116]	; (80048a8 <Narwhal_Protocol+0x1098>)
 8004832:	54d1      	strb	r1, [r2, r3]
				for (int i = 0; i < 3; i++) {
 8004834:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004838:	3301      	adds	r3, #1
 800483a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800483e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8004842:	2b02      	cmp	r3, #2
 8004844:	ddcf      	ble.n	80047e6 <Narwhal_Protocol+0xfd6>
				}
				SentData(41);
 8004846:	2029      	movs	r0, #41	; 0x29
 8004848:	f7fe ffc2 	bl	80037d0 <SentData>
				break;
 800484c:	e013      	b.n	8004876 <Narwhal_Protocol+0x1066>
			default:
				UART5_txBuffer[2] = 0xFF;
 800484e:	4b16      	ldr	r3, [pc, #88]	; (80048a8 <Narwhal_Protocol+0x1098>)
 8004850:	22ff      	movs	r2, #255	; 0xff
 8004852:	709a      	strb	r2, [r3, #2]
				SentData(3);
 8004854:	2003      	movs	r0, #3
 8004856:	f7fe ffbb 	bl	80037d0 <SentData>
 800485a:	e00c      	b.n	8004876 <Narwhal_Protocol+0x1066>
				/* 		Sent Data to Master End 	*/
			}
		} else {
			/*		CRC Error		*/
			UART5_txBuffer[1] = 0xCC;
 800485c:	4b12      	ldr	r3, [pc, #72]	; (80048a8 <Narwhal_Protocol+0x1098>)
 800485e:	22cc      	movs	r2, #204	; 0xcc
 8004860:	705a      	strb	r2, [r3, #1]
			SentData(3);
 8004862:	2003      	movs	r0, #3
 8004864:	f7fe ffb4 	bl	80037d0 <SentData>
 8004868:	e005      	b.n	8004876 <Narwhal_Protocol+0x1066>
		}
	} else {
		/*		Header Error	*/
		UART5_txBuffer[1] = 0xAA;
 800486a:	4b0f      	ldr	r3, [pc, #60]	; (80048a8 <Narwhal_Protocol+0x1098>)
 800486c:	22aa      	movs	r2, #170	; 0xaa
 800486e:	705a      	strb	r2, [r3, #1]
		SentData(3);
 8004870:	2003      	movs	r0, #3
 8004872:	f7fe ffad 	bl	80037d0 <SentData>
	}
	HAL_UART_Receive_IT(&huart5, UART5_rxBuffer, 14);
 8004876:	220e      	movs	r2, #14
 8004878:	490e      	ldr	r1, [pc, #56]	; (80048b4 <Narwhal_Protocol+0x10a4>)
 800487a:	480f      	ldr	r0, [pc, #60]	; (80048b8 <Narwhal_Protocol+0x10a8>)
 800487c:	f010 f806 	bl	801488c <HAL_UART_Receive_IT>
}
 8004880:	bf00      	nop
 8004882:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8004886:	46bd      	mov	sp, r7
 8004888:	bdb0      	pop	{r4, r5, r7, pc}
 800488a:	bf00      	nop
 800488c:	f3af 8000 	nop.w
 8004890:	00000000 	.word	0x00000000
 8004894:	4070d000 	.word	0x4070d000
 8004898:	00000000 	.word	0x00000000
 800489c:	408f4000 	.word	0x408f4000
 80048a0:	200004a8 	.word	0x200004a8
 80048a4:	20000b58 	.word	0x20000b58
 80048a8:	200000a4 	.word	0x200000a4
 80048ac:	20000b70 	.word	0x20000b70
 80048b0:	20000be0 	.word	0x20000be0
 80048b4:	20000094 	.word	0x20000094
 80048b8:	200011ec 	.word	0x200011ec
 80048bc:	00000000 	.word	0x00000000

080048c0 <Control_Function>:
	}
	Traj_Flag = 0x0F;
	Chessmove_State = 0;
}

inline void Control_Function() {
 80048c0:	b5b0      	push	{r4, r5, r7, lr}
 80048c2:	b0b8      	sub	sp, #224	; 0xe0
 80048c4:	af00      	add	r7, sp, #0
	/***** Encoder Read *****/
	double J1, J2, J3, J4;
	J1 = EncPulse2Rad_Read(&Encoder[0], 1);
 80048c6:	2101      	movs	r1, #1
 80048c8:	48c7      	ldr	r0, [pc, #796]	; (8004be8 <Control_Function+0x328>)
 80048ca:	f7fb fea3 	bl	8000614 <EncPulse2Rad_Read>
 80048ce:	ed87 0b32 	vstr	d0, [r7, #200]	; 0xc8
	J2 = EncPulse2Rad_Read(&Encoder[1], 0);
 80048d2:	2100      	movs	r1, #0
 80048d4:	48c5      	ldr	r0, [pc, #788]	; (8004bec <Control_Function+0x32c>)
 80048d6:	f7fb fe9d 	bl	8000614 <EncPulse2Rad_Read>
 80048da:	ed87 0b30 	vstr	d0, [r7, #192]	; 0xc0
	J3 = EncPulse2Rad_Read(&Encoder[2], 0);
 80048de:	2100      	movs	r1, #0
 80048e0:	48c3      	ldr	r0, [pc, #780]	; (8004bf0 <Control_Function+0x330>)
 80048e2:	f7fb fe97 	bl	8000614 <EncPulse2Rad_Read>
 80048e6:	ed87 0b2e 	vstr	d0, [r7, #184]	; 0xb8
	J4 = EncPulse2Rad_Read(&Encoder[3], 0);
 80048ea:	2100      	movs	r1, #0
 80048ec:	48c1      	ldr	r0, [pc, #772]	; (8004bf4 <Control_Function+0x334>)
 80048ee:	f7fb fe91 	bl	8000614 <EncPulse2Rad_Read>
 80048f2:	ed87 0b2c 	vstr	d0, [r7, #176]	; 0xb0

	BaseENC[0] = TIM2->CNT;
 80048f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	4bbe      	ldr	r3, [pc, #760]	; (8004bf8 <Control_Function+0x338>)
 8004900:	801a      	strh	r2, [r3, #0]
	int ds = BaseENC[0] - BaseENC[1]; //find delta s
 8004902:	4bbd      	ldr	r3, [pc, #756]	; (8004bf8 <Control_Function+0x338>)
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	461a      	mov	r2, r3
 8004908:	4bbb      	ldr	r3, [pc, #748]	; (8004bf8 <Control_Function+0x338>)
 800490a:	885b      	ldrh	r3, [r3, #2]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	BaseENC[1] = BaseENC[0];
 8004912:	4bb9      	ldr	r3, [pc, #740]	; (8004bf8 <Control_Function+0x338>)
 8004914:	881a      	ldrh	r2, [r3, #0]
 8004916:	4bb8      	ldr	r3, [pc, #736]	; (8004bf8 <Control_Function+0x338>)
 8004918:	805a      	strh	r2, [r3, #2]
	//Unwrapping position
	if (ds >= 1000) {
 800491a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800491e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004922:	db06      	blt.n	8004932 <Control_Function+0x72>
		ds -= 1999;
 8004924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004928:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 800492c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004930:	e00a      	b.n	8004948 <Control_Function+0x88>
	} else if (ds <= -1000) {
 8004932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004936:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800493a:	dc05      	bgt.n	8004948 <Control_Function+0x88>
		ds += 1999;
 800493c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004940:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 8004944:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	}
	Chess_Board_Base_Encoder += (ds/2000.0f)*2.0f*PI;
 8004948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494c:	ee07 3a90 	vmov	s15, r3
 8004950:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004954:	eddf 6aa9 	vldr	s13, [pc, #676]	; 8004bfc <Control_Function+0x33c>
 8004958:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800495c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004960:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8004c00 <Control_Function+0x340>
 8004964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004968:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800496c:	4ba5      	ldr	r3, [pc, #660]	; (8004c04 <Control_Function+0x344>)
 800496e:	ed93 7b00 	vldr	d7, [r3]
 8004972:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004976:	4ba3      	ldr	r3, [pc, #652]	; (8004c04 <Control_Function+0x344>)
 8004978:	ed83 7b00 	vstr	d7, [r3]

	/***** Joint Space SetPoint Gen *****/
	if (Chessmove_State == 0) {
 800497c:	4ba2      	ldr	r3, [pc, #648]	; (8004c08 <Control_Function+0x348>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	f040 808d 	bne.w	8004aa0 <Control_Function+0x1e0>
		if (Traj_Flag & 0x0F) {
 8004986:	4ba1      	ldr	r3, [pc, #644]	; (8004c0c <Control_Function+0x34c>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8173 	beq.w	8004c7a <Control_Function+0x3ba>
			double traj_t_set[5];
			traj_t_set[0] = t;
 8004994:	4b9e      	ldr	r3, [pc, #632]	; (8004c10 <Control_Function+0x350>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 800499e:	4b9c      	ldr	r3, [pc, #624]	; (8004c10 <Control_Function+0x350>)
 80049a0:	ed93 6b00 	vldr	d6, [r3]
 80049a4:	4b9a      	ldr	r3, [pc, #616]	; (8004c10 <Control_Function+0x350>)
 80049a6:	ed93 7b00 	vldr	d7, [r3]
 80049aa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049ae:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 80049b2:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80049b6:	4b96      	ldr	r3, [pc, #600]	; (8004c10 <Control_Function+0x350>)
 80049b8:	ed93 7b00 	vldr	d7, [r3]
 80049bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049c0:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 80049c4:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80049c8:	4b91      	ldr	r3, [pc, #580]	; (8004c10 <Control_Function+0x350>)
 80049ca:	ed93 7b00 	vldr	d7, [r3]
 80049ce:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049d2:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 80049d6:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80049da:	4b8d      	ldr	r3, [pc, #564]	; (8004c10 <Control_Function+0x350>)
 80049dc:	ed93 7b00 	vldr	d7, [r3]
 80049e0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80049e4:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 0; i < 4; i++) {
 80049e8:	2300      	movs	r3, #0
 80049ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049ee:	e048      	b.n	8004a82 <Control_Function+0x1c2>
				if (Traj_Flag & (0x01 << i)) {
 80049f0:	4b86      	ldr	r3, [pc, #536]	; (8004c0c <Control_Function+0x34c>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80049fa:	fa42 f303 	asr.w	r3, r2, r3
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d038      	beq.n	8004a78 <Control_Function+0x1b8>
					TrajFollow(&Traj[i], traj_t_set, &SetPoint_Position[i],
 8004a06:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	1a9b      	subs	r3, r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4a80      	ldr	r2, [pc, #512]	; (8004c14 <Control_Function+0x354>)
 8004a14:	1898      	adds	r0, r3, r2
 8004a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4a7e      	ldr	r2, [pc, #504]	; (8004c18 <Control_Function+0x358>)
 8004a1e:	441a      	add	r2, r3
 8004a20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	497d      	ldr	r1, [pc, #500]	; (8004c1c <Control_Function+0x35c>)
 8004a28:	440b      	add	r3, r1
 8004a2a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004a2e:	f7fc fcc1 	bl	80013b4 <TrajFollow>
							&SetPoint_Velocity[i]);
					if (t >= Traj[i].T) {
 8004a32:	4978      	ldr	r1, [pc, #480]	; (8004c14 <Control_Function+0x354>)
 8004a34:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	1a9b      	subs	r3, r3, r2
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	440b      	add	r3, r1
 8004a42:	3330      	adds	r3, #48	; 0x30
 8004a44:	ed93 6b00 	vldr	d6, [r3]
 8004a48:	4b71      	ldr	r3, [pc, #452]	; (8004c10 <Control_Function+0x350>)
 8004a4a:	ed93 7b00 	vldr	d7, [r3]
 8004a4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a56:	d80f      	bhi.n	8004a78 <Control_Function+0x1b8>
						Traj_Flag &= ((0x01 << i) ^ 0xFF);
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a62:	b25b      	sxtb	r3, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	b25a      	sxtb	r2, r3
 8004a68:	4b68      	ldr	r3, [pc, #416]	; (8004c0c <Control_Function+0x34c>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b25b      	sxtb	r3, r3
 8004a6e:	4013      	ands	r3, r2
 8004a70:	b25b      	sxtb	r3, r3
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	4b65      	ldr	r3, [pc, #404]	; (8004c0c <Control_Function+0x34c>)
 8004a76:	701a      	strb	r2, [r3, #0]
			for (int i = 0; i < 4; i++) {
 8004a78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	ddb2      	ble.n	80049f0 <Control_Function+0x130>
					}
				}
			}
			t += delta_t;
 8004a8a:	4b61      	ldr	r3, [pc, #388]	; (8004c10 <Control_Function+0x350>)
 8004a8c:	ed93 7b00 	vldr	d7, [r3]
 8004a90:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8004be0 <Control_Function+0x320>
 8004a94:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004a98:	4b5d      	ldr	r3, [pc, #372]	; (8004c10 <Control_Function+0x350>)
 8004a9a:	ed83 7b00 	vstr	d7, [r3]
 8004a9e:	e0ec      	b.n	8004c7a <Control_Function+0x3ba>
		}
	}

	else if (Chessmove_State == 1) {
 8004aa0:	4b59      	ldr	r3, [pc, #356]	; (8004c08 <Control_Function+0x348>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	f040 80e8 	bne.w	8004c7a <Control_Function+0x3ba>
		if (Traj_Flag & 0x0F) {
 8004aaa:	4b58      	ldr	r3, [pc, #352]	; (8004c0c <Control_Function+0x34c>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	f003 030f 	and.w	r3, r3, #15
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80e1 	beq.w	8004c7a <Control_Function+0x3ba>
			double gamma[3] = { 1, 1, -1 };
 8004ab8:	4b59      	ldr	r3, [pc, #356]	; (8004c20 <Control_Function+0x360>)
 8004aba:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8004abe:	461d      	mov	r5, r3
 8004ac0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ac2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ac4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ac8:	e884 0003 	stmia.w	r4, {r0, r1}
			//*********** Chi Output ************//
			double SetPointPosition[4];
			double SetPointVelocity[4];

			double traj_t_set[5];
			traj_t_set[0] = t;
 8004acc:	4b50      	ldr	r3, [pc, #320]	; (8004c10 <Control_Function+0x350>)
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
			traj_t_set[1] = t * t;
 8004ad6:	4b4e      	ldr	r3, [pc, #312]	; (8004c10 <Control_Function+0x350>)
 8004ad8:	ed93 6b00 	vldr	d6, [r3]
 8004adc:	4b4c      	ldr	r3, [pc, #304]	; (8004c10 <Control_Function+0x350>)
 8004ade:	ed93 7b00 	vldr	d7, [r3]
 8004ae2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004ae6:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
			traj_t_set[2] = traj_t_set[1] * t;
 8004aea:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8004aee:	4b48      	ldr	r3, [pc, #288]	; (8004c10 <Control_Function+0x350>)
 8004af0:	ed93 7b00 	vldr	d7, [r3]
 8004af4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004af8:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
			traj_t_set[3] = traj_t_set[2] * t;
 8004afc:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8004b00:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <Control_Function+0x350>)
 8004b02:	ed93 7b00 	vldr	d7, [r3]
 8004b06:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b0a:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			traj_t_set[4] = traj_t_set[3] * t;
 8004b0e:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8004b12:	4b3f      	ldr	r3, [pc, #252]	; (8004c10 <Control_Function+0x350>)
 8004b14:	ed93 7b00 	vldr	d7, [r3]
 8004b18:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004b1c:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
			for (int i = 4; i < 7; i++) {
 8004b20:	2304      	movs	r3, #4
 8004b22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004b26:	e040      	b.n	8004baa <Control_Function+0x2ea>
				TrajFollow(&Traj[i], traj_t_set, &Chi_t[i], &ChiDot_t[i]);
 8004b28:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4a37      	ldr	r2, [pc, #220]	; (8004c14 <Control_Function+0x354>)
 8004b36:	1898      	adds	r0, r3, r2
 8004b38:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8004b3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b40:	00db      	lsls	r3, r3, #3
 8004b42:	18d4      	adds	r4, r2, r3
 8004b44:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004b48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4413      	add	r3, r2
 8004b50:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004b54:	4622      	mov	r2, r4
 8004b56:	f7fc fc2d 	bl	80013b4 <TrajFollow>
				if (t >= Traj[i].T) {
 8004b5a:	492e      	ldr	r1, [pc, #184]	; (8004c14 <Control_Function+0x354>)
 8004b5c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8004b60:	4613      	mov	r3, r2
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	1a9b      	subs	r3, r3, r2
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	440b      	add	r3, r1
 8004b6a:	3330      	adds	r3, #48	; 0x30
 8004b6c:	ed93 6b00 	vldr	d6, [r3]
 8004b70:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <Control_Function+0x350>)
 8004b72:	ed93 7b00 	vldr	d7, [r3]
 8004b76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b7e:	d80f      	bhi.n	8004ba0 <Control_Function+0x2e0>
					Traj_Flag &= ((0x01 << i) ^ 0xFF);
 8004b80:	2201      	movs	r2, #1
 8004b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b86:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8a:	b25b      	sxtb	r3, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	b25a      	sxtb	r2, r3
 8004b90:	4b1e      	ldr	r3, [pc, #120]	; (8004c0c <Control_Function+0x34c>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	b25b      	sxtb	r3, r3
 8004b96:	4013      	ands	r3, r2
 8004b98:	b25b      	sxtb	r3, r3
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <Control_Function+0x34c>)
 8004b9e:	701a      	strb	r2, [r3, #0]
			for (int i = 4; i < 7; i++) {
 8004ba0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bae:	2b06      	cmp	r3, #6
 8004bb0:	ddba      	ble.n	8004b28 <Control_Function+0x268>
				}
			}
			IPK(gamma, Chi_t, SetPointPosition);
 8004bb2:	463a      	mov	r2, r7
 8004bb4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8004bb8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fd fa23 	bl	8002008 <IPK>
			IVK(SetPointPosition, ChiDot_t, SetPointVelocity);
 8004bc2:	f107 0220 	add.w	r2, r7, #32
 8004bc6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004bca:	463b      	mov	r3, r7
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fd fb47 	bl	8002260 <IVK>
			for (int i = 0; i < 4; i++) {
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bd8:	e041      	b.n	8004c5e <Control_Function+0x39e>
 8004bda:	bf00      	nop
 8004bdc:	f3af 8000 	nop.w
 8004be0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004be4:	3f50624d 	.word	0x3f50624d
 8004be8:	200002c8 	.word	0x200002c8
 8004bec:	200002f0 	.word	0x200002f0
 8004bf0:	20000318 	.word	0x20000318
 8004bf4:	20000340 	.word	0x20000340
 8004bf8:	20000b60 	.word	0x20000b60
 8004bfc:	44fa0000 	.word	0x44fa0000
 8004c00:	40490fdb 	.word	0x40490fdb
 8004c04:	20000b58 	.word	0x20000b58
 8004c08:	20000bcb 	.word	0x20000bcb
 8004c0c:	20000bc9 	.word	0x20000bc9
 8004c10:	20000bc0 	.word	0x20000bc0
 8004c14:	200009d0 	.word	0x200009d0
 8004c18:	20000b70 	.word	0x20000b70
 8004c1c:	20000b98 	.word	0x20000b98
 8004c20:	080183d0 	.word	0x080183d0
				TrajFollow(&Traj[i], traj_t_set, &SetPointPosition[i],
 8004c24:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c28:	4613      	mov	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	1a9b      	subs	r3, r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4a47      	ldr	r2, [pc, #284]	; (8004d50 <Control_Function+0x490>)
 8004c32:	1898      	adds	r0, r3, r2
 8004c34:	463a      	mov	r2, r7
 8004c36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	18d4      	adds	r4, r2, r3
 8004c3e:	f107 0220 	add.w	r2, r7, #32
 8004c42:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4413      	add	r3, r2
 8004c4a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004c4e:	4622      	mov	r2, r4
 8004c50:	f7fc fbb0 	bl	80013b4 <TrajFollow>
			for (int i = 0; i < 4; i++) {
 8004c54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004c62:	2b03      	cmp	r3, #3
 8004c64:	ddde      	ble.n	8004c24 <Control_Function+0x364>
						&SetPointVelocity[i]);
			}
			t += delta_t;
 8004c66:	4b3b      	ldr	r3, [pc, #236]	; (8004d54 <Control_Function+0x494>)
 8004c68:	ed93 7b00 	vldr	d7, [r3]
 8004c6c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8004d48 <Control_Function+0x488>
 8004c70:	ee37 7b06 	vadd.f64	d7, d7, d6
 8004c74:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <Control_Function+0x494>)
 8004c76:	ed83 7b00 	vstr	d7, [r3]
		}
	}

	CascadeControl(&Control[0], &Kalman[0], J1, SetPoint_Position[0], SetPoint_Velocity[0]);
 8004c7a:	4b37      	ldr	r3, [pc, #220]	; (8004d58 <Control_Function+0x498>)
 8004c7c:	ed93 7b00 	vldr	d7, [r3]
 8004c80:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <Control_Function+0x49c>)
 8004c82:	ed93 6b00 	vldr	d6, [r3]
 8004c86:	eeb0 2b46 	vmov.f64	d2, d6
 8004c8a:	eeb0 1b47 	vmov.f64	d1, d7
 8004c8e:	ed97 0b32 	vldr	d0, [r7, #200]	; 0xc8
 8004c92:	4933      	ldr	r1, [pc, #204]	; (8004d60 <Control_Function+0x4a0>)
 8004c94:	4833      	ldr	r0, [pc, #204]	; (8004d64 <Control_Function+0x4a4>)
 8004c96:	f7fc fee2 	bl	8001a5e <CascadeControl>
	CascadeControl(&Control[1], &Kalman[1], J2, SetPoint_Position[1], SetPoint_Velocity[1]);
 8004c9a:	4b2f      	ldr	r3, [pc, #188]	; (8004d58 <Control_Function+0x498>)
 8004c9c:	ed93 7b02 	vldr	d7, [r3, #8]
 8004ca0:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <Control_Function+0x49c>)
 8004ca2:	ed93 6b02 	vldr	d6, [r3, #8]
 8004ca6:	eeb0 2b46 	vmov.f64	d2, d6
 8004caa:	eeb0 1b47 	vmov.f64	d1, d7
 8004cae:	ed97 0b30 	vldr	d0, [r7, #192]	; 0xc0
 8004cb2:	492d      	ldr	r1, [pc, #180]	; (8004d68 <Control_Function+0x4a8>)
 8004cb4:	482d      	ldr	r0, [pc, #180]	; (8004d6c <Control_Function+0x4ac>)
 8004cb6:	f7fc fed2 	bl	8001a5e <CascadeControl>
	CascadeControl(&Control[2], &Kalman[2], J3, SetPoint_Position[2], SetPoint_Velocity[2]);
 8004cba:	4b27      	ldr	r3, [pc, #156]	; (8004d58 <Control_Function+0x498>)
 8004cbc:	ed93 7b04 	vldr	d7, [r3, #16]
 8004cc0:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <Control_Function+0x49c>)
 8004cc2:	ed93 6b04 	vldr	d6, [r3, #16]
 8004cc6:	eeb0 2b46 	vmov.f64	d2, d6
 8004cca:	eeb0 1b47 	vmov.f64	d1, d7
 8004cce:	ed97 0b2e 	vldr	d0, [r7, #184]	; 0xb8
 8004cd2:	4927      	ldr	r1, [pc, #156]	; (8004d70 <Control_Function+0x4b0>)
 8004cd4:	4827      	ldr	r0, [pc, #156]	; (8004d74 <Control_Function+0x4b4>)
 8004cd6:	f7fc fec2 	bl	8001a5e <CascadeControl>
	CascadeControl(&Control[3], &Kalman[3], J4, SetPoint_Position[3], SetPoint_Velocity[3]);
 8004cda:	4b1f      	ldr	r3, [pc, #124]	; (8004d58 <Control_Function+0x498>)
 8004cdc:	ed93 7b06 	vldr	d7, [r3, #24]
 8004ce0:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <Control_Function+0x49c>)
 8004ce2:	ed93 6b06 	vldr	d6, [r3, #24]
 8004ce6:	eeb0 2b46 	vmov.f64	d2, d6
 8004cea:	eeb0 1b47 	vmov.f64	d1, d7
 8004cee:	ed97 0b2c 	vldr	d0, [r7, #176]	; 0xb0
 8004cf2:	4921      	ldr	r1, [pc, #132]	; (8004d78 <Control_Function+0x4b8>)
 8004cf4:	4821      	ldr	r0, [pc, #132]	; (8004d7c <Control_Function+0x4bc>)
 8004cf6:	f7fc feb2 	bl	8001a5e <CascadeControl>

	Step_Driver(&Stepper[0], Control[0].Output);
 8004cfa:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <Control_Function+0x4a4>)
 8004cfc:	ed93 7b34 	vldr	d7, [r3, #208]	; 0xd0
 8004d00:	eeb0 0b47 	vmov.f64	d0, d7
 8004d04:	481e      	ldr	r0, [pc, #120]	; (8004d80 <Control_Function+0x4c0>)
 8004d06:	f7fc f97f 	bl	8001008 <Step_Driver>
	Step_Driver(&Stepper[1], Control[1].Output);
 8004d0a:	4b16      	ldr	r3, [pc, #88]	; (8004d64 <Control_Function+0x4a4>)
 8004d0c:	ed93 7b6a 	vldr	d7, [r3, #424]	; 0x1a8
 8004d10:	eeb0 0b47 	vmov.f64	d0, d7
 8004d14:	481b      	ldr	r0, [pc, #108]	; (8004d84 <Control_Function+0x4c4>)
 8004d16:	f7fc f977 	bl	8001008 <Step_Driver>
	Step_Driver(&Stepper[2], Control[2].Output);
 8004d1a:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <Control_Function+0x4a4>)
 8004d1c:	ed93 7ba0 	vldr	d7, [r3, #640]	; 0x280
 8004d20:	eeb0 0b47 	vmov.f64	d0, d7
 8004d24:	4818      	ldr	r0, [pc, #96]	; (8004d88 <Control_Function+0x4c8>)
 8004d26:	f7fc f96f 	bl	8001008 <Step_Driver>
	Step_Driver(&Stepper[3], Control[3].Output);
 8004d2a:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <Control_Function+0x4a4>)
 8004d2c:	ed93 7bd6 	vldr	d7, [r3, #856]	; 0x358
 8004d30:	eeb0 0b47 	vmov.f64	d0, d7
 8004d34:	4815      	ldr	r0, [pc, #84]	; (8004d8c <Control_Function+0x4cc>)
 8004d36:	f7fc f967 	bl	8001008 <Step_Driver>
}
 8004d3a:	bf00      	nop
 8004d3c:	37e0      	adds	r7, #224	; 0xe0
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bdb0      	pop	{r4, r5, r7, pc}
 8004d42:	bf00      	nop
 8004d44:	f3af 8000 	nop.w
 8004d48:	d2f1a9fc 	.word	0xd2f1a9fc
 8004d4c:	3f50624d 	.word	0x3f50624d
 8004d50:	200009d0 	.word	0x200009d0
 8004d54:	20000bc0 	.word	0x20000bc0
 8004d58:	20000b70 	.word	0x20000b70
 8004d5c:	20000b98 	.word	0x20000b98
 8004d60:	20000368 	.word	0x20000368
 8004d64:	200004a8 	.word	0x200004a8
 8004d68:	200003a8 	.word	0x200003a8
 8004d6c:	20000580 	.word	0x20000580
 8004d70:	200003e8 	.word	0x200003e8
 8004d74:	20000658 	.word	0x20000658
 8004d78:	20000428 	.word	0x20000428
 8004d7c:	20000730 	.word	0x20000730
 8004d80:	20000808 	.word	0x20000808
 8004d84:	2000081c 	.word	0x2000081c
 8004d88:	20000830 	.word	0x20000830
 8004d8c:	20000844 	.word	0x20000844

08004d90 <JMoveTaskSpace>:

inline void JMoveTaskSpace(double Task2Go[3], double Time2Move){
 8004d90:	b5b0      	push	{r4, r5, r7, lr}
 8004d92:	b094      	sub	sp, #80	; 0x50
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	ed87 0b00 	vstr	d0, [r7]
	double gamma[3] = { 1, 1, -1 };
 8004d9c:	4b2e      	ldr	r3, [pc, #184]	; (8004e58 <JMoveTaskSpace+0xc8>)
 8004d9e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8004da2:	461d      	mov	r5, r3
 8004da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004da8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004dac:	e884 0003 	stmia.w	r4, {r0, r1}
	double q_inv[4];
	IPK(gamma, Task2Go, q_inv);
 8004db0:	f107 0210 	add.w	r2, r7, #16
 8004db4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fd f924 	bl	8002008 <IPK>
	t = 0;
 8004dc0:	4926      	ldr	r1, [pc, #152]	; (8004e5c <JMoveTaskSpace+0xcc>)
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < 4; i++) {
 8004dce:	2300      	movs	r3, #0
 8004dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd2:	e02f      	b.n	8004e34 <JMoveTaskSpace+0xa4>
		Traj_Coeff_Cal(&Traj[i], Time2Move, q_inv[i], Control[i].PositionFeedback, 0,
 8004dd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	1a9b      	subs	r3, r3, r2
 8004ddc:	00db      	lsls	r3, r3, #3
 8004dde:	4a20      	ldr	r2, [pc, #128]	; (8004e60 <JMoveTaskSpace+0xd0>)
 8004de0:	441a      	add	r2, r3
 8004de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	3350      	adds	r3, #80	; 0x50
 8004de8:	443b      	add	r3, r7
 8004dea:	3b40      	subs	r3, #64	; 0x40
 8004dec:	ed93 7b00 	vldr	d7, [r3]
 8004df0:	491c      	ldr	r1, [pc, #112]	; (8004e64 <JMoveTaskSpace+0xd4>)
 8004df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004df4:	20d8      	movs	r0, #216	; 0xd8
 8004df6:	fb00 f303 	mul.w	r3, r0, r3
 8004dfa:	440b      	add	r3, r1
 8004dfc:	3350      	adds	r3, #80	; 0x50
 8004dfe:	ed93 6b00 	vldr	d6, [r3]
 8004e02:	4918      	ldr	r1, [pc, #96]	; (8004e64 <JMoveTaskSpace+0xd4>)
 8004e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e06:	20d8      	movs	r0, #216	; 0xd8
 8004e08:	fb00 f303 	mul.w	r3, r0, r3
 8004e0c:	440b      	add	r3, r1
 8004e0e:	33b8      	adds	r3, #184	; 0xb8
 8004e10:	ed93 5b00 	vldr	d5, [r3]
 8004e14:	eeb0 4b45 	vmov.f64	d4, d5
 8004e18:	ed9f 3b0d 	vldr	d3, [pc, #52]	; 8004e50 <JMoveTaskSpace+0xc0>
 8004e1c:	eeb0 2b46 	vmov.f64	d2, d6
 8004e20:	eeb0 1b47 	vmov.f64	d1, d7
 8004e24:	ed97 0b00 	vldr	d0, [r7]
 8004e28:	4610      	mov	r0, r2
 8004e2a:	f7fc fa15 	bl	8001258 <Traj_Coeff_Cal>
	for (int i = 0; i < 4; i++) {
 8004e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e30:	3301      	adds	r3, #1
 8004e32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	ddcc      	ble.n	8004dd4 <JMoveTaskSpace+0x44>
				Control[i].VelocityFeedback);
	}
	Traj_Flag = 0x0F;
 8004e3a:	4b0b      	ldr	r3, [pc, #44]	; (8004e68 <JMoveTaskSpace+0xd8>)
 8004e3c:	220f      	movs	r2, #15
 8004e3e:	701a      	strb	r2, [r3, #0]
	Chessmove_State = 0;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <JMoveTaskSpace+0xdc>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
}
 8004e46:	bf00      	nop
 8004e48:	3750      	adds	r7, #80	; 0x50
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8004e4e:	bf00      	nop
	...
 8004e58:	080183d0 	.word	0x080183d0
 8004e5c:	20000bc0 	.word	0x20000bc0
 8004e60:	200009d0 	.word	0x200009d0
 8004e64:	200004a8 	.word	0x200004a8
 8004e68:	20000bc9 	.word	0x20000bc9
 8004e6c:	20000bcb 	.word	0x20000bcb

08004e70 <ChessNotMovePathWay>:
	Traj_Flag = 0x0F;
	Chessmove_State = 1; // Change to TaskSpace Traj
}

void ChessNotMovePathWay(uint8_t Index2Move, double Z_Offset, uint8_t IsJMove,
		uint8_t IsRemove) {
 8004e70:	b5b0      	push	{r4, r5, r7, lr}
 8004e72:	b0a6      	sub	sp, #152	; 0x98
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	ed87 0b00 	vstr	d0, [r7]
 8004e7c:	73fb      	strb	r3, [r7, #15]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	73bb      	strb	r3, [r7, #14]
 8004e82:	4613      	mov	r3, r2
 8004e84:	737b      	strb	r3, [r7, #13]
	/***** Encoder Read *****/
	double PositionXY[2];
	double SafePose[3] = { 100, -370, 13 };
 8004e86:	4baa      	ldr	r3, [pc, #680]	; (8005130 <ChessNotMovePathWay+0x2c0>)
 8004e88:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8004e8c:	461d      	mov	r5, r3
 8004e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e92:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004e96:	e884 0003 	stmia.w	r4, {r0, r1}

	/***** Base Encoder Read *****/
//	BaseEnc = BaseENCRead();   //?????????????????????????????????????????????????????????
	ChessPose(Index2Move, Chess_Board_Base_Encoder, PositionXY);
 8004e9a:	4ba6      	ldr	r3, [pc, #664]	; (8005134 <ChessNotMovePathWay+0x2c4>)
 8004e9c:	ed93 7b00 	vldr	d7, [r3]
 8004ea0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	eeb0 0b47 	vmov.f64	d0, d7
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fd fedf 	bl	8002c70 <ChessPose>
	double q_Feed[4];
	double Pne[3];
	q_Feed[0] = Control[0].PositionFeedback;
 8004eb2:	4ba1      	ldr	r3, [pc, #644]	; (8005138 <ChessNotMovePathWay+0x2c8>)
 8004eb4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8004eb8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	q_Feed[1] = Control[1].PositionFeedback;
 8004ebc:	4b9e      	ldr	r3, [pc, #632]	; (8005138 <ChessNotMovePathWay+0x2c8>)
 8004ebe:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 8004ec2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
	q_Feed[2] = Control[2].PositionFeedback;
 8004ec6:	4b9c      	ldr	r3, [pc, #624]	; (8005138 <ChessNotMovePathWay+0x2c8>)
 8004ec8:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8004ecc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	q_Feed[3] = Control[3].PositionFeedback;
 8004ed0:	4b99      	ldr	r3, [pc, #612]	; (8005138 <ChessNotMovePathWay+0x2c8>)
 8004ed2:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 8004ed6:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	FPK(q_Feed, 269.0f, Pne);
 8004eda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ede:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	ed9f 0b88 	vldr	d0, [pc, #544]	; 8005108 <ChessNotMovePathWay+0x298>
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fd fc95 	bl	8002818 <FPK>
	double Time2MoveDynamic = 1.2;
 8004eee:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8004ef2:	4b92      	ldr	r3, [pc, #584]	; (800513c <ChessNotMovePathWay+0x2cc>)
 8004ef4:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	double TaskSpace2Go[3];
	if (Index2Move == 64) {
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	2b40      	cmp	r3, #64	; 0x40
 8004efc:	f040 80e2 	bne.w	80050c4 <ChessNotMovePathWay+0x254>
		if (IsRemove == 1) {
 8004f00:	7b7b      	ldrb	r3, [r7, #13]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d16a      	bne.n	8004fdc <ChessNotMovePathWay+0x16c>
			TaskSpace2Go[0] = SafePose[0] + (PositionX_Remove * 40);
 8004f06:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8004f0a:	4b8d      	ldr	r3, [pc, #564]	; (8005140 <ChessNotMovePathWay+0x2d0>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	ee07 3a90 	vmov	s15, r3
 8004f1c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004f20:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f24:	ed87 7b04 	vstr	d7, [r7, #16]
			TaskSpace2Go[1] = SafePose[1];
 8004f28:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004f2c:	e9c7 2306 	strd	r2, r3, [r7, #24]
			TaskSpace2Go[2] = Z_TopOffset;
 8004f30:	4b84      	ldr	r3, [pc, #528]	; (8005144 <ChessNotMovePathWay+0x2d4>)
 8004f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f36:	e9c7 2308 	strd	r2, r3, [r7, #32]
			Time2MoveDynamic += (sqrt(
								((TaskSpace2Go[0] - Pne[0]) * (TaskSpace2Go[0] - Pne[0]))
 8004f3a:	ed97 6b04 	vldr	d6, [r7, #16]
 8004f3e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004f42:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004f46:	ed97 5b04 	vldr	d5, [r7, #16]
 8004f4a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004f4e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004f52:	ee26 6b07 	vmul.f64	d6, d6, d7
										+ ((TaskSpace2Go[1] - Pne[1]) * (TaskSpace2Go[1] - Pne[1])
 8004f56:	ed97 5b06 	vldr	d5, [r7, #24]
 8004f5a:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004f5e:	ee35 5b47 	vsub.f64	d5, d5, d7
 8004f62:	ed97 4b06 	vldr	d4, [r7, #24]
 8004f66:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004f6a:	ee34 7b47 	vsub.f64	d7, d4, d7
 8004f6e:	ee25 5b07 	vmul.f64	d5, d5, d7
												+ ((TaskSpace2Go[2] - Pne[2]) * (TaskSpace2Go[2] - Pne[2])))))
 8004f72:	ed97 4b08 	vldr	d4, [r7, #32]
 8004f76:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004f7a:	ee34 4b47 	vsub.f64	d4, d4, d7
 8004f7e:	ed97 3b08 	vldr	d3, [r7, #32]
 8004f82:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004f86:	ee33 7b47 	vsub.f64	d7, d3, d7
 8004f8a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8004f8e:	ee35 7b07 	vadd.f64	d7, d5, d7
			Time2MoveDynamic += (sqrt(
 8004f92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004f96:	eeb0 0b47 	vmov.f64	d0, d7
 8004f9a:	f012 fa6d 	bl	8017478 <sqrt>
 8004f9e:	eeb0 7b40 	vmov.f64	d7, d0
								* 0.0067;
 8004fa2:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8005110 <ChessNotMovePathWay+0x2a0>
 8004fa6:	ee27 7b06 	vmul.f64	d7, d7, d6
			Time2MoveDynamic += (sqrt(
 8004faa:	ed97 6b22 	vldr	d6, [r7, #136]	; 0x88
 8004fae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004fb2:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
			if (IsJMove) {
 8004fb6:	7bbb      	ldrb	r3, [r7, #14]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d007      	beq.n	8004fcc <ChessNotMovePathWay+0x15c>
				JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 8004fbc:	f107 0310 	add.w	r3, r7, #16
 8004fc0:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff fee3 	bl	8004d90 <JMoveTaskSpace>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
		} else {
			JMoveTaskSpace(TaskSpace2Go, 2);
		}
	}
}
 8004fca:	e146      	b.n	800525a <ChessNotMovePathWay+0x3ea>
				JMoveTaskSpace(TaskSpace2Go, 2);
 8004fcc:	f107 0310 	add.w	r3, r7, #16
 8004fd0:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fedb 	bl	8004d90 <JMoveTaskSpace>
}
 8004fda:	e13e      	b.n	800525a <ChessNotMovePathWay+0x3ea>
		} else if (IsRemove == 2) {
 8004fdc:	7b7b      	ldrb	r3, [r7, #13]
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	f040 813b 	bne.w	800525a <ChessNotMovePathWay+0x3ea>
			TaskSpace2Go[0] = SafePose[0] + (PositionX_Remove * 40);
 8004fe4:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8004fe8:	4b55      	ldr	r3, [pc, #340]	; (8005140 <ChessNotMovePathWay+0x2d0>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	00db      	lsls	r3, r3, #3
 8004ff6:	ee07 3a90 	vmov	s15, r3
 8004ffa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004ffe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005002:	ed87 7b04 	vstr	d7, [r7, #16]
			TaskSpace2Go[1] = SafePose[1];
 8005006:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800500a:	e9c7 2306 	strd	r2, r3, [r7, #24]
			TaskSpace2Go[2] = SafePose[2];
 800500e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005012:	e9c7 2308 	strd	r2, r3, [r7, #32]
			PositionX_Remove += 1;
 8005016:	4b4a      	ldr	r3, [pc, #296]	; (8005140 <ChessNotMovePathWay+0x2d0>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	3301      	adds	r3, #1
 800501c:	b2da      	uxtb	r2, r3
 800501e:	4b48      	ldr	r3, [pc, #288]	; (8005140 <ChessNotMovePathWay+0x2d0>)
 8005020:	701a      	strb	r2, [r3, #0]
					((TaskSpace2Go[0] - Pne[0]) * (TaskSpace2Go[0] - Pne[0]))
 8005022:	ed97 6b04 	vldr	d6, [r7, #16]
 8005026:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800502a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800502e:	ed97 5b04 	vldr	d5, [r7, #16]
 8005032:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8005036:	ee35 7b47 	vsub.f64	d7, d5, d7
 800503a:	ee26 6b07 	vmul.f64	d6, d6, d7
							+ ((TaskSpace2Go[1] - Pne[1]) * (TaskSpace2Go[1] - Pne[1])
 800503e:	ed97 5b06 	vldr	d5, [r7, #24]
 8005042:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005046:	ee35 5b47 	vsub.f64	d5, d5, d7
 800504a:	ed97 4b06 	vldr	d4, [r7, #24]
 800504e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8005052:	ee34 7b47 	vsub.f64	d7, d4, d7
 8005056:	ee25 5b07 	vmul.f64	d5, d5, d7
									+ ((TaskSpace2Go[2] - Pne[2]) * (TaskSpace2Go[2] - Pne[2])))))
 800505a:	ed97 4b08 	vldr	d4, [r7, #32]
 800505e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8005062:	ee34 4b47 	vsub.f64	d4, d4, d7
 8005066:	ed97 3b08 	vldr	d3, [r7, #32]
 800506a:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800506e:	ee33 7b47 	vsub.f64	d7, d3, d7
 8005072:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005076:	ee35 7b07 	vadd.f64	d7, d5, d7
			Time2MoveDynamic += (sqrt(
 800507a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800507e:	eeb0 0b47 	vmov.f64	d0, d7
 8005082:	f012 f9f9 	bl	8017478 <sqrt>
 8005086:	eeb0 7b40 	vmov.f64	d7, d0
					* 0.0067;
 800508a:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8005110 <ChessNotMovePathWay+0x2a0>
 800508e:	ee27 7b06 	vmul.f64	d7, d7, d6
			Time2MoveDynamic += (sqrt(
 8005092:	ed97 6b22 	vldr	d6, [r7, #136]	; 0x88
 8005096:	ee36 7b07 	vadd.f64	d7, d6, d7
 800509a:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
			if (IsJMove) {
 800509e:	7bbb      	ldrb	r3, [r7, #14]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <ChessNotMovePathWay+0x244>
				JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 80050a4:	f107 0310 	add.w	r3, r7, #16
 80050a8:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff fe6f 	bl	8004d90 <JMoveTaskSpace>
}
 80050b2:	e0d2      	b.n	800525a <ChessNotMovePathWay+0x3ea>
				JMoveTaskSpace(TaskSpace2Go, 2);
 80050b4:	f107 0310 	add.w	r3, r7, #16
 80050b8:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 80050bc:	4618      	mov	r0, r3
 80050be:	f7ff fe67 	bl	8004d90 <JMoveTaskSpace>
}
 80050c2:	e0ca      	b.n	800525a <ChessNotMovePathWay+0x3ea>
		if (PositionXY[0] > 250 && PositionXY[0] < 450) {
 80050c4:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80050c8:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8005118 <ChessNotMovePathWay+0x2a8>
 80050cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80050d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d4:	dd38      	ble.n	8005148 <ChessNotMovePathWay+0x2d8>
 80050d6:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80050da:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8005120 <ChessNotMovePathWay+0x2b0>
 80050de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80050e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e6:	d52f      	bpl.n	8005148 <ChessNotMovePathWay+0x2d8>
			Z_Board_Offset = (PositionXY[0] - 250) * 0.05f;
 80050e8:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 80050ec:	ed9f 6b0a 	vldr	d6, [pc, #40]	; 8005118 <ChessNotMovePathWay+0x2a8>
 80050f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80050f4:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8005128 <ChessNotMovePathWay+0x2b8>
 80050f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80050fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005100:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
 8005104:	e040      	b.n	8005188 <ChessNotMovePathWay+0x318>
 8005106:	bf00      	nop
 8005108:	00000000 	.word	0x00000000
 800510c:	4070d000 	.word	0x4070d000
 8005110:	8e219653 	.word	0x8e219653
 8005114:	3f7b7175 	.word	0x3f7b7175
 8005118:	00000000 	.word	0x00000000
 800511c:	406f4000 	.word	0x406f4000
 8005120:	00000000 	.word	0x00000000
 8005124:	407c2000 	.word	0x407c2000
 8005128:	a0000000 	.word	0xa0000000
 800512c:	3fa99999 	.word	0x3fa99999
 8005130:	080183e8 	.word	0x080183e8
 8005134:	20000b58 	.word	0x20000b58
 8005138:	200004a8 	.word	0x200004a8
 800513c:	3ff33333 	.word	0x3ff33333
 8005140:	20000be2 	.word	0x20000be2
 8005144:	20000000 	.word	0x20000000
		} else if (PositionXY[0] > 450 && PositionXY[0] < 700) {
 8005148:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800514c:	ed9f 6b46 	vldr	d6, [pc, #280]	; 8005268 <ChessNotMovePathWay+0x3f8>
 8005150:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005158:	dd16      	ble.n	8005188 <ChessNotMovePathWay+0x318>
 800515a:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800515e:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8005270 <ChessNotMovePathWay+0x400>
 8005162:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516a:	d50d      	bpl.n	8005188 <ChessNotMovePathWay+0x318>
			Z_Board_Offset = (PositionXY[0] - 450) * 0.11f;
 800516c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8005170:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8005268 <ChessNotMovePathWay+0x3f8>
 8005174:	ee37 7b46 	vsub.f64	d7, d7, d6
 8005178:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8005278 <ChessNotMovePathWay+0x408>
 800517c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005180:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005184:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
		TaskSpace2Go[0] = PositionXY[0];
 8005188:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800518c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		TaskSpace2Go[1] = PositionXY[1];
 8005190:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005194:	e9c7 2306 	strd	r2, r3, [r7, #24]
		TaskSpace2Go[2] = Z_Offset + ChessHight + Z_Board_Offset;
 8005198:	4b3b      	ldr	r3, [pc, #236]	; (8005288 <ChessNotMovePathWay+0x418>)
 800519a:	edd3 7a00 	vldr	s15, [r3]
 800519e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80051a2:	ed97 7b00 	vldr	d7, [r7]
 80051a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80051aa:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80051ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80051b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051b6:	ed87 7b08 	vstr	d7, [r7, #32]
							((TaskSpace2Go[0] - Pne[0]) * (TaskSpace2Go[0] - Pne[0]))
 80051ba:	ed97 6b04 	vldr	d6, [r7, #16]
 80051be:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80051c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80051c6:	ed97 5b04 	vldr	d5, [r7, #16]
 80051ca:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80051ce:	ee35 7b47 	vsub.f64	d7, d5, d7
 80051d2:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ ((TaskSpace2Go[1] - Pne[1]) * (TaskSpace2Go[1] - Pne[1])
 80051d6:	ed97 5b06 	vldr	d5, [r7, #24]
 80051da:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80051de:	ee35 5b47 	vsub.f64	d5, d5, d7
 80051e2:	ed97 4b06 	vldr	d4, [r7, #24]
 80051e6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80051ea:	ee34 7b47 	vsub.f64	d7, d4, d7
 80051ee:	ee25 5b07 	vmul.f64	d5, d5, d7
											+ ((TaskSpace2Go[2] - Pne[2]) * (TaskSpace2Go[2] - Pne[2])))))
 80051f2:	ed97 4b08 	vldr	d4, [r7, #32]
 80051f6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80051fa:	ee34 4b47 	vsub.f64	d4, d4, d7
 80051fe:	ed97 3b08 	vldr	d3, [r7, #32]
 8005202:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8005206:	ee33 7b47 	vsub.f64	d7, d3, d7
 800520a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800520e:	ee35 7b07 	vadd.f64	d7, d5, d7
		Time2MoveDynamic += (sqrt(
 8005212:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005216:	eeb0 0b47 	vmov.f64	d0, d7
 800521a:	f012 f92d 	bl	8017478 <sqrt>
 800521e:	eeb0 7b40 	vmov.f64	d7, d0
							* 0.0067;
 8005222:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8005280 <ChessNotMovePathWay+0x410>
 8005226:	ee27 7b06 	vmul.f64	d7, d7, d6
		Time2MoveDynamic += (sqrt(
 800522a:	ed97 6b22 	vldr	d6, [r7, #136]	; 0x88
 800522e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005232:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
		if (IsJMove) {
 8005236:	7bbb      	ldrb	r3, [r7, #14]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <ChessNotMovePathWay+0x3dc>
			JMoveTaskSpace(TaskSpace2Go, Time2MoveDynamic);
 800523c:	f107 0310 	add.w	r3, r7, #16
 8005240:	ed97 0b22 	vldr	d0, [r7, #136]	; 0x88
 8005244:	4618      	mov	r0, r3
 8005246:	f7ff fda3 	bl	8004d90 <JMoveTaskSpace>
}
 800524a:	e006      	b.n	800525a <ChessNotMovePathWay+0x3ea>
			JMoveTaskSpace(TaskSpace2Go, 2);
 800524c:	f107 0310 	add.w	r3, r7, #16
 8005250:	eeb0 0b00 	vmov.f64	d0, #0	; 0x40000000  2.0
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fd9b 	bl	8004d90 <JMoveTaskSpace>
}
 800525a:	bf00      	nop
 800525c:	3798      	adds	r7, #152	; 0x98
 800525e:	46bd      	mov	sp, r7
 8005260:	bdb0      	pop	{r4, r5, r7, pc}
 8005262:	bf00      	nop
 8005264:	f3af 8000 	nop.w
 8005268:	00000000 	.word	0x00000000
 800526c:	407c2000 	.word	0x407c2000
 8005270:	00000000 	.word	0x00000000
 8005274:	4085e000 	.word	0x4085e000
 8005278:	c0000000 	.word	0xc0000000
 800527c:	3fbc28f5 	.word	0x3fbc28f5
 8005280:	8e219653 	.word	0x8e219653
 8005284:	3f7b7175 	.word	0x3f7b7175
 8005288:	20000bdc 	.word	0x20000bdc
 800528c:	00000000 	.word	0x00000000

08005290 <ChessMoveStateMachine>:

void ChessMoveStateMachine() {
 8005290:	b5b0      	push	{r4, r5, r7, lr}
 8005292:	b09a      	sub	sp, #104	; 0x68
 8005294:	af00      	add	r7, sp, #0
	static uint8_t ChangeState = 0;
	double Speed_Error = 0.05;
 8005296:	a3c5      	add	r3, pc, #788	; (adr r3, 80055ac <ChessMoveStateMachine+0x31c>)
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	double SafePose[3] = {210, -270, 250};
 80052a0:	4bb5      	ldr	r3, [pc, #724]	; (8005578 <ChessMoveStateMachine+0x2e8>)
 80052a2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80052a6:	461d      	mov	r5, r3
 80052a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80052b0:	e884 0003 	stmia.w	r4, {r0, r1}
	double Time2MoveDynamic = 1.3;
 80052b4:	a3ac      	add	r3, pc, #688	; (adr r3, 8005568 <ChessMoveStateMachine+0x2d8>)
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	double q_Feed[4];
	double Pne[3];

	switch (ChessMoveStates) {
 80052be:	4baf      	ldr	r3, [pc, #700]	; (800557c <ChessMoveStateMachine+0x2ec>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b0a      	cmp	r3, #10
 80052c4:	f200 825b 	bhi.w	800577e <ChessMoveStateMachine+0x4ee>
 80052c8:	a201      	add	r2, pc, #4	; (adr r2, 80052d0 <ChessMoveStateMachine+0x40>)
 80052ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ce:	bf00      	nop
 80052d0:	080052fd 	.word	0x080052fd
 80052d4:	08005335 	.word	0x08005335
 80052d8:	080053b7 	.word	0x080053b7
 80052dc:	08005415 	.word	0x08005415
 80052e0:	08005425 	.word	0x08005425
 80052e4:	0800547b 	.word	0x0800547b
 80052e8:	080054fd 	.word	0x080054fd
 80052ec:	080055b5 	.word	0x080055b5
 80052f0:	0800560b 	.word	0x0800560b
 80052f4:	08005621 	.word	0x08005621
 80052f8:	08005677 	.word	0x08005677
	case Chess_idle:
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 0);
 80052fc:	2200      	movs	r2, #0
 80052fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005302:	489f      	ldr	r0, [pc, #636]	; (8005580 <ChessMoveStateMachine+0x2f0>)
 8005304:	f007 fd9c 	bl	800ce40 <HAL_GPIO_WritePin>
		if (Chess_Move_Start_Flag) {
 8005308:	4b9e      	ldr	r3, [pc, #632]	; (8005584 <ChessMoveStateMachine+0x2f4>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8238 	beq.w	8005782 <ChessMoveStateMachine+0x4f2>
			ChessMoveStates = Move_2_Start_Top_Point;
 8005312:	4b9a      	ldr	r3, [pc, #616]	; (800557c <ChessMoveStateMachine+0x2ec>)
 8005314:	2201      	movs	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, 1);
 8005318:	2201      	movs	r2, #1
 800531a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800531e:	4898      	ldr	r0, [pc, #608]	; (8005580 <ChessMoveStateMachine+0x2f0>)
 8005320:	f007 fd8e 	bl	800ce40 <HAL_GPIO_WritePin>
			Servo_Drive(&Servo[1], 90);
 8005324:	215a      	movs	r1, #90	; 0x5a
 8005326:	4898      	ldr	r0, [pc, #608]	; (8005588 <ChessMoveStateMachine+0x2f8>)
 8005328:	f7fb ff3c 	bl	80011a4 <Servo_Drive>
			ChangeState = 1;
 800532c:	4b97      	ldr	r3, [pc, #604]	; (800558c <ChessMoveStateMachine+0x2fc>)
 800532e:	2201      	movs	r2, #1
 8005330:	701a      	strb	r2, [r3, #0]
			}
		break;
 8005332:	e226      	b.n	8005782 <ChessMoveStateMachine+0x4f2>
	case Move_2_Start_Top_Point:
		if (ChangeState) {
 8005334:	4b95      	ldr	r3, [pc, #596]	; (800558c <ChessMoveStateMachine+0x2fc>)
 8005336:	781b      	ldrb	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00e      	beq.n	800535a <ChessMoveStateMachine+0xca>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 1 , 0);
 800533c:	4b94      	ldr	r3, [pc, #592]	; (8005590 <ChessMoveStateMachine+0x300>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	4a94      	ldr	r2, [pc, #592]	; (8005594 <ChessMoveStateMachine+0x304>)
 8005342:	ed92 7b00 	vldr	d7, [r2]
 8005346:	2200      	movs	r2, #0
 8005348:	2101      	movs	r1, #1
 800534a:	eeb0 0b47 	vmov.f64	d0, d7
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fd8e 	bl	8004e70 <ChessNotMovePathWay>
			ChangeState = 0;
 8005354:	4b8d      	ldr	r3, [pc, #564]	; (800558c <ChessMoveStateMachine+0x2fc>)
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 800535a:	4b8f      	ldr	r3, [pc, #572]	; (8005598 <ChessMoveStateMachine+0x308>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f040 8211 	bne.w	8005786 <ChessMoveStateMachine+0x4f6>
			if(All_Joint_Speed_Avg() <= Speed_Error){
 8005364:	f000 fa3e 	bl	80057e4 <All_Joint_Speed_Avg>
 8005368:	eeb0 6b40 	vmov.f64	d6, d0
 800536c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005370:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005378:	da00      	bge.n	800537c <ChessMoveStateMachine+0xec>
				ChessMoveStates = Move_2_Start_Grip_Point;
				Servo_Drive(&Servo[1], 90.0f + Control[0].PositionFeedback - Chess_Board_Base_Encoder);
				ChangeState = 1;
			}
		}
		break;
 800537a:	e204      	b.n	8005786 <ChessMoveStateMachine+0x4f6>
				ChessMoveStates = Move_2_Start_Grip_Point;
 800537c:	4b7f      	ldr	r3, [pc, #508]	; (800557c <ChessMoveStateMachine+0x2ec>)
 800537e:	2202      	movs	r2, #2
 8005380:	701a      	strb	r2, [r3, #0]
				Servo_Drive(&Servo[1], 90.0f + Control[0].PositionFeedback - Chess_Board_Base_Encoder);
 8005382:	4b86      	ldr	r3, [pc, #536]	; (800559c <ChessMoveStateMachine+0x30c>)
 8005384:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 8005388:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8005570 <ChessMoveStateMachine+0x2e0>
 800538c:	ee37 6b06 	vadd.f64	d6, d7, d6
 8005390:	4b83      	ldr	r3, [pc, #524]	; (80055a0 <ChessMoveStateMachine+0x310>)
 8005392:	ed93 7b00 	vldr	d7, [r3]
 8005396:	ee36 7b47 	vsub.f64	d7, d6, d7
 800539a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800539e:	edc7 7a01 	vstr	s15, [r7, #4]
 80053a2:	793b      	ldrb	r3, [r7, #4]
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	4619      	mov	r1, r3
 80053a8:	4877      	ldr	r0, [pc, #476]	; (8005588 <ChessMoveStateMachine+0x2f8>)
 80053aa:	f7fb fefb 	bl	80011a4 <Servo_Drive>
				ChangeState = 1;
 80053ae:	4b77      	ldr	r3, [pc, #476]	; (800558c <ChessMoveStateMachine+0x2fc>)
 80053b0:	2201      	movs	r2, #1
 80053b2:	701a      	strb	r2, [r3, #0]
		break;
 80053b4:	e1e7      	b.n	8005786 <ChessMoveStateMachine+0x4f6>
	case Move_2_Start_Grip_Point:
		if (ChangeState) {
 80053b6:	4b75      	ldr	r3, [pc, #468]	; (800558c <ChessMoveStateMachine+0x2fc>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00e      	beq.n	80053dc <ChessMoveStateMachine+0x14c>
			ChessNotMovePathWay(ChessIndex[0], Z_2GripOffset, 0, 1);
 80053be:	4b74      	ldr	r3, [pc, #464]	; (8005590 <ChessMoveStateMachine+0x300>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	4a78      	ldr	r2, [pc, #480]	; (80055a4 <ChessMoveStateMachine+0x314>)
 80053c4:	ed92 7b00 	vldr	d7, [r2]
 80053c8:	2201      	movs	r2, #1
 80053ca:	2100      	movs	r1, #0
 80053cc:	eeb0 0b47 	vmov.f64	d0, d7
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7ff fd4d 	bl	8004e70 <ChessNotMovePathWay>
			ChangeState = 0;
 80053d6:	4b6d      	ldr	r3, [pc, #436]	; (800558c <ChessMoveStateMachine+0x2fc>)
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80053dc:	4b6e      	ldr	r3, [pc, #440]	; (8005598 <ChessMoveStateMachine+0x308>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f040 81d2 	bne.w	800578a <ChessMoveStateMachine+0x4fa>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 80053e6:	f000 f9fd 	bl	80057e4 <All_Joint_Speed_Avg>
 80053ea:	eeb0 6b40 	vmov.f64	d6, d0
 80053ee:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80053f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80053f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053fa:	da00      	bge.n	80053fe <ChessMoveStateMachine+0x16e>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
				Servo_Drive(&Servo[0], 110); //Ungrip
				ChangeState = 1;
			}
		}
		break;
 80053fc:	e1c5      	b.n	800578a <ChessMoveStateMachine+0x4fa>
				ChessMoveStates = Move_2_Start_Point_and_Griping;
 80053fe:	4b5f      	ldr	r3, [pc, #380]	; (800557c <ChessMoveStateMachine+0x2ec>)
 8005400:	2203      	movs	r2, #3
 8005402:	701a      	strb	r2, [r3, #0]
				Servo_Drive(&Servo[0], 110); //Ungrip
 8005404:	216e      	movs	r1, #110	; 0x6e
 8005406:	4868      	ldr	r0, [pc, #416]	; (80055a8 <ChessMoveStateMachine+0x318>)
 8005408:	f7fb fecc 	bl	80011a4 <Servo_Drive>
				ChangeState = 1;
 800540c:	4b5f      	ldr	r3, [pc, #380]	; (800558c <ChessMoveStateMachine+0x2fc>)
 800540e:	2201      	movs	r2, #1
 8005410:	701a      	strb	r2, [r3, #0]
		break;
 8005412:	e1ba      	b.n	800578a <ChessMoveStateMachine+0x4fa>
	case Move_2_Start_Point_and_Griping:
		// Grip Chess
		Servo_Drive(&Servo[0], 25); //Grip
 8005414:	2119      	movs	r1, #25
 8005416:	4864      	ldr	r0, [pc, #400]	; (80055a8 <ChessMoveStateMachine+0x318>)
 8005418:	f7fb fec4 	bl	80011a4 <Servo_Drive>
		ChessMoveStates = Back_2_Start_Top_Point;
 800541c:	4b57      	ldr	r3, [pc, #348]	; (800557c <ChessMoveStateMachine+0x2ec>)
 800541e:	2204      	movs	r2, #4
 8005420:	701a      	strb	r2, [r3, #0]
		break;
 8005422:	e1bf      	b.n	80057a4 <ChessMoveStateMachine+0x514>
	case Back_2_Start_Top_Point:
		if (ChangeState) {
 8005424:	4b59      	ldr	r3, [pc, #356]	; (800558c <ChessMoveStateMachine+0x2fc>)
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00e      	beq.n	800544a <ChessMoveStateMachine+0x1ba>
			ChessNotMovePathWay(ChessIndex[0], Z_TopOffset, 0, 1);
 800542c:	4b58      	ldr	r3, [pc, #352]	; (8005590 <ChessMoveStateMachine+0x300>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	4a58      	ldr	r2, [pc, #352]	; (8005594 <ChessMoveStateMachine+0x304>)
 8005432:	ed92 7b00 	vldr	d7, [r2]
 8005436:	2201      	movs	r2, #1
 8005438:	2100      	movs	r1, #0
 800543a:	eeb0 0b47 	vmov.f64	d0, d7
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fd16 	bl	8004e70 <ChessNotMovePathWay>
			ChangeState = 0;
 8005444:	4b51      	ldr	r3, [pc, #324]	; (800558c <ChessMoveStateMachine+0x2fc>)
 8005446:	2200      	movs	r2, #0
 8005448:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 800544a:	4b53      	ldr	r3, [pc, #332]	; (8005598 <ChessMoveStateMachine+0x308>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f040 819d 	bne.w	800578e <ChessMoveStateMachine+0x4fe>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8005454:	f000 f9c6 	bl	80057e4 <All_Joint_Speed_Avg>
 8005458:	eeb0 6b40 	vmov.f64	d6, d0
 800545c:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005460:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005468:	da00      	bge.n	800546c <ChessMoveStateMachine+0x1dc>
				ChessMoveStates = Move_2_End_Top_Point;
				ChangeState = 1;
			}
		}
		break;
 800546a:	e190      	b.n	800578e <ChessMoveStateMachine+0x4fe>
				ChessMoveStates = Move_2_End_Top_Point;
 800546c:	4b43      	ldr	r3, [pc, #268]	; (800557c <ChessMoveStateMachine+0x2ec>)
 800546e:	2205      	movs	r2, #5
 8005470:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8005472:	4b46      	ldr	r3, [pc, #280]	; (800558c <ChessMoveStateMachine+0x2fc>)
 8005474:	2201      	movs	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
		break;
 8005478:	e189      	b.n	800578e <ChessMoveStateMachine+0x4fe>

		// Finish To Grip Chess

	case Move_2_End_Top_Point:
		if (ChangeState) {
 800547a:	4b44      	ldr	r3, [pc, #272]	; (800558c <ChessMoveStateMachine+0x2fc>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00e      	beq.n	80054a0 <ChessMoveStateMachine+0x210>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 1, 1);
 8005482:	4b43      	ldr	r3, [pc, #268]	; (8005590 <ChessMoveStateMachine+0x300>)
 8005484:	785b      	ldrb	r3, [r3, #1]
 8005486:	4a43      	ldr	r2, [pc, #268]	; (8005594 <ChessMoveStateMachine+0x304>)
 8005488:	ed92 7b00 	vldr	d7, [r2]
 800548c:	2201      	movs	r2, #1
 800548e:	2101      	movs	r1, #1
 8005490:	eeb0 0b47 	vmov.f64	d0, d7
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff fceb 	bl	8004e70 <ChessNotMovePathWay>
			ChangeState = 0;
 800549a:	4b3c      	ldr	r3, [pc, #240]	; (800558c <ChessMoveStateMachine+0x2fc>)
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80054a0:	4b3d      	ldr	r3, [pc, #244]	; (8005598 <ChessMoveStateMachine+0x308>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f040 8174 	bne.w	8005792 <ChessMoveStateMachine+0x502>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 80054aa:	f000 f99b 	bl	80057e4 <All_Joint_Speed_Avg>
 80054ae:	eeb0 6b40 	vmov.f64	d6, d0
 80054b2:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80054b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80054ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054be:	da00      	bge.n	80054c2 <ChessMoveStateMachine+0x232>
						90.0f - Control[0].PositionFeedback	+ Chess_Board_Base_Encoder);
				ChessMoveStates = Move_2_End_Ungrip_Point;
				ChangeState = 1;
			}
		}
		break;
 80054c0:	e167      	b.n	8005792 <ChessMoveStateMachine+0x502>
						90.0f - Control[0].PositionFeedback	+ Chess_Board_Base_Encoder);
 80054c2:	4b36      	ldr	r3, [pc, #216]	; (800559c <ChessMoveStateMachine+0x30c>)
 80054c4:	ed93 7b14 	vldr	d7, [r3, #80]	; 0x50
 80054c8:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8005570 <ChessMoveStateMachine+0x2e0>
 80054cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80054d0:	4b33      	ldr	r3, [pc, #204]	; (80055a0 <ChessMoveStateMachine+0x310>)
 80054d2:	ed93 7b00 	vldr	d7, [r3]
 80054d6:	ee36 7b07 	vadd.f64	d7, d6, d7
				Servo_Drive(&Servo[1],
 80054da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80054de:	edc7 7a01 	vstr	s15, [r7, #4]
 80054e2:	793b      	ldrb	r3, [r7, #4]
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	4619      	mov	r1, r3
 80054e8:	4827      	ldr	r0, [pc, #156]	; (8005588 <ChessMoveStateMachine+0x2f8>)
 80054ea:	f7fb fe5b 	bl	80011a4 <Servo_Drive>
				ChessMoveStates = Move_2_End_Ungrip_Point;
 80054ee:	4b23      	ldr	r3, [pc, #140]	; (800557c <ChessMoveStateMachine+0x2ec>)
 80054f0:	2206      	movs	r2, #6
 80054f2:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 80054f4:	4b25      	ldr	r3, [pc, #148]	; (800558c <ChessMoveStateMachine+0x2fc>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	701a      	strb	r2, [r3, #0]
		break;
 80054fa:	e14a      	b.n	8005792 <ChessMoveStateMachine+0x502>
	case Move_2_End_Ungrip_Point:
		if (ChangeState) {
 80054fc:	4b23      	ldr	r3, [pc, #140]	; (800558c <ChessMoveStateMachine+0x2fc>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00e      	beq.n	8005522 <ChessMoveStateMachine+0x292>
			ChessNotMovePathWay(ChessIndex[1], Z_2GripOffset, 0, 1);
 8005504:	4b22      	ldr	r3, [pc, #136]	; (8005590 <ChessMoveStateMachine+0x300>)
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	4a26      	ldr	r2, [pc, #152]	; (80055a4 <ChessMoveStateMachine+0x314>)
 800550a:	ed92 7b00 	vldr	d7, [r2]
 800550e:	2201      	movs	r2, #1
 8005510:	2100      	movs	r1, #0
 8005512:	eeb0 0b47 	vmov.f64	d0, d7
 8005516:	4618      	mov	r0, r3
 8005518:	f7ff fcaa 	bl	8004e70 <ChessNotMovePathWay>
			ChangeState = 0;
 800551c:	4b1b      	ldr	r3, [pc, #108]	; (800558c <ChessMoveStateMachine+0x2fc>)
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8005522:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <ChessMoveStateMachine+0x308>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	f040 8135 	bne.w	8005796 <ChessMoveStateMachine+0x506>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 800552c:	f000 f95a 	bl	80057e4 <All_Joint_Speed_Avg>
 8005530:	eeb0 6b40 	vmov.f64	d6, d0
 8005534:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8005538:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800553c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005540:	da00      	bge.n	8005544 <ChessMoveStateMachine+0x2b4>
					ChessMoveStates = Move_2_End_Point_and_Ungriping;
					ChangeState = 1;
				}
			}
		}
		break;
 8005542:	e128      	b.n	8005796 <ChessMoveStateMachine+0x506>
				if (ChessIndex[1] == 64) {
 8005544:	4b12      	ldr	r3, [pc, #72]	; (8005590 <ChessMoveStateMachine+0x300>)
 8005546:	785b      	ldrb	r3, [r3, #1]
 8005548:	2b40      	cmp	r3, #64	; 0x40
 800554a:	d106      	bne.n	800555a <ChessMoveStateMachine+0x2ca>
					ChessMoveStates = Move_2_End_Remove_Point_and_Ungriping;
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <ChessMoveStateMachine+0x2ec>)
 800554e:	2207      	movs	r2, #7
 8005550:	701a      	strb	r2, [r3, #0]
					ChangeState = 1;
 8005552:	4b0e      	ldr	r3, [pc, #56]	; (800558c <ChessMoveStateMachine+0x2fc>)
 8005554:	2201      	movs	r2, #1
 8005556:	701a      	strb	r2, [r3, #0]
		break;
 8005558:	e11d      	b.n	8005796 <ChessMoveStateMachine+0x506>
					ChessMoveStates = Move_2_End_Point_and_Ungriping;
 800555a:	4b08      	ldr	r3, [pc, #32]	; (800557c <ChessMoveStateMachine+0x2ec>)
 800555c:	2208      	movs	r2, #8
 800555e:	701a      	strb	r2, [r3, #0]
					ChangeState = 1;
 8005560:	4b0a      	ldr	r3, [pc, #40]	; (800558c <ChessMoveStateMachine+0x2fc>)
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
		break;
 8005566:	e116      	b.n	8005796 <ChessMoveStateMachine+0x506>
 8005568:	cccccccd 	.word	0xcccccccd
 800556c:	3ff4cccc 	.word	0x3ff4cccc
 8005570:	00000000 	.word	0x00000000
 8005574:	40568000 	.word	0x40568000
 8005578:	08018400 	.word	0x08018400
 800557c:	20000be1 	.word	0x20000be1
 8005580:	58020c00 	.word	0x58020c00
 8005584:	20000be0 	.word	0x20000be0
 8005588:	20000860 	.word	0x20000860
 800558c:	20000c38 	.word	0x20000c38
 8005590:	20000bd8 	.word	0x20000bd8
 8005594:	20000000 	.word	0x20000000
 8005598:	20000bc9 	.word	0x20000bc9
 800559c:	200004a8 	.word	0x200004a8
 80055a0:	20000b58 	.word	0x20000b58
 80055a4:	20000008 	.word	0x20000008
 80055a8:	20000858 	.word	0x20000858
 80055ac:	9999999a 	.word	0x9999999a
 80055b0:	3fa99999 	.word	0x3fa99999
	case Move_2_End_Remove_Point_and_Ungriping:
		if (ChangeState) {
 80055b4:	4b82      	ldr	r3, [pc, #520]	; (80057c0 <ChessMoveStateMachine+0x530>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00e      	beq.n	80055da <ChessMoveStateMachine+0x34a>
			ChessNotMovePathWay(ChessIndex[1], Z_2GripOffset, 0, 2);
 80055bc:	4b81      	ldr	r3, [pc, #516]	; (80057c4 <ChessMoveStateMachine+0x534>)
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	4a81      	ldr	r2, [pc, #516]	; (80057c8 <ChessMoveStateMachine+0x538>)
 80055c2:	ed92 7b00 	vldr	d7, [r2]
 80055c6:	2202      	movs	r2, #2
 80055c8:	2100      	movs	r1, #0
 80055ca:	eeb0 0b47 	vmov.f64	d0, d7
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fc4e 	bl	8004e70 <ChessNotMovePathWay>
			ChangeState = 0;
 80055d4:	4b7a      	ldr	r3, [pc, #488]	; (80057c0 <ChessMoveStateMachine+0x530>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 80055da:	4b7c      	ldr	r3, [pc, #496]	; (80057cc <ChessMoveStateMachine+0x53c>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 80db 	bne.w	800579a <ChessMoveStateMachine+0x50a>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 80055e4:	f000 f8fe 	bl	80057e4 <All_Joint_Speed_Avg>
 80055e8:	eeb0 6b40 	vmov.f64	d6, d0
 80055ec:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80055f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80055f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055f8:	da00      	bge.n	80055fc <ChessMoveStateMachine+0x36c>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
				ChangeState = 1;
			}
		}
		break;
 80055fa:	e0ce      	b.n	800579a <ChessMoveStateMachine+0x50a>
				ChessMoveStates = Move_2_End_Point_and_Ungriping;
 80055fc:	4b74      	ldr	r3, [pc, #464]	; (80057d0 <ChessMoveStateMachine+0x540>)
 80055fe:	2208      	movs	r2, #8
 8005600:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8005602:	4b6f      	ldr	r3, [pc, #444]	; (80057c0 <ChessMoveStateMachine+0x530>)
 8005604:	2201      	movs	r2, #1
 8005606:	701a      	strb	r2, [r3, #0]
		break;
 8005608:	e0c7      	b.n	800579a <ChessMoveStateMachine+0x50a>
	case Move_2_End_Point_and_Ungriping:
		Servo_Drive(&Servo[0], 110); //Ungrip
 800560a:	216e      	movs	r1, #110	; 0x6e
 800560c:	4871      	ldr	r0, [pc, #452]	; (80057d4 <ChessMoveStateMachine+0x544>)
 800560e:	f7fb fdc9 	bl	80011a4 <Servo_Drive>
		ChessMoveStates = Back_2_End_Top_Point;
 8005612:	4b6f      	ldr	r3, [pc, #444]	; (80057d0 <ChessMoveStateMachine+0x540>)
 8005614:	2209      	movs	r2, #9
 8005616:	701a      	strb	r2, [r3, #0]
		ChangeState = 1;
 8005618:	4b69      	ldr	r3, [pc, #420]	; (80057c0 <ChessMoveStateMachine+0x530>)
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
		break;
 800561e:	e0c1      	b.n	80057a4 <ChessMoveStateMachine+0x514>
	case Back_2_End_Top_Point:
		if (ChangeState) {
 8005620:	4b67      	ldr	r3, [pc, #412]	; (80057c0 <ChessMoveStateMachine+0x530>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00e      	beq.n	8005646 <ChessMoveStateMachine+0x3b6>
			ChessNotMovePathWay(ChessIndex[1], Z_TopOffset, 0, 1);
 8005628:	4b66      	ldr	r3, [pc, #408]	; (80057c4 <ChessMoveStateMachine+0x534>)
 800562a:	785b      	ldrb	r3, [r3, #1]
 800562c:	4a6a      	ldr	r2, [pc, #424]	; (80057d8 <ChessMoveStateMachine+0x548>)
 800562e:	ed92 7b00 	vldr	d7, [r2]
 8005632:	2201      	movs	r2, #1
 8005634:	2100      	movs	r1, #0
 8005636:	eeb0 0b47 	vmov.f64	d0, d7
 800563a:	4618      	mov	r0, r3
 800563c:	f7ff fc18 	bl	8004e70 <ChessNotMovePathWay>
			ChangeState = 0;
 8005640:	4b5f      	ldr	r3, [pc, #380]	; (80057c0 <ChessMoveStateMachine+0x530>)
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 8005646:	4b61      	ldr	r3, [pc, #388]	; (80057cc <ChessMoveStateMachine+0x53c>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	f040 80a7 	bne.w	800579e <ChessMoveStateMachine+0x50e>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8005650:	f000 f8c8 	bl	80057e4 <All_Joint_Speed_Avg>
 8005654:	eeb0 6b40 	vmov.f64	d6, d0
 8005658:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800565c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005664:	da00      	bge.n	8005668 <ChessMoveStateMachine+0x3d8>
				ChessMoveStates = ChessMove_Finish;
				ChangeState = 1;
			}
		}
		break;
 8005666:	e09a      	b.n	800579e <ChessMoveStateMachine+0x50e>
				ChessMoveStates = ChessMove_Finish;
 8005668:	4b59      	ldr	r3, [pc, #356]	; (80057d0 <ChessMoveStateMachine+0x540>)
 800566a:	220a      	movs	r2, #10
 800566c:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 800566e:	4b54      	ldr	r3, [pc, #336]	; (80057c0 <ChessMoveStateMachine+0x530>)
 8005670:	2201      	movs	r2, #1
 8005672:	701a      	strb	r2, [r3, #0]
		break;
 8005674:	e093      	b.n	800579e <ChessMoveStateMachine+0x50e>
	case ChessMove_Finish:
		if (ChangeState) {
 8005676:	4b52      	ldr	r3, [pc, #328]	; (80057c0 <ChessMoveStateMachine+0x530>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d065      	beq.n	800574a <ChessMoveStateMachine+0x4ba>
			q_Feed[0] = Control[0].PositionFeedback;
 800567e:	4b57      	ldr	r3, [pc, #348]	; (80057dc <ChessMoveStateMachine+0x54c>)
 8005680:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8005684:	e9c7 2308 	strd	r2, r3, [r7, #32]
			q_Feed[1] = Control[1].PositionFeedback;
 8005688:	4b54      	ldr	r3, [pc, #336]	; (80057dc <ChessMoveStateMachine+0x54c>)
 800568a:	e9d3 234a 	ldrd	r2, r3, [r3, #296]	; 0x128
 800568e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			q_Feed[2] = Control[2].PositionFeedback;
 8005692:	4b52      	ldr	r3, [pc, #328]	; (80057dc <ChessMoveStateMachine+0x54c>)
 8005694:	e9d3 2380 	ldrd	r2, r3, [r3, #512]	; 0x200
 8005698:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			q_Feed[3] = Control[3].PositionFeedback;
 800569c:	4b4f      	ldr	r3, [pc, #316]	; (80057dc <ChessMoveStateMachine+0x54c>)
 800569e:	e9d3 23b6 	ldrd	r2, r3, [r3, #728]	; 0x2d8
 80056a2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
			FPK(q_Feed, 269.0f, Pne);
 80056a6:	f107 0208 	add.w	r2, r7, #8
 80056aa:	f107 0320 	add.w	r3, r7, #32
 80056ae:	4611      	mov	r1, r2
 80056b0:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 80057b0 <ChessMoveStateMachine+0x520>
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fd f8af 	bl	8002818 <FPK>
			Time2MoveDynamic +=
					(sqrt(
							((SafePose[0] - Pne[0]) * (SafePose[0] - Pne[0]))
 80056ba:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
 80056be:	ed97 7b02 	vldr	d7, [r7, #8]
 80056c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80056c6:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
 80056ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80056ce:	ee35 7b47 	vsub.f64	d7, d5, d7
 80056d2:	ee26 6b07 	vmul.f64	d6, d6, d7
									+ ((SafePose[1] - Pne[1])
 80056d6:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
 80056da:	ed97 7b04 	vldr	d7, [r7, #16]
 80056de:	ee35 5b47 	vsub.f64	d5, d5, d7
											* (SafePose[1] - Pne[1]))
 80056e2:	ed97 4b12 	vldr	d4, [r7, #72]	; 0x48
 80056e6:	ed97 7b04 	vldr	d7, [r7, #16]
 80056ea:	ee34 7b47 	vsub.f64	d7, d4, d7
 80056ee:	ee25 7b07 	vmul.f64	d7, d5, d7
									+ ((SafePose[1] - Pne[1])
 80056f2:	ee36 6b07 	vadd.f64	d6, d6, d7
									+ ((SafePose[2] - Pne[2])
 80056f6:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
 80056fa:	ed97 7b06 	vldr	d7, [r7, #24]
 80056fe:	ee35 5b47 	vsub.f64	d5, d5, d7
											* (SafePose[2] - Pne[2]))))
 8005702:	ed97 4b14 	vldr	d4, [r7, #80]	; 0x50
 8005706:	ed97 7b06 	vldr	d7, [r7, #24]
 800570a:	ee34 7b47 	vsub.f64	d7, d4, d7
 800570e:	ee25 7b07 	vmul.f64	d7, d5, d7
					(sqrt(
 8005712:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005716:	eeb0 0b47 	vmov.f64	d0, d7
 800571a:	f011 fead 	bl	8017478 <sqrt>
 800571e:	eeb0 7b40 	vmov.f64	d7, d0
							* 0.0075;
 8005722:	ed9f 6b25 	vldr	d6, [pc, #148]	; 80057b8 <ChessMoveStateMachine+0x528>
 8005726:	ee27 7b06 	vmul.f64	d7, d7, d6
			Time2MoveDynamic +=
 800572a:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800572e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005732:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
			JMoveTaskSpace(SafePose, Time2MoveDynamic);
 8005736:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800573a:	ed97 0b16 	vldr	d0, [r7, #88]	; 0x58
 800573e:	4618      	mov	r0, r3
 8005740:	f7ff fb26 	bl	8004d90 <JMoveTaskSpace>
			ChangeState = 0;
 8005744:	4b1e      	ldr	r3, [pc, #120]	; (80057c0 <ChessMoveStateMachine+0x530>)
 8005746:	2200      	movs	r2, #0
 8005748:	701a      	strb	r2, [r3, #0]
		}
		if (!Traj_Flag) {
 800574a:	4b20      	ldr	r3, [pc, #128]	; (80057cc <ChessMoveStateMachine+0x53c>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d127      	bne.n	80057a2 <ChessMoveStateMachine+0x512>
			if (All_Joint_Speed_Avg() <= Speed_Error) {
 8005752:	f000 f847 	bl	80057e4 <All_Joint_Speed_Avg>
 8005756:	eeb0 6b40 	vmov.f64	d6, d0
 800575a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800575e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8005762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005766:	da00      	bge.n	800576a <ChessMoveStateMachine+0x4da>
				ChessMoveStates = Chess_idle;
				Chess_Move_Start_Flag = 0;
				ChangeState = 1;
			}
		}
		break;
 8005768:	e01b      	b.n	80057a2 <ChessMoveStateMachine+0x512>
				ChessMoveStates = Chess_idle;
 800576a:	4b19      	ldr	r3, [pc, #100]	; (80057d0 <ChessMoveStateMachine+0x540>)
 800576c:	2200      	movs	r2, #0
 800576e:	701a      	strb	r2, [r3, #0]
				Chess_Move_Start_Flag = 0;
 8005770:	4b1b      	ldr	r3, [pc, #108]	; (80057e0 <ChessMoveStateMachine+0x550>)
 8005772:	2200      	movs	r2, #0
 8005774:	701a      	strb	r2, [r3, #0]
				ChangeState = 1;
 8005776:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <ChessMoveStateMachine+0x530>)
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]
		break;
 800577c:	e011      	b.n	80057a2 <ChessMoveStateMachine+0x512>
	default:
		break;
 800577e:	bf00      	nop
 8005780:	e010      	b.n	80057a4 <ChessMoveStateMachine+0x514>
		break;
 8005782:	bf00      	nop
 8005784:	e00e      	b.n	80057a4 <ChessMoveStateMachine+0x514>
		break;
 8005786:	bf00      	nop
 8005788:	e00c      	b.n	80057a4 <ChessMoveStateMachine+0x514>
		break;
 800578a:	bf00      	nop
 800578c:	e00a      	b.n	80057a4 <ChessMoveStateMachine+0x514>
		break;
 800578e:	bf00      	nop
 8005790:	e008      	b.n	80057a4 <ChessMoveStateMachine+0x514>
		break;
 8005792:	bf00      	nop
 8005794:	e006      	b.n	80057a4 <ChessMoveStateMachine+0x514>
		break;
 8005796:	bf00      	nop
 8005798:	e004      	b.n	80057a4 <ChessMoveStateMachine+0x514>
		break;
 800579a:	bf00      	nop
 800579c:	e002      	b.n	80057a4 <ChessMoveStateMachine+0x514>
		break;
 800579e:	bf00      	nop
 80057a0:	e000      	b.n	80057a4 <ChessMoveStateMachine+0x514>
		break;
 80057a2:	bf00      	nop
	}
}
 80057a4:	bf00      	nop
 80057a6:	3768      	adds	r7, #104	; 0x68
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bdb0      	pop	{r4, r5, r7, pc}
 80057ac:	f3af 8000 	nop.w
 80057b0:	00000000 	.word	0x00000000
 80057b4:	4070d000 	.word	0x4070d000
 80057b8:	eb851eb8 	.word	0xeb851eb8
 80057bc:	3f7eb851 	.word	0x3f7eb851
 80057c0:	20000c38 	.word	0x20000c38
 80057c4:	20000bd8 	.word	0x20000bd8
 80057c8:	20000008 	.word	0x20000008
 80057cc:	20000bc9 	.word	0x20000bc9
 80057d0:	20000be1 	.word	0x20000be1
 80057d4:	20000858 	.word	0x20000858
 80057d8:	20000000 	.word	0x20000000
 80057dc:	200004a8 	.word	0x200004a8
 80057e0:	20000be0 	.word	0x20000be0

080057e4 <All_Joint_Speed_Avg>:

double All_Joint_Speed_Avg(){
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
	double Buf;
	for (int i=4;i<4;i++){
 80057ea:	2304      	movs	r3, #4
 80057ec:	607b      	str	r3, [r7, #4]
 80057ee:	e013      	b.n	8005818 <All_Joint_Speed_Avg+0x34>
		Buf += fabs(Control[i].VelocityFeedback);
 80057f0:	4a12      	ldr	r2, [pc, #72]	; (800583c <All_Joint_Speed_Avg+0x58>)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	21d8      	movs	r1, #216	; 0xd8
 80057f6:	fb01 f303 	mul.w	r3, r1, r3
 80057fa:	4413      	add	r3, r2
 80057fc:	33b8      	adds	r3, #184	; 0xb8
 80057fe:	ed93 7b00 	vldr	d7, [r3]
 8005802:	eeb0 7bc7 	vabs.f64	d7, d7
 8005806:	ed97 6b02 	vldr	d6, [r7, #8]
 800580a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800580e:	ed87 7b02 	vstr	d7, [r7, #8]
	for (int i=4;i<4;i++){
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	3301      	adds	r3, #1
 8005816:	607b      	str	r3, [r7, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b03      	cmp	r3, #3
 800581c:	dde8      	ble.n	80057f0 <All_Joint_Speed_Avg+0xc>
	}
	return Buf/4.0f;
 800581e:	ed97 7b02 	vldr	d7, [r7, #8]
 8005822:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8005826:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800582a:	eeb0 7b45 	vmov.f64	d7, d5
}
 800582e:	eeb0 0b47 	vmov.f64	d0, d7
 8005832:	3714      	adds	r7, #20
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	200004a8 	.word	0x200004a8

08005840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005844:	b672      	cpsid	i
}
 8005846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 8005848:	2200      	movs	r2, #0
 800584a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800584e:	4802      	ldr	r0, [pc, #8]	; (8005858 <Error_Handler+0x18>)
 8005850:	f007 faf6 	bl	800ce40 <HAL_GPIO_WritePin>
  while (1)
 8005854:	e7fe      	b.n	8005854 <Error_Handler+0x14>
 8005856:	bf00      	nop
 8005858:	58020800 	.word	0x58020800

0800585c <MX_SPI3_Init>:
SPI_HandleTypeDef hspi3;
SPI_HandleTypeDef hspi4;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8005860:	4b28      	ldr	r3, [pc, #160]	; (8005904 <MX_SPI3_Init+0xa8>)
 8005862:	4a29      	ldr	r2, [pc, #164]	; (8005908 <MX_SPI3_Init+0xac>)
 8005864:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8005866:	4b27      	ldr	r3, [pc, #156]	; (8005904 <MX_SPI3_Init+0xa8>)
 8005868:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800586c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800586e:	4b25      	ldr	r3, [pc, #148]	; (8005904 <MX_SPI3_Init+0xa8>)
 8005870:	2200      	movs	r2, #0
 8005872:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8005874:	4b23      	ldr	r3, [pc, #140]	; (8005904 <MX_SPI3_Init+0xa8>)
 8005876:	2207      	movs	r2, #7
 8005878:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800587a:	4b22      	ldr	r3, [pc, #136]	; (8005904 <MX_SPI3_Init+0xa8>)
 800587c:	2200      	movs	r2, #0
 800587e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005880:	4b20      	ldr	r3, [pc, #128]	; (8005904 <MX_SPI3_Init+0xa8>)
 8005882:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005886:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8005888:	4b1e      	ldr	r3, [pc, #120]	; (8005904 <MX_SPI3_Init+0xa8>)
 800588a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800588e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8005890:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <MX_SPI3_Init+0xa8>)
 8005892:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8005896:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005898:	4b1a      	ldr	r3, [pc, #104]	; (8005904 <MX_SPI3_Init+0xa8>)
 800589a:	2200      	movs	r2, #0
 800589c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800589e:	4b19      	ldr	r3, [pc, #100]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a4:	4b17      	ldr	r3, [pc, #92]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 80058aa:	4b16      	ldr	r3, [pc, #88]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058ac:	221d      	movs	r2, #29
 80058ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80058b0:	4b14      	ldr	r3, [pc, #80]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80058b6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80058b8:	4b12      	ldr	r3, [pc, #72]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80058be:	4b11      	ldr	r3, [pc, #68]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80058c4:	4b0f      	ldr	r3, [pc, #60]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80058d0:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80058d6:	4b0b      	ldr	r3, [pc, #44]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058d8:	2200      	movs	r2, #0
 80058da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80058dc:	4b09      	ldr	r3, [pc, #36]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058de:	2200      	movs	r2, #0
 80058e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80058e2:	4b08      	ldr	r3, [pc, #32]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80058ee:	4805      	ldr	r0, [pc, #20]	; (8005904 <MX_SPI3_Init+0xa8>)
 80058f0:	f00b feb4 	bl	801165c <HAL_SPI_Init>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80058fa:	f7ff ffa1 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80058fe:	bf00      	nop
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000c3c 	.word	0x20000c3c
 8005908:	40003c00 	.word	0x40003c00

0800590c <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8005910:	4b27      	ldr	r3, [pc, #156]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005912:	4a28      	ldr	r2, [pc, #160]	; (80059b4 <MX_SPI4_Init+0xa8>)
 8005914:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8005916:	4b26      	ldr	r3, [pc, #152]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005918:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800591c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800591e:	4b24      	ldr	r3, [pc, #144]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005920:	2200      	movs	r2, #0
 8005922:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8005924:	4b22      	ldr	r3, [pc, #136]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005926:	220f      	movs	r2, #15
 8005928:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800592a:	4b21      	ldr	r3, [pc, #132]	; (80059b0 <MX_SPI4_Init+0xa4>)
 800592c:	2200      	movs	r2, #0
 800592e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005930:	4b1f      	ldr	r3, [pc, #124]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005932:	2200      	movs	r2, #0
 8005934:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8005936:	4b1e      	ldr	r3, [pc, #120]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005938:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800593c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800593e:	4b1c      	ldr	r3, [pc, #112]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005940:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005944:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005946:	4b1a      	ldr	r3, [pc, #104]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005948:	2200      	movs	r2, #0
 800594a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800594c:	4b18      	ldr	r3, [pc, #96]	; (80059b0 <MX_SPI4_Init+0xa4>)
 800594e:	2200      	movs	r2, #0
 8005950:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005952:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005954:	2200      	movs	r2, #0
 8005956:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8005958:	4b15      	ldr	r3, [pc, #84]	; (80059b0 <MX_SPI4_Init+0xa4>)
 800595a:	2200      	movs	r2, #0
 800595c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800595e:	4b14      	ldr	r3, [pc, #80]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005960:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005964:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8005966:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005968:	2200      	movs	r2, #0
 800596a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800596c:	4b10      	ldr	r3, [pc, #64]	; (80059b0 <MX_SPI4_Init+0xa4>)
 800596e:	2200      	movs	r2, #0
 8005970:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005972:	4b0f      	ldr	r3, [pc, #60]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005974:	2200      	movs	r2, #0
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8005978:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <MX_SPI4_Init+0xa4>)
 800597a:	2200      	movs	r2, #0
 800597c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800597e:	4b0c      	ldr	r3, [pc, #48]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005980:	2200      	movs	r2, #0
 8005982:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8005984:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005986:	2200      	movs	r2, #0
 8005988:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800598a:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <MX_SPI4_Init+0xa4>)
 800598c:	2200      	movs	r2, #0
 800598e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005992:	2200      	movs	r2, #0
 8005994:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8005996:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <MX_SPI4_Init+0xa4>)
 8005998:	2200      	movs	r2, #0
 800599a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800599c:	4804      	ldr	r0, [pc, #16]	; (80059b0 <MX_SPI4_Init+0xa4>)
 800599e:	f00b fe5d 	bl	801165c <HAL_SPI_Init>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 80059a8:	f7ff ff4a 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80059ac:	bf00      	nop
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20000cc4 	.word	0x20000cc4
 80059b4:	40013400 	.word	0x40013400

080059b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b0b8      	sub	sp, #224	; 0xe0
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80059c4:	2200      	movs	r2, #0
 80059c6:	601a      	str	r2, [r3, #0]
 80059c8:	605a      	str	r2, [r3, #4]
 80059ca:	609a      	str	r2, [r3, #8]
 80059cc:	60da      	str	r2, [r3, #12]
 80059ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80059d0:	f107 0318 	add.w	r3, r7, #24
 80059d4:	22b4      	movs	r2, #180	; 0xb4
 80059d6:	2100      	movs	r1, #0
 80059d8:	4618      	mov	r0, r3
 80059da:	f011 fca9 	bl	8017330 <memset>
  if(spiHandle->Instance==SPI3)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a4b      	ldr	r2, [pc, #300]	; (8005b10 <HAL_SPI_MspInit+0x158>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d156      	bne.n	8005a96 <HAL_SPI_MspInit+0xde>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80059e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 80059ee:	2319      	movs	r3, #25
 80059f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 80059f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80059f6:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80059f8:	2302      	movs	r3, #2
 80059fa:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80059fc:	2302      	movs	r3, #2
 80059fe:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8005a00:	2302      	movs	r3, #2
 8005a02:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8005a04:	2300      	movs	r3, #0
 8005a06:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8005a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a0c:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8005a12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a16:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005a18:	f107 0318 	add.w	r3, r7, #24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f009 fd89 	bl	800f534 <HAL_RCCEx_PeriphCLKConfig>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8005a28:	f7ff ff0a 	bl	8005840 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005a2c:	4b39      	ldr	r3, [pc, #228]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005a2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a32:	4a38      	ldr	r2, [pc, #224]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a38:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005a3c:	4b35      	ldr	r3, [pc, #212]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005a3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a46:	617b      	str	r3, [r7, #20]
 8005a48:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a4a:	4b32      	ldr	r3, [pc, #200]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a50:	4a30      	ldr	r2, [pc, #192]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005a52:	f043 0304 	orr.w	r3, r3, #4
 8005a56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a5a:	4b2e      	ldr	r3, [pc, #184]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005a68:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a70:	2302      	movs	r3, #2
 8005a72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005a82:	2306      	movs	r3, #6
 8005a84:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a88:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4822      	ldr	r0, [pc, #136]	; (8005b18 <HAL_SPI_MspInit+0x160>)
 8005a90:	f007 f82e 	bl	800caf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8005a94:	e038      	b.n	8005b08 <HAL_SPI_MspInit+0x150>
  else if(spiHandle->Instance==SPI4)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a20      	ldr	r2, [pc, #128]	; (8005b1c <HAL_SPI_MspInit+0x164>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d133      	bne.n	8005b08 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005aa0:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005aa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005aa6:	4a1b      	ldr	r2, [pc, #108]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005aa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005aac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005ab0:	4b18      	ldr	r3, [pc, #96]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aba:	60fb      	str	r3, [r7, #12]
 8005abc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005abe:	4b15      	ldr	r3, [pc, #84]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ac4:	4a13      	ldr	r2, [pc, #76]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005ac6:	f043 0310 	orr.w	r3, r3, #16
 8005aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ace:	4b11      	ldr	r3, [pc, #68]	; (8005b14 <HAL_SPI_MspInit+0x15c>)
 8005ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 8005adc:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8005ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ae4:	2302      	movs	r3, #2
 8005ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005af0:	2300      	movs	r3, #0
 8005af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005af6:	2305      	movs	r3, #5
 8005af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005afc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005b00:	4619      	mov	r1, r3
 8005b02:	4807      	ldr	r0, [pc, #28]	; (8005b20 <HAL_SPI_MspInit+0x168>)
 8005b04:	f006 fff4 	bl	800caf0 <HAL_GPIO_Init>
}
 8005b08:	bf00      	nop
 8005b0a:	37e0      	adds	r7, #224	; 0xe0
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40003c00 	.word	0x40003c00
 8005b14:	58024400 	.word	0x58024400
 8005b18:	58020800 	.word	0x58020800
 8005b1c:	40013400 	.word	0x40013400
 8005b20:	58021000 	.word	0x58021000

08005b24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b2a:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <HAL_MspInit+0x30>)
 8005b2c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b30:	4a08      	ldr	r2, [pc, #32]	; (8005b54 <HAL_MspInit+0x30>)
 8005b32:	f043 0302 	orr.w	r3, r3, #2
 8005b36:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <HAL_MspInit+0x30>)
 8005b3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	607b      	str	r3, [r7, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	58024400 	.word	0x58024400

08005b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005b5c:	e7fe      	b.n	8005b5c <NMI_Handler+0x4>

08005b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005b62:	e7fe      	b.n	8005b62 <HardFault_Handler+0x4>

08005b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005b68:	e7fe      	b.n	8005b68 <MemManage_Handler+0x4>

08005b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005b6e:	e7fe      	b.n	8005b6e <BusFault_Handler+0x4>

08005b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005b70:	b480      	push	{r7}
 8005b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005b74:	e7fe      	b.n	8005b74 <UsageFault_Handler+0x4>

08005b76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005b76:	b480      	push	{r7}
 8005b78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005b7a:	bf00      	nop
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005b88:	bf00      	nop
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005b92:	b480      	push	{r7}
 8005b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b96:	bf00      	nop
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ba4:	f001 fcbc 	bl	8007520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ba8:	bf00      	nop
 8005baa:	bd80      	pop	{r7, pc}

08005bac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8005bb0:	4802      	ldr	r0, [pc, #8]	; (8005bbc <DMA1_Stream0_IRQHandler+0x10>)
 8005bb2:	f005 fc7d 	bl	800b4b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005bb6:	bf00      	nop
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20001174 	.word	0x20001174

08005bc0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8005bc4:	4802      	ldr	r0, [pc, #8]	; (8005bd0 <DMA1_Stream1_IRQHandler+0x10>)
 8005bc6:	f005 fc73 	bl	800b4b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005bca:	bf00      	nop
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	20001414 	.word	0x20001414

08005bd4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005bd8:	4802      	ldr	r0, [pc, #8]	; (8005be4 <DMA1_Stream2_IRQHandler+0x10>)
 8005bda:	f005 fc69 	bl	800b4b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005bde:	bf00      	nop
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	2000139c 	.word	0x2000139c

08005be8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8005bec:	4802      	ldr	r0, [pc, #8]	; (8005bf8 <I2C2_ER_IRQHandler+0x10>)
 8005bee:	f007 fbd5 	bl	800d39c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8005bf2:	bf00      	nop
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	2000026c 	.word	0x2000026c

08005bfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005c00:	4802      	ldr	r0, [pc, #8]	; (8005c0c <USART3_IRQHandler+0x10>)
 8005c02:	f00e fe99 	bl	8014938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005c06:	bf00      	nop
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	2000130c 	.word	0x2000130c

08005c10 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005c14:	4802      	ldr	r0, [pc, #8]	; (8005c20 <UART5_IRQHandler+0x10>)
 8005c16:	f00e fe8f 	bl	8014938 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005c1a:	bf00      	nop
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	200011ec 	.word	0x200011ec

08005c24 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8005c28:	4802      	ldr	r0, [pc, #8]	; (8005c34 <ADC3_IRQHandler+0x10>)
 8005c2a:	f002 fae9 	bl	8008200 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8005c2e:	bf00      	nop
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	200001d4 	.word	0x200001d4

08005c38 <TIM23_IRQHandler>:

/**
  * @brief This function handles TIM23 global interrupt.
  */
void TIM23_IRQHandler(void)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM23_IRQn 0 */

  /* USER CODE END TIM23_IRQn 0 */
  HAL_TIM_IRQHandler(&htim23);
 8005c3c:	4802      	ldr	r0, [pc, #8]	; (8005c48 <TIM23_IRQHandler+0x10>)
 8005c3e:	f00d fb63 	bl	8013308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM23_IRQn 1 */

  /* USER CODE END TIM23_IRQn 1 */
}
 8005c42:	bf00      	nop
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	200010dc 	.word	0x200010dc

08005c4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005c50:	4b34      	ldr	r3, [pc, #208]	; (8005d24 <SystemInit+0xd8>)
 8005c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c56:	4a33      	ldr	r2, [pc, #204]	; (8005d24 <SystemInit+0xd8>)
 8005c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005c60:	4b31      	ldr	r3, [pc, #196]	; (8005d28 <SystemInit+0xdc>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	2b06      	cmp	r3, #6
 8005c6a:	d807      	bhi.n	8005c7c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005c6c:	4b2e      	ldr	r3, [pc, #184]	; (8005d28 <SystemInit+0xdc>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f023 030f 	bic.w	r3, r3, #15
 8005c74:	4a2c      	ldr	r2, [pc, #176]	; (8005d28 <SystemInit+0xdc>)
 8005c76:	f043 0307 	orr.w	r3, r3, #7
 8005c7a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005c7c:	4b2b      	ldr	r3, [pc, #172]	; (8005d2c <SystemInit+0xe0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2a      	ldr	r2, [pc, #168]	; (8005d2c <SystemInit+0xe0>)
 8005c82:	f043 0301 	orr.w	r3, r3, #1
 8005c86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c88:	4b28      	ldr	r3, [pc, #160]	; (8005d2c <SystemInit+0xe0>)
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005c8e:	4b27      	ldr	r3, [pc, #156]	; (8005d2c <SystemInit+0xe0>)
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	4926      	ldr	r1, [pc, #152]	; (8005d2c <SystemInit+0xe0>)
 8005c94:	4b26      	ldr	r3, [pc, #152]	; (8005d30 <SystemInit+0xe4>)
 8005c96:	4013      	ands	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005c9a:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <SystemInit+0xdc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0308 	and.w	r3, r3, #8
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d007      	beq.n	8005cb6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005ca6:	4b20      	ldr	r3, [pc, #128]	; (8005d28 <SystemInit+0xdc>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f023 030f 	bic.w	r3, r3, #15
 8005cae:	4a1e      	ldr	r2, [pc, #120]	; (8005d28 <SystemInit+0xdc>)
 8005cb0:	f043 0307 	orr.w	r3, r3, #7
 8005cb4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005cb6:	4b1d      	ldr	r3, [pc, #116]	; (8005d2c <SystemInit+0xe0>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005cbc:	4b1b      	ldr	r3, [pc, #108]	; (8005d2c <SystemInit+0xe0>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005cc2:	4b1a      	ldr	r3, [pc, #104]	; (8005d2c <SystemInit+0xe0>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005cc8:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <SystemInit+0xe0>)
 8005cca:	4a1a      	ldr	r2, [pc, #104]	; (8005d34 <SystemInit+0xe8>)
 8005ccc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005cce:	4b17      	ldr	r3, [pc, #92]	; (8005d2c <SystemInit+0xe0>)
 8005cd0:	4a19      	ldr	r2, [pc, #100]	; (8005d38 <SystemInit+0xec>)
 8005cd2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005cd4:	4b15      	ldr	r3, [pc, #84]	; (8005d2c <SystemInit+0xe0>)
 8005cd6:	4a19      	ldr	r2, [pc, #100]	; (8005d3c <SystemInit+0xf0>)
 8005cd8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005cda:	4b14      	ldr	r3, [pc, #80]	; (8005d2c <SystemInit+0xe0>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005ce0:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <SystemInit+0xe0>)
 8005ce2:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <SystemInit+0xf0>)
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005ce6:	4b11      	ldr	r3, [pc, #68]	; (8005d2c <SystemInit+0xe0>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005cec:	4b0f      	ldr	r3, [pc, #60]	; (8005d2c <SystemInit+0xe0>)
 8005cee:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <SystemInit+0xf0>)
 8005cf0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005cf2:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <SystemInit+0xe0>)
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005cf8:	4b0c      	ldr	r3, [pc, #48]	; (8005d2c <SystemInit+0xe0>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a0b      	ldr	r2, [pc, #44]	; (8005d2c <SystemInit+0xe0>)
 8005cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d02:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005d04:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <SystemInit+0xe0>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005d0a:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <SystemInit+0xf4>)
 8005d0c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005d10:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005d12:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <SystemInit+0xd8>)
 8005d14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005d18:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8005d1a:	bf00      	nop
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	e000ed00 	.word	0xe000ed00
 8005d28:	52002000 	.word	0x52002000
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	eaf6ed7f 	.word	0xeaf6ed7f
 8005d34:	02020200 	.word	0x02020200
 8005d38:	01ff0000 	.word	0x01ff0000
 8005d3c:	01010280 	.word	0x01010280
 8005d40:	52004000 	.word	0x52004000

08005d44 <MX_TIM1_Init>:
TIM_HandleTypeDef htim24;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b098      	sub	sp, #96	; 0x60
 8005d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005d4e:	2200      	movs	r2, #0
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	605a      	str	r2, [r3, #4]
 8005d54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	605a      	str	r2, [r3, #4]
 8005d60:	609a      	str	r2, [r3, #8]
 8005d62:	60da      	str	r2, [r3, #12]
 8005d64:	611a      	str	r2, [r3, #16]
 8005d66:	615a      	str	r2, [r3, #20]
 8005d68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005d6a:	1d3b      	adds	r3, r7, #4
 8005d6c:	2234      	movs	r2, #52	; 0x34
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f011 fadd 	bl	8017330 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005d76:	4b39      	ldr	r3, [pc, #228]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005d78:	4a39      	ldr	r2, [pc, #228]	; (8005e60 <MX_TIM1_Init+0x11c>)
 8005d7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005d7c:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d82:	4b36      	ldr	r3, [pc, #216]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 343;
 8005d88:	4b34      	ldr	r3, [pc, #208]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005d8a:	f240 1257 	movw	r2, #343	; 0x157
 8005d8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d90:	4b32      	ldr	r3, [pc, #200]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005d96:	4b31      	ldr	r3, [pc, #196]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d9c:	4b2f      	ldr	r3, [pc, #188]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005da2:	482e      	ldr	r0, [pc, #184]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005da4:	f00c fcdc 	bl	8012760 <HAL_TIM_PWM_Init>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8005dae:	f7ff fd47 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005db2:	2300      	movs	r3, #0
 8005db4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005db6:	2300      	movs	r3, #0
 8005db8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005dbe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4825      	ldr	r0, [pc, #148]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005dc6:	f00e fb0f 	bl	80143e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005dd0:	f7ff fd36 	bl	8005840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005dd4:	2360      	movs	r3, #96	; 0x60
 8005dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005de0:	2300      	movs	r3, #0
 8005de2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005de8:	2300      	movs	r3, #0
 8005dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005dec:	2300      	movs	r3, #0
 8005dee:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005df0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005df4:	2200      	movs	r2, #0
 8005df6:	4619      	mov	r1, r3
 8005df8:	4818      	ldr	r0, [pc, #96]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005dfa:	f00d fba5 	bl	8013548 <HAL_TIM_PWM_ConfigChannel>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005e04:	f7ff fd1c 	bl	8005840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e20:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005e26:	2300      	movs	r3, #0
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005e34:	2300      	movs	r3, #0
 8005e36:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005e38:	1d3b      	adds	r3, r7, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4807      	ldr	r0, [pc, #28]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005e3e:	f00e fb6f 	bl	8014520 <HAL_TIMEx_ConfigBreakDeadTime>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d001      	beq.n	8005e4c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8005e48:	f7ff fcfa 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005e4c:	4803      	ldr	r0, [pc, #12]	; (8005e5c <MX_TIM1_Init+0x118>)
 8005e4e:	f000 ff5d 	bl	8006d0c <HAL_TIM_MspPostInit>

}
 8005e52:	bf00      	nop
 8005e54:	3760      	adds	r7, #96	; 0x60
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000d4c 	.word	0x20000d4c
 8005e60:	40010000 	.word	0x40010000

08005e64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	; 0x30
 8005e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005e6a:	f107 030c 	add.w	r3, r7, #12
 8005e6e:	2224      	movs	r2, #36	; 0x24
 8005e70:	2100      	movs	r1, #0
 8005e72:	4618      	mov	r0, r3
 8005e74:	f011 fa5c 	bl	8017330 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e78:	463b      	mov	r3, r7
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
 8005e7e:	605a      	str	r2, [r3, #4]
 8005e80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005e82:	4b21      	ldr	r3, [pc, #132]	; (8005f08 <MX_TIM2_Init+0xa4>)
 8005e84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e88:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005e8a:	4b1f      	ldr	r3, [pc, #124]	; (8005f08 <MX_TIM2_Init+0xa4>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e90:	4b1d      	ldr	r3, [pc, #116]	; (8005f08 <MX_TIM2_Init+0xa4>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8005e96:	4b1c      	ldr	r3, [pc, #112]	; (8005f08 <MX_TIM2_Init+0xa4>)
 8005e98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005e9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e9e:	4b1a      	ldr	r3, [pc, #104]	; (8005f08 <MX_TIM2_Init+0xa4>)
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ea4:	4b18      	ldr	r3, [pc, #96]	; (8005f08 <MX_TIM2_Init+0xa4>)
 8005ea6:	2280      	movs	r2, #128	; 0x80
 8005ea8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8005eba:	230a      	movs	r3, #10
 8005ebc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8005eca:	230a      	movs	r3, #10
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8005ece:	f107 030c 	add.w	r3, r7, #12
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	480c      	ldr	r0, [pc, #48]	; (8005f08 <MX_TIM2_Init+0xa4>)
 8005ed6:	f00d f8e3 	bl	80130a0 <HAL_TIM_Encoder_Init>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d001      	beq.n	8005ee4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8005ee0:	f7ff fcae 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005eec:	463b      	mov	r3, r7
 8005eee:	4619      	mov	r1, r3
 8005ef0:	4805      	ldr	r0, [pc, #20]	; (8005f08 <MX_TIM2_Init+0xa4>)
 8005ef2:	f00e fa79 	bl	80143e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8005efc:	f7ff fca0 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005f00:	bf00      	nop
 8005f02:	3730      	adds	r7, #48	; 0x30
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20000d98 	.word	0x20000d98

08005f0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08e      	sub	sp, #56	; 0x38
 8005f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f16:	2200      	movs	r2, #0
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	605a      	str	r2, [r3, #4]
 8005f1c:	609a      	str	r2, [r3, #8]
 8005f1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f20:	f107 031c 	add.w	r3, r7, #28
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005f2c:	463b      	mov	r3, r7
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
 8005f32:	605a      	str	r2, [r3, #4]
 8005f34:	609a      	str	r2, [r3, #8]
 8005f36:	60da      	str	r2, [r3, #12]
 8005f38:	611a      	str	r2, [r3, #16]
 8005f3a:	615a      	str	r2, [r3, #20]
 8005f3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005f3e:	4b34      	ldr	r3, [pc, #208]	; (8006010 <MX_TIM3_Init+0x104>)
 8005f40:	4a34      	ldr	r2, [pc, #208]	; (8006014 <MX_TIM3_Init+0x108>)
 8005f42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 275-1;
 8005f44:	4b32      	ldr	r3, [pc, #200]	; (8006010 <MX_TIM3_Init+0x104>)
 8005f46:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005f4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f4c:	4b30      	ldr	r3, [pc, #192]	; (8006010 <MX_TIM3_Init+0x104>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8005f52:	4b2f      	ldr	r3, [pc, #188]	; (8006010 <MX_TIM3_Init+0x104>)
 8005f54:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005f58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f5a:	4b2d      	ldr	r3, [pc, #180]	; (8006010 <MX_TIM3_Init+0x104>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f60:	4b2b      	ldr	r3, [pc, #172]	; (8006010 <MX_TIM3_Init+0x104>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005f66:	482a      	ldr	r0, [pc, #168]	; (8006010 <MX_TIM3_Init+0x104>)
 8005f68:	f00c fb1d 	bl	80125a6 <HAL_TIM_Base_Init>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8005f72:	f7ff fc65 	bl	8005840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005f7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f80:	4619      	mov	r1, r3
 8005f82:	4823      	ldr	r0, [pc, #140]	; (8006010 <MX_TIM3_Init+0x104>)
 8005f84:	f00d fbf4 	bl	8013770 <HAL_TIM_ConfigClockSource>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8005f8e:	f7ff fc57 	bl	8005840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005f92:	481f      	ldr	r0, [pc, #124]	; (8006010 <MX_TIM3_Init+0x104>)
 8005f94:	f00c fbe4 	bl	8012760 <HAL_TIM_PWM_Init>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8005f9e:	f7ff fc4f 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005faa:	f107 031c 	add.w	r3, r7, #28
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4817      	ldr	r0, [pc, #92]	; (8006010 <MX_TIM3_Init+0x104>)
 8005fb2:	f00e fa19 	bl	80143e8 <HAL_TIMEx_MasterConfigSynchronization>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8005fbc:	f7ff fc40 	bl	8005840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005fc0:	2360      	movs	r3, #96	; 0x60
 8005fc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1999;
 8005fc4:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8005fc8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005fd2:	463b      	mov	r3, r7
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	480d      	ldr	r0, [pc, #52]	; (8006010 <MX_TIM3_Init+0x104>)
 8005fda:	f00d fab5 	bl	8013548 <HAL_TIM_PWM_ConfigChannel>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d001      	beq.n	8005fe8 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 8005fe4:	f7ff fc2c 	bl	8005840 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005fec:	463b      	mov	r3, r7
 8005fee:	2204      	movs	r2, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4807      	ldr	r0, [pc, #28]	; (8006010 <MX_TIM3_Init+0x104>)
 8005ff4:	f00d faa8 	bl	8013548 <HAL_TIM_PWM_ConfigChannel>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <MX_TIM3_Init+0xf6>
  {
    Error_Handler();
 8005ffe:	f7ff fc1f 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006002:	4803      	ldr	r0, [pc, #12]	; (8006010 <MX_TIM3_Init+0x104>)
 8006004:	f000 fe82 	bl	8006d0c <HAL_TIM_MspPostInit>

}
 8006008:	bf00      	nop
 800600a:	3738      	adds	r7, #56	; 0x38
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}
 8006010:	20000de4 	.word	0x20000de4
 8006014:	40000400 	.word	0x40000400

08006018 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08c      	sub	sp, #48	; 0x30
 800601c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800601e:	f107 030c 	add.w	r3, r7, #12
 8006022:	2224      	movs	r2, #36	; 0x24
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f011 f982 	bl	8017330 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800602c:	463b      	mov	r3, r7
 800602e:	2200      	movs	r2, #0
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	605a      	str	r2, [r3, #4]
 8006034:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8006036:	4b21      	ldr	r3, [pc, #132]	; (80060bc <MX_TIM4_Init+0xa4>)
 8006038:	4a21      	ldr	r2, [pc, #132]	; (80060c0 <MX_TIM4_Init+0xa8>)
 800603a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800603c:	4b1f      	ldr	r3, [pc, #124]	; (80060bc <MX_TIM4_Init+0xa4>)
 800603e:	2200      	movs	r2, #0
 8006040:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006042:	4b1e      	ldr	r3, [pc, #120]	; (80060bc <MX_TIM4_Init+0xa4>)
 8006044:	2200      	movs	r2, #0
 8006046:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8006048:	4b1c      	ldr	r3, [pc, #112]	; (80060bc <MX_TIM4_Init+0xa4>)
 800604a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800604e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006050:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <MX_TIM4_Init+0xa4>)
 8006052:	2200      	movs	r2, #0
 8006054:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006056:	4b19      	ldr	r3, [pc, #100]	; (80060bc <MX_TIM4_Init+0xa4>)
 8006058:	2280      	movs	r2, #128	; 0x80
 800605a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800605c:	2303      	movs	r3, #3
 800605e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006060:	2300      	movs	r3, #0
 8006062:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006064:	2301      	movs	r3, #1
 8006066:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800606c:	2300      	movs	r3, #0
 800606e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006070:	2300      	movs	r3, #0
 8006072:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006074:	2301      	movs	r3, #1
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006078:	2300      	movs	r3, #0
 800607a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800607c:	2300      	movs	r3, #0
 800607e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8006080:	f107 030c 	add.w	r3, r7, #12
 8006084:	4619      	mov	r1, r3
 8006086:	480d      	ldr	r0, [pc, #52]	; (80060bc <MX_TIM4_Init+0xa4>)
 8006088:	f00d f80a 	bl	80130a0 <HAL_TIM_Encoder_Init>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8006092:	f7ff fbd5 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006096:	2300      	movs	r3, #0
 8006098:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800609a:	2300      	movs	r3, #0
 800609c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800609e:	463b      	mov	r3, r7
 80060a0:	4619      	mov	r1, r3
 80060a2:	4806      	ldr	r0, [pc, #24]	; (80060bc <MX_TIM4_Init+0xa4>)
 80060a4:	f00e f9a0 	bl	80143e8 <HAL_TIMEx_MasterConfigSynchronization>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80060ae:	f7ff fbc7 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80060b2:	bf00      	nop
 80060b4:	3730      	adds	r7, #48	; 0x30
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000e30 	.word	0x20000e30
 80060c0:	40000800 	.word	0x40000800

080060c4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08e      	sub	sp, #56	; 0x38
 80060c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80060ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]
 80060d2:	605a      	str	r2, [r3, #4]
 80060d4:	609a      	str	r2, [r3, #8]
 80060d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80060d8:	f107 031c 	add.w	r3, r7, #28
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	605a      	str	r2, [r3, #4]
 80060e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80060e4:	463b      	mov	r3, r7
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	605a      	str	r2, [r3, #4]
 80060ec:	609a      	str	r2, [r3, #8]
 80060ee:	60da      	str	r2, [r3, #12]
 80060f0:	611a      	str	r2, [r3, #16]
 80060f2:	615a      	str	r2, [r3, #20]
 80060f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80060f6:	4b33      	ldr	r3, [pc, #204]	; (80061c4 <MX_TIM5_Init+0x100>)
 80060f8:	4a33      	ldr	r2, [pc, #204]	; (80061c8 <MX_TIM5_Init+0x104>)
 80060fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 275-1;
 80060fc:	4b31      	ldr	r3, [pc, #196]	; (80061c4 <MX_TIM5_Init+0x100>)
 80060fe:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006102:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006104:	4b2f      	ldr	r3, [pc, #188]	; (80061c4 <MX_TIM5_Init+0x100>)
 8006106:	2200      	movs	r2, #0
 8006108:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 800610a:	4b2e      	ldr	r3, [pc, #184]	; (80061c4 <MX_TIM5_Init+0x100>)
 800610c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8006110:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006112:	4b2c      	ldr	r3, [pc, #176]	; (80061c4 <MX_TIM5_Init+0x100>)
 8006114:	2200      	movs	r2, #0
 8006116:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006118:	4b2a      	ldr	r3, [pc, #168]	; (80061c4 <MX_TIM5_Init+0x100>)
 800611a:	2200      	movs	r2, #0
 800611c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800611e:	4829      	ldr	r0, [pc, #164]	; (80061c4 <MX_TIM5_Init+0x100>)
 8006120:	f00c fa41 	bl	80125a6 <HAL_TIM_Base_Init>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <MX_TIM5_Init+0x6a>
  {
    Error_Handler();
 800612a:	f7ff fb89 	bl	8005840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800612e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006132:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8006134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006138:	4619      	mov	r1, r3
 800613a:	4822      	ldr	r0, [pc, #136]	; (80061c4 <MX_TIM5_Init+0x100>)
 800613c:	f00d fb18 	bl	8013770 <HAL_TIM_ConfigClockSource>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <MX_TIM5_Init+0x86>
  {
    Error_Handler();
 8006146:	f7ff fb7b 	bl	8005840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800614a:	481e      	ldr	r0, [pc, #120]	; (80061c4 <MX_TIM5_Init+0x100>)
 800614c:	f00c fb08 	bl	8012760 <HAL_TIM_PWM_Init>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 8006156:	f7ff fb73 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800615a:	2300      	movs	r3, #0
 800615c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800615e:	2300      	movs	r3, #0
 8006160:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8006162:	f107 031c 	add.w	r3, r7, #28
 8006166:	4619      	mov	r1, r3
 8006168:	4816      	ldr	r0, [pc, #88]	; (80061c4 <MX_TIM5_Init+0x100>)
 800616a:	f00e f93d 	bl	80143e8 <HAL_TIMEx_MasterConfigSynchronization>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8006174:	f7ff fb64 	bl	8005840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006178:	2360      	movs	r3, #96	; 0x60
 800617a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500-1;
 800617c:	f240 53db 	movw	r3, #1499	; 0x5db
 8006180:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006186:	2300      	movs	r3, #0
 8006188:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800618a:	463b      	mov	r3, r7
 800618c:	2200      	movs	r2, #0
 800618e:	4619      	mov	r1, r3
 8006190:	480c      	ldr	r0, [pc, #48]	; (80061c4 <MX_TIM5_Init+0x100>)
 8006192:	f00d f9d9 	bl	8013548 <HAL_TIM_PWM_ConfigChannel>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <MX_TIM5_Init+0xdc>
  {
    Error_Handler();
 800619c:	f7ff fb50 	bl	8005840 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80061a0:	463b      	mov	r3, r7
 80061a2:	2204      	movs	r2, #4
 80061a4:	4619      	mov	r1, r3
 80061a6:	4807      	ldr	r0, [pc, #28]	; (80061c4 <MX_TIM5_Init+0x100>)
 80061a8:	f00d f9ce 	bl	8013548 <HAL_TIM_PWM_ConfigChannel>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <MX_TIM5_Init+0xf2>
  {
    Error_Handler();
 80061b2:	f7ff fb45 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80061b6:	4803      	ldr	r0, [pc, #12]	; (80061c4 <MX_TIM5_Init+0x100>)
 80061b8:	f000 fda8 	bl	8006d0c <HAL_TIM_MspPostInit>

}
 80061bc:	bf00      	nop
 80061be:	3738      	adds	r7, #56	; 0x38
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	20000e7c 	.word	0x20000e7c
 80061c8:	40000c00 	.word	0x40000c00

080061cc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061d2:	1d3b      	adds	r3, r7, #4
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	605a      	str	r2, [r3, #4]
 80061da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80061dc:	4b15      	ldr	r3, [pc, #84]	; (8006234 <MX_TIM6_Init+0x68>)
 80061de:	4a16      	ldr	r2, [pc, #88]	; (8006238 <MX_TIM6_Init+0x6c>)
 80061e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 80061e2:	4b14      	ldr	r3, [pc, #80]	; (8006234 <MX_TIM6_Init+0x68>)
 80061e4:	f44f 7289 	mov.w	r2, #274	; 0x112
 80061e8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061ea:	4b12      	ldr	r3, [pc, #72]	; (8006234 <MX_TIM6_Init+0x68>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80061f0:	4b10      	ldr	r3, [pc, #64]	; (8006234 <MX_TIM6_Init+0x68>)
 80061f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061f6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061f8:	4b0e      	ldr	r3, [pc, #56]	; (8006234 <MX_TIM6_Init+0x68>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80061fe:	480d      	ldr	r0, [pc, #52]	; (8006234 <MX_TIM6_Init+0x68>)
 8006200:	f00c f9d1 	bl	80125a6 <HAL_TIM_Base_Init>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800620a:	f7ff fb19 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800620e:	2300      	movs	r3, #0
 8006210:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006212:	2300      	movs	r3, #0
 8006214:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006216:	1d3b      	adds	r3, r7, #4
 8006218:	4619      	mov	r1, r3
 800621a:	4806      	ldr	r0, [pc, #24]	; (8006234 <MX_TIM6_Init+0x68>)
 800621c:	f00e f8e4 	bl	80143e8 <HAL_TIMEx_MasterConfigSynchronization>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d001      	beq.n	800622a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8006226:	f7ff fb0b 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800622a:	bf00      	nop
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	20000ec8 	.word	0x20000ec8
 8006238:	40001000 	.word	0x40001000

0800623c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b08c      	sub	sp, #48	; 0x30
 8006240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006242:	f107 030c 	add.w	r3, r7, #12
 8006246:	2224      	movs	r2, #36	; 0x24
 8006248:	2100      	movs	r1, #0
 800624a:	4618      	mov	r0, r3
 800624c:	f011 f870 	bl	8017330 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006250:	463b      	mov	r3, r7
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	605a      	str	r2, [r3, #4]
 8006258:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800625a:	4b23      	ldr	r3, [pc, #140]	; (80062e8 <MX_TIM8_Init+0xac>)
 800625c:	4a23      	ldr	r2, [pc, #140]	; (80062ec <MX_TIM8_Init+0xb0>)
 800625e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006260:	4b21      	ldr	r3, [pc, #132]	; (80062e8 <MX_TIM8_Init+0xac>)
 8006262:	2200      	movs	r2, #0
 8006264:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006266:	4b20      	ldr	r3, [pc, #128]	; (80062e8 <MX_TIM8_Init+0xac>)
 8006268:	2200      	movs	r2, #0
 800626a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 800626c:	4b1e      	ldr	r3, [pc, #120]	; (80062e8 <MX_TIM8_Init+0xac>)
 800626e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8006272:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006274:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <MX_TIM8_Init+0xac>)
 8006276:	2200      	movs	r2, #0
 8006278:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800627a:	4b1b      	ldr	r3, [pc, #108]	; (80062e8 <MX_TIM8_Init+0xac>)
 800627c:	2200      	movs	r2, #0
 800627e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006280:	4b19      	ldr	r3, [pc, #100]	; (80062e8 <MX_TIM8_Init+0xac>)
 8006282:	2280      	movs	r2, #128	; 0x80
 8006284:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006286:	2303      	movs	r3, #3
 8006288:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800628a:	2300      	movs	r3, #0
 800628c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800628e:	2301      	movs	r3, #1
 8006290:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006292:	2300      	movs	r3, #0
 8006294:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800629a:	2300      	movs	r3, #0
 800629c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800629e:	2301      	movs	r3, #1
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80062a2:	2300      	movs	r3, #0
 80062a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80062a6:	2300      	movs	r3, #0
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80062aa:	f107 030c 	add.w	r3, r7, #12
 80062ae:	4619      	mov	r1, r3
 80062b0:	480d      	ldr	r0, [pc, #52]	; (80062e8 <MX_TIM8_Init+0xac>)
 80062b2:	f00c fef5 	bl	80130a0 <HAL_TIM_Encoder_Init>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d001      	beq.n	80062c0 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80062bc:	f7ff fac0 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062c0:	2300      	movs	r3, #0
 80062c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80062c4:	2300      	movs	r3, #0
 80062c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80062cc:	463b      	mov	r3, r7
 80062ce:	4619      	mov	r1, r3
 80062d0:	4805      	ldr	r0, [pc, #20]	; (80062e8 <MX_TIM8_Init+0xac>)
 80062d2:	f00e f889 	bl	80143e8 <HAL_TIMEx_MasterConfigSynchronization>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80062dc:	f7ff fab0 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80062e0:	bf00      	nop
 80062e2:	3730      	adds	r7, #48	; 0x30
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	20000f14 	.word	0x20000f14
 80062ec:	40010400 	.word	0x40010400

080062f0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80062f6:	1d3b      	adds	r3, r7, #4
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	605a      	str	r2, [r3, #4]
 80062fe:	609a      	str	r2, [r3, #8]
 8006300:	60da      	str	r2, [r3, #12]
 8006302:	611a      	str	r2, [r3, #16]
 8006304:	615a      	str	r2, [r3, #20]
 8006306:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006308:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <MX_TIM13_Init+0x98>)
 800630a:	4a20      	ldr	r2, [pc, #128]	; (800638c <MX_TIM13_Init+0x9c>)
 800630c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 550-1;
 800630e:	4b1e      	ldr	r3, [pc, #120]	; (8006388 <MX_TIM13_Init+0x98>)
 8006310:	f240 2225 	movw	r2, #549	; 0x225
 8006314:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006316:	4b1c      	ldr	r3, [pc, #112]	; (8006388 <MX_TIM13_Init+0x98>)
 8006318:	2200      	movs	r2, #0
 800631a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 800631c:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <MX_TIM13_Init+0x98>)
 800631e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006322:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006324:	4b18      	ldr	r3, [pc, #96]	; (8006388 <MX_TIM13_Init+0x98>)
 8006326:	2200      	movs	r2, #0
 8006328:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800632a:	4b17      	ldr	r3, [pc, #92]	; (8006388 <MX_TIM13_Init+0x98>)
 800632c:	2280      	movs	r2, #128	; 0x80
 800632e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006330:	4815      	ldr	r0, [pc, #84]	; (8006388 <MX_TIM13_Init+0x98>)
 8006332:	f00c f938 	bl	80125a6 <HAL_TIM_Base_Init>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 800633c:	f7ff fa80 	bl	8005840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8006340:	4811      	ldr	r0, [pc, #68]	; (8006388 <MX_TIM13_Init+0x98>)
 8006342:	f00c fa0d 	bl	8012760 <HAL_TIM_PWM_Init>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 800634c:	f7ff fa78 	bl	8005840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006350:	2360      	movs	r3, #96	; 0x60
 8006352:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8006354:	f240 13f3 	movw	r3, #499	; 0x1f3
 8006358:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	2200      	movs	r2, #0
 8006366:	4619      	mov	r1, r3
 8006368:	4807      	ldr	r0, [pc, #28]	; (8006388 <MX_TIM13_Init+0x98>)
 800636a:	f00d f8ed 	bl	8013548 <HAL_TIM_PWM_ConfigChannel>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8006374:	f7ff fa64 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8006378:	4803      	ldr	r0, [pc, #12]	; (8006388 <MX_TIM13_Init+0x98>)
 800637a:	f000 fcc7 	bl	8006d0c <HAL_TIM_MspPostInit>

}
 800637e:	bf00      	nop
 8006380:	3720      	adds	r7, #32
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	20000f60 	.word	0x20000f60
 800638c:	40001c00 	.word	0x40001c00

08006390 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006396:	1d3b      	adds	r3, r7, #4
 8006398:	2200      	movs	r2, #0
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	605a      	str	r2, [r3, #4]
 800639e:	609a      	str	r2, [r3, #8]
 80063a0:	60da      	str	r2, [r3, #12]
 80063a2:	611a      	str	r2, [r3, #16]
 80063a4:	615a      	str	r2, [r3, #20]
 80063a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80063a8:	4b1f      	ldr	r3, [pc, #124]	; (8006428 <MX_TIM14_Init+0x98>)
 80063aa:	4a20      	ldr	r2, [pc, #128]	; (800642c <MX_TIM14_Init+0x9c>)
 80063ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 550-1;
 80063ae:	4b1e      	ldr	r3, [pc, #120]	; (8006428 <MX_TIM14_Init+0x98>)
 80063b0:	f240 2225 	movw	r2, #549	; 0x225
 80063b4:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063b6:	4b1c      	ldr	r3, [pc, #112]	; (8006428 <MX_TIM14_Init+0x98>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 80063bc:	4b1a      	ldr	r3, [pc, #104]	; (8006428 <MX_TIM14_Init+0x98>)
 80063be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80063c2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80063c4:	4b18      	ldr	r3, [pc, #96]	; (8006428 <MX_TIM14_Init+0x98>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063ca:	4b17      	ldr	r3, [pc, #92]	; (8006428 <MX_TIM14_Init+0x98>)
 80063cc:	2280      	movs	r2, #128	; 0x80
 80063ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80063d0:	4815      	ldr	r0, [pc, #84]	; (8006428 <MX_TIM14_Init+0x98>)
 80063d2:	f00c f8e8 	bl	80125a6 <HAL_TIM_Base_Init>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d001      	beq.n	80063e0 <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 80063dc:	f7ff fa30 	bl	8005840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80063e0:	4811      	ldr	r0, [pc, #68]	; (8006428 <MX_TIM14_Init+0x98>)
 80063e2:	f00c f9bd 	bl	8012760 <HAL_TIM_PWM_Init>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 80063ec:	f7ff fa28 	bl	8005840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80063f0:	2360      	movs	r3, #96	; 0x60
 80063f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 80063f4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80063f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006402:	1d3b      	adds	r3, r7, #4
 8006404:	2200      	movs	r2, #0
 8006406:	4619      	mov	r1, r3
 8006408:	4807      	ldr	r0, [pc, #28]	; (8006428 <MX_TIM14_Init+0x98>)
 800640a:	f00d f89d 	bl	8013548 <HAL_TIM_PWM_ConfigChannel>
 800640e:	4603      	mov	r3, r0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8006414:	f7ff fa14 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8006418:	4803      	ldr	r0, [pc, #12]	; (8006428 <MX_TIM14_Init+0x98>)
 800641a:	f000 fc77 	bl	8006d0c <HAL_TIM_MspPostInit>

}
 800641e:	bf00      	nop
 8006420:	3720      	adds	r7, #32
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000fac 	.word	0x20000fac
 800642c:	40002000 	.word	0x40002000

08006430 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b098      	sub	sp, #96	; 0x60
 8006434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006436:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	605a      	str	r2, [r3, #4]
 8006440:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006442:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	609a      	str	r2, [r3, #8]
 800644e:	60da      	str	r2, [r3, #12]
 8006450:	611a      	str	r2, [r3, #16]
 8006452:	615a      	str	r2, [r3, #20]
 8006454:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006456:	1d3b      	adds	r3, r7, #4
 8006458:	2234      	movs	r2, #52	; 0x34
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f010 ff67 	bl	8017330 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8006462:	4b35      	ldr	r3, [pc, #212]	; (8006538 <MX_TIM15_Init+0x108>)
 8006464:	4a35      	ldr	r2, [pc, #212]	; (800653c <MX_TIM15_Init+0x10c>)
 8006466:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 550-1;
 8006468:	4b33      	ldr	r3, [pc, #204]	; (8006538 <MX_TIM15_Init+0x108>)
 800646a:	f240 2225 	movw	r2, #549	; 0x225
 800646e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006470:	4b31      	ldr	r3, [pc, #196]	; (8006538 <MX_TIM15_Init+0x108>)
 8006472:	2200      	movs	r2, #0
 8006474:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1000-1;
 8006476:	4b30      	ldr	r3, [pc, #192]	; (8006538 <MX_TIM15_Init+0x108>)
 8006478:	f240 32e7 	movw	r2, #999	; 0x3e7
 800647c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800647e:	4b2e      	ldr	r3, [pc, #184]	; (8006538 <MX_TIM15_Init+0x108>)
 8006480:	2200      	movs	r2, #0
 8006482:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8006484:	4b2c      	ldr	r3, [pc, #176]	; (8006538 <MX_TIM15_Init+0x108>)
 8006486:	2200      	movs	r2, #0
 8006488:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800648a:	4b2b      	ldr	r3, [pc, #172]	; (8006538 <MX_TIM15_Init+0x108>)
 800648c:	2280      	movs	r2, #128	; 0x80
 800648e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8006490:	4829      	ldr	r0, [pc, #164]	; (8006538 <MX_TIM15_Init+0x108>)
 8006492:	f00c f965 	bl	8012760 <HAL_TIM_PWM_Init>
 8006496:	4603      	mov	r3, r0
 8006498:	2b00      	cmp	r3, #0
 800649a:	d001      	beq.n	80064a0 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 800649c:	f7ff f9d0 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80064a0:	2300      	movs	r3, #0
 80064a2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80064a4:	2300      	movs	r3, #0
 80064a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80064a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80064ac:	4619      	mov	r1, r3
 80064ae:	4822      	ldr	r0, [pc, #136]	; (8006538 <MX_TIM15_Init+0x108>)
 80064b0:	f00d ff9a 	bl	80143e8 <HAL_TIMEx_MasterConfigSynchronization>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 80064ba:	f7ff f9c1 	bl	8005840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064be:	2360      	movs	r3, #96	; 0x60
 80064c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 500-1;
 80064c2:	f240 13f3 	movw	r3, #499	; 0x1f3
 80064c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064c8:	2300      	movs	r3, #0
 80064ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80064cc:	2300      	movs	r3, #0
 80064ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064d0:	2300      	movs	r3, #0
 80064d2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80064d4:	2300      	movs	r3, #0
 80064d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80064d8:	2300      	movs	r3, #0
 80064da:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80064dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064e0:	2200      	movs	r2, #0
 80064e2:	4619      	mov	r1, r3
 80064e4:	4814      	ldr	r0, [pc, #80]	; (8006538 <MX_TIM15_Init+0x108>)
 80064e6:	f00d f82f 	bl	8013548 <HAL_TIM_PWM_ConfigChannel>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d001      	beq.n	80064f4 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 80064f0:	f7ff f9a6 	bl	8005840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80064f4:	2300      	movs	r3, #0
 80064f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80064f8:	2300      	movs	r3, #0
 80064fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006504:	2300      	movs	r3, #0
 8006506:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8006508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800650c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006512:	2300      	movs	r3, #0
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8006516:	1d3b      	adds	r3, r7, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4807      	ldr	r0, [pc, #28]	; (8006538 <MX_TIM15_Init+0x108>)
 800651c:	f00e f800 	bl	8014520 <HAL_TIMEx_ConfigBreakDeadTime>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8006526:	f7ff f98b 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800652a:	4803      	ldr	r0, [pc, #12]	; (8006538 <MX_TIM15_Init+0x108>)
 800652c:	f000 fbee 	bl	8006d0c <HAL_TIM_MspPostInit>

}
 8006530:	bf00      	nop
 8006532:	3760      	adds	r7, #96	; 0x60
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20000ff8 	.word	0x20000ff8
 800653c:	40014000 	.word	0x40014000

08006540 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b094      	sub	sp, #80	; 0x50
 8006544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006546:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	605a      	str	r2, [r3, #4]
 8006550:	609a      	str	r2, [r3, #8]
 8006552:	60da      	str	r2, [r3, #12]
 8006554:	611a      	str	r2, [r3, #16]
 8006556:	615a      	str	r2, [r3, #20]
 8006558:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800655a:	463b      	mov	r3, r7
 800655c:	2234      	movs	r2, #52	; 0x34
 800655e:	2100      	movs	r1, #0
 8006560:	4618      	mov	r0, r3
 8006562:	f010 fee5 	bl	8017330 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006566:	4b32      	ldr	r3, [pc, #200]	; (8006630 <MX_TIM16_Init+0xf0>)
 8006568:	4a32      	ldr	r2, [pc, #200]	; (8006634 <MX_TIM16_Init+0xf4>)
 800656a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 550-1;
 800656c:	4b30      	ldr	r3, [pc, #192]	; (8006630 <MX_TIM16_Init+0xf0>)
 800656e:	f240 2225 	movw	r2, #549	; 0x225
 8006572:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006574:	4b2e      	ldr	r3, [pc, #184]	; (8006630 <MX_TIM16_Init+0xf0>)
 8006576:	2200      	movs	r2, #0
 8006578:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 800657a:	4b2d      	ldr	r3, [pc, #180]	; (8006630 <MX_TIM16_Init+0xf0>)
 800657c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006580:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006582:	4b2b      	ldr	r3, [pc, #172]	; (8006630 <MX_TIM16_Init+0xf0>)
 8006584:	2200      	movs	r2, #0
 8006586:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8006588:	4b29      	ldr	r3, [pc, #164]	; (8006630 <MX_TIM16_Init+0xf0>)
 800658a:	2200      	movs	r2, #0
 800658c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800658e:	4b28      	ldr	r3, [pc, #160]	; (8006630 <MX_TIM16_Init+0xf0>)
 8006590:	2280      	movs	r2, #128	; 0x80
 8006592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006594:	4826      	ldr	r0, [pc, #152]	; (8006630 <MX_TIM16_Init+0xf0>)
 8006596:	f00c f806 	bl	80125a6 <HAL_TIM_Base_Init>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 80065a0:	f7ff f94e 	bl	8005840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80065a4:	4822      	ldr	r0, [pc, #136]	; (8006630 <MX_TIM16_Init+0xf0>)
 80065a6:	f00c f8db 	bl	8012760 <HAL_TIM_PWM_Init>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 80065b0:	f7ff f946 	bl	8005840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065b4:	2360      	movs	r3, #96	; 0x60
 80065b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80065b8:	f240 13f3 	movw	r3, #499	; 0x1f3
 80065bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065be:	2300      	movs	r3, #0
 80065c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80065c2:	2300      	movs	r3, #0
 80065c4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065c6:	2300      	movs	r3, #0
 80065c8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80065ca:	2300      	movs	r3, #0
 80065cc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80065ce:	2300      	movs	r3, #0
 80065d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80065d6:	2200      	movs	r2, #0
 80065d8:	4619      	mov	r1, r3
 80065da:	4815      	ldr	r0, [pc, #84]	; (8006630 <MX_TIM16_Init+0xf0>)
 80065dc:	f00c ffb4 	bl	8013548 <HAL_TIM_PWM_ConfigChannel>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 80065e6:	f7ff f92b 	bl	8005840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80065ea:	2300      	movs	r3, #0
 80065ec:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80065ee:	2300      	movs	r3, #0
 80065f0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80065fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006602:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006604:	2300      	movs	r3, #0
 8006606:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006608:	2300      	movs	r3, #0
 800660a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800660c:	463b      	mov	r3, r7
 800660e:	4619      	mov	r1, r3
 8006610:	4807      	ldr	r0, [pc, #28]	; (8006630 <MX_TIM16_Init+0xf0>)
 8006612:	f00d ff85 	bl	8014520 <HAL_TIMEx_ConfigBreakDeadTime>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d001      	beq.n	8006620 <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 800661c:	f7ff f910 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8006620:	4803      	ldr	r0, [pc, #12]	; (8006630 <MX_TIM16_Init+0xf0>)
 8006622:	f000 fb73 	bl	8006d0c <HAL_TIM_MspPostInit>

}
 8006626:	bf00      	nop
 8006628:	3750      	adds	r7, #80	; 0x50
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20001044 	.word	0x20001044
 8006634:	40014400 	.word	0x40014400

08006638 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b094      	sub	sp, #80	; 0x50
 800663c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800663e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	605a      	str	r2, [r3, #4]
 8006648:	609a      	str	r2, [r3, #8]
 800664a:	60da      	str	r2, [r3, #12]
 800664c:	611a      	str	r2, [r3, #16]
 800664e:	615a      	str	r2, [r3, #20]
 8006650:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006652:	463b      	mov	r3, r7
 8006654:	2234      	movs	r2, #52	; 0x34
 8006656:	2100      	movs	r1, #0
 8006658:	4618      	mov	r0, r3
 800665a:	f010 fe69 	bl	8017330 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800665e:	4b32      	ldr	r3, [pc, #200]	; (8006728 <MX_TIM17_Init+0xf0>)
 8006660:	4a32      	ldr	r2, [pc, #200]	; (800672c <MX_TIM17_Init+0xf4>)
 8006662:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 550-1;
 8006664:	4b30      	ldr	r3, [pc, #192]	; (8006728 <MX_TIM17_Init+0xf0>)
 8006666:	f240 2225 	movw	r2, #549	; 0x225
 800666a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800666c:	4b2e      	ldr	r3, [pc, #184]	; (8006728 <MX_TIM17_Init+0xf0>)
 800666e:	2200      	movs	r2, #0
 8006670:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 8006672:	4b2d      	ldr	r3, [pc, #180]	; (8006728 <MX_TIM17_Init+0xf0>)
 8006674:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006678:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800667a:	4b2b      	ldr	r3, [pc, #172]	; (8006728 <MX_TIM17_Init+0xf0>)
 800667c:	2200      	movs	r2, #0
 800667e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8006680:	4b29      	ldr	r3, [pc, #164]	; (8006728 <MX_TIM17_Init+0xf0>)
 8006682:	2200      	movs	r2, #0
 8006684:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006686:	4b28      	ldr	r3, [pc, #160]	; (8006728 <MX_TIM17_Init+0xf0>)
 8006688:	2280      	movs	r2, #128	; 0x80
 800668a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800668c:	4826      	ldr	r0, [pc, #152]	; (8006728 <MX_TIM17_Init+0xf0>)
 800668e:	f00b ff8a 	bl	80125a6 <HAL_TIM_Base_Init>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 8006698:	f7ff f8d2 	bl	8005840 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800669c:	4822      	ldr	r0, [pc, #136]	; (8006728 <MX_TIM17_Init+0xf0>)
 800669e:	f00c f85f 	bl	8012760 <HAL_TIM_PWM_Init>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d001      	beq.n	80066ac <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80066a8:	f7ff f8ca 	bl	8005840 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80066ac:	2360      	movs	r3, #96	; 0x60
 80066ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80066b0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80066b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80066b6:	2300      	movs	r3, #0
 80066b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80066ba:	2300      	movs	r3, #0
 80066bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80066be:	2300      	movs	r3, #0
 80066c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80066c2:	2300      	movs	r3, #0
 80066c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80066c6:	2300      	movs	r3, #0
 80066c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80066ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80066ce:	2200      	movs	r2, #0
 80066d0:	4619      	mov	r1, r3
 80066d2:	4815      	ldr	r0, [pc, #84]	; (8006728 <MX_TIM17_Init+0xf0>)
 80066d4:	f00c ff38 	bl	8013548 <HAL_TIM_PWM_ConfigChannel>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 80066de:	f7ff f8af 	bl	8005840 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80066e2:	2300      	movs	r3, #0
 80066e4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80066e6:	2300      	movs	r3, #0
 80066e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80066ea:	2300      	movs	r3, #0
 80066ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80066f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006700:	2300      	movs	r3, #0
 8006702:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8006704:	463b      	mov	r3, r7
 8006706:	4619      	mov	r1, r3
 8006708:	4807      	ldr	r0, [pc, #28]	; (8006728 <MX_TIM17_Init+0xf0>)
 800670a:	f00d ff09 	bl	8014520 <HAL_TIMEx_ConfigBreakDeadTime>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8006714:	f7ff f894 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8006718:	4803      	ldr	r0, [pc, #12]	; (8006728 <MX_TIM17_Init+0xf0>)
 800671a:	f000 faf7 	bl	8006d0c <HAL_TIM_MspPostInit>

}
 800671e:	bf00      	nop
 8006720:	3750      	adds	r7, #80	; 0x50
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20001090 	.word	0x20001090
 800672c:	40014800 	.word	0x40014800

08006730 <MX_TIM23_Init>:
/* TIM23 init function */
void MX_TIM23_Init(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006736:	f107 0310 	add.w	r3, r7, #16
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	605a      	str	r2, [r3, #4]
 8006740:	609a      	str	r2, [r3, #8]
 8006742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006744:	1d3b      	adds	r3, r7, #4
 8006746:	2200      	movs	r2, #0
 8006748:	601a      	str	r2, [r3, #0]
 800674a:	605a      	str	r2, [r3, #4]
 800674c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800674e:	4b1e      	ldr	r3, [pc, #120]	; (80067c8 <MX_TIM23_Init+0x98>)
 8006750:	4a1e      	ldr	r2, [pc, #120]	; (80067cc <MX_TIM23_Init+0x9c>)
 8006752:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8006754:	4b1c      	ldr	r3, [pc, #112]	; (80067c8 <MX_TIM23_Init+0x98>)
 8006756:	f44f 7289 	mov.w	r2, #274	; 0x112
 800675a:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800675c:	4b1a      	ldr	r3, [pc, #104]	; (80067c8 <MX_TIM23_Init+0x98>)
 800675e:	2200      	movs	r2, #0
 8006760:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 1000-1;
 8006762:	4b19      	ldr	r3, [pc, #100]	; (80067c8 <MX_TIM23_Init+0x98>)
 8006764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006768:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800676a:	4b17      	ldr	r3, [pc, #92]	; (80067c8 <MX_TIM23_Init+0x98>)
 800676c:	2200      	movs	r2, #0
 800676e:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006770:	4b15      	ldr	r3, [pc, #84]	; (80067c8 <MX_TIM23_Init+0x98>)
 8006772:	2280      	movs	r2, #128	; 0x80
 8006774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8006776:	4814      	ldr	r0, [pc, #80]	; (80067c8 <MX_TIM23_Init+0x98>)
 8006778:	f00b ff15 	bl	80125a6 <HAL_TIM_Base_Init>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8006782:	f7ff f85d 	bl	8005840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800678a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800678c:	f107 0310 	add.w	r3, r7, #16
 8006790:	4619      	mov	r1, r3
 8006792:	480d      	ldr	r0, [pc, #52]	; (80067c8 <MX_TIM23_Init+0x98>)
 8006794:	f00c ffec 	bl	8013770 <HAL_TIM_ConfigClockSource>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 800679e:	f7ff f84f 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067a2:	2300      	movs	r3, #0
 80067a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80067aa:	1d3b      	adds	r3, r7, #4
 80067ac:	4619      	mov	r1, r3
 80067ae:	4806      	ldr	r0, [pc, #24]	; (80067c8 <MX_TIM23_Init+0x98>)
 80067b0:	f00d fe1a 	bl	80143e8 <HAL_TIMEx_MasterConfigSynchronization>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 80067ba:	f7ff f841 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80067be:	bf00      	nop
 80067c0:	3720      	adds	r7, #32
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	200010dc 	.word	0x200010dc
 80067cc:	4000e000 	.word	0x4000e000

080067d0 <MX_TIM24_Init>:
/* TIM24 init function */
void MX_TIM24_Init(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b088      	sub	sp, #32
 80067d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80067d6:	f107 0310 	add.w	r3, r7, #16
 80067da:	2200      	movs	r2, #0
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	605a      	str	r2, [r3, #4]
 80067e0:	609a      	str	r2, [r3, #8]
 80067e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80067e4:	1d3b      	adds	r3, r7, #4
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	605a      	str	r2, [r3, #4]
 80067ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80067ee:	4b1e      	ldr	r3, [pc, #120]	; (8006868 <MX_TIM24_Init+0x98>)
 80067f0:	4a1e      	ldr	r2, [pc, #120]	; (800686c <MX_TIM24_Init+0x9c>)
 80067f2:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 80067f4:	4b1c      	ldr	r3, [pc, #112]	; (8006868 <MX_TIM24_Init+0x98>)
 80067f6:	f44f 7289 	mov.w	r2, #274	; 0x112
 80067fa:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067fc:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <MX_TIM24_Init+0x98>)
 80067fe:	2200      	movs	r2, #0
 8006800:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 8006802:	4b19      	ldr	r3, [pc, #100]	; (8006868 <MX_TIM24_Init+0x98>)
 8006804:	f04f 32ff 	mov.w	r2, #4294967295
 8006808:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800680a:	4b17      	ldr	r3, [pc, #92]	; (8006868 <MX_TIM24_Init+0x98>)
 800680c:	2200      	movs	r2, #0
 800680e:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006810:	4b15      	ldr	r3, [pc, #84]	; (8006868 <MX_TIM24_Init+0x98>)
 8006812:	2200      	movs	r2, #0
 8006814:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8006816:	4814      	ldr	r0, [pc, #80]	; (8006868 <MX_TIM24_Init+0x98>)
 8006818:	f00b fec5 	bl	80125a6 <HAL_TIM_Base_Init>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 8006822:	f7ff f80d 	bl	8005840 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800682a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800682c:	f107 0310 	add.w	r3, r7, #16
 8006830:	4619      	mov	r1, r3
 8006832:	480d      	ldr	r0, [pc, #52]	; (8006868 <MX_TIM24_Init+0x98>)
 8006834:	f00c ff9c 	bl	8013770 <HAL_TIM_ConfigClockSource>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 800683e:	f7fe ffff 	bl	8005840 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006842:	2300      	movs	r3, #0
 8006844:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006846:	2300      	movs	r3, #0
 8006848:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800684a:	1d3b      	adds	r3, r7, #4
 800684c:	4619      	mov	r1, r3
 800684e:	4806      	ldr	r0, [pc, #24]	; (8006868 <MX_TIM24_Init+0x98>)
 8006850:	f00d fdca 	bl	80143e8 <HAL_TIMEx_MasterConfigSynchronization>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 800685a:	f7fe fff1 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800685e:	bf00      	nop
 8006860:	3720      	adds	r7, #32
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20001128 	.word	0x20001128
 800686c:	4000e400 	.word	0x4000e400

08006870 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08a      	sub	sp, #40	; 0x28
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006878:	f107 0314 	add.w	r3, r7, #20
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	605a      	str	r2, [r3, #4]
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a3c      	ldr	r2, [pc, #240]	; (8006980 <HAL_TIM_PWM_MspInit+0x110>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d15e      	bne.n	8006950 <HAL_TIM_PWM_MspInit+0xe0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006892:	4b3c      	ldr	r3, [pc, #240]	; (8006984 <HAL_TIM_PWM_MspInit+0x114>)
 8006894:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006898:	4a3a      	ldr	r2, [pc, #232]	; (8006984 <HAL_TIM_PWM_MspInit+0x114>)
 800689a:	f043 0301 	orr.w	r3, r3, #1
 800689e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80068a2:	4b38      	ldr	r3, [pc, #224]	; (8006984 <HAL_TIM_PWM_MspInit+0x114>)
 80068a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068b0:	4b34      	ldr	r3, [pc, #208]	; (8006984 <HAL_TIM_PWM_MspInit+0x114>)
 80068b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068b6:	4a33      	ldr	r2, [pc, #204]	; (8006984 <HAL_TIM_PWM_MspInit+0x114>)
 80068b8:	f043 0301 	orr.w	r3, r3, #1
 80068bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80068c0:	4b30      	ldr	r3, [pc, #192]	; (8006984 <HAL_TIM_PWM_MspInit+0x114>)
 80068c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	60fb      	str	r3, [r7, #12]
 80068cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 80068ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068d4:	2302      	movs	r3, #2
 80068d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068dc:	2300      	movs	r3, #0
 80068de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80068e0:	2301      	movs	r3, #1
 80068e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 80068e4:	f107 0314 	add.w	r3, r7, #20
 80068e8:	4619      	mov	r1, r3
 80068ea:	4827      	ldr	r0, [pc, #156]	; (8006988 <HAL_TIM_PWM_MspInit+0x118>)
 80068ec:	f006 f900 	bl	800caf0 <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Stream0;
 80068f0:	4b26      	ldr	r3, [pc, #152]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 80068f2:	4a27      	ldr	r2, [pc, #156]	; (8006990 <HAL_TIM_PWM_MspInit+0x120>)
 80068f4:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_TIM1_CH1;
 80068f6:	4b25      	ldr	r3, [pc, #148]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 80068f8:	220b      	movs	r2, #11
 80068fa:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80068fc:	4b23      	ldr	r3, [pc, #140]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 80068fe:	2240      	movs	r2, #64	; 0x40
 8006900:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006902:	4b22      	ldr	r3, [pc, #136]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 8006904:	2200      	movs	r2, #0
 8006906:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006908:	4b20      	ldr	r3, [pc, #128]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 800690a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800690e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006910:	4b1e      	ldr	r3, [pc, #120]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 8006912:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006916:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006918:	4b1c      	ldr	r3, [pc, #112]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 800691a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800691e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8006920:	4b1a      	ldr	r3, [pc, #104]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 8006922:	2200      	movs	r2, #0
 8006924:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006926:	4b19      	ldr	r3, [pc, #100]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 8006928:	2200      	movs	r2, #0
 800692a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800692c:	4b17      	ldr	r3, [pc, #92]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 800692e:	2200      	movs	r2, #0
 8006930:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8006932:	4816      	ldr	r0, [pc, #88]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 8006934:	f003 fa94 	bl	8009e60 <HAL_DMA_Init>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_TIM_PWM_MspInit+0xd2>
    {
      Error_Handler();
 800693e:	f7fe ff7f 	bl	8005840 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a11      	ldr	r2, [pc, #68]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 8006946:	625a      	str	r2, [r3, #36]	; 0x24
 8006948:	4a10      	ldr	r2, [pc, #64]	; (800698c <HAL_TIM_PWM_MspInit+0x11c>)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800694e:	e013      	b.n	8006978 <HAL_TIM_PWM_MspInit+0x108>
  else if(tim_pwmHandle->Instance==TIM15)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a0f      	ldr	r2, [pc, #60]	; (8006994 <HAL_TIM_PWM_MspInit+0x124>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d10e      	bne.n	8006978 <HAL_TIM_PWM_MspInit+0x108>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800695a:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <HAL_TIM_PWM_MspInit+0x114>)
 800695c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006960:	4a08      	ldr	r2, [pc, #32]	; (8006984 <HAL_TIM_PWM_MspInit+0x114>)
 8006962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006966:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800696a:	4b06      	ldr	r3, [pc, #24]	; (8006984 <HAL_TIM_PWM_MspInit+0x114>)
 800696c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006970:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	68bb      	ldr	r3, [r7, #8]
}
 8006978:	bf00      	nop
 800697a:	3728      	adds	r7, #40	; 0x28
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	40010000 	.word	0x40010000
 8006984:	58024400 	.word	0x58024400
 8006988:	58020000 	.word	0x58020000
 800698c:	20001174 	.word	0x20001174
 8006990:	40020010 	.word	0x40020010
 8006994:	40014000 	.word	0x40014000

08006998 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b08e      	sub	sp, #56	; 0x38
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	605a      	str	r2, [r3, #4]
 80069aa:	609a      	str	r2, [r3, #8]
 80069ac:	60da      	str	r2, [r3, #12]
 80069ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069b8:	d14e      	bne.n	8006a58 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80069ba:	4b5d      	ldr	r3, [pc, #372]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 80069bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069c0:	4a5b      	ldr	r2, [pc, #364]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 80069c2:	f043 0301 	orr.w	r3, r3, #1
 80069c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80069ca:	4b59      	ldr	r3, [pc, #356]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 80069cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	623b      	str	r3, [r7, #32]
 80069d6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069d8:	4b55      	ldr	r3, [pc, #340]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 80069da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069de:	4a54      	ldr	r2, [pc, #336]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 80069e0:	f043 0301 	orr.w	r3, r3, #1
 80069e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069e8:	4b51      	ldr	r3, [pc, #324]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 80069ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069f6:	4b4e      	ldr	r3, [pc, #312]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 80069f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069fc:	4a4c      	ldr	r2, [pc, #304]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 80069fe:	f043 0302 	orr.w	r3, r3, #2
 8006a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a06:	4b4a      	ldr	r3, [pc, #296]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	61bb      	str	r3, [r7, #24]
 8006a12:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC6A_Pin;
 8006a14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a22:	2300      	movs	r3, #0
 8006a24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a26:	2301      	movs	r3, #1
 8006a28:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8006a2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4840      	ldr	r0, [pc, #256]	; (8006b34 <HAL_TIM_Encoder_MspInit+0x19c>)
 8006a32:	f006 f85d 	bl	800caf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC6B_Pin;
 8006a36:	2308      	movs	r3, #8
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a42:	2300      	movs	r3, #0
 8006a44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006a46:	2301      	movs	r3, #1
 8006a48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8006a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a4e:	4619      	mov	r1, r3
 8006a50:	4839      	ldr	r0, [pc, #228]	; (8006b38 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8006a52:	f006 f84d 	bl	800caf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8006a56:	e067      	b.n	8006b28 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM4)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a37      	ldr	r2, [pc, #220]	; (8006b3c <HAL_TIM_Encoder_MspInit+0x1a4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d12f      	bne.n	8006ac2 <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006a62:	4b33      	ldr	r3, [pc, #204]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a68:	4a31      	ldr	r2, [pc, #196]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a6a:	f043 0304 	orr.w	r3, r3, #4
 8006a6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006a72:	4b2f      	ldr	r3, [pc, #188]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	617b      	str	r3, [r7, #20]
 8006a7e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a80:	4b2b      	ldr	r3, [pc, #172]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a86:	4a2a      	ldr	r2, [pc, #168]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a88:	f043 0308 	orr.w	r3, r3, #8
 8006a8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a90:	4b27      	ldr	r3, [pc, #156]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006a92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	613b      	str	r3, [r7, #16]
 8006a9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 8006a9e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006aac:	2300      	movs	r3, #0
 8006aae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4821      	ldr	r0, [pc, #132]	; (8006b40 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8006abc:	f006 f818 	bl	800caf0 <HAL_GPIO_Init>
}
 8006ac0:	e032      	b.n	8006b28 <HAL_TIM_Encoder_MspInit+0x190>
  else if(tim_encoderHandle->Instance==TIM8)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a1f      	ldr	r2, [pc, #124]	; (8006b44 <HAL_TIM_Encoder_MspInit+0x1ac>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d12d      	bne.n	8006b28 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006acc:	4b18      	ldr	r3, [pc, #96]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ad2:	4a17      	ldr	r2, [pc, #92]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006ad4:	f043 0302 	orr.w	r3, r3, #2
 8006ad8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006adc:	4b14      	ldr	r3, [pc, #80]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006aea:	4b11      	ldr	r3, [pc, #68]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006af0:	4a0f      	ldr	r2, [pc, #60]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006af2:	f043 0304 	orr.w	r3, r3, #4
 8006af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006afa:	4b0d      	ldr	r3, [pc, #52]	; (8006b30 <HAL_TIM_Encoder_MspInit+0x198>)
 8006afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b00:	f003 0304 	and.w	r3, r3, #4
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8006b08:	23c0      	movs	r3, #192	; 0xc0
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b14:	2300      	movs	r3, #0
 8006b16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b20:	4619      	mov	r1, r3
 8006b22:	4809      	ldr	r0, [pc, #36]	; (8006b48 <HAL_TIM_Encoder_MspInit+0x1b0>)
 8006b24:	f005 ffe4 	bl	800caf0 <HAL_GPIO_Init>
}
 8006b28:	bf00      	nop
 8006b2a:	3738      	adds	r7, #56	; 0x38
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	58024400 	.word	0x58024400
 8006b34:	58020000 	.word	0x58020000
 8006b38:	58020400 	.word	0x58020400
 8006b3c:	40000800 	.word	0x40000800
 8006b40:	58020c00 	.word	0x58020c00
 8006b44:	40010400 	.word	0x40010400
 8006b48:	58020800 	.word	0x58020800

08006b4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08c      	sub	sp, #48	; 0x30
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a62      	ldr	r2, [pc, #392]	; (8006ce4 <HAL_TIM_Base_MspInit+0x198>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d10f      	bne.n	8006b7e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006b5e:	4b62      	ldr	r3, [pc, #392]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b64:	4a60      	ldr	r2, [pc, #384]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006b66:	f043 0302 	orr.w	r3, r3, #2
 8006b6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b6e:	4b5e      	ldr	r3, [pc, #376]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006b70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b74:	f003 0302 	and.w	r3, r3, #2
 8006b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_TIM24_CLK_ENABLE();
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }
}
 8006b7c:	e0ae      	b.n	8006cdc <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM5)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a5a      	ldr	r2, [pc, #360]	; (8006cec <HAL_TIM_Base_MspInit+0x1a0>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d10f      	bne.n	8006ba8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006b88:	4b57      	ldr	r3, [pc, #348]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b8e:	4a56      	ldr	r2, [pc, #344]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006b90:	f043 0308 	orr.w	r3, r3, #8
 8006b94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006b98:	4b53      	ldr	r3, [pc, #332]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006b9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8006ba6:	e099      	b.n	8006cdc <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM6)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a50      	ldr	r2, [pc, #320]	; (8006cf0 <HAL_TIM_Base_MspInit+0x1a4>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d10f      	bne.n	8006bd2 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006bb2:	4b4d      	ldr	r3, [pc, #308]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bb8:	4a4b      	ldr	r2, [pc, #300]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006bba:	f043 0310 	orr.w	r3, r3, #16
 8006bbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006bc2:	4b49      	ldr	r3, [pc, #292]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006bc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bc8:	f003 0310 	and.w	r3, r3, #16
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bd0:	e084      	b.n	8006cdc <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM13)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a47      	ldr	r2, [pc, #284]	; (8006cf4 <HAL_TIM_Base_MspInit+0x1a8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d10f      	bne.n	8006bfc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006bdc:	4b42      	ldr	r3, [pc, #264]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006be2:	4a41      	ldr	r2, [pc, #260]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006bec:	4b3e      	ldr	r3, [pc, #248]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf6:	623b      	str	r3, [r7, #32]
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
}
 8006bfa:	e06f      	b.n	8006cdc <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM14)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a3d      	ldr	r2, [pc, #244]	; (8006cf8 <HAL_TIM_Base_MspInit+0x1ac>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d10f      	bne.n	8006c26 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006c06:	4b38      	ldr	r3, [pc, #224]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c0c:	4a36      	ldr	r2, [pc, #216]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006c16:	4b34      	ldr	r3, [pc, #208]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	69fb      	ldr	r3, [r7, #28]
}
 8006c24:	e05a      	b.n	8006cdc <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM16)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a34      	ldr	r2, [pc, #208]	; (8006cfc <HAL_TIM_Base_MspInit+0x1b0>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d10f      	bne.n	8006c50 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006c30:	4b2d      	ldr	r3, [pc, #180]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c36:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c40:	4b29      	ldr	r3, [pc, #164]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
}
 8006c4e:	e045      	b.n	8006cdc <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM17)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a2a      	ldr	r2, [pc, #168]	; (8006d00 <HAL_TIM_Base_MspInit+0x1b4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d10f      	bne.n	8006c7a <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006c5a:	4b23      	ldr	r3, [pc, #140]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c60:	4a21      	ldr	r2, [pc, #132]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006c6a:	4b1f      	ldr	r3, [pc, #124]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c74:	617b      	str	r3, [r7, #20]
 8006c76:	697b      	ldr	r3, [r7, #20]
}
 8006c78:	e030      	b.n	8006cdc <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM23)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a21      	ldr	r2, [pc, #132]	; (8006d04 <HAL_TIM_Base_MspInit+0x1b8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d117      	bne.n	8006cb4 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8006c84:	4b18      	ldr	r3, [pc, #96]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006c8a:	4a17      	ldr	r2, [pc, #92]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c90:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006c94:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006c96:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c9e:	613b      	str	r3, [r7, #16]
 8006ca0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM23_IRQn, 0, 0);
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	20a1      	movs	r0, #161	; 0xa1
 8006ca8:	f002 fea7 	bl	80099fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM23_IRQn);
 8006cac:	20a1      	movs	r0, #161	; 0xa1
 8006cae:	f002 febe 	bl	8009a2e <HAL_NVIC_EnableIRQ>
}
 8006cb2:	e013      	b.n	8006cdc <HAL_TIM_Base_MspInit+0x190>
  else if(tim_baseHandle->Instance==TIM24)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a13      	ldr	r2, [pc, #76]	; (8006d08 <HAL_TIM_Base_MspInit+0x1bc>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d10e      	bne.n	8006cdc <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8006cbe:	4b0a      	ldr	r3, [pc, #40]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006cc0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006cc4:	4a08      	ldr	r2, [pc, #32]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006cc6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006cca:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8006cce:	4b06      	ldr	r3, [pc, #24]	; (8006ce8 <HAL_TIM_Base_MspInit+0x19c>)
 8006cd0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8006cd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd8:	60fb      	str	r3, [r7, #12]
 8006cda:	68fb      	ldr	r3, [r7, #12]
}
 8006cdc:	bf00      	nop
 8006cde:	3730      	adds	r7, #48	; 0x30
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40000400 	.word	0x40000400
 8006ce8:	58024400 	.word	0x58024400
 8006cec:	40000c00 	.word	0x40000c00
 8006cf0:	40001000 	.word	0x40001000
 8006cf4:	40001c00 	.word	0x40001c00
 8006cf8:	40002000 	.word	0x40002000
 8006cfc:	40014400 	.word	0x40014400
 8006d00:	40014800 	.word	0x40014800
 8006d04:	4000e000 	.word	0x4000e000
 8006d08:	4000e400 	.word	0x4000e400

08006d0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b090      	sub	sp, #64	; 0x40
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]
 8006d1c:	605a      	str	r2, [r3, #4]
 8006d1e:	609a      	str	r2, [r3, #8]
 8006d20:	60da      	str	r2, [r3, #12]
 8006d22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a95      	ldr	r2, [pc, #596]	; (8006f80 <HAL_TIM_MspPostInit+0x274>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d120      	bne.n	8006d70 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d2e:	4b95      	ldr	r3, [pc, #596]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d34:	4a93      	ldr	r2, [pc, #588]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d3e:	4b91      	ldr	r3, [pc, #580]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 8006d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d52:	2302      	movs	r3, #2
 8006d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d56:	2300      	movs	r3, #0
 8006d58:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 8006d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d66:	4619      	mov	r1, r3
 8006d68:	4887      	ldr	r0, [pc, #540]	; (8006f88 <HAL_TIM_MspPostInit+0x27c>)
 8006d6a:	f005 fec1 	bl	800caf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8006d6e:	e103      	b.n	8006f78 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM3)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a85      	ldr	r2, [pc, #532]	; (8006f8c <HAL_TIM_MspPostInit+0x280>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d11f      	bne.n	8006dba <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d7a:	4b82      	ldr	r3, [pc, #520]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d80:	4a80      	ldr	r2, [pc, #512]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006d82:	f043 0302 	orr.w	r3, r3, #2
 8006d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d8a:	4b7e      	ldr	r3, [pc, #504]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = ENC5A_GriperA_Pin|ENC5B_GriperB_Pin;
 8006d98:	2330      	movs	r3, #48	; 0x30
 8006d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006da0:	2300      	movs	r3, #0
 8006da2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006da4:	2300      	movs	r3, #0
 8006da6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006da8:	2302      	movs	r3, #2
 8006daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006db0:	4619      	mov	r1, r3
 8006db2:	4877      	ldr	r0, [pc, #476]	; (8006f90 <HAL_TIM_MspPostInit+0x284>)
 8006db4:	f005 fe9c 	bl	800caf0 <HAL_GPIO_Init>
}
 8006db8:	e0de      	b.n	8006f78 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM5)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a75      	ldr	r2, [pc, #468]	; (8006f94 <HAL_TIM_MspPostInit+0x288>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d11f      	bne.n	8006e04 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dc4:	4b6f      	ldr	r3, [pc, #444]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dca:	4a6e      	ldr	r2, [pc, #440]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006dcc:	f043 0301 	orr.w	r3, r3, #1
 8006dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006dd4:	4b6b      	ldr	r3, [pc, #428]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	623b      	str	r3, [r7, #32]
 8006de0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006de2:	2303      	movs	r3, #3
 8006de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006de6:	2302      	movs	r3, #2
 8006de8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dee:	2300      	movs	r3, #0
 8006df0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006df2:	2302      	movs	r3, #2
 8006df4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006df6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4862      	ldr	r0, [pc, #392]	; (8006f88 <HAL_TIM_MspPostInit+0x27c>)
 8006dfe:	f005 fe77 	bl	800caf0 <HAL_GPIO_Init>
}
 8006e02:	e0b9      	b.n	8006f78 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM13)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a63      	ldr	r2, [pc, #396]	; (8006f98 <HAL_TIM_MspPostInit+0x28c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d11f      	bne.n	8006e4e <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e0e:	4b5d      	ldr	r3, [pc, #372]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e14:	4a5b      	ldr	r2, [pc, #364]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006e16:	f043 0301 	orr.w	r3, r3, #1
 8006e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e1e:	4b59      	ldr	r3, [pc, #356]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	61fb      	str	r3, [r7, #28]
 8006e2a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = STEP1_Pin;
 8006e2c:	2340      	movs	r3, #64	; 0x40
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e30:	2302      	movs	r3, #2
 8006e32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e34:	2300      	movs	r3, #0
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8006e3c:	2309      	movs	r3, #9
 8006e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 8006e40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e44:	4619      	mov	r1, r3
 8006e46:	4850      	ldr	r0, [pc, #320]	; (8006f88 <HAL_TIM_MspPostInit+0x27c>)
 8006e48:	f005 fe52 	bl	800caf0 <HAL_GPIO_Init>
}
 8006e4c:	e094      	b.n	8006f78 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM14)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a52      	ldr	r2, [pc, #328]	; (8006f9c <HAL_TIM_MspPostInit+0x290>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d11f      	bne.n	8006e98 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e58:	4b4a      	ldr	r3, [pc, #296]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e5e:	4a49      	ldr	r2, [pc, #292]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006e60:	f043 0301 	orr.w	r3, r3, #1
 8006e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006e68:	4b46      	ldr	r3, [pc, #280]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP2_Pin;
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e82:	2300      	movs	r3, #0
 8006e84:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8006e86:	2309      	movs	r3, #9
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8006e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e8e:	4619      	mov	r1, r3
 8006e90:	483d      	ldr	r0, [pc, #244]	; (8006f88 <HAL_TIM_MspPostInit+0x27c>)
 8006e92:	f005 fe2d 	bl	800caf0 <HAL_GPIO_Init>
}
 8006e96:	e06f      	b.n	8006f78 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM15)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a40      	ldr	r2, [pc, #256]	; (8006fa0 <HAL_TIM_MspPostInit+0x294>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d11f      	bne.n	8006ee2 <HAL_TIM_MspPostInit+0x1d6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ea2:	4b38      	ldr	r3, [pc, #224]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ea8:	4a36      	ldr	r2, [pc, #216]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006eaa:	f043 0310 	orr.w	r3, r3, #16
 8006eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006eb2:	4b34      	ldr	r3, [pc, #208]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006ec0:	2320      	movs	r3, #32
 8006ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ed4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4832      	ldr	r0, [pc, #200]	; (8006fa4 <HAL_TIM_MspPostInit+0x298>)
 8006edc:	f005 fe08 	bl	800caf0 <HAL_GPIO_Init>
}
 8006ee0:	e04a      	b.n	8006f78 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM16)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a30      	ldr	r2, [pc, #192]	; (8006fa8 <HAL_TIM_MspPostInit+0x29c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d120      	bne.n	8006f2e <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006eec:	4b25      	ldr	r3, [pc, #148]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ef2:	4a24      	ldr	r2, [pc, #144]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006ef4:	f043 0302 	orr.w	r3, r3, #2
 8006ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006efc:	4b21      	ldr	r3, [pc, #132]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8006f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f10:	2302      	movs	r3, #2
 8006f12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f14:	2300      	movs	r3, #0
 8006f16:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8006f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f24:	4619      	mov	r1, r3
 8006f26:	481a      	ldr	r0, [pc, #104]	; (8006f90 <HAL_TIM_MspPostInit+0x284>)
 8006f28:	f005 fde2 	bl	800caf0 <HAL_GPIO_Init>
}
 8006f2c:	e024      	b.n	8006f78 <HAL_TIM_MspPostInit+0x26c>
  else if(timHandle->Instance==TIM17)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a1e      	ldr	r2, [pc, #120]	; (8006fac <HAL_TIM_MspPostInit+0x2a0>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d11f      	bne.n	8006f78 <HAL_TIM_MspPostInit+0x26c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f38:	4b12      	ldr	r3, [pc, #72]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f3e:	4a11      	ldr	r2, [pc, #68]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006f40:	f043 0302 	orr.w	r3, r3, #2
 8006f44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f48:	4b0e      	ldr	r3, [pc, #56]	; (8006f84 <HAL_TIM_MspPostInit+0x278>)
 8006f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f4e:	f003 0302 	and.w	r3, r3, #2
 8006f52:	60fb      	str	r3, [r7, #12]
 8006f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP5_Pin;
 8006f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f5c:	2302      	movs	r3, #2
 8006f5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f60:	2300      	movs	r3, #0
 8006f62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f64:	2300      	movs	r3, #0
 8006f66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 8006f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f70:	4619      	mov	r1, r3
 8006f72:	4807      	ldr	r0, [pc, #28]	; (8006f90 <HAL_TIM_MspPostInit+0x284>)
 8006f74:	f005 fdbc 	bl	800caf0 <HAL_GPIO_Init>
}
 8006f78:	bf00      	nop
 8006f7a:	3740      	adds	r7, #64	; 0x40
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40010000 	.word	0x40010000
 8006f84:	58024400 	.word	0x58024400
 8006f88:	58020000 	.word	0x58020000
 8006f8c:	40000400 	.word	0x40000400
 8006f90:	58020400 	.word	0x58020400
 8006f94:	40000c00 	.word	0x40000c00
 8006f98:	40001c00 	.word	0x40001c00
 8006f9c:	40002000 	.word	0x40002000
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	58021000 	.word	0x58021000
 8006fa8:	40014400 	.word	0x40014400
 8006fac:	40014800 	.word	0x40014800

08006fb0 <MX_UART5_Init>:
DMA_HandleTypeDef hdma_uart5_rx;
DMA_HandleTypeDef hdma_uart5_tx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006fb4:	4b24      	ldr	r3, [pc, #144]	; (8007048 <MX_UART5_Init+0x98>)
 8006fb6:	4a25      	ldr	r2, [pc, #148]	; (800704c <MX_UART5_Init+0x9c>)
 8006fb8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1000000;
 8006fba:	4b23      	ldr	r3, [pc, #140]	; (8007048 <MX_UART5_Init+0x98>)
 8006fbc:	4a24      	ldr	r2, [pc, #144]	; (8007050 <MX_UART5_Init+0xa0>)
 8006fbe:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006fc0:	4b21      	ldr	r3, [pc, #132]	; (8007048 <MX_UART5_Init+0x98>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006fc6:	4b20      	ldr	r3, [pc, #128]	; (8007048 <MX_UART5_Init+0x98>)
 8006fc8:	2200      	movs	r2, #0
 8006fca:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006fcc:	4b1e      	ldr	r3, [pc, #120]	; (8007048 <MX_UART5_Init+0x98>)
 8006fce:	2200      	movs	r2, #0
 8006fd0:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006fd2:	4b1d      	ldr	r3, [pc, #116]	; (8007048 <MX_UART5_Init+0x98>)
 8006fd4:	220c      	movs	r2, #12
 8006fd6:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006fd8:	4b1b      	ldr	r3, [pc, #108]	; (8007048 <MX_UART5_Init+0x98>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006fde:	4b1a      	ldr	r3, [pc, #104]	; (8007048 <MX_UART5_Init+0x98>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006fe4:	4b18      	ldr	r3, [pc, #96]	; (8007048 <MX_UART5_Init+0x98>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006fea:	4b17      	ldr	r3, [pc, #92]	; (8007048 <MX_UART5_Init+0x98>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8006ff0:	4b15      	ldr	r3, [pc, #84]	; (8007048 <MX_UART5_Init+0x98>)
 8006ff2:	2208      	movs	r2, #8
 8006ff4:	629a      	str	r2, [r3, #40]	; 0x28
  huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8006ff6:	4b14      	ldr	r3, [pc, #80]	; (8007048 <MX_UART5_Init+0x98>)
 8006ff8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006ffe:	4812      	ldr	r0, [pc, #72]	; (8007048 <MX_UART5_Init+0x98>)
 8007000:	f00d fb4c 	bl	801469c <HAL_UART_Init>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <MX_UART5_Init+0x5e>
  {
    Error_Handler();
 800700a:	f7fe fc19 	bl	8005840 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800700e:	2100      	movs	r1, #0
 8007010:	480d      	ldr	r0, [pc, #52]	; (8007048 <MX_UART5_Init+0x98>)
 8007012:	f010 f898 	bl	8017146 <HAL_UARTEx_SetTxFifoThreshold>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d001      	beq.n	8007020 <MX_UART5_Init+0x70>
  {
    Error_Handler();
 800701c:	f7fe fc10 	bl	8005840 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007020:	2100      	movs	r1, #0
 8007022:	4809      	ldr	r0, [pc, #36]	; (8007048 <MX_UART5_Init+0x98>)
 8007024:	f010 f8cd 	bl	80171c2 <HAL_UARTEx_SetRxFifoThreshold>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <MX_UART5_Init+0x82>
  {
    Error_Handler();
 800702e:	f7fe fc07 	bl	8005840 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8007032:	4805      	ldr	r0, [pc, #20]	; (8007048 <MX_UART5_Init+0x98>)
 8007034:	f010 f84e 	bl	80170d4 <HAL_UARTEx_DisableFifoMode>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <MX_UART5_Init+0x92>
  {
    Error_Handler();
 800703e:	f7fe fbff 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8007042:	bf00      	nop
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	200011ec 	.word	0x200011ec
 800704c:	40005000 	.word	0x40005000
 8007050:	000f4240 	.word	0x000f4240

08007054 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007058:	4b22      	ldr	r3, [pc, #136]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 800705a:	4a23      	ldr	r2, [pc, #140]	; (80070e8 <MX_USART1_UART_Init+0x94>)
 800705c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800705e:	4b21      	ldr	r3, [pc, #132]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 8007060:	4a22      	ldr	r2, [pc, #136]	; (80070ec <MX_USART1_UART_Init+0x98>)
 8007062:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007064:	4b1f      	ldr	r3, [pc, #124]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 8007066:	2200      	movs	r2, #0
 8007068:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800706a:	4b1e      	ldr	r3, [pc, #120]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 800706c:	2200      	movs	r2, #0
 800706e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007070:	4b1c      	ldr	r3, [pc, #112]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 8007072:	2200      	movs	r2, #0
 8007074:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007076:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 8007078:	220c      	movs	r2, #12
 800707a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800707c:	4b19      	ldr	r3, [pc, #100]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 800707e:	2200      	movs	r2, #0
 8007080:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007082:	4b18      	ldr	r3, [pc, #96]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 8007084:	2200      	movs	r2, #0
 8007086:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007088:	4b16      	ldr	r3, [pc, #88]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 800708a:	2200      	movs	r2, #0
 800708c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800708e:	4b15      	ldr	r3, [pc, #84]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 8007090:	2200      	movs	r2, #0
 8007092:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007094:	4b13      	ldr	r3, [pc, #76]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 8007096:	2200      	movs	r2, #0
 8007098:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800709a:	4812      	ldr	r0, [pc, #72]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 800709c:	f00d fafe 	bl	801469c <HAL_UART_Init>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 80070a6:	f7fe fbcb 	bl	8005840 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80070aa:	2100      	movs	r1, #0
 80070ac:	480d      	ldr	r0, [pc, #52]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 80070ae:	f010 f84a 	bl	8017146 <HAL_UARTEx_SetTxFifoThreshold>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d001      	beq.n	80070bc <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 80070b8:	f7fe fbc2 	bl	8005840 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80070bc:	2100      	movs	r1, #0
 80070be:	4809      	ldr	r0, [pc, #36]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 80070c0:	f010 f87f 	bl	80171c2 <HAL_UARTEx_SetRxFifoThreshold>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 80070ca:	f7fe fbb9 	bl	8005840 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80070ce:	4805      	ldr	r0, [pc, #20]	; (80070e4 <MX_USART1_UART_Init+0x90>)
 80070d0:	f010 f800 	bl	80170d4 <HAL_UARTEx_DisableFifoMode>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d001      	beq.n	80070de <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80070da:	f7fe fbb1 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80070de:	bf00      	nop
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	2000127c 	.word	0x2000127c
 80070e8:	40011000 	.word	0x40011000
 80070ec:	001e8480 	.word	0x001e8480

080070f0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80070f4:	4b22      	ldr	r3, [pc, #136]	; (8007180 <MX_USART3_UART_Init+0x90>)
 80070f6:	4a23      	ldr	r2, [pc, #140]	; (8007184 <MX_USART3_UART_Init+0x94>)
 80070f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80070fa:	4b21      	ldr	r3, [pc, #132]	; (8007180 <MX_USART3_UART_Init+0x90>)
 80070fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007100:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007102:	4b1f      	ldr	r3, [pc, #124]	; (8007180 <MX_USART3_UART_Init+0x90>)
 8007104:	2200      	movs	r2, #0
 8007106:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007108:	4b1d      	ldr	r3, [pc, #116]	; (8007180 <MX_USART3_UART_Init+0x90>)
 800710a:	2200      	movs	r2, #0
 800710c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800710e:	4b1c      	ldr	r3, [pc, #112]	; (8007180 <MX_USART3_UART_Init+0x90>)
 8007110:	2200      	movs	r2, #0
 8007112:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007114:	4b1a      	ldr	r3, [pc, #104]	; (8007180 <MX_USART3_UART_Init+0x90>)
 8007116:	220c      	movs	r2, #12
 8007118:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800711a:	4b19      	ldr	r3, [pc, #100]	; (8007180 <MX_USART3_UART_Init+0x90>)
 800711c:	2200      	movs	r2, #0
 800711e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007120:	4b17      	ldr	r3, [pc, #92]	; (8007180 <MX_USART3_UART_Init+0x90>)
 8007122:	2200      	movs	r2, #0
 8007124:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007126:	4b16      	ldr	r3, [pc, #88]	; (8007180 <MX_USART3_UART_Init+0x90>)
 8007128:	2200      	movs	r2, #0
 800712a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800712c:	4b14      	ldr	r3, [pc, #80]	; (8007180 <MX_USART3_UART_Init+0x90>)
 800712e:	2200      	movs	r2, #0
 8007130:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007132:	4b13      	ldr	r3, [pc, #76]	; (8007180 <MX_USART3_UART_Init+0x90>)
 8007134:	2200      	movs	r2, #0
 8007136:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007138:	4811      	ldr	r0, [pc, #68]	; (8007180 <MX_USART3_UART_Init+0x90>)
 800713a:	f00d faaf 	bl	801469c <HAL_UART_Init>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8007144:	f7fe fb7c 	bl	8005840 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007148:	2100      	movs	r1, #0
 800714a:	480d      	ldr	r0, [pc, #52]	; (8007180 <MX_USART3_UART_Init+0x90>)
 800714c:	f00f fffb 	bl	8017146 <HAL_UARTEx_SetTxFifoThreshold>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8007156:	f7fe fb73 	bl	8005840 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800715a:	2100      	movs	r1, #0
 800715c:	4808      	ldr	r0, [pc, #32]	; (8007180 <MX_USART3_UART_Init+0x90>)
 800715e:	f010 f830 	bl	80171c2 <HAL_UARTEx_SetRxFifoThreshold>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d001      	beq.n	800716c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8007168:	f7fe fb6a 	bl	8005840 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800716c:	4804      	ldr	r0, [pc, #16]	; (8007180 <MX_USART3_UART_Init+0x90>)
 800716e:	f00f ffb1 	bl	80170d4 <HAL_UARTEx_DisableFifoMode>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8007178:	f7fe fb62 	bl	8005840 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800717c:	bf00      	nop
 800717e:	bd80      	pop	{r7, pc}
 8007180:	2000130c 	.word	0x2000130c
 8007184:	40004800 	.word	0x40004800

08007188 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08e      	sub	sp, #56	; 0x38
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	605a      	str	r2, [r3, #4]
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	60da      	str	r2, [r3, #12]
 800719e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a86      	ldr	r2, [pc, #536]	; (80073c0 <HAL_UART_MspInit+0x238>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	f040 8094 	bne.w	80072d4 <HAL_UART_MspInit+0x14c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80071ac:	4b85      	ldr	r3, [pc, #532]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 80071ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071b2:	4a84      	ldr	r2, [pc, #528]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 80071b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80071b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80071bc:	4b81      	ldr	r3, [pc, #516]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 80071be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071c6:	623b      	str	r3, [r7, #32]
 80071c8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071ca:	4b7e      	ldr	r3, [pc, #504]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 80071cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071d0:	4a7c      	ldr	r2, [pc, #496]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 80071d2:	f043 0302 	orr.w	r3, r3, #2
 80071d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80071da:	4b7a      	ldr	r3, [pc, #488]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 80071dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	61fb      	str	r3, [r7, #28]
 80071e6:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80071e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ee:	2302      	movs	r3, #2
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071f6:	2300      	movs	r3, #0
 80071f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 80071fa:	230e      	movs	r3, #14
 80071fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007202:	4619      	mov	r1, r3
 8007204:	4870      	ldr	r0, [pc, #448]	; (80073c8 <HAL_UART_MspInit+0x240>)
 8007206:	f005 fc73 	bl	800caf0 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream2;
 800720a:	4b70      	ldr	r3, [pc, #448]	; (80073cc <HAL_UART_MspInit+0x244>)
 800720c:	4a70      	ldr	r2, [pc, #448]	; (80073d0 <HAL_UART_MspInit+0x248>)
 800720e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8007210:	4b6e      	ldr	r3, [pc, #440]	; (80073cc <HAL_UART_MspInit+0x244>)
 8007212:	2241      	movs	r2, #65	; 0x41
 8007214:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007216:	4b6d      	ldr	r3, [pc, #436]	; (80073cc <HAL_UART_MspInit+0x244>)
 8007218:	2200      	movs	r2, #0
 800721a:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800721c:	4b6b      	ldr	r3, [pc, #428]	; (80073cc <HAL_UART_MspInit+0x244>)
 800721e:	2200      	movs	r2, #0
 8007220:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007222:	4b6a      	ldr	r3, [pc, #424]	; (80073cc <HAL_UART_MspInit+0x244>)
 8007224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007228:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800722a:	4b68      	ldr	r3, [pc, #416]	; (80073cc <HAL_UART_MspInit+0x244>)
 800722c:	2200      	movs	r2, #0
 800722e:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007230:	4b66      	ldr	r3, [pc, #408]	; (80073cc <HAL_UART_MspInit+0x244>)
 8007232:	2200      	movs	r2, #0
 8007234:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8007236:	4b65      	ldr	r3, [pc, #404]	; (80073cc <HAL_UART_MspInit+0x244>)
 8007238:	2200      	movs	r2, #0
 800723a:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800723c:	4b63      	ldr	r3, [pc, #396]	; (80073cc <HAL_UART_MspInit+0x244>)
 800723e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007242:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007244:	4b61      	ldr	r3, [pc, #388]	; (80073cc <HAL_UART_MspInit+0x244>)
 8007246:	2200      	movs	r2, #0
 8007248:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800724a:	4860      	ldr	r0, [pc, #384]	; (80073cc <HAL_UART_MspInit+0x244>)
 800724c:	f002 fe08 	bl	8009e60 <HAL_DMA_Init>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <HAL_UART_MspInit+0xd2>
    {
      Error_Handler();
 8007256:	f7fe faf3 	bl	8005840 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a5b      	ldr	r2, [pc, #364]	; (80073cc <HAL_UART_MspInit+0x244>)
 800725e:	67da      	str	r2, [r3, #124]	; 0x7c
 8007260:	4a5a      	ldr	r2, [pc, #360]	; (80073cc <HAL_UART_MspInit+0x244>)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream1;
 8007266:	4b5b      	ldr	r3, [pc, #364]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 8007268:	4a5b      	ldr	r2, [pc, #364]	; (80073d8 <HAL_UART_MspInit+0x250>)
 800726a:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 800726c:	4b59      	ldr	r3, [pc, #356]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 800726e:	2242      	movs	r2, #66	; 0x42
 8007270:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007272:	4b58      	ldr	r3, [pc, #352]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 8007274:	2240      	movs	r2, #64	; 0x40
 8007276:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007278:	4b56      	ldr	r3, [pc, #344]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 800727a:	2200      	movs	r2, #0
 800727c:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800727e:	4b55      	ldr	r3, [pc, #340]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 8007280:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007284:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007286:	4b53      	ldr	r3, [pc, #332]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 8007288:	2200      	movs	r2, #0
 800728a:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800728c:	4b51      	ldr	r3, [pc, #324]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 800728e:	2200      	movs	r2, #0
 8007290:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8007292:	4b50      	ldr	r3, [pc, #320]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 8007294:	2200      	movs	r2, #0
 8007296:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8007298:	4b4e      	ldr	r3, [pc, #312]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 800729a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800729e:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80072a0:	4b4c      	ldr	r3, [pc, #304]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80072a6:	484b      	ldr	r0, [pc, #300]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 80072a8:	f002 fdda 	bl	8009e60 <HAL_DMA_Init>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 80072b2:	f7fe fac5 	bl	8005840 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a46      	ldr	r2, [pc, #280]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 80072ba:	679a      	str	r2, [r3, #120]	; 0x78
 80072bc:	4a45      	ldr	r2, [pc, #276]	; (80073d4 <HAL_UART_MspInit+0x24c>)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80072c2:	2200      	movs	r2, #0
 80072c4:	2100      	movs	r1, #0
 80072c6:	2035      	movs	r0, #53	; 0x35
 80072c8:	f002 fb97 	bl	80099fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80072cc:	2035      	movs	r0, #53	; 0x35
 80072ce:	f002 fbae 	bl	8009a2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80072d2:	e070      	b.n	80073b6 <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART1)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a40      	ldr	r2, [pc, #256]	; (80073dc <HAL_UART_MspInit+0x254>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d12f      	bne.n	800733e <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART1_CLK_ENABLE();
 80072de:	4b39      	ldr	r3, [pc, #228]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 80072e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072e4:	4a37      	ldr	r2, [pc, #220]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 80072e6:	f043 0310 	orr.w	r3, r3, #16
 80072ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80072ee:	4b35      	ldr	r3, [pc, #212]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 80072f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	61bb      	str	r3, [r7, #24]
 80072fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072fc:	4b31      	ldr	r3, [pc, #196]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 80072fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007302:	4a30      	ldr	r2, [pc, #192]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 8007304:	f043 0302 	orr.w	r3, r3, #2
 8007308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800730c:	4b2d      	ldr	r3, [pc, #180]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 800730e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007312:	f003 0302 	and.w	r3, r3, #2
 8007316:	617b      	str	r3, [r7, #20]
 8007318:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800731a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007320:	2302      	movs	r3, #2
 8007322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007324:	2300      	movs	r3, #0
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007328:	2300      	movs	r3, #0
 800732a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800732c:	2304      	movs	r3, #4
 800732e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007334:	4619      	mov	r1, r3
 8007336:	4824      	ldr	r0, [pc, #144]	; (80073c8 <HAL_UART_MspInit+0x240>)
 8007338:	f005 fbda 	bl	800caf0 <HAL_GPIO_Init>
}
 800733c:	e03b      	b.n	80073b6 <HAL_UART_MspInit+0x22e>
  else if(uartHandle->Instance==USART3)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a27      	ldr	r2, [pc, #156]	; (80073e0 <HAL_UART_MspInit+0x258>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d136      	bne.n	80073b6 <HAL_UART_MspInit+0x22e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8007348:	4b1e      	ldr	r3, [pc, #120]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 800734a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800734e:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 8007350:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007354:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007358:	4b1a      	ldr	r3, [pc, #104]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 800735a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800735e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007362:	613b      	str	r3, [r7, #16]
 8007364:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007366:	4b17      	ldr	r3, [pc, #92]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 8007368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800736c:	4a15      	ldr	r2, [pc, #84]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 800736e:	f043 0308 	orr.w	r3, r3, #8
 8007372:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007376:	4b13      	ldr	r3, [pc, #76]	; (80073c4 <HAL_UART_MspInit+0x23c>)
 8007378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800737c:	f003 0308 	and.w	r3, r3, #8
 8007380:	60fb      	str	r3, [r7, #12]
 8007382:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007384:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800738a:	2302      	movs	r3, #2
 800738c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800738e:	2300      	movs	r3, #0
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007392:	2300      	movs	r3, #0
 8007394:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007396:	2307      	movs	r3, #7
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800739a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800739e:	4619      	mov	r1, r3
 80073a0:	4810      	ldr	r0, [pc, #64]	; (80073e4 <HAL_UART_MspInit+0x25c>)
 80073a2:	f005 fba5 	bl	800caf0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80073a6:	2200      	movs	r2, #0
 80073a8:	2100      	movs	r1, #0
 80073aa:	2027      	movs	r0, #39	; 0x27
 80073ac:	f002 fb25 	bl	80099fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80073b0:	2027      	movs	r0, #39	; 0x27
 80073b2:	f002 fb3c 	bl	8009a2e <HAL_NVIC_EnableIRQ>
}
 80073b6:	bf00      	nop
 80073b8:	3738      	adds	r7, #56	; 0x38
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40005000 	.word	0x40005000
 80073c4:	58024400 	.word	0x58024400
 80073c8:	58020400 	.word	0x58020400
 80073cc:	2000139c 	.word	0x2000139c
 80073d0:	40020040 	.word	0x40020040
 80073d4:	20001414 	.word	0x20001414
 80073d8:	40020028 	.word	0x40020028
 80073dc:	40011000 	.word	0x40011000
 80073e0:	40004800 	.word	0x40004800
 80073e4:	58020c00 	.word	0x58020c00

080073e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80073e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007420 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80073ec:	f7fe fc2e 	bl	8005c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80073f0:	480c      	ldr	r0, [pc, #48]	; (8007424 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80073f2:	490d      	ldr	r1, [pc, #52]	; (8007428 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80073f4:	4a0d      	ldr	r2, [pc, #52]	; (800742c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80073f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80073f8:	e002      	b.n	8007400 <LoopCopyDataInit>

080073fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80073fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80073fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80073fe:	3304      	adds	r3, #4

08007400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007404:	d3f9      	bcc.n	80073fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007406:	4a0a      	ldr	r2, [pc, #40]	; (8007430 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007408:	4c0a      	ldr	r4, [pc, #40]	; (8007434 <LoopFillZerobss+0x22>)
  movs r3, #0
 800740a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800740c:	e001      	b.n	8007412 <LoopFillZerobss>

0800740e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800740e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007410:	3204      	adds	r2, #4

08007412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007414:	d3fb      	bcc.n	800740e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007416:	f00f ff67 	bl	80172e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800741a:	f7fb fcf5 	bl	8002e08 <main>
  bx  lr
 800741e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007428:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800742c:	080186b0 	.word	0x080186b0
  ldr r2, =_sbss
 8007430:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8007434:	20001490 	.word	0x20001490

08007438 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007438:	e7fe      	b.n	8007438 <ADC_IRQHandler>
	...

0800743c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007442:	2003      	movs	r0, #3
 8007444:	f002 face 	bl	80099e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007448:	f007 fe9e 	bl	800f188 <HAL_RCC_GetSysClockFreq>
 800744c:	4602      	mov	r2, r0
 800744e:	4b15      	ldr	r3, [pc, #84]	; (80074a4 <HAL_Init+0x68>)
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	0a1b      	lsrs	r3, r3, #8
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	4913      	ldr	r1, [pc, #76]	; (80074a8 <HAL_Init+0x6c>)
 800745a:	5ccb      	ldrb	r3, [r1, r3]
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
 8007464:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007466:	4b0f      	ldr	r3, [pc, #60]	; (80074a4 <HAL_Init+0x68>)
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f003 030f 	and.w	r3, r3, #15
 800746e:	4a0e      	ldr	r2, [pc, #56]	; (80074a8 <HAL_Init+0x6c>)
 8007470:	5cd3      	ldrb	r3, [r2, r3]
 8007472:	f003 031f 	and.w	r3, r3, #31
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	fa22 f303 	lsr.w	r3, r2, r3
 800747c:	4a0b      	ldr	r2, [pc, #44]	; (80074ac <HAL_Init+0x70>)
 800747e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007480:	4a0b      	ldr	r2, [pc, #44]	; (80074b0 <HAL_Init+0x74>)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007486:	2000      	movs	r0, #0
 8007488:	f000 f814 	bl	80074b4 <HAL_InitTick>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d001      	beq.n	8007496 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e002      	b.n	800749c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007496:	f7fe fb45 	bl	8005b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3708      	adds	r7, #8
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	58024400 	.word	0x58024400
 80074a8:	08018418 	.word	0x08018418
 80074ac:	20000024 	.word	0x20000024
 80074b0:	20000020 	.word	0x20000020

080074b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80074bc:	4b15      	ldr	r3, [pc, #84]	; (8007514 <HAL_InitTick+0x60>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e021      	b.n	800750c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80074c8:	4b13      	ldr	r3, [pc, #76]	; (8007518 <HAL_InitTick+0x64>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	4b11      	ldr	r3, [pc, #68]	; (8007514 <HAL_InitTick+0x60>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	4619      	mov	r1, r3
 80074d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80074da:	fbb2 f3f3 	udiv	r3, r2, r3
 80074de:	4618      	mov	r0, r3
 80074e0:	f002 fab3 	bl	8009a4a <HAL_SYSTICK_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e00e      	b.n	800750c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b0f      	cmp	r3, #15
 80074f2:	d80a      	bhi.n	800750a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80074f4:	2200      	movs	r2, #0
 80074f6:	6879      	ldr	r1, [r7, #4]
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	f002 fa7d 	bl	80099fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007500:	4a06      	ldr	r2, [pc, #24]	; (800751c <HAL_InitTick+0x68>)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007506:	2300      	movs	r3, #0
 8007508:	e000      	b.n	800750c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
}
 800750c:	4618      	mov	r0, r3
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	2000002c 	.word	0x2000002c
 8007518:	20000020 	.word	0x20000020
 800751c:	20000028 	.word	0x20000028

08007520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007524:	4b06      	ldr	r3, [pc, #24]	; (8007540 <HAL_IncTick+0x20>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	461a      	mov	r2, r3
 800752a:	4b06      	ldr	r3, [pc, #24]	; (8007544 <HAL_IncTick+0x24>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4413      	add	r3, r2
 8007530:	4a04      	ldr	r2, [pc, #16]	; (8007544 <HAL_IncTick+0x24>)
 8007532:	6013      	str	r3, [r2, #0]
}
 8007534:	bf00      	nop
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	2000002c 	.word	0x2000002c
 8007544:	2000148c 	.word	0x2000148c

08007548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007548:	b480      	push	{r7}
 800754a:	af00      	add	r7, sp, #0
  return uwTick;
 800754c:	4b03      	ldr	r3, [pc, #12]	; (800755c <HAL_GetTick+0x14>)
 800754e:	681b      	ldr	r3, [r3, #0]
}
 8007550:	4618      	mov	r0, r3
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	2000148c 	.word	0x2000148c

08007560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007568:	f7ff ffee 	bl	8007548 <HAL_GetTick>
 800756c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007578:	d005      	beq.n	8007586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800757a:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <HAL_Delay+0x44>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4413      	add	r3, r2
 8007584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007586:	bf00      	nop
 8007588:	f7ff ffde 	bl	8007548 <HAL_GetTick>
 800758c:	4602      	mov	r2, r0
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	1ad3      	subs	r3, r2, r3
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	429a      	cmp	r2, r3
 8007596:	d8f7      	bhi.n	8007588 <HAL_Delay+0x28>
  {
  }
}
 8007598:	bf00      	nop
 800759a:	bf00      	nop
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	2000002c 	.word	0x2000002c

080075a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	609a      	str	r2, [r3, #8]
}
 80075c2:	bf00      	nop
 80075c4:	370c      	adds	r7, #12
 80075c6:	46bd      	mov	sp, r7
 80075c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075cc:	4770      	bx	lr

080075ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b083      	sub	sp, #12
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	431a      	orrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	609a      	str	r2, [r3, #8]
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3360      	adds	r3, #96	; 0x60
 8007622:	461a      	mov	r2, r3
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4a10      	ldr	r2, [pc, #64]	; (8007670 <LL_ADC_SetOffset+0x60>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d10b      	bne.n	800764c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	4313      	orrs	r3, r2
 8007642:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800764a:	e00b      	b.n	8007664 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	430b      	orrs	r3, r1
 800765e:	431a      	orrs	r2, r3
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	601a      	str	r2, [r3, #0]
}
 8007664:	bf00      	nop
 8007666:	371c      	adds	r7, #28
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	58026000 	.word	0x58026000

08007674 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	3360      	adds	r3, #96	; 0x60
 8007682:	461a      	mov	r2, r3
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007694:	4618      	mov	r0, r3
 8007696:	3714      	adds	r7, #20
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f003 031f 	and.w	r3, r3, #31
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	fa01 f303 	lsl.w	r3, r1, r3
 80076c0:	431a      	orrs	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	611a      	str	r2, [r3, #16]
}
 80076c6:	bf00      	nop
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
	...

080076d4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	4a0c      	ldr	r2, [pc, #48]	; (8007714 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00e      	beq.n	8007706 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3360      	adds	r3, #96	; 0x60
 80076ec:	461a      	mov	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	431a      	orrs	r2, r3
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	601a      	str	r2, [r3, #0]
  }
}
 8007706:	bf00      	nop
 8007708:	371c      	adds	r7, #28
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	58026000 	.word	0x58026000

08007718 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007718:	b480      	push	{r7}
 800771a:	b087      	sub	sp, #28
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	4a0c      	ldr	r2, [pc, #48]	; (8007758 <LL_ADC_SetOffsetSaturation+0x40>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d10e      	bne.n	800774a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3360      	adds	r3, #96	; 0x60
 8007730:	461a      	mov	r2, r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	431a      	orrs	r2, r3
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800774a:	bf00      	nop
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	58026000 	.word	0x58026000

0800775c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4a0c      	ldr	r2, [pc, #48]	; (800779c <LL_ADC_SetOffsetSign+0x40>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d10e      	bne.n	800778e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	3360      	adds	r3, #96	; 0x60
 8007774:	461a      	mov	r2, r3
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	431a      	orrs	r2, r3
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800778e:	bf00      	nop
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	58026000 	.word	0x58026000

080077a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	3360      	adds	r3, #96	; 0x60
 80077b0:	461a      	mov	r2, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	4413      	add	r3, r2
 80077b8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4a0c      	ldr	r2, [pc, #48]	; (80077f0 <LL_ADC_SetOffsetState+0x50>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d108      	bne.n	80077d4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80077d2:	e007      	b.n	80077e4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	431a      	orrs	r2, r3
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	601a      	str	r2, [r3, #0]
}
 80077e4:	bf00      	nop
 80077e6:	371c      	adds	r7, #28
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	58026000 	.word	0x58026000

080077f4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8007808:	2301      	movs	r3, #1
 800780a:	e000      	b.n	800780e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	370c      	adds	r7, #12
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800781a:	b480      	push	{r7}
 800781c:	b087      	sub	sp, #28
 800781e:	af00      	add	r7, sp, #0
 8007820:	60f8      	str	r0, [r7, #12]
 8007822:	60b9      	str	r1, [r7, #8]
 8007824:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	3330      	adds	r3, #48	; 0x30
 800782a:	461a      	mov	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	0a1b      	lsrs	r3, r3, #8
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	f003 030c 	and.w	r3, r3, #12
 8007836:	4413      	add	r3, r2
 8007838:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f003 031f 	and.w	r3, r3, #31
 8007844:	211f      	movs	r1, #31
 8007846:	fa01 f303 	lsl.w	r3, r1, r3
 800784a:	43db      	mvns	r3, r3
 800784c:	401a      	ands	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	0e9b      	lsrs	r3, r3, #26
 8007852:	f003 011f 	and.w	r1, r3, #31
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f003 031f 	and.w	r3, r3, #31
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	431a      	orrs	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8007872:	b480      	push	{r7}
 8007874:	b083      	sub	sp, #12
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800787e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	370c      	adds	r7, #12
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007898:	b480      	push	{r7}
 800789a:	b087      	sub	sp, #28
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	3314      	adds	r3, #20
 80078a8:	461a      	mov	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	0e5b      	lsrs	r3, r3, #25
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	4413      	add	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	0d1b      	lsrs	r3, r3, #20
 80078c0:	f003 031f 	and.w	r3, r3, #31
 80078c4:	2107      	movs	r1, #7
 80078c6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ca:	43db      	mvns	r3, r3
 80078cc:	401a      	ands	r2, r3
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	0d1b      	lsrs	r3, r3, #20
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	fa01 f303 	lsl.w	r3, r1, r3
 80078dc:	431a      	orrs	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80078e2:	bf00      	nop
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
	...

080078f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	4a1a      	ldr	r2, [pc, #104]	; (8007968 <LL_ADC_SetChannelSingleDiff+0x78>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d115      	bne.n	8007930 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007910:	43db      	mvns	r3, r3
 8007912:	401a      	ands	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f003 0318 	and.w	r3, r3, #24
 800791a:	4914      	ldr	r1, [pc, #80]	; (800796c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800791c:	40d9      	lsrs	r1, r3
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	400b      	ands	r3, r1
 8007922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007926:	431a      	orrs	r2, r3
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800792e:	e014      	b.n	800795a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800793c:	43db      	mvns	r3, r3
 800793e:	401a      	ands	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f003 0318 	and.w	r3, r3, #24
 8007946:	4909      	ldr	r1, [pc, #36]	; (800796c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8007948:	40d9      	lsrs	r1, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	400b      	ands	r3, r1
 800794e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007952:	431a      	orrs	r2, r3
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800795a:	bf00      	nop
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	58026000 	.word	0x58026000
 800796c:	000fffff 	.word	0x000fffff

08007970 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f003 031f 	and.w	r3, r3, #31
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800799c:	4618      	mov	r0, r3
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80079b6:	4013      	ands	r3, r2
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6093      	str	r3, [r2, #8]
}
 80079bc:	bf00      	nop
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	5fffffc0 	.word	0x5fffffc0

080079cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079e0:	d101      	bne.n	80079e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	4b05      	ldr	r3, [pc, #20]	; (8007a18 <LL_ADC_EnableInternalRegulator+0x24>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	6fffffc0 	.word	0x6fffffc0

08007a1c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a30:	d101      	bne.n	8007a36 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e000      	b.n	8007a38 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	689a      	ldr	r2, [r3, #8]
 8007a50:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <LL_ADC_Enable+0x24>)
 8007a52:	4013      	ands	r3, r2
 8007a54:	f043 0201 	orr.w	r2, r3, #1
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	7fffffc0 	.word	0x7fffffc0

08007a6c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689a      	ldr	r2, [r3, #8]
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <LL_ADC_Disable+0x24>)
 8007a7a:	4013      	ands	r3, r2
 8007a7c:	f043 0202 	orr.w	r2, r3, #2
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr
 8007a90:	7fffffc0 	.word	0x7fffffc0

08007a94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 0301 	and.w	r3, r3, #1
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <LL_ADC_IsEnabled+0x18>
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e000      	b.n	8007aae <LL_ADC_IsEnabled+0x1a>
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d101      	bne.n	8007ad2 <LL_ADC_IsDisableOngoing+0x18>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	e000      	b.n	8007ad4 <LL_ADC_IsDisableOngoing+0x1a>
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	370c      	adds	r7, #12
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <LL_ADC_REG_StartConversion+0x24>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	f043 0204 	orr.w	r2, r3, #4
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	7fffffc0 	.word	0x7fffffc0

08007b08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b04      	cmp	r3, #4
 8007b1a:	d101      	bne.n	8007b20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e000      	b.n	8007b22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 0308 	and.w	r3, r3, #8
 8007b3e:	2b08      	cmp	r3, #8
 8007b40:	d101      	bne.n	8007b46 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007b54:	b590      	push	{r4, r7, lr}
 8007b56:	b089      	sub	sp, #36	; 0x24
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e1ee      	b.n	8007f4c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d109      	bne.n	8007b90 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f7f9 f967 	bl	8000e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f7ff ff19 	bl	80079cc <LL_ADC_IsDeepPowerDownEnabled>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d004      	beq.n	8007baa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff feff 	bl	80079a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff ff34 	bl	8007a1c <LL_ADC_IsInternalRegulatorEnabled>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d114      	bne.n	8007be4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7ff ff18 	bl	80079f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007bc4:	4b8e      	ldr	r3, [pc, #568]	; (8007e00 <HAL_ADC_Init+0x2ac>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	099b      	lsrs	r3, r3, #6
 8007bca:	4a8e      	ldr	r2, [pc, #568]	; (8007e04 <HAL_ADC_Init+0x2b0>)
 8007bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd0:	099b      	lsrs	r3, r3, #6
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007bd6:	e002      	b.n	8007bde <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1f9      	bne.n	8007bd8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7ff ff17 	bl	8007a1c <LL_ADC_IsInternalRegulatorEnabled>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d10d      	bne.n	8007c10 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bf8:	f043 0210 	orr.w	r2, r3, #16
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c04:	f043 0201 	orr.w	r2, r3, #1
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7ff ff77 	bl	8007b08 <LL_ADC_REG_IsConversionOngoing>
 8007c1a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c20:	f003 0310 	and.w	r3, r3, #16
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	f040 8188 	bne.w	8007f3a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f040 8184 	bne.w	8007f3a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c36:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007c3a:	f043 0202 	orr.w	r2, r3, #2
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff ff24 	bl	8007a94 <LL_ADC_IsEnabled>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d136      	bne.n	8007cc0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a6c      	ldr	r2, [pc, #432]	; (8007e08 <HAL_ADC_Init+0x2b4>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d004      	beq.n	8007c66 <HAL_ADC_Init+0x112>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a6a      	ldr	r2, [pc, #424]	; (8007e0c <HAL_ADC_Init+0x2b8>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d10e      	bne.n	8007c84 <HAL_ADC_Init+0x130>
 8007c66:	4868      	ldr	r0, [pc, #416]	; (8007e08 <HAL_ADC_Init+0x2b4>)
 8007c68:	f7ff ff14 	bl	8007a94 <LL_ADC_IsEnabled>
 8007c6c:	4604      	mov	r4, r0
 8007c6e:	4867      	ldr	r0, [pc, #412]	; (8007e0c <HAL_ADC_Init+0x2b8>)
 8007c70:	f7ff ff10 	bl	8007a94 <LL_ADC_IsEnabled>
 8007c74:	4603      	mov	r3, r0
 8007c76:	4323      	orrs	r3, r4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bf0c      	ite	eq
 8007c7c:	2301      	moveq	r3, #1
 8007c7e:	2300      	movne	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	e008      	b.n	8007c96 <HAL_ADC_Init+0x142>
 8007c84:	4862      	ldr	r0, [pc, #392]	; (8007e10 <HAL_ADC_Init+0x2bc>)
 8007c86:	f7ff ff05 	bl	8007a94 <LL_ADC_IsEnabled>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	bf0c      	ite	eq
 8007c90:	2301      	moveq	r3, #1
 8007c92:	2300      	movne	r3, #0
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d012      	beq.n	8007cc0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a5a      	ldr	r2, [pc, #360]	; (8007e08 <HAL_ADC_Init+0x2b4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d004      	beq.n	8007cae <HAL_ADC_Init+0x15a>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a58      	ldr	r2, [pc, #352]	; (8007e0c <HAL_ADC_Init+0x2b8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d101      	bne.n	8007cb2 <HAL_ADC_Init+0x15e>
 8007cae:	4a59      	ldr	r2, [pc, #356]	; (8007e14 <HAL_ADC_Init+0x2c0>)
 8007cb0:	e000      	b.n	8007cb4 <HAL_ADC_Init+0x160>
 8007cb2:	4a59      	ldr	r2, [pc, #356]	; (8007e18 <HAL_ADC_Init+0x2c4>)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	4610      	mov	r0, r2
 8007cbc:	f7ff fc74 	bl	80075a8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a52      	ldr	r2, [pc, #328]	; (8007e10 <HAL_ADC_Init+0x2bc>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d129      	bne.n	8007d1e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	7e5b      	ldrb	r3, [r3, #25]
 8007cce:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007cd4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8007cda:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d013      	beq.n	8007d0c <HAL_ADC_Init+0x1b8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	2b0c      	cmp	r3, #12
 8007cea:	d00d      	beq.n	8007d08 <HAL_ADC_Init+0x1b4>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	2b1c      	cmp	r3, #28
 8007cf2:	d007      	beq.n	8007d04 <HAL_ADC_Init+0x1b0>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	2b18      	cmp	r3, #24
 8007cfa:	d101      	bne.n	8007d00 <HAL_ADC_Init+0x1ac>
 8007cfc:	2318      	movs	r3, #24
 8007cfe:	e006      	b.n	8007d0e <HAL_ADC_Init+0x1ba>
 8007d00:	2300      	movs	r3, #0
 8007d02:	e004      	b.n	8007d0e <HAL_ADC_Init+0x1ba>
 8007d04:	2310      	movs	r3, #16
 8007d06:	e002      	b.n	8007d0e <HAL_ADC_Init+0x1ba>
 8007d08:	2308      	movs	r3, #8
 8007d0a:	e000      	b.n	8007d0e <HAL_ADC_Init+0x1ba>
 8007d0c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8007d0e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d16:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	61bb      	str	r3, [r7, #24]
 8007d1c:	e00e      	b.n	8007d3c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7e5b      	ldrb	r3, [r3, #25]
 8007d22:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007d28:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007d2e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d36:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d106      	bne.n	8007d54 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	045b      	lsls	r3, r3, #17
 8007d4e:	69ba      	ldr	r2, [r7, #24]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d009      	beq.n	8007d70 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d68:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007d6a:	69ba      	ldr	r2, [r7, #24]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a26      	ldr	r2, [pc, #152]	; (8007e10 <HAL_ADC_Init+0x2bc>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d115      	bne.n	8007da6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	4b26      	ldr	r3, [pc, #152]	; (8007e1c <HAL_ADC_Init+0x2c8>)
 8007d82:	4013      	ands	r3, r2
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6812      	ldr	r2, [r2, #0]
 8007d88:	69b9      	ldr	r1, [r7, #24]
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	430a      	orrs	r2, r1
 8007da2:	611a      	str	r2, [r3, #16]
 8007da4:	e009      	b.n	8007dba <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68da      	ldr	r2, [r3, #12]
 8007dac:	4b1c      	ldr	r3, [pc, #112]	; (8007e20 <HAL_ADC_Init+0x2cc>)
 8007dae:	4013      	ands	r3, r2
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6812      	ldr	r2, [r2, #0]
 8007db4:	69b9      	ldr	r1, [r7, #24]
 8007db6:	430b      	orrs	r3, r1
 8007db8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff fea2 	bl	8007b08 <LL_ADC_REG_IsConversionOngoing>
 8007dc4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff feaf 	bl	8007b2e <LL_ADC_INJ_IsConversionOngoing>
 8007dd0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f040 808e 	bne.w	8007ef6 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f040 808a 	bne.w	8007ef6 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a0a      	ldr	r2, [pc, #40]	; (8007e10 <HAL_ADC_Init+0x2bc>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d11b      	bne.n	8007e24 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	7e1b      	ldrb	r3, [r3, #24]
 8007df0:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007df8:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	e018      	b.n	8007e32 <HAL_ADC_Init+0x2de>
 8007e00:	20000020 	.word	0x20000020
 8007e04:	053e2d63 	.word	0x053e2d63
 8007e08:	40022000 	.word	0x40022000
 8007e0c:	40022100 	.word	0x40022100
 8007e10:	58026000 	.word	0x58026000
 8007e14:	40022300 	.word	0x40022300
 8007e18:	58026300 	.word	0x58026300
 8007e1c:	fff04007 	.word	0xfff04007
 8007e20:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	7e1b      	ldrb	r3, [r3, #24]
 8007e28:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68da      	ldr	r2, [r3, #12]
 8007e38:	4b46      	ldr	r3, [pc, #280]	; (8007f54 <HAL_ADC_Init+0x400>)
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6812      	ldr	r2, [r2, #0]
 8007e40:	69b9      	ldr	r1, [r7, #24]
 8007e42:	430b      	orrs	r3, r1
 8007e44:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d137      	bne.n	8007ec0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e54:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a3f      	ldr	r2, [pc, #252]	; (8007f58 <HAL_ADC_Init+0x404>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d116      	bne.n	8007e8e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691a      	ldr	r2, [r3, #16]
 8007e66:	4b3d      	ldr	r3, [pc, #244]	; (8007f5c <HAL_ADC_Init+0x408>)
 8007e68:	4013      	ands	r3, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007e72:	4311      	orrs	r1, r2
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007e78:	4311      	orrs	r1, r2
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007e7e:	430a      	orrs	r2, r1
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0201 	orr.w	r2, r2, #1
 8007e8a:	611a      	str	r2, [r3, #16]
 8007e8c:	e020      	b.n	8007ed0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	4b32      	ldr	r3, [pc, #200]	; (8007f60 <HAL_ADC_Init+0x40c>)
 8007e96:	4013      	ands	r3, r2
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007e9c:	3a01      	subs	r2, #1
 8007e9e:	0411      	lsls	r1, r2, #16
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007ea4:	4311      	orrs	r1, r2
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007eaa:	4311      	orrs	r1, r2
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f042 0201 	orr.w	r2, r2, #1
 8007ebc:	611a      	str	r2, [r3, #16]
 8007ebe:	e007      	b.n	8007ed0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	691a      	ldr	r2, [r3, #16]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f022 0201 	bic.w	r2, r2, #1
 8007ece:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	691b      	ldr	r3, [r3, #16]
 8007ed6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	430a      	orrs	r2, r1
 8007ee4:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a1b      	ldr	r2, [pc, #108]	; (8007f58 <HAL_ADC_Init+0x404>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d002      	beq.n	8007ef6 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f001 f9e9 	bl	80092c8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d10c      	bne.n	8007f18 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	f023 010f 	bic.w	r1, r3, #15
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	1e5a      	subs	r2, r3, #1
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	631a      	str	r2, [r3, #48]	; 0x30
 8007f16:	e007      	b.n	8007f28 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 020f 	bic.w	r2, r2, #15
 8007f26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f2c:	f023 0303 	bic.w	r3, r3, #3
 8007f30:	f043 0201 	orr.w	r2, r3, #1
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	661a      	str	r2, [r3, #96]	; 0x60
 8007f38:	e007      	b.n	8007f4a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f3e:	f043 0210 	orr.w	r2, r3, #16
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007f4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3724      	adds	r7, #36	; 0x24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd90      	pop	{r4, r7, pc}
 8007f54:	ffffbffc 	.word	0xffffbffc
 8007f58:	58026000 	.word	0x58026000
 8007f5c:	fc00f81f 	.word	0xfc00f81f
 8007f60:	fc00f81e 	.word	0xfc00f81e

08007f64 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a90      	ldr	r2, [pc, #576]	; (80081b4 <HAL_ADC_Start_IT+0x250>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d004      	beq.n	8007f80 <HAL_ADC_Start_IT+0x1c>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a8f      	ldr	r2, [pc, #572]	; (80081b8 <HAL_ADC_Start_IT+0x254>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d101      	bne.n	8007f84 <HAL_ADC_Start_IT+0x20>
 8007f80:	4b8e      	ldr	r3, [pc, #568]	; (80081bc <HAL_ADC_Start_IT+0x258>)
 8007f82:	e000      	b.n	8007f86 <HAL_ADC_Start_IT+0x22>
 8007f84:	4b8e      	ldr	r3, [pc, #568]	; (80081c0 <HAL_ADC_Start_IT+0x25c>)
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff fcf2 	bl	8007970 <LL_ADC_GetMultimode>
 8007f8c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff fdb8 	bl	8007b08 <LL_ADC_REG_IsConversionOngoing>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f040 8119 	bne.w	80081d2 <HAL_ADC_Start_IT+0x26e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d101      	bne.n	8007fae <HAL_ADC_Start_IT+0x4a>
 8007faa:	2302      	movs	r3, #2
 8007fac:	e116      	b.n	80081dc <HAL_ADC_Start_IT+0x278>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 f89c 	bl	80090f4 <ADC_Enable>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	f040 8100 	bne.w	80081c8 <HAL_ADC_Start_IT+0x264>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007fcc:	4b7d      	ldr	r3, [pc, #500]	; (80081c4 <HAL_ADC_Start_IT+0x260>)
 8007fce:	4013      	ands	r3, r2
 8007fd0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a76      	ldr	r2, [pc, #472]	; (80081b8 <HAL_ADC_Start_IT+0x254>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d002      	beq.n	8007fe8 <HAL_ADC_Start_IT+0x84>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	e000      	b.n	8007fea <HAL_ADC_Start_IT+0x86>
 8007fe8:	4b72      	ldr	r3, [pc, #456]	; (80081b4 <HAL_ADC_Start_IT+0x250>)
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	6812      	ldr	r2, [r2, #0]
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d002      	beq.n	8007ff8 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d105      	bne.n	8008004 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008008:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d006      	beq.n	800801e <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008014:	f023 0206 	bic.w	r2, r3, #6
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	665a      	str	r2, [r3, #100]	; 0x64
 800801c:	e002      	b.n	8008024 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	221c      	movs	r2, #28
 800802a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 021c 	bic.w	r2, r2, #28
 8008042:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	2b08      	cmp	r3, #8
 800804a:	d108      	bne.n	800805e <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685a      	ldr	r2, [r3, #4]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0208 	orr.w	r2, r2, #8
 800805a:	605a      	str	r2, [r3, #4]
          break;
 800805c:	e008      	b.n	8008070 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f042 0204 	orr.w	r2, r2, #4
 800806c:	605a      	str	r2, [r3, #4]
          break;
 800806e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008074:	2b00      	cmp	r3, #0
 8008076:	d107      	bne.n	8008088 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0210 	orr.w	r2, r2, #16
 8008086:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a4a      	ldr	r2, [pc, #296]	; (80081b8 <HAL_ADC_Start_IT+0x254>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d002      	beq.n	8008098 <HAL_ADC_Start_IT+0x134>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	e000      	b.n	800809a <HAL_ADC_Start_IT+0x136>
 8008098:	4b46      	ldr	r3, [pc, #280]	; (80081b4 <HAL_ADC_Start_IT+0x250>)
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	6812      	ldr	r2, [r2, #0]
 800809e:	4293      	cmp	r3, r2
 80080a0:	d008      	beq.n	80080b4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d005      	beq.n	80080b4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	2b05      	cmp	r3, #5
 80080ac:	d002      	beq.n	80080b4 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2b09      	cmp	r3, #9
 80080b2:	d13b      	bne.n	800812c <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d02d      	beq.n	800811e <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80080ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	695b      	ldr	r3, [r3, #20]
 80080d6:	2b08      	cmp	r3, #8
 80080d8:	d110      	bne.n	80080fc <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f022 0220 	bic.w	r2, r2, #32
 80080e8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685a      	ldr	r2, [r3, #4]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080f8:	605a      	str	r2, [r3, #4]
              break;
 80080fa:	e011      	b.n	8008120 <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800810a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685a      	ldr	r2, [r3, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f042 0220 	orr.w	r2, r2, #32
 800811a:	605a      	str	r2, [r3, #4]
              break;
 800811c:	e000      	b.n	8008120 <HAL_ADC_Start_IT+0x1bc>
          }
        }
 800811e:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f7ff fcdb 	bl	8007ae0 <LL_ADC_REG_StartConversion>
 800812a:	e056      	b.n	80081da <HAL_ADC_Start_IT+0x276>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008130:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a1e      	ldr	r2, [pc, #120]	; (80081b8 <HAL_ADC_Start_IT+0x254>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d002      	beq.n	8008148 <HAL_ADC_Start_IT+0x1e4>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	e000      	b.n	800814a <HAL_ADC_Start_IT+0x1e6>
 8008148:	4b1a      	ldr	r3, [pc, #104]	; (80081b4 <HAL_ADC_Start_IT+0x250>)
 800814a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	68db      	ldr	r3, [r3, #12]
 8008150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d03f      	beq.n	80081d8 <HAL_ADC_Start_IT+0x274>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008160:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	2b08      	cmp	r3, #8
 800816e:	d110      	bne.n	8008192 <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 0220 	bic.w	r2, r2, #32
 800817e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800818e:	605a      	str	r2, [r3, #4]
              break;
 8008190:	e023      	b.n	80081da <HAL_ADC_Start_IT+0x276>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081a0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f042 0220 	orr.w	r2, r2, #32
 80081b0:	605a      	str	r2, [r3, #4]
              break;
 80081b2:	e012      	b.n	80081da <HAL_ADC_Start_IT+0x276>
 80081b4:	40022000 	.word	0x40022000
 80081b8:	40022100 	.word	0x40022100
 80081bc:	40022300 	.word	0x40022300
 80081c0:	58026300 	.word	0x58026300
 80081c4:	fffff0fe 	.word	0xfffff0fe
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80081d0:	e003      	b.n	80081da <HAL_ADC_Start_IT+0x276>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80081d2:	2302      	movs	r3, #2
 80081d4:	75fb      	strb	r3, [r7, #23]
 80081d6:	e000      	b.n	80081da <HAL_ADC_Start_IT+0x276>
        }
 80081d8:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3718      	adds	r7, #24
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
	...

08008200 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08a      	sub	sp, #40	; 0x28
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8008208:	2300      	movs	r3, #0
 800820a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a87      	ldr	r2, [pc, #540]	; (8008440 <HAL_ADC_IRQHandler+0x240>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d004      	beq.n	8008230 <HAL_ADC_IRQHandler+0x30>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a86      	ldr	r2, [pc, #536]	; (8008444 <HAL_ADC_IRQHandler+0x244>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d101      	bne.n	8008234 <HAL_ADC_IRQHandler+0x34>
 8008230:	4b85      	ldr	r3, [pc, #532]	; (8008448 <HAL_ADC_IRQHandler+0x248>)
 8008232:	e000      	b.n	8008236 <HAL_ADC_IRQHandler+0x36>
 8008234:	4b85      	ldr	r3, [pc, #532]	; (800844c <HAL_ADC_IRQHandler+0x24c>)
 8008236:	4618      	mov	r0, r3
 8008238:	f7ff fb9a 	bl	8007970 <LL_ADC_GetMultimode>
 800823c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d017      	beq.n	8008278 <HAL_ADC_IRQHandler+0x78>
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	f003 0302 	and.w	r3, r3, #2
 800824e:	2b00      	cmp	r3, #0
 8008250:	d012      	beq.n	8008278 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008256:	f003 0310 	and.w	r3, r3, #16
 800825a:	2b00      	cmp	r3, #0
 800825c:	d105      	bne.n	800826a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008262:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f001 f9fe 	bl	800966c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2202      	movs	r2, #2
 8008276:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	f003 0304 	and.w	r3, r3, #4
 800827e:	2b00      	cmp	r3, #0
 8008280:	d004      	beq.n	800828c <HAL_ADC_IRQHandler+0x8c>
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 8083 	beq.w	800839e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d07d      	beq.n	800839e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082a6:	f003 0310 	and.w	r3, r3, #16
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d105      	bne.n	80082ba <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff fa98 	bl	80077f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d062      	beq.n	8008390 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a5d      	ldr	r2, [pc, #372]	; (8008444 <HAL_ADC_IRQHandler+0x244>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d002      	beq.n	80082da <HAL_ADC_IRQHandler+0xda>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	e000      	b.n	80082dc <HAL_ADC_IRQHandler+0xdc>
 80082da:	4b59      	ldr	r3, [pc, #356]	; (8008440 <HAL_ADC_IRQHandler+0x240>)
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	6812      	ldr	r2, [r2, #0]
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d008      	beq.n	80082f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d005      	beq.n	80082f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b05      	cmp	r3, #5
 80082ee:	d002      	beq.n	80082f6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2b09      	cmp	r3, #9
 80082f4:	d104      	bne.n	8008300 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	623b      	str	r3, [r7, #32]
 80082fe:	e00c      	b.n	800831a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a4f      	ldr	r2, [pc, #316]	; (8008444 <HAL_ADC_IRQHandler+0x244>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d002      	beq.n	8008310 <HAL_ADC_IRQHandler+0x110>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	e000      	b.n	8008312 <HAL_ADC_IRQHandler+0x112>
 8008310:	4b4b      	ldr	r3, [pc, #300]	; (8008440 <HAL_ADC_IRQHandler+0x240>)
 8008312:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d135      	bne.n	8008390 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	2b08      	cmp	r3, #8
 8008330:	d12e      	bne.n	8008390 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff fbe6 	bl	8007b08 <LL_ADC_REG_IsConversionOngoing>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d11a      	bne.n	8008378 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685a      	ldr	r2, [r3, #4]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f022 020c 	bic.w	r2, r2, #12
 8008350:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008356:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d112      	bne.n	8008390 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800836e:	f043 0201 	orr.w	r2, r3, #1
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	661a      	str	r2, [r3, #96]	; 0x60
 8008376:	e00b      	b.n	8008390 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837c:	f043 0210 	orr.w	r2, r3, #16
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008388:	f043 0201 	orr.w	r2, r3, #1
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f7fb f9b3 	bl	80036fc <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	220c      	movs	r2, #12
 800839c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	f003 0320 	and.w	r3, r3, #32
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d004      	beq.n	80083b2 <HAL_ADC_IRQHandler+0x1b2>
 80083a8:	69bb      	ldr	r3, [r7, #24]
 80083aa:	f003 0320 	and.w	r3, r3, #32
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10b      	bne.n	80083ca <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 80a0 	beq.w	80084fe <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80083be:	69bb      	ldr	r3, [r7, #24]
 80083c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	f000 809a 	beq.w	80084fe <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083ce:	f003 0310 	and.w	r3, r3, #16
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d105      	bne.n	80083e2 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083da:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff fa43 	bl	8007872 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80083ec:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7ff f9fe 	bl	80077f4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80083f8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a11      	ldr	r2, [pc, #68]	; (8008444 <HAL_ADC_IRQHandler+0x244>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d002      	beq.n	800840a <HAL_ADC_IRQHandler+0x20a>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	e000      	b.n	800840c <HAL_ADC_IRQHandler+0x20c>
 800840a:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <HAL_ADC_IRQHandler+0x240>)
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	6812      	ldr	r2, [r2, #0]
 8008410:	4293      	cmp	r3, r2
 8008412:	d008      	beq.n	8008426 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b06      	cmp	r3, #6
 800841e:	d002      	beq.n	8008426 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2b07      	cmp	r3, #7
 8008424:	d104      	bne.n	8008430 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	623b      	str	r3, [r7, #32]
 800842e:	e014      	b.n	800845a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a03      	ldr	r2, [pc, #12]	; (8008444 <HAL_ADC_IRQHandler+0x244>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00a      	beq.n	8008450 <HAL_ADC_IRQHandler+0x250>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	e008      	b.n	8008452 <HAL_ADC_IRQHandler+0x252>
 8008440:	40022000 	.word	0x40022000
 8008444:	40022100 	.word	0x40022100
 8008448:	40022300 	.word	0x40022300
 800844c:	58026300 	.word	0x58026300
 8008450:	4b84      	ldr	r3, [pc, #528]	; (8008664 <HAL_ADC_IRQHandler+0x464>)
 8008452:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d047      	beq.n	80084f0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d007      	beq.n	800847a <HAL_ADC_IRQHandler+0x27a>
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d03f      	beq.n	80084f0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8008476:	2b00      	cmp	r3, #0
 8008478:	d13a      	bne.n	80084f0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008484:	2b40      	cmp	r3, #64	; 0x40
 8008486:	d133      	bne.n	80084f0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800848e:	2b00      	cmp	r3, #0
 8008490:	d12e      	bne.n	80084f0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff fb49 	bl	8007b2e <LL_ADC_INJ_IsConversionOngoing>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d11a      	bne.n	80084d8 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80084b0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d112      	bne.n	80084f0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084ce:	f043 0201 	orr.w	r2, r3, #1
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	661a      	str	r2, [r3, #96]	; 0x60
 80084d6:	e00b      	b.n	80084f0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80084dc:	f043 0210 	orr.w	r2, r3, #16
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084e8:	f043 0201 	orr.w	r2, r3, #1
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 f893 	bl	800961c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2260      	movs	r2, #96	; 0x60
 80084fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80084fe:	69fb      	ldr	r3, [r7, #28]
 8008500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008504:	2b00      	cmp	r3, #0
 8008506:	d011      	beq.n	800852c <HAL_ADC_IRQHandler+0x32c>
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00c      	beq.n	800852c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 f8a8 	bl	8008674 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	2280      	movs	r2, #128	; 0x80
 800852a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008532:	2b00      	cmp	r3, #0
 8008534:	d012      	beq.n	800855c <HAL_ADC_IRQHandler+0x35c>
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00d      	beq.n	800855c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008544:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 f879 	bl	8009644 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f44f 7280 	mov.w	r2, #256	; 0x100
 800855a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800855c:	69fb      	ldr	r3, [r7, #28]
 800855e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008562:	2b00      	cmp	r3, #0
 8008564:	d012      	beq.n	800858c <HAL_ADC_IRQHandler+0x38c>
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00d      	beq.n	800858c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008574:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f001 f86b 	bl	8009658 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800858a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800858c:	69fb      	ldr	r3, [r7, #28]
 800858e:	f003 0310 	and.w	r3, r3, #16
 8008592:	2b00      	cmp	r3, #0
 8008594:	d043      	beq.n	800861e <HAL_ADC_IRQHandler+0x41e>
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	f003 0310 	and.w	r3, r3, #16
 800859c:	2b00      	cmp	r3, #0
 800859e:	d03e      	beq.n	800861e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d102      	bne.n	80085ae <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80085a8:	2301      	movs	r3, #1
 80085aa:	627b      	str	r3, [r7, #36]	; 0x24
 80085ac:	e021      	b.n	80085f2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d015      	beq.n	80085e0 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a2a      	ldr	r2, [pc, #168]	; (8008664 <HAL_ADC_IRQHandler+0x464>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <HAL_ADC_IRQHandler+0x3c8>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a29      	ldr	r2, [pc, #164]	; (8008668 <HAL_ADC_IRQHandler+0x468>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d101      	bne.n	80085cc <HAL_ADC_IRQHandler+0x3cc>
 80085c8:	4b28      	ldr	r3, [pc, #160]	; (800866c <HAL_ADC_IRQHandler+0x46c>)
 80085ca:	e000      	b.n	80085ce <HAL_ADC_IRQHandler+0x3ce>
 80085cc:	4b28      	ldr	r3, [pc, #160]	; (8008670 <HAL_ADC_IRQHandler+0x470>)
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7ff f9dc 	bl	800798c <LL_ADC_GetMultiDMATransfer>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00b      	beq.n	80085f2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80085da:	2301      	movs	r3, #1
 80085dc:	627b      	str	r3, [r7, #36]	; 0x24
 80085de:	e008      	b.n	80085f2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d001      	beq.n	80085f2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80085ee:	2301      	movs	r3, #1
 80085f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d10e      	bne.n	8008616 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008608:	f043 0202 	orr.w	r2, r3, #2
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f000 f839 	bl	8008688 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2210      	movs	r2, #16
 800861c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008624:	2b00      	cmp	r3, #0
 8008626:	d018      	beq.n	800865a <HAL_ADC_IRQHandler+0x45a>
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800862e:	2b00      	cmp	r3, #0
 8008630:	d013      	beq.n	800865a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008636:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008642:	f043 0208 	orr.w	r2, r3, #8
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008652:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 ffeb 	bl	8009630 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800865a:	bf00      	nop
 800865c:	3728      	adds	r7, #40	; 0x28
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	40022000 	.word	0x40022000
 8008668:	40022100 	.word	0x40022100
 800866c:	40022300 	.word	0x40022300
 8008670:	58026300 	.word	0x58026300

08008674 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b0b9      	sub	sp, #228	; 0xe4
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
 80086a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086b6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	4aa9      	ldr	r2, [pc, #676]	; (8008964 <HAL_ADC_ConfigChannel+0x2c8>)
 80086be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d102      	bne.n	80086d0 <HAL_ADC_ConfigChannel+0x34>
 80086ca:	2302      	movs	r3, #2
 80086cc:	f000 bcfa 	b.w	80090c4 <HAL_ADC_ConfigChannel+0xa28>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff fa13 	bl	8007b08 <LL_ADC_REG_IsConversionOngoing>
 80086e2:	4603      	mov	r3, r0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f040 84de 	bne.w	80090a6 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a9e      	ldr	r2, [pc, #632]	; (8008968 <HAL_ADC_ConfigChannel+0x2cc>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d033      	beq.n	800875c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d108      	bne.n	8008712 <HAL_ADC_ConfigChannel+0x76>
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	0e9b      	lsrs	r3, r3, #26
 8008706:	f003 031f 	and.w	r3, r3, #31
 800870a:	2201      	movs	r2, #1
 800870c:	fa02 f303 	lsl.w	r3, r2, r3
 8008710:	e01d      	b.n	800874e <HAL_ADC_ConfigChannel+0xb2>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800871a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800871e:	fa93 f3a3 	rbit	r3, r3
 8008722:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8008726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800872a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800872e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8008736:	2320      	movs	r3, #32
 8008738:	e004      	b.n	8008744 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800873a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800873e:	fab3 f383 	clz	r3, r3
 8008742:	b2db      	uxtb	r3, r3
 8008744:	f003 031f 	and.w	r3, r3, #31
 8008748:	2201      	movs	r2, #1
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	687a      	ldr	r2, [r7, #4]
 8008750:	6812      	ldr	r2, [r2, #0]
 8008752:	69d1      	ldr	r1, [r2, #28]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	6812      	ldr	r2, [r2, #0]
 8008758:	430b      	orrs	r3, r1
 800875a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6818      	ldr	r0, [r3, #0]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	6859      	ldr	r1, [r3, #4]
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	461a      	mov	r2, r3
 800876a:	f7ff f856 	bl	800781a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4618      	mov	r0, r3
 8008774:	f7ff f9c8 	bl	8007b08 <LL_ADC_REG_IsConversionOngoing>
 8008778:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff f9d4 	bl	8007b2e <LL_ADC_INJ_IsConversionOngoing>
 8008786:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800878a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800878e:	2b00      	cmp	r3, #0
 8008790:	f040 8270 	bne.w	8008c74 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008794:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8008798:	2b00      	cmp	r3, #0
 800879a:	f040 826b 	bne.w	8008c74 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6818      	ldr	r0, [r3, #0]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6819      	ldr	r1, [r3, #0]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f7ff f874 	bl	8007898 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a6c      	ldr	r2, [pc, #432]	; (8008968 <HAL_ADC_ConfigChannel+0x2cc>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d10d      	bne.n	80087d6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	08db      	lsrs	r3, r3, #3
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	005b      	lsls	r3, r3, #1
 80087cc:	fa02 f303 	lsl.w	r3, r2, r3
 80087d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80087d4:	e032      	b.n	800883c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80087d6:	4b65      	ldr	r3, [pc, #404]	; (800896c <HAL_ADC_ConfigChannel+0x2d0>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087e2:	d10b      	bne.n	80087fc <HAL_ADC_ConfigChannel+0x160>
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	695a      	ldr	r2, [r3, #20]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	089b      	lsrs	r3, r3, #2
 80087f0:	f003 0307 	and.w	r3, r3, #7
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	fa02 f303 	lsl.w	r3, r2, r3
 80087fa:	e01d      	b.n	8008838 <HAL_ADC_ConfigChannel+0x19c>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f003 0310 	and.w	r3, r3, #16
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10b      	bne.n	8008822 <HAL_ADC_ConfigChannel+0x186>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	695a      	ldr	r2, [r3, #20]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	089b      	lsrs	r3, r3, #2
 8008816:	f003 0307 	and.w	r3, r3, #7
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	fa02 f303 	lsl.w	r3, r2, r3
 8008820:	e00a      	b.n	8008838 <HAL_ADC_ConfigChannel+0x19c>
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	695a      	ldr	r2, [r3, #20]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	089b      	lsrs	r3, r3, #2
 800882e:	f003 0304 	and.w	r3, r3, #4
 8008832:	005b      	lsls	r3, r3, #1
 8008834:	fa02 f303 	lsl.w	r3, r2, r3
 8008838:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	2b04      	cmp	r3, #4
 8008842:	d048      	beq.n	80088d6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6818      	ldr	r0, [r3, #0]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	6919      	ldr	r1, [r3, #16]
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008854:	f7fe fedc 	bl	8007610 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a42      	ldr	r2, [pc, #264]	; (8008968 <HAL_ADC_ConfigChannel+0x2cc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d119      	bne.n	8008896 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6818      	ldr	r0, [r3, #0]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	6919      	ldr	r1, [r3, #16]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	461a      	mov	r2, r3
 8008870:	f7fe ff74 	bl	800775c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6818      	ldr	r0, [r3, #0]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	6919      	ldr	r1, [r3, #16]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d102      	bne.n	800888c <HAL_ADC_ConfigChannel+0x1f0>
 8008886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800888a:	e000      	b.n	800888e <HAL_ADC_ConfigChannel+0x1f2>
 800888c:	2300      	movs	r3, #0
 800888e:	461a      	mov	r2, r3
 8008890:	f7fe ff42 	bl	8007718 <LL_ADC_SetOffsetSaturation>
 8008894:	e1ee      	b.n	8008c74 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6818      	ldr	r0, [r3, #0]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	6919      	ldr	r1, [r3, #16]
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d102      	bne.n	80088ae <HAL_ADC_ConfigChannel+0x212>
 80088a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ac:	e000      	b.n	80088b0 <HAL_ADC_ConfigChannel+0x214>
 80088ae:	2300      	movs	r3, #0
 80088b0:	461a      	mov	r2, r3
 80088b2:	f7fe ff0f 	bl	80076d4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	6919      	ldr	r1, [r3, #16]
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	7e1b      	ldrb	r3, [r3, #24]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d102      	bne.n	80088cc <HAL_ADC_ConfigChannel+0x230>
 80088c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088ca:	e000      	b.n	80088ce <HAL_ADC_ConfigChannel+0x232>
 80088cc:	2300      	movs	r3, #0
 80088ce:	461a      	mov	r2, r3
 80088d0:	f7fe fee6 	bl	80076a0 <LL_ADC_SetDataRightShift>
 80088d4:	e1ce      	b.n	8008c74 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a23      	ldr	r2, [pc, #140]	; (8008968 <HAL_ADC_ConfigChannel+0x2cc>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	f040 8181 	bne.w	8008be4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2100      	movs	r1, #0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f7fe fec3 	bl	8007674 <LL_ADC_GetOffsetChannel>
 80088ee:	4603      	mov	r3, r0
 80088f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10a      	bne.n	800890e <HAL_ADC_ConfigChannel+0x272>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe feb8 	bl	8007674 <LL_ADC_GetOffsetChannel>
 8008904:	4603      	mov	r3, r0
 8008906:	0e9b      	lsrs	r3, r3, #26
 8008908:	f003 021f 	and.w	r2, r3, #31
 800890c:	e01e      	b.n	800894c <HAL_ADC_ConfigChannel+0x2b0>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2100      	movs	r1, #0
 8008914:	4618      	mov	r0, r3
 8008916:	f7fe fead 	bl	8007674 <LL_ADC_GetOffsetChannel>
 800891a:	4603      	mov	r3, r0
 800891c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008920:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008924:	fa93 f3a3 	rbit	r3, r3
 8008928:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800892c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008930:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8008934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800893c:	2320      	movs	r3, #32
 800893e:	e004      	b.n	800894a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8008940:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008944:	fab3 f383 	clz	r3, r3
 8008948:	b2db      	uxtb	r3, r3
 800894a:	461a      	mov	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10b      	bne.n	8008970 <HAL_ADC_ConfigChannel+0x2d4>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	0e9b      	lsrs	r3, r3, #26
 800895e:	f003 031f 	and.w	r3, r3, #31
 8008962:	e01e      	b.n	80089a2 <HAL_ADC_ConfigChannel+0x306>
 8008964:	47ff0000 	.word	0x47ff0000
 8008968:	58026000 	.word	0x58026000
 800896c:	5c001000 	.word	0x5c001000
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800897c:	fa93 f3a3 	rbit	r3, r3
 8008980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8008984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800898c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d101      	bne.n	8008998 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8008994:	2320      	movs	r3, #32
 8008996:	e004      	b.n	80089a2 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8008998:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800899c:	fab3 f383 	clz	r3, r3
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	429a      	cmp	r2, r3
 80089a4:	d106      	bne.n	80089b4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2200      	movs	r2, #0
 80089ac:	2100      	movs	r1, #0
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fef6 	bl	80077a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2101      	movs	r1, #1
 80089ba:	4618      	mov	r0, r3
 80089bc:	f7fe fe5a 	bl	8007674 <LL_ADC_GetOffsetChannel>
 80089c0:	4603      	mov	r3, r0
 80089c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10a      	bne.n	80089e0 <HAL_ADC_ConfigChannel+0x344>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2101      	movs	r1, #1
 80089d0:	4618      	mov	r0, r3
 80089d2:	f7fe fe4f 	bl	8007674 <LL_ADC_GetOffsetChannel>
 80089d6:	4603      	mov	r3, r0
 80089d8:	0e9b      	lsrs	r3, r3, #26
 80089da:	f003 021f 	and.w	r2, r3, #31
 80089de:	e01e      	b.n	8008a1e <HAL_ADC_ConfigChannel+0x382>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2101      	movs	r1, #1
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7fe fe44 	bl	8007674 <LL_ADC_GetOffsetChannel>
 80089ec:	4603      	mov	r3, r0
 80089ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80089f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089f6:	fa93 f3a3 	rbit	r3, r3
 80089fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80089fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8008a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8008a0e:	2320      	movs	r3, #32
 8008a10:	e004      	b.n	8008a1c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8008a12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a16:	fab3 f383 	clz	r3, r3
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d105      	bne.n	8008a36 <HAL_ADC_ConfigChannel+0x39a>
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	0e9b      	lsrs	r3, r3, #26
 8008a30:	f003 031f 	and.w	r3, r3, #31
 8008a34:	e018      	b.n	8008a68 <HAL_ADC_ConfigChannel+0x3cc>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008a42:	fa93 f3a3 	rbit	r3, r3
 8008a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8008a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008a4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8008a52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8008a5a:	2320      	movs	r3, #32
 8008a5c:	e004      	b.n	8008a68 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8008a5e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a62:	fab3 f383 	clz	r3, r3
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d106      	bne.n	8008a7a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2200      	movs	r2, #0
 8008a72:	2101      	movs	r1, #1
 8008a74:	4618      	mov	r0, r3
 8008a76:	f7fe fe93 	bl	80077a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	2102      	movs	r1, #2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fe fdf7 	bl	8007674 <LL_ADC_GetOffsetChannel>
 8008a86:	4603      	mov	r3, r0
 8008a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d10a      	bne.n	8008aa6 <HAL_ADC_ConfigChannel+0x40a>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2102      	movs	r1, #2
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe fdec 	bl	8007674 <LL_ADC_GetOffsetChannel>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	0e9b      	lsrs	r3, r3, #26
 8008aa0:	f003 021f 	and.w	r2, r3, #31
 8008aa4:	e01e      	b.n	8008ae4 <HAL_ADC_ConfigChannel+0x448>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	2102      	movs	r1, #2
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fe fde1 	bl	8007674 <LL_ADC_GetOffsetChannel>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008abc:	fa93 f3a3 	rbit	r3, r3
 8008ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8008ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ac8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8008acc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d101      	bne.n	8008ad8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	e004      	b.n	8008ae2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8008ad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008adc:	fab3 f383 	clz	r3, r3
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d105      	bne.n	8008afc <HAL_ADC_ConfigChannel+0x460>
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	0e9b      	lsrs	r3, r3, #26
 8008af6:	f003 031f 	and.w	r3, r3, #31
 8008afa:	e014      	b.n	8008b26 <HAL_ADC_ConfigChannel+0x48a>
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b04:	fa93 f3a3 	rbit	r3, r3
 8008b08:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8008b0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8008b10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8008b18:	2320      	movs	r3, #32
 8008b1a:	e004      	b.n	8008b26 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8008b1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008b20:	fab3 f383 	clz	r3, r3
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d106      	bne.n	8008b38 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	2102      	movs	r1, #2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fe34 	bl	80077a0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	2103      	movs	r1, #3
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fe fd98 	bl	8007674 <LL_ADC_GetOffsetChannel>
 8008b44:	4603      	mov	r3, r0
 8008b46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10a      	bne.n	8008b64 <HAL_ADC_ConfigChannel+0x4c8>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2103      	movs	r1, #3
 8008b54:	4618      	mov	r0, r3
 8008b56:	f7fe fd8d 	bl	8007674 <LL_ADC_GetOffsetChannel>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	0e9b      	lsrs	r3, r3, #26
 8008b5e:	f003 021f 	and.w	r2, r3, #31
 8008b62:	e017      	b.n	8008b94 <HAL_ADC_ConfigChannel+0x4f8>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2103      	movs	r1, #3
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fe fd82 	bl	8007674 <LL_ADC_GetOffsetChannel>
 8008b70:	4603      	mov	r3, r0
 8008b72:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b76:	fa93 f3a3 	rbit	r3, r3
 8008b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b7e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8008b80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8008b86:	2320      	movs	r3, #32
 8008b88:	e003      	b.n	8008b92 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8008b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b8c:	fab3 f383 	clz	r3, r3
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	461a      	mov	r2, r3
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d105      	bne.n	8008bac <HAL_ADC_ConfigChannel+0x510>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	0e9b      	lsrs	r3, r3, #26
 8008ba6:	f003 031f 	and.w	r3, r3, #31
 8008baa:	e011      	b.n	8008bd0 <HAL_ADC_ConfigChannel+0x534>
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008bb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bb4:	fa93 f3a3 	rbit	r3, r3
 8008bb8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8008bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bbc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8008bbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d101      	bne.n	8008bc8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	e003      	b.n	8008bd0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8008bc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bca:	fab3 f383 	clz	r3, r3
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d14f      	bne.n	8008c74 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	2103      	movs	r1, #3
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe fddf 	bl	80077a0 <LL_ADC_SetOffsetState>
 8008be2:	e047      	b.n	8008c74 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	069b      	lsls	r3, r3, #26
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d107      	bne.n	8008c08 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008c06:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	069b      	lsls	r3, r3, #26
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d107      	bne.n	8008c2c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008c2a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	069b      	lsls	r3, r3, #26
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d107      	bne.n	8008c50 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008c4e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	069b      	lsls	r3, r3, #26
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d107      	bne.n	8008c74 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008c72:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fe ff0b 	bl	8007a94 <LL_ADC_IsEnabled>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f040 8219 	bne.w	80090b8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	6819      	ldr	r1, [r3, #0]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	461a      	mov	r2, r3
 8008c94:	f7fe fe2c 	bl	80078f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	4aa1      	ldr	r2, [pc, #644]	; (8008f24 <HAL_ADC_ConfigChannel+0x888>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	f040 812e 	bne.w	8008f00 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d10b      	bne.n	8008ccc <HAL_ADC_ConfigChannel+0x630>
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	0e9b      	lsrs	r3, r3, #26
 8008cba:	3301      	adds	r3, #1
 8008cbc:	f003 031f 	and.w	r3, r3, #31
 8008cc0:	2b09      	cmp	r3, #9
 8008cc2:	bf94      	ite	ls
 8008cc4:	2301      	movls	r3, #1
 8008cc6:	2300      	movhi	r3, #0
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	e019      	b.n	8008d00 <HAL_ADC_ConfigChannel+0x664>
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cd4:	fa93 f3a3 	rbit	r3, r3
 8008cd8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8008cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	e003      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8008ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cea:	fab3 f383 	clz	r3, r3
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	f003 031f 	and.w	r3, r3, #31
 8008cf6:	2b09      	cmp	r3, #9
 8008cf8:	bf94      	ite	ls
 8008cfa:	2301      	movls	r3, #1
 8008cfc:	2300      	movhi	r3, #0
 8008cfe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d079      	beq.n	8008df8 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d107      	bne.n	8008d20 <HAL_ADC_ConfigChannel+0x684>
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	0e9b      	lsrs	r3, r3, #26
 8008d16:	3301      	adds	r3, #1
 8008d18:	069b      	lsls	r3, r3, #26
 8008d1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d1e:	e015      	b.n	8008d4c <HAL_ADC_ConfigChannel+0x6b0>
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d28:	fa93 f3a3 	rbit	r3, r3
 8008d2c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8008d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d30:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8008d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d101      	bne.n	8008d3c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8008d38:	2320      	movs	r3, #32
 8008d3a:	e003      	b.n	8008d44 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8008d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d3e:	fab3 f383 	clz	r3, r3
 8008d42:	b2db      	uxtb	r3, r3
 8008d44:	3301      	adds	r3, #1
 8008d46:	069b      	lsls	r3, r3, #26
 8008d48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d109      	bne.n	8008d6c <HAL_ADC_ConfigChannel+0x6d0>
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	0e9b      	lsrs	r3, r3, #26
 8008d5e:	3301      	adds	r3, #1
 8008d60:	f003 031f 	and.w	r3, r3, #31
 8008d64:	2101      	movs	r1, #1
 8008d66:	fa01 f303 	lsl.w	r3, r1, r3
 8008d6a:	e017      	b.n	8008d9c <HAL_ADC_ConfigChannel+0x700>
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d74:	fa93 f3a3 	rbit	r3, r3
 8008d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8008d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8008d84:	2320      	movs	r3, #32
 8008d86:	e003      	b.n	8008d90 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8008d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d8a:	fab3 f383 	clz	r3, r3
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	3301      	adds	r3, #1
 8008d92:	f003 031f 	and.w	r3, r3, #31
 8008d96:	2101      	movs	r1, #1
 8008d98:	fa01 f303 	lsl.w	r3, r1, r3
 8008d9c:	ea42 0103 	orr.w	r1, r2, r3
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10a      	bne.n	8008dc2 <HAL_ADC_ConfigChannel+0x726>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	0e9b      	lsrs	r3, r3, #26
 8008db2:	3301      	adds	r3, #1
 8008db4:	f003 021f 	and.w	r2, r3, #31
 8008db8:	4613      	mov	r3, r2
 8008dba:	005b      	lsls	r3, r3, #1
 8008dbc:	4413      	add	r3, r2
 8008dbe:	051b      	lsls	r3, r3, #20
 8008dc0:	e018      	b.n	8008df4 <HAL_ADC_ConfigChannel+0x758>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dca:	fa93 f3a3 	rbit	r3, r3
 8008dce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8008dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8008dda:	2320      	movs	r3, #32
 8008ddc:	e003      	b.n	8008de6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8008dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de0:	fab3 f383 	clz	r3, r3
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	3301      	adds	r3, #1
 8008de8:	f003 021f 	and.w	r2, r3, #31
 8008dec:	4613      	mov	r3, r2
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	4413      	add	r3, r2
 8008df2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008df4:	430b      	orrs	r3, r1
 8008df6:	e07e      	b.n	8008ef6 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d107      	bne.n	8008e14 <HAL_ADC_ConfigChannel+0x778>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	0e9b      	lsrs	r3, r3, #26
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	069b      	lsls	r3, r3, #26
 8008e0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008e12:	e015      	b.n	8008e40 <HAL_ADC_ConfigChannel+0x7a4>
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1c:	fa93 f3a3 	rbit	r3, r3
 8008e20:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8008e2c:	2320      	movs	r3, #32
 8008e2e:	e003      	b.n	8008e38 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8008e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e32:	fab3 f383 	clz	r3, r3
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	3301      	adds	r3, #1
 8008e3a:	069b      	lsls	r3, r3, #26
 8008e3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d109      	bne.n	8008e60 <HAL_ADC_ConfigChannel+0x7c4>
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	0e9b      	lsrs	r3, r3, #26
 8008e52:	3301      	adds	r3, #1
 8008e54:	f003 031f 	and.w	r3, r3, #31
 8008e58:	2101      	movs	r1, #1
 8008e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e5e:	e017      	b.n	8008e90 <HAL_ADC_ConfigChannel+0x7f4>
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	fa93 f3a3 	rbit	r3, r3
 8008e6c:	61bb      	str	r3, [r7, #24]
  return result;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8008e72:	6a3b      	ldr	r3, [r7, #32]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d101      	bne.n	8008e7c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8008e78:	2320      	movs	r3, #32
 8008e7a:	e003      	b.n	8008e84 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8008e7c:	6a3b      	ldr	r3, [r7, #32]
 8008e7e:	fab3 f383 	clz	r3, r3
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	3301      	adds	r3, #1
 8008e86:	f003 031f 	and.w	r3, r3, #31
 8008e8a:	2101      	movs	r1, #1
 8008e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8008e90:	ea42 0103 	orr.w	r1, r2, r3
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10d      	bne.n	8008ebc <HAL_ADC_ConfigChannel+0x820>
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	0e9b      	lsrs	r3, r3, #26
 8008ea6:	3301      	adds	r3, #1
 8008ea8:	f003 021f 	and.w	r2, r3, #31
 8008eac:	4613      	mov	r3, r2
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	4413      	add	r3, r2
 8008eb2:	3b1e      	subs	r3, #30
 8008eb4:	051b      	lsls	r3, r3, #20
 8008eb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008eba:	e01b      	b.n	8008ef4 <HAL_ADC_ConfigChannel+0x858>
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	fa93 f3a3 	rbit	r3, r3
 8008ec8:	60fb      	str	r3, [r7, #12]
  return result;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d101      	bne.n	8008ed8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8008ed4:	2320      	movs	r3, #32
 8008ed6:	e003      	b.n	8008ee0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	fab3 f383 	clz	r3, r3
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	3301      	adds	r3, #1
 8008ee2:	f003 021f 	and.w	r2, r3, #31
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	005b      	lsls	r3, r3, #1
 8008eea:	4413      	add	r3, r2
 8008eec:	3b1e      	subs	r3, #30
 8008eee:	051b      	lsls	r3, r3, #20
 8008ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008ef4:	430b      	orrs	r3, r1
 8008ef6:	683a      	ldr	r2, [r7, #0]
 8008ef8:	6892      	ldr	r2, [r2, #8]
 8008efa:	4619      	mov	r1, r3
 8008efc:	f7fe fccc 	bl	8007898 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f280 80d7 	bge.w	80090b8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a06      	ldr	r2, [pc, #24]	; (8008f28 <HAL_ADC_ConfigChannel+0x88c>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d004      	beq.n	8008f1e <HAL_ADC_ConfigChannel+0x882>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4a04      	ldr	r2, [pc, #16]	; (8008f2c <HAL_ADC_ConfigChannel+0x890>)
 8008f1a:	4293      	cmp	r3, r2
 8008f1c:	d10a      	bne.n	8008f34 <HAL_ADC_ConfigChannel+0x898>
 8008f1e:	4b04      	ldr	r3, [pc, #16]	; (8008f30 <HAL_ADC_ConfigChannel+0x894>)
 8008f20:	e009      	b.n	8008f36 <HAL_ADC_ConfigChannel+0x89a>
 8008f22:	bf00      	nop
 8008f24:	47ff0000 	.word	0x47ff0000
 8008f28:	40022000 	.word	0x40022000
 8008f2c:	40022100 	.word	0x40022100
 8008f30:	40022300 	.word	0x40022300
 8008f34:	4b65      	ldr	r3, [pc, #404]	; (80090cc <HAL_ADC_ConfigChannel+0xa30>)
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe fb5c 	bl	80075f4 <LL_ADC_GetCommonPathInternalCh>
 8008f3c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a62      	ldr	r2, [pc, #392]	; (80090d0 <HAL_ADC_ConfigChannel+0xa34>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d004      	beq.n	8008f54 <HAL_ADC_ConfigChannel+0x8b8>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a61      	ldr	r2, [pc, #388]	; (80090d4 <HAL_ADC_ConfigChannel+0xa38>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d10e      	bne.n	8008f72 <HAL_ADC_ConfigChannel+0x8d6>
 8008f54:	485e      	ldr	r0, [pc, #376]	; (80090d0 <HAL_ADC_ConfigChannel+0xa34>)
 8008f56:	f7fe fd9d 	bl	8007a94 <LL_ADC_IsEnabled>
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	485d      	ldr	r0, [pc, #372]	; (80090d4 <HAL_ADC_ConfigChannel+0xa38>)
 8008f5e:	f7fe fd99 	bl	8007a94 <LL_ADC_IsEnabled>
 8008f62:	4603      	mov	r3, r0
 8008f64:	4323      	orrs	r3, r4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bf0c      	ite	eq
 8008f6a:	2301      	moveq	r3, #1
 8008f6c:	2300      	movne	r3, #0
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	e008      	b.n	8008f84 <HAL_ADC_ConfigChannel+0x8e8>
 8008f72:	4859      	ldr	r0, [pc, #356]	; (80090d8 <HAL_ADC_ConfigChannel+0xa3c>)
 8008f74:	f7fe fd8e 	bl	8007a94 <LL_ADC_IsEnabled>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bf0c      	ite	eq
 8008f7e:	2301      	moveq	r3, #1
 8008f80:	2300      	movne	r3, #0
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 8084 	beq.w	8009092 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a53      	ldr	r2, [pc, #332]	; (80090dc <HAL_ADC_ConfigChannel+0xa40>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d132      	bne.n	8008ffa <HAL_ADC_ConfigChannel+0x95e>
 8008f94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008f98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d12c      	bne.n	8008ffa <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a4c      	ldr	r2, [pc, #304]	; (80090d8 <HAL_ADC_ConfigChannel+0xa3c>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	f040 8086 	bne.w	80090b8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a47      	ldr	r2, [pc, #284]	; (80090d0 <HAL_ADC_ConfigChannel+0xa34>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d004      	beq.n	8008fc0 <HAL_ADC_ConfigChannel+0x924>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a46      	ldr	r2, [pc, #280]	; (80090d4 <HAL_ADC_ConfigChannel+0xa38>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d101      	bne.n	8008fc4 <HAL_ADC_ConfigChannel+0x928>
 8008fc0:	4a47      	ldr	r2, [pc, #284]	; (80090e0 <HAL_ADC_ConfigChannel+0xa44>)
 8008fc2:	e000      	b.n	8008fc6 <HAL_ADC_ConfigChannel+0x92a>
 8008fc4:	4a41      	ldr	r2, [pc, #260]	; (80090cc <HAL_ADC_ConfigChannel+0xa30>)
 8008fc6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8008fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	f7fe fafc 	bl	80075ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008fd6:	4b43      	ldr	r3, [pc, #268]	; (80090e4 <HAL_ADC_ConfigChannel+0xa48>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	099b      	lsrs	r3, r3, #6
 8008fdc:	4a42      	ldr	r2, [pc, #264]	; (80090e8 <HAL_ADC_ConfigChannel+0xa4c>)
 8008fde:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe2:	099b      	lsrs	r3, r3, #6
 8008fe4:	3301      	adds	r3, #1
 8008fe6:	005b      	lsls	r3, r3, #1
 8008fe8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008fea:	e002      	b.n	8008ff2 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1f9      	bne.n	8008fec <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008ff8:	e05e      	b.n	80090b8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a3b      	ldr	r2, [pc, #236]	; (80090ec <HAL_ADC_ConfigChannel+0xa50>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d120      	bne.n	8009046 <HAL_ADC_ConfigChannel+0x9aa>
 8009004:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009008:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d11a      	bne.n	8009046 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a30      	ldr	r2, [pc, #192]	; (80090d8 <HAL_ADC_ConfigChannel+0xa3c>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d14e      	bne.n	80090b8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a2c      	ldr	r2, [pc, #176]	; (80090d0 <HAL_ADC_ConfigChannel+0xa34>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d004      	beq.n	800902e <HAL_ADC_ConfigChannel+0x992>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a2a      	ldr	r2, [pc, #168]	; (80090d4 <HAL_ADC_ConfigChannel+0xa38>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d101      	bne.n	8009032 <HAL_ADC_ConfigChannel+0x996>
 800902e:	4a2c      	ldr	r2, [pc, #176]	; (80090e0 <HAL_ADC_ConfigChannel+0xa44>)
 8009030:	e000      	b.n	8009034 <HAL_ADC_ConfigChannel+0x998>
 8009032:	4a26      	ldr	r2, [pc, #152]	; (80090cc <HAL_ADC_ConfigChannel+0xa30>)
 8009034:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009038:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800903c:	4619      	mov	r1, r3
 800903e:	4610      	mov	r0, r2
 8009040:	f7fe fac5 	bl	80075ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009044:	e038      	b.n	80090b8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a29      	ldr	r2, [pc, #164]	; (80090f0 <HAL_ADC_ConfigChannel+0xa54>)
 800904c:	4293      	cmp	r3, r2
 800904e:	d133      	bne.n	80090b8 <HAL_ADC_ConfigChannel+0xa1c>
 8009050:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d12d      	bne.n	80090b8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1d      	ldr	r2, [pc, #116]	; (80090d8 <HAL_ADC_ConfigChannel+0xa3c>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d128      	bne.n	80090b8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a19      	ldr	r2, [pc, #100]	; (80090d0 <HAL_ADC_ConfigChannel+0xa34>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d004      	beq.n	800907a <HAL_ADC_ConfigChannel+0x9de>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a17      	ldr	r2, [pc, #92]	; (80090d4 <HAL_ADC_ConfigChannel+0xa38>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d101      	bne.n	800907e <HAL_ADC_ConfigChannel+0x9e2>
 800907a:	4a19      	ldr	r2, [pc, #100]	; (80090e0 <HAL_ADC_ConfigChannel+0xa44>)
 800907c:	e000      	b.n	8009080 <HAL_ADC_ConfigChannel+0x9e4>
 800907e:	4a13      	ldr	r2, [pc, #76]	; (80090cc <HAL_ADC_ConfigChannel+0xa30>)
 8009080:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009088:	4619      	mov	r1, r3
 800908a:	4610      	mov	r0, r2
 800908c:	f7fe fa9f 	bl	80075ce <LL_ADC_SetCommonPathInternalCh>
 8009090:	e012      	b.n	80090b8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009096:	f043 0220 	orr.w	r2, r3, #32
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80090a4:	e008      	b.n	80090b8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090aa:	f043 0220 	orr.w	r2, r3, #32
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80090c0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	37e4      	adds	r7, #228	; 0xe4
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd90      	pop	{r4, r7, pc}
 80090cc:	58026300 	.word	0x58026300
 80090d0:	40022000 	.word	0x40022000
 80090d4:	40022100 	.word	0x40022100
 80090d8:	58026000 	.word	0x58026000
 80090dc:	c7520000 	.word	0xc7520000
 80090e0:	40022300 	.word	0x40022300
 80090e4:	20000020 	.word	0x20000020
 80090e8:	053e2d63 	.word	0x053e2d63
 80090ec:	c3210000 	.word	0xc3210000
 80090f0:	cb840000 	.word	0xcb840000

080090f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4618      	mov	r0, r3
 8009102:	f7fe fcc7 	bl	8007a94 <LL_ADC_IsEnabled>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d16e      	bne.n	80091ea <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	689a      	ldr	r2, [r3, #8]
 8009112:	4b38      	ldr	r3, [pc, #224]	; (80091f4 <ADC_Enable+0x100>)
 8009114:	4013      	ands	r3, r2
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00d      	beq.n	8009136 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800911e:	f043 0210 	orr.w	r2, r3, #16
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800912a:	f043 0201 	orr.w	r2, r3, #1
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e05a      	b.n	80091ec <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4618      	mov	r0, r3
 800913c:	f7fe fc82 	bl	8007a44 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8009140:	f7fe fa02 	bl	8007548 <HAL_GetTick>
 8009144:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a2b      	ldr	r2, [pc, #172]	; (80091f8 <ADC_Enable+0x104>)
 800914c:	4293      	cmp	r3, r2
 800914e:	d004      	beq.n	800915a <ADC_Enable+0x66>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a29      	ldr	r2, [pc, #164]	; (80091fc <ADC_Enable+0x108>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d101      	bne.n	800915e <ADC_Enable+0x6a>
 800915a:	4b29      	ldr	r3, [pc, #164]	; (8009200 <ADC_Enable+0x10c>)
 800915c:	e000      	b.n	8009160 <ADC_Enable+0x6c>
 800915e:	4b29      	ldr	r3, [pc, #164]	; (8009204 <ADC_Enable+0x110>)
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fc05 	bl	8007970 <LL_ADC_GetMultimode>
 8009166:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a23      	ldr	r2, [pc, #140]	; (80091fc <ADC_Enable+0x108>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d002      	beq.n	8009178 <ADC_Enable+0x84>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	e000      	b.n	800917a <ADC_Enable+0x86>
 8009178:	4b1f      	ldr	r3, [pc, #124]	; (80091f8 <ADC_Enable+0x104>)
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	6812      	ldr	r2, [r2, #0]
 800917e:	4293      	cmp	r3, r2
 8009180:	d02c      	beq.n	80091dc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d130      	bne.n	80091ea <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009188:	e028      	b.n	80091dc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	f7fe fc80 	bl	8007a94 <LL_ADC_IsEnabled>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d104      	bne.n	80091a4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fe fc50 	bl	8007a44 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80091a4:	f7fe f9d0 	bl	8007548 <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	d914      	bls.n	80091dc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d00d      	beq.n	80091dc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091c4:	f043 0210 	orr.w	r2, r3, #16
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091d0:	f043 0201 	orr.w	r2, r3, #1
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	e007      	b.n	80091ec <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d1cf      	bne.n	800918a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	8000003f 	.word	0x8000003f
 80091f8:	40022000 	.word	0x40022000
 80091fc:	40022100 	.word	0x40022100
 8009200:	40022300 	.word	0x40022300
 8009204:	58026300 	.word	0x58026300

08009208 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4618      	mov	r0, r3
 8009216:	f7fe fc50 	bl	8007aba <LL_ADC_IsDisableOngoing>
 800921a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fc37 	bl	8007a94 <LL_ADC_IsEnabled>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d047      	beq.n	80092bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d144      	bne.n	80092bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	f003 030d 	and.w	r3, r3, #13
 800923c:	2b01      	cmp	r3, #1
 800923e:	d10c      	bne.n	800925a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4618      	mov	r0, r3
 8009246:	f7fe fc11 	bl	8007a6c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2203      	movs	r2, #3
 8009250:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009252:	f7fe f979 	bl	8007548 <HAL_GetTick>
 8009256:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009258:	e029      	b.n	80092ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800925e:	f043 0210 	orr.w	r2, r3, #16
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800926a:	f043 0201 	orr.w	r2, r3, #1
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e023      	b.n	80092be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009276:	f7fe f967 	bl	8007548 <HAL_GetTick>
 800927a:	4602      	mov	r2, r0
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	1ad3      	subs	r3, r2, r3
 8009280:	2b02      	cmp	r3, #2
 8009282:	d914      	bls.n	80092ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	f003 0301 	and.w	r3, r3, #1
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00d      	beq.n	80092ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009296:	f043 0210 	orr.w	r2, r3, #16
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092a2:	f043 0201 	orr.w	r2, r3, #1
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e007      	b.n	80092be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d1dc      	bne.n	8009276 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
	...

080092c8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a6b      	ldr	r2, [pc, #428]	; (8009484 <ADC_ConfigureBoostMode+0x1bc>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d004      	beq.n	80092e4 <ADC_ConfigureBoostMode+0x1c>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a6a      	ldr	r2, [pc, #424]	; (8009488 <ADC_ConfigureBoostMode+0x1c0>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d109      	bne.n	80092f8 <ADC_ConfigureBoostMode+0x30>
 80092e4:	4b69      	ldr	r3, [pc, #420]	; (800948c <ADC_ConfigureBoostMode+0x1c4>)
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	bf14      	ite	ne
 80092f0:	2301      	movne	r3, #1
 80092f2:	2300      	moveq	r3, #0
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	e008      	b.n	800930a <ADC_ConfigureBoostMode+0x42>
 80092f8:	4b65      	ldr	r3, [pc, #404]	; (8009490 <ADC_ConfigureBoostMode+0x1c8>)
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009300:	2b00      	cmp	r3, #0
 8009302:	bf14      	ite	ne
 8009304:	2301      	movne	r3, #1
 8009306:	2300      	moveq	r3, #0
 8009308:	b2db      	uxtb	r3, r3
 800930a:	2b00      	cmp	r3, #0
 800930c:	d01c      	beq.n	8009348 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800930e:	f006 f8b5 	bl	800f47c <HAL_RCC_GetHCLKFreq>
 8009312:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800931c:	d010      	beq.n	8009340 <ADC_ConfigureBoostMode+0x78>
 800931e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009322:	d871      	bhi.n	8009408 <ADC_ConfigureBoostMode+0x140>
 8009324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009328:	d002      	beq.n	8009330 <ADC_ConfigureBoostMode+0x68>
 800932a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800932e:	d16b      	bne.n	8009408 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	0c1b      	lsrs	r3, r3, #16
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	fbb2 f3f3 	udiv	r3, r2, r3
 800933c:	60fb      	str	r3, [r7, #12]
        break;
 800933e:	e066      	b.n	800940e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	089b      	lsrs	r3, r3, #2
 8009344:	60fb      	str	r3, [r7, #12]
        break;
 8009346:	e062      	b.n	800940e <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8009348:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800934c:	f006 ffec 	bl	8010328 <HAL_RCCEx_GetPeriphCLKFreq>
 8009350:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800935a:	d051      	beq.n	8009400 <ADC_ConfigureBoostMode+0x138>
 800935c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8009360:	d854      	bhi.n	800940c <ADC_ConfigureBoostMode+0x144>
 8009362:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8009366:	d047      	beq.n	80093f8 <ADC_ConfigureBoostMode+0x130>
 8009368:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800936c:	d84e      	bhi.n	800940c <ADC_ConfigureBoostMode+0x144>
 800936e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8009372:	d03d      	beq.n	80093f0 <ADC_ConfigureBoostMode+0x128>
 8009374:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8009378:	d848      	bhi.n	800940c <ADC_ConfigureBoostMode+0x144>
 800937a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800937e:	d033      	beq.n	80093e8 <ADC_ConfigureBoostMode+0x120>
 8009380:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009384:	d842      	bhi.n	800940c <ADC_ConfigureBoostMode+0x144>
 8009386:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800938a:	d029      	beq.n	80093e0 <ADC_ConfigureBoostMode+0x118>
 800938c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8009390:	d83c      	bhi.n	800940c <ADC_ConfigureBoostMode+0x144>
 8009392:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009396:	d01a      	beq.n	80093ce <ADC_ConfigureBoostMode+0x106>
 8009398:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800939c:	d836      	bhi.n	800940c <ADC_ConfigureBoostMode+0x144>
 800939e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80093a2:	d014      	beq.n	80093ce <ADC_ConfigureBoostMode+0x106>
 80093a4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80093a8:	d830      	bhi.n	800940c <ADC_ConfigureBoostMode+0x144>
 80093aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093ae:	d00e      	beq.n	80093ce <ADC_ConfigureBoostMode+0x106>
 80093b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093b4:	d82a      	bhi.n	800940c <ADC_ConfigureBoostMode+0x144>
 80093b6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80093ba:	d008      	beq.n	80093ce <ADC_ConfigureBoostMode+0x106>
 80093bc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80093c0:	d824      	bhi.n	800940c <ADC_ConfigureBoostMode+0x144>
 80093c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80093c6:	d002      	beq.n	80093ce <ADC_ConfigureBoostMode+0x106>
 80093c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80093cc:	d11e      	bne.n	800940c <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	0c9b      	lsrs	r3, r3, #18
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80093dc:	60fb      	str	r3, [r7, #12]
        break;
 80093de:	e016      	b.n	800940e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	091b      	lsrs	r3, r3, #4
 80093e4:	60fb      	str	r3, [r7, #12]
        break;
 80093e6:	e012      	b.n	800940e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	095b      	lsrs	r3, r3, #5
 80093ec:	60fb      	str	r3, [r7, #12]
        break;
 80093ee:	e00e      	b.n	800940e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	099b      	lsrs	r3, r3, #6
 80093f4:	60fb      	str	r3, [r7, #12]
        break;
 80093f6:	e00a      	b.n	800940e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	09db      	lsrs	r3, r3, #7
 80093fc:	60fb      	str	r3, [r7, #12]
        break;
 80093fe:	e006      	b.n	800940e <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	0a1b      	lsrs	r3, r3, #8
 8009404:	60fb      	str	r3, [r7, #12]
        break;
 8009406:	e002      	b.n	800940e <ADC_ConfigureBoostMode+0x146>
        break;
 8009408:	bf00      	nop
 800940a:	e000      	b.n	800940e <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 800940c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	085b      	lsrs	r3, r3, #1
 8009412:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	4a1f      	ldr	r2, [pc, #124]	; (8009494 <ADC_ConfigureBoostMode+0x1cc>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d808      	bhi.n	800942e <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800942a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800942c:	e025      	b.n	800947a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	4a19      	ldr	r2, [pc, #100]	; (8009498 <ADC_ConfigureBoostMode+0x1d0>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d80a      	bhi.n	800944c <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009448:	609a      	str	r2, [r3, #8]
}
 800944a:	e016      	b.n	800947a <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4a13      	ldr	r2, [pc, #76]	; (800949c <ADC_ConfigureBoostMode+0x1d4>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d80a      	bhi.n	800946a <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009466:	609a      	str	r2, [r3, #8]
}
 8009468:	e007      	b.n	800947a <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689a      	ldr	r2, [r3, #8]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8009478:	609a      	str	r2, [r3, #8]
}
 800947a:	bf00      	nop
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	40022000 	.word	0x40022000
 8009488:	40022100 	.word	0x40022100
 800948c:	40022300 	.word	0x40022300
 8009490:	58026300 	.word	0x58026300
 8009494:	005f5e10 	.word	0x005f5e10
 8009498:	00bebc20 	.word	0x00bebc20
 800949c:	017d7840 	.word	0x017d7840

080094a0 <LL_ADC_IsEnabled>:
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d101      	bne.n	80094b8 <LL_ADC_IsEnabled+0x18>
 80094b4:	2301      	movs	r3, #1
 80094b6:	e000      	b.n	80094ba <LL_ADC_IsEnabled+0x1a>
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	370c      	adds	r7, #12
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
	...

080094c8 <LL_ADC_StartCalibration>:
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	60f8      	str	r0, [r7, #12]
 80094d0:	60b9      	str	r1, [r7, #8]
 80094d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	4b09      	ldr	r3, [pc, #36]	; (8009500 <LL_ADC_StartCalibration+0x38>)
 80094da:	4013      	ands	r3, r2
 80094dc:	68ba      	ldr	r2, [r7, #8]
 80094de:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80094e2:	687a      	ldr	r2, [r7, #4]
 80094e4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80094e8:	430a      	orrs	r2, r1
 80094ea:	4313      	orrs	r3, r2
 80094ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	609a      	str	r2, [r3, #8]
}
 80094f4:	bf00      	nop
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr
 8009500:	3ffeffc0 	.word	0x3ffeffc0

08009504 <LL_ADC_IsCalibrationOnGoing>:
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009514:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009518:	d101      	bne.n	800951e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800951a:	2301      	movs	r3, #1
 800951c:	e000      	b.n	8009520 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <LL_ADC_REG_IsConversionOngoing>:
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	f003 0304 	and.w	r3, r3, #4
 800953c:	2b04      	cmp	r3, #4
 800953e:	d101      	bne.n	8009544 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009540:	2301      	movs	r3, #1
 8009542:	e000      	b.n	8009546 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	370c      	adds	r7, #12
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr
	...

08009554 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8009560:	2300      	movs	r3, #0
 8009562:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800956a:	2b01      	cmp	r3, #1
 800956c:	d101      	bne.n	8009572 <HAL_ADCEx_Calibration_Start+0x1e>
 800956e:	2302      	movs	r3, #2
 8009570:	e04c      	b.n	800960c <HAL_ADCEx_Calibration_Start+0xb8>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f7ff fe44 	bl	8009208 <ADC_Disable>
 8009580:	4603      	mov	r3, r0
 8009582:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8009584:	7dfb      	ldrb	r3, [r7, #23]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d135      	bne.n	80095f6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800958e:	4b21      	ldr	r3, [pc, #132]	; (8009614 <HAL_ADCEx_Calibration_Start+0xc0>)
 8009590:	4013      	ands	r3, r2
 8009592:	f043 0202 	orr.w	r2, r3, #2
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	68b9      	ldr	r1, [r7, #8]
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7ff ff90 	bl	80094c8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80095a8:	e014      	b.n	80095d4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	3301      	adds	r3, #1
 80095ae:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	4a19      	ldr	r2, [pc, #100]	; (8009618 <HAL_ADCEx_Calibration_Start+0xc4>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d30d      	bcc.n	80095d4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095bc:	f023 0312 	bic.w	r3, r3, #18
 80095c0:	f043 0210 	orr.w	r2, r3, #16
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e01b      	b.n	800960c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4618      	mov	r0, r3
 80095da:	f7ff ff93 	bl	8009504 <LL_ADC_IsCalibrationOnGoing>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e2      	bne.n	80095aa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095e8:	f023 0303 	bic.w	r3, r3, #3
 80095ec:	f043 0201 	orr.w	r2, r3, #1
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	661a      	str	r2, [r3, #96]	; 0x60
 80095f4:	e005      	b.n	8009602 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095fa:	f043 0210 	orr.w	r2, r3, #16
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800960a:	7dfb      	ldrb	r3, [r7, #23]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	ffffeefd 	.word	0xffffeefd
 8009618:	25c3f800 	.word	0x25c3f800

0800961c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8009680:	b590      	push	{r4, r7, lr}
 8009682:	b0a3      	sub	sp, #140	; 0x8c
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800968a:	2300      	movs	r3, #0
 800968c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009696:	2b01      	cmp	r3, #1
 8009698:	d101      	bne.n	800969e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800969a:	2302      	movs	r3, #2
 800969c:	e0c1      	b.n	8009822 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2201      	movs	r2, #1
 80096a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80096a6:	2300      	movs	r3, #0
 80096a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80096aa:	2300      	movs	r3, #0
 80096ac:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a5e      	ldr	r2, [pc, #376]	; (800982c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d102      	bne.n	80096be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80096b8:	4b5d      	ldr	r3, [pc, #372]	; (8009830 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	e001      	b.n	80096c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80096be:	2300      	movs	r3, #0
 80096c0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10b      	bne.n	80096e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096cc:	f043 0220 	orr.w	r2, r3, #32
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e0a0      	b.n	8009822 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7ff ff22 	bl	800952c <LL_ADC_REG_IsConversionOngoing>
 80096e8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7ff ff1b 	bl	800952c <LL_ADC_REG_IsConversionOngoing>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f040 8081 	bne.w	8009800 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80096fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009702:	2b00      	cmp	r3, #0
 8009704:	d17c      	bne.n	8009800 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a48      	ldr	r2, [pc, #288]	; (800982c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d004      	beq.n	800971a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a46      	ldr	r2, [pc, #280]	; (8009830 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d101      	bne.n	800971e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800971a:	4b46      	ldr	r3, [pc, #280]	; (8009834 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800971c:	e000      	b.n	8009720 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800971e:	4b46      	ldr	r3, [pc, #280]	; (8009838 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8009720:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d039      	beq.n	800979e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800972a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	431a      	orrs	r2, r3
 8009738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800973a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a3a      	ldr	r2, [pc, #232]	; (800982c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d004      	beq.n	8009750 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a39      	ldr	r2, [pc, #228]	; (8009830 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d10e      	bne.n	800976e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8009750:	4836      	ldr	r0, [pc, #216]	; (800982c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8009752:	f7ff fea5 	bl	80094a0 <LL_ADC_IsEnabled>
 8009756:	4604      	mov	r4, r0
 8009758:	4835      	ldr	r0, [pc, #212]	; (8009830 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800975a:	f7ff fea1 	bl	80094a0 <LL_ADC_IsEnabled>
 800975e:	4603      	mov	r3, r0
 8009760:	4323      	orrs	r3, r4
 8009762:	2b00      	cmp	r3, #0
 8009764:	bf0c      	ite	eq
 8009766:	2301      	moveq	r3, #1
 8009768:	2300      	movne	r3, #0
 800976a:	b2db      	uxtb	r3, r3
 800976c:	e008      	b.n	8009780 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800976e:	4833      	ldr	r0, [pc, #204]	; (800983c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8009770:	f7ff fe96 	bl	80094a0 <LL_ADC_IsEnabled>
 8009774:	4603      	mov	r3, r0
 8009776:	2b00      	cmp	r3, #0
 8009778:	bf0c      	ite	eq
 800977a:	2301      	moveq	r3, #1
 800977c:	2300      	movne	r3, #0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	2b00      	cmp	r3, #0
 8009782:	d047      	beq.n	8009814 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8009784:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009786:	689a      	ldr	r2, [r3, #8]
 8009788:	4b2d      	ldr	r3, [pc, #180]	; (8009840 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800978a:	4013      	ands	r3, r2
 800978c:	683a      	ldr	r2, [r7, #0]
 800978e:	6811      	ldr	r1, [r2, #0]
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	6892      	ldr	r2, [r2, #8]
 8009794:	430a      	orrs	r2, r1
 8009796:	431a      	orrs	r2, r3
 8009798:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800979a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800979c:	e03a      	b.n	8009814 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800979e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80097a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097a8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a1f      	ldr	r2, [pc, #124]	; (800982c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d004      	beq.n	80097be <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a1d      	ldr	r2, [pc, #116]	; (8009830 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d10e      	bne.n	80097dc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80097be:	481b      	ldr	r0, [pc, #108]	; (800982c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80097c0:	f7ff fe6e 	bl	80094a0 <LL_ADC_IsEnabled>
 80097c4:	4604      	mov	r4, r0
 80097c6:	481a      	ldr	r0, [pc, #104]	; (8009830 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80097c8:	f7ff fe6a 	bl	80094a0 <LL_ADC_IsEnabled>
 80097cc:	4603      	mov	r3, r0
 80097ce:	4323      	orrs	r3, r4
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	bf0c      	ite	eq
 80097d4:	2301      	moveq	r3, #1
 80097d6:	2300      	movne	r3, #0
 80097d8:	b2db      	uxtb	r3, r3
 80097da:	e008      	b.n	80097ee <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80097dc:	4817      	ldr	r0, [pc, #92]	; (800983c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80097de:	f7ff fe5f 	bl	80094a0 <LL_ADC_IsEnabled>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	bf0c      	ite	eq
 80097e8:	2301      	moveq	r3, #1
 80097ea:	2300      	movne	r3, #0
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d010      	beq.n	8009814 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80097f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80097f4:	689a      	ldr	r2, [r3, #8]
 80097f6:	4b12      	ldr	r3, [pc, #72]	; (8009840 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80097f8:	4013      	ands	r3, r2
 80097fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80097fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80097fe:	e009      	b.n	8009814 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009804:	f043 0220 	orr.w	r2, r3, #32
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8009812:	e000      	b.n	8009816 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009814:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800981e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8009822:	4618      	mov	r0, r3
 8009824:	378c      	adds	r7, #140	; 0x8c
 8009826:	46bd      	mov	sp, r7
 8009828:	bd90      	pop	{r4, r7, pc}
 800982a:	bf00      	nop
 800982c:	40022000 	.word	0x40022000
 8009830:	40022100 	.word	0x40022100
 8009834:	40022300 	.word	0x40022300
 8009838:	58026300 	.word	0x58026300
 800983c:	58026000 	.word	0x58026000
 8009840:	fffff0e0 	.word	0xfffff0e0

08009844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f003 0307 	and.w	r3, r3, #7
 8009852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009854:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <__NVIC_SetPriorityGrouping+0x40>)
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009860:	4013      	ands	r3, r2
 8009862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800986c:	4b06      	ldr	r3, [pc, #24]	; (8009888 <__NVIC_SetPriorityGrouping+0x44>)
 800986e:	4313      	orrs	r3, r2
 8009870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009872:	4a04      	ldr	r2, [pc, #16]	; (8009884 <__NVIC_SetPriorityGrouping+0x40>)
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	60d3      	str	r3, [r2, #12]
}
 8009878:	bf00      	nop
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	e000ed00 	.word	0xe000ed00
 8009888:	05fa0000 	.word	0x05fa0000

0800988c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009890:	4b04      	ldr	r3, [pc, #16]	; (80098a4 <__NVIC_GetPriorityGrouping+0x18>)
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	0a1b      	lsrs	r3, r3, #8
 8009896:	f003 0307 	and.w	r3, r3, #7
}
 800989a:	4618      	mov	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	e000ed00 	.word	0xe000ed00

080098a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4603      	mov	r3, r0
 80098b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80098b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	db0b      	blt.n	80098d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80098ba:	88fb      	ldrh	r3, [r7, #6]
 80098bc:	f003 021f 	and.w	r2, r3, #31
 80098c0:	4907      	ldr	r1, [pc, #28]	; (80098e0 <__NVIC_EnableIRQ+0x38>)
 80098c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098c6:	095b      	lsrs	r3, r3, #5
 80098c8:	2001      	movs	r0, #1
 80098ca:	fa00 f202 	lsl.w	r2, r0, r2
 80098ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80098d2:	bf00      	nop
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	e000e100 	.word	0xe000e100

080098e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b083      	sub	sp, #12
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	6039      	str	r1, [r7, #0]
 80098ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80098f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	db0a      	blt.n	800990e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	490c      	ldr	r1, [pc, #48]	; (8009930 <__NVIC_SetPriority+0x4c>)
 80098fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009902:	0112      	lsls	r2, r2, #4
 8009904:	b2d2      	uxtb	r2, r2
 8009906:	440b      	add	r3, r1
 8009908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800990c:	e00a      	b.n	8009924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	b2da      	uxtb	r2, r3
 8009912:	4908      	ldr	r1, [pc, #32]	; (8009934 <__NVIC_SetPriority+0x50>)
 8009914:	88fb      	ldrh	r3, [r7, #6]
 8009916:	f003 030f 	and.w	r3, r3, #15
 800991a:	3b04      	subs	r3, #4
 800991c:	0112      	lsls	r2, r2, #4
 800991e:	b2d2      	uxtb	r2, r2
 8009920:	440b      	add	r3, r1
 8009922:	761a      	strb	r2, [r3, #24]
}
 8009924:	bf00      	nop
 8009926:	370c      	adds	r7, #12
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	e000e100 	.word	0xe000e100
 8009934:	e000ed00 	.word	0xe000ed00

08009938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009938:	b480      	push	{r7}
 800993a:	b089      	sub	sp, #36	; 0x24
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	f1c3 0307 	rsb	r3, r3, #7
 8009952:	2b04      	cmp	r3, #4
 8009954:	bf28      	it	cs
 8009956:	2304      	movcs	r3, #4
 8009958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	3304      	adds	r3, #4
 800995e:	2b06      	cmp	r3, #6
 8009960:	d902      	bls.n	8009968 <NVIC_EncodePriority+0x30>
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	3b03      	subs	r3, #3
 8009966:	e000      	b.n	800996a <NVIC_EncodePriority+0x32>
 8009968:	2300      	movs	r3, #0
 800996a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800996c:	f04f 32ff 	mov.w	r2, #4294967295
 8009970:	69bb      	ldr	r3, [r7, #24]
 8009972:	fa02 f303 	lsl.w	r3, r2, r3
 8009976:	43da      	mvns	r2, r3
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	401a      	ands	r2, r3
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009980:	f04f 31ff 	mov.w	r1, #4294967295
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	fa01 f303 	lsl.w	r3, r1, r3
 800998a:	43d9      	mvns	r1, r3
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009990:	4313      	orrs	r3, r2
         );
}
 8009992:	4618      	mov	r0, r3
 8009994:	3724      	adds	r7, #36	; 0x24
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr
	...

080099a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3b01      	subs	r3, #1
 80099ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099b0:	d301      	bcc.n	80099b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80099b2:	2301      	movs	r3, #1
 80099b4:	e00f      	b.n	80099d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80099b6:	4a0a      	ldr	r2, [pc, #40]	; (80099e0 <SysTick_Config+0x40>)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80099be:	210f      	movs	r1, #15
 80099c0:	f04f 30ff 	mov.w	r0, #4294967295
 80099c4:	f7ff ff8e 	bl	80098e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80099c8:	4b05      	ldr	r3, [pc, #20]	; (80099e0 <SysTick_Config+0x40>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80099ce:	4b04      	ldr	r3, [pc, #16]	; (80099e0 <SysTick_Config+0x40>)
 80099d0:	2207      	movs	r2, #7
 80099d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	e000e010 	.word	0xe000e010

080099e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff ff29 	bl	8009844 <__NVIC_SetPriorityGrouping>
}
 80099f2:	bf00      	nop
 80099f4:	3708      	adds	r7, #8
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b086      	sub	sp, #24
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	4603      	mov	r3, r0
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	607a      	str	r2, [r7, #4]
 8009a06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009a08:	f7ff ff40 	bl	800988c <__NVIC_GetPriorityGrouping>
 8009a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	68b9      	ldr	r1, [r7, #8]
 8009a12:	6978      	ldr	r0, [r7, #20]
 8009a14:	f7ff ff90 	bl	8009938 <NVIC_EncodePriority>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7ff ff5f 	bl	80098e4 <__NVIC_SetPriority>
}
 8009a26:	bf00      	nop
 8009a28:	3718      	adds	r7, #24
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	4603      	mov	r3, r0
 8009a36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f7ff ff33 	bl	80098a8 <__NVIC_EnableIRQ>
}
 8009a42:	bf00      	nop
 8009a44:	3708      	adds	r7, #8
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}

08009a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b082      	sub	sp, #8
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f7ff ffa4 	bl	80099a0 <SysTick_Config>
 8009a58:	4603      	mov	r3, r0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
	...

08009a64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e054      	b.n	8009b20 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	7f5b      	ldrb	r3, [r3, #29]
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d105      	bne.n	8009a8c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7f8 f882 	bl	8001b90 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2202      	movs	r2, #2
 8009a90:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	791b      	ldrb	r3, [r3, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d10c      	bne.n	8009ab4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a22      	ldr	r2, [pc, #136]	; (8009b28 <HAL_CRC_Init+0xc4>)
 8009aa0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	689a      	ldr	r2, [r3, #8]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f022 0218 	bic.w	r2, r2, #24
 8009ab0:	609a      	str	r2, [r3, #8]
 8009ab2:	e00c      	b.n	8009ace <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6899      	ldr	r1, [r3, #8]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	461a      	mov	r2, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f948 	bl	8009d54 <HAL_CRCEx_Polynomial_Set>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e028      	b.n	8009b20 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	795b      	ldrb	r3, [r3, #5]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d105      	bne.n	8009ae2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f04f 32ff 	mov.w	r2, #4294967295
 8009ade:	611a      	str	r2, [r3, #16]
 8009ae0:	e004      	b.n	8009aec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	6912      	ldr	r2, [r2, #16]
 8009aea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	695a      	ldr	r2, [r3, #20]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	699a      	ldr	r2, [r3, #24]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	430a      	orrs	r2, r1
 8009b16:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3708      	adds	r7, #8
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	04c11db7 	.word	0x04c11db7

08009b2c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8009b38:	2300      	movs	r3, #0
 8009b3a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2202      	movs	r2, #2
 8009b40:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	689a      	ldr	r2, [r3, #8]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f042 0201 	orr.w	r2, r2, #1
 8009b50:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6a1b      	ldr	r3, [r3, #32]
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d006      	beq.n	8009b68 <HAL_CRC_Calculate+0x3c>
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d829      	bhi.n	8009bb2 <HAL_CRC_Calculate+0x86>
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d019      	beq.n	8009b96 <HAL_CRC_Calculate+0x6a>
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d01e      	beq.n	8009ba4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8009b66:	e024      	b.n	8009bb2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8009b68:	2300      	movs	r3, #0
 8009b6a:	617b      	str	r3, [r7, #20]
 8009b6c:	e00a      	b.n	8009b84 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	68ba      	ldr	r2, [r7, #8]
 8009b74:	441a      	add	r2, r3
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6812      	ldr	r2, [r2, #0]
 8009b7c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8009b7e:	697b      	ldr	r3, [r7, #20]
 8009b80:	3301      	adds	r3, #1
 8009b82:	617b      	str	r3, [r7, #20]
 8009b84:	697a      	ldr	r2, [r7, #20]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	d3f0      	bcc.n	8009b6e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	613b      	str	r3, [r7, #16]
      break;
 8009b94:	e00e      	b.n	8009bb4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	68b9      	ldr	r1, [r7, #8]
 8009b9a:	68f8      	ldr	r0, [r7, #12]
 8009b9c:	f000 f812 	bl	8009bc4 <CRC_Handle_8>
 8009ba0:	6138      	str	r0, [r7, #16]
      break;
 8009ba2:	e007      	b.n	8009bb4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f899 	bl	8009ce0 <CRC_Handle_16>
 8009bae:	6138      	str	r0, [r7, #16]
      break;
 8009bb0:	e000      	b.n	8009bb4 <HAL_CRC_Calculate+0x88>
      break;
 8009bb2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8009bba:	693b      	ldr	r3, [r7, #16]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b089      	sub	sp, #36	; 0x24
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	61fb      	str	r3, [r7, #28]
 8009bd4:	e023      	b.n	8009c1e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	4413      	add	r3, r2
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	3301      	adds	r3, #1
 8009be8:	68b9      	ldr	r1, [r7, #8]
 8009bea:	440b      	add	r3, r1
 8009bec:	781b      	ldrb	r3, [r3, #0]
 8009bee:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009bf0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	009b      	lsls	r3, r3, #2
 8009bf6:	3302      	adds	r3, #2
 8009bf8:	68b9      	ldr	r1, [r7, #8]
 8009bfa:	440b      	add	r3, r1
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8009c00:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	3303      	adds	r3, #3
 8009c08:	68b9      	ldr	r1, [r7, #8]
 8009c0a:	440b      	add	r3, r1
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8009c14:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8009c16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	61fb      	str	r3, [r7, #28]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	089b      	lsrs	r3, r3, #2
 8009c22:	69fa      	ldr	r2, [r7, #28]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d3d6      	bcc.n	8009bd6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f003 0303 	and.w	r3, r3, #3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d04d      	beq.n	8009cce <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d107      	bne.n	8009c4c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	4413      	add	r3, r2
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	6812      	ldr	r2, [r2, #0]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f003 0303 	and.w	r3, r3, #3
 8009c52:	2b02      	cmp	r3, #2
 8009c54:	d116      	bne.n	8009c84 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	68ba      	ldr	r2, [r7, #8]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	021b      	lsls	r3, r3, #8
 8009c62:	b21a      	sxth	r2, r3
 8009c64:	69fb      	ldr	r3, [r7, #28]
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	3301      	adds	r3, #1
 8009c6a:	68b9      	ldr	r1, [r7, #8]
 8009c6c:	440b      	add	r3, r1
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	b21b      	sxth	r3, r3
 8009c72:	4313      	orrs	r3, r2
 8009c74:	b21b      	sxth	r3, r3
 8009c76:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	8b7a      	ldrh	r2, [r7, #26]
 8009c82:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f003 0303 	and.w	r3, r3, #3
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	d11f      	bne.n	8009cce <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	4413      	add	r3, r2
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	021b      	lsls	r3, r3, #8
 8009c9a:	b21a      	sxth	r2, r3
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	68b9      	ldr	r1, [r7, #8]
 8009ca4:	440b      	add	r3, r1
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	b21b      	sxth	r3, r3
 8009caa:	4313      	orrs	r3, r2
 8009cac:	b21b      	sxth	r3, r3
 8009cae:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	8b7a      	ldrh	r2, [r7, #26]
 8009cba:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	3302      	adds	r3, #2
 8009cc2:	68ba      	ldr	r2, [r7, #8]
 8009cc4:	4413      	add	r3, r2
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	6812      	ldr	r2, [r2, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3724      	adds	r7, #36	; 0x24
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009cec:	2300      	movs	r3, #0
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	e013      	b.n	8009d1a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	009b      	lsls	r3, r3, #2
 8009cf6:	68ba      	ldr	r2, [r7, #8]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	041a      	lsls	r2, r3, #16
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	3302      	adds	r3, #2
 8009d04:	68b9      	ldr	r1, [r7, #8]
 8009d06:	440b      	add	r3, r1
 8009d08:	881b      	ldrh	r3, [r3, #0]
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	430a      	orrs	r2, r1
 8009d12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	3301      	adds	r3, #1
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	085b      	lsrs	r3, r3, #1
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d3e6      	bcc.n	8009cf2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d009      	beq.n	8009d42 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	68ba      	ldr	r2, [r7, #8]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	881a      	ldrh	r2, [r3, #0]
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	371c      	adds	r7, #28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8009d64:	231f      	movs	r3, #31
 8009d66:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8009d68:	bf00      	nop
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	1e5a      	subs	r2, r3, #1
 8009d6e:	613a      	str	r2, [r7, #16]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d009      	beq.n	8009d88 <HAL_CRCEx_Polynomial_Set+0x34>
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	f003 031f 	and.w	r3, r3, #31
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d80:	f003 0301 	and.w	r3, r3, #1
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0f0      	beq.n	8009d6a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2b18      	cmp	r3, #24
 8009d8c:	d846      	bhi.n	8009e1c <HAL_CRCEx_Polynomial_Set+0xc8>
 8009d8e:	a201      	add	r2, pc, #4	; (adr r2, 8009d94 <HAL_CRCEx_Polynomial_Set+0x40>)
 8009d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d94:	08009e23 	.word	0x08009e23
 8009d98:	08009e1d 	.word	0x08009e1d
 8009d9c:	08009e1d 	.word	0x08009e1d
 8009da0:	08009e1d 	.word	0x08009e1d
 8009da4:	08009e1d 	.word	0x08009e1d
 8009da8:	08009e1d 	.word	0x08009e1d
 8009dac:	08009e1d 	.word	0x08009e1d
 8009db0:	08009e1d 	.word	0x08009e1d
 8009db4:	08009e11 	.word	0x08009e11
 8009db8:	08009e1d 	.word	0x08009e1d
 8009dbc:	08009e1d 	.word	0x08009e1d
 8009dc0:	08009e1d 	.word	0x08009e1d
 8009dc4:	08009e1d 	.word	0x08009e1d
 8009dc8:	08009e1d 	.word	0x08009e1d
 8009dcc:	08009e1d 	.word	0x08009e1d
 8009dd0:	08009e1d 	.word	0x08009e1d
 8009dd4:	08009e05 	.word	0x08009e05
 8009dd8:	08009e1d 	.word	0x08009e1d
 8009ddc:	08009e1d 	.word	0x08009e1d
 8009de0:	08009e1d 	.word	0x08009e1d
 8009de4:	08009e1d 	.word	0x08009e1d
 8009de8:	08009e1d 	.word	0x08009e1d
 8009dec:	08009e1d 	.word	0x08009e1d
 8009df0:	08009e1d 	.word	0x08009e1d
 8009df4:	08009df9 	.word	0x08009df9
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	2b06      	cmp	r3, #6
 8009dfc:	d913      	bls.n	8009e26 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009e02:	e010      	b.n	8009e26 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	2b07      	cmp	r3, #7
 8009e08:	d90f      	bls.n	8009e2a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009e0e:	e00c      	b.n	8009e2a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	2b0f      	cmp	r3, #15
 8009e14:	d90b      	bls.n	8009e2e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009e1a:	e008      	b.n	8009e2e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8009e20:	e006      	b.n	8009e30 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009e22:	bf00      	nop
 8009e24:	e004      	b.n	8009e30 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009e26:	bf00      	nop
 8009e28:	e002      	b.n	8009e30 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009e2a:	bf00      	nop
 8009e2c:	e000      	b.n	8009e30 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8009e2e:	bf00      	nop
  }
  if (status == HAL_OK)
 8009e30:	7dfb      	ldrb	r3, [r7, #23]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d10d      	bne.n	8009e52 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	689b      	ldr	r3, [r3, #8]
 8009e44:	f023 0118 	bic.w	r1, r3, #24
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	430a      	orrs	r2, r1
 8009e50:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	371c      	adds	r7, #28
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8009e68:	f7fd fb6e 	bl	8007548 <HAL_GetTick>
 8009e6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d101      	bne.n	8009e78 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e314      	b.n	800a4a2 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a66      	ldr	r2, [pc, #408]	; (800a018 <HAL_DMA_Init+0x1b8>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d04a      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a65      	ldr	r2, [pc, #404]	; (800a01c <HAL_DMA_Init+0x1bc>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d045      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a63      	ldr	r2, [pc, #396]	; (800a020 <HAL_DMA_Init+0x1c0>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d040      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a62      	ldr	r2, [pc, #392]	; (800a024 <HAL_DMA_Init+0x1c4>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d03b      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4a60      	ldr	r2, [pc, #384]	; (800a028 <HAL_DMA_Init+0x1c8>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d036      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	4a5f      	ldr	r2, [pc, #380]	; (800a02c <HAL_DMA_Init+0x1cc>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d031      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4a5d      	ldr	r2, [pc, #372]	; (800a030 <HAL_DMA_Init+0x1d0>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d02c      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a5c      	ldr	r2, [pc, #368]	; (800a034 <HAL_DMA_Init+0x1d4>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d027      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a5a      	ldr	r2, [pc, #360]	; (800a038 <HAL_DMA_Init+0x1d8>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d022      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4a59      	ldr	r2, [pc, #356]	; (800a03c <HAL_DMA_Init+0x1dc>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d01d      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a57      	ldr	r2, [pc, #348]	; (800a040 <HAL_DMA_Init+0x1e0>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d018      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a56      	ldr	r2, [pc, #344]	; (800a044 <HAL_DMA_Init+0x1e4>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d013      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a54      	ldr	r2, [pc, #336]	; (800a048 <HAL_DMA_Init+0x1e8>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d00e      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a53      	ldr	r2, [pc, #332]	; (800a04c <HAL_DMA_Init+0x1ec>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d009      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a51      	ldr	r2, [pc, #324]	; (800a050 <HAL_DMA_Init+0x1f0>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d004      	beq.n	8009f18 <HAL_DMA_Init+0xb8>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a50      	ldr	r2, [pc, #320]	; (800a054 <HAL_DMA_Init+0x1f4>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d101      	bne.n	8009f1c <HAL_DMA_Init+0xbc>
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e000      	b.n	8009f1e <HAL_DMA_Init+0xbe>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 813c 	beq.w	800a19c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2202      	movs	r2, #2
 8009f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4a37      	ldr	r2, [pc, #220]	; (800a018 <HAL_DMA_Init+0x1b8>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d04a      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a36      	ldr	r2, [pc, #216]	; (800a01c <HAL_DMA_Init+0x1bc>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d045      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a34      	ldr	r2, [pc, #208]	; (800a020 <HAL_DMA_Init+0x1c0>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d040      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a33      	ldr	r2, [pc, #204]	; (800a024 <HAL_DMA_Init+0x1c4>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d03b      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a31      	ldr	r2, [pc, #196]	; (800a028 <HAL_DMA_Init+0x1c8>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d036      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a30      	ldr	r2, [pc, #192]	; (800a02c <HAL_DMA_Init+0x1cc>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d031      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a2e      	ldr	r2, [pc, #184]	; (800a030 <HAL_DMA_Init+0x1d0>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d02c      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a2d      	ldr	r2, [pc, #180]	; (800a034 <HAL_DMA_Init+0x1d4>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d027      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a2b      	ldr	r2, [pc, #172]	; (800a038 <HAL_DMA_Init+0x1d8>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d022      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a2a      	ldr	r2, [pc, #168]	; (800a03c <HAL_DMA_Init+0x1dc>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d01d      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a28      	ldr	r2, [pc, #160]	; (800a040 <HAL_DMA_Init+0x1e0>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d018      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a27      	ldr	r2, [pc, #156]	; (800a044 <HAL_DMA_Init+0x1e4>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d013      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a25      	ldr	r2, [pc, #148]	; (800a048 <HAL_DMA_Init+0x1e8>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d00e      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a24      	ldr	r2, [pc, #144]	; (800a04c <HAL_DMA_Init+0x1ec>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d009      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a22      	ldr	r2, [pc, #136]	; (800a050 <HAL_DMA_Init+0x1f0>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d004      	beq.n	8009fd4 <HAL_DMA_Init+0x174>
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	4a21      	ldr	r2, [pc, #132]	; (800a054 <HAL_DMA_Init+0x1f4>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d108      	bne.n	8009fe6 <HAL_DMA_Init+0x186>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f022 0201 	bic.w	r2, r2, #1
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	e007      	b.n	8009ff6 <HAL_DMA_Init+0x196>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f022 0201 	bic.w	r2, r2, #1
 8009ff4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009ff6:	e02f      	b.n	800a058 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009ff8:	f7fd faa6 	bl	8007548 <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	2b05      	cmp	r3, #5
 800a004:	d928      	bls.n	800a058 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2220      	movs	r2, #32
 800a00a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2203      	movs	r2, #3
 800a010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e244      	b.n	800a4a2 <HAL_DMA_Init+0x642>
 800a018:	40020010 	.word	0x40020010
 800a01c:	40020028 	.word	0x40020028
 800a020:	40020040 	.word	0x40020040
 800a024:	40020058 	.word	0x40020058
 800a028:	40020070 	.word	0x40020070
 800a02c:	40020088 	.word	0x40020088
 800a030:	400200a0 	.word	0x400200a0
 800a034:	400200b8 	.word	0x400200b8
 800a038:	40020410 	.word	0x40020410
 800a03c:	40020428 	.word	0x40020428
 800a040:	40020440 	.word	0x40020440
 800a044:	40020458 	.word	0x40020458
 800a048:	40020470 	.word	0x40020470
 800a04c:	40020488 	.word	0x40020488
 800a050:	400204a0 	.word	0x400204a0
 800a054:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f003 0301 	and.w	r3, r3, #1
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1c8      	bne.n	8009ff8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a06e:	697a      	ldr	r2, [r7, #20]
 800a070:	4b84      	ldr	r3, [pc, #528]	; (800a284 <HAL_DMA_Init+0x424>)
 800a072:	4013      	ands	r3, r2
 800a074:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800a07e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	691b      	ldr	r3, [r3, #16]
 800a084:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a08a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a096:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800a09e:	697a      	ldr	r2, [r7, #20]
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	2b04      	cmp	r3, #4
 800a0aa:	d107      	bne.n	800a0bc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	697a      	ldr	r2, [r7, #20]
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2b28      	cmp	r3, #40	; 0x28
 800a0c2:	d903      	bls.n	800a0cc <HAL_DMA_Init+0x26c>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a0ca:	d91f      	bls.n	800a10c <HAL_DMA_Init+0x2ac>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	2b3e      	cmp	r3, #62	; 0x3e
 800a0d2:	d903      	bls.n	800a0dc <HAL_DMA_Init+0x27c>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	2b42      	cmp	r3, #66	; 0x42
 800a0da:	d917      	bls.n	800a10c <HAL_DMA_Init+0x2ac>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2b46      	cmp	r3, #70	; 0x46
 800a0e2:	d903      	bls.n	800a0ec <HAL_DMA_Init+0x28c>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	2b48      	cmp	r3, #72	; 0x48
 800a0ea:	d90f      	bls.n	800a10c <HAL_DMA_Init+0x2ac>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	2b4e      	cmp	r3, #78	; 0x4e
 800a0f2:	d903      	bls.n	800a0fc <HAL_DMA_Init+0x29c>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	2b52      	cmp	r3, #82	; 0x52
 800a0fa:	d907      	bls.n	800a10c <HAL_DMA_Init+0x2ac>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	2b73      	cmp	r3, #115	; 0x73
 800a102:	d905      	bls.n	800a110 <HAL_DMA_Init+0x2b0>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	2b77      	cmp	r3, #119	; 0x77
 800a10a:	d801      	bhi.n	800a110 <HAL_DMA_Init+0x2b0>
 800a10c:	2301      	movs	r3, #1
 800a10e:	e000      	b.n	800a112 <HAL_DMA_Init+0x2b2>
 800a110:	2300      	movs	r3, #0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d003      	beq.n	800a11e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a11c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	695b      	ldr	r3, [r3, #20]
 800a12c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f023 0307 	bic.w	r3, r3, #7
 800a134:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	697a      	ldr	r2, [r7, #20]
 800a13c:	4313      	orrs	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a144:	2b04      	cmp	r3, #4
 800a146:	d117      	bne.n	800a178 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	4313      	orrs	r3, r2
 800a150:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00e      	beq.n	800a178 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f002 fb3e 	bl	800c7dc <DMA_CheckFifoParam>
 800a160:	4603      	mov	r3, r0
 800a162:	2b00      	cmp	r3, #0
 800a164:	d008      	beq.n	800a178 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2240      	movs	r2, #64	; 0x40
 800a16a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e194      	b.n	800a4a2 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	697a      	ldr	r2, [r7, #20]
 800a17e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f002 fa79 	bl	800c678 <DMA_CalcBaseAndBitshift>
 800a186:	4603      	mov	r3, r0
 800a188:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a18e:	f003 031f 	and.w	r3, r3, #31
 800a192:	223f      	movs	r2, #63	; 0x3f
 800a194:	409a      	lsls	r2, r3
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	609a      	str	r2, [r3, #8]
 800a19a:	e0ca      	b.n	800a332 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a39      	ldr	r2, [pc, #228]	; (800a288 <HAL_DMA_Init+0x428>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d022      	beq.n	800a1ec <HAL_DMA_Init+0x38c>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a38      	ldr	r2, [pc, #224]	; (800a28c <HAL_DMA_Init+0x42c>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d01d      	beq.n	800a1ec <HAL_DMA_Init+0x38c>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4a36      	ldr	r2, [pc, #216]	; (800a290 <HAL_DMA_Init+0x430>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d018      	beq.n	800a1ec <HAL_DMA_Init+0x38c>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	4a35      	ldr	r2, [pc, #212]	; (800a294 <HAL_DMA_Init+0x434>)
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	d013      	beq.n	800a1ec <HAL_DMA_Init+0x38c>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a33      	ldr	r2, [pc, #204]	; (800a298 <HAL_DMA_Init+0x438>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d00e      	beq.n	800a1ec <HAL_DMA_Init+0x38c>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a32      	ldr	r2, [pc, #200]	; (800a29c <HAL_DMA_Init+0x43c>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d009      	beq.n	800a1ec <HAL_DMA_Init+0x38c>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a30      	ldr	r2, [pc, #192]	; (800a2a0 <HAL_DMA_Init+0x440>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d004      	beq.n	800a1ec <HAL_DMA_Init+0x38c>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a2f      	ldr	r2, [pc, #188]	; (800a2a4 <HAL_DMA_Init+0x444>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d101      	bne.n	800a1f0 <HAL_DMA_Init+0x390>
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e000      	b.n	800a1f2 <HAL_DMA_Init+0x392>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	f000 8094 	beq.w	800a320 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a22      	ldr	r2, [pc, #136]	; (800a288 <HAL_DMA_Init+0x428>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d021      	beq.n	800a246 <HAL_DMA_Init+0x3e6>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a21      	ldr	r2, [pc, #132]	; (800a28c <HAL_DMA_Init+0x42c>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d01c      	beq.n	800a246 <HAL_DMA_Init+0x3e6>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a1f      	ldr	r2, [pc, #124]	; (800a290 <HAL_DMA_Init+0x430>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d017      	beq.n	800a246 <HAL_DMA_Init+0x3e6>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a1e      	ldr	r2, [pc, #120]	; (800a294 <HAL_DMA_Init+0x434>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d012      	beq.n	800a246 <HAL_DMA_Init+0x3e6>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a1c      	ldr	r2, [pc, #112]	; (800a298 <HAL_DMA_Init+0x438>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d00d      	beq.n	800a246 <HAL_DMA_Init+0x3e6>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a1b      	ldr	r2, [pc, #108]	; (800a29c <HAL_DMA_Init+0x43c>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d008      	beq.n	800a246 <HAL_DMA_Init+0x3e6>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a19      	ldr	r2, [pc, #100]	; (800a2a0 <HAL_DMA_Init+0x440>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d003      	beq.n	800a246 <HAL_DMA_Init+0x3e6>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a18      	ldr	r2, [pc, #96]	; (800a2a4 <HAL_DMA_Init+0x444>)
 800a244:	4293      	cmp	r3, r2
 800a246:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2202      	movs	r2, #2
 800a24c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2200      	movs	r2, #0
 800a254:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800a260:	697a      	ldr	r2, [r7, #20]
 800a262:	4b11      	ldr	r3, [pc, #68]	; (800a2a8 <HAL_DMA_Init+0x448>)
 800a264:	4013      	ands	r3, r2
 800a266:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	2b40      	cmp	r3, #64	; 0x40
 800a26e:	d01d      	beq.n	800a2ac <HAL_DMA_Init+0x44c>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	2b80      	cmp	r3, #128	; 0x80
 800a276:	d102      	bne.n	800a27e <HAL_DMA_Init+0x41e>
 800a278:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a27c:	e017      	b.n	800a2ae <HAL_DMA_Init+0x44e>
 800a27e:	2300      	movs	r3, #0
 800a280:	e015      	b.n	800a2ae <HAL_DMA_Init+0x44e>
 800a282:	bf00      	nop
 800a284:	fe10803f 	.word	0xfe10803f
 800a288:	58025408 	.word	0x58025408
 800a28c:	5802541c 	.word	0x5802541c
 800a290:	58025430 	.word	0x58025430
 800a294:	58025444 	.word	0x58025444
 800a298:	58025458 	.word	0x58025458
 800a29c:	5802546c 	.word	0x5802546c
 800a2a0:	58025480 	.word	0x58025480
 800a2a4:	58025494 	.word	0x58025494
 800a2a8:	fffe000f 	.word	0xfffe000f
 800a2ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	68d2      	ldr	r2, [r2, #12]
 800a2b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a2b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800a2bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	695b      	ldr	r3, [r3, #20]
 800a2c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800a2c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	699b      	ldr	r3, [r3, #24]
 800a2ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800a2cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800a2d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800a2dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	697a      	ldr	r2, [r7, #20]
 800a2ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	461a      	mov	r2, r3
 800a2f2:	4b6e      	ldr	r3, [pc, #440]	; (800a4ac <HAL_DMA_Init+0x64c>)
 800a2f4:	4413      	add	r3, r2
 800a2f6:	4a6e      	ldr	r2, [pc, #440]	; (800a4b0 <HAL_DMA_Init+0x650>)
 800a2f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2fc:	091b      	lsrs	r3, r3, #4
 800a2fe:	009a      	lsls	r2, r3, #2
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f002 f9b7 	bl	800c678 <DMA_CalcBaseAndBitshift>
 800a30a:	4603      	mov	r3, r0
 800a30c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a312:	f003 031f 	and.w	r3, r3, #31
 800a316:	2201      	movs	r2, #1
 800a318:	409a      	lsls	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	605a      	str	r2, [r3, #4]
 800a31e:	e008      	b.n	800a332 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2240      	movs	r2, #64	; 0x40
 800a324:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2203      	movs	r2, #3
 800a32a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e0b7      	b.n	800a4a2 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a5f      	ldr	r2, [pc, #380]	; (800a4b4 <HAL_DMA_Init+0x654>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d072      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a5d      	ldr	r2, [pc, #372]	; (800a4b8 <HAL_DMA_Init+0x658>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d06d      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	4a5c      	ldr	r2, [pc, #368]	; (800a4bc <HAL_DMA_Init+0x65c>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d068      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4a5a      	ldr	r2, [pc, #360]	; (800a4c0 <HAL_DMA_Init+0x660>)
 800a356:	4293      	cmp	r3, r2
 800a358:	d063      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a59      	ldr	r2, [pc, #356]	; (800a4c4 <HAL_DMA_Init+0x664>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d05e      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a57      	ldr	r2, [pc, #348]	; (800a4c8 <HAL_DMA_Init+0x668>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d059      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	4a56      	ldr	r2, [pc, #344]	; (800a4cc <HAL_DMA_Init+0x66c>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d054      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a54      	ldr	r2, [pc, #336]	; (800a4d0 <HAL_DMA_Init+0x670>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d04f      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a53      	ldr	r2, [pc, #332]	; (800a4d4 <HAL_DMA_Init+0x674>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d04a      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a51      	ldr	r2, [pc, #324]	; (800a4d8 <HAL_DMA_Init+0x678>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d045      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a50      	ldr	r2, [pc, #320]	; (800a4dc <HAL_DMA_Init+0x67c>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d040      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a4e      	ldr	r2, [pc, #312]	; (800a4e0 <HAL_DMA_Init+0x680>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d03b      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a4d      	ldr	r2, [pc, #308]	; (800a4e4 <HAL_DMA_Init+0x684>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d036      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a4b      	ldr	r2, [pc, #300]	; (800a4e8 <HAL_DMA_Init+0x688>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d031      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a4a      	ldr	r2, [pc, #296]	; (800a4ec <HAL_DMA_Init+0x68c>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d02c      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a48      	ldr	r2, [pc, #288]	; (800a4f0 <HAL_DMA_Init+0x690>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d027      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a47      	ldr	r2, [pc, #284]	; (800a4f4 <HAL_DMA_Init+0x694>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d022      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a45      	ldr	r2, [pc, #276]	; (800a4f8 <HAL_DMA_Init+0x698>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d01d      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a44      	ldr	r2, [pc, #272]	; (800a4fc <HAL_DMA_Init+0x69c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d018      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a42      	ldr	r2, [pc, #264]	; (800a500 <HAL_DMA_Init+0x6a0>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d013      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a41      	ldr	r2, [pc, #260]	; (800a504 <HAL_DMA_Init+0x6a4>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d00e      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a3f      	ldr	r2, [pc, #252]	; (800a508 <HAL_DMA_Init+0x6a8>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d009      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a3e      	ldr	r2, [pc, #248]	; (800a50c <HAL_DMA_Init+0x6ac>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d004      	beq.n	800a422 <HAL_DMA_Init+0x5c2>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a3c      	ldr	r2, [pc, #240]	; (800a510 <HAL_DMA_Init+0x6b0>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d101      	bne.n	800a426 <HAL_DMA_Init+0x5c6>
 800a422:	2301      	movs	r3, #1
 800a424:	e000      	b.n	800a428 <HAL_DMA_Init+0x5c8>
 800a426:	2300      	movs	r3, #0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d032      	beq.n	800a492 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f002 fa51 	bl	800c8d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	2b80      	cmp	r3, #128	; 0x80
 800a438:	d102      	bne.n	800a440 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685a      	ldr	r2, [r3, #4]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a448:	b2d2      	uxtb	r2, r2
 800a44a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a454:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d010      	beq.n	800a480 <HAL_DMA_Init+0x620>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	2b08      	cmp	r3, #8
 800a464:	d80c      	bhi.n	800a480 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f002 face 	bl	800ca08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a470:	2200      	movs	r2, #0
 800a472:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a47c:	605a      	str	r2, [r3, #4]
 800a47e:	e008      	b.n	800a492 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2201      	movs	r2, #1
 800a49c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a4a0:	2300      	movs	r3, #0
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	3718      	adds	r7, #24
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	a7fdabf8 	.word	0xa7fdabf8
 800a4b0:	cccccccd 	.word	0xcccccccd
 800a4b4:	40020010 	.word	0x40020010
 800a4b8:	40020028 	.word	0x40020028
 800a4bc:	40020040 	.word	0x40020040
 800a4c0:	40020058 	.word	0x40020058
 800a4c4:	40020070 	.word	0x40020070
 800a4c8:	40020088 	.word	0x40020088
 800a4cc:	400200a0 	.word	0x400200a0
 800a4d0:	400200b8 	.word	0x400200b8
 800a4d4:	40020410 	.word	0x40020410
 800a4d8:	40020428 	.word	0x40020428
 800a4dc:	40020440 	.word	0x40020440
 800a4e0:	40020458 	.word	0x40020458
 800a4e4:	40020470 	.word	0x40020470
 800a4e8:	40020488 	.word	0x40020488
 800a4ec:	400204a0 	.word	0x400204a0
 800a4f0:	400204b8 	.word	0x400204b8
 800a4f4:	58025408 	.word	0x58025408
 800a4f8:	5802541c 	.word	0x5802541c
 800a4fc:	58025430 	.word	0x58025430
 800a500:	58025444 	.word	0x58025444
 800a504:	58025458 	.word	0x58025458
 800a508:	5802546c 	.word	0x5802546c
 800a50c:	58025480 	.word	0x58025480
 800a510:	58025494 	.word	0x58025494

0800a514 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
 800a520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a522:	2300      	movs	r3, #0
 800a524:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d101      	bne.n	800a530 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e226      	b.n	800a97e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a536:	2b01      	cmp	r3, #1
 800a538:	d101      	bne.n	800a53e <HAL_DMA_Start_IT+0x2a>
 800a53a:	2302      	movs	r3, #2
 800a53c:	e21f      	b.n	800a97e <HAL_DMA_Start_IT+0x46a>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	2b01      	cmp	r3, #1
 800a550:	f040 820a 	bne.w	800a968 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2202      	movs	r2, #2
 800a558:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2200      	movs	r2, #0
 800a560:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a68      	ldr	r2, [pc, #416]	; (800a708 <HAL_DMA_Start_IT+0x1f4>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d04a      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a66      	ldr	r2, [pc, #408]	; (800a70c <HAL_DMA_Start_IT+0x1f8>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d045      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a65      	ldr	r2, [pc, #404]	; (800a710 <HAL_DMA_Start_IT+0x1fc>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d040      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a63      	ldr	r2, [pc, #396]	; (800a714 <HAL_DMA_Start_IT+0x200>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d03b      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a62      	ldr	r2, [pc, #392]	; (800a718 <HAL_DMA_Start_IT+0x204>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d036      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a60      	ldr	r2, [pc, #384]	; (800a71c <HAL_DMA_Start_IT+0x208>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d031      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a5f      	ldr	r2, [pc, #380]	; (800a720 <HAL_DMA_Start_IT+0x20c>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d02c      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4a5d      	ldr	r2, [pc, #372]	; (800a724 <HAL_DMA_Start_IT+0x210>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d027      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	4a5c      	ldr	r2, [pc, #368]	; (800a728 <HAL_DMA_Start_IT+0x214>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d022      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a5a      	ldr	r2, [pc, #360]	; (800a72c <HAL_DMA_Start_IT+0x218>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d01d      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a59      	ldr	r2, [pc, #356]	; (800a730 <HAL_DMA_Start_IT+0x21c>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d018      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a57      	ldr	r2, [pc, #348]	; (800a734 <HAL_DMA_Start_IT+0x220>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d013      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a56      	ldr	r2, [pc, #344]	; (800a738 <HAL_DMA_Start_IT+0x224>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d00e      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a54      	ldr	r2, [pc, #336]	; (800a73c <HAL_DMA_Start_IT+0x228>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d009      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a53      	ldr	r2, [pc, #332]	; (800a740 <HAL_DMA_Start_IT+0x22c>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d004      	beq.n	800a602 <HAL_DMA_Start_IT+0xee>
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a51      	ldr	r2, [pc, #324]	; (800a744 <HAL_DMA_Start_IT+0x230>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d108      	bne.n	800a614 <HAL_DMA_Start_IT+0x100>
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	681a      	ldr	r2, [r3, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f022 0201 	bic.w	r2, r2, #1
 800a610:	601a      	str	r2, [r3, #0]
 800a612:	e007      	b.n	800a624 <HAL_DMA_Start_IT+0x110>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f022 0201 	bic.w	r2, r2, #1
 800a622:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	68b9      	ldr	r1, [r7, #8]
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f001 fe78 	bl	800c320 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a34      	ldr	r2, [pc, #208]	; (800a708 <HAL_DMA_Start_IT+0x1f4>)
 800a636:	4293      	cmp	r3, r2
 800a638:	d04a      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4a33      	ldr	r2, [pc, #204]	; (800a70c <HAL_DMA_Start_IT+0x1f8>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d045      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a31      	ldr	r2, [pc, #196]	; (800a710 <HAL_DMA_Start_IT+0x1fc>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d040      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a30      	ldr	r2, [pc, #192]	; (800a714 <HAL_DMA_Start_IT+0x200>)
 800a654:	4293      	cmp	r3, r2
 800a656:	d03b      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a2e      	ldr	r2, [pc, #184]	; (800a718 <HAL_DMA_Start_IT+0x204>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d036      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a2d      	ldr	r2, [pc, #180]	; (800a71c <HAL_DMA_Start_IT+0x208>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d031      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a2b      	ldr	r2, [pc, #172]	; (800a720 <HAL_DMA_Start_IT+0x20c>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d02c      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a2a      	ldr	r2, [pc, #168]	; (800a724 <HAL_DMA_Start_IT+0x210>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d027      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a28      	ldr	r2, [pc, #160]	; (800a728 <HAL_DMA_Start_IT+0x214>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d022      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a27      	ldr	r2, [pc, #156]	; (800a72c <HAL_DMA_Start_IT+0x218>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d01d      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a25      	ldr	r2, [pc, #148]	; (800a730 <HAL_DMA_Start_IT+0x21c>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d018      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	4a24      	ldr	r2, [pc, #144]	; (800a734 <HAL_DMA_Start_IT+0x220>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d013      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a22      	ldr	r2, [pc, #136]	; (800a738 <HAL_DMA_Start_IT+0x224>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d00e      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a21      	ldr	r2, [pc, #132]	; (800a73c <HAL_DMA_Start_IT+0x228>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d009      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a1f      	ldr	r2, [pc, #124]	; (800a740 <HAL_DMA_Start_IT+0x22c>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d004      	beq.n	800a6d0 <HAL_DMA_Start_IT+0x1bc>
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a1e      	ldr	r2, [pc, #120]	; (800a744 <HAL_DMA_Start_IT+0x230>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d101      	bne.n	800a6d4 <HAL_DMA_Start_IT+0x1c0>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e000      	b.n	800a6d6 <HAL_DMA_Start_IT+0x1c2>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d036      	beq.n	800a748 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f023 021e 	bic.w	r2, r3, #30
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f042 0216 	orr.w	r2, r2, #22
 800a6ec:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d03e      	beq.n	800a774 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f042 0208 	orr.w	r2, r2, #8
 800a704:	601a      	str	r2, [r3, #0]
 800a706:	e035      	b.n	800a774 <HAL_DMA_Start_IT+0x260>
 800a708:	40020010 	.word	0x40020010
 800a70c:	40020028 	.word	0x40020028
 800a710:	40020040 	.word	0x40020040
 800a714:	40020058 	.word	0x40020058
 800a718:	40020070 	.word	0x40020070
 800a71c:	40020088 	.word	0x40020088
 800a720:	400200a0 	.word	0x400200a0
 800a724:	400200b8 	.word	0x400200b8
 800a728:	40020410 	.word	0x40020410
 800a72c:	40020428 	.word	0x40020428
 800a730:	40020440 	.word	0x40020440
 800a734:	40020458 	.word	0x40020458
 800a738:	40020470 	.word	0x40020470
 800a73c:	40020488 	.word	0x40020488
 800a740:	400204a0 	.word	0x400204a0
 800a744:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f023 020e 	bic.w	r2, r3, #14
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 020a 	orr.w	r2, r2, #10
 800a75a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a760:	2b00      	cmp	r3, #0
 800a762:	d007      	beq.n	800a774 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f042 0204 	orr.w	r2, r2, #4
 800a772:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a83      	ldr	r2, [pc, #524]	; (800a988 <HAL_DMA_Start_IT+0x474>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d072      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4a82      	ldr	r2, [pc, #520]	; (800a98c <HAL_DMA_Start_IT+0x478>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d06d      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a80      	ldr	r2, [pc, #512]	; (800a990 <HAL_DMA_Start_IT+0x47c>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d068      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4a7f      	ldr	r2, [pc, #508]	; (800a994 <HAL_DMA_Start_IT+0x480>)
 800a798:	4293      	cmp	r3, r2
 800a79a:	d063      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a7d      	ldr	r2, [pc, #500]	; (800a998 <HAL_DMA_Start_IT+0x484>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d05e      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	4a7c      	ldr	r2, [pc, #496]	; (800a99c <HAL_DMA_Start_IT+0x488>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d059      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a7a      	ldr	r2, [pc, #488]	; (800a9a0 <HAL_DMA_Start_IT+0x48c>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d054      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a79      	ldr	r2, [pc, #484]	; (800a9a4 <HAL_DMA_Start_IT+0x490>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d04f      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a77      	ldr	r2, [pc, #476]	; (800a9a8 <HAL_DMA_Start_IT+0x494>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d04a      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a76      	ldr	r2, [pc, #472]	; (800a9ac <HAL_DMA_Start_IT+0x498>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d045      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a74      	ldr	r2, [pc, #464]	; (800a9b0 <HAL_DMA_Start_IT+0x49c>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d040      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	4a73      	ldr	r2, [pc, #460]	; (800a9b4 <HAL_DMA_Start_IT+0x4a0>)
 800a7e8:	4293      	cmp	r3, r2
 800a7ea:	d03b      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a71      	ldr	r2, [pc, #452]	; (800a9b8 <HAL_DMA_Start_IT+0x4a4>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d036      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a70      	ldr	r2, [pc, #448]	; (800a9bc <HAL_DMA_Start_IT+0x4a8>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d031      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a6e      	ldr	r2, [pc, #440]	; (800a9c0 <HAL_DMA_Start_IT+0x4ac>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d02c      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	4a6d      	ldr	r2, [pc, #436]	; (800a9c4 <HAL_DMA_Start_IT+0x4b0>)
 800a810:	4293      	cmp	r3, r2
 800a812:	d027      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a6b      	ldr	r2, [pc, #428]	; (800a9c8 <HAL_DMA_Start_IT+0x4b4>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d022      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	4a6a      	ldr	r2, [pc, #424]	; (800a9cc <HAL_DMA_Start_IT+0x4b8>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d01d      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a68      	ldr	r2, [pc, #416]	; (800a9d0 <HAL_DMA_Start_IT+0x4bc>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d018      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	4a67      	ldr	r2, [pc, #412]	; (800a9d4 <HAL_DMA_Start_IT+0x4c0>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d013      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4a65      	ldr	r2, [pc, #404]	; (800a9d8 <HAL_DMA_Start_IT+0x4c4>)
 800a842:	4293      	cmp	r3, r2
 800a844:	d00e      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	4a64      	ldr	r2, [pc, #400]	; (800a9dc <HAL_DMA_Start_IT+0x4c8>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d009      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4a62      	ldr	r2, [pc, #392]	; (800a9e0 <HAL_DMA_Start_IT+0x4cc>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d004      	beq.n	800a864 <HAL_DMA_Start_IT+0x350>
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4a61      	ldr	r2, [pc, #388]	; (800a9e4 <HAL_DMA_Start_IT+0x4d0>)
 800a860:	4293      	cmp	r3, r2
 800a862:	d101      	bne.n	800a868 <HAL_DMA_Start_IT+0x354>
 800a864:	2301      	movs	r3, #1
 800a866:	e000      	b.n	800a86a <HAL_DMA_Start_IT+0x356>
 800a868:	2300      	movs	r3, #0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d01a      	beq.n	800a8a4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d007      	beq.n	800a88c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a88a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a890:	2b00      	cmp	r3, #0
 800a892:	d007      	beq.n	800a8a4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a89e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8a2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a37      	ldr	r2, [pc, #220]	; (800a988 <HAL_DMA_Start_IT+0x474>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d04a      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a36      	ldr	r2, [pc, #216]	; (800a98c <HAL_DMA_Start_IT+0x478>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d045      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a34      	ldr	r2, [pc, #208]	; (800a990 <HAL_DMA_Start_IT+0x47c>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d040      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a33      	ldr	r2, [pc, #204]	; (800a994 <HAL_DMA_Start_IT+0x480>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d03b      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a31      	ldr	r2, [pc, #196]	; (800a998 <HAL_DMA_Start_IT+0x484>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d036      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a30      	ldr	r2, [pc, #192]	; (800a99c <HAL_DMA_Start_IT+0x488>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d031      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a2e      	ldr	r2, [pc, #184]	; (800a9a0 <HAL_DMA_Start_IT+0x48c>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d02c      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4a2d      	ldr	r2, [pc, #180]	; (800a9a4 <HAL_DMA_Start_IT+0x490>)
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	d027      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	4a2b      	ldr	r2, [pc, #172]	; (800a9a8 <HAL_DMA_Start_IT+0x494>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d022      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4a2a      	ldr	r2, [pc, #168]	; (800a9ac <HAL_DMA_Start_IT+0x498>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d01d      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a28      	ldr	r2, [pc, #160]	; (800a9b0 <HAL_DMA_Start_IT+0x49c>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d018      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a27      	ldr	r2, [pc, #156]	; (800a9b4 <HAL_DMA_Start_IT+0x4a0>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d013      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	4a25      	ldr	r2, [pc, #148]	; (800a9b8 <HAL_DMA_Start_IT+0x4a4>)
 800a922:	4293      	cmp	r3, r2
 800a924:	d00e      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4a24      	ldr	r2, [pc, #144]	; (800a9bc <HAL_DMA_Start_IT+0x4a8>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d009      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a22      	ldr	r2, [pc, #136]	; (800a9c0 <HAL_DMA_Start_IT+0x4ac>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d004      	beq.n	800a944 <HAL_DMA_Start_IT+0x430>
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a21      	ldr	r2, [pc, #132]	; (800a9c4 <HAL_DMA_Start_IT+0x4b0>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d108      	bne.n	800a956 <HAL_DMA_Start_IT+0x442>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	681a      	ldr	r2, [r3, #0]
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f042 0201 	orr.w	r2, r2, #1
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	e012      	b.n	800a97c <HAL_DMA_Start_IT+0x468>
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f042 0201 	orr.w	r2, r2, #1
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	e009      	b.n	800a97c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a96e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a97c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3718      	adds	r7, #24
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}
 800a986:	bf00      	nop
 800a988:	40020010 	.word	0x40020010
 800a98c:	40020028 	.word	0x40020028
 800a990:	40020040 	.word	0x40020040
 800a994:	40020058 	.word	0x40020058
 800a998:	40020070 	.word	0x40020070
 800a99c:	40020088 	.word	0x40020088
 800a9a0:	400200a0 	.word	0x400200a0
 800a9a4:	400200b8 	.word	0x400200b8
 800a9a8:	40020410 	.word	0x40020410
 800a9ac:	40020428 	.word	0x40020428
 800a9b0:	40020440 	.word	0x40020440
 800a9b4:	40020458 	.word	0x40020458
 800a9b8:	40020470 	.word	0x40020470
 800a9bc:	40020488 	.word	0x40020488
 800a9c0:	400204a0 	.word	0x400204a0
 800a9c4:	400204b8 	.word	0x400204b8
 800a9c8:	58025408 	.word	0x58025408
 800a9cc:	5802541c 	.word	0x5802541c
 800a9d0:	58025430 	.word	0x58025430
 800a9d4:	58025444 	.word	0x58025444
 800a9d8:	58025458 	.word	0x58025458
 800a9dc:	5802546c 	.word	0x5802546c
 800a9e0:	58025480 	.word	0x58025480
 800a9e4:	58025494 	.word	0x58025494

0800a9e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b086      	sub	sp, #24
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800a9f0:	f7fc fdaa 	bl	8007548 <HAL_GetTick>
 800a9f4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d101      	bne.n	800aa00 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	e2dc      	b.n	800afba <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa06:	b2db      	uxtb	r3, r3
 800aa08:	2b02      	cmp	r3, #2
 800aa0a:	d008      	beq.n	800aa1e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2280      	movs	r2, #128	; 0x80
 800aa10:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e2cd      	b.n	800afba <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a76      	ldr	r2, [pc, #472]	; (800abfc <HAL_DMA_Abort+0x214>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d04a      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a74      	ldr	r2, [pc, #464]	; (800ac00 <HAL_DMA_Abort+0x218>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d045      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a73      	ldr	r2, [pc, #460]	; (800ac04 <HAL_DMA_Abort+0x21c>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d040      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	4a71      	ldr	r2, [pc, #452]	; (800ac08 <HAL_DMA_Abort+0x220>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d03b      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4a70      	ldr	r2, [pc, #448]	; (800ac0c <HAL_DMA_Abort+0x224>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d036      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a6e      	ldr	r2, [pc, #440]	; (800ac10 <HAL_DMA_Abort+0x228>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d031      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a6d      	ldr	r2, [pc, #436]	; (800ac14 <HAL_DMA_Abort+0x22c>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d02c      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a6b      	ldr	r2, [pc, #428]	; (800ac18 <HAL_DMA_Abort+0x230>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d027      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a6a      	ldr	r2, [pc, #424]	; (800ac1c <HAL_DMA_Abort+0x234>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d022      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a68      	ldr	r2, [pc, #416]	; (800ac20 <HAL_DMA_Abort+0x238>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d01d      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a67      	ldr	r2, [pc, #412]	; (800ac24 <HAL_DMA_Abort+0x23c>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d018      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a65      	ldr	r2, [pc, #404]	; (800ac28 <HAL_DMA_Abort+0x240>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d013      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a64      	ldr	r2, [pc, #400]	; (800ac2c <HAL_DMA_Abort+0x244>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d00e      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a62      	ldr	r2, [pc, #392]	; (800ac30 <HAL_DMA_Abort+0x248>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d009      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a61      	ldr	r2, [pc, #388]	; (800ac34 <HAL_DMA_Abort+0x24c>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d004      	beq.n	800aabe <HAL_DMA_Abort+0xd6>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	4a5f      	ldr	r2, [pc, #380]	; (800ac38 <HAL_DMA_Abort+0x250>)
 800aaba:	4293      	cmp	r3, r2
 800aabc:	d101      	bne.n	800aac2 <HAL_DMA_Abort+0xda>
 800aabe:	2301      	movs	r3, #1
 800aac0:	e000      	b.n	800aac4 <HAL_DMA_Abort+0xdc>
 800aac2:	2300      	movs	r3, #0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d013      	beq.n	800aaf0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f022 021e 	bic.w	r2, r2, #30
 800aad6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	695a      	ldr	r2, [r3, #20]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aae6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	617b      	str	r3, [r7, #20]
 800aaee:	e00a      	b.n	800ab06 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f022 020e 	bic.w	r2, r2, #14
 800aafe:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a3c      	ldr	r2, [pc, #240]	; (800abfc <HAL_DMA_Abort+0x214>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d072      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a3a      	ldr	r2, [pc, #232]	; (800ac00 <HAL_DMA_Abort+0x218>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d06d      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a39      	ldr	r2, [pc, #228]	; (800ac04 <HAL_DMA_Abort+0x21c>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d068      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a37      	ldr	r2, [pc, #220]	; (800ac08 <HAL_DMA_Abort+0x220>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d063      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a36      	ldr	r2, [pc, #216]	; (800ac0c <HAL_DMA_Abort+0x224>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d05e      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a34      	ldr	r2, [pc, #208]	; (800ac10 <HAL_DMA_Abort+0x228>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d059      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a33      	ldr	r2, [pc, #204]	; (800ac14 <HAL_DMA_Abort+0x22c>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d054      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a31      	ldr	r2, [pc, #196]	; (800ac18 <HAL_DMA_Abort+0x230>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d04f      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a30      	ldr	r2, [pc, #192]	; (800ac1c <HAL_DMA_Abort+0x234>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d04a      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a2e      	ldr	r2, [pc, #184]	; (800ac20 <HAL_DMA_Abort+0x238>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d045      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a2d      	ldr	r2, [pc, #180]	; (800ac24 <HAL_DMA_Abort+0x23c>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d040      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a2b      	ldr	r2, [pc, #172]	; (800ac28 <HAL_DMA_Abort+0x240>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d03b      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	4a2a      	ldr	r2, [pc, #168]	; (800ac2c <HAL_DMA_Abort+0x244>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d036      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a28      	ldr	r2, [pc, #160]	; (800ac30 <HAL_DMA_Abort+0x248>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d031      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a27      	ldr	r2, [pc, #156]	; (800ac34 <HAL_DMA_Abort+0x24c>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d02c      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a25      	ldr	r2, [pc, #148]	; (800ac38 <HAL_DMA_Abort+0x250>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d027      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a24      	ldr	r2, [pc, #144]	; (800ac3c <HAL_DMA_Abort+0x254>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d022      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a22      	ldr	r2, [pc, #136]	; (800ac40 <HAL_DMA_Abort+0x258>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d01d      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a21      	ldr	r2, [pc, #132]	; (800ac44 <HAL_DMA_Abort+0x25c>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d018      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	4a1f      	ldr	r2, [pc, #124]	; (800ac48 <HAL_DMA_Abort+0x260>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d013      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4a1e      	ldr	r2, [pc, #120]	; (800ac4c <HAL_DMA_Abort+0x264>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d00e      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	4a1c      	ldr	r2, [pc, #112]	; (800ac50 <HAL_DMA_Abort+0x268>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d009      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a1b      	ldr	r2, [pc, #108]	; (800ac54 <HAL_DMA_Abort+0x26c>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d004      	beq.n	800abf6 <HAL_DMA_Abort+0x20e>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4a19      	ldr	r2, [pc, #100]	; (800ac58 <HAL_DMA_Abort+0x270>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d132      	bne.n	800ac5c <HAL_DMA_Abort+0x274>
 800abf6:	2301      	movs	r3, #1
 800abf8:	e031      	b.n	800ac5e <HAL_DMA_Abort+0x276>
 800abfa:	bf00      	nop
 800abfc:	40020010 	.word	0x40020010
 800ac00:	40020028 	.word	0x40020028
 800ac04:	40020040 	.word	0x40020040
 800ac08:	40020058 	.word	0x40020058
 800ac0c:	40020070 	.word	0x40020070
 800ac10:	40020088 	.word	0x40020088
 800ac14:	400200a0 	.word	0x400200a0
 800ac18:	400200b8 	.word	0x400200b8
 800ac1c:	40020410 	.word	0x40020410
 800ac20:	40020428 	.word	0x40020428
 800ac24:	40020440 	.word	0x40020440
 800ac28:	40020458 	.word	0x40020458
 800ac2c:	40020470 	.word	0x40020470
 800ac30:	40020488 	.word	0x40020488
 800ac34:	400204a0 	.word	0x400204a0
 800ac38:	400204b8 	.word	0x400204b8
 800ac3c:	58025408 	.word	0x58025408
 800ac40:	5802541c 	.word	0x5802541c
 800ac44:	58025430 	.word	0x58025430
 800ac48:	58025444 	.word	0x58025444
 800ac4c:	58025458 	.word	0x58025458
 800ac50:	5802546c 	.word	0x5802546c
 800ac54:	58025480 	.word	0x58025480
 800ac58:	58025494 	.word	0x58025494
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d007      	beq.n	800ac72 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac70:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a6d      	ldr	r2, [pc, #436]	; (800ae2c <HAL_DMA_Abort+0x444>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d04a      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a6b      	ldr	r2, [pc, #428]	; (800ae30 <HAL_DMA_Abort+0x448>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d045      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	4a6a      	ldr	r2, [pc, #424]	; (800ae34 <HAL_DMA_Abort+0x44c>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d040      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a68      	ldr	r2, [pc, #416]	; (800ae38 <HAL_DMA_Abort+0x450>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d03b      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a67      	ldr	r2, [pc, #412]	; (800ae3c <HAL_DMA_Abort+0x454>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d036      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a65      	ldr	r2, [pc, #404]	; (800ae40 <HAL_DMA_Abort+0x458>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d031      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	4a64      	ldr	r2, [pc, #400]	; (800ae44 <HAL_DMA_Abort+0x45c>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d02c      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	4a62      	ldr	r2, [pc, #392]	; (800ae48 <HAL_DMA_Abort+0x460>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d027      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	4a61      	ldr	r2, [pc, #388]	; (800ae4c <HAL_DMA_Abort+0x464>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d022      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4a5f      	ldr	r2, [pc, #380]	; (800ae50 <HAL_DMA_Abort+0x468>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d01d      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4a5e      	ldr	r2, [pc, #376]	; (800ae54 <HAL_DMA_Abort+0x46c>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d018      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	4a5c      	ldr	r2, [pc, #368]	; (800ae58 <HAL_DMA_Abort+0x470>)
 800ace6:	4293      	cmp	r3, r2
 800ace8:	d013      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a5b      	ldr	r2, [pc, #364]	; (800ae5c <HAL_DMA_Abort+0x474>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d00e      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a59      	ldr	r2, [pc, #356]	; (800ae60 <HAL_DMA_Abort+0x478>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d009      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4a58      	ldr	r2, [pc, #352]	; (800ae64 <HAL_DMA_Abort+0x47c>)
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d004      	beq.n	800ad12 <HAL_DMA_Abort+0x32a>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	4a56      	ldr	r2, [pc, #344]	; (800ae68 <HAL_DMA_Abort+0x480>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d108      	bne.n	800ad24 <HAL_DMA_Abort+0x33c>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f022 0201 	bic.w	r2, r2, #1
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	e007      	b.n	800ad34 <HAL_DMA_Abort+0x34c>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f022 0201 	bic.w	r2, r2, #1
 800ad32:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800ad34:	e013      	b.n	800ad5e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ad36:	f7fc fc07 	bl	8007548 <HAL_GetTick>
 800ad3a:	4602      	mov	r2, r0
 800ad3c:	693b      	ldr	r3, [r7, #16]
 800ad3e:	1ad3      	subs	r3, r2, r3
 800ad40:	2b05      	cmp	r3, #5
 800ad42:	d90c      	bls.n	800ad5e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2220      	movs	r2, #32
 800ad48:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2203      	movs	r2, #3
 800ad4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e12d      	b.n	800afba <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	f003 0301 	and.w	r3, r3, #1
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e5      	bne.n	800ad36 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a2f      	ldr	r2, [pc, #188]	; (800ae2c <HAL_DMA_Abort+0x444>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d04a      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a2d      	ldr	r2, [pc, #180]	; (800ae30 <HAL_DMA_Abort+0x448>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d045      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a2c      	ldr	r2, [pc, #176]	; (800ae34 <HAL_DMA_Abort+0x44c>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d040      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a2a      	ldr	r2, [pc, #168]	; (800ae38 <HAL_DMA_Abort+0x450>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d03b      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a29      	ldr	r2, [pc, #164]	; (800ae3c <HAL_DMA_Abort+0x454>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d036      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a27      	ldr	r2, [pc, #156]	; (800ae40 <HAL_DMA_Abort+0x458>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d031      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	4a26      	ldr	r2, [pc, #152]	; (800ae44 <HAL_DMA_Abort+0x45c>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d02c      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	4a24      	ldr	r2, [pc, #144]	; (800ae48 <HAL_DMA_Abort+0x460>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d027      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4a23      	ldr	r2, [pc, #140]	; (800ae4c <HAL_DMA_Abort+0x464>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d022      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4a21      	ldr	r2, [pc, #132]	; (800ae50 <HAL_DMA_Abort+0x468>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d01d      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4a20      	ldr	r2, [pc, #128]	; (800ae54 <HAL_DMA_Abort+0x46c>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d018      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a1e      	ldr	r2, [pc, #120]	; (800ae58 <HAL_DMA_Abort+0x470>)
 800adde:	4293      	cmp	r3, r2
 800ade0:	d013      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	4a1d      	ldr	r2, [pc, #116]	; (800ae5c <HAL_DMA_Abort+0x474>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d00e      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	4a1b      	ldr	r2, [pc, #108]	; (800ae60 <HAL_DMA_Abort+0x478>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d009      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a1a      	ldr	r2, [pc, #104]	; (800ae64 <HAL_DMA_Abort+0x47c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d004      	beq.n	800ae0a <HAL_DMA_Abort+0x422>
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a18      	ldr	r2, [pc, #96]	; (800ae68 <HAL_DMA_Abort+0x480>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d101      	bne.n	800ae0e <HAL_DMA_Abort+0x426>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e000      	b.n	800ae10 <HAL_DMA_Abort+0x428>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d02b      	beq.n	800ae6c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae18:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae1e:	f003 031f 	and.w	r3, r3, #31
 800ae22:	223f      	movs	r2, #63	; 0x3f
 800ae24:	409a      	lsls	r2, r3
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	609a      	str	r2, [r3, #8]
 800ae2a:	e02a      	b.n	800ae82 <HAL_DMA_Abort+0x49a>
 800ae2c:	40020010 	.word	0x40020010
 800ae30:	40020028 	.word	0x40020028
 800ae34:	40020040 	.word	0x40020040
 800ae38:	40020058 	.word	0x40020058
 800ae3c:	40020070 	.word	0x40020070
 800ae40:	40020088 	.word	0x40020088
 800ae44:	400200a0 	.word	0x400200a0
 800ae48:	400200b8 	.word	0x400200b8
 800ae4c:	40020410 	.word	0x40020410
 800ae50:	40020428 	.word	0x40020428
 800ae54:	40020440 	.word	0x40020440
 800ae58:	40020458 	.word	0x40020458
 800ae5c:	40020470 	.word	0x40020470
 800ae60:	40020488 	.word	0x40020488
 800ae64:	400204a0 	.word	0x400204a0
 800ae68:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae70:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae76:	f003 031f 	and.w	r3, r3, #31
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	409a      	lsls	r2, r3
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a4f      	ldr	r2, [pc, #316]	; (800afc4 <HAL_DMA_Abort+0x5dc>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d072      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a4d      	ldr	r2, [pc, #308]	; (800afc8 <HAL_DMA_Abort+0x5e0>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d06d      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a4c      	ldr	r2, [pc, #304]	; (800afcc <HAL_DMA_Abort+0x5e4>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d068      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a4a      	ldr	r2, [pc, #296]	; (800afd0 <HAL_DMA_Abort+0x5e8>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d063      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a49      	ldr	r2, [pc, #292]	; (800afd4 <HAL_DMA_Abort+0x5ec>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d05e      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a47      	ldr	r2, [pc, #284]	; (800afd8 <HAL_DMA_Abort+0x5f0>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d059      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a46      	ldr	r2, [pc, #280]	; (800afdc <HAL_DMA_Abort+0x5f4>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d054      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a44      	ldr	r2, [pc, #272]	; (800afe0 <HAL_DMA_Abort+0x5f8>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d04f      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a43      	ldr	r2, [pc, #268]	; (800afe4 <HAL_DMA_Abort+0x5fc>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d04a      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a41      	ldr	r2, [pc, #260]	; (800afe8 <HAL_DMA_Abort+0x600>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d045      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a40      	ldr	r2, [pc, #256]	; (800afec <HAL_DMA_Abort+0x604>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d040      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a3e      	ldr	r2, [pc, #248]	; (800aff0 <HAL_DMA_Abort+0x608>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d03b      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a3d      	ldr	r2, [pc, #244]	; (800aff4 <HAL_DMA_Abort+0x60c>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d036      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a3b      	ldr	r2, [pc, #236]	; (800aff8 <HAL_DMA_Abort+0x610>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d031      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	4a3a      	ldr	r2, [pc, #232]	; (800affc <HAL_DMA_Abort+0x614>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d02c      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a38      	ldr	r2, [pc, #224]	; (800b000 <HAL_DMA_Abort+0x618>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d027      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4a37      	ldr	r2, [pc, #220]	; (800b004 <HAL_DMA_Abort+0x61c>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d022      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a35      	ldr	r2, [pc, #212]	; (800b008 <HAL_DMA_Abort+0x620>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d01d      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a34      	ldr	r2, [pc, #208]	; (800b00c <HAL_DMA_Abort+0x624>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d018      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a32      	ldr	r2, [pc, #200]	; (800b010 <HAL_DMA_Abort+0x628>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d013      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a31      	ldr	r2, [pc, #196]	; (800b014 <HAL_DMA_Abort+0x62c>)
 800af50:	4293      	cmp	r3, r2
 800af52:	d00e      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a2f      	ldr	r2, [pc, #188]	; (800b018 <HAL_DMA_Abort+0x630>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d009      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a2e      	ldr	r2, [pc, #184]	; (800b01c <HAL_DMA_Abort+0x634>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d004      	beq.n	800af72 <HAL_DMA_Abort+0x58a>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a2c      	ldr	r2, [pc, #176]	; (800b020 <HAL_DMA_Abort+0x638>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d101      	bne.n	800af76 <HAL_DMA_Abort+0x58e>
 800af72:	2301      	movs	r3, #1
 800af74:	e000      	b.n	800af78 <HAL_DMA_Abort+0x590>
 800af76:	2300      	movs	r3, #0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d015      	beq.n	800afa8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800af84:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d00c      	beq.n	800afa8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af9c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800afa6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2201      	movs	r2, #1
 800afac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 800afb8:	2300      	movs	r3, #0
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	40020010 	.word	0x40020010
 800afc8:	40020028 	.word	0x40020028
 800afcc:	40020040 	.word	0x40020040
 800afd0:	40020058 	.word	0x40020058
 800afd4:	40020070 	.word	0x40020070
 800afd8:	40020088 	.word	0x40020088
 800afdc:	400200a0 	.word	0x400200a0
 800afe0:	400200b8 	.word	0x400200b8
 800afe4:	40020410 	.word	0x40020410
 800afe8:	40020428 	.word	0x40020428
 800afec:	40020440 	.word	0x40020440
 800aff0:	40020458 	.word	0x40020458
 800aff4:	40020470 	.word	0x40020470
 800aff8:	40020488 	.word	0x40020488
 800affc:	400204a0 	.word	0x400204a0
 800b000:	400204b8 	.word	0x400204b8
 800b004:	58025408 	.word	0x58025408
 800b008:	5802541c 	.word	0x5802541c
 800b00c:	58025430 	.word	0x58025430
 800b010:	58025444 	.word	0x58025444
 800b014:	58025458 	.word	0x58025458
 800b018:	5802546c 	.word	0x5802546c
 800b01c:	58025480 	.word	0x58025480
 800b020:	58025494 	.word	0x58025494

0800b024 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d101      	bne.n	800b036 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800b032:	2301      	movs	r3, #1
 800b034:	e237      	b.n	800b4a6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b03c:	b2db      	uxtb	r3, r3
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d004      	beq.n	800b04c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2280      	movs	r2, #128	; 0x80
 800b046:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	e22c      	b.n	800b4a6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a5c      	ldr	r2, [pc, #368]	; (800b1c4 <HAL_DMA_Abort_IT+0x1a0>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d04a      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4a5b      	ldr	r2, [pc, #364]	; (800b1c8 <HAL_DMA_Abort_IT+0x1a4>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d045      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a59      	ldr	r2, [pc, #356]	; (800b1cc <HAL_DMA_Abort_IT+0x1a8>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d040      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a58      	ldr	r2, [pc, #352]	; (800b1d0 <HAL_DMA_Abort_IT+0x1ac>)
 800b070:	4293      	cmp	r3, r2
 800b072:	d03b      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a56      	ldr	r2, [pc, #344]	; (800b1d4 <HAL_DMA_Abort_IT+0x1b0>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d036      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a55      	ldr	r2, [pc, #340]	; (800b1d8 <HAL_DMA_Abort_IT+0x1b4>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d031      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a53      	ldr	r2, [pc, #332]	; (800b1dc <HAL_DMA_Abort_IT+0x1b8>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d02c      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a52      	ldr	r2, [pc, #328]	; (800b1e0 <HAL_DMA_Abort_IT+0x1bc>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d027      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a50      	ldr	r2, [pc, #320]	; (800b1e4 <HAL_DMA_Abort_IT+0x1c0>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d022      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4a4f      	ldr	r2, [pc, #316]	; (800b1e8 <HAL_DMA_Abort_IT+0x1c4>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d01d      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a4d      	ldr	r2, [pc, #308]	; (800b1ec <HAL_DMA_Abort_IT+0x1c8>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d018      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	4a4c      	ldr	r2, [pc, #304]	; (800b1f0 <HAL_DMA_Abort_IT+0x1cc>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	d013      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a4a      	ldr	r2, [pc, #296]	; (800b1f4 <HAL_DMA_Abort_IT+0x1d0>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d00e      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4a49      	ldr	r2, [pc, #292]	; (800b1f8 <HAL_DMA_Abort_IT+0x1d4>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d009      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a47      	ldr	r2, [pc, #284]	; (800b1fc <HAL_DMA_Abort_IT+0x1d8>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d004      	beq.n	800b0ec <HAL_DMA_Abort_IT+0xc8>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a46      	ldr	r2, [pc, #280]	; (800b200 <HAL_DMA_Abort_IT+0x1dc>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d101      	bne.n	800b0f0 <HAL_DMA_Abort_IT+0xcc>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e000      	b.n	800b0f2 <HAL_DMA_Abort_IT+0xce>
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 8086 	beq.w	800b204 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2204      	movs	r2, #4
 800b0fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4a2f      	ldr	r2, [pc, #188]	; (800b1c4 <HAL_DMA_Abort_IT+0x1a0>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d04a      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a2e      	ldr	r2, [pc, #184]	; (800b1c8 <HAL_DMA_Abort_IT+0x1a4>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d045      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a2c      	ldr	r2, [pc, #176]	; (800b1cc <HAL_DMA_Abort_IT+0x1a8>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d040      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a2b      	ldr	r2, [pc, #172]	; (800b1d0 <HAL_DMA_Abort_IT+0x1ac>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d03b      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a29      	ldr	r2, [pc, #164]	; (800b1d4 <HAL_DMA_Abort_IT+0x1b0>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d036      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a28      	ldr	r2, [pc, #160]	; (800b1d8 <HAL_DMA_Abort_IT+0x1b4>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d031      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a26      	ldr	r2, [pc, #152]	; (800b1dc <HAL_DMA_Abort_IT+0x1b8>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d02c      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a25      	ldr	r2, [pc, #148]	; (800b1e0 <HAL_DMA_Abort_IT+0x1bc>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d027      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a23      	ldr	r2, [pc, #140]	; (800b1e4 <HAL_DMA_Abort_IT+0x1c0>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d022      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a22      	ldr	r2, [pc, #136]	; (800b1e8 <HAL_DMA_Abort_IT+0x1c4>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d01d      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a20      	ldr	r2, [pc, #128]	; (800b1ec <HAL_DMA_Abort_IT+0x1c8>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d018      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	4a1f      	ldr	r2, [pc, #124]	; (800b1f0 <HAL_DMA_Abort_IT+0x1cc>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d013      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a1d      	ldr	r2, [pc, #116]	; (800b1f4 <HAL_DMA_Abort_IT+0x1d0>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d00e      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a1c      	ldr	r2, [pc, #112]	; (800b1f8 <HAL_DMA_Abort_IT+0x1d4>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d009      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4a1a      	ldr	r2, [pc, #104]	; (800b1fc <HAL_DMA_Abort_IT+0x1d8>)
 800b192:	4293      	cmp	r3, r2
 800b194:	d004      	beq.n	800b1a0 <HAL_DMA_Abort_IT+0x17c>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a19      	ldr	r2, [pc, #100]	; (800b200 <HAL_DMA_Abort_IT+0x1dc>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d108      	bne.n	800b1b2 <HAL_DMA_Abort_IT+0x18e>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f022 0201 	bic.w	r2, r2, #1
 800b1ae:	601a      	str	r2, [r3, #0]
 800b1b0:	e178      	b.n	800b4a4 <HAL_DMA_Abort_IT+0x480>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f022 0201 	bic.w	r2, r2, #1
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	e16f      	b.n	800b4a4 <HAL_DMA_Abort_IT+0x480>
 800b1c4:	40020010 	.word	0x40020010
 800b1c8:	40020028 	.word	0x40020028
 800b1cc:	40020040 	.word	0x40020040
 800b1d0:	40020058 	.word	0x40020058
 800b1d4:	40020070 	.word	0x40020070
 800b1d8:	40020088 	.word	0x40020088
 800b1dc:	400200a0 	.word	0x400200a0
 800b1e0:	400200b8 	.word	0x400200b8
 800b1e4:	40020410 	.word	0x40020410
 800b1e8:	40020428 	.word	0x40020428
 800b1ec:	40020440 	.word	0x40020440
 800b1f0:	40020458 	.word	0x40020458
 800b1f4:	40020470 	.word	0x40020470
 800b1f8:	40020488 	.word	0x40020488
 800b1fc:	400204a0 	.word	0x400204a0
 800b200:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	681a      	ldr	r2, [r3, #0]
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f022 020e 	bic.w	r2, r2, #14
 800b212:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a6c      	ldr	r2, [pc, #432]	; (800b3cc <HAL_DMA_Abort_IT+0x3a8>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d04a      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	4a6b      	ldr	r2, [pc, #428]	; (800b3d0 <HAL_DMA_Abort_IT+0x3ac>)
 800b224:	4293      	cmp	r3, r2
 800b226:	d045      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	4a69      	ldr	r2, [pc, #420]	; (800b3d4 <HAL_DMA_Abort_IT+0x3b0>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d040      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a68      	ldr	r2, [pc, #416]	; (800b3d8 <HAL_DMA_Abort_IT+0x3b4>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d03b      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a66      	ldr	r2, [pc, #408]	; (800b3dc <HAL_DMA_Abort_IT+0x3b8>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d036      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a65      	ldr	r2, [pc, #404]	; (800b3e0 <HAL_DMA_Abort_IT+0x3bc>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d031      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a63      	ldr	r2, [pc, #396]	; (800b3e4 <HAL_DMA_Abort_IT+0x3c0>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d02c      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a62      	ldr	r2, [pc, #392]	; (800b3e8 <HAL_DMA_Abort_IT+0x3c4>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d027      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a60      	ldr	r2, [pc, #384]	; (800b3ec <HAL_DMA_Abort_IT+0x3c8>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d022      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a5f      	ldr	r2, [pc, #380]	; (800b3f0 <HAL_DMA_Abort_IT+0x3cc>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d01d      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a5d      	ldr	r2, [pc, #372]	; (800b3f4 <HAL_DMA_Abort_IT+0x3d0>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d018      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a5c      	ldr	r2, [pc, #368]	; (800b3f8 <HAL_DMA_Abort_IT+0x3d4>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d013      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a5a      	ldr	r2, [pc, #360]	; (800b3fc <HAL_DMA_Abort_IT+0x3d8>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d00e      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a59      	ldr	r2, [pc, #356]	; (800b400 <HAL_DMA_Abort_IT+0x3dc>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d009      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a57      	ldr	r2, [pc, #348]	; (800b404 <HAL_DMA_Abort_IT+0x3e0>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d004      	beq.n	800b2b4 <HAL_DMA_Abort_IT+0x290>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a56      	ldr	r2, [pc, #344]	; (800b408 <HAL_DMA_Abort_IT+0x3e4>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d108      	bne.n	800b2c6 <HAL_DMA_Abort_IT+0x2a2>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f022 0201 	bic.w	r2, r2, #1
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	e007      	b.n	800b2d6 <HAL_DMA_Abort_IT+0x2b2>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	681a      	ldr	r2, [r3, #0]
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f022 0201 	bic.w	r2, r2, #1
 800b2d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	4a3c      	ldr	r2, [pc, #240]	; (800b3cc <HAL_DMA_Abort_IT+0x3a8>)
 800b2dc:	4293      	cmp	r3, r2
 800b2de:	d072      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a3a      	ldr	r2, [pc, #232]	; (800b3d0 <HAL_DMA_Abort_IT+0x3ac>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d06d      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a39      	ldr	r2, [pc, #228]	; (800b3d4 <HAL_DMA_Abort_IT+0x3b0>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d068      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a37      	ldr	r2, [pc, #220]	; (800b3d8 <HAL_DMA_Abort_IT+0x3b4>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d063      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a36      	ldr	r2, [pc, #216]	; (800b3dc <HAL_DMA_Abort_IT+0x3b8>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d05e      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a34      	ldr	r2, [pc, #208]	; (800b3e0 <HAL_DMA_Abort_IT+0x3bc>)
 800b30e:	4293      	cmp	r3, r2
 800b310:	d059      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a33      	ldr	r2, [pc, #204]	; (800b3e4 <HAL_DMA_Abort_IT+0x3c0>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d054      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	4a31      	ldr	r2, [pc, #196]	; (800b3e8 <HAL_DMA_Abort_IT+0x3c4>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d04f      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a30      	ldr	r2, [pc, #192]	; (800b3ec <HAL_DMA_Abort_IT+0x3c8>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d04a      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4a2e      	ldr	r2, [pc, #184]	; (800b3f0 <HAL_DMA_Abort_IT+0x3cc>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d045      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4a2d      	ldr	r2, [pc, #180]	; (800b3f4 <HAL_DMA_Abort_IT+0x3d0>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d040      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a2b      	ldr	r2, [pc, #172]	; (800b3f8 <HAL_DMA_Abort_IT+0x3d4>)
 800b34a:	4293      	cmp	r3, r2
 800b34c:	d03b      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a2a      	ldr	r2, [pc, #168]	; (800b3fc <HAL_DMA_Abort_IT+0x3d8>)
 800b354:	4293      	cmp	r3, r2
 800b356:	d036      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a28      	ldr	r2, [pc, #160]	; (800b400 <HAL_DMA_Abort_IT+0x3dc>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d031      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a27      	ldr	r2, [pc, #156]	; (800b404 <HAL_DMA_Abort_IT+0x3e0>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d02c      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a25      	ldr	r2, [pc, #148]	; (800b408 <HAL_DMA_Abort_IT+0x3e4>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d027      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a24      	ldr	r2, [pc, #144]	; (800b40c <HAL_DMA_Abort_IT+0x3e8>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d022      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a22      	ldr	r2, [pc, #136]	; (800b410 <HAL_DMA_Abort_IT+0x3ec>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d01d      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a21      	ldr	r2, [pc, #132]	; (800b414 <HAL_DMA_Abort_IT+0x3f0>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d018      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a1f      	ldr	r2, [pc, #124]	; (800b418 <HAL_DMA_Abort_IT+0x3f4>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d013      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a1e      	ldr	r2, [pc, #120]	; (800b41c <HAL_DMA_Abort_IT+0x3f8>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d00e      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a1c      	ldr	r2, [pc, #112]	; (800b420 <HAL_DMA_Abort_IT+0x3fc>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d009      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a1b      	ldr	r2, [pc, #108]	; (800b424 <HAL_DMA_Abort_IT+0x400>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d004      	beq.n	800b3c6 <HAL_DMA_Abort_IT+0x3a2>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a19      	ldr	r2, [pc, #100]	; (800b428 <HAL_DMA_Abort_IT+0x404>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d132      	bne.n	800b42c <HAL_DMA_Abort_IT+0x408>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	e031      	b.n	800b42e <HAL_DMA_Abort_IT+0x40a>
 800b3ca:	bf00      	nop
 800b3cc:	40020010 	.word	0x40020010
 800b3d0:	40020028 	.word	0x40020028
 800b3d4:	40020040 	.word	0x40020040
 800b3d8:	40020058 	.word	0x40020058
 800b3dc:	40020070 	.word	0x40020070
 800b3e0:	40020088 	.word	0x40020088
 800b3e4:	400200a0 	.word	0x400200a0
 800b3e8:	400200b8 	.word	0x400200b8
 800b3ec:	40020410 	.word	0x40020410
 800b3f0:	40020428 	.word	0x40020428
 800b3f4:	40020440 	.word	0x40020440
 800b3f8:	40020458 	.word	0x40020458
 800b3fc:	40020470 	.word	0x40020470
 800b400:	40020488 	.word	0x40020488
 800b404:	400204a0 	.word	0x400204a0
 800b408:	400204b8 	.word	0x400204b8
 800b40c:	58025408 	.word	0x58025408
 800b410:	5802541c 	.word	0x5802541c
 800b414:	58025430 	.word	0x58025430
 800b418:	58025444 	.word	0x58025444
 800b41c:	58025458 	.word	0x58025458
 800b420:	5802546c 	.word	0x5802546c
 800b424:	58025480 	.word	0x58025480
 800b428:	58025494 	.word	0x58025494
 800b42c:	2300      	movs	r3, #0
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d028      	beq.n	800b484 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b43c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b440:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b446:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b44c:	f003 031f 	and.w	r3, r3, #31
 800b450:	2201      	movs	r2, #1
 800b452:	409a      	lsls	r2, r3
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b460:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b466:	2b00      	cmp	r3, #0
 800b468:	d00c      	beq.n	800b484 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b478:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b482:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2200      	movs	r2, #0
 800b490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d003      	beq.n	800b4a4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop

0800b4b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08a      	sub	sp, #40	; 0x28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b4bc:	4b67      	ldr	r3, [pc, #412]	; (800b65c <HAL_DMA_IRQHandler+0x1ac>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a67      	ldr	r2, [pc, #412]	; (800b660 <HAL_DMA_IRQHandler+0x1b0>)
 800b4c2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c6:	0a9b      	lsrs	r3, r3, #10
 800b4c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ce:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a5f      	ldr	r2, [pc, #380]	; (800b664 <HAL_DMA_IRQHandler+0x1b4>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d04a      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a5d      	ldr	r2, [pc, #372]	; (800b668 <HAL_DMA_IRQHandler+0x1b8>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d045      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a5c      	ldr	r2, [pc, #368]	; (800b66c <HAL_DMA_IRQHandler+0x1bc>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d040      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a5a      	ldr	r2, [pc, #360]	; (800b670 <HAL_DMA_IRQHandler+0x1c0>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d03b      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a59      	ldr	r2, [pc, #356]	; (800b674 <HAL_DMA_IRQHandler+0x1c4>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d036      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a57      	ldr	r2, [pc, #348]	; (800b678 <HAL_DMA_IRQHandler+0x1c8>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d031      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a56      	ldr	r2, [pc, #344]	; (800b67c <HAL_DMA_IRQHandler+0x1cc>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d02c      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a54      	ldr	r2, [pc, #336]	; (800b680 <HAL_DMA_IRQHandler+0x1d0>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d027      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a53      	ldr	r2, [pc, #332]	; (800b684 <HAL_DMA_IRQHandler+0x1d4>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d022      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a51      	ldr	r2, [pc, #324]	; (800b688 <HAL_DMA_IRQHandler+0x1d8>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d01d      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a50      	ldr	r2, [pc, #320]	; (800b68c <HAL_DMA_IRQHandler+0x1dc>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d018      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a4e      	ldr	r2, [pc, #312]	; (800b690 <HAL_DMA_IRQHandler+0x1e0>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d013      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a4d      	ldr	r2, [pc, #308]	; (800b694 <HAL_DMA_IRQHandler+0x1e4>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d00e      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a4b      	ldr	r2, [pc, #300]	; (800b698 <HAL_DMA_IRQHandler+0x1e8>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d009      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a4a      	ldr	r2, [pc, #296]	; (800b69c <HAL_DMA_IRQHandler+0x1ec>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d004      	beq.n	800b582 <HAL_DMA_IRQHandler+0xd2>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a48      	ldr	r2, [pc, #288]	; (800b6a0 <HAL_DMA_IRQHandler+0x1f0>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d101      	bne.n	800b586 <HAL_DMA_IRQHandler+0xd6>
 800b582:	2301      	movs	r3, #1
 800b584:	e000      	b.n	800b588 <HAL_DMA_IRQHandler+0xd8>
 800b586:	2300      	movs	r3, #0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 842b 	beq.w	800bde4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b592:	f003 031f 	and.w	r3, r3, #31
 800b596:	2208      	movs	r2, #8
 800b598:	409a      	lsls	r2, r3
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	4013      	ands	r3, r2
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	f000 80a2 	beq.w	800b6e8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a2e      	ldr	r2, [pc, #184]	; (800b664 <HAL_DMA_IRQHandler+0x1b4>)
 800b5aa:	4293      	cmp	r3, r2
 800b5ac:	d04a      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4a2d      	ldr	r2, [pc, #180]	; (800b668 <HAL_DMA_IRQHandler+0x1b8>)
 800b5b4:	4293      	cmp	r3, r2
 800b5b6:	d045      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4a2b      	ldr	r2, [pc, #172]	; (800b66c <HAL_DMA_IRQHandler+0x1bc>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d040      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4a2a      	ldr	r2, [pc, #168]	; (800b670 <HAL_DMA_IRQHandler+0x1c0>)
 800b5c8:	4293      	cmp	r3, r2
 800b5ca:	d03b      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a28      	ldr	r2, [pc, #160]	; (800b674 <HAL_DMA_IRQHandler+0x1c4>)
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	d036      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	4a27      	ldr	r2, [pc, #156]	; (800b678 <HAL_DMA_IRQHandler+0x1c8>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d031      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	4a25      	ldr	r2, [pc, #148]	; (800b67c <HAL_DMA_IRQHandler+0x1cc>)
 800b5e6:	4293      	cmp	r3, r2
 800b5e8:	d02c      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	4a24      	ldr	r2, [pc, #144]	; (800b680 <HAL_DMA_IRQHandler+0x1d0>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d027      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	4a22      	ldr	r2, [pc, #136]	; (800b684 <HAL_DMA_IRQHandler+0x1d4>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d022      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a21      	ldr	r2, [pc, #132]	; (800b688 <HAL_DMA_IRQHandler+0x1d8>)
 800b604:	4293      	cmp	r3, r2
 800b606:	d01d      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	4a1f      	ldr	r2, [pc, #124]	; (800b68c <HAL_DMA_IRQHandler+0x1dc>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d018      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4a1e      	ldr	r2, [pc, #120]	; (800b690 <HAL_DMA_IRQHandler+0x1e0>)
 800b618:	4293      	cmp	r3, r2
 800b61a:	d013      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	4a1c      	ldr	r2, [pc, #112]	; (800b694 <HAL_DMA_IRQHandler+0x1e4>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d00e      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a1b      	ldr	r2, [pc, #108]	; (800b698 <HAL_DMA_IRQHandler+0x1e8>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d009      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	4a19      	ldr	r2, [pc, #100]	; (800b69c <HAL_DMA_IRQHandler+0x1ec>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d004      	beq.n	800b644 <HAL_DMA_IRQHandler+0x194>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4a18      	ldr	r2, [pc, #96]	; (800b6a0 <HAL_DMA_IRQHandler+0x1f0>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d12f      	bne.n	800b6a4 <HAL_DMA_IRQHandler+0x1f4>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 0304 	and.w	r3, r3, #4
 800b64e:	2b00      	cmp	r3, #0
 800b650:	bf14      	ite	ne
 800b652:	2301      	movne	r3, #1
 800b654:	2300      	moveq	r3, #0
 800b656:	b2db      	uxtb	r3, r3
 800b658:	e02e      	b.n	800b6b8 <HAL_DMA_IRQHandler+0x208>
 800b65a:	bf00      	nop
 800b65c:	20000020 	.word	0x20000020
 800b660:	1b4e81b5 	.word	0x1b4e81b5
 800b664:	40020010 	.word	0x40020010
 800b668:	40020028 	.word	0x40020028
 800b66c:	40020040 	.word	0x40020040
 800b670:	40020058 	.word	0x40020058
 800b674:	40020070 	.word	0x40020070
 800b678:	40020088 	.word	0x40020088
 800b67c:	400200a0 	.word	0x400200a0
 800b680:	400200b8 	.word	0x400200b8
 800b684:	40020410 	.word	0x40020410
 800b688:	40020428 	.word	0x40020428
 800b68c:	40020440 	.word	0x40020440
 800b690:	40020458 	.word	0x40020458
 800b694:	40020470 	.word	0x40020470
 800b698:	40020488 	.word	0x40020488
 800b69c:	400204a0 	.word	0x400204a0
 800b6a0:	400204b8 	.word	0x400204b8
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f003 0308 	and.w	r3, r3, #8
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	bf14      	ite	ne
 800b6b2:	2301      	movne	r3, #1
 800b6b4:	2300      	moveq	r3, #0
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d015      	beq.n	800b6e8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	681a      	ldr	r2, [r3, #0]
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f022 0204 	bic.w	r2, r2, #4
 800b6ca:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6d0:	f003 031f 	and.w	r3, r3, #31
 800b6d4:	2208      	movs	r2, #8
 800b6d6:	409a      	lsls	r2, r3
 800b6d8:	6a3b      	ldr	r3, [r7, #32]
 800b6da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6e0:	f043 0201 	orr.w	r2, r3, #1
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ec:	f003 031f 	and.w	r3, r3, #31
 800b6f0:	69ba      	ldr	r2, [r7, #24]
 800b6f2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d06e      	beq.n	800b7dc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a69      	ldr	r2, [pc, #420]	; (800b8a8 <HAL_DMA_IRQHandler+0x3f8>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d04a      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a67      	ldr	r2, [pc, #412]	; (800b8ac <HAL_DMA_IRQHandler+0x3fc>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d045      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	4a66      	ldr	r2, [pc, #408]	; (800b8b0 <HAL_DMA_IRQHandler+0x400>)
 800b718:	4293      	cmp	r3, r2
 800b71a:	d040      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a64      	ldr	r2, [pc, #400]	; (800b8b4 <HAL_DMA_IRQHandler+0x404>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d03b      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a63      	ldr	r2, [pc, #396]	; (800b8b8 <HAL_DMA_IRQHandler+0x408>)
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d036      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a61      	ldr	r2, [pc, #388]	; (800b8bc <HAL_DMA_IRQHandler+0x40c>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d031      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a60      	ldr	r2, [pc, #384]	; (800b8c0 <HAL_DMA_IRQHandler+0x410>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d02c      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a5e      	ldr	r2, [pc, #376]	; (800b8c4 <HAL_DMA_IRQHandler+0x414>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d027      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a5d      	ldr	r2, [pc, #372]	; (800b8c8 <HAL_DMA_IRQHandler+0x418>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d022      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a5b      	ldr	r2, [pc, #364]	; (800b8cc <HAL_DMA_IRQHandler+0x41c>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d01d      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a5a      	ldr	r2, [pc, #360]	; (800b8d0 <HAL_DMA_IRQHandler+0x420>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d018      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a58      	ldr	r2, [pc, #352]	; (800b8d4 <HAL_DMA_IRQHandler+0x424>)
 800b772:	4293      	cmp	r3, r2
 800b774:	d013      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4a57      	ldr	r2, [pc, #348]	; (800b8d8 <HAL_DMA_IRQHandler+0x428>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d00e      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a55      	ldr	r2, [pc, #340]	; (800b8dc <HAL_DMA_IRQHandler+0x42c>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d009      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a54      	ldr	r2, [pc, #336]	; (800b8e0 <HAL_DMA_IRQHandler+0x430>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d004      	beq.n	800b79e <HAL_DMA_IRQHandler+0x2ee>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	4a52      	ldr	r2, [pc, #328]	; (800b8e4 <HAL_DMA_IRQHandler+0x434>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d10a      	bne.n	800b7b4 <HAL_DMA_IRQHandler+0x304>
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	695b      	ldr	r3, [r3, #20]
 800b7a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	bf14      	ite	ne
 800b7ac:	2301      	movne	r3, #1
 800b7ae:	2300      	moveq	r3, #0
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	e003      	b.n	800b7bc <HAL_DMA_IRQHandler+0x30c>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d00d      	beq.n	800b7dc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7c4:	f003 031f 	and.w	r3, r3, #31
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	409a      	lsls	r2, r3
 800b7cc:	6a3b      	ldr	r3, [r7, #32]
 800b7ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d4:	f043 0202 	orr.w	r2, r3, #2
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7e0:	f003 031f 	and.w	r3, r3, #31
 800b7e4:	2204      	movs	r2, #4
 800b7e6:	409a      	lsls	r2, r3
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	4013      	ands	r3, r2
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	f000 808f 	beq.w	800b910 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a2c      	ldr	r2, [pc, #176]	; (800b8a8 <HAL_DMA_IRQHandler+0x3f8>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d04a      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a2a      	ldr	r2, [pc, #168]	; (800b8ac <HAL_DMA_IRQHandler+0x3fc>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d045      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a29      	ldr	r2, [pc, #164]	; (800b8b0 <HAL_DMA_IRQHandler+0x400>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d040      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a27      	ldr	r2, [pc, #156]	; (800b8b4 <HAL_DMA_IRQHandler+0x404>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d03b      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a26      	ldr	r2, [pc, #152]	; (800b8b8 <HAL_DMA_IRQHandler+0x408>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d036      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a24      	ldr	r2, [pc, #144]	; (800b8bc <HAL_DMA_IRQHandler+0x40c>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d031      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4a23      	ldr	r2, [pc, #140]	; (800b8c0 <HAL_DMA_IRQHandler+0x410>)
 800b834:	4293      	cmp	r3, r2
 800b836:	d02c      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a21      	ldr	r2, [pc, #132]	; (800b8c4 <HAL_DMA_IRQHandler+0x414>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d027      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a20      	ldr	r2, [pc, #128]	; (800b8c8 <HAL_DMA_IRQHandler+0x418>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d022      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a1e      	ldr	r2, [pc, #120]	; (800b8cc <HAL_DMA_IRQHandler+0x41c>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d01d      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a1d      	ldr	r2, [pc, #116]	; (800b8d0 <HAL_DMA_IRQHandler+0x420>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d018      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a1b      	ldr	r2, [pc, #108]	; (800b8d4 <HAL_DMA_IRQHandler+0x424>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d013      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a1a      	ldr	r2, [pc, #104]	; (800b8d8 <HAL_DMA_IRQHandler+0x428>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d00e      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a18      	ldr	r2, [pc, #96]	; (800b8dc <HAL_DMA_IRQHandler+0x42c>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d009      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a17      	ldr	r2, [pc, #92]	; (800b8e0 <HAL_DMA_IRQHandler+0x430>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d004      	beq.n	800b892 <HAL_DMA_IRQHandler+0x3e2>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	4a15      	ldr	r2, [pc, #84]	; (800b8e4 <HAL_DMA_IRQHandler+0x434>)
 800b88e:	4293      	cmp	r3, r2
 800b890:	d12a      	bne.n	800b8e8 <HAL_DMA_IRQHandler+0x438>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 0302 	and.w	r3, r3, #2
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	bf14      	ite	ne
 800b8a0:	2301      	movne	r3, #1
 800b8a2:	2300      	moveq	r3, #0
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	e023      	b.n	800b8f0 <HAL_DMA_IRQHandler+0x440>
 800b8a8:	40020010 	.word	0x40020010
 800b8ac:	40020028 	.word	0x40020028
 800b8b0:	40020040 	.word	0x40020040
 800b8b4:	40020058 	.word	0x40020058
 800b8b8:	40020070 	.word	0x40020070
 800b8bc:	40020088 	.word	0x40020088
 800b8c0:	400200a0 	.word	0x400200a0
 800b8c4:	400200b8 	.word	0x400200b8
 800b8c8:	40020410 	.word	0x40020410
 800b8cc:	40020428 	.word	0x40020428
 800b8d0:	40020440 	.word	0x40020440
 800b8d4:	40020458 	.word	0x40020458
 800b8d8:	40020470 	.word	0x40020470
 800b8dc:	40020488 	.word	0x40020488
 800b8e0:	400204a0 	.word	0x400204a0
 800b8e4:	400204b8 	.word	0x400204b8
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d00d      	beq.n	800b910 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8f8:	f003 031f 	and.w	r3, r3, #31
 800b8fc:	2204      	movs	r2, #4
 800b8fe:	409a      	lsls	r2, r3
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b908:	f043 0204 	orr.w	r2, r3, #4
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b914:	f003 031f 	and.w	r3, r3, #31
 800b918:	2210      	movs	r2, #16
 800b91a:	409a      	lsls	r2, r3
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	4013      	ands	r3, r2
 800b920:	2b00      	cmp	r3, #0
 800b922:	f000 80a6 	beq.w	800ba72 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a85      	ldr	r2, [pc, #532]	; (800bb40 <HAL_DMA_IRQHandler+0x690>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d04a      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a83      	ldr	r2, [pc, #524]	; (800bb44 <HAL_DMA_IRQHandler+0x694>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d045      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	4a82      	ldr	r2, [pc, #520]	; (800bb48 <HAL_DMA_IRQHandler+0x698>)
 800b940:	4293      	cmp	r3, r2
 800b942:	d040      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	4a80      	ldr	r2, [pc, #512]	; (800bb4c <HAL_DMA_IRQHandler+0x69c>)
 800b94a:	4293      	cmp	r3, r2
 800b94c:	d03b      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	4a7f      	ldr	r2, [pc, #508]	; (800bb50 <HAL_DMA_IRQHandler+0x6a0>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d036      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a7d      	ldr	r2, [pc, #500]	; (800bb54 <HAL_DMA_IRQHandler+0x6a4>)
 800b95e:	4293      	cmp	r3, r2
 800b960:	d031      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a7c      	ldr	r2, [pc, #496]	; (800bb58 <HAL_DMA_IRQHandler+0x6a8>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d02c      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	4a7a      	ldr	r2, [pc, #488]	; (800bb5c <HAL_DMA_IRQHandler+0x6ac>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d027      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a79      	ldr	r2, [pc, #484]	; (800bb60 <HAL_DMA_IRQHandler+0x6b0>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d022      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a77      	ldr	r2, [pc, #476]	; (800bb64 <HAL_DMA_IRQHandler+0x6b4>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d01d      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4a76      	ldr	r2, [pc, #472]	; (800bb68 <HAL_DMA_IRQHandler+0x6b8>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d018      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4a74      	ldr	r2, [pc, #464]	; (800bb6c <HAL_DMA_IRQHandler+0x6bc>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d013      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	4a73      	ldr	r2, [pc, #460]	; (800bb70 <HAL_DMA_IRQHandler+0x6c0>)
 800b9a4:	4293      	cmp	r3, r2
 800b9a6:	d00e      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a71      	ldr	r2, [pc, #452]	; (800bb74 <HAL_DMA_IRQHandler+0x6c4>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d009      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a70      	ldr	r2, [pc, #448]	; (800bb78 <HAL_DMA_IRQHandler+0x6c8>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d004      	beq.n	800b9c6 <HAL_DMA_IRQHandler+0x516>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	4a6e      	ldr	r2, [pc, #440]	; (800bb7c <HAL_DMA_IRQHandler+0x6cc>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d10a      	bne.n	800b9dc <HAL_DMA_IRQHandler+0x52c>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f003 0308 	and.w	r3, r3, #8
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	bf14      	ite	ne
 800b9d4:	2301      	movne	r3, #1
 800b9d6:	2300      	moveq	r3, #0
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	e009      	b.n	800b9f0 <HAL_DMA_IRQHandler+0x540>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 0304 	and.w	r3, r3, #4
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	bf14      	ite	ne
 800b9ea:	2301      	movne	r3, #1
 800b9ec:	2300      	moveq	r3, #0
 800b9ee:	b2db      	uxtb	r3, r3
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d03e      	beq.n	800ba72 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9f8:	f003 031f 	and.w	r3, r3, #31
 800b9fc:	2210      	movs	r2, #16
 800b9fe:	409a      	lsls	r2, r3
 800ba00:	6a3b      	ldr	r3, [r7, #32]
 800ba02:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d018      	beq.n	800ba44 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d108      	bne.n	800ba32 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d024      	beq.n	800ba72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	4798      	blx	r3
 800ba30:	e01f      	b.n	800ba72 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d01b      	beq.n	800ba72 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	4798      	blx	r3
 800ba42:	e016      	b.n	800ba72 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d107      	bne.n	800ba62 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f022 0208 	bic.w	r2, r2, #8
 800ba60:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba76:	f003 031f 	and.w	r3, r3, #31
 800ba7a:	2220      	movs	r2, #32
 800ba7c:	409a      	lsls	r2, r3
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	4013      	ands	r3, r2
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 8110 	beq.w	800bca8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4a2c      	ldr	r2, [pc, #176]	; (800bb40 <HAL_DMA_IRQHandler+0x690>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d04a      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a2b      	ldr	r2, [pc, #172]	; (800bb44 <HAL_DMA_IRQHandler+0x694>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d045      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	4a29      	ldr	r2, [pc, #164]	; (800bb48 <HAL_DMA_IRQHandler+0x698>)
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d040      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a28      	ldr	r2, [pc, #160]	; (800bb4c <HAL_DMA_IRQHandler+0x69c>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d03b      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	4a26      	ldr	r2, [pc, #152]	; (800bb50 <HAL_DMA_IRQHandler+0x6a0>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d036      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	4a25      	ldr	r2, [pc, #148]	; (800bb54 <HAL_DMA_IRQHandler+0x6a4>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d031      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	4a23      	ldr	r2, [pc, #140]	; (800bb58 <HAL_DMA_IRQHandler+0x6a8>)
 800baca:	4293      	cmp	r3, r2
 800bacc:	d02c      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a22      	ldr	r2, [pc, #136]	; (800bb5c <HAL_DMA_IRQHandler+0x6ac>)
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d027      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4a20      	ldr	r2, [pc, #128]	; (800bb60 <HAL_DMA_IRQHandler+0x6b0>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d022      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	4a1f      	ldr	r2, [pc, #124]	; (800bb64 <HAL_DMA_IRQHandler+0x6b4>)
 800bae8:	4293      	cmp	r3, r2
 800baea:	d01d      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a1d      	ldr	r2, [pc, #116]	; (800bb68 <HAL_DMA_IRQHandler+0x6b8>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d018      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	4a1c      	ldr	r2, [pc, #112]	; (800bb6c <HAL_DMA_IRQHandler+0x6bc>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d013      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a1a      	ldr	r2, [pc, #104]	; (800bb70 <HAL_DMA_IRQHandler+0x6c0>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d00e      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a19      	ldr	r2, [pc, #100]	; (800bb74 <HAL_DMA_IRQHandler+0x6c4>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d009      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a17      	ldr	r2, [pc, #92]	; (800bb78 <HAL_DMA_IRQHandler+0x6c8>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d004      	beq.n	800bb28 <HAL_DMA_IRQHandler+0x678>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	4a16      	ldr	r2, [pc, #88]	; (800bb7c <HAL_DMA_IRQHandler+0x6cc>)
 800bb24:	4293      	cmp	r3, r2
 800bb26:	d12b      	bne.n	800bb80 <HAL_DMA_IRQHandler+0x6d0>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 0310 	and.w	r3, r3, #16
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	bf14      	ite	ne
 800bb36:	2301      	movne	r3, #1
 800bb38:	2300      	moveq	r3, #0
 800bb3a:	b2db      	uxtb	r3, r3
 800bb3c:	e02a      	b.n	800bb94 <HAL_DMA_IRQHandler+0x6e4>
 800bb3e:	bf00      	nop
 800bb40:	40020010 	.word	0x40020010
 800bb44:	40020028 	.word	0x40020028
 800bb48:	40020040 	.word	0x40020040
 800bb4c:	40020058 	.word	0x40020058
 800bb50:	40020070 	.word	0x40020070
 800bb54:	40020088 	.word	0x40020088
 800bb58:	400200a0 	.word	0x400200a0
 800bb5c:	400200b8 	.word	0x400200b8
 800bb60:	40020410 	.word	0x40020410
 800bb64:	40020428 	.word	0x40020428
 800bb68:	40020440 	.word	0x40020440
 800bb6c:	40020458 	.word	0x40020458
 800bb70:	40020470 	.word	0x40020470
 800bb74:	40020488 	.word	0x40020488
 800bb78:	400204a0 	.word	0x400204a0
 800bb7c:	400204b8 	.word	0x400204b8
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f003 0302 	and.w	r3, r3, #2
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	bf14      	ite	ne
 800bb8e:	2301      	movne	r3, #1
 800bb90:	2300      	moveq	r3, #0
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	f000 8087 	beq.w	800bca8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb9e:	f003 031f 	and.w	r3, r3, #31
 800bba2:	2220      	movs	r2, #32
 800bba4:	409a      	lsls	r2, r3
 800bba6:	6a3b      	ldr	r3, [r7, #32]
 800bba8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	2b04      	cmp	r3, #4
 800bbb4:	d139      	bne.n	800bc2a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	681a      	ldr	r2, [r3, #0]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f022 0216 	bic.w	r2, r2, #22
 800bbc4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	695a      	ldr	r2, [r3, #20]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbd4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d103      	bne.n	800bbe6 <HAL_DMA_IRQHandler+0x736>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d007      	beq.n	800bbf6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f022 0208 	bic.w	r2, r2, #8
 800bbf4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbfa:	f003 031f 	and.w	r3, r3, #31
 800bbfe:	223f      	movs	r2, #63	; 0x3f
 800bc00:	409a      	lsls	r2, r3
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	f000 834a 	beq.w	800c2b4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	4798      	blx	r3
          }
          return;
 800bc28:	e344      	b.n	800c2b4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d018      	beq.n	800bc6a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d108      	bne.n	800bc58 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d02c      	beq.n	800bca8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	4798      	blx	r3
 800bc56:	e027      	b.n	800bca8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d023      	beq.n	800bca8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	4798      	blx	r3
 800bc68:	e01e      	b.n	800bca8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d10f      	bne.n	800bc98 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f022 0210 	bic.w	r2, r2, #16
 800bc86:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d003      	beq.n	800bca8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	f000 8306 	beq.w	800c2be <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb6:	f003 0301 	and.w	r3, r3, #1
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	f000 8088 	beq.w	800bdd0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2204      	movs	r2, #4
 800bcc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	4a7a      	ldr	r2, [pc, #488]	; (800beb8 <HAL_DMA_IRQHandler+0xa08>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	d04a      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a79      	ldr	r2, [pc, #484]	; (800bebc <HAL_DMA_IRQHandler+0xa0c>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d045      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4a77      	ldr	r2, [pc, #476]	; (800bec0 <HAL_DMA_IRQHandler+0xa10>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d040      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a76      	ldr	r2, [pc, #472]	; (800bec4 <HAL_DMA_IRQHandler+0xa14>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d03b      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a74      	ldr	r2, [pc, #464]	; (800bec8 <HAL_DMA_IRQHandler+0xa18>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d036      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a73      	ldr	r2, [pc, #460]	; (800becc <HAL_DMA_IRQHandler+0xa1c>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d031      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a71      	ldr	r2, [pc, #452]	; (800bed0 <HAL_DMA_IRQHandler+0xa20>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d02c      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a70      	ldr	r2, [pc, #448]	; (800bed4 <HAL_DMA_IRQHandler+0xa24>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d027      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a6e      	ldr	r2, [pc, #440]	; (800bed8 <HAL_DMA_IRQHandler+0xa28>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d022      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a6d      	ldr	r2, [pc, #436]	; (800bedc <HAL_DMA_IRQHandler+0xa2c>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d01d      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a6b      	ldr	r2, [pc, #428]	; (800bee0 <HAL_DMA_IRQHandler+0xa30>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d018      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a6a      	ldr	r2, [pc, #424]	; (800bee4 <HAL_DMA_IRQHandler+0xa34>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d013      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a68      	ldr	r2, [pc, #416]	; (800bee8 <HAL_DMA_IRQHandler+0xa38>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d00e      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a67      	ldr	r2, [pc, #412]	; (800beec <HAL_DMA_IRQHandler+0xa3c>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d009      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a65      	ldr	r2, [pc, #404]	; (800bef0 <HAL_DMA_IRQHandler+0xa40>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d004      	beq.n	800bd68 <HAL_DMA_IRQHandler+0x8b8>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	4a64      	ldr	r2, [pc, #400]	; (800bef4 <HAL_DMA_IRQHandler+0xa44>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d108      	bne.n	800bd7a <HAL_DMA_IRQHandler+0x8ca>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f022 0201 	bic.w	r2, r2, #1
 800bd76:	601a      	str	r2, [r3, #0]
 800bd78:	e007      	b.n	800bd8a <HAL_DMA_IRQHandler+0x8da>
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f022 0201 	bic.w	r2, r2, #1
 800bd88:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	60fb      	str	r3, [r7, #12]
 800bd90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d307      	bcc.n	800bda6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0301 	and.w	r3, r3, #1
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1f2      	bne.n	800bd8a <HAL_DMA_IRQHandler+0x8da>
 800bda4:	e000      	b.n	800bda8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800bda6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0301 	and.w	r3, r3, #1
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d004      	beq.n	800bdc0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2203      	movs	r2, #3
 800bdba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800bdbe:	e003      	b.n	800bdc8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2200      	movs	r2, #0
 800bdcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 8272 	beq.w	800c2be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	4798      	blx	r3
 800bde2:	e26c      	b.n	800c2be <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a43      	ldr	r2, [pc, #268]	; (800bef8 <HAL_DMA_IRQHandler+0xa48>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d022      	beq.n	800be34 <HAL_DMA_IRQHandler+0x984>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a42      	ldr	r2, [pc, #264]	; (800befc <HAL_DMA_IRQHandler+0xa4c>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d01d      	beq.n	800be34 <HAL_DMA_IRQHandler+0x984>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a40      	ldr	r2, [pc, #256]	; (800bf00 <HAL_DMA_IRQHandler+0xa50>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d018      	beq.n	800be34 <HAL_DMA_IRQHandler+0x984>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a3f      	ldr	r2, [pc, #252]	; (800bf04 <HAL_DMA_IRQHandler+0xa54>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d013      	beq.n	800be34 <HAL_DMA_IRQHandler+0x984>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a3d      	ldr	r2, [pc, #244]	; (800bf08 <HAL_DMA_IRQHandler+0xa58>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d00e      	beq.n	800be34 <HAL_DMA_IRQHandler+0x984>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a3c      	ldr	r2, [pc, #240]	; (800bf0c <HAL_DMA_IRQHandler+0xa5c>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d009      	beq.n	800be34 <HAL_DMA_IRQHandler+0x984>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a3a      	ldr	r2, [pc, #232]	; (800bf10 <HAL_DMA_IRQHandler+0xa60>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d004      	beq.n	800be34 <HAL_DMA_IRQHandler+0x984>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a39      	ldr	r2, [pc, #228]	; (800bf14 <HAL_DMA_IRQHandler+0xa64>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d101      	bne.n	800be38 <HAL_DMA_IRQHandler+0x988>
 800be34:	2301      	movs	r3, #1
 800be36:	e000      	b.n	800be3a <HAL_DMA_IRQHandler+0x98a>
 800be38:	2300      	movs	r3, #0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f000 823f 	beq.w	800c2be <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be4c:	f003 031f 	and.w	r3, r3, #31
 800be50:	2204      	movs	r2, #4
 800be52:	409a      	lsls	r2, r3
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	4013      	ands	r3, r2
 800be58:	2b00      	cmp	r3, #0
 800be5a:	f000 80cd 	beq.w	800bff8 <HAL_DMA_IRQHandler+0xb48>
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	f003 0304 	and.w	r3, r3, #4
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 80c7 	beq.w	800bff8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be6e:	f003 031f 	and.w	r3, r3, #31
 800be72:	2204      	movs	r2, #4
 800be74:	409a      	lsls	r2, r3
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be80:	2b00      	cmp	r3, #0
 800be82:	d049      	beq.n	800bf18 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d109      	bne.n	800bea2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be92:	2b00      	cmp	r3, #0
 800be94:	f000 8210 	beq.w	800c2b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bea0:	e20a      	b.n	800c2b8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	f000 8206 	beq.w	800c2b8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800beb4:	e200      	b.n	800c2b8 <HAL_DMA_IRQHandler+0xe08>
 800beb6:	bf00      	nop
 800beb8:	40020010 	.word	0x40020010
 800bebc:	40020028 	.word	0x40020028
 800bec0:	40020040 	.word	0x40020040
 800bec4:	40020058 	.word	0x40020058
 800bec8:	40020070 	.word	0x40020070
 800becc:	40020088 	.word	0x40020088
 800bed0:	400200a0 	.word	0x400200a0
 800bed4:	400200b8 	.word	0x400200b8
 800bed8:	40020410 	.word	0x40020410
 800bedc:	40020428 	.word	0x40020428
 800bee0:	40020440 	.word	0x40020440
 800bee4:	40020458 	.word	0x40020458
 800bee8:	40020470 	.word	0x40020470
 800beec:	40020488 	.word	0x40020488
 800bef0:	400204a0 	.word	0x400204a0
 800bef4:	400204b8 	.word	0x400204b8
 800bef8:	58025408 	.word	0x58025408
 800befc:	5802541c 	.word	0x5802541c
 800bf00:	58025430 	.word	0x58025430
 800bf04:	58025444 	.word	0x58025444
 800bf08:	58025458 	.word	0x58025458
 800bf0c:	5802546c 	.word	0x5802546c
 800bf10:	58025480 	.word	0x58025480
 800bf14:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	f003 0320 	and.w	r3, r3, #32
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d160      	bne.n	800bfe4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a7f      	ldr	r2, [pc, #508]	; (800c124 <HAL_DMA_IRQHandler+0xc74>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d04a      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a7d      	ldr	r2, [pc, #500]	; (800c128 <HAL_DMA_IRQHandler+0xc78>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d045      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a7c      	ldr	r2, [pc, #496]	; (800c12c <HAL_DMA_IRQHandler+0xc7c>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d040      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	4a7a      	ldr	r2, [pc, #488]	; (800c130 <HAL_DMA_IRQHandler+0xc80>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	d03b      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	4a79      	ldr	r2, [pc, #484]	; (800c134 <HAL_DMA_IRQHandler+0xc84>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d036      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a77      	ldr	r2, [pc, #476]	; (800c138 <HAL_DMA_IRQHandler+0xc88>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d031      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a76      	ldr	r2, [pc, #472]	; (800c13c <HAL_DMA_IRQHandler+0xc8c>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d02c      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a74      	ldr	r2, [pc, #464]	; (800c140 <HAL_DMA_IRQHandler+0xc90>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d027      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a73      	ldr	r2, [pc, #460]	; (800c144 <HAL_DMA_IRQHandler+0xc94>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d022      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a71      	ldr	r2, [pc, #452]	; (800c148 <HAL_DMA_IRQHandler+0xc98>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d01d      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a70      	ldr	r2, [pc, #448]	; (800c14c <HAL_DMA_IRQHandler+0xc9c>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d018      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a6e      	ldr	r2, [pc, #440]	; (800c150 <HAL_DMA_IRQHandler+0xca0>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d013      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	4a6d      	ldr	r2, [pc, #436]	; (800c154 <HAL_DMA_IRQHandler+0xca4>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d00e      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	4a6b      	ldr	r2, [pc, #428]	; (800c158 <HAL_DMA_IRQHandler+0xca8>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d009      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a6a      	ldr	r2, [pc, #424]	; (800c15c <HAL_DMA_IRQHandler+0xcac>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d004      	beq.n	800bfc2 <HAL_DMA_IRQHandler+0xb12>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a68      	ldr	r2, [pc, #416]	; (800c160 <HAL_DMA_IRQHandler+0xcb0>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d108      	bne.n	800bfd4 <HAL_DMA_IRQHandler+0xb24>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f022 0208 	bic.w	r2, r2, #8
 800bfd0:	601a      	str	r2, [r3, #0]
 800bfd2:	e007      	b.n	800bfe4 <HAL_DMA_IRQHandler+0xb34>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f022 0204 	bic.w	r2, r2, #4
 800bfe2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f000 8165 	beq.w	800c2b8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bff6:	e15f      	b.n	800c2b8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bffc:	f003 031f 	and.w	r3, r3, #31
 800c000:	2202      	movs	r2, #2
 800c002:	409a      	lsls	r2, r3
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	4013      	ands	r3, r2
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f000 80c5 	beq.w	800c198 <HAL_DMA_IRQHandler+0xce8>
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	f003 0302 	and.w	r3, r3, #2
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 80bf 	beq.w	800c198 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c01e:	f003 031f 	and.w	r3, r3, #31
 800c022:	2202      	movs	r2, #2
 800c024:	409a      	lsls	r2, r3
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c030:	2b00      	cmp	r3, #0
 800c032:	d018      	beq.n	800c066 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d109      	bne.n	800c052 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c042:	2b00      	cmp	r3, #0
 800c044:	f000 813a 	beq.w	800c2bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c050:	e134      	b.n	800c2bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c056:	2b00      	cmp	r3, #0
 800c058:	f000 8130 	beq.w	800c2bc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c064:	e12a      	b.n	800c2bc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f003 0320 	and.w	r3, r3, #32
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	f040 8089 	bne.w	800c184 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	4a2b      	ldr	r2, [pc, #172]	; (800c124 <HAL_DMA_IRQHandler+0xc74>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d04a      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a29      	ldr	r2, [pc, #164]	; (800c128 <HAL_DMA_IRQHandler+0xc78>)
 800c082:	4293      	cmp	r3, r2
 800c084:	d045      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a28      	ldr	r2, [pc, #160]	; (800c12c <HAL_DMA_IRQHandler+0xc7c>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d040      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	4a26      	ldr	r2, [pc, #152]	; (800c130 <HAL_DMA_IRQHandler+0xc80>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d03b      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	4a25      	ldr	r2, [pc, #148]	; (800c134 <HAL_DMA_IRQHandler+0xc84>)
 800c0a0:	4293      	cmp	r3, r2
 800c0a2:	d036      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	4a23      	ldr	r2, [pc, #140]	; (800c138 <HAL_DMA_IRQHandler+0xc88>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d031      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a22      	ldr	r2, [pc, #136]	; (800c13c <HAL_DMA_IRQHandler+0xc8c>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d02c      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a20      	ldr	r2, [pc, #128]	; (800c140 <HAL_DMA_IRQHandler+0xc90>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d027      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	4a1f      	ldr	r2, [pc, #124]	; (800c144 <HAL_DMA_IRQHandler+0xc94>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d022      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a1d      	ldr	r2, [pc, #116]	; (800c148 <HAL_DMA_IRQHandler+0xc98>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d01d      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	4a1c      	ldr	r2, [pc, #112]	; (800c14c <HAL_DMA_IRQHandler+0xc9c>)
 800c0dc:	4293      	cmp	r3, r2
 800c0de:	d018      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4a1a      	ldr	r2, [pc, #104]	; (800c150 <HAL_DMA_IRQHandler+0xca0>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d013      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4a19      	ldr	r2, [pc, #100]	; (800c154 <HAL_DMA_IRQHandler+0xca4>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d00e      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a17      	ldr	r2, [pc, #92]	; (800c158 <HAL_DMA_IRQHandler+0xca8>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d009      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	4a16      	ldr	r2, [pc, #88]	; (800c15c <HAL_DMA_IRQHandler+0xcac>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d004      	beq.n	800c112 <HAL_DMA_IRQHandler+0xc62>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a14      	ldr	r2, [pc, #80]	; (800c160 <HAL_DMA_IRQHandler+0xcb0>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d128      	bne.n	800c164 <HAL_DMA_IRQHandler+0xcb4>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	681a      	ldr	r2, [r3, #0]
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f022 0214 	bic.w	r2, r2, #20
 800c120:	601a      	str	r2, [r3, #0]
 800c122:	e027      	b.n	800c174 <HAL_DMA_IRQHandler+0xcc4>
 800c124:	40020010 	.word	0x40020010
 800c128:	40020028 	.word	0x40020028
 800c12c:	40020040 	.word	0x40020040
 800c130:	40020058 	.word	0x40020058
 800c134:	40020070 	.word	0x40020070
 800c138:	40020088 	.word	0x40020088
 800c13c:	400200a0 	.word	0x400200a0
 800c140:	400200b8 	.word	0x400200b8
 800c144:	40020410 	.word	0x40020410
 800c148:	40020428 	.word	0x40020428
 800c14c:	40020440 	.word	0x40020440
 800c150:	40020458 	.word	0x40020458
 800c154:	40020470 	.word	0x40020470
 800c158:	40020488 	.word	0x40020488
 800c15c:	400204a0 	.word	0x400204a0
 800c160:	400204b8 	.word	0x400204b8
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f022 020a 	bic.w	r2, r2, #10
 800c172:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2201      	movs	r2, #1
 800c178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2200      	movs	r2, #0
 800c180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c188:	2b00      	cmp	r3, #0
 800c18a:	f000 8097 	beq.w	800c2bc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c196:	e091      	b.n	800c2bc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c19c:	f003 031f 	and.w	r3, r3, #31
 800c1a0:	2208      	movs	r2, #8
 800c1a2:	409a      	lsls	r2, r3
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	f000 8088 	beq.w	800c2be <HAL_DMA_IRQHandler+0xe0e>
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	f003 0308 	and.w	r3, r3, #8
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	f000 8082 	beq.w	800c2be <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	4a41      	ldr	r2, [pc, #260]	; (800c2c4 <HAL_DMA_IRQHandler+0xe14>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d04a      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a3f      	ldr	r2, [pc, #252]	; (800c2c8 <HAL_DMA_IRQHandler+0xe18>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d045      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4a3e      	ldr	r2, [pc, #248]	; (800c2cc <HAL_DMA_IRQHandler+0xe1c>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d040      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a3c      	ldr	r2, [pc, #240]	; (800c2d0 <HAL_DMA_IRQHandler+0xe20>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d03b      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a3b      	ldr	r2, [pc, #236]	; (800c2d4 <HAL_DMA_IRQHandler+0xe24>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d036      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	4a39      	ldr	r2, [pc, #228]	; (800c2d8 <HAL_DMA_IRQHandler+0xe28>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d031      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	4a38      	ldr	r2, [pc, #224]	; (800c2dc <HAL_DMA_IRQHandler+0xe2c>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d02c      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a36      	ldr	r2, [pc, #216]	; (800c2e0 <HAL_DMA_IRQHandler+0xe30>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d027      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a35      	ldr	r2, [pc, #212]	; (800c2e4 <HAL_DMA_IRQHandler+0xe34>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d022      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	4a33      	ldr	r2, [pc, #204]	; (800c2e8 <HAL_DMA_IRQHandler+0xe38>)
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d01d      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	4a32      	ldr	r2, [pc, #200]	; (800c2ec <HAL_DMA_IRQHandler+0xe3c>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d018      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	4a30      	ldr	r2, [pc, #192]	; (800c2f0 <HAL_DMA_IRQHandler+0xe40>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d013      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	4a2f      	ldr	r2, [pc, #188]	; (800c2f4 <HAL_DMA_IRQHandler+0xe44>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d00e      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a2d      	ldr	r2, [pc, #180]	; (800c2f8 <HAL_DMA_IRQHandler+0xe48>)
 800c242:	4293      	cmp	r3, r2
 800c244:	d009      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4a2c      	ldr	r2, [pc, #176]	; (800c2fc <HAL_DMA_IRQHandler+0xe4c>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d004      	beq.n	800c25a <HAL_DMA_IRQHandler+0xdaa>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a2a      	ldr	r2, [pc, #168]	; (800c300 <HAL_DMA_IRQHandler+0xe50>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d108      	bne.n	800c26c <HAL_DMA_IRQHandler+0xdbc>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681a      	ldr	r2, [r3, #0]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f022 021c 	bic.w	r2, r2, #28
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	e007      	b.n	800c27c <HAL_DMA_IRQHandler+0xdcc>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f022 020e 	bic.w	r2, r2, #14
 800c27a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c280:	f003 031f 	and.w	r3, r3, #31
 800c284:	2201      	movs	r2, #1
 800c286:	409a      	lsls	r2, r3
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2201      	movs	r2, #1
 800c290:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2200      	movs	r2, #0
 800c29e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d009      	beq.n	800c2be <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	4798      	blx	r3
 800c2b2:	e004      	b.n	800c2be <HAL_DMA_IRQHandler+0xe0e>
          return;
 800c2b4:	bf00      	nop
 800c2b6:	e002      	b.n	800c2be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c2b8:	bf00      	nop
 800c2ba:	e000      	b.n	800c2be <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800c2bc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800c2be:	3728      	adds	r7, #40	; 0x28
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	40020010 	.word	0x40020010
 800c2c8:	40020028 	.word	0x40020028
 800c2cc:	40020040 	.word	0x40020040
 800c2d0:	40020058 	.word	0x40020058
 800c2d4:	40020070 	.word	0x40020070
 800c2d8:	40020088 	.word	0x40020088
 800c2dc:	400200a0 	.word	0x400200a0
 800c2e0:	400200b8 	.word	0x400200b8
 800c2e4:	40020410 	.word	0x40020410
 800c2e8:	40020428 	.word	0x40020428
 800c2ec:	40020440 	.word	0x40020440
 800c2f0:	40020458 	.word	0x40020458
 800c2f4:	40020470 	.word	0x40020470
 800c2f8:	40020488 	.word	0x40020488
 800c2fc:	400204a0 	.word	0x400204a0
 800c300:	400204b8 	.word	0x400204b8

0800c304 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800c304:	b480      	push	{r7}
 800c306:	b083      	sub	sp, #12
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c312:	b2db      	uxtb	r3, r3
}
 800c314:	4618      	mov	r0, r3
 800c316:	370c      	adds	r7, #12
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	60f8      	str	r0, [r7, #12]
 800c328:	60b9      	str	r1, [r7, #8]
 800c32a:	607a      	str	r2, [r7, #4]
 800c32c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c332:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c338:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a7f      	ldr	r2, [pc, #508]	; (800c53c <DMA_SetConfig+0x21c>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d072      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a7d      	ldr	r2, [pc, #500]	; (800c540 <DMA_SetConfig+0x220>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d06d      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a7c      	ldr	r2, [pc, #496]	; (800c544 <DMA_SetConfig+0x224>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d068      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a7a      	ldr	r2, [pc, #488]	; (800c548 <DMA_SetConfig+0x228>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d063      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	4a79      	ldr	r2, [pc, #484]	; (800c54c <DMA_SetConfig+0x22c>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d05e      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	4a77      	ldr	r2, [pc, #476]	; (800c550 <DMA_SetConfig+0x230>)
 800c372:	4293      	cmp	r3, r2
 800c374:	d059      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a76      	ldr	r2, [pc, #472]	; (800c554 <DMA_SetConfig+0x234>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d054      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4a74      	ldr	r2, [pc, #464]	; (800c558 <DMA_SetConfig+0x238>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d04f      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a73      	ldr	r2, [pc, #460]	; (800c55c <DMA_SetConfig+0x23c>)
 800c390:	4293      	cmp	r3, r2
 800c392:	d04a      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a71      	ldr	r2, [pc, #452]	; (800c560 <DMA_SetConfig+0x240>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d045      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	4a70      	ldr	r2, [pc, #448]	; (800c564 <DMA_SetConfig+0x244>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d040      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	4a6e      	ldr	r2, [pc, #440]	; (800c568 <DMA_SetConfig+0x248>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d03b      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	4a6d      	ldr	r2, [pc, #436]	; (800c56c <DMA_SetConfig+0x24c>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d036      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a6b      	ldr	r2, [pc, #428]	; (800c570 <DMA_SetConfig+0x250>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d031      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	4a6a      	ldr	r2, [pc, #424]	; (800c574 <DMA_SetConfig+0x254>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d02c      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a68      	ldr	r2, [pc, #416]	; (800c578 <DMA_SetConfig+0x258>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d027      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a67      	ldr	r2, [pc, #412]	; (800c57c <DMA_SetConfig+0x25c>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d022      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a65      	ldr	r2, [pc, #404]	; (800c580 <DMA_SetConfig+0x260>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	d01d      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a64      	ldr	r2, [pc, #400]	; (800c584 <DMA_SetConfig+0x264>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d018      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a62      	ldr	r2, [pc, #392]	; (800c588 <DMA_SetConfig+0x268>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d013      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a61      	ldr	r2, [pc, #388]	; (800c58c <DMA_SetConfig+0x26c>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d00e      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a5f      	ldr	r2, [pc, #380]	; (800c590 <DMA_SetConfig+0x270>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d009      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a5e      	ldr	r2, [pc, #376]	; (800c594 <DMA_SetConfig+0x274>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d004      	beq.n	800c42a <DMA_SetConfig+0x10a>
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a5c      	ldr	r2, [pc, #368]	; (800c598 <DMA_SetConfig+0x278>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d101      	bne.n	800c42e <DMA_SetConfig+0x10e>
 800c42a:	2301      	movs	r3, #1
 800c42c:	e000      	b.n	800c430 <DMA_SetConfig+0x110>
 800c42e:	2300      	movs	r3, #0
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00d      	beq.n	800c450 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c438:	68fa      	ldr	r2, [r7, #12]
 800c43a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800c43c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c442:	2b00      	cmp	r3, #0
 800c444:	d004      	beq.n	800c450 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c44e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a39      	ldr	r2, [pc, #228]	; (800c53c <DMA_SetConfig+0x21c>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d04a      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a38      	ldr	r2, [pc, #224]	; (800c540 <DMA_SetConfig+0x220>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d045      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a36      	ldr	r2, [pc, #216]	; (800c544 <DMA_SetConfig+0x224>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d040      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4a35      	ldr	r2, [pc, #212]	; (800c548 <DMA_SetConfig+0x228>)
 800c474:	4293      	cmp	r3, r2
 800c476:	d03b      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a33      	ldr	r2, [pc, #204]	; (800c54c <DMA_SetConfig+0x22c>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d036      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4a32      	ldr	r2, [pc, #200]	; (800c550 <DMA_SetConfig+0x230>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d031      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	4a30      	ldr	r2, [pc, #192]	; (800c554 <DMA_SetConfig+0x234>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d02c      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a2f      	ldr	r2, [pc, #188]	; (800c558 <DMA_SetConfig+0x238>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d027      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	4a2d      	ldr	r2, [pc, #180]	; (800c55c <DMA_SetConfig+0x23c>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d022      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4a2c      	ldr	r2, [pc, #176]	; (800c560 <DMA_SetConfig+0x240>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d01d      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	4a2a      	ldr	r2, [pc, #168]	; (800c564 <DMA_SetConfig+0x244>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d018      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	4a29      	ldr	r2, [pc, #164]	; (800c568 <DMA_SetConfig+0x248>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d013      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	4a27      	ldr	r2, [pc, #156]	; (800c56c <DMA_SetConfig+0x24c>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d00e      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4a26      	ldr	r2, [pc, #152]	; (800c570 <DMA_SetConfig+0x250>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d009      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a24      	ldr	r2, [pc, #144]	; (800c574 <DMA_SetConfig+0x254>)
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d004      	beq.n	800c4f0 <DMA_SetConfig+0x1d0>
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a23      	ldr	r2, [pc, #140]	; (800c578 <DMA_SetConfig+0x258>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d101      	bne.n	800c4f4 <DMA_SetConfig+0x1d4>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e000      	b.n	800c4f6 <DMA_SetConfig+0x1d6>
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d059      	beq.n	800c5ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4fe:	f003 031f 	and.w	r3, r3, #31
 800c502:	223f      	movs	r2, #63	; 0x3f
 800c504:	409a      	lsls	r2, r3
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681a      	ldr	r2, [r3, #0]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c518:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	2b40      	cmp	r3, #64	; 0x40
 800c528:	d138      	bne.n	800c59c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68ba      	ldr	r2, [r7, #8]
 800c538:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800c53a:	e086      	b.n	800c64a <DMA_SetConfig+0x32a>
 800c53c:	40020010 	.word	0x40020010
 800c540:	40020028 	.word	0x40020028
 800c544:	40020040 	.word	0x40020040
 800c548:	40020058 	.word	0x40020058
 800c54c:	40020070 	.word	0x40020070
 800c550:	40020088 	.word	0x40020088
 800c554:	400200a0 	.word	0x400200a0
 800c558:	400200b8 	.word	0x400200b8
 800c55c:	40020410 	.word	0x40020410
 800c560:	40020428 	.word	0x40020428
 800c564:	40020440 	.word	0x40020440
 800c568:	40020458 	.word	0x40020458
 800c56c:	40020470 	.word	0x40020470
 800c570:	40020488 	.word	0x40020488
 800c574:	400204a0 	.word	0x400204a0
 800c578:	400204b8 	.word	0x400204b8
 800c57c:	58025408 	.word	0x58025408
 800c580:	5802541c 	.word	0x5802541c
 800c584:	58025430 	.word	0x58025430
 800c588:	58025444 	.word	0x58025444
 800c58c:	58025458 	.word	0x58025458
 800c590:	5802546c 	.word	0x5802546c
 800c594:	58025480 	.word	0x58025480
 800c598:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	60da      	str	r2, [r3, #12]
}
 800c5ac:	e04d      	b.n	800c64a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	4a29      	ldr	r2, [pc, #164]	; (800c658 <DMA_SetConfig+0x338>)
 800c5b4:	4293      	cmp	r3, r2
 800c5b6:	d022      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	4a27      	ldr	r2, [pc, #156]	; (800c65c <DMA_SetConfig+0x33c>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d01d      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a26      	ldr	r2, [pc, #152]	; (800c660 <DMA_SetConfig+0x340>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d018      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	4a24      	ldr	r2, [pc, #144]	; (800c664 <DMA_SetConfig+0x344>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d013      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a23      	ldr	r2, [pc, #140]	; (800c668 <DMA_SetConfig+0x348>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	d00e      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	4a21      	ldr	r2, [pc, #132]	; (800c66c <DMA_SetConfig+0x34c>)
 800c5e6:	4293      	cmp	r3, r2
 800c5e8:	d009      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	4a20      	ldr	r2, [pc, #128]	; (800c670 <DMA_SetConfig+0x350>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d004      	beq.n	800c5fe <DMA_SetConfig+0x2de>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a1e      	ldr	r2, [pc, #120]	; (800c674 <DMA_SetConfig+0x354>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d101      	bne.n	800c602 <DMA_SetConfig+0x2e2>
 800c5fe:	2301      	movs	r3, #1
 800c600:	e000      	b.n	800c604 <DMA_SetConfig+0x2e4>
 800c602:	2300      	movs	r3, #0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d020      	beq.n	800c64a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c60c:	f003 031f 	and.w	r3, r3, #31
 800c610:	2201      	movs	r2, #1
 800c612:	409a      	lsls	r2, r3
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	683a      	ldr	r2, [r7, #0]
 800c61e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	2b40      	cmp	r3, #64	; 0x40
 800c626:	d108      	bne.n	800c63a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68ba      	ldr	r2, [r7, #8]
 800c636:	60da      	str	r2, [r3, #12]
}
 800c638:	e007      	b.n	800c64a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	60da      	str	r2, [r3, #12]
}
 800c64a:	bf00      	nop
 800c64c:	371c      	adds	r7, #28
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	58025408 	.word	0x58025408
 800c65c:	5802541c 	.word	0x5802541c
 800c660:	58025430 	.word	0x58025430
 800c664:	58025444 	.word	0x58025444
 800c668:	58025458 	.word	0x58025458
 800c66c:	5802546c 	.word	0x5802546c
 800c670:	58025480 	.word	0x58025480
 800c674:	58025494 	.word	0x58025494

0800c678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4a42      	ldr	r2, [pc, #264]	; (800c790 <DMA_CalcBaseAndBitshift+0x118>)
 800c686:	4293      	cmp	r3, r2
 800c688:	d04a      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a41      	ldr	r2, [pc, #260]	; (800c794 <DMA_CalcBaseAndBitshift+0x11c>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d045      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a3f      	ldr	r2, [pc, #252]	; (800c798 <DMA_CalcBaseAndBitshift+0x120>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d040      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a3e      	ldr	r2, [pc, #248]	; (800c79c <DMA_CalcBaseAndBitshift+0x124>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d03b      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	4a3c      	ldr	r2, [pc, #240]	; (800c7a0 <DMA_CalcBaseAndBitshift+0x128>)
 800c6ae:	4293      	cmp	r3, r2
 800c6b0:	d036      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4a3b      	ldr	r2, [pc, #236]	; (800c7a4 <DMA_CalcBaseAndBitshift+0x12c>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d031      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a39      	ldr	r2, [pc, #228]	; (800c7a8 <DMA_CalcBaseAndBitshift+0x130>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d02c      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4a38      	ldr	r2, [pc, #224]	; (800c7ac <DMA_CalcBaseAndBitshift+0x134>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d027      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	4a36      	ldr	r2, [pc, #216]	; (800c7b0 <DMA_CalcBaseAndBitshift+0x138>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d022      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4a35      	ldr	r2, [pc, #212]	; (800c7b4 <DMA_CalcBaseAndBitshift+0x13c>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d01d      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4a33      	ldr	r2, [pc, #204]	; (800c7b8 <DMA_CalcBaseAndBitshift+0x140>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d018      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4a32      	ldr	r2, [pc, #200]	; (800c7bc <DMA_CalcBaseAndBitshift+0x144>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d013      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	4a30      	ldr	r2, [pc, #192]	; (800c7c0 <DMA_CalcBaseAndBitshift+0x148>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d00e      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a2f      	ldr	r2, [pc, #188]	; (800c7c4 <DMA_CalcBaseAndBitshift+0x14c>)
 800c708:	4293      	cmp	r3, r2
 800c70a:	d009      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4a2d      	ldr	r2, [pc, #180]	; (800c7c8 <DMA_CalcBaseAndBitshift+0x150>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d004      	beq.n	800c720 <DMA_CalcBaseAndBitshift+0xa8>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a2c      	ldr	r2, [pc, #176]	; (800c7cc <DMA_CalcBaseAndBitshift+0x154>)
 800c71c:	4293      	cmp	r3, r2
 800c71e:	d101      	bne.n	800c724 <DMA_CalcBaseAndBitshift+0xac>
 800c720:	2301      	movs	r3, #1
 800c722:	e000      	b.n	800c726 <DMA_CalcBaseAndBitshift+0xae>
 800c724:	2300      	movs	r3, #0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d024      	beq.n	800c774 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	3b10      	subs	r3, #16
 800c732:	4a27      	ldr	r2, [pc, #156]	; (800c7d0 <DMA_CalcBaseAndBitshift+0x158>)
 800c734:	fba2 2303 	umull	r2, r3, r2, r3
 800c738:	091b      	lsrs	r3, r3, #4
 800c73a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f003 0307 	and.w	r3, r3, #7
 800c742:	4a24      	ldr	r2, [pc, #144]	; (800c7d4 <DMA_CalcBaseAndBitshift+0x15c>)
 800c744:	5cd3      	ldrb	r3, [r2, r3]
 800c746:	461a      	mov	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	2b03      	cmp	r3, #3
 800c750:	d908      	bls.n	800c764 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	461a      	mov	r2, r3
 800c758:	4b1f      	ldr	r3, [pc, #124]	; (800c7d8 <DMA_CalcBaseAndBitshift+0x160>)
 800c75a:	4013      	ands	r3, r2
 800c75c:	1d1a      	adds	r2, r3, #4
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	659a      	str	r2, [r3, #88]	; 0x58
 800c762:	e00d      	b.n	800c780 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	461a      	mov	r2, r3
 800c76a:	4b1b      	ldr	r3, [pc, #108]	; (800c7d8 <DMA_CalcBaseAndBitshift+0x160>)
 800c76c:	4013      	ands	r3, r2
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	6593      	str	r3, [r2, #88]	; 0x58
 800c772:	e005      	b.n	800c780 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800c784:	4618      	mov	r0, r3
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	40020010 	.word	0x40020010
 800c794:	40020028 	.word	0x40020028
 800c798:	40020040 	.word	0x40020040
 800c79c:	40020058 	.word	0x40020058
 800c7a0:	40020070 	.word	0x40020070
 800c7a4:	40020088 	.word	0x40020088
 800c7a8:	400200a0 	.word	0x400200a0
 800c7ac:	400200b8 	.word	0x400200b8
 800c7b0:	40020410 	.word	0x40020410
 800c7b4:	40020428 	.word	0x40020428
 800c7b8:	40020440 	.word	0x40020440
 800c7bc:	40020458 	.word	0x40020458
 800c7c0:	40020470 	.word	0x40020470
 800c7c4:	40020488 	.word	0x40020488
 800c7c8:	400204a0 	.word	0x400204a0
 800c7cc:	400204b8 	.word	0x400204b8
 800c7d0:	aaaaaaab 	.word	0xaaaaaaab
 800c7d4:	08018428 	.word	0x08018428
 800c7d8:	fffffc00 	.word	0xfffffc00

0800c7dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	699b      	ldr	r3, [r3, #24]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d120      	bne.n	800c832 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f4:	2b03      	cmp	r3, #3
 800c7f6:	d858      	bhi.n	800c8aa <DMA_CheckFifoParam+0xce>
 800c7f8:	a201      	add	r2, pc, #4	; (adr r2, 800c800 <DMA_CheckFifoParam+0x24>)
 800c7fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fe:	bf00      	nop
 800c800:	0800c811 	.word	0x0800c811
 800c804:	0800c823 	.word	0x0800c823
 800c808:	0800c811 	.word	0x0800c811
 800c80c:	0800c8ab 	.word	0x0800c8ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d048      	beq.n	800c8ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c820:	e045      	b.n	800c8ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c826:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c82a:	d142      	bne.n	800c8b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800c82c:	2301      	movs	r3, #1
 800c82e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c830:	e03f      	b.n	800c8b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c83a:	d123      	bne.n	800c884 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c840:	2b03      	cmp	r3, #3
 800c842:	d838      	bhi.n	800c8b6 <DMA_CheckFifoParam+0xda>
 800c844:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <DMA_CheckFifoParam+0x70>)
 800c846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84a:	bf00      	nop
 800c84c:	0800c85d 	.word	0x0800c85d
 800c850:	0800c863 	.word	0x0800c863
 800c854:	0800c85d 	.word	0x0800c85d
 800c858:	0800c875 	.word	0x0800c875
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800c85c:	2301      	movs	r3, #1
 800c85e:	73fb      	strb	r3, [r7, #15]
        break;
 800c860:	e030      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d025      	beq.n	800c8ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800c86e:	2301      	movs	r3, #1
 800c870:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c872:	e022      	b.n	800c8ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c878:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c87c:	d11f      	bne.n	800c8be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800c87e:	2301      	movs	r3, #1
 800c880:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c882:	e01c      	b.n	800c8be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d902      	bls.n	800c892 <DMA_CheckFifoParam+0xb6>
 800c88c:	2b03      	cmp	r3, #3
 800c88e:	d003      	beq.n	800c898 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800c890:	e018      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800c892:	2301      	movs	r3, #1
 800c894:	73fb      	strb	r3, [r7, #15]
        break;
 800c896:	e015      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00e      	beq.n	800c8c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c8a8:	e00b      	b.n	800c8c2 <DMA_CheckFifoParam+0xe6>
        break;
 800c8aa:	bf00      	nop
 800c8ac:	e00a      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        break;
 800c8ae:	bf00      	nop
 800c8b0:	e008      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        break;
 800c8b2:	bf00      	nop
 800c8b4:	e006      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        break;
 800c8b6:	bf00      	nop
 800c8b8:	e004      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        break;
 800c8ba:	bf00      	nop
 800c8bc:	e002      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
        break;
 800c8be:	bf00      	nop
 800c8c0:	e000      	b.n	800c8c4 <DMA_CheckFifoParam+0xe8>
    break;
 800c8c2:	bf00      	nop
    }
  }

  return status;
 800c8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3714      	adds	r7, #20
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop

0800c8d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b085      	sub	sp, #20
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	4a38      	ldr	r2, [pc, #224]	; (800c9c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d022      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a36      	ldr	r2, [pc, #216]	; (800c9cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d01d      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a35      	ldr	r2, [pc, #212]	; (800c9d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800c8fc:	4293      	cmp	r3, r2
 800c8fe:	d018      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	4a33      	ldr	r2, [pc, #204]	; (800c9d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d013      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4a32      	ldr	r2, [pc, #200]	; (800c9d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800c910:	4293      	cmp	r3, r2
 800c912:	d00e      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	4a30      	ldr	r2, [pc, #192]	; (800c9dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d009      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4a2f      	ldr	r2, [pc, #188]	; (800c9e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800c924:	4293      	cmp	r3, r2
 800c926:	d004      	beq.n	800c932 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	4a2d      	ldr	r2, [pc, #180]	; (800c9e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800c92e:	4293      	cmp	r3, r2
 800c930:	d101      	bne.n	800c936 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800c932:	2301      	movs	r3, #1
 800c934:	e000      	b.n	800c938 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800c936:	2300      	movs	r3, #0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d01a      	beq.n	800c972 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	b2db      	uxtb	r3, r3
 800c942:	3b08      	subs	r3, #8
 800c944:	4a28      	ldr	r2, [pc, #160]	; (800c9e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800c946:	fba2 2303 	umull	r2, r3, r2, r3
 800c94a:	091b      	lsrs	r3, r3, #4
 800c94c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800c94e:	68fa      	ldr	r2, [r7, #12]
 800c950:	4b26      	ldr	r3, [pc, #152]	; (800c9ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800c952:	4413      	add	r3, r2
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	461a      	mov	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	4a24      	ldr	r2, [pc, #144]	; (800c9f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800c960:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	f003 031f 	and.w	r3, r3, #31
 800c968:	2201      	movs	r2, #1
 800c96a:	409a      	lsls	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800c970:	e024      	b.n	800c9bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	b2db      	uxtb	r3, r3
 800c978:	3b10      	subs	r3, #16
 800c97a:	4a1e      	ldr	r2, [pc, #120]	; (800c9f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800c97c:	fba2 2303 	umull	r2, r3, r2, r3
 800c980:	091b      	lsrs	r3, r3, #4
 800c982:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	4a1c      	ldr	r2, [pc, #112]	; (800c9f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d806      	bhi.n	800c99a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	4a1b      	ldr	r2, [pc, #108]	; (800c9fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d902      	bls.n	800c99a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	3308      	adds	r3, #8
 800c998:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4b18      	ldr	r3, [pc, #96]	; (800ca00 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800c99e:	4413      	add	r3, r2
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	4a16      	ldr	r2, [pc, #88]	; (800ca04 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800c9ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f003 031f 	and.w	r3, r3, #31
 800c9b4:	2201      	movs	r2, #1
 800c9b6:	409a      	lsls	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 800c9bc:	bf00      	nop
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr
 800c9c8:	58025408 	.word	0x58025408
 800c9cc:	5802541c 	.word	0x5802541c
 800c9d0:	58025430 	.word	0x58025430
 800c9d4:	58025444 	.word	0x58025444
 800c9d8:	58025458 	.word	0x58025458
 800c9dc:	5802546c 	.word	0x5802546c
 800c9e0:	58025480 	.word	0x58025480
 800c9e4:	58025494 	.word	0x58025494
 800c9e8:	cccccccd 	.word	0xcccccccd
 800c9ec:	16009600 	.word	0x16009600
 800c9f0:	58025880 	.word	0x58025880
 800c9f4:	aaaaaaab 	.word	0xaaaaaaab
 800c9f8:	400204b8 	.word	0x400204b8
 800c9fc:	4002040f 	.word	0x4002040f
 800ca00:	10008200 	.word	0x10008200
 800ca04:	40020880 	.word	0x40020880

0800ca08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d04a      	beq.n	800cab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2b08      	cmp	r3, #8
 800ca22:	d847      	bhi.n	800cab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a25      	ldr	r2, [pc, #148]	; (800cac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d022      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a24      	ldr	r2, [pc, #144]	; (800cac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d01d      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a22      	ldr	r2, [pc, #136]	; (800cac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d018      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a21      	ldr	r2, [pc, #132]	; (800cacc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d013      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a1f      	ldr	r2, [pc, #124]	; (800cad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d00e      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	4a1e      	ldr	r2, [pc, #120]	; (800cad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800ca5c:	4293      	cmp	r3, r2
 800ca5e:	d009      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	4a1c      	ldr	r2, [pc, #112]	; (800cad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d004      	beq.n	800ca74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4a1b      	ldr	r2, [pc, #108]	; (800cadc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d101      	bne.n	800ca78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800ca74:	2301      	movs	r3, #1
 800ca76:	e000      	b.n	800ca7a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00a      	beq.n	800ca94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	4b17      	ldr	r3, [pc, #92]	; (800cae0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800ca82:	4413      	add	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	461a      	mov	r2, r3
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	4a15      	ldr	r2, [pc, #84]	; (800cae4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800ca90:	671a      	str	r2, [r3, #112]	; 0x70
 800ca92:	e009      	b.n	800caa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4b14      	ldr	r3, [pc, #80]	; (800cae8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800ca98:	4413      	add	r3, r2
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	461a      	mov	r2, r3
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4a11      	ldr	r2, [pc, #68]	; (800caec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800caa6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	3b01      	subs	r3, #1
 800caac:	2201      	movs	r2, #1
 800caae:	409a      	lsls	r2, r3
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800cab4:	bf00      	nop
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	58025408 	.word	0x58025408
 800cac4:	5802541c 	.word	0x5802541c
 800cac8:	58025430 	.word	0x58025430
 800cacc:	58025444 	.word	0x58025444
 800cad0:	58025458 	.word	0x58025458
 800cad4:	5802546c 	.word	0x5802546c
 800cad8:	58025480 	.word	0x58025480
 800cadc:	58025494 	.word	0x58025494
 800cae0:	1600963f 	.word	0x1600963f
 800cae4:	58025940 	.word	0x58025940
 800cae8:	1000823f 	.word	0x1000823f
 800caec:	40020940 	.word	0x40020940

0800caf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b089      	sub	sp, #36	; 0x24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800cafa:	2300      	movs	r3, #0
 800cafc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800cafe:	4b86      	ldr	r3, [pc, #536]	; (800cd18 <HAL_GPIO_Init+0x228>)
 800cb00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800cb02:	e18c      	b.n	800ce1e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	2101      	movs	r1, #1
 800cb0a:	69fb      	ldr	r3, [r7, #28]
 800cb0c:	fa01 f303 	lsl.w	r3, r1, r3
 800cb10:	4013      	ands	r3, r2
 800cb12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f000 817e 	beq.w	800ce18 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	f003 0303 	and.w	r3, r3, #3
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d005      	beq.n	800cb34 <HAL_GPIO_Init+0x44>
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	f003 0303 	and.w	r3, r3, #3
 800cb30:	2b02      	cmp	r3, #2
 800cb32:	d130      	bne.n	800cb96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	005b      	lsls	r3, r3, #1
 800cb3e:	2203      	movs	r2, #3
 800cb40:	fa02 f303 	lsl.w	r3, r2, r3
 800cb44:	43db      	mvns	r3, r3
 800cb46:	69ba      	ldr	r2, [r7, #24]
 800cb48:	4013      	ands	r3, r2
 800cb4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	68da      	ldr	r2, [r3, #12]
 800cb50:	69fb      	ldr	r3, [r7, #28]
 800cb52:	005b      	lsls	r3, r3, #1
 800cb54:	fa02 f303 	lsl.w	r3, r2, r3
 800cb58:	69ba      	ldr	r2, [r7, #24]
 800cb5a:	4313      	orrs	r3, r2
 800cb5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	69ba      	ldr	r2, [r7, #24]
 800cb62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb72:	43db      	mvns	r3, r3
 800cb74:	69ba      	ldr	r2, [r7, #24]
 800cb76:	4013      	ands	r3, r2
 800cb78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	091b      	lsrs	r3, r3, #4
 800cb80:	f003 0201 	and.w	r2, r3, #1
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	fa02 f303 	lsl.w	r3, r2, r3
 800cb8a:	69ba      	ldr	r2, [r7, #24]
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	69ba      	ldr	r2, [r7, #24]
 800cb94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	f003 0303 	and.w	r3, r3, #3
 800cb9e:	2b03      	cmp	r3, #3
 800cba0:	d017      	beq.n	800cbd2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	68db      	ldr	r3, [r3, #12]
 800cba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cba8:	69fb      	ldr	r3, [r7, #28]
 800cbaa:	005b      	lsls	r3, r3, #1
 800cbac:	2203      	movs	r2, #3
 800cbae:	fa02 f303 	lsl.w	r3, r2, r3
 800cbb2:	43db      	mvns	r3, r3
 800cbb4:	69ba      	ldr	r2, [r7, #24]
 800cbb6:	4013      	ands	r3, r2
 800cbb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	689a      	ldr	r2, [r3, #8]
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	005b      	lsls	r3, r3, #1
 800cbc2:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc6:	69ba      	ldr	r2, [r7, #24]
 800cbc8:	4313      	orrs	r3, r2
 800cbca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	69ba      	ldr	r2, [r7, #24]
 800cbd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	f003 0303 	and.w	r3, r3, #3
 800cbda:	2b02      	cmp	r3, #2
 800cbdc:	d123      	bne.n	800cc26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	08da      	lsrs	r2, r3, #3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	3208      	adds	r2, #8
 800cbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cbec:	69fb      	ldr	r3, [r7, #28]
 800cbee:	f003 0307 	and.w	r3, r3, #7
 800cbf2:	009b      	lsls	r3, r3, #2
 800cbf4:	220f      	movs	r2, #15
 800cbf6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfa:	43db      	mvns	r3, r3
 800cbfc:	69ba      	ldr	r2, [r7, #24]
 800cbfe:	4013      	ands	r3, r2
 800cc00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	691a      	ldr	r2, [r3, #16]
 800cc06:	69fb      	ldr	r3, [r7, #28]
 800cc08:	f003 0307 	and.w	r3, r3, #7
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc12:	69ba      	ldr	r2, [r7, #24]
 800cc14:	4313      	orrs	r3, r2
 800cc16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	08da      	lsrs	r2, r3, #3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	3208      	adds	r2, #8
 800cc20:	69b9      	ldr	r1, [r7, #24]
 800cc22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	005b      	lsls	r3, r3, #1
 800cc30:	2203      	movs	r2, #3
 800cc32:	fa02 f303 	lsl.w	r3, r2, r3
 800cc36:	43db      	mvns	r3, r3
 800cc38:	69ba      	ldr	r2, [r7, #24]
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	f003 0203 	and.w	r2, r3, #3
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	005b      	lsls	r3, r3, #1
 800cc4a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc4e:	69ba      	ldr	r2, [r7, #24]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f000 80d8 	beq.w	800ce18 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800cc68:	4b2c      	ldr	r3, [pc, #176]	; (800cd1c <HAL_GPIO_Init+0x22c>)
 800cc6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cc6e:	4a2b      	ldr	r2, [pc, #172]	; (800cd1c <HAL_GPIO_Init+0x22c>)
 800cc70:	f043 0302 	orr.w	r3, r3, #2
 800cc74:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800cc78:	4b28      	ldr	r3, [pc, #160]	; (800cd1c <HAL_GPIO_Init+0x22c>)
 800cc7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800cc7e:	f003 0302 	and.w	r3, r3, #2
 800cc82:	60fb      	str	r3, [r7, #12]
 800cc84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800cc86:	4a26      	ldr	r2, [pc, #152]	; (800cd20 <HAL_GPIO_Init+0x230>)
 800cc88:	69fb      	ldr	r3, [r7, #28]
 800cc8a:	089b      	lsrs	r3, r3, #2
 800cc8c:	3302      	adds	r3, #2
 800cc8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	f003 0303 	and.w	r3, r3, #3
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	220f      	movs	r2, #15
 800cc9e:	fa02 f303 	lsl.w	r3, r2, r3
 800cca2:	43db      	mvns	r3, r3
 800cca4:	69ba      	ldr	r2, [r7, #24]
 800cca6:	4013      	ands	r3, r2
 800cca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a1d      	ldr	r2, [pc, #116]	; (800cd24 <HAL_GPIO_Init+0x234>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d04a      	beq.n	800cd48 <HAL_GPIO_Init+0x258>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	4a1c      	ldr	r2, [pc, #112]	; (800cd28 <HAL_GPIO_Init+0x238>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d02b      	beq.n	800cd12 <HAL_GPIO_Init+0x222>
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a1b      	ldr	r2, [pc, #108]	; (800cd2c <HAL_GPIO_Init+0x23c>)
 800ccbe:	4293      	cmp	r3, r2
 800ccc0:	d025      	beq.n	800cd0e <HAL_GPIO_Init+0x21e>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	4a1a      	ldr	r2, [pc, #104]	; (800cd30 <HAL_GPIO_Init+0x240>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d01f      	beq.n	800cd0a <HAL_GPIO_Init+0x21a>
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4a19      	ldr	r2, [pc, #100]	; (800cd34 <HAL_GPIO_Init+0x244>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d019      	beq.n	800cd06 <HAL_GPIO_Init+0x216>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a18      	ldr	r2, [pc, #96]	; (800cd38 <HAL_GPIO_Init+0x248>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d013      	beq.n	800cd02 <HAL_GPIO_Init+0x212>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4a17      	ldr	r2, [pc, #92]	; (800cd3c <HAL_GPIO_Init+0x24c>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d00d      	beq.n	800ccfe <HAL_GPIO_Init+0x20e>
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	4a16      	ldr	r2, [pc, #88]	; (800cd40 <HAL_GPIO_Init+0x250>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d007      	beq.n	800ccfa <HAL_GPIO_Init+0x20a>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	4a15      	ldr	r2, [pc, #84]	; (800cd44 <HAL_GPIO_Init+0x254>)
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d101      	bne.n	800ccf6 <HAL_GPIO_Init+0x206>
 800ccf2:	2309      	movs	r3, #9
 800ccf4:	e029      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800ccf6:	230a      	movs	r3, #10
 800ccf8:	e027      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800ccfa:	2307      	movs	r3, #7
 800ccfc:	e025      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800ccfe:	2306      	movs	r3, #6
 800cd00:	e023      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd02:	2305      	movs	r3, #5
 800cd04:	e021      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd06:	2304      	movs	r3, #4
 800cd08:	e01f      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	e01d      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd0e:	2302      	movs	r3, #2
 800cd10:	e01b      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd12:	2301      	movs	r3, #1
 800cd14:	e019      	b.n	800cd4a <HAL_GPIO_Init+0x25a>
 800cd16:	bf00      	nop
 800cd18:	58000080 	.word	0x58000080
 800cd1c:	58024400 	.word	0x58024400
 800cd20:	58000400 	.word	0x58000400
 800cd24:	58020000 	.word	0x58020000
 800cd28:	58020400 	.word	0x58020400
 800cd2c:	58020800 	.word	0x58020800
 800cd30:	58020c00 	.word	0x58020c00
 800cd34:	58021000 	.word	0x58021000
 800cd38:	58021400 	.word	0x58021400
 800cd3c:	58021800 	.word	0x58021800
 800cd40:	58021c00 	.word	0x58021c00
 800cd44:	58022400 	.word	0x58022400
 800cd48:	2300      	movs	r3, #0
 800cd4a:	69fa      	ldr	r2, [r7, #28]
 800cd4c:	f002 0203 	and.w	r2, r2, #3
 800cd50:	0092      	lsls	r2, r2, #2
 800cd52:	4093      	lsls	r3, r2
 800cd54:	69ba      	ldr	r2, [r7, #24]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cd5a:	4938      	ldr	r1, [pc, #224]	; (800ce3c <HAL_GPIO_Init+0x34c>)
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	089b      	lsrs	r3, r3, #2
 800cd60:	3302      	adds	r3, #2
 800cd62:	69ba      	ldr	r2, [r7, #24]
 800cd64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cd68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	43db      	mvns	r3, r3
 800cd74:	69ba      	ldr	r2, [r7, #24]
 800cd76:	4013      	ands	r3, r2
 800cd78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d003      	beq.n	800cd8e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800cd86:	69ba      	ldr	r2, [r7, #24]
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	4313      	orrs	r3, r2
 800cd8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800cd8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800cd96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	43db      	mvns	r3, r3
 800cda2:	69ba      	ldr	r2, [r7, #24]
 800cda4:	4013      	ands	r3, r2
 800cda6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d003      	beq.n	800cdbc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800cdb4:	69ba      	ldr	r2, [r7, #24]
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800cdbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800cdc4:	697b      	ldr	r3, [r7, #20]
 800cdc6:	685b      	ldr	r3, [r3, #4]
 800cdc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	43db      	mvns	r3, r3
 800cdce:	69ba      	ldr	r2, [r7, #24]
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d003      	beq.n	800cde8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800cde0:	69ba      	ldr	r2, [r7, #24]
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	4313      	orrs	r3, r2
 800cde6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	69ba      	ldr	r2, [r7, #24]
 800cdec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	43db      	mvns	r3, r3
 800cdf8:	69ba      	ldr	r2, [r7, #24]
 800cdfa:	4013      	ands	r3, r2
 800cdfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d003      	beq.n	800ce12 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800ce0a:	69ba      	ldr	r2, [r7, #24]
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	69ba      	ldr	r2, [r7, #24]
 800ce16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ce18:	69fb      	ldr	r3, [r7, #28]
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	681a      	ldr	r2, [r3, #0]
 800ce22:	69fb      	ldr	r3, [r7, #28]
 800ce24:	fa22 f303 	lsr.w	r3, r2, r3
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	f47f ae6b 	bne.w	800cb04 <HAL_GPIO_Init+0x14>
  }
}
 800ce2e:	bf00      	nop
 800ce30:	bf00      	nop
 800ce32:	3724      	adds	r7, #36	; 0x24
 800ce34:	46bd      	mov	sp, r7
 800ce36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce3a:	4770      	bx	lr
 800ce3c:	58000400 	.word	0x58000400

0800ce40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce40:	b480      	push	{r7}
 800ce42:	b083      	sub	sp, #12
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
 800ce48:	460b      	mov	r3, r1
 800ce4a:	807b      	strh	r3, [r7, #2]
 800ce4c:	4613      	mov	r3, r2
 800ce4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ce50:	787b      	ldrb	r3, [r7, #1]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d003      	beq.n	800ce5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ce56:	887a      	ldrh	r2, [r7, #2]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ce5c:	e003      	b.n	800ce66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ce5e:	887b      	ldrh	r3, [r7, #2]
 800ce60:	041a      	lsls	r2, r3, #16
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	619a      	str	r2, [r3, #24]
}
 800ce66:	bf00      	nop
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr

0800ce72 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ce72:	b480      	push	{r7}
 800ce74:	b085      	sub	sp, #20
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	695b      	ldr	r3, [r3, #20]
 800ce82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ce84:	887a      	ldrh	r2, [r7, #2]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	4013      	ands	r3, r2
 800ce8a:	041a      	lsls	r2, r3, #16
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	43d9      	mvns	r1, r3
 800ce90:	887b      	ldrh	r3, [r7, #2]
 800ce92:	400b      	ands	r3, r1
 800ce94:	431a      	orrs	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	619a      	str	r2, [r3, #24]
}
 800ce9a:	bf00      	nop
 800ce9c:	3714      	adds	r7, #20
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr
	...

0800cea8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d101      	bne.n	800ceba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e07f      	b.n	800cfba <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d106      	bne.n	800ced4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f7f5 f82a 	bl	8001f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2224      	movs	r2, #36	; 0x24
 800ced8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	681a      	ldr	r2, [r3, #0]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f022 0201 	bic.w	r2, r2, #1
 800ceea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	685a      	ldr	r2, [r3, #4]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800cef8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	689a      	ldr	r2, [r3, #8]
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf08:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	2b01      	cmp	r3, #1
 800cf10:	d107      	bne.n	800cf22 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	689a      	ldr	r2, [r3, #8]
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cf1e:	609a      	str	r2, [r3, #8]
 800cf20:	e006      	b.n	800cf30 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	689a      	ldr	r2, [r3, #8]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800cf2e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	2b02      	cmp	r3, #2
 800cf36:	d104      	bne.n	800cf42 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf40:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	6859      	ldr	r1, [r3, #4]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681a      	ldr	r2, [r3, #0]
 800cf4c:	4b1d      	ldr	r3, [pc, #116]	; (800cfc4 <HAL_I2C_Init+0x11c>)
 800cf4e:	430b      	orrs	r3, r1
 800cf50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68da      	ldr	r2, [r3, #12]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	691a      	ldr	r2, [r3, #16]
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	695b      	ldr	r3, [r3, #20]
 800cf6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	699b      	ldr	r3, [r3, #24]
 800cf72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	430a      	orrs	r2, r1
 800cf7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	69d9      	ldr	r1, [r3, #28]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	6a1a      	ldr	r2, [r3, #32]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	430a      	orrs	r2, r1
 800cf8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f042 0201 	orr.w	r2, r2, #1
 800cf9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	2220      	movs	r2, #32
 800cfa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2200      	movs	r2, #0
 800cfae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2200      	movs	r2, #0
 800cfb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3708      	adds	r7, #8
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	02008000 	.word	0x02008000

0800cfc8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b088      	sub	sp, #32
 800cfcc:	af02      	add	r7, sp, #8
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	607a      	str	r2, [r7, #4]
 800cfd2:	461a      	mov	r2, r3
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	817b      	strh	r3, [r7, #10]
 800cfd8:	4613      	mov	r3, r2
 800cfda:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	2b20      	cmp	r3, #32
 800cfe6:	f040 80da 	bne.w	800d19e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cff0:	2b01      	cmp	r3, #1
 800cff2:	d101      	bne.n	800cff8 <HAL_I2C_Master_Transmit+0x30>
 800cff4:	2302      	movs	r3, #2
 800cff6:	e0d3      	b.n	800d1a0 <HAL_I2C_Master_Transmit+0x1d8>
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d000:	f7fa faa2 	bl	8007548 <HAL_GetTick>
 800d004:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	2319      	movs	r3, #25
 800d00c:	2201      	movs	r2, #1
 800d00e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f000 ffcf 	bl	800dfb6 <I2C_WaitOnFlagUntilTimeout>
 800d018:	4603      	mov	r3, r0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d001      	beq.n	800d022 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800d01e:	2301      	movs	r3, #1
 800d020:	e0be      	b.n	800d1a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2221      	movs	r2, #33	; 0x21
 800d026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2210      	movs	r2, #16
 800d02e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	2200      	movs	r2, #0
 800d036:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	893a      	ldrh	r2, [r7, #8]
 800d042:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2200      	movs	r2, #0
 800d048:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d04e:	b29b      	uxth	r3, r3
 800d050:	2bff      	cmp	r3, #255	; 0xff
 800d052:	d90e      	bls.n	800d072 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	22ff      	movs	r2, #255	; 0xff
 800d058:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d05e:	b2da      	uxtb	r2, r3
 800d060:	8979      	ldrh	r1, [r7, #10]
 800d062:	4b51      	ldr	r3, [pc, #324]	; (800d1a8 <HAL_I2C_Master_Transmit+0x1e0>)
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f001 f9c6 	bl	800e3fc <I2C_TransferConfig>
 800d070:	e06c      	b.n	800d14c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d076:	b29a      	uxth	r2, r3
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d080:	b2da      	uxtb	r2, r3
 800d082:	8979      	ldrh	r1, [r7, #10]
 800d084:	4b48      	ldr	r3, [pc, #288]	; (800d1a8 <HAL_I2C_Master_Transmit+0x1e0>)
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f001 f9b5 	bl	800e3fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800d092:	e05b      	b.n	800d14c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	6a39      	ldr	r1, [r7, #32]
 800d098:	68f8      	ldr	r0, [r7, #12]
 800d09a:	f000 ffcc 	bl	800e036 <I2C_WaitOnTXISFlagUntilTimeout>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d001      	beq.n	800d0a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e07b      	b.n	800d1a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0ac:	781a      	ldrb	r2, [r3, #0]
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0b8:	1c5a      	adds	r2, r3, #1
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	3b01      	subs	r3, #1
 800d0c6:	b29a      	uxth	r2, r3
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0d0:	3b01      	subs	r3, #1
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d034      	beq.n	800d14c <HAL_I2C_Master_Transmit+0x184>
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d130      	bne.n	800d14c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	9300      	str	r3, [sp, #0]
 800d0ee:	6a3b      	ldr	r3, [r7, #32]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	2180      	movs	r1, #128	; 0x80
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f000 ff5e 	bl	800dfb6 <I2C_WaitOnFlagUntilTimeout>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d001      	beq.n	800d104 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800d100:	2301      	movs	r3, #1
 800d102:	e04d      	b.n	800d1a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d108:	b29b      	uxth	r3, r3
 800d10a:	2bff      	cmp	r3, #255	; 0xff
 800d10c:	d90e      	bls.n	800d12c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	22ff      	movs	r2, #255	; 0xff
 800d112:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d118:	b2da      	uxtb	r2, r3
 800d11a:	8979      	ldrh	r1, [r7, #10]
 800d11c:	2300      	movs	r3, #0
 800d11e:	9300      	str	r3, [sp, #0]
 800d120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d124:	68f8      	ldr	r0, [r7, #12]
 800d126:	f001 f969 	bl	800e3fc <I2C_TransferConfig>
 800d12a:	e00f      	b.n	800d14c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d130:	b29a      	uxth	r2, r3
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d13a:	b2da      	uxtb	r2, r3
 800d13c:	8979      	ldrh	r1, [r7, #10]
 800d13e:	2300      	movs	r3, #0
 800d140:	9300      	str	r3, [sp, #0]
 800d142:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f001 f958 	bl	800e3fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d150:	b29b      	uxth	r3, r3
 800d152:	2b00      	cmp	r3, #0
 800d154:	d19e      	bne.n	800d094 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d156:	697a      	ldr	r2, [r7, #20]
 800d158:	6a39      	ldr	r1, [r7, #32]
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f000 ffab 	bl	800e0b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d160:	4603      	mov	r3, r0
 800d162:	2b00      	cmp	r3, #0
 800d164:	d001      	beq.n	800d16a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800d166:	2301      	movs	r3, #1
 800d168:	e01a      	b.n	800d1a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	2220      	movs	r2, #32
 800d170:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	6859      	ldr	r1, [r3, #4]
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	4b0b      	ldr	r3, [pc, #44]	; (800d1ac <HAL_I2C_Master_Transmit+0x1e4>)
 800d17e:	400b      	ands	r3, r1
 800d180:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2220      	movs	r2, #32
 800d186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	2200      	movs	r2, #0
 800d18e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2200      	movs	r2, #0
 800d196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d19a:	2300      	movs	r3, #0
 800d19c:	e000      	b.n	800d1a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800d19e:	2302      	movs	r3, #2
  }
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3718      	adds	r7, #24
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	80002000 	.word	0x80002000
 800d1ac:	fe00e800 	.word	0xfe00e800

0800d1b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b088      	sub	sp, #32
 800d1b4:	af02      	add	r7, sp, #8
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	607a      	str	r2, [r7, #4]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	460b      	mov	r3, r1
 800d1be:	817b      	strh	r3, [r7, #10]
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d1ca:	b2db      	uxtb	r3, r3
 800d1cc:	2b20      	cmp	r3, #32
 800d1ce:	f040 80db 	bne.w	800d388 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d101      	bne.n	800d1e0 <HAL_I2C_Master_Receive+0x30>
 800d1dc:	2302      	movs	r3, #2
 800d1de:	e0d4      	b.n	800d38a <HAL_I2C_Master_Receive+0x1da>
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d1e8:	f7fa f9ae 	bl	8007548 <HAL_GetTick>
 800d1ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	2319      	movs	r3, #25
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f000 fedb 	bl	800dfb6 <I2C_WaitOnFlagUntilTimeout>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d001      	beq.n	800d20a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800d206:	2301      	movs	r3, #1
 800d208:	e0bf      	b.n	800d38a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2222      	movs	r2, #34	; 0x22
 800d20e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2210      	movs	r2, #16
 800d216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	893a      	ldrh	r2, [r7, #8]
 800d22a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	2200      	movs	r2, #0
 800d230:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d236:	b29b      	uxth	r3, r3
 800d238:	2bff      	cmp	r3, #255	; 0xff
 800d23a:	d90e      	bls.n	800d25a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	22ff      	movs	r2, #255	; 0xff
 800d240:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d246:	b2da      	uxtb	r2, r3
 800d248:	8979      	ldrh	r1, [r7, #10]
 800d24a:	4b52      	ldr	r3, [pc, #328]	; (800d394 <HAL_I2C_Master_Receive+0x1e4>)
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f001 f8d2 	bl	800e3fc <I2C_TransferConfig>
 800d258:	e06d      	b.n	800d336 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d25e:	b29a      	uxth	r2, r3
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d268:	b2da      	uxtb	r2, r3
 800d26a:	8979      	ldrh	r1, [r7, #10]
 800d26c:	4b49      	ldr	r3, [pc, #292]	; (800d394 <HAL_I2C_Master_Receive+0x1e4>)
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d274:	68f8      	ldr	r0, [r7, #12]
 800d276:	f001 f8c1 	bl	800e3fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800d27a:	e05c      	b.n	800d336 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d27c:	697a      	ldr	r2, [r7, #20]
 800d27e:	6a39      	ldr	r1, [r7, #32]
 800d280:	68f8      	ldr	r0, [r7, #12]
 800d282:	f000 ff55 	bl	800e130 <I2C_WaitOnRXNEFlagUntilTimeout>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d001      	beq.n	800d290 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
 800d28e:	e07c      	b.n	800d38a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29a:	b2d2      	uxtb	r2, r2
 800d29c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a2:	1c5a      	adds	r2, r3, #1
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d034      	beq.n	800d336 <HAL_I2C_Master_Receive+0x186>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d130      	bne.n	800d336 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	9300      	str	r3, [sp, #0]
 800d2d8:	6a3b      	ldr	r3, [r7, #32]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	2180      	movs	r1, #128	; 0x80
 800d2de:	68f8      	ldr	r0, [r7, #12]
 800d2e0:	f000 fe69 	bl	800dfb6 <I2C_WaitOnFlagUntilTimeout>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	e04d      	b.n	800d38a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	2bff      	cmp	r3, #255	; 0xff
 800d2f6:	d90e      	bls.n	800d316 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	22ff      	movs	r2, #255	; 0xff
 800d2fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d302:	b2da      	uxtb	r2, r3
 800d304:	8979      	ldrh	r1, [r7, #10]
 800d306:	2300      	movs	r3, #0
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d30e:	68f8      	ldr	r0, [r7, #12]
 800d310:	f001 f874 	bl	800e3fc <I2C_TransferConfig>
 800d314:	e00f      	b.n	800d336 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d324:	b2da      	uxtb	r2, r3
 800d326:	8979      	ldrh	r1, [r7, #10]
 800d328:	2300      	movs	r3, #0
 800d32a:	9300      	str	r3, [sp, #0]
 800d32c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f001 f863 	bl	800e3fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d33a:	b29b      	uxth	r3, r3
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d19d      	bne.n	800d27c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d340:	697a      	ldr	r2, [r7, #20]
 800d342:	6a39      	ldr	r1, [r7, #32]
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f000 feb6 	bl	800e0b6 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d001      	beq.n	800d354 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e01a      	b.n	800d38a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	2220      	movs	r2, #32
 800d35a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6859      	ldr	r1, [r3, #4]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	4b0c      	ldr	r3, [pc, #48]	; (800d398 <HAL_I2C_Master_Receive+0x1e8>)
 800d368:	400b      	ands	r3, r1
 800d36a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2220      	movs	r2, #32
 800d370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2200      	movs	r2, #0
 800d378:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d384:	2300      	movs	r3, #0
 800d386:	e000      	b.n	800d38a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800d388:	2302      	movs	r3, #2
  }
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3718      	adds	r7, #24
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}
 800d392:	bf00      	nop
 800d394:	80002400 	.word	0x80002400
 800d398:	fe00e800 	.word	0xfe00e800

0800d39c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	699b      	ldr	r3, [r3, #24]
 800d3aa:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	0a1b      	lsrs	r3, r3, #8
 800d3b8:	f003 0301 	and.w	r3, r3, #1
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d010      	beq.n	800d3e2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	09db      	lsrs	r3, r3, #7
 800d3c4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00a      	beq.n	800d3e2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3d0:	f043 0201 	orr.w	r2, r3, #1
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3e0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	0a9b      	lsrs	r3, r3, #10
 800d3e6:	f003 0301 	and.w	r3, r3, #1
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d010      	beq.n	800d410 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	09db      	lsrs	r3, r3, #7
 800d3f2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00a      	beq.n	800d410 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3fe:	f043 0208 	orr.w	r2, r3, #8
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d40e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	0a5b      	lsrs	r3, r3, #9
 800d414:	f003 0301 	and.w	r3, r3, #1
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d010      	beq.n	800d43e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	09db      	lsrs	r3, r3, #7
 800d420:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d424:	2b00      	cmp	r3, #0
 800d426:	d00a      	beq.n	800d43e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d42c:	f043 0202 	orr.w	r2, r3, #2
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d43c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d442:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f003 030b 	and.w	r3, r3, #11
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d003      	beq.n	800d456 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800d44e:	68f9      	ldr	r1, [r7, #12]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 fc77 	bl	800dd44 <I2C_ITError>
  }
}
 800d456:	bf00      	nop
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d45e:	b480      	push	{r7}
 800d460:	b083      	sub	sp, #12
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d466:	bf00      	nop
 800d468:	370c      	adds	r7, #12
 800d46a:	46bd      	mov	sp, r7
 800d46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d470:	4770      	bx	lr

0800d472 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d472:	b480      	push	{r7}
 800d474:	b083      	sub	sp, #12
 800d476:	af00      	add	r7, sp, #0
 800d478:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d47a:	bf00      	nop
 800d47c:	370c      	adds	r7, #12
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d486:	b480      	push	{r7}
 800d488:	b083      	sub	sp, #12
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	460b      	mov	r3, r1
 800d490:	70fb      	strb	r3, [r7, #3]
 800d492:	4613      	mov	r3, r2
 800d494:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d496:	bf00      	nop
 800d498:	370c      	adds	r7, #12
 800d49a:	46bd      	mov	sp, r7
 800d49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a0:	4770      	bx	lr

0800d4a2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d4a2:	b480      	push	{r7}
 800d4a4:	b083      	sub	sp, #12
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800d4aa:	bf00      	nop
 800d4ac:	370c      	adds	r7, #12
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr

0800d4b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800d4b6:	b480      	push	{r7}
 800d4b8:	b083      	sub	sp, #12
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800d4be:	bf00      	nop
 800d4c0:	370c      	adds	r7, #12
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c8:	4770      	bx	lr

0800d4ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	b083      	sub	sp, #12
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800d4d2:	bf00      	nop
 800d4d4:	370c      	adds	r7, #12
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr

0800d4de <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b086      	sub	sp, #24
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	60f8      	str	r0, [r7, #12]
 800d4e6:	60b9      	str	r1, [r7, #8]
 800d4e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d4fa:	2b01      	cmp	r3, #1
 800d4fc:	d101      	bne.n	800d502 <I2C_Slave_ISR_IT+0x24>
 800d4fe:	2302      	movs	r3, #2
 800d500:	e0ec      	b.n	800d6dc <I2C_Slave_ISR_IT+0x1fe>
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2201      	movs	r2, #1
 800d506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	095b      	lsrs	r3, r3, #5
 800d50e:	f003 0301 	and.w	r3, r3, #1
 800d512:	2b00      	cmp	r3, #0
 800d514:	d009      	beq.n	800d52a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	095b      	lsrs	r3, r3, #5
 800d51a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d003      	beq.n	800d52a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800d522:	6939      	ldr	r1, [r7, #16]
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f000 f9bf 	bl	800d8a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d52a:	693b      	ldr	r3, [r7, #16]
 800d52c:	091b      	lsrs	r3, r3, #4
 800d52e:	f003 0301 	and.w	r3, r3, #1
 800d532:	2b00      	cmp	r3, #0
 800d534:	d04d      	beq.n	800d5d2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	091b      	lsrs	r3, r3, #4
 800d53a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d047      	beq.n	800d5d2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d546:	b29b      	uxth	r3, r3
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d128      	bne.n	800d59e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d552:	b2db      	uxtb	r3, r3
 800d554:	2b28      	cmp	r3, #40	; 0x28
 800d556:	d108      	bne.n	800d56a <I2C_Slave_ISR_IT+0x8c>
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d55e:	d104      	bne.n	800d56a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d560:	6939      	ldr	r1, [r7, #16]
 800d562:	68f8      	ldr	r0, [r7, #12]
 800d564:	f000 fb98 	bl	800dc98 <I2C_ITListenCplt>
 800d568:	e032      	b.n	800d5d0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d570:	b2db      	uxtb	r3, r3
 800d572:	2b29      	cmp	r3, #41	; 0x29
 800d574:	d10e      	bne.n	800d594 <I2C_Slave_ISR_IT+0xb6>
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d57c:	d00a      	beq.n	800d594 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	2210      	movs	r2, #16
 800d584:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	f000 fcd3 	bl	800df32 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f000 f92d 	bl	800d7ec <I2C_ITSlaveSeqCplt>
 800d592:	e01d      	b.n	800d5d0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	2210      	movs	r2, #16
 800d59a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800d59c:	e096      	b.n	800d6cc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	2210      	movs	r2, #16
 800d5a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5aa:	f043 0204 	orr.w	r2, r3, #4
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d004      	beq.n	800d5c2 <I2C_Slave_ISR_IT+0xe4>
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d5be:	f040 8085 	bne.w	800d6cc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	68f8      	ldr	r0, [r7, #12]
 800d5ca:	f000 fbbb 	bl	800dd44 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d5ce:	e07d      	b.n	800d6cc <I2C_Slave_ISR_IT+0x1ee>
 800d5d0:	e07c      	b.n	800d6cc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	089b      	lsrs	r3, r3, #2
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d030      	beq.n	800d640 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	089b      	lsrs	r3, r3, #2
 800d5e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d02a      	beq.n	800d640 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d018      	beq.n	800d626 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fe:	b2d2      	uxtb	r2, r2
 800d600:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d606:	1c5a      	adds	r2, r3, #1
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d610:	3b01      	subs	r3, #1
 800d612:	b29a      	uxth	r2, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	3b01      	subs	r3, #1
 800d620:	b29a      	uxth	r2, r3
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d14f      	bne.n	800d6d0 <I2C_Slave_ISR_IT+0x1f2>
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d636:	d04b      	beq.n	800d6d0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f000 f8d7 	bl	800d7ec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800d63e:	e047      	b.n	800d6d0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	08db      	lsrs	r3, r3, #3
 800d644:	f003 0301 	and.w	r3, r3, #1
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00a      	beq.n	800d662 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	08db      	lsrs	r3, r3, #3
 800d650:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d654:	2b00      	cmp	r3, #0
 800d656:	d004      	beq.n	800d662 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800d658:	6939      	ldr	r1, [r7, #16]
 800d65a:	68f8      	ldr	r0, [r7, #12]
 800d65c:	f000 f842 	bl	800d6e4 <I2C_ITAddrCplt>
 800d660:	e037      	b.n	800d6d2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d662:	693b      	ldr	r3, [r7, #16]
 800d664:	085b      	lsrs	r3, r3, #1
 800d666:	f003 0301 	and.w	r3, r3, #1
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d031      	beq.n	800d6d2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	085b      	lsrs	r3, r3, #1
 800d672:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d676:	2b00      	cmp	r3, #0
 800d678:	d02b      	beq.n	800d6d2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d67e:	b29b      	uxth	r3, r3
 800d680:	2b00      	cmp	r3, #0
 800d682:	d018      	beq.n	800d6b6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d688:	781a      	ldrb	r2, [r3, #0]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d694:	1c5a      	adds	r2, r3, #1
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	b29a      	uxth	r2, r3
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6ac:	3b01      	subs	r3, #1
 800d6ae:	b29a      	uxth	r2, r3
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	851a      	strh	r2, [r3, #40]	; 0x28
 800d6b4:	e00d      	b.n	800d6d2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d6bc:	d002      	beq.n	800d6c4 <I2C_Slave_ISR_IT+0x1e6>
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d106      	bne.n	800d6d2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d6c4:	68f8      	ldr	r0, [r7, #12]
 800d6c6:	f000 f891 	bl	800d7ec <I2C_ITSlaveSeqCplt>
 800d6ca:	e002      	b.n	800d6d2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800d6cc:	bf00      	nop
 800d6ce:	e000      	b.n	800d6d2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800d6d0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d6da:	2300      	movs	r3, #0
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3718      	adds	r7, #24
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b084      	sub	sp, #16
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d6f4:	b2db      	uxtb	r3, r3
 800d6f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d6fa:	2b28      	cmp	r3, #40	; 0x28
 800d6fc:	d16a      	bne.n	800d7d4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	699b      	ldr	r3, [r3, #24]
 800d704:	0c1b      	lsrs	r3, r3, #16
 800d706:	b2db      	uxtb	r3, r3
 800d708:	f003 0301 	and.w	r3, r3, #1
 800d70c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	699b      	ldr	r3, [r3, #24]
 800d714:	0c1b      	lsrs	r3, r3, #16
 800d716:	b29b      	uxth	r3, r3
 800d718:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d71c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	b29b      	uxth	r3, r3
 800d726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d72a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	68db      	ldr	r3, [r3, #12]
 800d732:	b29b      	uxth	r3, r3
 800d734:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d738:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	68db      	ldr	r3, [r3, #12]
 800d73e:	2b02      	cmp	r3, #2
 800d740:	d138      	bne.n	800d7b4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800d742:	897b      	ldrh	r3, [r7, #10]
 800d744:	09db      	lsrs	r3, r3, #7
 800d746:	b29a      	uxth	r2, r3
 800d748:	89bb      	ldrh	r3, [r7, #12]
 800d74a:	4053      	eors	r3, r2
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	f003 0306 	and.w	r3, r3, #6
 800d752:	2b00      	cmp	r3, #0
 800d754:	d11c      	bne.n	800d790 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800d756:	897b      	ldrh	r3, [r7, #10]
 800d758:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d75e:	1c5a      	adds	r2, r3, #1
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d13b      	bne.n	800d7e4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2208      	movs	r2, #8
 800d778:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d782:	89ba      	ldrh	r2, [r7, #12]
 800d784:	7bfb      	ldrb	r3, [r7, #15]
 800d786:	4619      	mov	r1, r3
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f7ff fe7c 	bl	800d486 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800d78e:	e029      	b.n	800d7e4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800d790:	893b      	ldrh	r3, [r7, #8]
 800d792:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f000 fe61 	bl	800e460 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d7a6:	89ba      	ldrh	r2, [r7, #12]
 800d7a8:	7bfb      	ldrb	r3, [r7, #15]
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f7ff fe6a 	bl	800d486 <HAL_I2C_AddrCallback>
}
 800d7b2:	e017      	b.n	800d7e4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800d7b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f000 fe51 	bl	800e460 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800d7c6:	89ba      	ldrh	r2, [r7, #12]
 800d7c8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	6878      	ldr	r0, [r7, #4]
 800d7ce:	f7ff fe5a 	bl	800d486 <HAL_I2C_AddrCallback>
}
 800d7d2:	e007      	b.n	800d7e4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2208      	movs	r2, #8
 800d7da:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800d7e4:	bf00      	nop
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b084      	sub	sp, #16
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2200      	movs	r2, #0
 800d800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	0b9b      	lsrs	r3, r3, #14
 800d808:	f003 0301 	and.w	r3, r3, #1
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d008      	beq.n	800d822 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	681a      	ldr	r2, [r3, #0]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d81e:	601a      	str	r2, [r3, #0]
 800d820:	e00d      	b.n	800d83e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	0bdb      	lsrs	r3, r3, #15
 800d826:	f003 0301 	and.w	r3, r3, #1
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d007      	beq.n	800d83e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	681a      	ldr	r2, [r3, #0]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d83c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d844:	b2db      	uxtb	r3, r3
 800d846:	2b29      	cmp	r3, #41	; 0x29
 800d848:	d112      	bne.n	800d870 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2228      	movs	r2, #40	; 0x28
 800d84e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2221      	movs	r2, #33	; 0x21
 800d856:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d858:	2101      	movs	r1, #1
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 fe00 	bl	800e460 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	2200      	movs	r2, #0
 800d864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff fdf8 	bl	800d45e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d86e:	e017      	b.n	800d8a0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d876:	b2db      	uxtb	r3, r3
 800d878:	2b2a      	cmp	r3, #42	; 0x2a
 800d87a:	d111      	bne.n	800d8a0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2228      	movs	r2, #40	; 0x28
 800d880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2222      	movs	r2, #34	; 0x22
 800d888:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800d88a:	2102      	movs	r1, #2
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 fde7 	bl	800e460 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7ff fde9 	bl	800d472 <HAL_I2C_SlaveRxCpltCallback>
}
 800d8a0:	bf00      	nop
 800d8a2:	3710      	adds	r7, #16
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b086      	sub	sp, #24
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8c4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	2220      	movs	r2, #32
 800d8cc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
 800d8d0:	2b21      	cmp	r3, #33	; 0x21
 800d8d2:	d002      	beq.n	800d8da <I2C_ITSlaveCplt+0x32>
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	2b29      	cmp	r3, #41	; 0x29
 800d8d8:	d108      	bne.n	800d8ec <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800d8da:	f248 0101 	movw	r1, #32769	; 0x8001
 800d8de:	6878      	ldr	r0, [r7, #4]
 800d8e0:	f000 fdbe 	bl	800e460 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2221      	movs	r2, #33	; 0x21
 800d8e8:	631a      	str	r2, [r3, #48]	; 0x30
 800d8ea:	e00d      	b.n	800d908 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d8ec:	7bfb      	ldrb	r3, [r7, #15]
 800d8ee:	2b22      	cmp	r3, #34	; 0x22
 800d8f0:	d002      	beq.n	800d8f8 <I2C_ITSlaveCplt+0x50>
 800d8f2:	7bfb      	ldrb	r3, [r7, #15]
 800d8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800d8f6:	d107      	bne.n	800d908 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800d8f8:	f248 0102 	movw	r1, #32770	; 0x8002
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f000 fdaf 	bl	800e460 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2222      	movs	r2, #34	; 0x22
 800d906:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	685a      	ldr	r2, [r3, #4]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d916:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	6859      	ldr	r1, [r3, #4]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681a      	ldr	r2, [r3, #0]
 800d922:	4b80      	ldr	r3, [pc, #512]	; (800db24 <I2C_ITSlaveCplt+0x27c>)
 800d924:	400b      	ands	r3, r1
 800d926:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f000 fb02 	bl	800df32 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	0b9b      	lsrs	r3, r3, #14
 800d932:	f003 0301 	and.w	r3, r3, #1
 800d936:	2b00      	cmp	r3, #0
 800d938:	d07a      	beq.n	800da30 <I2C_ITSlaveCplt+0x188>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	681a      	ldr	r2, [r3, #0]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d948:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d94e:	2b00      	cmp	r3, #0
 800d950:	f000 8111 	beq.w	800db76 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a73      	ldr	r2, [pc, #460]	; (800db28 <I2C_ITSlaveCplt+0x280>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d059      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4a71      	ldr	r2, [pc, #452]	; (800db2c <I2C_ITSlaveCplt+0x284>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d053      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a6f      	ldr	r2, [pc, #444]	; (800db30 <I2C_ITSlaveCplt+0x288>)
 800d974:	4293      	cmp	r3, r2
 800d976:	d04d      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a6d      	ldr	r2, [pc, #436]	; (800db34 <I2C_ITSlaveCplt+0x28c>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d047      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	4a6b      	ldr	r2, [pc, #428]	; (800db38 <I2C_ITSlaveCplt+0x290>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d041      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a69      	ldr	r2, [pc, #420]	; (800db3c <I2C_ITSlaveCplt+0x294>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d03b      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a67      	ldr	r2, [pc, #412]	; (800db40 <I2C_ITSlaveCplt+0x298>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d035      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	4a65      	ldr	r2, [pc, #404]	; (800db44 <I2C_ITSlaveCplt+0x29c>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d02f      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4a63      	ldr	r2, [pc, #396]	; (800db48 <I2C_ITSlaveCplt+0x2a0>)
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	d029      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	4a61      	ldr	r2, [pc, #388]	; (800db4c <I2C_ITSlaveCplt+0x2a4>)
 800d9c8:	4293      	cmp	r3, r2
 800d9ca:	d023      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	4a5f      	ldr	r2, [pc, #380]	; (800db50 <I2C_ITSlaveCplt+0x2a8>)
 800d9d4:	4293      	cmp	r3, r2
 800d9d6:	d01d      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	4a5d      	ldr	r2, [pc, #372]	; (800db54 <I2C_ITSlaveCplt+0x2ac>)
 800d9e0:	4293      	cmp	r3, r2
 800d9e2:	d017      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	4a5b      	ldr	r2, [pc, #364]	; (800db58 <I2C_ITSlaveCplt+0x2b0>)
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d011      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a59      	ldr	r2, [pc, #356]	; (800db5c <I2C_ITSlaveCplt+0x2b4>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d00b      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	4a57      	ldr	r2, [pc, #348]	; (800db60 <I2C_ITSlaveCplt+0x2b8>)
 800da04:	4293      	cmp	r3, r2
 800da06:	d005      	beq.n	800da14 <I2C_ITSlaveCplt+0x16c>
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	4a55      	ldr	r2, [pc, #340]	; (800db64 <I2C_ITSlaveCplt+0x2bc>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d105      	bne.n	800da20 <I2C_ITSlaveCplt+0x178>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	e004      	b.n	800da2a <I2C_ITSlaveCplt+0x182>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	685b      	ldr	r3, [r3, #4]
 800da28:	b29b      	uxth	r3, r3
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	8553      	strh	r3, [r2, #42]	; 0x2a
 800da2e:	e0a2      	b.n	800db76 <I2C_ITSlaveCplt+0x2ce>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800da30:	693b      	ldr	r3, [r7, #16]
 800da32:	0bdb      	lsrs	r3, r3, #15
 800da34:	f003 0301 	and.w	r3, r3, #1
 800da38:	2b00      	cmp	r3, #0
 800da3a:	f000 809c 	beq.w	800db76 <I2C_ITSlaveCplt+0x2ce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	681a      	ldr	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800da4c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da52:	2b00      	cmp	r3, #0
 800da54:	f000 808f 	beq.w	800db76 <I2C_ITSlaveCplt+0x2ce>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	4a32      	ldr	r2, [pc, #200]	; (800db28 <I2C_ITSlaveCplt+0x280>)
 800da60:	4293      	cmp	r3, r2
 800da62:	d059      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	4a30      	ldr	r2, [pc, #192]	; (800db2c <I2C_ITSlaveCplt+0x284>)
 800da6c:	4293      	cmp	r3, r2
 800da6e:	d053      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a2e      	ldr	r2, [pc, #184]	; (800db30 <I2C_ITSlaveCplt+0x288>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d04d      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	4a2c      	ldr	r2, [pc, #176]	; (800db34 <I2C_ITSlaveCplt+0x28c>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d047      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4a2a      	ldr	r2, [pc, #168]	; (800db38 <I2C_ITSlaveCplt+0x290>)
 800da90:	4293      	cmp	r3, r2
 800da92:	d041      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4a28      	ldr	r2, [pc, #160]	; (800db3c <I2C_ITSlaveCplt+0x294>)
 800da9c:	4293      	cmp	r3, r2
 800da9e:	d03b      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	4a26      	ldr	r2, [pc, #152]	; (800db40 <I2C_ITSlaveCplt+0x298>)
 800daa8:	4293      	cmp	r3, r2
 800daaa:	d035      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	4a24      	ldr	r2, [pc, #144]	; (800db44 <I2C_ITSlaveCplt+0x29c>)
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d02f      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	4a22      	ldr	r2, [pc, #136]	; (800db48 <I2C_ITSlaveCplt+0x2a0>)
 800dac0:	4293      	cmp	r3, r2
 800dac2:	d029      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	4a20      	ldr	r2, [pc, #128]	; (800db4c <I2C_ITSlaveCplt+0x2a4>)
 800dacc:	4293      	cmp	r3, r2
 800dace:	d023      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a1e      	ldr	r2, [pc, #120]	; (800db50 <I2C_ITSlaveCplt+0x2a8>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d01d      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	4a1c      	ldr	r2, [pc, #112]	; (800db54 <I2C_ITSlaveCplt+0x2ac>)
 800dae4:	4293      	cmp	r3, r2
 800dae6:	d017      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	4a1a      	ldr	r2, [pc, #104]	; (800db58 <I2C_ITSlaveCplt+0x2b0>)
 800daf0:	4293      	cmp	r3, r2
 800daf2:	d011      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	4a18      	ldr	r2, [pc, #96]	; (800db5c <I2C_ITSlaveCplt+0x2b4>)
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d00b      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4a16      	ldr	r2, [pc, #88]	; (800db60 <I2C_ITSlaveCplt+0x2b8>)
 800db08:	4293      	cmp	r3, r2
 800db0a:	d005      	beq.n	800db18 <I2C_ITSlaveCplt+0x270>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a14      	ldr	r2, [pc, #80]	; (800db64 <I2C_ITSlaveCplt+0x2bc>)
 800db14:	4293      	cmp	r3, r2
 800db16:	d127      	bne.n	800db68 <I2C_ITSlaveCplt+0x2c0>
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	b29b      	uxth	r3, r3
 800db22:	e026      	b.n	800db72 <I2C_ITSlaveCplt+0x2ca>
 800db24:	fe00e800 	.word	0xfe00e800
 800db28:	40020010 	.word	0x40020010
 800db2c:	40020028 	.word	0x40020028
 800db30:	40020040 	.word	0x40020040
 800db34:	40020058 	.word	0x40020058
 800db38:	40020070 	.word	0x40020070
 800db3c:	40020088 	.word	0x40020088
 800db40:	400200a0 	.word	0x400200a0
 800db44:	400200b8 	.word	0x400200b8
 800db48:	40020410 	.word	0x40020410
 800db4c:	40020428 	.word	0x40020428
 800db50:	40020440 	.word	0x40020440
 800db54:	40020458 	.word	0x40020458
 800db58:	40020470 	.word	0x40020470
 800db5c:	40020488 	.word	0x40020488
 800db60:	400204a0 	.word	0x400204a0
 800db64:	400204b8 	.word	0x400204b8
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	b29b      	uxth	r3, r3
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	089b      	lsrs	r3, r3, #2
 800db7a:	f003 0301 	and.w	r3, r3, #1
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d020      	beq.n	800dbc4 <I2C_ITSlaveCplt+0x31c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	f023 0304 	bic.w	r3, r3, #4
 800db88:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db94:	b2d2      	uxtb	r2, r2
 800db96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db9c:	1c5a      	adds	r2, r3, #1
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00c      	beq.n	800dbc4 <I2C_ITSlaveCplt+0x31c>
    {
      hi2c->XferSize--;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	3b01      	subs	r3, #1
 800dbbe:	b29a      	uxth	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbc8:	b29b      	uxth	r3, r3
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d005      	beq.n	800dbda <I2C_ITSlaveCplt+0x332>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbd2:	f043 0204 	orr.w	r2, r3, #4
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d010      	beq.n	800dc12 <I2C_ITSlaveCplt+0x36a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 f8a4 	bl	800dd44 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	2b28      	cmp	r3, #40	; 0x28
 800dc06:	d141      	bne.n	800dc8c <I2C_ITSlaveCplt+0x3e4>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800dc08:	6979      	ldr	r1, [r7, #20]
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f844 	bl	800dc98 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800dc10:	e03c      	b.n	800dc8c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800dc1a:	d014      	beq.n	800dc46 <I2C_ITSlaveCplt+0x39e>
    I2C_ITSlaveSeqCplt(hi2c);
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f7ff fde5 	bl	800d7ec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4a1b      	ldr	r2, [pc, #108]	; (800dc94 <I2C_ITSlaveCplt+0x3ec>)
 800dc26:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2220      	movs	r2, #32
 800dc2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f7ff fc2f 	bl	800d4a2 <HAL_I2C_ListenCpltCallback>
}
 800dc44:	e022      	b.n	800dc8c <I2C_ITSlaveCplt+0x3e4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	2b22      	cmp	r3, #34	; 0x22
 800dc50:	d10e      	bne.n	800dc70 <I2C_ITSlaveCplt+0x3c8>
    hi2c->State = HAL_I2C_STATE_READY;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2220      	movs	r2, #32
 800dc56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2200      	movs	r2, #0
 800dc64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f7ff fc02 	bl	800d472 <HAL_I2C_SlaveRxCpltCallback>
}
 800dc6e:	e00d      	b.n	800dc8c <I2C_ITSlaveCplt+0x3e4>
    hi2c->State = HAL_I2C_STATE_READY;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2220      	movs	r2, #32
 800dc74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	2200      	movs	r2, #0
 800dc82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f7ff fbe9 	bl	800d45e <HAL_I2C_SlaveTxCpltCallback>
}
 800dc8c:	bf00      	nop
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	ffff0000 	.word	0xffff0000

0800dc98 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b082      	sub	sp, #8
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	4a26      	ldr	r2, [pc, #152]	; (800dd40 <I2C_ITListenCplt+0xa8>)
 800dca6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2220      	movs	r2, #32
 800dcb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	089b      	lsrs	r3, r3, #2
 800dcc8:	f003 0301 	and.w	r3, r3, #1
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d022      	beq.n	800dd16 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcda:	b2d2      	uxtb	r2, r2
 800dcdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dce2:	1c5a      	adds	r2, r3, #1
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d012      	beq.n	800dd16 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	b29a      	uxth	r2, r3
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	3b01      	subs	r3, #1
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd0e:	f043 0204 	orr.w	r2, r3, #4
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dd16:	f248 0103 	movw	r1, #32771	; 0x8003
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f000 fba0 	bl	800e460 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2210      	movs	r2, #16
 800dd26:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	f7ff fbb6 	bl	800d4a2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800dd36:	bf00      	nop
 800dd38:	3708      	adds	r7, #8
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	ffff0000 	.word	0xffff0000

0800dd44 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4a5d      	ldr	r2, [pc, #372]	; (800ded8 <I2C_ITError+0x194>)
 800dd62:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2200      	movs	r2, #0
 800dd68:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	431a      	orrs	r2, r3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
 800dd78:	2b28      	cmp	r3, #40	; 0x28
 800dd7a:	d005      	beq.n	800dd88 <I2C_ITError+0x44>
 800dd7c:	7bfb      	ldrb	r3, [r7, #15]
 800dd7e:	2b29      	cmp	r3, #41	; 0x29
 800dd80:	d002      	beq.n	800dd88 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800dd82:	7bfb      	ldrb	r3, [r7, #15]
 800dd84:	2b2a      	cmp	r3, #42	; 0x2a
 800dd86:	d10b      	bne.n	800dda0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dd88:	2103      	movs	r1, #3
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 fb68 	bl	800e460 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2228      	movs	r2, #40	; 0x28
 800dd94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4a50      	ldr	r2, [pc, #320]	; (800dedc <I2C_ITError+0x198>)
 800dd9c:	635a      	str	r2, [r3, #52]	; 0x34
 800dd9e:	e011      	b.n	800ddc4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800dda0:	f248 0103 	movw	r1, #32771	; 0x8003
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f000 fb5b 	bl	800e460 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	2b60      	cmp	r3, #96	; 0x60
 800ddb4:	d003      	beq.n	800ddbe <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2220      	movs	r2, #32
 800ddba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ddc8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d039      	beq.n	800de46 <I2C_ITError+0x102>
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	2b11      	cmp	r3, #17
 800ddd6:	d002      	beq.n	800ddde <I2C_ITError+0x9a>
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2b21      	cmp	r3, #33	; 0x21
 800dddc:	d133      	bne.n	800de46 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dde8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ddec:	d107      	bne.n	800ddfe <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ddfc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de02:	4618      	mov	r0, r3
 800de04:	f7fe fa7e 	bl	800c304 <HAL_DMA_GetState>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b01      	cmp	r3, #1
 800de0c:	d017      	beq.n	800de3e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de12:	4a33      	ldr	r2, [pc, #204]	; (800dee0 <I2C_ITError+0x19c>)
 800de14:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2200      	movs	r2, #0
 800de1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de22:	4618      	mov	r0, r3
 800de24:	f7fd f8fe 	bl	800b024 <HAL_DMA_Abort_IT>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d04d      	beq.n	800deca <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800de38:	4610      	mov	r0, r2
 800de3a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800de3c:	e045      	b.n	800deca <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 f850 	bl	800dee4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800de44:	e041      	b.n	800deca <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d039      	beq.n	800dec2 <I2C_ITError+0x17e>
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2b12      	cmp	r3, #18
 800de52:	d002      	beq.n	800de5a <I2C_ITError+0x116>
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	2b22      	cmp	r3, #34	; 0x22
 800de58:	d133      	bne.n	800dec2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de68:	d107      	bne.n	800de7a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800de78:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de7e:	4618      	mov	r0, r3
 800de80:	f7fe fa40 	bl	800c304 <HAL_DMA_GetState>
 800de84:	4603      	mov	r3, r0
 800de86:	2b01      	cmp	r3, #1
 800de88:	d017      	beq.n	800deba <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de8e:	4a14      	ldr	r2, [pc, #80]	; (800dee0 <I2C_ITError+0x19c>)
 800de90:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7fd f8c0 	bl	800b024 <HAL_DMA_Abort_IT>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d011      	beq.n	800dece <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800deb4:	4610      	mov	r0, r2
 800deb6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800deb8:	e009      	b.n	800dece <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 f812 	bl	800dee4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dec0:	e005      	b.n	800dece <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 f80e 	bl	800dee4 <I2C_TreatErrorCallback>
  }
}
 800dec8:	e002      	b.n	800ded0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800deca:	bf00      	nop
 800decc:	e000      	b.n	800ded0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800dece:	bf00      	nop
}
 800ded0:	bf00      	nop
 800ded2:	3710      	adds	r7, #16
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}
 800ded8:	ffff0000 	.word	0xffff0000
 800dedc:	0800d4df 	.word	0x0800d4df
 800dee0:	0800df7b 	.word	0x0800df7b

0800dee4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800def2:	b2db      	uxtb	r3, r3
 800def4:	2b60      	cmp	r3, #96	; 0x60
 800def6:	d10e      	bne.n	800df16 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2220      	movs	r2, #32
 800defc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2200      	movs	r2, #0
 800df04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f7ff fadb 	bl	800d4ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800df14:	e009      	b.n	800df2a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2200      	movs	r2, #0
 800df20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f7ff fac6 	bl	800d4b6 <HAL_I2C_ErrorCallback>
}
 800df2a:	bf00      	nop
 800df2c:	3708      	adds	r7, #8
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800df32:	b480      	push	{r7}
 800df34:	b083      	sub	sp, #12
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	699b      	ldr	r3, [r3, #24]
 800df40:	f003 0302 	and.w	r3, r3, #2
 800df44:	2b02      	cmp	r3, #2
 800df46:	d103      	bne.n	800df50 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2200      	movs	r2, #0
 800df4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	699b      	ldr	r3, [r3, #24]
 800df56:	f003 0301 	and.w	r3, r3, #1
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d007      	beq.n	800df6e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	699a      	ldr	r2, [r3, #24]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f042 0201 	orr.w	r2, r2, #1
 800df6c:	619a      	str	r2, [r3, #24]
  }
}
 800df6e:	bf00      	nop
 800df70:	370c      	adds	r7, #12
 800df72:	46bd      	mov	sp, r7
 800df74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df78:	4770      	bx	lr

0800df7a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b084      	sub	sp, #16
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df86:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d003      	beq.n	800df98 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df94:	2200      	movs	r2, #0
 800df96:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d003      	beq.n	800dfa8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f7ff ff9b 	bl	800dee4 <I2C_TreatErrorCallback>
}
 800dfae:	bf00      	nop
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b084      	sub	sp, #16
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	60f8      	str	r0, [r7, #12]
 800dfbe:	60b9      	str	r1, [r7, #8]
 800dfc0:	603b      	str	r3, [r7, #0]
 800dfc2:	4613      	mov	r3, r2
 800dfc4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800dfc6:	e022      	b.n	800e00e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfce:	d01e      	beq.n	800e00e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dfd0:	f7f9 faba 	bl	8007548 <HAL_GetTick>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	1ad3      	subs	r3, r2, r3
 800dfda:	683a      	ldr	r2, [r7, #0]
 800dfdc:	429a      	cmp	r2, r3
 800dfde:	d302      	bcc.n	800dfe6 <I2C_WaitOnFlagUntilTimeout+0x30>
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d113      	bne.n	800e00e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfea:	f043 0220 	orr.w	r2, r3, #32
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2220      	movs	r2, #32
 800dff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2200      	movs	r2, #0
 800dffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	2200      	movs	r2, #0
 800e006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800e00a:	2301      	movs	r3, #1
 800e00c:	e00f      	b.n	800e02e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	699a      	ldr	r2, [r3, #24]
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	4013      	ands	r3, r2
 800e018:	68ba      	ldr	r2, [r7, #8]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	bf0c      	ite	eq
 800e01e:	2301      	moveq	r3, #1
 800e020:	2300      	movne	r3, #0
 800e022:	b2db      	uxtb	r3, r3
 800e024:	461a      	mov	r2, r3
 800e026:	79fb      	ldrb	r3, [r7, #7]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d0cd      	beq.n	800dfc8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e02c:	2300      	movs	r3, #0
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3710      	adds	r7, #16
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}

0800e036 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e036:	b580      	push	{r7, lr}
 800e038:	b084      	sub	sp, #16
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	60f8      	str	r0, [r7, #12]
 800e03e:	60b9      	str	r1, [r7, #8]
 800e040:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e042:	e02c      	b.n	800e09e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e044:	687a      	ldr	r2, [r7, #4]
 800e046:	68b9      	ldr	r1, [r7, #8]
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f000 f8eb 	bl	800e224 <I2C_IsErrorOccurred>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d001      	beq.n	800e058 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e054:	2301      	movs	r3, #1
 800e056:	e02a      	b.n	800e0ae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e05e:	d01e      	beq.n	800e09e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e060:	f7f9 fa72 	bl	8007548 <HAL_GetTick>
 800e064:	4602      	mov	r2, r0
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	1ad3      	subs	r3, r2, r3
 800e06a:	68ba      	ldr	r2, [r7, #8]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d302      	bcc.n	800e076 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d113      	bne.n	800e09e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e07a:	f043 0220 	orr.w	r2, r3, #32
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2220      	movs	r2, #32
 800e086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2200      	movs	r2, #0
 800e096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e09a:	2301      	movs	r3, #1
 800e09c:	e007      	b.n	800e0ae <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	699b      	ldr	r3, [r3, #24]
 800e0a4:	f003 0302 	and.w	r3, r3, #2
 800e0a8:	2b02      	cmp	r3, #2
 800e0aa:	d1cb      	bne.n	800e044 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e0ac:	2300      	movs	r3, #0
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3710      	adds	r7, #16
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	bd80      	pop	{r7, pc}

0800e0b6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e0b6:	b580      	push	{r7, lr}
 800e0b8:	b084      	sub	sp, #16
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	60f8      	str	r0, [r7, #12]
 800e0be:	60b9      	str	r1, [r7, #8]
 800e0c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e0c2:	e028      	b.n	800e116 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	68b9      	ldr	r1, [r7, #8]
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f000 f8ab 	bl	800e224 <I2C_IsErrorOccurred>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d001      	beq.n	800e0d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e026      	b.n	800e126 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0d8:	f7f9 fa36 	bl	8007548 <HAL_GetTick>
 800e0dc:	4602      	mov	r2, r0
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	68ba      	ldr	r2, [r7, #8]
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	d302      	bcc.n	800e0ee <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e0e8:	68bb      	ldr	r3, [r7, #8]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d113      	bne.n	800e116 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0f2:	f043 0220 	orr.w	r2, r3, #32
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	2220      	movs	r2, #32
 800e0fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2200      	movs	r2, #0
 800e106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e007      	b.n	800e126 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	699b      	ldr	r3, [r3, #24]
 800e11c:	f003 0320 	and.w	r3, r3, #32
 800e120:	2b20      	cmp	r3, #32
 800e122:	d1cf      	bne.n	800e0c4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}
	...

0800e130 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	60f8      	str	r0, [r7, #12]
 800e138:	60b9      	str	r1, [r7, #8]
 800e13a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e13c:	e064      	b.n	800e208 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	68b9      	ldr	r1, [r7, #8]
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f000 f86e 	bl	800e224 <I2C_IsErrorOccurred>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d001      	beq.n	800e152 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e14e:	2301      	movs	r3, #1
 800e150:	e062      	b.n	800e218 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	699b      	ldr	r3, [r3, #24]
 800e158:	f003 0320 	and.w	r3, r3, #32
 800e15c:	2b20      	cmp	r3, #32
 800e15e:	d138      	bne.n	800e1d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	699b      	ldr	r3, [r3, #24]
 800e166:	f003 0304 	and.w	r3, r3, #4
 800e16a:	2b04      	cmp	r3, #4
 800e16c:	d105      	bne.n	800e17a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e172:	2b00      	cmp	r3, #0
 800e174:	d001      	beq.n	800e17a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800e176:	2300      	movs	r3, #0
 800e178:	e04e      	b.n	800e218 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	699b      	ldr	r3, [r3, #24]
 800e180:	f003 0310 	and.w	r3, r3, #16
 800e184:	2b10      	cmp	r3, #16
 800e186:	d107      	bne.n	800e198 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	2210      	movs	r2, #16
 800e18e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2204      	movs	r2, #4
 800e194:	645a      	str	r2, [r3, #68]	; 0x44
 800e196:	e002      	b.n	800e19e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2200      	movs	r2, #0
 800e19c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2220      	movs	r2, #32
 800e1a4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	6859      	ldr	r1, [r3, #4]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	4b1b      	ldr	r3, [pc, #108]	; (800e220 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800e1b2:	400b      	ands	r3, r1
 800e1b4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2220      	movs	r2, #32
 800e1ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e022      	b.n	800e218 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1d2:	f7f9 f9b9 	bl	8007548 <HAL_GetTick>
 800e1d6:	4602      	mov	r2, r0
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	1ad3      	subs	r3, r2, r3
 800e1dc:	68ba      	ldr	r2, [r7, #8]
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d302      	bcc.n	800e1e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d10f      	bne.n	800e208 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ec:	f043 0220 	orr.w	r2, r3, #32
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2220      	movs	r2, #32
 800e1f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2200      	movs	r2, #0
 800e200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800e204:	2301      	movs	r3, #1
 800e206:	e007      	b.n	800e218 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	699b      	ldr	r3, [r3, #24]
 800e20e:	f003 0304 	and.w	r3, r3, #4
 800e212:	2b04      	cmp	r3, #4
 800e214:	d193      	bne.n	800e13e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800e216:	2300      	movs	r3, #0
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}
 800e220:	fe00e800 	.word	0xfe00e800

0800e224 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b08a      	sub	sp, #40	; 0x28
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	699b      	ldr	r3, [r3, #24]
 800e23c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e23e:	2300      	movs	r3, #0
 800e240:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e246:	69bb      	ldr	r3, [r7, #24]
 800e248:	f003 0310 	and.w	r3, r3, #16
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d075      	beq.n	800e33c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	2210      	movs	r2, #16
 800e256:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e258:	e056      	b.n	800e308 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e260:	d052      	beq.n	800e308 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e262:	f7f9 f971 	bl	8007548 <HAL_GetTick>
 800e266:	4602      	mov	r2, r0
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	1ad3      	subs	r3, r2, r3
 800e26c:	68ba      	ldr	r2, [r7, #8]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d302      	bcc.n	800e278 <I2C_IsErrorOccurred+0x54>
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d147      	bne.n	800e308 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e282:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e28a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	699b      	ldr	r3, [r3, #24]
 800e292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e29a:	d12e      	bne.n	800e2fa <I2C_IsErrorOccurred+0xd6>
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e2a2:	d02a      	beq.n	800e2fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800e2a4:	7cfb      	ldrb	r3, [r7, #19]
 800e2a6:	2b20      	cmp	r3, #32
 800e2a8:	d027      	beq.n	800e2fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	685a      	ldr	r2, [r3, #4]
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e2b8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e2ba:	f7f9 f945 	bl	8007548 <HAL_GetTick>
 800e2be:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e2c0:	e01b      	b.n	800e2fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e2c2:	f7f9 f941 	bl	8007548 <HAL_GetTick>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	1ad3      	subs	r3, r2, r3
 800e2cc:	2b19      	cmp	r3, #25
 800e2ce:	d914      	bls.n	800e2fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2d4:	f043 0220 	orr.w	r2, r3, #32
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2220      	movs	r2, #32
 800e2e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	699b      	ldr	r3, [r3, #24]
 800e300:	f003 0320 	and.w	r3, r3, #32
 800e304:	2b20      	cmp	r3, #32
 800e306:	d1dc      	bne.n	800e2c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	699b      	ldr	r3, [r3, #24]
 800e30e:	f003 0320 	and.w	r3, r3, #32
 800e312:	2b20      	cmp	r3, #32
 800e314:	d003      	beq.n	800e31e <I2C_IsErrorOccurred+0xfa>
 800e316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d09d      	beq.n	800e25a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e31e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e322:	2b00      	cmp	r3, #0
 800e324:	d103      	bne.n	800e32e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2220      	movs	r2, #32
 800e32c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e32e:	6a3b      	ldr	r3, [r7, #32]
 800e330:	f043 0304 	orr.w	r3, r3, #4
 800e334:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e336:	2301      	movs	r3, #1
 800e338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	699b      	ldr	r3, [r3, #24]
 800e342:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00b      	beq.n	800e366 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e34e:	6a3b      	ldr	r3, [r7, #32]
 800e350:	f043 0301 	orr.w	r3, r3, #1
 800e354:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e35e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e360:	2301      	movs	r3, #1
 800e362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e366:	69bb      	ldr	r3, [r7, #24]
 800e368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d00b      	beq.n	800e388 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e370:	6a3b      	ldr	r3, [r7, #32]
 800e372:	f043 0308 	orr.w	r3, r3, #8
 800e376:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e380:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e382:	2301      	movs	r3, #1
 800e384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e388:	69bb      	ldr	r3, [r7, #24]
 800e38a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d00b      	beq.n	800e3aa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e392:	6a3b      	ldr	r3, [r7, #32]
 800e394:	f043 0302 	orr.w	r3, r3, #2
 800e398:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800e3aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d01c      	beq.n	800e3ec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f7ff fdbd 	bl	800df32 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	6859      	ldr	r1, [r3, #4]
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681a      	ldr	r2, [r3, #0]
 800e3c2:	4b0d      	ldr	r3, [pc, #52]	; (800e3f8 <I2C_IsErrorOccurred+0x1d4>)
 800e3c4:	400b      	ands	r3, r1
 800e3c6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3cc:	6a3b      	ldr	r3, [r7, #32]
 800e3ce:	431a      	orrs	r2, r3
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2220      	movs	r2, #32
 800e3d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800e3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3728      	adds	r7, #40	; 0x28
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	fe00e800 	.word	0xfe00e800

0800e3fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e3fc:	b480      	push	{r7}
 800e3fe:	b087      	sub	sp, #28
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	607b      	str	r3, [r7, #4]
 800e406:	460b      	mov	r3, r1
 800e408:	817b      	strh	r3, [r7, #10]
 800e40a:	4613      	mov	r3, r2
 800e40c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e40e:	897b      	ldrh	r3, [r7, #10]
 800e410:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e414:	7a7b      	ldrb	r3, [r7, #9]
 800e416:	041b      	lsls	r3, r3, #16
 800e418:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e41c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e422:	6a3b      	ldr	r3, [r7, #32]
 800e424:	4313      	orrs	r3, r2
 800e426:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e42a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	685a      	ldr	r2, [r3, #4]
 800e432:	6a3b      	ldr	r3, [r7, #32]
 800e434:	0d5b      	lsrs	r3, r3, #21
 800e436:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e43a:	4b08      	ldr	r3, [pc, #32]	; (800e45c <I2C_TransferConfig+0x60>)
 800e43c:	430b      	orrs	r3, r1
 800e43e:	43db      	mvns	r3, r3
 800e440:	ea02 0103 	and.w	r1, r2, r3
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	697a      	ldr	r2, [r7, #20]
 800e44a:	430a      	orrs	r2, r1
 800e44c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e44e:	bf00      	nop
 800e450:	371c      	adds	r7, #28
 800e452:	46bd      	mov	sp, r7
 800e454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e458:	4770      	bx	lr
 800e45a:	bf00      	nop
 800e45c:	03ff63ff 	.word	0x03ff63ff

0800e460 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800e460:	b480      	push	{r7}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	460b      	mov	r3, r1
 800e46a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800e46c:	2300      	movs	r3, #0
 800e46e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800e470:	887b      	ldrh	r3, [r7, #2]
 800e472:	f003 0301 	and.w	r3, r3, #1
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00f      	beq.n	800e49a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800e480:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e48e:	2b28      	cmp	r3, #40	; 0x28
 800e490:	d003      	beq.n	800e49a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800e498:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800e49a:	887b      	ldrh	r3, [r7, #2]
 800e49c:	f003 0302 	and.w	r3, r3, #2
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d00f      	beq.n	800e4c4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800e4aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800e4b8:	2b28      	cmp	r3, #40	; 0x28
 800e4ba:	d003      	beq.n	800e4c4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800e4c2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800e4c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	da03      	bge.n	800e4d4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800e4d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800e4d4:	887b      	ldrh	r3, [r7, #2]
 800e4d6:	2b10      	cmp	r3, #16
 800e4d8:	d103      	bne.n	800e4e2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800e4e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800e4e2:	887b      	ldrh	r3, [r7, #2]
 800e4e4:	2b20      	cmp	r3, #32
 800e4e6:	d103      	bne.n	800e4f0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f043 0320 	orr.w	r3, r3, #32
 800e4ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800e4f0:	887b      	ldrh	r3, [r7, #2]
 800e4f2:	2b40      	cmp	r3, #64	; 0x40
 800e4f4:	d103      	bne.n	800e4fe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4fc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	6819      	ldr	r1, [r3, #0]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	43da      	mvns	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	400a      	ands	r2, r1
 800e50e:	601a      	str	r2, [r3, #0]
}
 800e510:	bf00      	nop
 800e512:	3714      	adds	r7, #20
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b20      	cmp	r3, #32
 800e530:	d138      	bne.n	800e5a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d101      	bne.n	800e540 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e53c:	2302      	movs	r3, #2
 800e53e:	e032      	b.n	800e5a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2201      	movs	r2, #1
 800e544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2224      	movs	r2, #36	; 0x24
 800e54c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	f022 0201 	bic.w	r2, r2, #1
 800e55e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e56e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	6819      	ldr	r1, [r3, #0]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	683a      	ldr	r2, [r7, #0]
 800e57c:	430a      	orrs	r2, r1
 800e57e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	681a      	ldr	r2, [r3, #0]
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f042 0201 	orr.w	r2, r2, #1
 800e58e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2220      	movs	r2, #32
 800e594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2200      	movs	r2, #0
 800e59c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	e000      	b.n	800e5a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e5a4:	2302      	movs	r3, #2
  }
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	370c      	adds	r7, #12
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr

0800e5b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e5b2:	b480      	push	{r7}
 800e5b4:	b085      	sub	sp, #20
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
 800e5ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	2b20      	cmp	r3, #32
 800e5c6:	d139      	bne.n	800e63c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d101      	bne.n	800e5d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e5d2:	2302      	movs	r3, #2
 800e5d4:	e033      	b.n	800e63e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2201      	movs	r2, #1
 800e5da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2224      	movs	r2, #36	; 0x24
 800e5e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f022 0201 	bic.w	r2, r2, #1
 800e5f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e604:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	021b      	lsls	r3, r3, #8
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	4313      	orrs	r3, r2
 800e60e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	f042 0201 	orr.w	r2, r2, #1
 800e626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2220      	movs	r2, #32
 800e62c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e638:	2300      	movs	r3, #0
 800e63a:	e000      	b.n	800e63e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e63c:	2302      	movs	r3, #2
  }
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3714      	adds	r7, #20
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr
	...

0800e64c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800e654:	4b19      	ldr	r3, [pc, #100]	; (800e6bc <HAL_PWREx_ConfigSupply+0x70>)
 800e656:	68db      	ldr	r3, [r3, #12]
 800e658:	f003 0304 	and.w	r3, r3, #4
 800e65c:	2b04      	cmp	r3, #4
 800e65e:	d00a      	beq.n	800e676 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800e660:	4b16      	ldr	r3, [pc, #88]	; (800e6bc <HAL_PWREx_ConfigSupply+0x70>)
 800e662:	68db      	ldr	r3, [r3, #12]
 800e664:	f003 0307 	and.w	r3, r3, #7
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d001      	beq.n	800e672 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800e66e:	2301      	movs	r3, #1
 800e670:	e01f      	b.n	800e6b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800e672:	2300      	movs	r3, #0
 800e674:	e01d      	b.n	800e6b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800e676:	4b11      	ldr	r3, [pc, #68]	; (800e6bc <HAL_PWREx_ConfigSupply+0x70>)
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	f023 0207 	bic.w	r2, r3, #7
 800e67e:	490f      	ldr	r1, [pc, #60]	; (800e6bc <HAL_PWREx_ConfigSupply+0x70>)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	4313      	orrs	r3, r2
 800e684:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800e686:	f7f8 ff5f 	bl	8007548 <HAL_GetTick>
 800e68a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e68c:	e009      	b.n	800e6a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800e68e:	f7f8 ff5b 	bl	8007548 <HAL_GetTick>
 800e692:	4602      	mov	r2, r0
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	1ad3      	subs	r3, r2, r3
 800e698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e69c:	d901      	bls.n	800e6a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800e69e:	2301      	movs	r3, #1
 800e6a0:	e007      	b.n	800e6b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800e6a2:	4b06      	ldr	r3, [pc, #24]	; (800e6bc <HAL_PWREx_ConfigSupply+0x70>)
 800e6a4:	685b      	ldr	r3, [r3, #4]
 800e6a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e6aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e6ae:	d1ee      	bne.n	800e68e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800e6b0:	2300      	movs	r3, #0
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3710      	adds	r7, #16
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	58024800 	.word	0x58024800

0800e6c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b08c      	sub	sp, #48	; 0x30
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d101      	bne.n	800e6d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	e39d      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f003 0301 	and.w	r3, r3, #1
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f000 8087 	beq.w	800e7ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e6e0:	4b88      	ldr	r3, [pc, #544]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e6e2:	691b      	ldr	r3, [r3, #16]
 800e6e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e6ea:	4b86      	ldr	r3, [pc, #536]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	2b10      	cmp	r3, #16
 800e6f4:	d007      	beq.n	800e706 <HAL_RCC_OscConfig+0x46>
 800e6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f8:	2b18      	cmp	r3, #24
 800e6fa:	d110      	bne.n	800e71e <HAL_RCC_OscConfig+0x5e>
 800e6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6fe:	f003 0303 	and.w	r3, r3, #3
 800e702:	2b02      	cmp	r3, #2
 800e704:	d10b      	bne.n	800e71e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e706:	4b7f      	ldr	r3, [pc, #508]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d06c      	beq.n	800e7ec <HAL_RCC_OscConfig+0x12c>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	685b      	ldr	r3, [r3, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d168      	bne.n	800e7ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800e71a:	2301      	movs	r3, #1
 800e71c:	e377      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e726:	d106      	bne.n	800e736 <HAL_RCC_OscConfig+0x76>
 800e728:	4b76      	ldr	r3, [pc, #472]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4a75      	ldr	r2, [pc, #468]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e72e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e732:	6013      	str	r3, [r2, #0]
 800e734:	e02e      	b.n	800e794 <HAL_RCC_OscConfig+0xd4>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d10c      	bne.n	800e758 <HAL_RCC_OscConfig+0x98>
 800e73e:	4b71      	ldr	r3, [pc, #452]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	4a70      	ldr	r2, [pc, #448]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e748:	6013      	str	r3, [r2, #0]
 800e74a:	4b6e      	ldr	r3, [pc, #440]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	4a6d      	ldr	r2, [pc, #436]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e754:	6013      	str	r3, [r2, #0]
 800e756:	e01d      	b.n	800e794 <HAL_RCC_OscConfig+0xd4>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e760:	d10c      	bne.n	800e77c <HAL_RCC_OscConfig+0xbc>
 800e762:	4b68      	ldr	r3, [pc, #416]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	4a67      	ldr	r2, [pc, #412]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e76c:	6013      	str	r3, [r2, #0]
 800e76e:	4b65      	ldr	r3, [pc, #404]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	4a64      	ldr	r2, [pc, #400]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e778:	6013      	str	r3, [r2, #0]
 800e77a:	e00b      	b.n	800e794 <HAL_RCC_OscConfig+0xd4>
 800e77c:	4b61      	ldr	r3, [pc, #388]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a60      	ldr	r2, [pc, #384]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e786:	6013      	str	r3, [r2, #0]
 800e788:	4b5e      	ldr	r3, [pc, #376]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	4a5d      	ldr	r2, [pc, #372]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e78e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e792:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	685b      	ldr	r3, [r3, #4]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d013      	beq.n	800e7c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e79c:	f7f8 fed4 	bl	8007548 <HAL_GetTick>
 800e7a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e7a2:	e008      	b.n	800e7b6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e7a4:	f7f8 fed0 	bl	8007548 <HAL_GetTick>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ac:	1ad3      	subs	r3, r2, r3
 800e7ae:	2b64      	cmp	r3, #100	; 0x64
 800e7b0:	d901      	bls.n	800e7b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800e7b2:	2303      	movs	r3, #3
 800e7b4:	e32b      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e7b6:	4b53      	ldr	r3, [pc, #332]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d0f0      	beq.n	800e7a4 <HAL_RCC_OscConfig+0xe4>
 800e7c2:	e014      	b.n	800e7ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e7c4:	f7f8 fec0 	bl	8007548 <HAL_GetTick>
 800e7c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e7ca:	e008      	b.n	800e7de <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e7cc:	f7f8 febc 	bl	8007548 <HAL_GetTick>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7d4:	1ad3      	subs	r3, r2, r3
 800e7d6:	2b64      	cmp	r3, #100	; 0x64
 800e7d8:	d901      	bls.n	800e7de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800e7da:	2303      	movs	r3, #3
 800e7dc:	e317      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e7de:	4b49      	ldr	r3, [pc, #292]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1f0      	bne.n	800e7cc <HAL_RCC_OscConfig+0x10c>
 800e7ea:	e000      	b.n	800e7ee <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e7ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f003 0302 	and.w	r3, r3, #2
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	f000 808c 	beq.w	800e914 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e7fc:	4b41      	ldr	r3, [pc, #260]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e7fe:	691b      	ldr	r3, [r3, #16]
 800e800:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e804:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e806:	4b3f      	ldr	r3, [pc, #252]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e80a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800e80c:	6a3b      	ldr	r3, [r7, #32]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d007      	beq.n	800e822 <HAL_RCC_OscConfig+0x162>
 800e812:	6a3b      	ldr	r3, [r7, #32]
 800e814:	2b18      	cmp	r3, #24
 800e816:	d137      	bne.n	800e888 <HAL_RCC_OscConfig+0x1c8>
 800e818:	69fb      	ldr	r3, [r7, #28]
 800e81a:	f003 0303 	and.w	r3, r3, #3
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d132      	bne.n	800e888 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e822:	4b38      	ldr	r3, [pc, #224]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f003 0304 	and.w	r3, r3, #4
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d005      	beq.n	800e83a <HAL_RCC_OscConfig+0x17a>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d101      	bne.n	800e83a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800e836:	2301      	movs	r3, #1
 800e838:	e2e9      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e83a:	4b32      	ldr	r3, [pc, #200]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	f023 0219 	bic.w	r2, r3, #25
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	492f      	ldr	r1, [pc, #188]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e848:	4313      	orrs	r3, r2
 800e84a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e84c:	f7f8 fe7c 	bl	8007548 <HAL_GetTick>
 800e850:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e852:	e008      	b.n	800e866 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e854:	f7f8 fe78 	bl	8007548 <HAL_GetTick>
 800e858:	4602      	mov	r2, r0
 800e85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85c:	1ad3      	subs	r3, r2, r3
 800e85e:	2b02      	cmp	r3, #2
 800e860:	d901      	bls.n	800e866 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800e862:	2303      	movs	r3, #3
 800e864:	e2d3      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e866:	4b27      	ldr	r3, [pc, #156]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f003 0304 	and.w	r3, r3, #4
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d0f0      	beq.n	800e854 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e872:	4b24      	ldr	r3, [pc, #144]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	691b      	ldr	r3, [r3, #16]
 800e87e:	061b      	lsls	r3, r3, #24
 800e880:	4920      	ldr	r1, [pc, #128]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e882:	4313      	orrs	r3, r2
 800e884:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800e886:	e045      	b.n	800e914 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d026      	beq.n	800e8de <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800e890:	4b1c      	ldr	r3, [pc, #112]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f023 0219 	bic.w	r2, r3, #25
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	68db      	ldr	r3, [r3, #12]
 800e89c:	4919      	ldr	r1, [pc, #100]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8a2:	f7f8 fe51 	bl	8007548 <HAL_GetTick>
 800e8a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e8a8:	e008      	b.n	800e8bc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e8aa:	f7f8 fe4d 	bl	8007548 <HAL_GetTick>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	1ad3      	subs	r3, r2, r3
 800e8b4:	2b02      	cmp	r3, #2
 800e8b6:	d901      	bls.n	800e8bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800e8b8:	2303      	movs	r3, #3
 800e8ba:	e2a8      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e8bc:	4b11      	ldr	r3, [pc, #68]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f003 0304 	and.w	r3, r3, #4
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d0f0      	beq.n	800e8aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e8c8:	4b0e      	ldr	r3, [pc, #56]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	691b      	ldr	r3, [r3, #16]
 800e8d4:	061b      	lsls	r3, r3, #24
 800e8d6:	490b      	ldr	r1, [pc, #44]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e8d8:	4313      	orrs	r3, r2
 800e8da:	604b      	str	r3, [r1, #4]
 800e8dc:	e01a      	b.n	800e914 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e8de:	4b09      	ldr	r3, [pc, #36]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4a08      	ldr	r2, [pc, #32]	; (800e904 <HAL_RCC_OscConfig+0x244>)
 800e8e4:	f023 0301 	bic.w	r3, r3, #1
 800e8e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e8ea:	f7f8 fe2d 	bl	8007548 <HAL_GetTick>
 800e8ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e8f0:	e00a      	b.n	800e908 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e8f2:	f7f8 fe29 	bl	8007548 <HAL_GetTick>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fa:	1ad3      	subs	r3, r2, r3
 800e8fc:	2b02      	cmp	r3, #2
 800e8fe:	d903      	bls.n	800e908 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800e900:	2303      	movs	r3, #3
 800e902:	e284      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
 800e904:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e908:	4b96      	ldr	r3, [pc, #600]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f003 0304 	and.w	r3, r3, #4
 800e910:	2b00      	cmp	r3, #0
 800e912:	d1ee      	bne.n	800e8f2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f003 0310 	and.w	r3, r3, #16
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d06a      	beq.n	800e9f6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e920:	4b90      	ldr	r3, [pc, #576]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e922:	691b      	ldr	r3, [r3, #16]
 800e924:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e928:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800e92a:	4b8e      	ldr	r3, [pc, #568]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e92e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800e930:	69bb      	ldr	r3, [r7, #24]
 800e932:	2b08      	cmp	r3, #8
 800e934:	d007      	beq.n	800e946 <HAL_RCC_OscConfig+0x286>
 800e936:	69bb      	ldr	r3, [r7, #24]
 800e938:	2b18      	cmp	r3, #24
 800e93a:	d11b      	bne.n	800e974 <HAL_RCC_OscConfig+0x2b4>
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	f003 0303 	and.w	r3, r3, #3
 800e942:	2b01      	cmp	r3, #1
 800e944:	d116      	bne.n	800e974 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e946:	4b87      	ldr	r3, [pc, #540]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d005      	beq.n	800e95e <HAL_RCC_OscConfig+0x29e>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	69db      	ldr	r3, [r3, #28]
 800e956:	2b80      	cmp	r3, #128	; 0x80
 800e958:	d001      	beq.n	800e95e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800e95a:	2301      	movs	r3, #1
 800e95c:	e257      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e95e:	4b81      	ldr	r3, [pc, #516]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6a1b      	ldr	r3, [r3, #32]
 800e96a:	061b      	lsls	r3, r3, #24
 800e96c:	497d      	ldr	r1, [pc, #500]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e96e:	4313      	orrs	r3, r2
 800e970:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800e972:	e040      	b.n	800e9f6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	69db      	ldr	r3, [r3, #28]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d023      	beq.n	800e9c4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800e97c:	4b79      	ldr	r3, [pc, #484]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a78      	ldr	r2, [pc, #480]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e988:	f7f8 fdde 	bl	8007548 <HAL_GetTick>
 800e98c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e98e:	e008      	b.n	800e9a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e990:	f7f8 fdda 	bl	8007548 <HAL_GetTick>
 800e994:	4602      	mov	r2, r0
 800e996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e998:	1ad3      	subs	r3, r2, r3
 800e99a:	2b02      	cmp	r3, #2
 800e99c:	d901      	bls.n	800e9a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800e99e:	2303      	movs	r3, #3
 800e9a0:	e235      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800e9a2:	4b70      	ldr	r3, [pc, #448]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d0f0      	beq.n	800e990 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800e9ae:	4b6d      	ldr	r3, [pc, #436]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e9b0:	68db      	ldr	r3, [r3, #12]
 800e9b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6a1b      	ldr	r3, [r3, #32]
 800e9ba:	061b      	lsls	r3, r3, #24
 800e9bc:	4969      	ldr	r1, [pc, #420]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	60cb      	str	r3, [r1, #12]
 800e9c2:	e018      	b.n	800e9f6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800e9c4:	4b67      	ldr	r3, [pc, #412]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	4a66      	ldr	r2, [pc, #408]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e9ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e9d0:	f7f8 fdba 	bl	8007548 <HAL_GetTick>
 800e9d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e9d6:	e008      	b.n	800e9ea <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800e9d8:	f7f8 fdb6 	bl	8007548 <HAL_GetTick>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	2b02      	cmp	r3, #2
 800e9e4:	d901      	bls.n	800e9ea <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	e211      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800e9ea:	4b5e      	ldr	r3, [pc, #376]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1f0      	bne.n	800e9d8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f003 0308 	and.w	r3, r3, #8
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d036      	beq.n	800ea70 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	695b      	ldr	r3, [r3, #20]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d019      	beq.n	800ea3e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ea0a:	4b56      	ldr	r3, [pc, #344]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800ea0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea0e:	4a55      	ldr	r2, [pc, #340]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800ea10:	f043 0301 	orr.w	r3, r3, #1
 800ea14:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea16:	f7f8 fd97 	bl	8007548 <HAL_GetTick>
 800ea1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ea1c:	e008      	b.n	800ea30 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ea1e:	f7f8 fd93 	bl	8007548 <HAL_GetTick>
 800ea22:	4602      	mov	r2, r0
 800ea24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea26:	1ad3      	subs	r3, r2, r3
 800ea28:	2b02      	cmp	r3, #2
 800ea2a:	d901      	bls.n	800ea30 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ea2c:	2303      	movs	r3, #3
 800ea2e:	e1ee      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ea30:	4b4c      	ldr	r3, [pc, #304]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800ea32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea34:	f003 0302 	and.w	r3, r3, #2
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d0f0      	beq.n	800ea1e <HAL_RCC_OscConfig+0x35e>
 800ea3c:	e018      	b.n	800ea70 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ea3e:	4b49      	ldr	r3, [pc, #292]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800ea40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea42:	4a48      	ldr	r2, [pc, #288]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800ea44:	f023 0301 	bic.w	r3, r3, #1
 800ea48:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ea4a:	f7f8 fd7d 	bl	8007548 <HAL_GetTick>
 800ea4e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ea50:	e008      	b.n	800ea64 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ea52:	f7f8 fd79 	bl	8007548 <HAL_GetTick>
 800ea56:	4602      	mov	r2, r0
 800ea58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	d901      	bls.n	800ea64 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800ea60:	2303      	movs	r3, #3
 800ea62:	e1d4      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800ea64:	4b3f      	ldr	r3, [pc, #252]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800ea66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea68:	f003 0302 	and.w	r3, r3, #2
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d1f0      	bne.n	800ea52 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f003 0320 	and.w	r3, r3, #32
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d036      	beq.n	800eaea <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	699b      	ldr	r3, [r3, #24]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d019      	beq.n	800eab8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ea84:	4b37      	ldr	r3, [pc, #220]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	4a36      	ldr	r2, [pc, #216]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800ea8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ea8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ea90:	f7f8 fd5a 	bl	8007548 <HAL_GetTick>
 800ea94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ea96:	e008      	b.n	800eaaa <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800ea98:	f7f8 fd56 	bl	8007548 <HAL_GetTick>
 800ea9c:	4602      	mov	r2, r0
 800ea9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa0:	1ad3      	subs	r3, r2, r3
 800eaa2:	2b02      	cmp	r3, #2
 800eaa4:	d901      	bls.n	800eaaa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800eaa6:	2303      	movs	r3, #3
 800eaa8:	e1b1      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800eaaa:	4b2e      	ldr	r3, [pc, #184]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d0f0      	beq.n	800ea98 <HAL_RCC_OscConfig+0x3d8>
 800eab6:	e018      	b.n	800eaea <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800eab8:	4b2a      	ldr	r3, [pc, #168]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4a29      	ldr	r2, [pc, #164]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800eabe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eac2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800eac4:	f7f8 fd40 	bl	8007548 <HAL_GetTick>
 800eac8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800eaca:	e008      	b.n	800eade <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800eacc:	f7f8 fd3c 	bl	8007548 <HAL_GetTick>
 800ead0:	4602      	mov	r2, r0
 800ead2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead4:	1ad3      	subs	r3, r2, r3
 800ead6:	2b02      	cmp	r3, #2
 800ead8:	d901      	bls.n	800eade <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800eada:	2303      	movs	r3, #3
 800eadc:	e197      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800eade:	4b21      	ldr	r3, [pc, #132]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d1f0      	bne.n	800eacc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f003 0304 	and.w	r3, r3, #4
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f000 8086 	beq.w	800ec04 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800eaf8:	4b1b      	ldr	r3, [pc, #108]	; (800eb68 <HAL_RCC_OscConfig+0x4a8>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4a1a      	ldr	r2, [pc, #104]	; (800eb68 <HAL_RCC_OscConfig+0x4a8>)
 800eafe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eb02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800eb04:	f7f8 fd20 	bl	8007548 <HAL_GetTick>
 800eb08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eb0a:	e008      	b.n	800eb1e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800eb0c:	f7f8 fd1c 	bl	8007548 <HAL_GetTick>
 800eb10:	4602      	mov	r2, r0
 800eb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb14:	1ad3      	subs	r3, r2, r3
 800eb16:	2b64      	cmp	r3, #100	; 0x64
 800eb18:	d901      	bls.n	800eb1e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800eb1a:	2303      	movs	r3, #3
 800eb1c:	e177      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800eb1e:	4b12      	ldr	r3, [pc, #72]	; (800eb68 <HAL_RCC_OscConfig+0x4a8>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d0f0      	beq.n	800eb0c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d106      	bne.n	800eb40 <HAL_RCC_OscConfig+0x480>
 800eb32:	4b0c      	ldr	r3, [pc, #48]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800eb34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb36:	4a0b      	ldr	r2, [pc, #44]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800eb38:	f043 0301 	orr.w	r3, r3, #1
 800eb3c:	6713      	str	r3, [r2, #112]	; 0x70
 800eb3e:	e032      	b.n	800eba6 <HAL_RCC_OscConfig+0x4e6>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d111      	bne.n	800eb6c <HAL_RCC_OscConfig+0x4ac>
 800eb48:	4b06      	ldr	r3, [pc, #24]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800eb4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb4c:	4a05      	ldr	r2, [pc, #20]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800eb4e:	f023 0301 	bic.w	r3, r3, #1
 800eb52:	6713      	str	r3, [r2, #112]	; 0x70
 800eb54:	4b03      	ldr	r3, [pc, #12]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800eb56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb58:	4a02      	ldr	r2, [pc, #8]	; (800eb64 <HAL_RCC_OscConfig+0x4a4>)
 800eb5a:	f023 0304 	bic.w	r3, r3, #4
 800eb5e:	6713      	str	r3, [r2, #112]	; 0x70
 800eb60:	e021      	b.n	800eba6 <HAL_RCC_OscConfig+0x4e6>
 800eb62:	bf00      	nop
 800eb64:	58024400 	.word	0x58024400
 800eb68:	58024800 	.word	0x58024800
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	689b      	ldr	r3, [r3, #8]
 800eb70:	2b05      	cmp	r3, #5
 800eb72:	d10c      	bne.n	800eb8e <HAL_RCC_OscConfig+0x4ce>
 800eb74:	4b83      	ldr	r3, [pc, #524]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800eb76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb78:	4a82      	ldr	r2, [pc, #520]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800eb7a:	f043 0304 	orr.w	r3, r3, #4
 800eb7e:	6713      	str	r3, [r2, #112]	; 0x70
 800eb80:	4b80      	ldr	r3, [pc, #512]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800eb82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb84:	4a7f      	ldr	r2, [pc, #508]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800eb86:	f043 0301 	orr.w	r3, r3, #1
 800eb8a:	6713      	str	r3, [r2, #112]	; 0x70
 800eb8c:	e00b      	b.n	800eba6 <HAL_RCC_OscConfig+0x4e6>
 800eb8e:	4b7d      	ldr	r3, [pc, #500]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800eb90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb92:	4a7c      	ldr	r2, [pc, #496]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800eb94:	f023 0301 	bic.w	r3, r3, #1
 800eb98:	6713      	str	r3, [r2, #112]	; 0x70
 800eb9a:	4b7a      	ldr	r3, [pc, #488]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800eb9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb9e:	4a79      	ldr	r2, [pc, #484]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800eba0:	f023 0304 	bic.w	r3, r3, #4
 800eba4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d015      	beq.n	800ebda <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebae:	f7f8 fccb 	bl	8007548 <HAL_GetTick>
 800ebb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ebb4:	e00a      	b.n	800ebcc <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ebb6:	f7f8 fcc7 	bl	8007548 <HAL_GetTick>
 800ebba:	4602      	mov	r2, r0
 800ebbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebbe:	1ad3      	subs	r3, r2, r3
 800ebc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebc4:	4293      	cmp	r3, r2
 800ebc6:	d901      	bls.n	800ebcc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800ebc8:	2303      	movs	r3, #3
 800ebca:	e120      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ebcc:	4b6d      	ldr	r3, [pc, #436]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ebce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebd0:	f003 0302 	and.w	r3, r3, #2
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d0ee      	beq.n	800ebb6 <HAL_RCC_OscConfig+0x4f6>
 800ebd8:	e014      	b.n	800ec04 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ebda:	f7f8 fcb5 	bl	8007548 <HAL_GetTick>
 800ebde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ebe0:	e00a      	b.n	800ebf8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ebe2:	f7f8 fcb1 	bl	8007548 <HAL_GetTick>
 800ebe6:	4602      	mov	r2, r0
 800ebe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebea:	1ad3      	subs	r3, r2, r3
 800ebec:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	d901      	bls.n	800ebf8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ebf4:	2303      	movs	r3, #3
 800ebf6:	e10a      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ebf8:	4b62      	ldr	r3, [pc, #392]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ebfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ebfc:	f003 0302 	and.w	r3, r3, #2
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d1ee      	bne.n	800ebe2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	f000 80ff 	beq.w	800ee0c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ec0e:	4b5d      	ldr	r3, [pc, #372]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ec10:	691b      	ldr	r3, [r3, #16]
 800ec12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec16:	2b18      	cmp	r3, #24
 800ec18:	f000 80ba 	beq.w	800ed90 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	f040 8095 	bne.w	800ed50 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ec26:	4b57      	ldr	r3, [pc, #348]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a56      	ldr	r2, [pc, #344]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ec2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ec30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ec32:	f7f8 fc89 	bl	8007548 <HAL_GetTick>
 800ec36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ec38:	e008      	b.n	800ec4c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ec3a:	f7f8 fc85 	bl	8007548 <HAL_GetTick>
 800ec3e:	4602      	mov	r2, r0
 800ec40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec42:	1ad3      	subs	r3, r2, r3
 800ec44:	2b02      	cmp	r3, #2
 800ec46:	d901      	bls.n	800ec4c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ec48:	2303      	movs	r3, #3
 800ec4a:	e0e0      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ec4c:	4b4d      	ldr	r3, [pc, #308]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d1f0      	bne.n	800ec3a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ec58:	4b4a      	ldr	r3, [pc, #296]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ec5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ec5c:	4b4a      	ldr	r3, [pc, #296]	; (800ed88 <HAL_RCC_OscConfig+0x6c8>)
 800ec5e:	4013      	ands	r3, r2
 800ec60:	687a      	ldr	r2, [r7, #4]
 800ec62:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ec64:	687a      	ldr	r2, [r7, #4]
 800ec66:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ec68:	0112      	lsls	r2, r2, #4
 800ec6a:	430a      	orrs	r2, r1
 800ec6c:	4945      	ldr	r1, [pc, #276]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	628b      	str	r3, [r1, #40]	; 0x28
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec76:	3b01      	subs	r3, #1
 800ec78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec80:	3b01      	subs	r3, #1
 800ec82:	025b      	lsls	r3, r3, #9
 800ec84:	b29b      	uxth	r3, r3
 800ec86:	431a      	orrs	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	041b      	lsls	r3, r3, #16
 800ec90:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ec94:	431a      	orrs	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec9a:	3b01      	subs	r3, #1
 800ec9c:	061b      	lsls	r3, r3, #24
 800ec9e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800eca2:	4938      	ldr	r1, [pc, #224]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800eca4:	4313      	orrs	r3, r2
 800eca6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800eca8:	4b36      	ldr	r3, [pc, #216]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ecaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecac:	4a35      	ldr	r2, [pc, #212]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ecae:	f023 0301 	bic.w	r3, r3, #1
 800ecb2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ecb4:	4b33      	ldr	r3, [pc, #204]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ecb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecb8:	4b34      	ldr	r3, [pc, #208]	; (800ed8c <HAL_RCC_OscConfig+0x6cc>)
 800ecba:	4013      	ands	r3, r2
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ecc0:	00d2      	lsls	r2, r2, #3
 800ecc2:	4930      	ldr	r1, [pc, #192]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ecc8:	4b2e      	ldr	r3, [pc, #184]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ecca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eccc:	f023 020c 	bic.w	r2, r3, #12
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecd4:	492b      	ldr	r1, [pc, #172]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ecda:	4b2a      	ldr	r3, [pc, #168]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ecdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecde:	f023 0202 	bic.w	r2, r3, #2
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ece6:	4927      	ldr	r1, [pc, #156]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ece8:	4313      	orrs	r3, r2
 800ecea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ecec:	4b25      	ldr	r3, [pc, #148]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ecee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf0:	4a24      	ldr	r2, [pc, #144]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ecf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ecf6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ecf8:	4b22      	ldr	r3, [pc, #136]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ecfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecfc:	4a21      	ldr	r2, [pc, #132]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ecfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ed02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ed04:	4b1f      	ldr	r3, [pc, #124]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ed06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed08:	4a1e      	ldr	r2, [pc, #120]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ed0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ed0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800ed10:	4b1c      	ldr	r3, [pc, #112]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ed12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed14:	4a1b      	ldr	r2, [pc, #108]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ed16:	f043 0301 	orr.w	r3, r3, #1
 800ed1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ed1c:	4b19      	ldr	r3, [pc, #100]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	4a18      	ldr	r2, [pc, #96]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ed22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ed26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed28:	f7f8 fc0e 	bl	8007548 <HAL_GetTick>
 800ed2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ed2e:	e008      	b.n	800ed42 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed30:	f7f8 fc0a 	bl	8007548 <HAL_GetTick>
 800ed34:	4602      	mov	r2, r0
 800ed36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	2b02      	cmp	r3, #2
 800ed3c:	d901      	bls.n	800ed42 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ed3e:	2303      	movs	r3, #3
 800ed40:	e065      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ed42:	4b10      	ldr	r3, [pc, #64]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d0f0      	beq.n	800ed30 <HAL_RCC_OscConfig+0x670>
 800ed4e:	e05d      	b.n	800ee0c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed50:	4b0c      	ldr	r3, [pc, #48]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	4a0b      	ldr	r2, [pc, #44]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ed56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ed5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ed5c:	f7f8 fbf4 	bl	8007548 <HAL_GetTick>
 800ed60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ed62:	e008      	b.n	800ed76 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ed64:	f7f8 fbf0 	bl	8007548 <HAL_GetTick>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6c:	1ad3      	subs	r3, r2, r3
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	d901      	bls.n	800ed76 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ed72:	2303      	movs	r3, #3
 800ed74:	e04b      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ed76:	4b03      	ldr	r3, [pc, #12]	; (800ed84 <HAL_RCC_OscConfig+0x6c4>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d1f0      	bne.n	800ed64 <HAL_RCC_OscConfig+0x6a4>
 800ed82:	e043      	b.n	800ee0c <HAL_RCC_OscConfig+0x74c>
 800ed84:	58024400 	.word	0x58024400
 800ed88:	fffffc0c 	.word	0xfffffc0c
 800ed8c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ed90:	4b21      	ldr	r3, [pc, #132]	; (800ee18 <HAL_RCC_OscConfig+0x758>)
 800ed92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed94:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ed96:	4b20      	ldr	r3, [pc, #128]	; (800ee18 <HAL_RCC_OscConfig+0x758>)
 800ed98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed9a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda0:	2b01      	cmp	r3, #1
 800eda2:	d031      	beq.n	800ee08 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	f003 0203 	and.w	r2, r3, #3
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800edae:	429a      	cmp	r2, r3
 800edb0:	d12a      	bne.n	800ee08 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	091b      	lsrs	r3, r3, #4
 800edb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d122      	bne.n	800ee08 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edcc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800edce:	429a      	cmp	r2, r3
 800edd0:	d11a      	bne.n	800ee08 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	0a5b      	lsrs	r3, r3, #9
 800edd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edde:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d111      	bne.n	800ee08 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	0c1b      	lsrs	r3, r3, #16
 800ede8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800edf2:	429a      	cmp	r2, r3
 800edf4:	d108      	bne.n	800ee08 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	0e1b      	lsrs	r3, r3, #24
 800edfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d001      	beq.n	800ee0c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	e000      	b.n	800ee0e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800ee0c:	2300      	movs	r3, #0
}
 800ee0e:	4618      	mov	r0, r3
 800ee10:	3730      	adds	r7, #48	; 0x30
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}
 800ee16:	bf00      	nop
 800ee18:	58024400 	.word	0x58024400

0800ee1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d101      	bne.n	800ee30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	e19c      	b.n	800f16a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ee30:	4b8a      	ldr	r3, [pc, #552]	; (800f05c <HAL_RCC_ClockConfig+0x240>)
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f003 030f 	and.w	r3, r3, #15
 800ee38:	683a      	ldr	r2, [r7, #0]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d910      	bls.n	800ee60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ee3e:	4b87      	ldr	r3, [pc, #540]	; (800f05c <HAL_RCC_ClockConfig+0x240>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f023 020f 	bic.w	r2, r3, #15
 800ee46:	4985      	ldr	r1, [pc, #532]	; (800f05c <HAL_RCC_ClockConfig+0x240>)
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	4313      	orrs	r3, r2
 800ee4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ee4e:	4b83      	ldr	r3, [pc, #524]	; (800f05c <HAL_RCC_ClockConfig+0x240>)
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f003 030f 	and.w	r3, r3, #15
 800ee56:	683a      	ldr	r2, [r7, #0]
 800ee58:	429a      	cmp	r2, r3
 800ee5a:	d001      	beq.n	800ee60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	e184      	b.n	800f16a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	f003 0304 	and.w	r3, r3, #4
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d010      	beq.n	800ee8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	691a      	ldr	r2, [r3, #16]
 800ee70:	4b7b      	ldr	r3, [pc, #492]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ee72:	699b      	ldr	r3, [r3, #24]
 800ee74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d908      	bls.n	800ee8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ee7c:	4b78      	ldr	r3, [pc, #480]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ee7e:	699b      	ldr	r3, [r3, #24]
 800ee80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	4975      	ldr	r1, [pc, #468]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ee8a:	4313      	orrs	r3, r2
 800ee8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	f003 0308 	and.w	r3, r3, #8
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d010      	beq.n	800eebc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	695a      	ldr	r2, [r3, #20]
 800ee9e:	4b70      	ldr	r3, [pc, #448]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800eea0:	69db      	ldr	r3, [r3, #28]
 800eea2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d908      	bls.n	800eebc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800eeaa:	4b6d      	ldr	r3, [pc, #436]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800eeac:	69db      	ldr	r3, [r3, #28]
 800eeae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	695b      	ldr	r3, [r3, #20]
 800eeb6:	496a      	ldr	r1, [pc, #424]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f003 0310 	and.w	r3, r3, #16
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d010      	beq.n	800eeea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	699a      	ldr	r2, [r3, #24]
 800eecc:	4b64      	ldr	r3, [pc, #400]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800eece:	69db      	ldr	r3, [r3, #28]
 800eed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800eed4:	429a      	cmp	r2, r3
 800eed6:	d908      	bls.n	800eeea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800eed8:	4b61      	ldr	r3, [pc, #388]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800eeda:	69db      	ldr	r3, [r3, #28]
 800eedc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	699b      	ldr	r3, [r3, #24]
 800eee4:	495e      	ldr	r1, [pc, #376]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800eee6:	4313      	orrs	r3, r2
 800eee8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f003 0320 	and.w	r3, r3, #32
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d010      	beq.n	800ef18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	69da      	ldr	r2, [r3, #28]
 800eefa:	4b59      	ldr	r3, [pc, #356]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800eefc:	6a1b      	ldr	r3, [r3, #32]
 800eefe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ef02:	429a      	cmp	r2, r3
 800ef04:	d908      	bls.n	800ef18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800ef06:	4b56      	ldr	r3, [pc, #344]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ef08:	6a1b      	ldr	r3, [r3, #32]
 800ef0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	69db      	ldr	r3, [r3, #28]
 800ef12:	4953      	ldr	r1, [pc, #332]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ef14:	4313      	orrs	r3, r2
 800ef16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	f003 0302 	and.w	r3, r3, #2
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d010      	beq.n	800ef46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	68da      	ldr	r2, [r3, #12]
 800ef28:	4b4d      	ldr	r3, [pc, #308]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ef2a:	699b      	ldr	r3, [r3, #24]
 800ef2c:	f003 030f 	and.w	r3, r3, #15
 800ef30:	429a      	cmp	r2, r3
 800ef32:	d908      	bls.n	800ef46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ef34:	4b4a      	ldr	r3, [pc, #296]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ef36:	699b      	ldr	r3, [r3, #24]
 800ef38:	f023 020f 	bic.w	r2, r3, #15
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	4947      	ldr	r1, [pc, #284]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ef42:	4313      	orrs	r3, r2
 800ef44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	f003 0301 	and.w	r3, r3, #1
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d055      	beq.n	800effe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ef52:	4b43      	ldr	r3, [pc, #268]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ef54:	699b      	ldr	r3, [r3, #24]
 800ef56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	689b      	ldr	r3, [r3, #8]
 800ef5e:	4940      	ldr	r1, [pc, #256]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ef60:	4313      	orrs	r3, r2
 800ef62:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	2b02      	cmp	r3, #2
 800ef6a:	d107      	bne.n	800ef7c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ef6c:	4b3c      	ldr	r3, [pc, #240]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d121      	bne.n	800efbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ef78:	2301      	movs	r3, #1
 800ef7a:	e0f6      	b.n	800f16a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	2b03      	cmp	r3, #3
 800ef82:	d107      	bne.n	800ef94 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ef84:	4b36      	ldr	r3, [pc, #216]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d115      	bne.n	800efbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	e0ea      	b.n	800f16a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	685b      	ldr	r3, [r3, #4]
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d107      	bne.n	800efac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ef9c:	4b30      	ldr	r3, [pc, #192]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d109      	bne.n	800efbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800efa8:	2301      	movs	r3, #1
 800efaa:	e0de      	b.n	800f16a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800efac:	4b2c      	ldr	r3, [pc, #176]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	f003 0304 	and.w	r3, r3, #4
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d101      	bne.n	800efbc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800efb8:	2301      	movs	r3, #1
 800efba:	e0d6      	b.n	800f16a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800efbc:	4b28      	ldr	r3, [pc, #160]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800efbe:	691b      	ldr	r3, [r3, #16]
 800efc0:	f023 0207 	bic.w	r2, r3, #7
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	685b      	ldr	r3, [r3, #4]
 800efc8:	4925      	ldr	r1, [pc, #148]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800efca:	4313      	orrs	r3, r2
 800efcc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800efce:	f7f8 fabb 	bl	8007548 <HAL_GetTick>
 800efd2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800efd4:	e00a      	b.n	800efec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800efd6:	f7f8 fab7 	bl	8007548 <HAL_GetTick>
 800efda:	4602      	mov	r2, r0
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d901      	bls.n	800efec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800efe8:	2303      	movs	r3, #3
 800efea:	e0be      	b.n	800f16a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800efec:	4b1c      	ldr	r3, [pc, #112]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800efee:	691b      	ldr	r3, [r3, #16]
 800eff0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	685b      	ldr	r3, [r3, #4]
 800eff8:	00db      	lsls	r3, r3, #3
 800effa:	429a      	cmp	r2, r3
 800effc:	d1eb      	bne.n	800efd6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f003 0302 	and.w	r3, r3, #2
 800f006:	2b00      	cmp	r3, #0
 800f008:	d010      	beq.n	800f02c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	68da      	ldr	r2, [r3, #12]
 800f00e:	4b14      	ldr	r3, [pc, #80]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800f010:	699b      	ldr	r3, [r3, #24]
 800f012:	f003 030f 	and.w	r3, r3, #15
 800f016:	429a      	cmp	r2, r3
 800f018:	d208      	bcs.n	800f02c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f01a:	4b11      	ldr	r3, [pc, #68]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800f01c:	699b      	ldr	r3, [r3, #24]
 800f01e:	f023 020f 	bic.w	r2, r3, #15
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	68db      	ldr	r3, [r3, #12]
 800f026:	490e      	ldr	r1, [pc, #56]	; (800f060 <HAL_RCC_ClockConfig+0x244>)
 800f028:	4313      	orrs	r3, r2
 800f02a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f02c:	4b0b      	ldr	r3, [pc, #44]	; (800f05c <HAL_RCC_ClockConfig+0x240>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	f003 030f 	and.w	r3, r3, #15
 800f034:	683a      	ldr	r2, [r7, #0]
 800f036:	429a      	cmp	r2, r3
 800f038:	d214      	bcs.n	800f064 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f03a:	4b08      	ldr	r3, [pc, #32]	; (800f05c <HAL_RCC_ClockConfig+0x240>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f023 020f 	bic.w	r2, r3, #15
 800f042:	4906      	ldr	r1, [pc, #24]	; (800f05c <HAL_RCC_ClockConfig+0x240>)
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	4313      	orrs	r3, r2
 800f048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f04a:	4b04      	ldr	r3, [pc, #16]	; (800f05c <HAL_RCC_ClockConfig+0x240>)
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f003 030f 	and.w	r3, r3, #15
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	429a      	cmp	r2, r3
 800f056:	d005      	beq.n	800f064 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800f058:	2301      	movs	r3, #1
 800f05a:	e086      	b.n	800f16a <HAL_RCC_ClockConfig+0x34e>
 800f05c:	52002000 	.word	0x52002000
 800f060:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	f003 0304 	and.w	r3, r3, #4
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d010      	beq.n	800f092 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	691a      	ldr	r2, [r3, #16]
 800f074:	4b3f      	ldr	r3, [pc, #252]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f076:	699b      	ldr	r3, [r3, #24]
 800f078:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d208      	bcs.n	800f092 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800f080:	4b3c      	ldr	r3, [pc, #240]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f082:	699b      	ldr	r3, [r3, #24]
 800f084:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	691b      	ldr	r3, [r3, #16]
 800f08c:	4939      	ldr	r1, [pc, #228]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f08e:	4313      	orrs	r3, r2
 800f090:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	f003 0308 	and.w	r3, r3, #8
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d010      	beq.n	800f0c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	695a      	ldr	r2, [r3, #20]
 800f0a2:	4b34      	ldr	r3, [pc, #208]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f0a4:	69db      	ldr	r3, [r3, #28]
 800f0a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d208      	bcs.n	800f0c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800f0ae:	4b31      	ldr	r3, [pc, #196]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f0b0:	69db      	ldr	r3, [r3, #28]
 800f0b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	695b      	ldr	r3, [r3, #20]
 800f0ba:	492e      	ldr	r1, [pc, #184]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f0bc:	4313      	orrs	r3, r2
 800f0be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f003 0310 	and.w	r3, r3, #16
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d010      	beq.n	800f0ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	699a      	ldr	r2, [r3, #24]
 800f0d0:	4b28      	ldr	r3, [pc, #160]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f0d2:	69db      	ldr	r3, [r3, #28]
 800f0d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d208      	bcs.n	800f0ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800f0dc:	4b25      	ldr	r3, [pc, #148]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f0de:	69db      	ldr	r3, [r3, #28]
 800f0e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	699b      	ldr	r3, [r3, #24]
 800f0e8:	4922      	ldr	r1, [pc, #136]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	f003 0320 	and.w	r3, r3, #32
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d010      	beq.n	800f11c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	69da      	ldr	r2, [r3, #28]
 800f0fe:	4b1d      	ldr	r3, [pc, #116]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f100:	6a1b      	ldr	r3, [r3, #32]
 800f102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f106:	429a      	cmp	r2, r3
 800f108:	d208      	bcs.n	800f11c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800f10a:	4b1a      	ldr	r3, [pc, #104]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f10c:	6a1b      	ldr	r3, [r3, #32]
 800f10e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	69db      	ldr	r3, [r3, #28]
 800f116:	4917      	ldr	r1, [pc, #92]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f118:	4313      	orrs	r3, r2
 800f11a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800f11c:	f000 f834 	bl	800f188 <HAL_RCC_GetSysClockFreq>
 800f120:	4602      	mov	r2, r0
 800f122:	4b14      	ldr	r3, [pc, #80]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f124:	699b      	ldr	r3, [r3, #24]
 800f126:	0a1b      	lsrs	r3, r3, #8
 800f128:	f003 030f 	and.w	r3, r3, #15
 800f12c:	4912      	ldr	r1, [pc, #72]	; (800f178 <HAL_RCC_ClockConfig+0x35c>)
 800f12e:	5ccb      	ldrb	r3, [r1, r3]
 800f130:	f003 031f 	and.w	r3, r3, #31
 800f134:	fa22 f303 	lsr.w	r3, r2, r3
 800f138:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f13a:	4b0e      	ldr	r3, [pc, #56]	; (800f174 <HAL_RCC_ClockConfig+0x358>)
 800f13c:	699b      	ldr	r3, [r3, #24]
 800f13e:	f003 030f 	and.w	r3, r3, #15
 800f142:	4a0d      	ldr	r2, [pc, #52]	; (800f178 <HAL_RCC_ClockConfig+0x35c>)
 800f144:	5cd3      	ldrb	r3, [r2, r3]
 800f146:	f003 031f 	and.w	r3, r3, #31
 800f14a:	693a      	ldr	r2, [r7, #16]
 800f14c:	fa22 f303 	lsr.w	r3, r2, r3
 800f150:	4a0a      	ldr	r2, [pc, #40]	; (800f17c <HAL_RCC_ClockConfig+0x360>)
 800f152:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f154:	4a0a      	ldr	r2, [pc, #40]	; (800f180 <HAL_RCC_ClockConfig+0x364>)
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800f15a:	4b0a      	ldr	r3, [pc, #40]	; (800f184 <HAL_RCC_ClockConfig+0x368>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	4618      	mov	r0, r3
 800f160:	f7f8 f9a8 	bl	80074b4 <HAL_InitTick>
 800f164:	4603      	mov	r3, r0
 800f166:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800f168:	7bfb      	ldrb	r3, [r7, #15]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3718      	adds	r7, #24
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop
 800f174:	58024400 	.word	0x58024400
 800f178:	08018418 	.word	0x08018418
 800f17c:	20000024 	.word	0x20000024
 800f180:	20000020 	.word	0x20000020
 800f184:	20000028 	.word	0x20000028

0800f188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f188:	b480      	push	{r7}
 800f18a:	b089      	sub	sp, #36	; 0x24
 800f18c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800f18e:	4bb3      	ldr	r3, [pc, #716]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f190:	691b      	ldr	r3, [r3, #16]
 800f192:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f196:	2b18      	cmp	r3, #24
 800f198:	f200 8155 	bhi.w	800f446 <HAL_RCC_GetSysClockFreq+0x2be>
 800f19c:	a201      	add	r2, pc, #4	; (adr r2, 800f1a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800f19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a2:	bf00      	nop
 800f1a4:	0800f209 	.word	0x0800f209
 800f1a8:	0800f447 	.word	0x0800f447
 800f1ac:	0800f447 	.word	0x0800f447
 800f1b0:	0800f447 	.word	0x0800f447
 800f1b4:	0800f447 	.word	0x0800f447
 800f1b8:	0800f447 	.word	0x0800f447
 800f1bc:	0800f447 	.word	0x0800f447
 800f1c0:	0800f447 	.word	0x0800f447
 800f1c4:	0800f22f 	.word	0x0800f22f
 800f1c8:	0800f447 	.word	0x0800f447
 800f1cc:	0800f447 	.word	0x0800f447
 800f1d0:	0800f447 	.word	0x0800f447
 800f1d4:	0800f447 	.word	0x0800f447
 800f1d8:	0800f447 	.word	0x0800f447
 800f1dc:	0800f447 	.word	0x0800f447
 800f1e0:	0800f447 	.word	0x0800f447
 800f1e4:	0800f235 	.word	0x0800f235
 800f1e8:	0800f447 	.word	0x0800f447
 800f1ec:	0800f447 	.word	0x0800f447
 800f1f0:	0800f447 	.word	0x0800f447
 800f1f4:	0800f447 	.word	0x0800f447
 800f1f8:	0800f447 	.word	0x0800f447
 800f1fc:	0800f447 	.word	0x0800f447
 800f200:	0800f447 	.word	0x0800f447
 800f204:	0800f23b 	.word	0x0800f23b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f208:	4b94      	ldr	r3, [pc, #592]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	f003 0320 	and.w	r3, r3, #32
 800f210:	2b00      	cmp	r3, #0
 800f212:	d009      	beq.n	800f228 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f214:	4b91      	ldr	r3, [pc, #580]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	08db      	lsrs	r3, r3, #3
 800f21a:	f003 0303 	and.w	r3, r3, #3
 800f21e:	4a90      	ldr	r2, [pc, #576]	; (800f460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f220:	fa22 f303 	lsr.w	r3, r2, r3
 800f224:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800f226:	e111      	b.n	800f44c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800f228:	4b8d      	ldr	r3, [pc, #564]	; (800f460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f22a:	61bb      	str	r3, [r7, #24]
    break;
 800f22c:	e10e      	b.n	800f44c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800f22e:	4b8d      	ldr	r3, [pc, #564]	; (800f464 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f230:	61bb      	str	r3, [r7, #24]
    break;
 800f232:	e10b      	b.n	800f44c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800f234:	4b8c      	ldr	r3, [pc, #560]	; (800f468 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800f236:	61bb      	str	r3, [r7, #24]
    break;
 800f238:	e108      	b.n	800f44c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f23a:	4b88      	ldr	r3, [pc, #544]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f23e:	f003 0303 	and.w	r3, r3, #3
 800f242:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800f244:	4b85      	ldr	r3, [pc, #532]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f248:	091b      	lsrs	r3, r3, #4
 800f24a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f24e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800f250:	4b82      	ldr	r3, [pc, #520]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f254:	f003 0301 	and.w	r3, r3, #1
 800f258:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800f25a:	4b80      	ldr	r3, [pc, #512]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f25e:	08db      	lsrs	r3, r3, #3
 800f260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	fb02 f303 	mul.w	r3, r2, r3
 800f26a:	ee07 3a90 	vmov	s15, r3
 800f26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f272:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	f000 80e1 	beq.w	800f440 <HAL_RCC_GetSysClockFreq+0x2b8>
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	2b02      	cmp	r3, #2
 800f282:	f000 8083 	beq.w	800f38c <HAL_RCC_GetSysClockFreq+0x204>
 800f286:	697b      	ldr	r3, [r7, #20]
 800f288:	2b02      	cmp	r3, #2
 800f28a:	f200 80a1 	bhi.w	800f3d0 <HAL_RCC_GetSysClockFreq+0x248>
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d003      	beq.n	800f29c <HAL_RCC_GetSysClockFreq+0x114>
 800f294:	697b      	ldr	r3, [r7, #20]
 800f296:	2b01      	cmp	r3, #1
 800f298:	d056      	beq.n	800f348 <HAL_RCC_GetSysClockFreq+0x1c0>
 800f29a:	e099      	b.n	800f3d0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f29c:	4b6f      	ldr	r3, [pc, #444]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f003 0320 	and.w	r3, r3, #32
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d02d      	beq.n	800f304 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800f2a8:	4b6c      	ldr	r3, [pc, #432]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	08db      	lsrs	r3, r3, #3
 800f2ae:	f003 0303 	and.w	r3, r3, #3
 800f2b2:	4a6b      	ldr	r2, [pc, #428]	; (800f460 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800f2b4:	fa22 f303 	lsr.w	r3, r2, r3
 800f2b8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	ee07 3a90 	vmov	s15, r3
 800f2c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	ee07 3a90 	vmov	s15, r3
 800f2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2d2:	4b62      	ldr	r3, [pc, #392]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2da:	ee07 3a90 	vmov	s15, r3
 800f2de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2e2:	ed97 6a02 	vldr	s12, [r7, #8]
 800f2e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800f46c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f2ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f2f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800f302:	e087      	b.n	800f414 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	ee07 3a90 	vmov	s15, r3
 800f30a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f30e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800f470 <HAL_RCC_GetSysClockFreq+0x2e8>
 800f312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f316:	4b51      	ldr	r3, [pc, #324]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f31e:	ee07 3a90 	vmov	s15, r3
 800f322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f326:	ed97 6a02 	vldr	s12, [r7, #8]
 800f32a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800f46c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f346:	e065      	b.n	800f414 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	ee07 3a90 	vmov	s15, r3
 800f34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f352:	eddf 6a48 	vldr	s13, [pc, #288]	; 800f474 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f35a:	4b40      	ldr	r3, [pc, #256]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f35c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f35e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f362:	ee07 3a90 	vmov	s15, r3
 800f366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f36a:	ed97 6a02 	vldr	s12, [r7, #8]
 800f36e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800f46c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f37a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f38a:	e043      	b.n	800f414 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	ee07 3a90 	vmov	s15, r3
 800f392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f396:	eddf 6a38 	vldr	s13, [pc, #224]	; 800f478 <HAL_RCC_GetSysClockFreq+0x2f0>
 800f39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f39e:	4b2f      	ldr	r3, [pc, #188]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3a6:	ee07 3a90 	vmov	s15, r3
 800f3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800f3b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800f46c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f3ce:	e021      	b.n	800f414 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	ee07 3a90 	vmov	s15, r3
 800f3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3da:	eddf 6a26 	vldr	s13, [pc, #152]	; 800f474 <HAL_RCC_GetSysClockFreq+0x2ec>
 800f3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f3e2:	4b1e      	ldr	r3, [pc, #120]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f3ea:	ee07 3a90 	vmov	s15, r3
 800f3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f3f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800f3f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800f46c <HAL_RCC_GetSysClockFreq+0x2e4>
 800f3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f40e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f412:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800f414:	4b11      	ldr	r3, [pc, #68]	; (800f45c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800f416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f418:	0a5b      	lsrs	r3, r3, #9
 800f41a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f41e:	3301      	adds	r3, #1
 800f420:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	ee07 3a90 	vmov	s15, r3
 800f428:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f42c:	edd7 6a07 	vldr	s13, [r7, #28]
 800f430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f438:	ee17 3a90 	vmov	r3, s15
 800f43c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800f43e:	e005      	b.n	800f44c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800f440:	2300      	movs	r3, #0
 800f442:	61bb      	str	r3, [r7, #24]
    break;
 800f444:	e002      	b.n	800f44c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800f446:	4b07      	ldr	r3, [pc, #28]	; (800f464 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800f448:	61bb      	str	r3, [r7, #24]
    break;
 800f44a:	bf00      	nop
  }

  return sysclockfreq;
 800f44c:	69bb      	ldr	r3, [r7, #24]
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3724      	adds	r7, #36	; 0x24
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
 800f45a:	bf00      	nop
 800f45c:	58024400 	.word	0x58024400
 800f460:	03d09000 	.word	0x03d09000
 800f464:	003d0900 	.word	0x003d0900
 800f468:	017d7840 	.word	0x017d7840
 800f46c:	46000000 	.word	0x46000000
 800f470:	4c742400 	.word	0x4c742400
 800f474:	4a742400 	.word	0x4a742400
 800f478:	4bbebc20 	.word	0x4bbebc20

0800f47c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800f482:	f7ff fe81 	bl	800f188 <HAL_RCC_GetSysClockFreq>
 800f486:	4602      	mov	r2, r0
 800f488:	4b10      	ldr	r3, [pc, #64]	; (800f4cc <HAL_RCC_GetHCLKFreq+0x50>)
 800f48a:	699b      	ldr	r3, [r3, #24]
 800f48c:	0a1b      	lsrs	r3, r3, #8
 800f48e:	f003 030f 	and.w	r3, r3, #15
 800f492:	490f      	ldr	r1, [pc, #60]	; (800f4d0 <HAL_RCC_GetHCLKFreq+0x54>)
 800f494:	5ccb      	ldrb	r3, [r1, r3]
 800f496:	f003 031f 	and.w	r3, r3, #31
 800f49a:	fa22 f303 	lsr.w	r3, r2, r3
 800f49e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800f4a0:	4b0a      	ldr	r3, [pc, #40]	; (800f4cc <HAL_RCC_GetHCLKFreq+0x50>)
 800f4a2:	699b      	ldr	r3, [r3, #24]
 800f4a4:	f003 030f 	and.w	r3, r3, #15
 800f4a8:	4a09      	ldr	r2, [pc, #36]	; (800f4d0 <HAL_RCC_GetHCLKFreq+0x54>)
 800f4aa:	5cd3      	ldrb	r3, [r2, r3]
 800f4ac:	f003 031f 	and.w	r3, r3, #31
 800f4b0:	687a      	ldr	r2, [r7, #4]
 800f4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800f4b6:	4a07      	ldr	r2, [pc, #28]	; (800f4d4 <HAL_RCC_GetHCLKFreq+0x58>)
 800f4b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800f4ba:	4a07      	ldr	r2, [pc, #28]	; (800f4d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800f4c0:	4b04      	ldr	r3, [pc, #16]	; (800f4d4 <HAL_RCC_GetHCLKFreq+0x58>)
 800f4c2:	681b      	ldr	r3, [r3, #0]
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	58024400 	.word	0x58024400
 800f4d0:	08018418 	.word	0x08018418
 800f4d4:	20000024 	.word	0x20000024
 800f4d8:	20000020 	.word	0x20000020

0800f4dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800f4e0:	f7ff ffcc 	bl	800f47c <HAL_RCC_GetHCLKFreq>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	4b06      	ldr	r3, [pc, #24]	; (800f500 <HAL_RCC_GetPCLK1Freq+0x24>)
 800f4e8:	69db      	ldr	r3, [r3, #28]
 800f4ea:	091b      	lsrs	r3, r3, #4
 800f4ec:	f003 0307 	and.w	r3, r3, #7
 800f4f0:	4904      	ldr	r1, [pc, #16]	; (800f504 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f4f2:	5ccb      	ldrb	r3, [r1, r3]
 800f4f4:	f003 031f 	and.w	r3, r3, #31
 800f4f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	bd80      	pop	{r7, pc}
 800f500:	58024400 	.word	0x58024400
 800f504:	08018418 	.word	0x08018418

0800f508 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800f50c:	f7ff ffb6 	bl	800f47c <HAL_RCC_GetHCLKFreq>
 800f510:	4602      	mov	r2, r0
 800f512:	4b06      	ldr	r3, [pc, #24]	; (800f52c <HAL_RCC_GetPCLK2Freq+0x24>)
 800f514:	69db      	ldr	r3, [r3, #28]
 800f516:	0a1b      	lsrs	r3, r3, #8
 800f518:	f003 0307 	and.w	r3, r3, #7
 800f51c:	4904      	ldr	r1, [pc, #16]	; (800f530 <HAL_RCC_GetPCLK2Freq+0x28>)
 800f51e:	5ccb      	ldrb	r3, [r1, r3]
 800f520:	f003 031f 	and.w	r3, r3, #31
 800f524:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800f528:	4618      	mov	r0, r3
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	58024400 	.word	0x58024400
 800f530:	08018418 	.word	0x08018418

0800f534 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b086      	sub	sp, #24
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800f53c:	2300      	movs	r3, #0
 800f53e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800f540:	2300      	movs	r3, #0
 800f542:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d03f      	beq.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f554:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f558:	d02a      	beq.n	800f5b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800f55a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800f55e:	d824      	bhi.n	800f5aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f560:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f564:	d018      	beq.n	800f598 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800f566:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f56a:	d81e      	bhi.n	800f5aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d003      	beq.n	800f578 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800f570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f574:	d007      	beq.n	800f586 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800f576:	e018      	b.n	800f5aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f578:	4ba4      	ldr	r3, [pc, #656]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f57a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f57c:	4aa3      	ldr	r2, [pc, #652]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f57e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f582:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f584:	e015      	b.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	3304      	adds	r3, #4
 800f58a:	2102      	movs	r1, #2
 800f58c:	4618      	mov	r0, r3
 800f58e:	f001 ff01 	bl	8011394 <RCCEx_PLL2_Config>
 800f592:	4603      	mov	r3, r0
 800f594:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f596:	e00c      	b.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	3324      	adds	r3, #36	; 0x24
 800f59c:	2102      	movs	r1, #2
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f001 ffaa 	bl	80114f8 <RCCEx_PLL3_Config>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800f5a8:	e003      	b.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	75fb      	strb	r3, [r7, #23]
      break;
 800f5ae:	e000      	b.n	800f5b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800f5b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f5b2:	7dfb      	ldrb	r3, [r7, #23]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d109      	bne.n	800f5cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800f5b8:	4b94      	ldr	r3, [pc, #592]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f5ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f5bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f5c4:	4991      	ldr	r1, [pc, #580]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f5c6:	4313      	orrs	r3, r2
 800f5c8:	650b      	str	r3, [r1, #80]	; 0x50
 800f5ca:	e001      	b.n	800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f5cc:	7dfb      	ldrb	r3, [r7, #23]
 800f5ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d03d      	beq.n	800f658 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5e0:	2b04      	cmp	r3, #4
 800f5e2:	d826      	bhi.n	800f632 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800f5e4:	a201      	add	r2, pc, #4	; (adr r2, 800f5ec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800f5e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5ea:	bf00      	nop
 800f5ec:	0800f601 	.word	0x0800f601
 800f5f0:	0800f60f 	.word	0x0800f60f
 800f5f4:	0800f621 	.word	0x0800f621
 800f5f8:	0800f639 	.word	0x0800f639
 800f5fc:	0800f639 	.word	0x0800f639
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f600:	4b82      	ldr	r3, [pc, #520]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f604:	4a81      	ldr	r2, [pc, #516]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f606:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f60a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f60c:	e015      	b.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	3304      	adds	r3, #4
 800f612:	2100      	movs	r1, #0
 800f614:	4618      	mov	r0, r3
 800f616:	f001 febd 	bl	8011394 <RCCEx_PLL2_Config>
 800f61a:	4603      	mov	r3, r0
 800f61c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f61e:	e00c      	b.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	3324      	adds	r3, #36	; 0x24
 800f624:	2100      	movs	r1, #0
 800f626:	4618      	mov	r0, r3
 800f628:	f001 ff66 	bl	80114f8 <RCCEx_PLL3_Config>
 800f62c:	4603      	mov	r3, r0
 800f62e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f630:	e003      	b.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f632:	2301      	movs	r3, #1
 800f634:	75fb      	strb	r3, [r7, #23]
      break;
 800f636:	e000      	b.n	800f63a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800f638:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f63a:	7dfb      	ldrb	r3, [r7, #23]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d109      	bne.n	800f654 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800f640:	4b72      	ldr	r3, [pc, #456]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f644:	f023 0207 	bic.w	r2, r3, #7
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64c:	496f      	ldr	r1, [pc, #444]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f64e:	4313      	orrs	r3, r2
 800f650:	650b      	str	r3, [r1, #80]	; 0x50
 800f652:	e001      	b.n	800f658 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f654:	7dfb      	ldrb	r3, [r7, #23]
 800f656:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f660:	2b00      	cmp	r3, #0
 800f662:	d051      	beq.n	800f708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f66a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800f66e:	d036      	beq.n	800f6de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800f670:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800f674:	d830      	bhi.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f676:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f67a:	d032      	beq.n	800f6e2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800f67c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f680:	d82a      	bhi.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f682:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f686:	d02e      	beq.n	800f6e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800f688:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800f68c:	d824      	bhi.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f68e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f692:	d018      	beq.n	800f6c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800f694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f698:	d81e      	bhi.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d003      	beq.n	800f6a6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800f69e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f6a2:	d007      	beq.n	800f6b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800f6a4:	e018      	b.n	800f6d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f6a6:	4b59      	ldr	r3, [pc, #356]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6aa:	4a58      	ldr	r2, [pc, #352]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f6ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f6b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f6b2:	e019      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	3304      	adds	r3, #4
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f001 fe6a 	bl	8011394 <RCCEx_PLL2_Config>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800f6c4:	e010      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	3324      	adds	r3, #36	; 0x24
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f001 ff13 	bl	80114f8 <RCCEx_PLL3_Config>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f6d6:	e007      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800f6d8:	2301      	movs	r3, #1
 800f6da:	75fb      	strb	r3, [r7, #23]
      break;
 800f6dc:	e004      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800f6de:	bf00      	nop
 800f6e0:	e002      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800f6e2:	bf00      	nop
 800f6e4:	e000      	b.n	800f6e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800f6e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f6e8:	7dfb      	ldrb	r3, [r7, #23]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d10a      	bne.n	800f704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800f6ee:	4b47      	ldr	r3, [pc, #284]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6f2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f6fc:	4943      	ldr	r1, [pc, #268]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f6fe:	4313      	orrs	r3, r2
 800f700:	658b      	str	r3, [r1, #88]	; 0x58
 800f702:	e001      	b.n	800f708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f704:	7dfb      	ldrb	r3, [r7, #23]
 800f706:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f710:	2b00      	cmp	r3, #0
 800f712:	d051      	beq.n	800f7b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f71a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800f71e:	d036      	beq.n	800f78e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800f720:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800f724:	d830      	bhi.n	800f788 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f726:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f72a:	d032      	beq.n	800f792 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800f72c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f730:	d82a      	bhi.n	800f788 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f732:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f736:	d02e      	beq.n	800f796 <HAL_RCCEx_PeriphCLKConfig+0x262>
 800f738:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800f73c:	d824      	bhi.n	800f788 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f73e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f742:	d018      	beq.n	800f776 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800f744:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f748:	d81e      	bhi.n	800f788 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d003      	beq.n	800f756 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800f74e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800f752:	d007      	beq.n	800f764 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800f754:	e018      	b.n	800f788 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f756:	4b2d      	ldr	r3, [pc, #180]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f75a:	4a2c      	ldr	r2, [pc, #176]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f75c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f760:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f762:	e019      	b.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	3304      	adds	r3, #4
 800f768:	2100      	movs	r1, #0
 800f76a:	4618      	mov	r0, r3
 800f76c:	f001 fe12 	bl	8011394 <RCCEx_PLL2_Config>
 800f770:	4603      	mov	r3, r0
 800f772:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800f774:	e010      	b.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	3324      	adds	r3, #36	; 0x24
 800f77a:	2100      	movs	r1, #0
 800f77c:	4618      	mov	r0, r3
 800f77e:	f001 febb 	bl	80114f8 <RCCEx_PLL3_Config>
 800f782:	4603      	mov	r3, r0
 800f784:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800f786:	e007      	b.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800f788:	2301      	movs	r3, #1
 800f78a:	75fb      	strb	r3, [r7, #23]
      break;
 800f78c:	e004      	b.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800f78e:	bf00      	nop
 800f790:	e002      	b.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800f792:	bf00      	nop
 800f794:	e000      	b.n	800f798 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800f796:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f798:	7dfb      	ldrb	r3, [r7, #23]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d10a      	bne.n	800f7b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800f79e:	4b1b      	ldr	r3, [pc, #108]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f7a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f7a2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f7ac:	4917      	ldr	r1, [pc, #92]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	658b      	str	r3, [r1, #88]	; 0x58
 800f7b2:	e001      	b.n	800f7b8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f7b4:	7dfb      	ldrb	r3, [r7, #23]
 800f7b6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d035      	beq.n	800f830 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f7c8:	2b30      	cmp	r3, #48	; 0x30
 800f7ca:	d01c      	beq.n	800f806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800f7cc:	2b30      	cmp	r3, #48	; 0x30
 800f7ce:	d817      	bhi.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800f7d0:	2b20      	cmp	r3, #32
 800f7d2:	d00c      	beq.n	800f7ee <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800f7d4:	2b20      	cmp	r3, #32
 800f7d6:	d813      	bhi.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d019      	beq.n	800f810 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800f7dc:	2b10      	cmp	r3, #16
 800f7de:	d10f      	bne.n	800f800 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f7e0:	4b0a      	ldr	r3, [pc, #40]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7e4:	4a09      	ldr	r2, [pc, #36]	; (800f80c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800f7e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f7ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800f7ec:	e011      	b.n	800f812 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	3304      	adds	r3, #4
 800f7f2:	2102      	movs	r1, #2
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f001 fdcd 	bl	8011394 <RCCEx_PLL2_Config>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800f7fe:	e008      	b.n	800f812 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800f800:	2301      	movs	r3, #1
 800f802:	75fb      	strb	r3, [r7, #23]
      break;
 800f804:	e005      	b.n	800f812 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800f806:	bf00      	nop
 800f808:	e003      	b.n	800f812 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800f80a:	bf00      	nop
 800f80c:	58024400 	.word	0x58024400
      break;
 800f810:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f812:	7dfb      	ldrb	r3, [r7, #23]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d109      	bne.n	800f82c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800f818:	4ba3      	ldr	r3, [pc, #652]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f81a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f81c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f824:	49a0      	ldr	r1, [pc, #640]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f826:	4313      	orrs	r3, r2
 800f828:	64cb      	str	r3, [r1, #76]	; 0x4c
 800f82a:	e001      	b.n	800f830 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f82c:	7dfb      	ldrb	r3, [r7, #23]
 800f82e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d047      	beq.n	800f8cc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f844:	d030      	beq.n	800f8a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800f846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f84a:	d82a      	bhi.n	800f8a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800f84c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f850:	d02c      	beq.n	800f8ac <HAL_RCCEx_PeriphCLKConfig+0x378>
 800f852:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800f856:	d824      	bhi.n	800f8a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800f858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f85c:	d018      	beq.n	800f890 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800f85e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f862:	d81e      	bhi.n	800f8a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800f864:	2b00      	cmp	r3, #0
 800f866:	d003      	beq.n	800f870 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800f868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f86c:	d007      	beq.n	800f87e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800f86e:	e018      	b.n	800f8a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f870:	4b8d      	ldr	r3, [pc, #564]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f874:	4a8c      	ldr	r2, [pc, #560]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f87a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f87c:	e017      	b.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	3304      	adds	r3, #4
 800f882:	2100      	movs	r1, #0
 800f884:	4618      	mov	r0, r3
 800f886:	f001 fd85 	bl	8011394 <RCCEx_PLL2_Config>
 800f88a:	4603      	mov	r3, r0
 800f88c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f88e:	e00e      	b.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	3324      	adds	r3, #36	; 0x24
 800f894:	2100      	movs	r1, #0
 800f896:	4618      	mov	r0, r3
 800f898:	f001 fe2e 	bl	80114f8 <RCCEx_PLL3_Config>
 800f89c:	4603      	mov	r3, r0
 800f89e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800f8a0:	e005      	b.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	75fb      	strb	r3, [r7, #23]
      break;
 800f8a6:	e002      	b.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800f8a8:	bf00      	nop
 800f8aa:	e000      	b.n	800f8ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800f8ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f8ae:	7dfb      	ldrb	r3, [r7, #23]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d109      	bne.n	800f8c8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800f8b4:	4b7c      	ldr	r3, [pc, #496]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f8b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f8b8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f8c0:	4979      	ldr	r1, [pc, #484]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	650b      	str	r3, [r1, #80]	; 0x50
 800f8c6:	e001      	b.n	800f8cc <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f8c8:	7dfb      	ldrb	r3, [r7, #23]
 800f8ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d049      	beq.n	800f96c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f8dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f8e0:	d02e      	beq.n	800f940 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800f8e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f8e6:	d828      	bhi.n	800f93a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f8e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f8ec:	d02a      	beq.n	800f944 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800f8ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f8f2:	d822      	bhi.n	800f93a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f8f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f8f8:	d026      	beq.n	800f948 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800f8fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800f8fe:	d81c      	bhi.n	800f93a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f900:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f904:	d010      	beq.n	800f928 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800f906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800f90a:	d816      	bhi.n	800f93a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d01d      	beq.n	800f94c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800f910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f914:	d111      	bne.n	800f93a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	3304      	adds	r3, #4
 800f91a:	2101      	movs	r1, #1
 800f91c:	4618      	mov	r0, r3
 800f91e:	f001 fd39 	bl	8011394 <RCCEx_PLL2_Config>
 800f922:	4603      	mov	r3, r0
 800f924:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f926:	e012      	b.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	3324      	adds	r3, #36	; 0x24
 800f92c:	2101      	movs	r1, #1
 800f92e:	4618      	mov	r0, r3
 800f930:	f001 fde2 	bl	80114f8 <RCCEx_PLL3_Config>
 800f934:	4603      	mov	r3, r0
 800f936:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800f938:	e009      	b.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800f93a:	2301      	movs	r3, #1
 800f93c:	75fb      	strb	r3, [r7, #23]
      break;
 800f93e:	e006      	b.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f940:	bf00      	nop
 800f942:	e004      	b.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f944:	bf00      	nop
 800f946:	e002      	b.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f948:	bf00      	nop
 800f94a:	e000      	b.n	800f94e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800f94c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f94e:	7dfb      	ldrb	r3, [r7, #23]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d109      	bne.n	800f968 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800f954:	4b54      	ldr	r3, [pc, #336]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f958:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f960:	4951      	ldr	r1, [pc, #324]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f962:	4313      	orrs	r3, r2
 800f964:	650b      	str	r3, [r1, #80]	; 0x50
 800f966:	e001      	b.n	800f96c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800f968:	7dfb      	ldrb	r3, [r7, #23]
 800f96a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f974:	2b00      	cmp	r3, #0
 800f976:	d04b      	beq.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f97e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f982:	d02e      	beq.n	800f9e2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800f984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f988:	d828      	bhi.n	800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f98a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f98e:	d02a      	beq.n	800f9e6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800f990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f994:	d822      	bhi.n	800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f996:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f99a:	d026      	beq.n	800f9ea <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800f99c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800f9a0:	d81c      	bhi.n	800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f9a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9a6:	d010      	beq.n	800f9ca <HAL_RCCEx_PeriphCLKConfig+0x496>
 800f9a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f9ac:	d816      	bhi.n	800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d01d      	beq.n	800f9ee <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800f9b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f9b6:	d111      	bne.n	800f9dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	3304      	adds	r3, #4
 800f9bc:	2101      	movs	r1, #1
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f001 fce8 	bl	8011394 <RCCEx_PLL2_Config>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f9c8:	e012      	b.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	3324      	adds	r3, #36	; 0x24
 800f9ce:	2101      	movs	r1, #1
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f001 fd91 	bl	80114f8 <RCCEx_PLL3_Config>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800f9da:	e009      	b.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800f9dc:	2301      	movs	r3, #1
 800f9de:	75fb      	strb	r3, [r7, #23]
      break;
 800f9e0:	e006      	b.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f9e2:	bf00      	nop
 800f9e4:	e004      	b.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f9e6:	bf00      	nop
 800f9e8:	e002      	b.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f9ea:	bf00      	nop
 800f9ec:	e000      	b.n	800f9f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800f9ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800f9f0:	7dfb      	ldrb	r3, [r7, #23]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d10a      	bne.n	800fa0c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800f9f6:	4b2c      	ldr	r3, [pc, #176]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800f9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f9fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800fa04:	4928      	ldr	r1, [pc, #160]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800fa06:	4313      	orrs	r3, r2
 800fa08:	658b      	str	r3, [r1, #88]	; 0x58
 800fa0a:	e001      	b.n	800fa10 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa0c:	7dfb      	ldrb	r3, [r7, #23]
 800fa0e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d02f      	beq.n	800fa7c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa24:	d00e      	beq.n	800fa44 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800fa26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fa2a:	d814      	bhi.n	800fa56 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d015      	beq.n	800fa5c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800fa30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa34:	d10f      	bne.n	800fa56 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fa36:	4b1c      	ldr	r3, [pc, #112]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800fa38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa3a:	4a1b      	ldr	r2, [pc, #108]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800fa3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fa40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800fa42:	e00c      	b.n	800fa5e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	3304      	adds	r3, #4
 800fa48:	2101      	movs	r1, #1
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f001 fca2 	bl	8011394 <RCCEx_PLL2_Config>
 800fa50:	4603      	mov	r3, r0
 800fa52:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800fa54:	e003      	b.n	800fa5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fa56:	2301      	movs	r3, #1
 800fa58:	75fb      	strb	r3, [r7, #23]
      break;
 800fa5a:	e000      	b.n	800fa5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800fa5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fa5e:	7dfb      	ldrb	r3, [r7, #23]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d109      	bne.n	800fa78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800fa64:	4b10      	ldr	r3, [pc, #64]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800fa66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fa68:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa70:	490d      	ldr	r1, [pc, #52]	; (800faa8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800fa72:	4313      	orrs	r3, r2
 800fa74:	650b      	str	r3, [r1, #80]	; 0x50
 800fa76:	e001      	b.n	800fa7c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fa78:	7dfb      	ldrb	r3, [r7, #23]
 800fa7a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d034      	beq.n	800faf2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa8c:	2b03      	cmp	r3, #3
 800fa8e:	d81d      	bhi.n	800facc <HAL_RCCEx_PeriphCLKConfig+0x598>
 800fa90:	a201      	add	r2, pc, #4	; (adr r2, 800fa98 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800fa92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa96:	bf00      	nop
 800fa98:	0800fad3 	.word	0x0800fad3
 800fa9c:	0800faad 	.word	0x0800faad
 800faa0:	0800fabb 	.word	0x0800fabb
 800faa4:	0800fad3 	.word	0x0800fad3
 800faa8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800faac:	4bb1      	ldr	r3, [pc, #708]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800faae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fab0:	4ab0      	ldr	r2, [pc, #704]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800fab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800fab8:	e00c      	b.n	800fad4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	3304      	adds	r3, #4
 800fabe:	2102      	movs	r1, #2
 800fac0:	4618      	mov	r0, r3
 800fac2:	f001 fc67 	bl	8011394 <RCCEx_PLL2_Config>
 800fac6:	4603      	mov	r3, r0
 800fac8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800faca:	e003      	b.n	800fad4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800facc:	2301      	movs	r3, #1
 800face:	75fb      	strb	r3, [r7, #23]
      break;
 800fad0:	e000      	b.n	800fad4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800fad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fad4:	7dfb      	ldrb	r3, [r7, #23]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d109      	bne.n	800faee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800fada:	4ba6      	ldr	r3, [pc, #664]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fadc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fade:	f023 0203 	bic.w	r2, r3, #3
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fae6:	49a3      	ldr	r1, [pc, #652]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fae8:	4313      	orrs	r3, r2
 800faea:	64cb      	str	r3, [r1, #76]	; 0x4c
 800faec:	e001      	b.n	800faf2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800faee:	7dfb      	ldrb	r3, [r7, #23]
 800faf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	f000 8086 	beq.w	800fc0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fb00:	4b9d      	ldr	r3, [pc, #628]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a9c      	ldr	r2, [pc, #624]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800fb06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fb0c:	f7f7 fd1c 	bl	8007548 <HAL_GetTick>
 800fb10:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fb12:	e009      	b.n	800fb28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fb14:	f7f7 fd18 	bl	8007548 <HAL_GetTick>
 800fb18:	4602      	mov	r2, r0
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	1ad3      	subs	r3, r2, r3
 800fb1e:	2b64      	cmp	r3, #100	; 0x64
 800fb20:	d902      	bls.n	800fb28 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800fb22:	2303      	movs	r3, #3
 800fb24:	75fb      	strb	r3, [r7, #23]
        break;
 800fb26:	e005      	b.n	800fb34 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fb28:	4b93      	ldr	r3, [pc, #588]	; (800fd78 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d0ef      	beq.n	800fb14 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800fb34:	7dfb      	ldrb	r3, [r7, #23]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d166      	bne.n	800fc08 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800fb3a:	4b8e      	ldr	r3, [pc, #568]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fb44:	4053      	eors	r3, r2
 800fb46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d013      	beq.n	800fb76 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800fb4e:	4b89      	ldr	r3, [pc, #548]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb56:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fb58:	4b86      	ldr	r3, [pc, #536]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb5c:	4a85      	ldr	r2, [pc, #532]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fb62:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fb64:	4b83      	ldr	r3, [pc, #524]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb68:	4a82      	ldr	r2, [pc, #520]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fb6e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800fb70:	4a80      	ldr	r2, [pc, #512]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fb7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb80:	d115      	bne.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb82:	f7f7 fce1 	bl	8007548 <HAL_GetTick>
 800fb86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fb88:	e00b      	b.n	800fba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fb8a:	f7f7 fcdd 	bl	8007548 <HAL_GetTick>
 800fb8e:	4602      	mov	r2, r0
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	1ad3      	subs	r3, r2, r3
 800fb94:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d902      	bls.n	800fba2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800fb9c:	2303      	movs	r3, #3
 800fb9e:	75fb      	strb	r3, [r7, #23]
            break;
 800fba0:	e005      	b.n	800fbae <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fba2:	4b74      	ldr	r3, [pc, #464]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fba6:	f003 0302 	and.w	r3, r3, #2
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d0ed      	beq.n	800fb8a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800fbae:	7dfb      	ldrb	r3, [r7, #23]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d126      	bne.n	800fc02 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fbba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fbc2:	d10d      	bne.n	800fbe0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800fbc4:	4b6b      	ldr	r3, [pc, #428]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbc6:	691b      	ldr	r3, [r3, #16]
 800fbc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fbd2:	0919      	lsrs	r1, r3, #4
 800fbd4:	4b69      	ldr	r3, [pc, #420]	; (800fd7c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800fbd6:	400b      	ands	r3, r1
 800fbd8:	4966      	ldr	r1, [pc, #408]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	610b      	str	r3, [r1, #16]
 800fbde:	e005      	b.n	800fbec <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800fbe0:	4b64      	ldr	r3, [pc, #400]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbe2:	691b      	ldr	r3, [r3, #16]
 800fbe4:	4a63      	ldr	r2, [pc, #396]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbe6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fbea:	6113      	str	r3, [r2, #16]
 800fbec:	4b61      	ldr	r3, [pc, #388]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fbf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fbfa:	495e      	ldr	r1, [pc, #376]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fbfc:	4313      	orrs	r3, r2
 800fbfe:	670b      	str	r3, [r1, #112]	; 0x70
 800fc00:	e004      	b.n	800fc0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800fc02:	7dfb      	ldrb	r3, [r7, #23]
 800fc04:	75bb      	strb	r3, [r7, #22]
 800fc06:	e001      	b.n	800fc0c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fc08:	7dfb      	ldrb	r3, [r7, #23]
 800fc0a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f003 0301 	and.w	r3, r3, #1
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d07e      	beq.n	800fd16 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc1c:	2b28      	cmp	r3, #40	; 0x28
 800fc1e:	d867      	bhi.n	800fcf0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800fc20:	a201      	add	r2, pc, #4	; (adr r2, 800fc28 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800fc22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc26:	bf00      	nop
 800fc28:	0800fcf7 	.word	0x0800fcf7
 800fc2c:	0800fcf1 	.word	0x0800fcf1
 800fc30:	0800fcf1 	.word	0x0800fcf1
 800fc34:	0800fcf1 	.word	0x0800fcf1
 800fc38:	0800fcf1 	.word	0x0800fcf1
 800fc3c:	0800fcf1 	.word	0x0800fcf1
 800fc40:	0800fcf1 	.word	0x0800fcf1
 800fc44:	0800fcf1 	.word	0x0800fcf1
 800fc48:	0800fccd 	.word	0x0800fccd
 800fc4c:	0800fcf1 	.word	0x0800fcf1
 800fc50:	0800fcf1 	.word	0x0800fcf1
 800fc54:	0800fcf1 	.word	0x0800fcf1
 800fc58:	0800fcf1 	.word	0x0800fcf1
 800fc5c:	0800fcf1 	.word	0x0800fcf1
 800fc60:	0800fcf1 	.word	0x0800fcf1
 800fc64:	0800fcf1 	.word	0x0800fcf1
 800fc68:	0800fcdf 	.word	0x0800fcdf
 800fc6c:	0800fcf1 	.word	0x0800fcf1
 800fc70:	0800fcf1 	.word	0x0800fcf1
 800fc74:	0800fcf1 	.word	0x0800fcf1
 800fc78:	0800fcf1 	.word	0x0800fcf1
 800fc7c:	0800fcf1 	.word	0x0800fcf1
 800fc80:	0800fcf1 	.word	0x0800fcf1
 800fc84:	0800fcf1 	.word	0x0800fcf1
 800fc88:	0800fcf7 	.word	0x0800fcf7
 800fc8c:	0800fcf1 	.word	0x0800fcf1
 800fc90:	0800fcf1 	.word	0x0800fcf1
 800fc94:	0800fcf1 	.word	0x0800fcf1
 800fc98:	0800fcf1 	.word	0x0800fcf1
 800fc9c:	0800fcf1 	.word	0x0800fcf1
 800fca0:	0800fcf1 	.word	0x0800fcf1
 800fca4:	0800fcf1 	.word	0x0800fcf1
 800fca8:	0800fcf7 	.word	0x0800fcf7
 800fcac:	0800fcf1 	.word	0x0800fcf1
 800fcb0:	0800fcf1 	.word	0x0800fcf1
 800fcb4:	0800fcf1 	.word	0x0800fcf1
 800fcb8:	0800fcf1 	.word	0x0800fcf1
 800fcbc:	0800fcf1 	.word	0x0800fcf1
 800fcc0:	0800fcf1 	.word	0x0800fcf1
 800fcc4:	0800fcf1 	.word	0x0800fcf1
 800fcc8:	0800fcf7 	.word	0x0800fcf7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	3304      	adds	r3, #4
 800fcd0:	2101      	movs	r1, #1
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f001 fb5e 	bl	8011394 <RCCEx_PLL2_Config>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800fcdc:	e00c      	b.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	3324      	adds	r3, #36	; 0x24
 800fce2:	2101      	movs	r1, #1
 800fce4:	4618      	mov	r0, r3
 800fce6:	f001 fc07 	bl	80114f8 <RCCEx_PLL3_Config>
 800fcea:	4603      	mov	r3, r0
 800fcec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800fcee:	e003      	b.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fcf0:	2301      	movs	r3, #1
 800fcf2:	75fb      	strb	r3, [r7, #23]
      break;
 800fcf4:	e000      	b.n	800fcf8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800fcf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fcf8:	7dfb      	ldrb	r3, [r7, #23]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d109      	bne.n	800fd12 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800fcfe:	4b1d      	ldr	r3, [pc, #116]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd02:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd0a:	491a      	ldr	r1, [pc, #104]	; (800fd74 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800fd0c:	4313      	orrs	r3, r2
 800fd0e:	654b      	str	r3, [r1, #84]	; 0x54
 800fd10:	e001      	b.n	800fd16 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd12:	7dfb      	ldrb	r3, [r7, #23]
 800fd14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	f003 0302 	and.w	r3, r3, #2
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d03e      	beq.n	800fda0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd26:	2b05      	cmp	r3, #5
 800fd28:	d820      	bhi.n	800fd6c <HAL_RCCEx_PeriphCLKConfig+0x838>
 800fd2a:	a201      	add	r2, pc, #4	; (adr r2, 800fd30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800fd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd30:	0800fd81 	.word	0x0800fd81
 800fd34:	0800fd49 	.word	0x0800fd49
 800fd38:	0800fd5b 	.word	0x0800fd5b
 800fd3c:	0800fd81 	.word	0x0800fd81
 800fd40:	0800fd81 	.word	0x0800fd81
 800fd44:	0800fd81 	.word	0x0800fd81
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	3304      	adds	r3, #4
 800fd4c:	2101      	movs	r1, #1
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f001 fb20 	bl	8011394 <RCCEx_PLL2_Config>
 800fd54:	4603      	mov	r3, r0
 800fd56:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800fd58:	e013      	b.n	800fd82 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	3324      	adds	r3, #36	; 0x24
 800fd5e:	2101      	movs	r1, #1
 800fd60:	4618      	mov	r0, r3
 800fd62:	f001 fbc9 	bl	80114f8 <RCCEx_PLL3_Config>
 800fd66:	4603      	mov	r3, r0
 800fd68:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800fd6a:	e00a      	b.n	800fd82 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	75fb      	strb	r3, [r7, #23]
      break;
 800fd70:	e007      	b.n	800fd82 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800fd72:	bf00      	nop
 800fd74:	58024400 	.word	0x58024400
 800fd78:	58024800 	.word	0x58024800
 800fd7c:	00ffffcf 	.word	0x00ffffcf
      break;
 800fd80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fd82:	7dfb      	ldrb	r3, [r7, #23]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d109      	bne.n	800fd9c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800fd88:	4b9f      	ldr	r3, [pc, #636]	; (8010008 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fd8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd8c:	f023 0207 	bic.w	r2, r3, #7
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd94:	499c      	ldr	r1, [pc, #624]	; (8010008 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fd96:	4313      	orrs	r3, r2
 800fd98:	654b      	str	r3, [r1, #84]	; 0x54
 800fd9a:	e001      	b.n	800fda0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd9c:	7dfb      	ldrb	r3, [r7, #23]
 800fd9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	f003 0304 	and.w	r3, r3, #4
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d039      	beq.n	800fe20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fdb2:	2b05      	cmp	r3, #5
 800fdb4:	d820      	bhi.n	800fdf8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800fdb6:	a201      	add	r2, pc, #4	; (adr r2, 800fdbc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800fdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdbc:	0800fdff 	.word	0x0800fdff
 800fdc0:	0800fdd5 	.word	0x0800fdd5
 800fdc4:	0800fde7 	.word	0x0800fde7
 800fdc8:	0800fdff 	.word	0x0800fdff
 800fdcc:	0800fdff 	.word	0x0800fdff
 800fdd0:	0800fdff 	.word	0x0800fdff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	3304      	adds	r3, #4
 800fdd8:	2101      	movs	r1, #1
 800fdda:	4618      	mov	r0, r3
 800fddc:	f001 fada 	bl	8011394 <RCCEx_PLL2_Config>
 800fde0:	4603      	mov	r3, r0
 800fde2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800fde4:	e00c      	b.n	800fe00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	3324      	adds	r3, #36	; 0x24
 800fdea:	2101      	movs	r1, #1
 800fdec:	4618      	mov	r0, r3
 800fdee:	f001 fb83 	bl	80114f8 <RCCEx_PLL3_Config>
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800fdf6:	e003      	b.n	800fe00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	75fb      	strb	r3, [r7, #23]
      break;
 800fdfc:	e000      	b.n	800fe00 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800fdfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fe00:	7dfb      	ldrb	r3, [r7, #23]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d10a      	bne.n	800fe1c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fe06:	4b80      	ldr	r3, [pc, #512]	; (8010008 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fe08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe0a:	f023 0207 	bic.w	r2, r3, #7
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe14:	497c      	ldr	r1, [pc, #496]	; (8010008 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fe16:	4313      	orrs	r3, r2
 800fe18:	658b      	str	r3, [r1, #88]	; 0x58
 800fe1a:	e001      	b.n	800fe20 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe1c:	7dfb      	ldrb	r3, [r7, #23]
 800fe1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	f003 0320 	and.w	r3, r3, #32
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d04b      	beq.n	800fec4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fe36:	d02e      	beq.n	800fe96 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800fe38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800fe3c:	d828      	bhi.n	800fe90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fe3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe42:	d02a      	beq.n	800fe9a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800fe44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe48:	d822      	bhi.n	800fe90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fe4a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fe4e:	d026      	beq.n	800fe9e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800fe50:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800fe54:	d81c      	bhi.n	800fe90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fe56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe5a:	d010      	beq.n	800fe7e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800fe5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800fe60:	d816      	bhi.n	800fe90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d01d      	beq.n	800fea2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800fe66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fe6a:	d111      	bne.n	800fe90 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	3304      	adds	r3, #4
 800fe70:	2100      	movs	r1, #0
 800fe72:	4618      	mov	r0, r3
 800fe74:	f001 fa8e 	bl	8011394 <RCCEx_PLL2_Config>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800fe7c:	e012      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	3324      	adds	r3, #36	; 0x24
 800fe82:	2102      	movs	r1, #2
 800fe84:	4618      	mov	r0, r3
 800fe86:	f001 fb37 	bl	80114f8 <RCCEx_PLL3_Config>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800fe8e:	e009      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fe90:	2301      	movs	r3, #1
 800fe92:	75fb      	strb	r3, [r7, #23]
      break;
 800fe94:	e006      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fe96:	bf00      	nop
 800fe98:	e004      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fe9a:	bf00      	nop
 800fe9c:	e002      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fe9e:	bf00      	nop
 800fea0:	e000      	b.n	800fea4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800fea2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fea4:	7dfb      	ldrb	r3, [r7, #23]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d10a      	bne.n	800fec0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800feaa:	4b57      	ldr	r3, [pc, #348]	; (8010008 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800feac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800feae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800feb8:	4953      	ldr	r1, [pc, #332]	; (8010008 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800feba:	4313      	orrs	r3, r2
 800febc:	654b      	str	r3, [r1, #84]	; 0x54
 800febe:	e001      	b.n	800fec4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fec0:	7dfb      	ldrb	r3, [r7, #23]
 800fec2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d04b      	beq.n	800ff68 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fed6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800feda:	d02e      	beq.n	800ff3a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800fedc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800fee0:	d828      	bhi.n	800ff34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800fee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fee6:	d02a      	beq.n	800ff3e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800fee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800feec:	d822      	bhi.n	800ff34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800feee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fef2:	d026      	beq.n	800ff42 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800fef4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800fef8:	d81c      	bhi.n	800ff34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800fefa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fefe:	d010      	beq.n	800ff22 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800ff00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ff04:	d816      	bhi.n	800ff34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d01d      	beq.n	800ff46 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800ff0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ff0e:	d111      	bne.n	800ff34 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	3304      	adds	r3, #4
 800ff14:	2100      	movs	r1, #0
 800ff16:	4618      	mov	r0, r3
 800ff18:	f001 fa3c 	bl	8011394 <RCCEx_PLL2_Config>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ff20:	e012      	b.n	800ff48 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	3324      	adds	r3, #36	; 0x24
 800ff26:	2102      	movs	r1, #2
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f001 fae5 	bl	80114f8 <RCCEx_PLL3_Config>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800ff32:	e009      	b.n	800ff48 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ff34:	2301      	movs	r3, #1
 800ff36:	75fb      	strb	r3, [r7, #23]
      break;
 800ff38:	e006      	b.n	800ff48 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ff3a:	bf00      	nop
 800ff3c:	e004      	b.n	800ff48 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ff3e:	bf00      	nop
 800ff40:	e002      	b.n	800ff48 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ff42:	bf00      	nop
 800ff44:	e000      	b.n	800ff48 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800ff46:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ff48:	7dfb      	ldrb	r3, [r7, #23]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d10a      	bne.n	800ff64 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ff4e:	4b2e      	ldr	r3, [pc, #184]	; (8010008 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ff50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ff52:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ff5c:	492a      	ldr	r1, [pc, #168]	; (8010008 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	658b      	str	r3, [r1, #88]	; 0x58
 800ff62:	e001      	b.n	800ff68 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ff64:	7dfb      	ldrb	r3, [r7, #23]
 800ff66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d04d      	beq.n	8010010 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ff7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ff7e:	d02e      	beq.n	800ffde <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800ff80:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ff84:	d828      	bhi.n	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ff86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff8a:	d02a      	beq.n	800ffe2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800ff8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff90:	d822      	bhi.n	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ff92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ff96:	d026      	beq.n	800ffe6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800ff98:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ff9c:	d81c      	bhi.n	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ff9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ffa2:	d010      	beq.n	800ffc6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800ffa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ffa8:	d816      	bhi.n	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d01d      	beq.n	800ffea <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800ffae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ffb2:	d111      	bne.n	800ffd8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	3304      	adds	r3, #4
 800ffb8:	2100      	movs	r1, #0
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f001 f9ea 	bl	8011394 <RCCEx_PLL2_Config>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ffc4:	e012      	b.n	800ffec <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	3324      	adds	r3, #36	; 0x24
 800ffca:	2102      	movs	r1, #2
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f001 fa93 	bl	80114f8 <RCCEx_PLL3_Config>
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ffd6:	e009      	b.n	800ffec <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	75fb      	strb	r3, [r7, #23]
      break;
 800ffdc:	e006      	b.n	800ffec <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ffde:	bf00      	nop
 800ffe0:	e004      	b.n	800ffec <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ffe2:	bf00      	nop
 800ffe4:	e002      	b.n	800ffec <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ffe6:	bf00      	nop
 800ffe8:	e000      	b.n	800ffec <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800ffea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ffec:	7dfb      	ldrb	r3, [r7, #23]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d10c      	bne.n	801000c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800fff2:	4b05      	ldr	r3, [pc, #20]	; (8010008 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800fff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fff6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010000:	4901      	ldr	r1, [pc, #4]	; (8010008 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8010002:	4313      	orrs	r3, r2
 8010004:	658b      	str	r3, [r1, #88]	; 0x58
 8010006:	e003      	b.n	8010010 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8010008:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801000c:	7dfb      	ldrb	r3, [r7, #23]
 801000e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f003 0308 	and.w	r3, r3, #8
 8010018:	2b00      	cmp	r3, #0
 801001a:	d018      	beq.n	801004e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010024:	d10a      	bne.n	801003c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	3324      	adds	r3, #36	; 0x24
 801002a:	2102      	movs	r1, #2
 801002c:	4618      	mov	r0, r3
 801002e:	f001 fa63 	bl	80114f8 <RCCEx_PLL3_Config>
 8010032:	4603      	mov	r3, r0
 8010034:	2b00      	cmp	r3, #0
 8010036:	d001      	beq.n	801003c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8010038:	2301      	movs	r3, #1
 801003a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 801003c:	4b8a      	ldr	r3, [pc, #552]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801003e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010040:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010048:	4987      	ldr	r1, [pc, #540]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801004a:	4313      	orrs	r3, r2
 801004c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	f003 0310 	and.w	r3, r3, #16
 8010056:	2b00      	cmp	r3, #0
 8010058:	d01a      	beq.n	8010090 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010064:	d10a      	bne.n	801007c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	3324      	adds	r3, #36	; 0x24
 801006a:	2102      	movs	r1, #2
 801006c:	4618      	mov	r0, r3
 801006e:	f001 fa43 	bl	80114f8 <RCCEx_PLL3_Config>
 8010072:	4603      	mov	r3, r0
 8010074:	2b00      	cmp	r3, #0
 8010076:	d001      	beq.n	801007c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8010078:	2301      	movs	r3, #1
 801007a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801007c:	4b7a      	ldr	r3, [pc, #488]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801007e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801008a:	4977      	ldr	r1, [pc, #476]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801008c:	4313      	orrs	r3, r2
 801008e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010098:	2b00      	cmp	r3, #0
 801009a:	d034      	beq.n	8010106 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80100a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80100a6:	d01d      	beq.n	80100e4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80100a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80100ac:	d817      	bhi.n	80100de <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d003      	beq.n	80100ba <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80100b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100b6:	d009      	beq.n	80100cc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80100b8:	e011      	b.n	80100de <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	3304      	adds	r3, #4
 80100be:	2100      	movs	r1, #0
 80100c0:	4618      	mov	r0, r3
 80100c2:	f001 f967 	bl	8011394 <RCCEx_PLL2_Config>
 80100c6:	4603      	mov	r3, r0
 80100c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80100ca:	e00c      	b.n	80100e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	3324      	adds	r3, #36	; 0x24
 80100d0:	2102      	movs	r1, #2
 80100d2:	4618      	mov	r0, r3
 80100d4:	f001 fa10 	bl	80114f8 <RCCEx_PLL3_Config>
 80100d8:	4603      	mov	r3, r0
 80100da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80100dc:	e003      	b.n	80100e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80100de:	2301      	movs	r3, #1
 80100e0:	75fb      	strb	r3, [r7, #23]
      break;
 80100e2:	e000      	b.n	80100e6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80100e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80100e6:	7dfb      	ldrb	r3, [r7, #23]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d10a      	bne.n	8010102 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80100ec:	4b5e      	ldr	r3, [pc, #376]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80100ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80100f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80100fa:	495b      	ldr	r1, [pc, #364]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80100fc:	4313      	orrs	r3, r2
 80100fe:	658b      	str	r3, [r1, #88]	; 0x58
 8010100:	e001      	b.n	8010106 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010102:	7dfb      	ldrb	r3, [r7, #23]
 8010104:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801010e:	2b00      	cmp	r3, #0
 8010110:	d033      	beq.n	801017a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010118:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801011c:	d01c      	beq.n	8010158 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 801011e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010122:	d816      	bhi.n	8010152 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8010124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010128:	d003      	beq.n	8010132 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 801012a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801012e:	d007      	beq.n	8010140 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8010130:	e00f      	b.n	8010152 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010132:	4b4d      	ldr	r3, [pc, #308]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010136:	4a4c      	ldr	r2, [pc, #304]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801013c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 801013e:	e00c      	b.n	801015a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	3324      	adds	r3, #36	; 0x24
 8010144:	2101      	movs	r1, #1
 8010146:	4618      	mov	r0, r3
 8010148:	f001 f9d6 	bl	80114f8 <RCCEx_PLL3_Config>
 801014c:	4603      	mov	r3, r0
 801014e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8010150:	e003      	b.n	801015a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010152:	2301      	movs	r3, #1
 8010154:	75fb      	strb	r3, [r7, #23]
      break;
 8010156:	e000      	b.n	801015a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8010158:	bf00      	nop
    }

    if(ret == HAL_OK)
 801015a:	7dfb      	ldrb	r3, [r7, #23]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d10a      	bne.n	8010176 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8010160:	4b41      	ldr	r3, [pc, #260]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010164:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801016e:	493e      	ldr	r1, [pc, #248]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010170:	4313      	orrs	r3, r2
 8010172:	654b      	str	r3, [r1, #84]	; 0x54
 8010174:	e001      	b.n	801017a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010176:	7dfb      	ldrb	r3, [r7, #23]
 8010178:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010182:	2b00      	cmp	r3, #0
 8010184:	d029      	beq.n	80101da <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801018a:	2b00      	cmp	r3, #0
 801018c:	d003      	beq.n	8010196 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 801018e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010192:	d007      	beq.n	80101a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8010194:	e00f      	b.n	80101b6 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010196:	4b34      	ldr	r3, [pc, #208]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801019a:	4a33      	ldr	r2, [pc, #204]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 801019c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80101a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80101a2:	e00b      	b.n	80101bc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	3304      	adds	r3, #4
 80101a8:	2102      	movs	r1, #2
 80101aa:	4618      	mov	r0, r3
 80101ac:	f001 f8f2 	bl	8011394 <RCCEx_PLL2_Config>
 80101b0:	4603      	mov	r3, r0
 80101b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80101b4:	e002      	b.n	80101bc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 80101b6:	2301      	movs	r3, #1
 80101b8:	75fb      	strb	r3, [r7, #23]
      break;
 80101ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80101bc:	7dfb      	ldrb	r3, [r7, #23]
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d109      	bne.n	80101d6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80101c2:	4b29      	ldr	r3, [pc, #164]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80101c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80101ce:	4926      	ldr	r1, [pc, #152]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 80101d0:	4313      	orrs	r3, r2
 80101d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80101d4:	e001      	b.n	80101da <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101d6:	7dfb      	ldrb	r3, [r7, #23]
 80101d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00a      	beq.n	80101fc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	3324      	adds	r3, #36	; 0x24
 80101ea:	2102      	movs	r1, #2
 80101ec:	4618      	mov	r0, r3
 80101ee:	f001 f983 	bl	80114f8 <RCCEx_PLL3_Config>
 80101f2:	4603      	mov	r3, r0
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d001      	beq.n	80101fc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 80101f8:	2301      	movs	r3, #1
 80101fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010204:	2b00      	cmp	r3, #0
 8010206:	d033      	beq.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801020c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010210:	d017      	beq.n	8010242 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8010212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010216:	d811      	bhi.n	801023c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8010218:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801021c:	d013      	beq.n	8010246 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 801021e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010222:	d80b      	bhi.n	801023c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8010224:	2b00      	cmp	r3, #0
 8010226:	d010      	beq.n	801024a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8010228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801022c:	d106      	bne.n	801023c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801022e:	4b0e      	ldr	r3, [pc, #56]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010232:	4a0d      	ldr	r2, [pc, #52]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010238:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 801023a:	e007      	b.n	801024c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801023c:	2301      	movs	r3, #1
 801023e:	75fb      	strb	r3, [r7, #23]
      break;
 8010240:	e004      	b.n	801024c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8010242:	bf00      	nop
 8010244:	e002      	b.n	801024c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8010246:	bf00      	nop
 8010248:	e000      	b.n	801024c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 801024a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801024c:	7dfb      	ldrb	r3, [r7, #23]
 801024e:	2b00      	cmp	r3, #0
 8010250:	d10c      	bne.n	801026c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8010252:	4b05      	ldr	r3, [pc, #20]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010256:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801025e:	4902      	ldr	r1, [pc, #8]	; (8010268 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8010260:	4313      	orrs	r3, r2
 8010262:	654b      	str	r3, [r1, #84]	; 0x54
 8010264:	e004      	b.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8010266:	bf00      	nop
 8010268:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801026c:	7dfb      	ldrb	r3, [r7, #23]
 801026e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010278:	2b00      	cmp	r3, #0
 801027a:	d008      	beq.n	801028e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801027c:	4b29      	ldr	r3, [pc, #164]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801027e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010280:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010288:	4926      	ldr	r1, [pc, #152]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801028a:	4313      	orrs	r3, r2
 801028c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010296:	2b00      	cmp	r3, #0
 8010298:	d008      	beq.n	80102ac <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801029a:	4b22      	ldr	r3, [pc, #136]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801029c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801029e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102a6:	491f      	ldr	r1, [pc, #124]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102a8:	4313      	orrs	r3, r2
 80102aa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d00d      	beq.n	80102d4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80102b8:	4b1a      	ldr	r3, [pc, #104]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102ba:	691b      	ldr	r3, [r3, #16]
 80102bc:	4a19      	ldr	r2, [pc, #100]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80102c2:	6113      	str	r3, [r2, #16]
 80102c4:	4b17      	ldr	r3, [pc, #92]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102c6:	691a      	ldr	r2, [r3, #16]
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80102ce:	4915      	ldr	r1, [pc, #84]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102d0:	4313      	orrs	r3, r2
 80102d2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	da08      	bge.n	80102ee <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80102dc:	4b11      	ldr	r3, [pc, #68]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80102e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80102e8:	490e      	ldr	r1, [pc, #56]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102ea:	4313      	orrs	r3, r2
 80102ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d009      	beq.n	801030e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80102fa:	4b0a      	ldr	r3, [pc, #40]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80102fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010308:	4906      	ldr	r1, [pc, #24]	; (8010324 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 801030a:	4313      	orrs	r3, r2
 801030c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 801030e:	7dbb      	ldrb	r3, [r7, #22]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d101      	bne.n	8010318 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8010314:	2300      	movs	r3, #0
 8010316:	e000      	b.n	801031a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8010318:	2301      	movs	r3, #1
}
 801031a:	4618      	mov	r0, r3
 801031c:	3718      	adds	r7, #24
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	58024400 	.word	0x58024400

08010328 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b090      	sub	sp, #64	; 0x40
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010336:	f040 8089 	bne.w	801044c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 801033a:	4b95      	ldr	r3, [pc, #596]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 801033c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801033e:	f003 0307 	and.w	r3, r3, #7
 8010342:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8010344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010346:	2b04      	cmp	r3, #4
 8010348:	d87d      	bhi.n	8010446 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 801034a:	a201      	add	r2, pc, #4	; (adr r2, 8010350 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 801034c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010350:	08010365 	.word	0x08010365
 8010354:	08010389 	.word	0x08010389
 8010358:	080103ad 	.word	0x080103ad
 801035c:	08010441 	.word	0x08010441
 8010360:	080103d1 	.word	0x080103d1
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010364:	4b8a      	ldr	r3, [pc, #552]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801036c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010370:	d107      	bne.n	8010382 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010376:	4618      	mov	r0, r3
 8010378:	f000 feba 	bl	80110f0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 801037c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801037e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010380:	e3ef      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010382:	2300      	movs	r3, #0
 8010384:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010386:	e3ec      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010388:	4b81      	ldr	r3, [pc, #516]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010394:	d107      	bne.n	80103a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010396:	f107 0318 	add.w	r3, r7, #24
 801039a:	4618      	mov	r0, r3
 801039c:	f000 fc00 	bl	8010ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80103a4:	e3dd      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80103a6:	2300      	movs	r3, #0
 80103a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80103aa:	e3da      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80103ac:	4b78      	ldr	r3, [pc, #480]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80103b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80103b8:	d107      	bne.n	80103ca <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103ba:	f107 030c 	add.w	r3, r7, #12
 80103be:	4618      	mov	r0, r3
 80103c0:	f000 fd42 	bl	8010e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80103c8:	e3cb      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80103ce:	e3c8      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80103d0:	4b6f      	ldr	r3, [pc, #444]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80103d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80103d8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80103da:	4b6d      	ldr	r3, [pc, #436]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	f003 0304 	and.w	r3, r3, #4
 80103e2:	2b04      	cmp	r3, #4
 80103e4:	d10c      	bne.n	8010400 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80103e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d109      	bne.n	8010400 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80103ec:	4b68      	ldr	r3, [pc, #416]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	08db      	lsrs	r3, r3, #3
 80103f2:	f003 0303 	and.w	r3, r3, #3
 80103f6:	4a67      	ldr	r2, [pc, #412]	; (8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 80103f8:	fa22 f303 	lsr.w	r3, r2, r3
 80103fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80103fe:	e01e      	b.n	801043e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010400:	4b63      	ldr	r3, [pc, #396]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801040c:	d106      	bne.n	801041c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 801040e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010414:	d102      	bne.n	801041c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8010416:	4b60      	ldr	r3, [pc, #384]	; (8010598 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8010418:	63fb      	str	r3, [r7, #60]	; 0x3c
 801041a:	e010      	b.n	801043e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801041c:	4b5c      	ldr	r3, [pc, #368]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010424:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010428:	d106      	bne.n	8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 801042a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801042c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010430:	d102      	bne.n	8010438 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8010432:	4b5a      	ldr	r3, [pc, #360]	; (801059c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8010434:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010436:	e002      	b.n	801043e <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 801043c:	e391      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801043e:	e390      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8010440:	4b57      	ldr	r3, [pc, #348]	; (80105a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8010442:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010444:	e38d      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8010446:	2300      	movs	r3, #0
 8010448:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801044a:	e38a      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010452:	f040 80a7 	bne.w	80105a4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8010456:	4b4e      	ldr	r3, [pc, #312]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801045a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801045e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8010460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010462:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010466:	d054      	beq.n	8010512 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8010468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801046a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801046e:	f200 808b 	bhi.w	8010588 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8010472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010474:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010478:	f000 8083 	beq.w	8010582 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 801047c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801047e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010482:	f200 8081 	bhi.w	8010588 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8010486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010488:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801048c:	d02f      	beq.n	80104ee <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 801048e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010494:	d878      	bhi.n	8010588 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8010496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010498:	2b00      	cmp	r3, #0
 801049a:	d004      	beq.n	80104a6 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 801049c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801049e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80104a2:	d012      	beq.n	80104ca <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 80104a4:	e070      	b.n	8010588 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80104a6:	4b3a      	ldr	r3, [pc, #232]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80104b2:	d107      	bne.n	80104c4 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80104b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80104b8:	4618      	mov	r0, r3
 80104ba:	f000 fe19 	bl	80110f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80104be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80104c2:	e34e      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80104c4:	2300      	movs	r3, #0
 80104c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80104c8:	e34b      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80104ca:	4b31      	ldr	r3, [pc, #196]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80104d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80104d6:	d107      	bne.n	80104e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80104d8:	f107 0318 	add.w	r3, r7, #24
 80104dc:	4618      	mov	r0, r3
 80104de:	f000 fb5f 	bl	8010ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80104e2:	69bb      	ldr	r3, [r7, #24]
 80104e4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80104e6:	e33c      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80104e8:	2300      	movs	r3, #0
 80104ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80104ec:	e339      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80104ee:	4b28      	ldr	r3, [pc, #160]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80104f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80104fa:	d107      	bne.n	801050c <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80104fc:	f107 030c 	add.w	r3, r7, #12
 8010500:	4618      	mov	r0, r3
 8010502:	f000 fca1 	bl	8010e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801050a:	e32a      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801050c:	2300      	movs	r3, #0
 801050e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010510:	e327      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8010512:	4b1f      	ldr	r3, [pc, #124]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010516:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801051a:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801051c:	4b1c      	ldr	r3, [pc, #112]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f003 0304 	and.w	r3, r3, #4
 8010524:	2b04      	cmp	r3, #4
 8010526:	d10c      	bne.n	8010542 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8010528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052a:	2b00      	cmp	r3, #0
 801052c:	d109      	bne.n	8010542 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801052e:	4b18      	ldr	r3, [pc, #96]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	08db      	lsrs	r3, r3, #3
 8010534:	f003 0303 	and.w	r3, r3, #3
 8010538:	4a16      	ldr	r2, [pc, #88]	; (8010594 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 801053a:	fa22 f303 	lsr.w	r3, r2, r3
 801053e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010540:	e01e      	b.n	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8010542:	4b13      	ldr	r3, [pc, #76]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801054a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801054e:	d106      	bne.n	801055e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8010550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010552:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010556:	d102      	bne.n	801055e <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8010558:	4b0f      	ldr	r3, [pc, #60]	; (8010598 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 801055a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801055c:	e010      	b.n	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801055e:	4b0c      	ldr	r3, [pc, #48]	; (8010590 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801056a:	d106      	bne.n	801057a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 801056c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010572:	d102      	bne.n	801057a <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8010574:	4b09      	ldr	r3, [pc, #36]	; (801059c <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8010576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010578:	e002      	b.n	8010580 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 801057a:	2300      	movs	r3, #0
 801057c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 801057e:	e2f0      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010580:	e2ef      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8010582:	4b07      	ldr	r3, [pc, #28]	; (80105a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8010584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010586:	e2ec      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8010588:	2300      	movs	r3, #0
 801058a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801058c:	e2e9      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801058e:	bf00      	nop
 8010590:	58024400 	.word	0x58024400
 8010594:	03d09000 	.word	0x03d09000
 8010598:	003d0900 	.word	0x003d0900
 801059c:	017d7840 	.word	0x017d7840
 80105a0:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80105aa:	f040 809c 	bne.w	80106e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80105ae:	4b9d      	ldr	r3, [pc, #628]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80105b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105b2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80105b6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80105b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80105be:	d054      	beq.n	801066a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80105c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80105c6:	f200 808b 	bhi.w	80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80105ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80105d0:	f000 8083 	beq.w	80106da <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80105d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80105da:	f200 8081 	bhi.w	80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80105de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105e4:	d02f      	beq.n	8010646 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80105e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80105ec:	d878      	bhi.n	80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80105ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d004      	beq.n	80105fe <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80105f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80105fa:	d012      	beq.n	8010622 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80105fc:	e070      	b.n	80106e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80105fe:	4b89      	ldr	r3, [pc, #548]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010606:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801060a:	d107      	bne.n	801061c <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801060c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010610:	4618      	mov	r0, r3
 8010612:	f000 fd6d 	bl	80110f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010618:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801061a:	e2a2      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801061c:	2300      	movs	r3, #0
 801061e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010620:	e29f      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010622:	4b80      	ldr	r3, [pc, #512]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801062a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801062e:	d107      	bne.n	8010640 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010630:	f107 0318 	add.w	r3, r7, #24
 8010634:	4618      	mov	r0, r3
 8010636:	f000 fab3 	bl	8010ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 801063e:	e290      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010640:	2300      	movs	r3, #0
 8010642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010644:	e28d      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010646:	4b77      	ldr	r3, [pc, #476]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801064e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010652:	d107      	bne.n	8010664 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010654:	f107 030c 	add.w	r3, r7, #12
 8010658:	4618      	mov	r0, r3
 801065a:	f000 fbf5 	bl	8010e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010662:	e27e      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010664:	2300      	movs	r3, #0
 8010666:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010668:	e27b      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 801066a:	4b6e      	ldr	r3, [pc, #440]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 801066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801066e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010672:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8010674:	4b6b      	ldr	r3, [pc, #428]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	f003 0304 	and.w	r3, r3, #4
 801067c:	2b04      	cmp	r3, #4
 801067e:	d10c      	bne.n	801069a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8010680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010682:	2b00      	cmp	r3, #0
 8010684:	d109      	bne.n	801069a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010686:	4b67      	ldr	r3, [pc, #412]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	08db      	lsrs	r3, r3, #3
 801068c:	f003 0303 	and.w	r3, r3, #3
 8010690:	4a65      	ldr	r2, [pc, #404]	; (8010828 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8010692:	fa22 f303 	lsr.w	r3, r2, r3
 8010696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010698:	e01e      	b.n	80106d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801069a:	4b62      	ldr	r3, [pc, #392]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80106a6:	d106      	bne.n	80106b6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 80106a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80106ae:	d102      	bne.n	80106b6 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80106b0:	4b5e      	ldr	r3, [pc, #376]	; (801082c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80106b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106b4:	e010      	b.n	80106d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80106b6:	4b5b      	ldr	r3, [pc, #364]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80106c2:	d106      	bne.n	80106d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80106c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80106ca:	d102      	bne.n	80106d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80106cc:	4b58      	ldr	r3, [pc, #352]	; (8010830 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80106ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106d0:	e002      	b.n	80106d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80106d2:	2300      	movs	r3, #0
 80106d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80106d6:	e244      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80106d8:	e243      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80106da:	4b56      	ldr	r3, [pc, #344]	; (8010834 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80106dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80106de:	e240      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80106e0:	2300      	movs	r3, #0
 80106e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80106e4:	e23d      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80106ec:	f040 80a7 	bne.w	801083e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80106f0:	4b4c      	ldr	r3, [pc, #304]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80106f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106f4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80106f8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80106fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010700:	d055      	beq.n	80107ae <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8010702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010708:	f200 8096 	bhi.w	8010838 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 801070c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010712:	f000 8084 	beq.w	801081e <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8010716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010718:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801071c:	f200 808c 	bhi.w	8010838 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8010720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010722:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010726:	d030      	beq.n	801078a <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 8010728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801072a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801072e:	f200 8083 	bhi.w	8010838 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8010732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010734:	2b00      	cmp	r3, #0
 8010736:	d004      	beq.n	8010742 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 8010738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801073a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801073e:	d012      	beq.n	8010766 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 8010740:	e07a      	b.n	8010838 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010742:	4b38      	ldr	r3, [pc, #224]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801074a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801074e:	d107      	bne.n	8010760 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010754:	4618      	mov	r0, r3
 8010756:	f000 fccb 	bl	80110f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801075a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801075e:	e200      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010760:	2300      	movs	r3, #0
 8010762:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010764:	e1fd      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010766:	4b2f      	ldr	r3, [pc, #188]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801076e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010772:	d107      	bne.n	8010784 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010774:	f107 0318 	add.w	r3, r7, #24
 8010778:	4618      	mov	r0, r3
 801077a:	f000 fa11 	bl	8010ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801077e:	69bb      	ldr	r3, [r7, #24]
 8010780:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010782:	e1ee      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010784:	2300      	movs	r3, #0
 8010786:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010788:	e1eb      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801078a:	4b26      	ldr	r3, [pc, #152]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010796:	d107      	bne.n	80107a8 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010798:	f107 030c 	add.w	r3, r7, #12
 801079c:	4618      	mov	r0, r3
 801079e:	f000 fb53 	bl	8010e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80107a6:	e1dc      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80107a8:	2300      	movs	r3, #0
 80107aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80107ac:	e1d9      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80107ae:	4b1d      	ldr	r3, [pc, #116]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80107b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80107b6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80107b8:	4b1a      	ldr	r3, [pc, #104]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f003 0304 	and.w	r3, r3, #4
 80107c0:	2b04      	cmp	r3, #4
 80107c2:	d10c      	bne.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 80107c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d109      	bne.n	80107de <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80107ca:	4b16      	ldr	r3, [pc, #88]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	08db      	lsrs	r3, r3, #3
 80107d0:	f003 0303 	and.w	r3, r3, #3
 80107d4:	4a14      	ldr	r2, [pc, #80]	; (8010828 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80107d6:	fa22 f303 	lsr.w	r3, r2, r3
 80107da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107dc:	e01e      	b.n	801081c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80107de:	4b11      	ldr	r3, [pc, #68]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107ea:	d106      	bne.n	80107fa <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 80107ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107f2:	d102      	bne.n	80107fa <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80107f4:	4b0d      	ldr	r3, [pc, #52]	; (801082c <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80107f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107f8:	e010      	b.n	801081c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80107fa:	4b0a      	ldr	r3, [pc, #40]	; (8010824 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010802:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010806:	d106      	bne.n	8010816 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8010808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801080a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801080e:	d102      	bne.n	8010816 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8010810:	4b07      	ldr	r3, [pc, #28]	; (8010830 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8010812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010814:	e002      	b.n	801081c <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8010816:	2300      	movs	r3, #0
 8010818:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 801081a:	e1a2      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801081c:	e1a1      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 801081e:	4b05      	ldr	r3, [pc, #20]	; (8010834 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8010820:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010822:	e19e      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010824:	58024400 	.word	0x58024400
 8010828:	03d09000 	.word	0x03d09000
 801082c:	003d0900 	.word	0x003d0900
 8010830:	017d7840 	.word	0x017d7840
 8010834:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 8010838:	2300      	movs	r3, #0
 801083a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801083c:	e191      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8010844:	d173      	bne.n	801092e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8010846:	4b9b      	ldr	r3, [pc, #620]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801084a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801084e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8010850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010856:	d02f      	beq.n	80108b8 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 8010858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801085a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801085e:	d863      	bhi.n	8010928 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8010860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010862:	2b00      	cmp	r3, #0
 8010864:	d004      	beq.n	8010870 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8010866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801086c:	d012      	beq.n	8010894 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 801086e:	e05b      	b.n	8010928 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010870:	4b90      	ldr	r3, [pc, #576]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801087c:	d107      	bne.n	801088e <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801087e:	f107 0318 	add.w	r3, r7, #24
 8010882:	4618      	mov	r0, r3
 8010884:	f000 f98c 	bl	8010ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8010888:	69bb      	ldr	r3, [r7, #24]
 801088a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 801088c:	e169      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 801088e:	2300      	movs	r3, #0
 8010890:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010892:	e166      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010894:	4b87      	ldr	r3, [pc, #540]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801089c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80108a0:	d107      	bne.n	80108b2 <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80108a2:	f107 030c 	add.w	r3, r7, #12
 80108a6:	4618      	mov	r0, r3
 80108a8:	f000 face 	bl	8010e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80108b0:	e157      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80108b2:	2300      	movs	r3, #0
 80108b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80108b6:	e154      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80108b8:	4b7e      	ldr	r3, [pc, #504]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80108ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80108c0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80108c2:	4b7c      	ldr	r3, [pc, #496]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f003 0304 	and.w	r3, r3, #4
 80108ca:	2b04      	cmp	r3, #4
 80108cc:	d10c      	bne.n	80108e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 80108ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d109      	bne.n	80108e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80108d4:	4b77      	ldr	r3, [pc, #476]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	08db      	lsrs	r3, r3, #3
 80108da:	f003 0303 	and.w	r3, r3, #3
 80108de:	4a76      	ldr	r2, [pc, #472]	; (8010ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80108e0:	fa22 f303 	lsr.w	r3, r2, r3
 80108e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80108e6:	e01e      	b.n	8010926 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80108e8:	4b72      	ldr	r3, [pc, #456]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80108f4:	d106      	bne.n	8010904 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 80108f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80108fc:	d102      	bne.n	8010904 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80108fe:	4b6f      	ldr	r3, [pc, #444]	; (8010abc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8010900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010902:	e010      	b.n	8010926 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8010904:	4b6b      	ldr	r3, [pc, #428]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801090c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010910:	d106      	bne.n	8010920 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 8010912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010914:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010918:	d102      	bne.n	8010920 <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 801091a:	4b69      	ldr	r3, [pc, #420]	; (8010ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 801091c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801091e:	e002      	b.n	8010926 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8010920:	2300      	movs	r3, #0
 8010922:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8010924:	e11d      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010926:	e11c      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8010928:	2300      	movs	r3, #0
 801092a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801092c:	e119      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010934:	d133      	bne.n	801099e <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8010936:	4b5f      	ldr	r3, [pc, #380]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801093a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801093e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8010940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010942:	2b00      	cmp	r3, #0
 8010944:	d004      	beq.n	8010950 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 8010946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801094c:	d012      	beq.n	8010974 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 801094e:	e023      	b.n	8010998 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010950:	4b58      	ldr	r3, [pc, #352]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010958:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801095c:	d107      	bne.n	801096e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801095e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010962:	4618      	mov	r0, r3
 8010964:	f000 fbc4 	bl	80110f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801096a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 801096c:	e0f9      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 801096e:	2300      	movs	r3, #0
 8010970:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010972:	e0f6      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010974:	4b4f      	ldr	r3, [pc, #316]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801097c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010980:	d107      	bne.n	8010992 <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010982:	f107 0318 	add.w	r3, r7, #24
 8010986:	4618      	mov	r0, r3
 8010988:	f000 f90a 	bl	8010ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801098c:	6a3b      	ldr	r3, [r7, #32]
 801098e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010990:	e0e7      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010992:	2300      	movs	r3, #0
 8010994:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010996:	e0e4      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8010998:	2300      	movs	r3, #0
 801099a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 801099c:	e0e1      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80109a4:	f040 808e 	bne.w	8010ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80109a8:	4b42      	ldr	r3, [pc, #264]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80109aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80109ac:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80109b0:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80109b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80109b8:	d06b      	beq.n	8010a92 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80109ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80109c0:	d874      	bhi.n	8010aac <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80109c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109c8:	d056      	beq.n	8010a78 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 80109ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80109d0:	d86c      	bhi.n	8010aac <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80109d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80109d8:	d03b      	beq.n	8010a52 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 80109da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80109e0:	d864      	bhi.n	8010aac <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80109e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109e8:	d021      	beq.n	8010a2e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 80109ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80109f0:	d85c      	bhi.n	8010aac <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80109f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d004      	beq.n	8010a02 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 80109f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80109fe:	d004      	beq.n	8010a0a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8010a00:	e054      	b.n	8010aac <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8010a02:	f000 f8b7 	bl	8010b74 <HAL_RCCEx_GetD3PCLK1Freq>
 8010a06:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8010a08:	e0ab      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010a0a:	4b2a      	ldr	r3, [pc, #168]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010a16:	d107      	bne.n	8010a28 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010a18:	f107 0318 	add.w	r3, r7, #24
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	f000 f8bf 	bl	8010ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010a22:	69fb      	ldr	r3, [r7, #28]
 8010a24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010a26:	e09c      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a2c:	e099      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8010a2e:	4b21      	ldr	r3, [pc, #132]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010a3a:	d107      	bne.n	8010a4c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a3c:	f107 030c 	add.w	r3, r7, #12
 8010a40:	4618      	mov	r0, r3
 8010a42:	f000 fa01 	bl	8010e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8010a46:	693b      	ldr	r3, [r7, #16]
 8010a48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010a4a:	e08a      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a50:	e087      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8010a52:	4b18      	ldr	r3, [pc, #96]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	f003 0304 	and.w	r3, r3, #4
 8010a5a:	2b04      	cmp	r3, #4
 8010a5c:	d109      	bne.n	8010a72 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010a5e:	4b15      	ldr	r3, [pc, #84]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	08db      	lsrs	r3, r3, #3
 8010a64:	f003 0303 	and.w	r3, r3, #3
 8010a68:	4a13      	ldr	r2, [pc, #76]	; (8010ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8010a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8010a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010a70:	e077      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010a72:	2300      	movs	r3, #0
 8010a74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a76:	e074      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8010a78:	4b0e      	ldr	r3, [pc, #56]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a84:	d102      	bne.n	8010a8c <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 8010a86:	4b0d      	ldr	r3, [pc, #52]	; (8010abc <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8010a88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8010a8a:	e06a      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010a90:	e067      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010a92:	4b08      	ldr	r3, [pc, #32]	; (8010ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010a9e:	d102      	bne.n	8010aa6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 8010aa0:	4b07      	ldr	r3, [pc, #28]	; (8010ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8010aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010aa4:	e05d      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010aaa:	e05a      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8010aac:	2300      	movs	r3, #0
 8010aae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010ab0:	e057      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8010ab2:	bf00      	nop
 8010ab4:	58024400 	.word	0x58024400
 8010ab8:	03d09000 	.word	0x03d09000
 8010abc:	003d0900 	.word	0x003d0900
 8010ac0:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010aca:	d148      	bne.n	8010b5e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8010acc:	4b27      	ldr	r3, [pc, #156]	; (8010b6c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8010ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ad0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010ad4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8010ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010adc:	d02a      	beq.n	8010b34 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 8010ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010ae4:	d838      	bhi.n	8010b58 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8010ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d004      	beq.n	8010af6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 8010aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010af2:	d00d      	beq.n	8010b10 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8010af4:	e030      	b.n	8010b58 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8010af6:	4b1d      	ldr	r3, [pc, #116]	; (8010b6c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010b02:	d102      	bne.n	8010b0a <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 8010b04:	4b1a      	ldr	r3, [pc, #104]	; (8010b70 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8010b06:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010b08:	e02b      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010b0e:	e028      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8010b10:	4b16      	ldr	r3, [pc, #88]	; (8010b6c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010b18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010b1c:	d107      	bne.n	8010b2e <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8010b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b22:	4618      	mov	r0, r3
 8010b24:	f000 fae4 	bl	80110f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8010b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010b2c:	e019      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010b32:	e016      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8010b34:	4b0d      	ldr	r3, [pc, #52]	; (8010b6c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010b3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010b40:	d107      	bne.n	8010b52 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b42:	f107 0318 	add.w	r3, r7, #24
 8010b46:	4618      	mov	r0, r3
 8010b48:	f000 f82a 	bl	8010ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8010b50:	e007      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8010b52:	2300      	movs	r3, #0
 8010b54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010b56:	e004      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8010b5c:	e001      	b.n	8010b62 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8010b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3740      	adds	r7, #64	; 0x40
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	58024400 	.word	0x58024400
 8010b70:	017d7840 	.word	0x017d7840

08010b74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8010b78:	f7fe fc80 	bl	800f47c <HAL_RCC_GetHCLKFreq>
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	4b06      	ldr	r3, [pc, #24]	; (8010b98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8010b80:	6a1b      	ldr	r3, [r3, #32]
 8010b82:	091b      	lsrs	r3, r3, #4
 8010b84:	f003 0307 	and.w	r3, r3, #7
 8010b88:	4904      	ldr	r1, [pc, #16]	; (8010b9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8010b8a:	5ccb      	ldrb	r3, [r1, r3]
 8010b8c:	f003 031f 	and.w	r3, r3, #31
 8010b90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	58024400 	.word	0x58024400
 8010b9c:	08018418 	.word	0x08018418

08010ba0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b089      	sub	sp, #36	; 0x24
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010ba8:	4ba1      	ldr	r3, [pc, #644]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bac:	f003 0303 	and.w	r3, r3, #3
 8010bb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8010bb2:	4b9f      	ldr	r3, [pc, #636]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bb6:	0b1b      	lsrs	r3, r3, #12
 8010bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010bbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8010bbe:	4b9c      	ldr	r3, [pc, #624]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bc2:	091b      	lsrs	r3, r3, #4
 8010bc4:	f003 0301 	and.w	r3, r3, #1
 8010bc8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8010bca:	4b99      	ldr	r3, [pc, #612]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bce:	08db      	lsrs	r3, r3, #3
 8010bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010bd4:	693a      	ldr	r2, [r7, #16]
 8010bd6:	fb02 f303 	mul.w	r3, r2, r3
 8010bda:	ee07 3a90 	vmov	s15, r3
 8010bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010be2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	f000 8111 	beq.w	8010e10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8010bee:	69bb      	ldr	r3, [r7, #24]
 8010bf0:	2b02      	cmp	r3, #2
 8010bf2:	f000 8083 	beq.w	8010cfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8010bf6:	69bb      	ldr	r3, [r7, #24]
 8010bf8:	2b02      	cmp	r3, #2
 8010bfa:	f200 80a1 	bhi.w	8010d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8010bfe:	69bb      	ldr	r3, [r7, #24]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d003      	beq.n	8010c0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8010c04:	69bb      	ldr	r3, [r7, #24]
 8010c06:	2b01      	cmp	r3, #1
 8010c08:	d056      	beq.n	8010cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8010c0a:	e099      	b.n	8010d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c0c:	4b88      	ldr	r3, [pc, #544]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	f003 0320 	and.w	r3, r3, #32
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d02d      	beq.n	8010c74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010c18:	4b85      	ldr	r3, [pc, #532]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	08db      	lsrs	r3, r3, #3
 8010c1e:	f003 0303 	and.w	r3, r3, #3
 8010c22:	4a84      	ldr	r2, [pc, #528]	; (8010e34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8010c24:	fa22 f303 	lsr.w	r3, r2, r3
 8010c28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010c2a:	68bb      	ldr	r3, [r7, #8]
 8010c2c:	ee07 3a90 	vmov	s15, r3
 8010c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	ee07 3a90 	vmov	s15, r3
 8010c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c42:	4b7b      	ldr	r3, [pc, #492]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c4a:	ee07 3a90 	vmov	s15, r3
 8010c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8010e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8010c72:	e087      	b.n	8010d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	ee07 3a90 	vmov	s15, r3
 8010c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8010e3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8010c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c86:	4b6a      	ldr	r3, [pc, #424]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c8e:	ee07 3a90 	vmov	s15, r3
 8010c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8010c9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8010e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010cb6:	e065      	b.n	8010d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	ee07 3a90 	vmov	s15, r3
 8010cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8010e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010cca:	4b59      	ldr	r3, [pc, #356]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cd2:	ee07 3a90 	vmov	s15, r3
 8010cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8010cde:	eddf 5a56 	vldr	s11, [pc, #344]	; 8010e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010cfa:	e043      	b.n	8010d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010cfc:	697b      	ldr	r3, [r7, #20]
 8010cfe:	ee07 3a90 	vmov	s15, r3
 8010d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8010e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8010d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d0e:	4b48      	ldr	r3, [pc, #288]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d16:	ee07 3a90 	vmov	s15, r3
 8010d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8010e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010d3e:	e021      	b.n	8010d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	ee07 3a90 	vmov	s15, r3
 8010d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8010e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8010d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d52:	4b37      	ldr	r3, [pc, #220]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d5a:	ee07 3a90 	vmov	s15, r3
 8010d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8010d66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8010e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8010d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010d82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8010d84:	4b2a      	ldr	r3, [pc, #168]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d88:	0a5b      	lsrs	r3, r3, #9
 8010d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d8e:	ee07 3a90 	vmov	s15, r3
 8010d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8010da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010daa:	ee17 2a90 	vmov	r2, s15
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8010db2:	4b1f      	ldr	r3, [pc, #124]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010db6:	0c1b      	lsrs	r3, r3, #16
 8010db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dbc:	ee07 3a90 	vmov	s15, r3
 8010dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8010dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010dd8:	ee17 2a90 	vmov	r2, s15
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8010de0:	4b13      	ldr	r3, [pc, #76]	; (8010e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8010de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010de4:	0e1b      	lsrs	r3, r3, #24
 8010de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010dea:	ee07 3a90 	vmov	s15, r3
 8010dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8010dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010e06:	ee17 2a90 	vmov	r2, s15
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8010e0e:	e008      	b.n	8010e22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2200      	movs	r2, #0
 8010e14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2200      	movs	r2, #0
 8010e1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	609a      	str	r2, [r3, #8]
}
 8010e22:	bf00      	nop
 8010e24:	3724      	adds	r7, #36	; 0x24
 8010e26:	46bd      	mov	sp, r7
 8010e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2c:	4770      	bx	lr
 8010e2e:	bf00      	nop
 8010e30:	58024400 	.word	0x58024400
 8010e34:	03d09000 	.word	0x03d09000
 8010e38:	46000000 	.word	0x46000000
 8010e3c:	4c742400 	.word	0x4c742400
 8010e40:	4a742400 	.word	0x4a742400
 8010e44:	4bbebc20 	.word	0x4bbebc20

08010e48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b089      	sub	sp, #36	; 0x24
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010e50:	4ba1      	ldr	r3, [pc, #644]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e54:	f003 0303 	and.w	r3, r3, #3
 8010e58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8010e5a:	4b9f      	ldr	r3, [pc, #636]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e5e:	0d1b      	lsrs	r3, r3, #20
 8010e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010e64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8010e66:	4b9c      	ldr	r3, [pc, #624]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e6a:	0a1b      	lsrs	r3, r3, #8
 8010e6c:	f003 0301 	and.w	r3, r3, #1
 8010e70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8010e72:	4b99      	ldr	r3, [pc, #612]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e76:	08db      	lsrs	r3, r3, #3
 8010e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010e7c:	693a      	ldr	r2, [r7, #16]
 8010e7e:	fb02 f303 	mul.w	r3, r2, r3
 8010e82:	ee07 3a90 	vmov	s15, r3
 8010e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010e8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	f000 8111 	beq.w	80110b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	2b02      	cmp	r3, #2
 8010e9a:	f000 8083 	beq.w	8010fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8010e9e:	69bb      	ldr	r3, [r7, #24]
 8010ea0:	2b02      	cmp	r3, #2
 8010ea2:	f200 80a1 	bhi.w	8010fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d003      	beq.n	8010eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	2b01      	cmp	r3, #1
 8010eb0:	d056      	beq.n	8010f60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8010eb2:	e099      	b.n	8010fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010eb4:	4b88      	ldr	r3, [pc, #544]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f003 0320 	and.w	r3, r3, #32
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d02d      	beq.n	8010f1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8010ec0:	4b85      	ldr	r3, [pc, #532]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	08db      	lsrs	r3, r3, #3
 8010ec6:	f003 0303 	and.w	r3, r3, #3
 8010eca:	4a84      	ldr	r2, [pc, #528]	; (80110dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8010ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8010ed0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	ee07 3a90 	vmov	s15, r3
 8010ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010edc:	697b      	ldr	r3, [r7, #20]
 8010ede:	ee07 3a90 	vmov	s15, r3
 8010ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010eea:	4b7b      	ldr	r3, [pc, #492]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ef2:	ee07 3a90 	vmov	s15, r3
 8010ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8010efe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80110e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8010f1a:	e087      	b.n	801102c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010f1c:	697b      	ldr	r3, [r7, #20]
 8010f1e:	ee07 3a90 	vmov	s15, r3
 8010f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80110e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8010f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f2e:	4b6a      	ldr	r3, [pc, #424]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f36:	ee07 3a90 	vmov	s15, r3
 8010f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f42:	eddf 5a67 	vldr	s11, [pc, #412]	; 80110e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010f5e:	e065      	b.n	801102c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	ee07 3a90 	vmov	s15, r3
 8010f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80110e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010f72:	4b59      	ldr	r3, [pc, #356]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f7a:	ee07 3a90 	vmov	s15, r3
 8010f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8010f86:	eddf 5a56 	vldr	s11, [pc, #344]	; 80110e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010fa2:	e043      	b.n	801102c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	ee07 3a90 	vmov	s15, r3
 8010faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80110ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8010fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010fb6:	4b48      	ldr	r3, [pc, #288]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010fbe:	ee07 3a90 	vmov	s15, r3
 8010fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8010fca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80110e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8010fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8010fe6:	e021      	b.n	801102c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	ee07 3a90 	vmov	s15, r3
 8010fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010ff2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80110e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8010ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010ffa:	4b37      	ldr	r3, [pc, #220]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8010ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011002:	ee07 3a90 	vmov	s15, r3
 8011006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801100a:	ed97 6a03 	vldr	s12, [r7, #12]
 801100e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80110e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8011012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801101a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801101e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801102a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 801102c:	4b2a      	ldr	r3, [pc, #168]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011030:	0a5b      	lsrs	r3, r3, #9
 8011032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011036:	ee07 3a90 	vmov	s15, r3
 801103a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801103e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011046:	edd7 6a07 	vldr	s13, [r7, #28]
 801104a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801104e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011052:	ee17 2a90 	vmov	r2, s15
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 801105a:	4b1f      	ldr	r3, [pc, #124]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801105e:	0c1b      	lsrs	r3, r3, #16
 8011060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011064:	ee07 3a90 	vmov	s15, r3
 8011068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801106c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011070:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011074:	edd7 6a07 	vldr	s13, [r7, #28]
 8011078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801107c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011080:	ee17 2a90 	vmov	r2, s15
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8011088:	4b13      	ldr	r3, [pc, #76]	; (80110d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801108c:	0e1b      	lsrs	r3, r3, #24
 801108e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011092:	ee07 3a90 	vmov	s15, r3
 8011096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801109a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801109e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80110a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80110a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80110aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80110ae:	ee17 2a90 	vmov	r2, s15
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80110b6:	e008      	b.n	80110ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2200      	movs	r2, #0
 80110bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2200      	movs	r2, #0
 80110c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2200      	movs	r2, #0
 80110c8:	609a      	str	r2, [r3, #8]
}
 80110ca:	bf00      	nop
 80110cc:	3724      	adds	r7, #36	; 0x24
 80110ce:	46bd      	mov	sp, r7
 80110d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d4:	4770      	bx	lr
 80110d6:	bf00      	nop
 80110d8:	58024400 	.word	0x58024400
 80110dc:	03d09000 	.word	0x03d09000
 80110e0:	46000000 	.word	0x46000000
 80110e4:	4c742400 	.word	0x4c742400
 80110e8:	4a742400 	.word	0x4a742400
 80110ec:	4bbebc20 	.word	0x4bbebc20

080110f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b089      	sub	sp, #36	; 0x24
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80110f8:	4ba0      	ldr	r3, [pc, #640]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80110fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110fc:	f003 0303 	and.w	r3, r3, #3
 8011100:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8011102:	4b9e      	ldr	r3, [pc, #632]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011106:	091b      	lsrs	r3, r3, #4
 8011108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801110c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801110e:	4b9b      	ldr	r3, [pc, #620]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011112:	f003 0301 	and.w	r3, r3, #1
 8011116:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8011118:	4b98      	ldr	r3, [pc, #608]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801111a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801111c:	08db      	lsrs	r3, r3, #3
 801111e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011122:	693a      	ldr	r2, [r7, #16]
 8011124:	fb02 f303 	mul.w	r3, r2, r3
 8011128:	ee07 3a90 	vmov	s15, r3
 801112c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011130:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8011134:	697b      	ldr	r3, [r7, #20]
 8011136:	2b00      	cmp	r3, #0
 8011138:	f000 8111 	beq.w	801135e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801113c:	69bb      	ldr	r3, [r7, #24]
 801113e:	2b02      	cmp	r3, #2
 8011140:	f000 8083 	beq.w	801124a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8011144:	69bb      	ldr	r3, [r7, #24]
 8011146:	2b02      	cmp	r3, #2
 8011148:	f200 80a1 	bhi.w	801128e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801114c:	69bb      	ldr	r3, [r7, #24]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d003      	beq.n	801115a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	2b01      	cmp	r3, #1
 8011156:	d056      	beq.n	8011206 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8011158:	e099      	b.n	801128e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801115a:	4b88      	ldr	r3, [pc, #544]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	f003 0320 	and.w	r3, r3, #32
 8011162:	2b00      	cmp	r3, #0
 8011164:	d02d      	beq.n	80111c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8011166:	4b85      	ldr	r3, [pc, #532]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	08db      	lsrs	r3, r3, #3
 801116c:	f003 0303 	and.w	r3, r3, #3
 8011170:	4a83      	ldr	r2, [pc, #524]	; (8011380 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8011172:	fa22 f303 	lsr.w	r3, r2, r3
 8011176:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	ee07 3a90 	vmov	s15, r3
 801117e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011182:	697b      	ldr	r3, [r7, #20]
 8011184:	ee07 3a90 	vmov	s15, r3
 8011188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801118c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011190:	4b7a      	ldr	r3, [pc, #488]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011198:	ee07 3a90 	vmov	s15, r3
 801119c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80111a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8011384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80111a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80111c0:	e087      	b.n	80112d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	ee07 3a90 	vmov	s15, r3
 80111c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80111cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8011388 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80111d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80111d4:	4b69      	ldr	r3, [pc, #420]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80111d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80111dc:	ee07 3a90 	vmov	s15, r3
 80111e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80111e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80111e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8011384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80111ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80111f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80111f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80111f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80111fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011200:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011204:	e065      	b.n	80112d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	ee07 3a90 	vmov	s15, r3
 801120c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011210:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801138c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8011214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011218:	4b58      	ldr	r3, [pc, #352]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801121c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011220:	ee07 3a90 	vmov	s15, r3
 8011224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011228:	ed97 6a03 	vldr	s12, [r7, #12]
 801122c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8011384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801123c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011244:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8011248:	e043      	b.n	80112d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	ee07 3a90 	vmov	s15, r3
 8011250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011254:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8011390 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8011258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801125c:	4b47      	ldr	r3, [pc, #284]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801125e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011264:	ee07 3a90 	vmov	s15, r3
 8011268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801126c:	ed97 6a03 	vldr	s12, [r7, #12]
 8011270:	eddf 5a44 	vldr	s11, [pc, #272]	; 8011384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8011274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801127c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011288:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801128c:	e021      	b.n	80112d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	ee07 3a90 	vmov	s15, r3
 8011294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011298:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8011388 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801129c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80112a0:	4b36      	ldr	r3, [pc, #216]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80112a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80112a8:	ee07 3a90 	vmov	s15, r3
 80112ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80112b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80112b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80112b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80112bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80112c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80112c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80112c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80112cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80112d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80112d2:	4b2a      	ldr	r3, [pc, #168]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80112d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112d6:	0a5b      	lsrs	r3, r3, #9
 80112d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112dc:	ee07 3a90 	vmov	s15, r3
 80112e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80112e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80112e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80112ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80112f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80112f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80112f8:	ee17 2a90 	vmov	r2, s15
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8011300:	4b1e      	ldr	r3, [pc, #120]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011304:	0c1b      	lsrs	r3, r3, #16
 8011306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801130a:	ee07 3a90 	vmov	s15, r3
 801130e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011316:	ee37 7a87 	vadd.f32	s14, s15, s14
 801131a:	edd7 6a07 	vldr	s13, [r7, #28]
 801131e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011326:	ee17 2a90 	vmov	r2, s15
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 801132e:	4b13      	ldr	r3, [pc, #76]	; (801137c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8011330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011332:	0e1b      	lsrs	r3, r3, #24
 8011334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011338:	ee07 3a90 	vmov	s15, r3
 801133c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011344:	ee37 7a87 	vadd.f32	s14, s15, s14
 8011348:	edd7 6a07 	vldr	s13, [r7, #28]
 801134c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011354:	ee17 2a90 	vmov	r2, s15
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801135c:	e008      	b.n	8011370 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2200      	movs	r2, #0
 8011362:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	2200      	movs	r2, #0
 8011368:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2200      	movs	r2, #0
 801136e:	609a      	str	r2, [r3, #8]
}
 8011370:	bf00      	nop
 8011372:	3724      	adds	r7, #36	; 0x24
 8011374:	46bd      	mov	sp, r7
 8011376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137a:	4770      	bx	lr
 801137c:	58024400 	.word	0x58024400
 8011380:	03d09000 	.word	0x03d09000
 8011384:	46000000 	.word	0x46000000
 8011388:	4c742400 	.word	0x4c742400
 801138c:	4a742400 	.word	0x4a742400
 8011390:	4bbebc20 	.word	0x4bbebc20

08011394 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b084      	sub	sp, #16
 8011398:	af00      	add	r7, sp, #0
 801139a:	6078      	str	r0, [r7, #4]
 801139c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801139e:	2300      	movs	r3, #0
 80113a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80113a2:	4b53      	ldr	r3, [pc, #332]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 80113a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113a6:	f003 0303 	and.w	r3, r3, #3
 80113aa:	2b03      	cmp	r3, #3
 80113ac:	d101      	bne.n	80113b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80113ae:	2301      	movs	r3, #1
 80113b0:	e099      	b.n	80114e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80113b2:	4b4f      	ldr	r3, [pc, #316]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	4a4e      	ldr	r2, [pc, #312]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 80113b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80113bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80113be:	f7f6 f8c3 	bl	8007548 <HAL_GetTick>
 80113c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80113c4:	e008      	b.n	80113d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80113c6:	f7f6 f8bf 	bl	8007548 <HAL_GetTick>
 80113ca:	4602      	mov	r2, r0
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	1ad3      	subs	r3, r2, r3
 80113d0:	2b02      	cmp	r3, #2
 80113d2:	d901      	bls.n	80113d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80113d4:	2303      	movs	r3, #3
 80113d6:	e086      	b.n	80114e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80113d8:	4b45      	ldr	r3, [pc, #276]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d1f0      	bne.n	80113c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80113e4:	4b42      	ldr	r3, [pc, #264]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 80113e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	031b      	lsls	r3, r3, #12
 80113f2:	493f      	ldr	r1, [pc, #252]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 80113f4:	4313      	orrs	r3, r2
 80113f6:	628b      	str	r3, [r1, #40]	; 0x28
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	685b      	ldr	r3, [r3, #4]
 80113fc:	3b01      	subs	r3, #1
 80113fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	689b      	ldr	r3, [r3, #8]
 8011406:	3b01      	subs	r3, #1
 8011408:	025b      	lsls	r3, r3, #9
 801140a:	b29b      	uxth	r3, r3
 801140c:	431a      	orrs	r2, r3
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	68db      	ldr	r3, [r3, #12]
 8011412:	3b01      	subs	r3, #1
 8011414:	041b      	lsls	r3, r3, #16
 8011416:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801141a:	431a      	orrs	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	691b      	ldr	r3, [r3, #16]
 8011420:	3b01      	subs	r3, #1
 8011422:	061b      	lsls	r3, r3, #24
 8011424:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011428:	4931      	ldr	r1, [pc, #196]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 801142a:	4313      	orrs	r3, r2
 801142c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801142e:	4b30      	ldr	r3, [pc, #192]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 8011430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011432:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	695b      	ldr	r3, [r3, #20]
 801143a:	492d      	ldr	r1, [pc, #180]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 801143c:	4313      	orrs	r3, r2
 801143e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8011440:	4b2b      	ldr	r3, [pc, #172]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 8011442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011444:	f023 0220 	bic.w	r2, r3, #32
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	699b      	ldr	r3, [r3, #24]
 801144c:	4928      	ldr	r1, [pc, #160]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 801144e:	4313      	orrs	r3, r2
 8011450:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8011452:	4b27      	ldr	r3, [pc, #156]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 8011454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011456:	4a26      	ldr	r2, [pc, #152]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 8011458:	f023 0310 	bic.w	r3, r3, #16
 801145c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801145e:	4b24      	ldr	r3, [pc, #144]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 8011460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011462:	4b24      	ldr	r3, [pc, #144]	; (80114f4 <RCCEx_PLL2_Config+0x160>)
 8011464:	4013      	ands	r3, r2
 8011466:	687a      	ldr	r2, [r7, #4]
 8011468:	69d2      	ldr	r2, [r2, #28]
 801146a:	00d2      	lsls	r2, r2, #3
 801146c:	4920      	ldr	r1, [pc, #128]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 801146e:	4313      	orrs	r3, r2
 8011470:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8011472:	4b1f      	ldr	r3, [pc, #124]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 8011474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011476:	4a1e      	ldr	r2, [pc, #120]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 8011478:	f043 0310 	orr.w	r3, r3, #16
 801147c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d106      	bne.n	8011492 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8011484:	4b1a      	ldr	r3, [pc, #104]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 8011486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011488:	4a19      	ldr	r2, [pc, #100]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 801148a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801148e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011490:	e00f      	b.n	80114b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	2b01      	cmp	r3, #1
 8011496:	d106      	bne.n	80114a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8011498:	4b15      	ldr	r3, [pc, #84]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 801149a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801149c:	4a14      	ldr	r2, [pc, #80]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 801149e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80114a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80114a4:	e005      	b.n	80114b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80114a6:	4b12      	ldr	r3, [pc, #72]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 80114a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114aa:	4a11      	ldr	r2, [pc, #68]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 80114ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80114b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80114b2:	4b0f      	ldr	r3, [pc, #60]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	4a0e      	ldr	r2, [pc, #56]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 80114b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80114bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80114be:	f7f6 f843 	bl	8007548 <HAL_GetTick>
 80114c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80114c4:	e008      	b.n	80114d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80114c6:	f7f6 f83f 	bl	8007548 <HAL_GetTick>
 80114ca:	4602      	mov	r2, r0
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	1ad3      	subs	r3, r2, r3
 80114d0:	2b02      	cmp	r3, #2
 80114d2:	d901      	bls.n	80114d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80114d4:	2303      	movs	r3, #3
 80114d6:	e006      	b.n	80114e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80114d8:	4b05      	ldr	r3, [pc, #20]	; (80114f0 <RCCEx_PLL2_Config+0x15c>)
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d0f0      	beq.n	80114c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80114e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3710      	adds	r7, #16
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}
 80114ee:	bf00      	nop
 80114f0:	58024400 	.word	0x58024400
 80114f4:	ffff0007 	.word	0xffff0007

080114f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b084      	sub	sp, #16
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8011502:	2300      	movs	r3, #0
 8011504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8011506:	4b53      	ldr	r3, [pc, #332]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 8011508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801150a:	f003 0303 	and.w	r3, r3, #3
 801150e:	2b03      	cmp	r3, #3
 8011510:	d101      	bne.n	8011516 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8011512:	2301      	movs	r3, #1
 8011514:	e099      	b.n	801164a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8011516:	4b4f      	ldr	r3, [pc, #316]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	4a4e      	ldr	r2, [pc, #312]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 801151c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011522:	f7f6 f811 	bl	8007548 <HAL_GetTick>
 8011526:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8011528:	e008      	b.n	801153c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801152a:	f7f6 f80d 	bl	8007548 <HAL_GetTick>
 801152e:	4602      	mov	r2, r0
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	1ad3      	subs	r3, r2, r3
 8011534:	2b02      	cmp	r3, #2
 8011536:	d901      	bls.n	801153c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8011538:	2303      	movs	r3, #3
 801153a:	e086      	b.n	801164a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801153c:	4b45      	ldr	r3, [pc, #276]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011544:	2b00      	cmp	r3, #0
 8011546:	d1f0      	bne.n	801152a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8011548:	4b42      	ldr	r3, [pc, #264]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 801154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801154c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	051b      	lsls	r3, r3, #20
 8011556:	493f      	ldr	r1, [pc, #252]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 8011558:	4313      	orrs	r3, r2
 801155a:	628b      	str	r3, [r1, #40]	; 0x28
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	3b01      	subs	r3, #1
 8011562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	689b      	ldr	r3, [r3, #8]
 801156a:	3b01      	subs	r3, #1
 801156c:	025b      	lsls	r3, r3, #9
 801156e:	b29b      	uxth	r3, r3
 8011570:	431a      	orrs	r2, r3
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	68db      	ldr	r3, [r3, #12]
 8011576:	3b01      	subs	r3, #1
 8011578:	041b      	lsls	r3, r3, #16
 801157a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801157e:	431a      	orrs	r2, r3
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	691b      	ldr	r3, [r3, #16]
 8011584:	3b01      	subs	r3, #1
 8011586:	061b      	lsls	r3, r3, #24
 8011588:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801158c:	4931      	ldr	r1, [pc, #196]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 801158e:	4313      	orrs	r3, r2
 8011590:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8011592:	4b30      	ldr	r3, [pc, #192]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 8011594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011596:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	695b      	ldr	r3, [r3, #20]
 801159e:	492d      	ldr	r1, [pc, #180]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115a0:	4313      	orrs	r3, r2
 80115a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80115a4:	4b2b      	ldr	r3, [pc, #172]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	699b      	ldr	r3, [r3, #24]
 80115b0:	4928      	ldr	r1, [pc, #160]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115b2:	4313      	orrs	r3, r2
 80115b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80115b6:	4b27      	ldr	r3, [pc, #156]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ba:	4a26      	ldr	r2, [pc, #152]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80115c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80115c2:	4b24      	ldr	r3, [pc, #144]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115c6:	4b24      	ldr	r3, [pc, #144]	; (8011658 <RCCEx_PLL3_Config+0x160>)
 80115c8:	4013      	ands	r3, r2
 80115ca:	687a      	ldr	r2, [r7, #4]
 80115cc:	69d2      	ldr	r2, [r2, #28]
 80115ce:	00d2      	lsls	r2, r2, #3
 80115d0:	4920      	ldr	r1, [pc, #128]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115d2:	4313      	orrs	r3, r2
 80115d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80115d6:	4b1f      	ldr	r3, [pc, #124]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115da:	4a1e      	ldr	r2, [pc, #120]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80115e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d106      	bne.n	80115f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80115e8:	4b1a      	ldr	r3, [pc, #104]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115ec:	4a19      	ldr	r2, [pc, #100]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80115f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80115f4:	e00f      	b.n	8011616 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	d106      	bne.n	801160a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80115fc:	4b15      	ldr	r3, [pc, #84]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 80115fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011600:	4a14      	ldr	r2, [pc, #80]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 8011602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011608:	e005      	b.n	8011616 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801160a:	4b12      	ldr	r3, [pc, #72]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 801160c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801160e:	4a11      	ldr	r2, [pc, #68]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 8011610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011614:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8011616:	4b0f      	ldr	r3, [pc, #60]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	4a0e      	ldr	r2, [pc, #56]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 801161c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8011622:	f7f5 ff91 	bl	8007548 <HAL_GetTick>
 8011626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8011628:	e008      	b.n	801163c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 801162a:	f7f5 ff8d 	bl	8007548 <HAL_GetTick>
 801162e:	4602      	mov	r2, r0
 8011630:	68bb      	ldr	r3, [r7, #8]
 8011632:	1ad3      	subs	r3, r2, r3
 8011634:	2b02      	cmp	r3, #2
 8011636:	d901      	bls.n	801163c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8011638:	2303      	movs	r3, #3
 801163a:	e006      	b.n	801164a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801163c:	4b05      	ldr	r3, [pc, #20]	; (8011654 <RCCEx_PLL3_Config+0x15c>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011644:	2b00      	cmp	r3, #0
 8011646:	d0f0      	beq.n	801162a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8011648:	7bfb      	ldrb	r3, [r7, #15]
}
 801164a:	4618      	mov	r0, r3
 801164c:	3710      	adds	r7, #16
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	58024400 	.word	0x58024400
 8011658:	ffff0007 	.word	0xffff0007

0801165c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801165c:	b580      	push	{r7, lr}
 801165e:	b084      	sub	sp, #16
 8011660:	af00      	add	r7, sp, #0
 8011662:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d101      	bne.n	801166e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801166a:	2301      	movs	r3, #1
 801166c:	e0f1      	b.n	8011852 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	2200      	movs	r2, #0
 8011672:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	4a78      	ldr	r2, [pc, #480]	; (801185c <HAL_SPI_Init+0x200>)
 801167a:	4293      	cmp	r3, r2
 801167c:	d00f      	beq.n	801169e <HAL_SPI_Init+0x42>
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	681b      	ldr	r3, [r3, #0]
 8011682:	4a77      	ldr	r2, [pc, #476]	; (8011860 <HAL_SPI_Init+0x204>)
 8011684:	4293      	cmp	r3, r2
 8011686:	d00a      	beq.n	801169e <HAL_SPI_Init+0x42>
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	4a75      	ldr	r2, [pc, #468]	; (8011864 <HAL_SPI_Init+0x208>)
 801168e:	4293      	cmp	r3, r2
 8011690:	d005      	beq.n	801169e <HAL_SPI_Init+0x42>
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	68db      	ldr	r3, [r3, #12]
 8011696:	2b0f      	cmp	r3, #15
 8011698:	d901      	bls.n	801169e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801169a:	2301      	movs	r3, #1
 801169c:	e0d9      	b.n	8011852 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 ff66 	bl	8012570 <SPI_GetPacketSize>
 80116a4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	4a6c      	ldr	r2, [pc, #432]	; (801185c <HAL_SPI_Init+0x200>)
 80116ac:	4293      	cmp	r3, r2
 80116ae:	d00c      	beq.n	80116ca <HAL_SPI_Init+0x6e>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	4a6a      	ldr	r2, [pc, #424]	; (8011860 <HAL_SPI_Init+0x204>)
 80116b6:	4293      	cmp	r3, r2
 80116b8:	d007      	beq.n	80116ca <HAL_SPI_Init+0x6e>
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	4a69      	ldr	r2, [pc, #420]	; (8011864 <HAL_SPI_Init+0x208>)
 80116c0:	4293      	cmp	r3, r2
 80116c2:	d002      	beq.n	80116ca <HAL_SPI_Init+0x6e>
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2b08      	cmp	r3, #8
 80116c8:	d811      	bhi.n	80116ee <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80116ce:	4a63      	ldr	r2, [pc, #396]	; (801185c <HAL_SPI_Init+0x200>)
 80116d0:	4293      	cmp	r3, r2
 80116d2:	d009      	beq.n	80116e8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	4a61      	ldr	r2, [pc, #388]	; (8011860 <HAL_SPI_Init+0x204>)
 80116da:	4293      	cmp	r3, r2
 80116dc:	d004      	beq.n	80116e8 <HAL_SPI_Init+0x8c>
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	4a60      	ldr	r2, [pc, #384]	; (8011864 <HAL_SPI_Init+0x208>)
 80116e4:	4293      	cmp	r3, r2
 80116e6:	d104      	bne.n	80116f2 <HAL_SPI_Init+0x96>
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	2b10      	cmp	r3, #16
 80116ec:	d901      	bls.n	80116f2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80116ee:	2301      	movs	r3, #1
 80116f0:	e0af      	b.n	8011852 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80116f8:	b2db      	uxtb	r3, r3
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d106      	bne.n	801170c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2200      	movs	r2, #0
 8011702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011706:	6878      	ldr	r0, [r7, #4]
 8011708:	f7f4 f956 	bl	80059b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	2202      	movs	r2, #2
 8011710:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	681a      	ldr	r2, [r3, #0]
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	f022 0201 	bic.w	r2, r2, #1
 8011722:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	681b      	ldr	r3, [r3, #0]
 8011728:	689b      	ldr	r3, [r3, #8]
 801172a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 801172e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	699b      	ldr	r3, [r3, #24]
 8011734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011738:	d119      	bne.n	801176e <HAL_SPI_Init+0x112>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	685b      	ldr	r3, [r3, #4]
 801173e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011742:	d103      	bne.n	801174c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8011748:	2b00      	cmp	r3, #0
 801174a:	d008      	beq.n	801175e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8011750:	2b00      	cmp	r3, #0
 8011752:	d10c      	bne.n	801176e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8011758:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801175c:	d107      	bne.n	801176e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801176c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	69da      	ldr	r2, [r3, #28]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011776:	431a      	orrs	r2, r3
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	431a      	orrs	r2, r3
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011780:	ea42 0103 	orr.w	r1, r2, r3
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	68da      	ldr	r2, [r3, #12]
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	430a      	orrs	r2, r1
 801178e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011798:	431a      	orrs	r2, r3
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801179e:	431a      	orrs	r2, r3
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	699b      	ldr	r3, [r3, #24]
 80117a4:	431a      	orrs	r2, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	691b      	ldr	r3, [r3, #16]
 80117aa:	431a      	orrs	r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	695b      	ldr	r3, [r3, #20]
 80117b0:	431a      	orrs	r2, r3
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6a1b      	ldr	r3, [r3, #32]
 80117b6:	431a      	orrs	r2, r3
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	685b      	ldr	r3, [r3, #4]
 80117bc:	431a      	orrs	r2, r3
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80117c2:	431a      	orrs	r2, r3
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	689b      	ldr	r3, [r3, #8]
 80117c8:	431a      	orrs	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80117ce:	ea42 0103 	orr.w	r1, r2, r3
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	430a      	orrs	r2, r1
 80117dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	685b      	ldr	r3, [r3, #4]
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d113      	bne.n	801180e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	689b      	ldr	r3, [r3, #8]
 80117ec:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80117f8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	689b      	ldr	r3, [r3, #8]
 8011800:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801180c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	f022 0201 	bic.w	r2, r2, #1
 801181c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011826:	2b00      	cmp	r3, #0
 8011828:	d00a      	beq.n	8011840 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	68db      	ldr	r3, [r3, #12]
 8011830:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	430a      	orrs	r2, r1
 801183e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2200      	movs	r2, #0
 8011844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2201      	movs	r2, #1
 801184c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8011850:	2300      	movs	r3, #0
}
 8011852:	4618      	mov	r0, r3
 8011854:	3710      	adds	r7, #16
 8011856:	46bd      	mov	sp, r7
 8011858:	bd80      	pop	{r7, pc}
 801185a:	bf00      	nop
 801185c:	40013000 	.word	0x40013000
 8011860:	40003800 	.word	0x40003800
 8011864:	40003c00 	.word	0x40003c00

08011868 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b08a      	sub	sp, #40	; 0x28
 801186c:	af02      	add	r7, sp, #8
 801186e:	60f8      	str	r0, [r7, #12]
 8011870:	60b9      	str	r1, [r7, #8]
 8011872:	603b      	str	r3, [r7, #0]
 8011874:	4613      	mov	r3, r2
 8011876:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	3320      	adds	r3, #32
 801187e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011880:	2300      	movs	r3, #0
 8011882:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801188a:	2b01      	cmp	r3, #1
 801188c:	d101      	bne.n	8011892 <HAL_SPI_Transmit+0x2a>
 801188e:	2302      	movs	r3, #2
 8011890:	e1d7      	b.n	8011c42 <HAL_SPI_Transmit+0x3da>
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2201      	movs	r2, #1
 8011896:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801189a:	f7f5 fe55 	bl	8007548 <HAL_GetTick>
 801189e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80118a6:	b2db      	uxtb	r3, r3
 80118a8:	2b01      	cmp	r3, #1
 80118aa:	d007      	beq.n	80118bc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80118ac:	2302      	movs	r3, #2
 80118ae:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2200      	movs	r2, #0
 80118b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80118b8:	7efb      	ldrb	r3, [r7, #27]
 80118ba:	e1c2      	b.n	8011c42 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d002      	beq.n	80118c8 <HAL_SPI_Transmit+0x60>
 80118c2:	88fb      	ldrh	r3, [r7, #6]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d107      	bne.n	80118d8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80118c8:	2301      	movs	r3, #1
 80118ca:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	2200      	movs	r2, #0
 80118d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80118d4:	7efb      	ldrb	r3, [r7, #27]
 80118d6:	e1b4      	b.n	8011c42 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	2203      	movs	r2, #3
 80118dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	2200      	movs	r2, #0
 80118e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	68ba      	ldr	r2, [r7, #8]
 80118ec:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	88fa      	ldrh	r2, [r7, #6]
 80118f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	88fa      	ldrh	r2, [r7, #6]
 80118fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	2200      	movs	r2, #0
 8011902:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	2200      	movs	r2, #0
 8011908:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	2200      	movs	r2, #0
 8011910:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2200      	movs	r2, #0
 8011918:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	2200      	movs	r2, #0
 801191e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	689b      	ldr	r3, [r3, #8]
 8011924:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011928:	d107      	bne.n	801193a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011938:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	685a      	ldr	r2, [r3, #4]
 8011940:	4b96      	ldr	r3, [pc, #600]	; (8011b9c <HAL_SPI_Transmit+0x334>)
 8011942:	4013      	ands	r3, r2
 8011944:	88f9      	ldrh	r1, [r7, #6]
 8011946:	68fa      	ldr	r2, [r7, #12]
 8011948:	6812      	ldr	r2, [r2, #0]
 801194a:	430b      	orrs	r3, r1
 801194c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	681a      	ldr	r2, [r3, #0]
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	f042 0201 	orr.w	r2, r2, #1
 801195c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011966:	d107      	bne.n	8011978 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	681a      	ldr	r2, [r3, #0]
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011976:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	68db      	ldr	r3, [r3, #12]
 801197c:	2b0f      	cmp	r3, #15
 801197e:	d947      	bls.n	8011a10 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011980:	e03f      	b.n	8011a02 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	695b      	ldr	r3, [r3, #20]
 8011988:	f003 0302 	and.w	r3, r3, #2
 801198c:	2b02      	cmp	r3, #2
 801198e:	d114      	bne.n	80119ba <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	6812      	ldr	r2, [r2, #0]
 801199a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119a0:	1d1a      	adds	r2, r3, #4
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	3b01      	subs	r3, #1
 80119b0:	b29a      	uxth	r2, r3
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80119b8:	e023      	b.n	8011a02 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80119ba:	f7f5 fdc5 	bl	8007548 <HAL_GetTick>
 80119be:	4602      	mov	r2, r0
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	1ad3      	subs	r3, r2, r3
 80119c4:	683a      	ldr	r2, [r7, #0]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d803      	bhi.n	80119d2 <HAL_SPI_Transmit+0x16a>
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119d0:	d102      	bne.n	80119d8 <HAL_SPI_Transmit+0x170>
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d114      	bne.n	8011a02 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	f000 fcfb 	bl	80123d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	2200      	movs	r2, #0
 80119e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80119ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	2201      	movs	r2, #1
 80119fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80119fe:	2303      	movs	r3, #3
 8011a00:	e11f      	b.n	8011c42 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a08:	b29b      	uxth	r3, r3
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d1b9      	bne.n	8011982 <HAL_SPI_Transmit+0x11a>
 8011a0e:	e0f2      	b.n	8011bf6 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	68db      	ldr	r3, [r3, #12]
 8011a14:	2b07      	cmp	r3, #7
 8011a16:	f240 80e7 	bls.w	8011be8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8011a1a:	e05d      	b.n	8011ad8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	695b      	ldr	r3, [r3, #20]
 8011a22:	f003 0302 	and.w	r3, r3, #2
 8011a26:	2b02      	cmp	r3, #2
 8011a28:	d132      	bne.n	8011a90 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	2b01      	cmp	r3, #1
 8011a34:	d918      	bls.n	8011a68 <HAL_SPI_Transmit+0x200>
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d014      	beq.n	8011a68 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	6812      	ldr	r2, [r2, #0]
 8011a48:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a4e:	1d1a      	adds	r2, r3, #4
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a5a:	b29b      	uxth	r3, r3
 8011a5c:	3b02      	subs	r3, #2
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011a66:	e037      	b.n	8011ad8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a6c:	881a      	ldrh	r2, [r3, #0]
 8011a6e:	69fb      	ldr	r3, [r7, #28]
 8011a70:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011a76:	1c9a      	adds	r2, r3, #2
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	3b01      	subs	r3, #1
 8011a86:	b29a      	uxth	r2, r3
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011a8e:	e023      	b.n	8011ad8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011a90:	f7f5 fd5a 	bl	8007548 <HAL_GetTick>
 8011a94:	4602      	mov	r2, r0
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	1ad3      	subs	r3, r2, r3
 8011a9a:	683a      	ldr	r2, [r7, #0]
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d803      	bhi.n	8011aa8 <HAL_SPI_Transmit+0x240>
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aa6:	d102      	bne.n	8011aae <HAL_SPI_Transmit+0x246>
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d114      	bne.n	8011ad8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011aae:	68f8      	ldr	r0, [r7, #12]
 8011ab0:	f000 fc90 	bl	80123d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011ac2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2201      	movs	r2, #1
 8011ad0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011ad4:	2303      	movs	r3, #3
 8011ad6:	e0b4      	b.n	8011c42 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011ade:	b29b      	uxth	r3, r3
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d19b      	bne.n	8011a1c <HAL_SPI_Transmit+0x1b4>
 8011ae4:	e087      	b.n	8011bf6 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	695b      	ldr	r3, [r3, #20]
 8011aec:	f003 0302 	and.w	r3, r3, #2
 8011af0:	2b02      	cmp	r3, #2
 8011af2:	d155      	bne.n	8011ba0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	2b03      	cmp	r3, #3
 8011afe:	d918      	bls.n	8011b32 <HAL_SPI_Transmit+0x2ca>
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b04:	2b40      	cmp	r3, #64	; 0x40
 8011b06:	d914      	bls.n	8011b32 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	6812      	ldr	r2, [r2, #0]
 8011b12:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b18:	1d1a      	adds	r2, r3, #4
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b24:	b29b      	uxth	r3, r3
 8011b26:	3b04      	subs	r3, #4
 8011b28:	b29a      	uxth	r2, r3
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011b30:	e05a      	b.n	8011be8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8011b32:	68fb      	ldr	r3, [r7, #12]
 8011b34:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b38:	b29b      	uxth	r3, r3
 8011b3a:	2b01      	cmp	r3, #1
 8011b3c:	d917      	bls.n	8011b6e <HAL_SPI_Transmit+0x306>
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d013      	beq.n	8011b6e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b4a:	881a      	ldrh	r2, [r3, #0]
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b54:	1c9a      	adds	r2, r3, #2
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	3b02      	subs	r3, #2
 8011b64:	b29a      	uxth	r2, r3
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011b6c:	e03c      	b.n	8011be8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011b72:	68fb      	ldr	r3, [r7, #12]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	3320      	adds	r3, #32
 8011b78:	7812      	ldrb	r2, [r2, #0]
 8011b7a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011b80:	1c5a      	adds	r2, r3, #1
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b8c:	b29b      	uxth	r3, r3
 8011b8e:	3b01      	subs	r3, #1
 8011b90:	b29a      	uxth	r2, r3
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8011b98:	e026      	b.n	8011be8 <HAL_SPI_Transmit+0x380>
 8011b9a:	bf00      	nop
 8011b9c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011ba0:	f7f5 fcd2 	bl	8007548 <HAL_GetTick>
 8011ba4:	4602      	mov	r2, r0
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	1ad3      	subs	r3, r2, r3
 8011baa:	683a      	ldr	r2, [r7, #0]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d803      	bhi.n	8011bb8 <HAL_SPI_Transmit+0x350>
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bb6:	d102      	bne.n	8011bbe <HAL_SPI_Transmit+0x356>
 8011bb8:	683b      	ldr	r3, [r7, #0]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d114      	bne.n	8011be8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011bbe:	68f8      	ldr	r0, [r7, #12]
 8011bc0:	f000 fc08 	bl	80123d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011bd2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	2201      	movs	r2, #1
 8011be0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011be4:	2303      	movs	r3, #3
 8011be6:	e02c      	b.n	8011c42 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011bee:	b29b      	uxth	r3, r3
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	f47f af78 	bne.w	8011ae6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	9300      	str	r3, [sp, #0]
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	2108      	movs	r1, #8
 8011c00:	68f8      	ldr	r0, [r7, #12]
 8011c02:	f000 fc87 	bl	8012514 <SPI_WaitOnFlagUntilTimeout>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d007      	beq.n	8011c1c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c12:	f043 0220 	orr.w	r2, r3, #32
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011c1c:	68f8      	ldr	r0, [r7, #12]
 8011c1e:	f000 fbd9 	bl	80123d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	2200      	movs	r2, #0
 8011c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	2201      	movs	r2, #1
 8011c2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d001      	beq.n	8011c40 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	e000      	b.n	8011c42 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8011c40:	7efb      	ldrb	r3, [r7, #27]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3720      	adds	r7, #32
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	bf00      	nop

08011c4c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b08a      	sub	sp, #40	; 0x28
 8011c50:	af02      	add	r7, sp, #8
 8011c52:	60f8      	str	r0, [r7, #12]
 8011c54:	60b9      	str	r1, [r7, #8]
 8011c56:	603b      	str	r3, [r7, #0]
 8011c58:	4613      	mov	r3, r2
 8011c5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	3330      	adds	r3, #48	; 0x30
 8011c66:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011c70:	d112      	bne.n	8011c98 <HAL_SPI_Receive+0x4c>
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	689b      	ldr	r3, [r3, #8]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d10e      	bne.n	8011c98 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	2204      	movs	r2, #4
 8011c7e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011c82:	88fa      	ldrh	r2, [r7, #6]
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	9300      	str	r3, [sp, #0]
 8011c88:	4613      	mov	r3, r2
 8011c8a:	68ba      	ldr	r2, [r7, #8]
 8011c8c:	68b9      	ldr	r1, [r7, #8]
 8011c8e:	68f8      	ldr	r0, [r7, #12]
 8011c90:	f000 f978 	bl	8011f84 <HAL_SPI_TransmitReceive>
 8011c94:	4603      	mov	r3, r0
 8011c96:	e16f      	b.n	8011f78 <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011c9e:	2b01      	cmp	r3, #1
 8011ca0:	d101      	bne.n	8011ca6 <HAL_SPI_Receive+0x5a>
 8011ca2:	2302      	movs	r3, #2
 8011ca4:	e168      	b.n	8011f78 <HAL_SPI_Receive+0x32c>
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	2201      	movs	r2, #1
 8011caa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011cae:	f7f5 fc4b 	bl	8007548 <HAL_GetTick>
 8011cb2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	d007      	beq.n	8011cd0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8011cc0:	2302      	movs	r3, #2
 8011cc2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011ccc:	7ffb      	ldrb	r3, [r7, #31]
 8011cce:	e153      	b.n	8011f78 <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 8011cd0:	68bb      	ldr	r3, [r7, #8]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d002      	beq.n	8011cdc <HAL_SPI_Receive+0x90>
 8011cd6:	88fb      	ldrh	r3, [r7, #6]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d107      	bne.n	8011cec <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8011cdc:	2301      	movs	r3, #1
 8011cde:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8011ce8:	7ffb      	ldrb	r3, [r7, #31]
 8011cea:	e145      	b.n	8011f78 <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2204      	movs	r2, #4
 8011cf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	68ba      	ldr	r2, [r7, #8]
 8011d00:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	88fa      	ldrh	r2, [r7, #6]
 8011d06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	88fa      	ldrh	r2, [r7, #6]
 8011d0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	2200      	movs	r2, #0
 8011d16:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2200      	movs	r2, #0
 8011d24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	2200      	movs	r2, #0
 8011d32:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	689b      	ldr	r3, [r3, #8]
 8011d38:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8011d3c:	d107      	bne.n	8011d4e <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	681a      	ldr	r2, [r3, #0]
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011d4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	685a      	ldr	r2, [r3, #4]
 8011d54:	4b8a      	ldr	r3, [pc, #552]	; (8011f80 <HAL_SPI_Receive+0x334>)
 8011d56:	4013      	ands	r3, r2
 8011d58:	88f9      	ldrh	r1, [r7, #6]
 8011d5a:	68fa      	ldr	r2, [r7, #12]
 8011d5c:	6812      	ldr	r2, [r2, #0]
 8011d5e:	430b      	orrs	r3, r1
 8011d60:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	681a      	ldr	r2, [r3, #0]
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	f042 0201 	orr.w	r2, r2, #1
 8011d70:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011d7a:	d107      	bne.n	8011d8c <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	681a      	ldr	r2, [r3, #0]
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8011d8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	2b0f      	cmp	r3, #15
 8011d92:	d948      	bls.n	8011e26 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8011d94:	e040      	b.n	8011e18 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	695a      	ldr	r2, [r3, #20]
 8011d9c:	f248 0308 	movw	r3, #32776	; 0x8008
 8011da0:	4013      	ands	r3, r2
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d014      	beq.n	8011dd0 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	681a      	ldr	r2, [r3, #0]
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011dae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8011db0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011db6:	1d1a      	adds	r2, r3, #4
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	3b01      	subs	r3, #1
 8011dc6:	b29a      	uxth	r2, r3
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011dce:	e023      	b.n	8011e18 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011dd0:	f7f5 fbba 	bl	8007548 <HAL_GetTick>
 8011dd4:	4602      	mov	r2, r0
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	1ad3      	subs	r3, r2, r3
 8011dda:	683a      	ldr	r2, [r7, #0]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d803      	bhi.n	8011de8 <HAL_SPI_Receive+0x19c>
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de6:	d102      	bne.n	8011dee <HAL_SPI_Receive+0x1a2>
 8011de8:	683b      	ldr	r3, [r7, #0]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d114      	bne.n	8011e18 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	f000 faf0 	bl	80123d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	2200      	movs	r2, #0
 8011df8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	2201      	movs	r2, #1
 8011e10:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011e14:	2303      	movs	r3, #3
 8011e16:	e0af      	b.n	8011f78 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011e1e:	b29b      	uxth	r3, r3
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d1b8      	bne.n	8011d96 <HAL_SPI_Receive+0x14a>
 8011e24:	e095      	b.n	8011f52 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	68db      	ldr	r3, [r3, #12]
 8011e2a:	2b07      	cmp	r3, #7
 8011e2c:	f240 808b 	bls.w	8011f46 <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8011e30:	e03f      	b.n	8011eb2 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	695b      	ldr	r3, [r3, #20]
 8011e38:	f003 0301 	and.w	r3, r3, #1
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d114      	bne.n	8011e6a <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e44:	69ba      	ldr	r2, [r7, #24]
 8011e46:	8812      	ldrh	r2, [r2, #0]
 8011e48:	b292      	uxth	r2, r2
 8011e4a:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e50:	1c9a      	adds	r2, r3, #2
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011e5c:	b29b      	uxth	r3, r3
 8011e5e:	3b01      	subs	r3, #1
 8011e60:	b29a      	uxth	r2, r3
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011e68:	e023      	b.n	8011eb2 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011e6a:	f7f5 fb6d 	bl	8007548 <HAL_GetTick>
 8011e6e:	4602      	mov	r2, r0
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	1ad3      	subs	r3, r2, r3
 8011e74:	683a      	ldr	r2, [r7, #0]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d803      	bhi.n	8011e82 <HAL_SPI_Receive+0x236>
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e80:	d102      	bne.n	8011e88 <HAL_SPI_Receive+0x23c>
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d114      	bne.n	8011eb2 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011e88:	68f8      	ldr	r0, [r7, #12]
 8011e8a:	f000 faa3 	bl	80123d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	2200      	movs	r2, #0
 8011e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e9c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	2201      	movs	r2, #1
 8011eaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011eae:	2303      	movs	r3, #3
 8011eb0:	e062      	b.n	8011f78 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011eb8:	b29b      	uxth	r3, r3
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d1b9      	bne.n	8011e32 <HAL_SPI_Receive+0x1e6>
 8011ebe:	e048      	b.n	8011f52 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	695b      	ldr	r3, [r3, #20]
 8011ec6:	f003 0301 	and.w	r3, r3, #1
 8011eca:	2b01      	cmp	r3, #1
 8011ecc:	d117      	bne.n	8011efe <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011eda:	7812      	ldrb	r2, [r2, #0]
 8011edc:	b2d2      	uxtb	r2, r2
 8011ede:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011ee4:	1c5a      	adds	r2, r3, #1
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011ef0:	b29b      	uxth	r3, r3
 8011ef2:	3b01      	subs	r3, #1
 8011ef4:	b29a      	uxth	r2, r3
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011efc:	e023      	b.n	8011f46 <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011efe:	f7f5 fb23 	bl	8007548 <HAL_GetTick>
 8011f02:	4602      	mov	r2, r0
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	1ad3      	subs	r3, r2, r3
 8011f08:	683a      	ldr	r2, [r7, #0]
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d803      	bhi.n	8011f16 <HAL_SPI_Receive+0x2ca>
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f14:	d102      	bne.n	8011f1c <HAL_SPI_Receive+0x2d0>
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d114      	bne.n	8011f46 <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8011f1c:	68f8      	ldr	r0, [r7, #12]
 8011f1e:	f000 fa59 	bl	80123d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	2200      	movs	r2, #0
 8011f26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2201      	movs	r2, #1
 8011f3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8011f42:	2303      	movs	r3, #3
 8011f44:	e018      	b.n	8011f78 <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011f4c:	b29b      	uxth	r3, r3
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d1b6      	bne.n	8011ec0 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8011f52:	68f8      	ldr	r0, [r7, #12]
 8011f54:	f000 fa3e 	bl	80123d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	2201      	movs	r2, #1
 8011f64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d001      	beq.n	8011f76 <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8011f72:	2301      	movs	r3, #1
 8011f74:	e000      	b.n	8011f78 <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8011f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f78:	4618      	mov	r0, r3
 8011f7a:	3720      	adds	r7, #32
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}
 8011f80:	ffff0000 	.word	0xffff0000

08011f84 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b08e      	sub	sp, #56	; 0x38
 8011f88:	af02      	add	r7, sp, #8
 8011f8a:	60f8      	str	r0, [r7, #12]
 8011f8c:	60b9      	str	r1, [r7, #8]
 8011f8e:	607a      	str	r2, [r7, #4]
 8011f90:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011f92:	2300      	movs	r3, #0
 8011f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	3320      	adds	r3, #32
 8011f9e:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	3330      	adds	r3, #48	; 0x30
 8011fa6:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011fae:	2b01      	cmp	r3, #1
 8011fb0:	d101      	bne.n	8011fb6 <HAL_SPI_TransmitReceive+0x32>
 8011fb2:	2302      	movs	r3, #2
 8011fb4:	e209      	b.n	80123ca <HAL_SPI_TransmitReceive+0x446>
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	2201      	movs	r2, #1
 8011fba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011fbe:	f7f5 fac3 	bl	8007548 <HAL_GetTick>
 8011fc2:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8011fc4:	887b      	ldrh	r3, [r7, #2]
 8011fc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8011fc8:	887b      	ldrh	r3, [r7, #2]
 8011fca:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8011fd2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011fda:	7efb      	ldrb	r3, [r7, #27]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d014      	beq.n	801200a <HAL_SPI_TransmitReceive+0x86>
 8011fe0:	697b      	ldr	r3, [r7, #20]
 8011fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011fe6:	d106      	bne.n	8011ff6 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d102      	bne.n	8011ff6 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8011ff0:	7efb      	ldrb	r3, [r7, #27]
 8011ff2:	2b04      	cmp	r3, #4
 8011ff4:	d009      	beq.n	801200a <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8011ff6:	2302      	movs	r3, #2
 8011ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	2200      	movs	r2, #0
 8012000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8012004:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012008:	e1df      	b.n	80123ca <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d005      	beq.n	801201c <HAL_SPI_TransmitReceive+0x98>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d002      	beq.n	801201c <HAL_SPI_TransmitReceive+0x98>
 8012016:	887b      	ldrh	r3, [r7, #2]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d109      	bne.n	8012030 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 801201c:	2301      	movs	r3, #1
 801201e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2200      	movs	r2, #0
 8012026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 801202a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801202e:	e1cc      	b.n	80123ca <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012036:	b2db      	uxtb	r3, r3
 8012038:	2b04      	cmp	r3, #4
 801203a:	d003      	beq.n	8012044 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	2205      	movs	r2, #5
 8012040:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	2200      	movs	r2, #0
 8012048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	687a      	ldr	r2, [r7, #4]
 8012050:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	887a      	ldrh	r2, [r7, #2]
 8012056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	887a      	ldrh	r2, [r7, #2]
 801205e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	68ba      	ldr	r2, [r7, #8]
 8012066:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	887a      	ldrh	r2, [r7, #2]
 801206c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	887a      	ldrh	r2, [r7, #2]
 8012074:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	2200      	movs	r2, #0
 801207c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	2200      	movs	r2, #0
 8012082:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	685a      	ldr	r2, [r3, #4]
 801208a:	4b82      	ldr	r3, [pc, #520]	; (8012294 <HAL_SPI_TransmitReceive+0x310>)
 801208c:	4013      	ands	r3, r2
 801208e:	8879      	ldrh	r1, [r7, #2]
 8012090:	68fa      	ldr	r2, [r7, #12]
 8012092:	6812      	ldr	r2, [r2, #0]
 8012094:	430b      	orrs	r3, r1
 8012096:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	f042 0201 	orr.w	r2, r2, #1
 80120a6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80120b0:	d107      	bne.n	80120c2 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	681a      	ldr	r2, [r3, #0]
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80120c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	68db      	ldr	r3, [r3, #12]
 80120c6:	2b0f      	cmp	r3, #15
 80120c8:	d970      	bls.n	80121ac <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80120ca:	e068      	b.n	801219e <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	695b      	ldr	r3, [r3, #20]
 80120d2:	f003 0302 	and.w	r3, r3, #2
 80120d6:	2b02      	cmp	r3, #2
 80120d8:	d11a      	bne.n	8012110 <HAL_SPI_TransmitReceive+0x18c>
 80120da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d017      	beq.n	8012110 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	6812      	ldr	r2, [r2, #0]
 80120ea:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120f0:	1d1a      	adds	r2, r3, #4
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	3b01      	subs	r3, #1
 8012100:	b29a      	uxth	r2, r3
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801210e:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	695a      	ldr	r2, [r3, #20]
 8012116:	f248 0308 	movw	r3, #32776	; 0x8008
 801211a:	4013      	ands	r3, r2
 801211c:	2b00      	cmp	r3, #0
 801211e:	d01a      	beq.n	8012156 <HAL_SPI_TransmitReceive+0x1d2>
 8012120:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012122:	2b00      	cmp	r3, #0
 8012124:	d017      	beq.n	8012156 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	681a      	ldr	r2, [r3, #0]
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801212e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8012130:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012136:	1d1a      	adds	r2, r3, #4
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012142:	b29b      	uxth	r3, r3
 8012144:	3b01      	subs	r3, #1
 8012146:	b29a      	uxth	r2, r3
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012154:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012156:	f7f5 f9f7 	bl	8007548 <HAL_GetTick>
 801215a:	4602      	mov	r2, r0
 801215c:	69fb      	ldr	r3, [r7, #28]
 801215e:	1ad3      	subs	r3, r2, r3
 8012160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012162:	429a      	cmp	r2, r3
 8012164:	d803      	bhi.n	801216e <HAL_SPI_TransmitReceive+0x1ea>
 8012166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012168:	f1b3 3fff 	cmp.w	r3, #4294967295
 801216c:	d102      	bne.n	8012174 <HAL_SPI_TransmitReceive+0x1f0>
 801216e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012170:	2b00      	cmp	r3, #0
 8012172:	d114      	bne.n	801219e <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8012174:	68f8      	ldr	r0, [r7, #12]
 8012176:	f000 f92d 	bl	80123d4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	2200      	movs	r2, #0
 801217e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012188:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	2201      	movs	r2, #1
 8012196:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 801219a:	2303      	movs	r3, #3
 801219c:	e115      	b.n	80123ca <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 801219e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d193      	bne.n	80120cc <HAL_SPI_TransmitReceive+0x148>
 80121a4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d190      	bne.n	80120cc <HAL_SPI_TransmitReceive+0x148>
 80121aa:	e0e7      	b.n	801237c <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	68db      	ldr	r3, [r3, #12]
 80121b0:	2b07      	cmp	r3, #7
 80121b2:	f240 80dd 	bls.w	8012370 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80121b6:	e066      	b.n	8012286 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	695b      	ldr	r3, [r3, #20]
 80121be:	f003 0302 	and.w	r3, r3, #2
 80121c2:	2b02      	cmp	r3, #2
 80121c4:	d119      	bne.n	80121fa <HAL_SPI_TransmitReceive+0x276>
 80121c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d016      	beq.n	80121fa <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121d0:	881a      	ldrh	r2, [r3, #0]
 80121d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121d4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121da:	1c9a      	adds	r2, r3, #2
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80121e6:	b29b      	uxth	r3, r3
 80121e8:	3b01      	subs	r3, #1
 80121ea:	b29a      	uxth	r2, r3
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80121f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	695b      	ldr	r3, [r3, #20]
 8012200:	f003 0301 	and.w	r3, r3, #1
 8012204:	2b01      	cmp	r3, #1
 8012206:	d11a      	bne.n	801223e <HAL_SPI_TransmitReceive+0x2ba>
 8012208:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801220a:	2b00      	cmp	r3, #0
 801220c:	d017      	beq.n	801223e <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012212:	6a3a      	ldr	r2, [r7, #32]
 8012214:	8812      	ldrh	r2, [r2, #0]
 8012216:	b292      	uxth	r2, r2
 8012218:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801221e:	1c9a      	adds	r2, r3, #2
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801222a:	b29b      	uxth	r3, r3
 801222c:	3b01      	subs	r3, #1
 801222e:	b29a      	uxth	r2, r3
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801223c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801223e:	f7f5 f983 	bl	8007548 <HAL_GetTick>
 8012242:	4602      	mov	r2, r0
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801224a:	429a      	cmp	r2, r3
 801224c:	d803      	bhi.n	8012256 <HAL_SPI_TransmitReceive+0x2d2>
 801224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012254:	d102      	bne.n	801225c <HAL_SPI_TransmitReceive+0x2d8>
 8012256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012258:	2b00      	cmp	r3, #0
 801225a:	d114      	bne.n	8012286 <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 801225c:	68f8      	ldr	r0, [r7, #12]
 801225e:	f000 f8b9 	bl	80123d4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	2200      	movs	r2, #0
 8012266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012270:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	2201      	movs	r2, #1
 801227e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8012282:	2303      	movs	r3, #3
 8012284:	e0a1      	b.n	80123ca <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8012286:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012288:	2b00      	cmp	r3, #0
 801228a:	d195      	bne.n	80121b8 <HAL_SPI_TransmitReceive+0x234>
 801228c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801228e:	2b00      	cmp	r3, #0
 8012290:	d192      	bne.n	80121b8 <HAL_SPI_TransmitReceive+0x234>
 8012292:	e073      	b.n	801237c <HAL_SPI_TransmitReceive+0x3f8>
 8012294:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	681b      	ldr	r3, [r3, #0]
 801229c:	695b      	ldr	r3, [r3, #20]
 801229e:	f003 0302 	and.w	r3, r3, #2
 80122a2:	2b02      	cmp	r3, #2
 80122a4:	d11b      	bne.n	80122de <HAL_SPI_TransmitReceive+0x35a>
 80122a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d018      	beq.n	80122de <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	3320      	adds	r3, #32
 80122b6:	7812      	ldrb	r2, [r2, #0]
 80122b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80122be:	1c5a      	adds	r2, r3, #1
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	3b01      	subs	r3, #1
 80122ce:	b29a      	uxth	r2, r3
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80122dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	695b      	ldr	r3, [r3, #20]
 80122e4:	f003 0301 	and.w	r3, r3, #1
 80122e8:	2b01      	cmp	r3, #1
 80122ea:	d11d      	bne.n	8012328 <HAL_SPI_TransmitReceive+0x3a4>
 80122ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d01a      	beq.n	8012328 <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80122fe:	7812      	ldrb	r2, [r2, #0]
 8012300:	b2d2      	uxtb	r2, r2
 8012302:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012308:	1c5a      	adds	r2, r3, #1
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012314:	b29b      	uxth	r3, r3
 8012316:	3b01      	subs	r3, #1
 8012318:	b29a      	uxth	r2, r3
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012326:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012328:	f7f5 f90e 	bl	8007548 <HAL_GetTick>
 801232c:	4602      	mov	r2, r0
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012334:	429a      	cmp	r2, r3
 8012336:	d803      	bhi.n	8012340 <HAL_SPI_TransmitReceive+0x3bc>
 8012338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801233a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801233e:	d102      	bne.n	8012346 <HAL_SPI_TransmitReceive+0x3c2>
 8012340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012342:	2b00      	cmp	r3, #0
 8012344:	d114      	bne.n	8012370 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8012346:	68f8      	ldr	r0, [r7, #12]
 8012348:	f000 f844 	bl	80123d4 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	2200      	movs	r2, #0
 8012350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801235a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	2201      	movs	r2, #1
 8012368:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 801236c:	2303      	movs	r3, #3
 801236e:	e02c      	b.n	80123ca <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8012370:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012372:	2b00      	cmp	r3, #0
 8012374:	d190      	bne.n	8012298 <HAL_SPI_TransmitReceive+0x314>
 8012376:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012378:	2b00      	cmp	r3, #0
 801237a:	d18d      	bne.n	8012298 <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 801237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801237e:	9300      	str	r3, [sp, #0]
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	2200      	movs	r2, #0
 8012384:	2108      	movs	r1, #8
 8012386:	68f8      	ldr	r0, [r7, #12]
 8012388:	f000 f8c4 	bl	8012514 <SPI_WaitOnFlagUntilTimeout>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	d007      	beq.n	80123a2 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012398:	f043 0220 	orr.w	r2, r3, #32
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80123a2:	68f8      	ldr	r0, [r7, #12]
 80123a4:	f000 f816 	bl	80123d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	2200      	movs	r2, #0
 80123ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	2201      	movs	r2, #1
 80123b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d001      	beq.n	80123c6 <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80123c2:	2301      	movs	r3, #1
 80123c4:	e001      	b.n	80123ca <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80123c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3730      	adds	r7, #48	; 0x30
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	bf00      	nop

080123d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80123d4:	b480      	push	{r7}
 80123d6:	b085      	sub	sp, #20
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	695b      	ldr	r3, [r3, #20]
 80123e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	699a      	ldr	r2, [r3, #24]
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	f042 0208 	orr.w	r2, r2, #8
 80123f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	699a      	ldr	r2, [r3, #24]
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681b      	ldr	r3, [r3, #0]
 80123fe:	f042 0210 	orr.w	r2, r2, #16
 8012402:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	681a      	ldr	r2, [r3, #0]
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	f022 0201 	bic.w	r2, r2, #1
 8012412:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	6919      	ldr	r1, [r3, #16]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681a      	ldr	r2, [r3, #0]
 801241e:	4b3c      	ldr	r3, [pc, #240]	; (8012510 <SPI_CloseTransfer+0x13c>)
 8012420:	400b      	ands	r3, r1
 8012422:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	689a      	ldr	r2, [r3, #8]
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8012432:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801243a:	b2db      	uxtb	r3, r3
 801243c:	2b04      	cmp	r3, #4
 801243e:	d014      	beq.n	801246a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	f003 0320 	and.w	r3, r3, #32
 8012446:	2b00      	cmp	r3, #0
 8012448:	d00f      	beq.n	801246a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012450:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	699a      	ldr	r2, [r3, #24]
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	f042 0220 	orr.w	r2, r2, #32
 8012468:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8012470:	b2db      	uxtb	r3, r3
 8012472:	2b03      	cmp	r3, #3
 8012474:	d014      	beq.n	80124a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801247c:	2b00      	cmp	r3, #0
 801247e:	d00f      	beq.n	80124a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012486:	f043 0204 	orr.w	r2, r3, #4
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	699a      	ldr	r2, [r3, #24]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801249e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d00f      	beq.n	80124ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124b0:	f043 0201 	orr.w	r2, r3, #1
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	699a      	ldr	r2, [r3, #24]
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80124c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80124ca:	68fb      	ldr	r3, [r7, #12]
 80124cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d00f      	beq.n	80124f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80124da:	f043 0208 	orr.w	r2, r3, #8
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	699a      	ldr	r2, [r3, #24]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80124f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2200      	movs	r2, #0
 80124f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	2200      	movs	r2, #0
 8012500:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8012504:	bf00      	nop
 8012506:	3714      	adds	r7, #20
 8012508:	46bd      	mov	sp, r7
 801250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250e:	4770      	bx	lr
 8012510:	fffffc90 	.word	0xfffffc90

08012514 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b084      	sub	sp, #16
 8012518:	af00      	add	r7, sp, #0
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	603b      	str	r3, [r7, #0]
 8012520:	4613      	mov	r3, r2
 8012522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012524:	e010      	b.n	8012548 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8012526:	f7f5 f80f 	bl	8007548 <HAL_GetTick>
 801252a:	4602      	mov	r2, r0
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	1ad3      	subs	r3, r2, r3
 8012530:	69ba      	ldr	r2, [r7, #24]
 8012532:	429a      	cmp	r2, r3
 8012534:	d803      	bhi.n	801253e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8012536:	69bb      	ldr	r3, [r7, #24]
 8012538:	f1b3 3fff 	cmp.w	r3, #4294967295
 801253c:	d102      	bne.n	8012544 <SPI_WaitOnFlagUntilTimeout+0x30>
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d101      	bne.n	8012548 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8012544:	2303      	movs	r3, #3
 8012546:	e00f      	b.n	8012568 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	695a      	ldr	r2, [r3, #20]
 801254e:	68bb      	ldr	r3, [r7, #8]
 8012550:	4013      	ands	r3, r2
 8012552:	68ba      	ldr	r2, [r7, #8]
 8012554:	429a      	cmp	r2, r3
 8012556:	bf0c      	ite	eq
 8012558:	2301      	moveq	r3, #1
 801255a:	2300      	movne	r3, #0
 801255c:	b2db      	uxtb	r3, r3
 801255e:	461a      	mov	r2, r3
 8012560:	79fb      	ldrb	r3, [r7, #7]
 8012562:	429a      	cmp	r2, r3
 8012564:	d0df      	beq.n	8012526 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8012566:	2300      	movs	r3, #0
}
 8012568:	4618      	mov	r0, r3
 801256a:	3710      	adds	r7, #16
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8012570:	b480      	push	{r7}
 8012572:	b085      	sub	sp, #20
 8012574:	af00      	add	r7, sp, #0
 8012576:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801257c:	095b      	lsrs	r3, r3, #5
 801257e:	3301      	adds	r3, #1
 8012580:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	3301      	adds	r3, #1
 8012588:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801258a:	68bb      	ldr	r3, [r7, #8]
 801258c:	3307      	adds	r3, #7
 801258e:	08db      	lsrs	r3, r3, #3
 8012590:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	68fa      	ldr	r2, [r7, #12]
 8012596:	fb02 f303 	mul.w	r3, r2, r3
}
 801259a:	4618      	mov	r0, r3
 801259c:	3714      	adds	r7, #20
 801259e:	46bd      	mov	sp, r7
 80125a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a4:	4770      	bx	lr

080125a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b082      	sub	sp, #8
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d101      	bne.n	80125b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80125b4:	2301      	movs	r3, #1
 80125b6:	e049      	b.n	801264c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80125be:	b2db      	uxtb	r3, r3
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d106      	bne.n	80125d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	2200      	movs	r2, #0
 80125c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f7f4 fabd 	bl	8006b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	2202      	movs	r2, #2
 80125d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	3304      	adds	r3, #4
 80125e2:	4619      	mov	r1, r3
 80125e4:	4610      	mov	r0, r2
 80125e6:	f001 fabf 	bl	8013b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	2201      	movs	r2, #1
 80125ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	2201      	movs	r2, #1
 80125f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	2201      	movs	r2, #1
 80125fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2201      	movs	r2, #1
 8012606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2201      	movs	r2, #1
 801260e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	2201      	movs	r2, #1
 8012616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	2201      	movs	r2, #1
 801261e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2201      	movs	r2, #1
 8012626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2201      	movs	r2, #1
 801262e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2201      	movs	r2, #1
 8012636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	2201      	movs	r2, #1
 801263e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2201      	movs	r2, #1
 8012646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801264a:	2300      	movs	r3, #0
}
 801264c:	4618      	mov	r0, r3
 801264e:	3708      	adds	r7, #8
 8012650:	46bd      	mov	sp, r7
 8012652:	bd80      	pop	{r7, pc}

08012654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012654:	b480      	push	{r7}
 8012656:	b085      	sub	sp, #20
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012662:	b2db      	uxtb	r3, r3
 8012664:	2b01      	cmp	r3, #1
 8012666:	d001      	beq.n	801266c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8012668:	2301      	movs	r3, #1
 801266a:	e05e      	b.n	801272a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2202      	movs	r2, #2
 8012670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	68da      	ldr	r2, [r3, #12]
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f042 0201 	orr.w	r2, r2, #1
 8012682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	4a2b      	ldr	r2, [pc, #172]	; (8012738 <HAL_TIM_Base_Start_IT+0xe4>)
 801268a:	4293      	cmp	r3, r2
 801268c:	d02c      	beq.n	80126e8 <HAL_TIM_Base_Start_IT+0x94>
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012696:	d027      	beq.n	80126e8 <HAL_TIM_Base_Start_IT+0x94>
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	4a27      	ldr	r2, [pc, #156]	; (801273c <HAL_TIM_Base_Start_IT+0xe8>)
 801269e:	4293      	cmp	r3, r2
 80126a0:	d022      	beq.n	80126e8 <HAL_TIM_Base_Start_IT+0x94>
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	4a26      	ldr	r2, [pc, #152]	; (8012740 <HAL_TIM_Base_Start_IT+0xec>)
 80126a8:	4293      	cmp	r3, r2
 80126aa:	d01d      	beq.n	80126e8 <HAL_TIM_Base_Start_IT+0x94>
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	4a24      	ldr	r2, [pc, #144]	; (8012744 <HAL_TIM_Base_Start_IT+0xf0>)
 80126b2:	4293      	cmp	r3, r2
 80126b4:	d018      	beq.n	80126e8 <HAL_TIM_Base_Start_IT+0x94>
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	4a23      	ldr	r2, [pc, #140]	; (8012748 <HAL_TIM_Base_Start_IT+0xf4>)
 80126bc:	4293      	cmp	r3, r2
 80126be:	d013      	beq.n	80126e8 <HAL_TIM_Base_Start_IT+0x94>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	4a21      	ldr	r2, [pc, #132]	; (801274c <HAL_TIM_Base_Start_IT+0xf8>)
 80126c6:	4293      	cmp	r3, r2
 80126c8:	d00e      	beq.n	80126e8 <HAL_TIM_Base_Start_IT+0x94>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	4a20      	ldr	r2, [pc, #128]	; (8012750 <HAL_TIM_Base_Start_IT+0xfc>)
 80126d0:	4293      	cmp	r3, r2
 80126d2:	d009      	beq.n	80126e8 <HAL_TIM_Base_Start_IT+0x94>
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	4a1e      	ldr	r2, [pc, #120]	; (8012754 <HAL_TIM_Base_Start_IT+0x100>)
 80126da:	4293      	cmp	r3, r2
 80126dc:	d004      	beq.n	80126e8 <HAL_TIM_Base_Start_IT+0x94>
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	4a1d      	ldr	r2, [pc, #116]	; (8012758 <HAL_TIM_Base_Start_IT+0x104>)
 80126e4:	4293      	cmp	r3, r2
 80126e6:	d115      	bne.n	8012714 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	689a      	ldr	r2, [r3, #8]
 80126ee:	4b1b      	ldr	r3, [pc, #108]	; (801275c <HAL_TIM_Base_Start_IT+0x108>)
 80126f0:	4013      	ands	r3, r2
 80126f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	2b06      	cmp	r3, #6
 80126f8:	d015      	beq.n	8012726 <HAL_TIM_Base_Start_IT+0xd2>
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012700:	d011      	beq.n	8012726 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	f042 0201 	orr.w	r2, r2, #1
 8012710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012712:	e008      	b.n	8012726 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	681a      	ldr	r2, [r3, #0]
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	f042 0201 	orr.w	r2, r2, #1
 8012722:	601a      	str	r2, [r3, #0]
 8012724:	e000      	b.n	8012728 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012726:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012728:	2300      	movs	r3, #0
}
 801272a:	4618      	mov	r0, r3
 801272c:	3714      	adds	r7, #20
 801272e:	46bd      	mov	sp, r7
 8012730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012734:	4770      	bx	lr
 8012736:	bf00      	nop
 8012738:	40010000 	.word	0x40010000
 801273c:	40000400 	.word	0x40000400
 8012740:	40000800 	.word	0x40000800
 8012744:	40000c00 	.word	0x40000c00
 8012748:	40010400 	.word	0x40010400
 801274c:	40001800 	.word	0x40001800
 8012750:	40014000 	.word	0x40014000
 8012754:	4000e000 	.word	0x4000e000
 8012758:	4000e400 	.word	0x4000e400
 801275c:	00010007 	.word	0x00010007

08012760 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d101      	bne.n	8012772 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801276e:	2301      	movs	r3, #1
 8012770:	e049      	b.n	8012806 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012778:	b2db      	uxtb	r3, r3
 801277a:	2b00      	cmp	r3, #0
 801277c:	d106      	bne.n	801278c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2200      	movs	r2, #0
 8012782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f7f4 f872 	bl	8006870 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2202      	movs	r2, #2
 8012790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	681a      	ldr	r2, [r3, #0]
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	3304      	adds	r3, #4
 801279c:	4619      	mov	r1, r3
 801279e:	4610      	mov	r0, r2
 80127a0:	f001 f9e2 	bl	8013b68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2201      	movs	r2, #1
 80127a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2201      	movs	r2, #1
 80127b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2201      	movs	r2, #1
 80127b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	2201      	movs	r2, #1
 80127c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	2201      	movs	r2, #1
 80127c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2201      	movs	r2, #1
 80127d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	2201      	movs	r2, #1
 80127d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2201      	movs	r2, #1
 80127e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2201      	movs	r2, #1
 80127e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2201      	movs	r2, #1
 80127f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	2201      	movs	r2, #1
 80127f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	2201      	movs	r2, #1
 8012800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8012804:	2300      	movs	r3, #0
}
 8012806:	4618      	mov	r0, r3
 8012808:	3708      	adds	r7, #8
 801280a:	46bd      	mov	sp, r7
 801280c:	bd80      	pop	{r7, pc}
	...

08012810 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b084      	sub	sp, #16
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d109      	bne.n	8012834 <HAL_TIM_PWM_Start+0x24>
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012826:	b2db      	uxtb	r3, r3
 8012828:	2b01      	cmp	r3, #1
 801282a:	bf14      	ite	ne
 801282c:	2301      	movne	r3, #1
 801282e:	2300      	moveq	r3, #0
 8012830:	b2db      	uxtb	r3, r3
 8012832:	e03c      	b.n	80128ae <HAL_TIM_PWM_Start+0x9e>
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	2b04      	cmp	r3, #4
 8012838:	d109      	bne.n	801284e <HAL_TIM_PWM_Start+0x3e>
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012840:	b2db      	uxtb	r3, r3
 8012842:	2b01      	cmp	r3, #1
 8012844:	bf14      	ite	ne
 8012846:	2301      	movne	r3, #1
 8012848:	2300      	moveq	r3, #0
 801284a:	b2db      	uxtb	r3, r3
 801284c:	e02f      	b.n	80128ae <HAL_TIM_PWM_Start+0x9e>
 801284e:	683b      	ldr	r3, [r7, #0]
 8012850:	2b08      	cmp	r3, #8
 8012852:	d109      	bne.n	8012868 <HAL_TIM_PWM_Start+0x58>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801285a:	b2db      	uxtb	r3, r3
 801285c:	2b01      	cmp	r3, #1
 801285e:	bf14      	ite	ne
 8012860:	2301      	movne	r3, #1
 8012862:	2300      	moveq	r3, #0
 8012864:	b2db      	uxtb	r3, r3
 8012866:	e022      	b.n	80128ae <HAL_TIM_PWM_Start+0x9e>
 8012868:	683b      	ldr	r3, [r7, #0]
 801286a:	2b0c      	cmp	r3, #12
 801286c:	d109      	bne.n	8012882 <HAL_TIM_PWM_Start+0x72>
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012874:	b2db      	uxtb	r3, r3
 8012876:	2b01      	cmp	r3, #1
 8012878:	bf14      	ite	ne
 801287a:	2301      	movne	r3, #1
 801287c:	2300      	moveq	r3, #0
 801287e:	b2db      	uxtb	r3, r3
 8012880:	e015      	b.n	80128ae <HAL_TIM_PWM_Start+0x9e>
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	2b10      	cmp	r3, #16
 8012886:	d109      	bne.n	801289c <HAL_TIM_PWM_Start+0x8c>
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801288e:	b2db      	uxtb	r3, r3
 8012890:	2b01      	cmp	r3, #1
 8012892:	bf14      	ite	ne
 8012894:	2301      	movne	r3, #1
 8012896:	2300      	moveq	r3, #0
 8012898:	b2db      	uxtb	r3, r3
 801289a:	e008      	b.n	80128ae <HAL_TIM_PWM_Start+0x9e>
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128a2:	b2db      	uxtb	r3, r3
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	bf14      	ite	ne
 80128a8:	2301      	movne	r3, #1
 80128aa:	2300      	moveq	r3, #0
 80128ac:	b2db      	uxtb	r3, r3
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d001      	beq.n	80128b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80128b2:	2301      	movs	r3, #1
 80128b4:	e0ab      	b.n	8012a0e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d104      	bne.n	80128c6 <HAL_TIM_PWM_Start+0xb6>
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2202      	movs	r2, #2
 80128c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80128c4:	e023      	b.n	801290e <HAL_TIM_PWM_Start+0xfe>
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	2b04      	cmp	r3, #4
 80128ca:	d104      	bne.n	80128d6 <HAL_TIM_PWM_Start+0xc6>
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2202      	movs	r2, #2
 80128d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80128d4:	e01b      	b.n	801290e <HAL_TIM_PWM_Start+0xfe>
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	2b08      	cmp	r3, #8
 80128da:	d104      	bne.n	80128e6 <HAL_TIM_PWM_Start+0xd6>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	2202      	movs	r2, #2
 80128e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80128e4:	e013      	b.n	801290e <HAL_TIM_PWM_Start+0xfe>
 80128e6:	683b      	ldr	r3, [r7, #0]
 80128e8:	2b0c      	cmp	r3, #12
 80128ea:	d104      	bne.n	80128f6 <HAL_TIM_PWM_Start+0xe6>
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2202      	movs	r2, #2
 80128f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80128f4:	e00b      	b.n	801290e <HAL_TIM_PWM_Start+0xfe>
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	2b10      	cmp	r3, #16
 80128fa:	d104      	bne.n	8012906 <HAL_TIM_PWM_Start+0xf6>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2202      	movs	r2, #2
 8012900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012904:	e003      	b.n	801290e <HAL_TIM_PWM_Start+0xfe>
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2202      	movs	r2, #2
 801290a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2201      	movs	r2, #1
 8012914:	6839      	ldr	r1, [r7, #0]
 8012916:	4618      	mov	r0, r3
 8012918:	f001 fd40 	bl	801439c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	4a3d      	ldr	r2, [pc, #244]	; (8012a18 <HAL_TIM_PWM_Start+0x208>)
 8012922:	4293      	cmp	r3, r2
 8012924:	d013      	beq.n	801294e <HAL_TIM_PWM_Start+0x13e>
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	4a3c      	ldr	r2, [pc, #240]	; (8012a1c <HAL_TIM_PWM_Start+0x20c>)
 801292c:	4293      	cmp	r3, r2
 801292e:	d00e      	beq.n	801294e <HAL_TIM_PWM_Start+0x13e>
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	4a3a      	ldr	r2, [pc, #232]	; (8012a20 <HAL_TIM_PWM_Start+0x210>)
 8012936:	4293      	cmp	r3, r2
 8012938:	d009      	beq.n	801294e <HAL_TIM_PWM_Start+0x13e>
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	4a39      	ldr	r2, [pc, #228]	; (8012a24 <HAL_TIM_PWM_Start+0x214>)
 8012940:	4293      	cmp	r3, r2
 8012942:	d004      	beq.n	801294e <HAL_TIM_PWM_Start+0x13e>
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	4a37      	ldr	r2, [pc, #220]	; (8012a28 <HAL_TIM_PWM_Start+0x218>)
 801294a:	4293      	cmp	r3, r2
 801294c:	d101      	bne.n	8012952 <HAL_TIM_PWM_Start+0x142>
 801294e:	2301      	movs	r3, #1
 8012950:	e000      	b.n	8012954 <HAL_TIM_PWM_Start+0x144>
 8012952:	2300      	movs	r3, #0
 8012954:	2b00      	cmp	r3, #0
 8012956:	d007      	beq.n	8012968 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012966:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	4a2a      	ldr	r2, [pc, #168]	; (8012a18 <HAL_TIM_PWM_Start+0x208>)
 801296e:	4293      	cmp	r3, r2
 8012970:	d02c      	beq.n	80129cc <HAL_TIM_PWM_Start+0x1bc>
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801297a:	d027      	beq.n	80129cc <HAL_TIM_PWM_Start+0x1bc>
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4a2a      	ldr	r2, [pc, #168]	; (8012a2c <HAL_TIM_PWM_Start+0x21c>)
 8012982:	4293      	cmp	r3, r2
 8012984:	d022      	beq.n	80129cc <HAL_TIM_PWM_Start+0x1bc>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	4a29      	ldr	r2, [pc, #164]	; (8012a30 <HAL_TIM_PWM_Start+0x220>)
 801298c:	4293      	cmp	r3, r2
 801298e:	d01d      	beq.n	80129cc <HAL_TIM_PWM_Start+0x1bc>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	4a27      	ldr	r2, [pc, #156]	; (8012a34 <HAL_TIM_PWM_Start+0x224>)
 8012996:	4293      	cmp	r3, r2
 8012998:	d018      	beq.n	80129cc <HAL_TIM_PWM_Start+0x1bc>
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	4a1f      	ldr	r2, [pc, #124]	; (8012a1c <HAL_TIM_PWM_Start+0x20c>)
 80129a0:	4293      	cmp	r3, r2
 80129a2:	d013      	beq.n	80129cc <HAL_TIM_PWM_Start+0x1bc>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	4a23      	ldr	r2, [pc, #140]	; (8012a38 <HAL_TIM_PWM_Start+0x228>)
 80129aa:	4293      	cmp	r3, r2
 80129ac:	d00e      	beq.n	80129cc <HAL_TIM_PWM_Start+0x1bc>
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	4a1b      	ldr	r2, [pc, #108]	; (8012a20 <HAL_TIM_PWM_Start+0x210>)
 80129b4:	4293      	cmp	r3, r2
 80129b6:	d009      	beq.n	80129cc <HAL_TIM_PWM_Start+0x1bc>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	4a1f      	ldr	r2, [pc, #124]	; (8012a3c <HAL_TIM_PWM_Start+0x22c>)
 80129be:	4293      	cmp	r3, r2
 80129c0:	d004      	beq.n	80129cc <HAL_TIM_PWM_Start+0x1bc>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	681b      	ldr	r3, [r3, #0]
 80129c6:	4a1e      	ldr	r2, [pc, #120]	; (8012a40 <HAL_TIM_PWM_Start+0x230>)
 80129c8:	4293      	cmp	r3, r2
 80129ca:	d115      	bne.n	80129f8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	689a      	ldr	r2, [r3, #8]
 80129d2:	4b1c      	ldr	r3, [pc, #112]	; (8012a44 <HAL_TIM_PWM_Start+0x234>)
 80129d4:	4013      	ands	r3, r2
 80129d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	2b06      	cmp	r3, #6
 80129dc:	d015      	beq.n	8012a0a <HAL_TIM_PWM_Start+0x1fa>
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80129e4:	d011      	beq.n	8012a0a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	681a      	ldr	r2, [r3, #0]
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	f042 0201 	orr.w	r2, r2, #1
 80129f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80129f6:	e008      	b.n	8012a0a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	681a      	ldr	r2, [r3, #0]
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	f042 0201 	orr.w	r2, r2, #1
 8012a06:	601a      	str	r2, [r3, #0]
 8012a08:	e000      	b.n	8012a0c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012a0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8012a0c:	2300      	movs	r3, #0
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3710      	adds	r7, #16
 8012a12:	46bd      	mov	sp, r7
 8012a14:	bd80      	pop	{r7, pc}
 8012a16:	bf00      	nop
 8012a18:	40010000 	.word	0x40010000
 8012a1c:	40010400 	.word	0x40010400
 8012a20:	40014000 	.word	0x40014000
 8012a24:	40014400 	.word	0x40014400
 8012a28:	40014800 	.word	0x40014800
 8012a2c:	40000400 	.word	0x40000400
 8012a30:	40000800 	.word	0x40000800
 8012a34:	40000c00 	.word	0x40000c00
 8012a38:	40001800 	.word	0x40001800
 8012a3c:	4000e000 	.word	0x4000e000
 8012a40:	4000e400 	.word	0x4000e400
 8012a44:	00010007 	.word	0x00010007

08012a48 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b086      	sub	sp, #24
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	60f8      	str	r0, [r7, #12]
 8012a50:	60b9      	str	r1, [r7, #8]
 8012a52:	607a      	str	r2, [r7, #4]
 8012a54:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8012a56:	2300      	movs	r3, #0
 8012a58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d109      	bne.n	8012a74 <HAL_TIM_PWM_Start_DMA+0x2c>
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	2b02      	cmp	r3, #2
 8012a6a:	bf0c      	ite	eq
 8012a6c:	2301      	moveq	r3, #1
 8012a6e:	2300      	movne	r3, #0
 8012a70:	b2db      	uxtb	r3, r3
 8012a72:	e03c      	b.n	8012aee <HAL_TIM_PWM_Start_DMA+0xa6>
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	2b04      	cmp	r3, #4
 8012a78:	d109      	bne.n	8012a8e <HAL_TIM_PWM_Start_DMA+0x46>
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012a80:	b2db      	uxtb	r3, r3
 8012a82:	2b02      	cmp	r3, #2
 8012a84:	bf0c      	ite	eq
 8012a86:	2301      	moveq	r3, #1
 8012a88:	2300      	movne	r3, #0
 8012a8a:	b2db      	uxtb	r3, r3
 8012a8c:	e02f      	b.n	8012aee <HAL_TIM_PWM_Start_DMA+0xa6>
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	2b08      	cmp	r3, #8
 8012a92:	d109      	bne.n	8012aa8 <HAL_TIM_PWM_Start_DMA+0x60>
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	2b02      	cmp	r3, #2
 8012a9e:	bf0c      	ite	eq
 8012aa0:	2301      	moveq	r3, #1
 8012aa2:	2300      	movne	r3, #0
 8012aa4:	b2db      	uxtb	r3, r3
 8012aa6:	e022      	b.n	8012aee <HAL_TIM_PWM_Start_DMA+0xa6>
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	2b0c      	cmp	r3, #12
 8012aac:	d109      	bne.n	8012ac2 <HAL_TIM_PWM_Start_DMA+0x7a>
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012ab4:	b2db      	uxtb	r3, r3
 8012ab6:	2b02      	cmp	r3, #2
 8012ab8:	bf0c      	ite	eq
 8012aba:	2301      	moveq	r3, #1
 8012abc:	2300      	movne	r3, #0
 8012abe:	b2db      	uxtb	r3, r3
 8012ac0:	e015      	b.n	8012aee <HAL_TIM_PWM_Start_DMA+0xa6>
 8012ac2:	68bb      	ldr	r3, [r7, #8]
 8012ac4:	2b10      	cmp	r3, #16
 8012ac6:	d109      	bne.n	8012adc <HAL_TIM_PWM_Start_DMA+0x94>
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012ace:	b2db      	uxtb	r3, r3
 8012ad0:	2b02      	cmp	r3, #2
 8012ad2:	bf0c      	ite	eq
 8012ad4:	2301      	moveq	r3, #1
 8012ad6:	2300      	movne	r3, #0
 8012ad8:	b2db      	uxtb	r3, r3
 8012ada:	e008      	b.n	8012aee <HAL_TIM_PWM_Start_DMA+0xa6>
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012ae2:	b2db      	uxtb	r3, r3
 8012ae4:	2b02      	cmp	r3, #2
 8012ae6:	bf0c      	ite	eq
 8012ae8:	2301      	moveq	r3, #1
 8012aea:	2300      	movne	r3, #0
 8012aec:	b2db      	uxtb	r3, r3
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d001      	beq.n	8012af6 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8012af2:	2302      	movs	r3, #2
 8012af4:	e1ba      	b.n	8012e6c <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d109      	bne.n	8012b10 <HAL_TIM_PWM_Start_DMA+0xc8>
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8012b02:	b2db      	uxtb	r3, r3
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	bf0c      	ite	eq
 8012b08:	2301      	moveq	r3, #1
 8012b0a:	2300      	movne	r3, #0
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	e03c      	b.n	8012b8a <HAL_TIM_PWM_Start_DMA+0x142>
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	2b04      	cmp	r3, #4
 8012b14:	d109      	bne.n	8012b2a <HAL_TIM_PWM_Start_DMA+0xe2>
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8012b1c:	b2db      	uxtb	r3, r3
 8012b1e:	2b01      	cmp	r3, #1
 8012b20:	bf0c      	ite	eq
 8012b22:	2301      	moveq	r3, #1
 8012b24:	2300      	movne	r3, #0
 8012b26:	b2db      	uxtb	r3, r3
 8012b28:	e02f      	b.n	8012b8a <HAL_TIM_PWM_Start_DMA+0x142>
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	2b08      	cmp	r3, #8
 8012b2e:	d109      	bne.n	8012b44 <HAL_TIM_PWM_Start_DMA+0xfc>
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	bf0c      	ite	eq
 8012b3c:	2301      	moveq	r3, #1
 8012b3e:	2300      	movne	r3, #0
 8012b40:	b2db      	uxtb	r3, r3
 8012b42:	e022      	b.n	8012b8a <HAL_TIM_PWM_Start_DMA+0x142>
 8012b44:	68bb      	ldr	r3, [r7, #8]
 8012b46:	2b0c      	cmp	r3, #12
 8012b48:	d109      	bne.n	8012b5e <HAL_TIM_PWM_Start_DMA+0x116>
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8012b50:	b2db      	uxtb	r3, r3
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	bf0c      	ite	eq
 8012b56:	2301      	moveq	r3, #1
 8012b58:	2300      	movne	r3, #0
 8012b5a:	b2db      	uxtb	r3, r3
 8012b5c:	e015      	b.n	8012b8a <HAL_TIM_PWM_Start_DMA+0x142>
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	2b10      	cmp	r3, #16
 8012b62:	d109      	bne.n	8012b78 <HAL_TIM_PWM_Start_DMA+0x130>
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012b6a:	b2db      	uxtb	r3, r3
 8012b6c:	2b01      	cmp	r3, #1
 8012b6e:	bf0c      	ite	eq
 8012b70:	2301      	moveq	r3, #1
 8012b72:	2300      	movne	r3, #0
 8012b74:	b2db      	uxtb	r3, r3
 8012b76:	e008      	b.n	8012b8a <HAL_TIM_PWM_Start_DMA+0x142>
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	bf0c      	ite	eq
 8012b84:	2301      	moveq	r3, #1
 8012b86:	2300      	movne	r3, #0
 8012b88:	b2db      	uxtb	r3, r3
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d034      	beq.n	8012bf8 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) && (Length > 0U))
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d104      	bne.n	8012b9e <HAL_TIM_PWM_Start_DMA+0x156>
 8012b94:	887b      	ldrh	r3, [r7, #2]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d001      	beq.n	8012b9e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	e166      	b.n	8012e6c <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d104      	bne.n	8012bae <HAL_TIM_PWM_Start_DMA+0x166>
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	2202      	movs	r2, #2
 8012ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012bac:	e026      	b.n	8012bfc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	2b04      	cmp	r3, #4
 8012bb2:	d104      	bne.n	8012bbe <HAL_TIM_PWM_Start_DMA+0x176>
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	2202      	movs	r2, #2
 8012bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012bbc:	e01e      	b.n	8012bfc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	2b08      	cmp	r3, #8
 8012bc2:	d104      	bne.n	8012bce <HAL_TIM_PWM_Start_DMA+0x186>
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	2202      	movs	r2, #2
 8012bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012bcc:	e016      	b.n	8012bfc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	2b0c      	cmp	r3, #12
 8012bd2:	d104      	bne.n	8012bde <HAL_TIM_PWM_Start_DMA+0x196>
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	2202      	movs	r2, #2
 8012bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012bdc:	e00e      	b.n	8012bfc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	2b10      	cmp	r3, #16
 8012be2:	d104      	bne.n	8012bee <HAL_TIM_PWM_Start_DMA+0x1a6>
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2202      	movs	r2, #2
 8012be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012bec:	e006      	b.n	8012bfc <HAL_TIM_PWM_Start_DMA+0x1b4>
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	2202      	movs	r2, #2
 8012bf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012bf6:	e001      	b.n	8012bfc <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	e137      	b.n	8012e6c <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	2b0c      	cmp	r3, #12
 8012c00:	f200 80ae 	bhi.w	8012d60 <HAL_TIM_PWM_Start_DMA+0x318>
 8012c04:	a201      	add	r2, pc, #4	; (adr r2, 8012c0c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8012c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c0a:	bf00      	nop
 8012c0c:	08012c41 	.word	0x08012c41
 8012c10:	08012d61 	.word	0x08012d61
 8012c14:	08012d61 	.word	0x08012d61
 8012c18:	08012d61 	.word	0x08012d61
 8012c1c:	08012c89 	.word	0x08012c89
 8012c20:	08012d61 	.word	0x08012d61
 8012c24:	08012d61 	.word	0x08012d61
 8012c28:	08012d61 	.word	0x08012d61
 8012c2c:	08012cd1 	.word	0x08012cd1
 8012c30:	08012d61 	.word	0x08012d61
 8012c34:	08012d61 	.word	0x08012d61
 8012c38:	08012d61 	.word	0x08012d61
 8012c3c:	08012d19 	.word	0x08012d19
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c44:	4a8b      	ldr	r2, [pc, #556]	; (8012e74 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012c46:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c4c:	4a8a      	ldr	r2, [pc, #552]	; (8012e78 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012c4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c54:	4a89      	ldr	r2, [pc, #548]	; (8012e7c <HAL_TIM_PWM_Start_DMA+0x434>)
 8012c56:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012c5c:	6879      	ldr	r1, [r7, #4]
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	3334      	adds	r3, #52	; 0x34
 8012c64:	461a      	mov	r2, r3
 8012c66:	887b      	ldrh	r3, [r7, #2]
 8012c68:	f7f7 fc54 	bl	800a514 <HAL_DMA_Start_IT>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d001      	beq.n	8012c76 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012c72:	2301      	movs	r3, #1
 8012c74:	e0fa      	b.n	8012e6c <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	68da      	ldr	r2, [r3, #12]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8012c84:	60da      	str	r2, [r3, #12]
      break;
 8012c86:	e06e      	b.n	8012d66 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c8c:	4a79      	ldr	r2, [pc, #484]	; (8012e74 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012c8e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c94:	4a78      	ldr	r2, [pc, #480]	; (8012e78 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012c96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8012c98:	68fb      	ldr	r3, [r7, #12]
 8012c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c9c:	4a77      	ldr	r2, [pc, #476]	; (8012e7c <HAL_TIM_PWM_Start_DMA+0x434>)
 8012c9e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8012ca4:	6879      	ldr	r1, [r7, #4]
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	3338      	adds	r3, #56	; 0x38
 8012cac:	461a      	mov	r2, r3
 8012cae:	887b      	ldrh	r3, [r7, #2]
 8012cb0:	f7f7 fc30 	bl	800a514 <HAL_DMA_Start_IT>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d001      	beq.n	8012cbe <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012cba:	2301      	movs	r3, #1
 8012cbc:	e0d6      	b.n	8012e6c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	68da      	ldr	r2, [r3, #12]
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012ccc:	60da      	str	r2, [r3, #12]
      break;
 8012cce:	e04a      	b.n	8012d66 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cd4:	4a67      	ldr	r2, [pc, #412]	; (8012e74 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012cd6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cdc:	4a66      	ldr	r2, [pc, #408]	; (8012e78 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012cde:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ce4:	4a65      	ldr	r2, [pc, #404]	; (8012e7c <HAL_TIM_PWM_Start_DMA+0x434>)
 8012ce6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8012cec:	6879      	ldr	r1, [r7, #4]
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	333c      	adds	r3, #60	; 0x3c
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	887b      	ldrh	r3, [r7, #2]
 8012cf8:	f7f7 fc0c 	bl	800a514 <HAL_DMA_Start_IT>
 8012cfc:	4603      	mov	r3, r0
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d001      	beq.n	8012d06 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012d02:	2301      	movs	r3, #1
 8012d04:	e0b2      	b.n	8012e6c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	68da      	ldr	r2, [r3, #12]
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012d14:	60da      	str	r2, [r3, #12]
      break;
 8012d16:	e026      	b.n	8012d66 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d1c:	4a55      	ldr	r2, [pc, #340]	; (8012e74 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8012d1e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d24:	4a54      	ldr	r2, [pc, #336]	; (8012e78 <HAL_TIM_PWM_Start_DMA+0x430>)
 8012d26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d2c:	4a53      	ldr	r2, [pc, #332]	; (8012e7c <HAL_TIM_PWM_Start_DMA+0x434>)
 8012d2e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012d34:	6879      	ldr	r1, [r7, #4]
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	3340      	adds	r3, #64	; 0x40
 8012d3c:	461a      	mov	r2, r3
 8012d3e:	887b      	ldrh	r3, [r7, #2]
 8012d40:	f7f7 fbe8 	bl	800a514 <HAL_DMA_Start_IT>
 8012d44:	4603      	mov	r3, r0
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d001      	beq.n	8012d4e <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	e08e      	b.n	8012e6c <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	68da      	ldr	r2, [r3, #12]
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8012d5c:	60da      	str	r2, [r3, #12]
      break;
 8012d5e:	e002      	b.n	8012d66 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8012d60:	2301      	movs	r3, #1
 8012d62:	75fb      	strb	r3, [r7, #23]
      break;
 8012d64:	bf00      	nop
  }

  if (status == HAL_OK)
 8012d66:	7dfb      	ldrb	r3, [r7, #23]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d17e      	bne.n	8012e6a <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	2201      	movs	r2, #1
 8012d72:	68b9      	ldr	r1, [r7, #8]
 8012d74:	4618      	mov	r0, r3
 8012d76:	f001 fb11 	bl	801439c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	4a40      	ldr	r2, [pc, #256]	; (8012e80 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012d80:	4293      	cmp	r3, r2
 8012d82:	d013      	beq.n	8012dac <HAL_TIM_PWM_Start_DMA+0x364>
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4a3e      	ldr	r2, [pc, #248]	; (8012e84 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	d00e      	beq.n	8012dac <HAL_TIM_PWM_Start_DMA+0x364>
 8012d8e:	68fb      	ldr	r3, [r7, #12]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	4a3d      	ldr	r2, [pc, #244]	; (8012e88 <HAL_TIM_PWM_Start_DMA+0x440>)
 8012d94:	4293      	cmp	r3, r2
 8012d96:	d009      	beq.n	8012dac <HAL_TIM_PWM_Start_DMA+0x364>
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4a3b      	ldr	r2, [pc, #236]	; (8012e8c <HAL_TIM_PWM_Start_DMA+0x444>)
 8012d9e:	4293      	cmp	r3, r2
 8012da0:	d004      	beq.n	8012dac <HAL_TIM_PWM_Start_DMA+0x364>
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	4a3a      	ldr	r2, [pc, #232]	; (8012e90 <HAL_TIM_PWM_Start_DMA+0x448>)
 8012da8:	4293      	cmp	r3, r2
 8012daa:	d101      	bne.n	8012db0 <HAL_TIM_PWM_Start_DMA+0x368>
 8012dac:	2301      	movs	r3, #1
 8012dae:	e000      	b.n	8012db2 <HAL_TIM_PWM_Start_DMA+0x36a>
 8012db0:	2300      	movs	r3, #0
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d007      	beq.n	8012dc6 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8012dc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	4a2d      	ldr	r2, [pc, #180]	; (8012e80 <HAL_TIM_PWM_Start_DMA+0x438>)
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d02c      	beq.n	8012e2a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012dd8:	d027      	beq.n	8012e2a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4a2d      	ldr	r2, [pc, #180]	; (8012e94 <HAL_TIM_PWM_Start_DMA+0x44c>)
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d022      	beq.n	8012e2a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	4a2b      	ldr	r2, [pc, #172]	; (8012e98 <HAL_TIM_PWM_Start_DMA+0x450>)
 8012dea:	4293      	cmp	r3, r2
 8012dec:	d01d      	beq.n	8012e2a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	4a2a      	ldr	r2, [pc, #168]	; (8012e9c <HAL_TIM_PWM_Start_DMA+0x454>)
 8012df4:	4293      	cmp	r3, r2
 8012df6:	d018      	beq.n	8012e2a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012df8:	68fb      	ldr	r3, [r7, #12]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	4a21      	ldr	r2, [pc, #132]	; (8012e84 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	d013      	beq.n	8012e2a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	4a26      	ldr	r2, [pc, #152]	; (8012ea0 <HAL_TIM_PWM_Start_DMA+0x458>)
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d00e      	beq.n	8012e2a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4a1d      	ldr	r2, [pc, #116]	; (8012e88 <HAL_TIM_PWM_Start_DMA+0x440>)
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d009      	beq.n	8012e2a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4a22      	ldr	r2, [pc, #136]	; (8012ea4 <HAL_TIM_PWM_Start_DMA+0x45c>)
 8012e1c:	4293      	cmp	r3, r2
 8012e1e:	d004      	beq.n	8012e2a <HAL_TIM_PWM_Start_DMA+0x3e2>
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	4a20      	ldr	r2, [pc, #128]	; (8012ea8 <HAL_TIM_PWM_Start_DMA+0x460>)
 8012e26:	4293      	cmp	r3, r2
 8012e28:	d115      	bne.n	8012e56 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	689a      	ldr	r2, [r3, #8]
 8012e30:	4b1e      	ldr	r3, [pc, #120]	; (8012eac <HAL_TIM_PWM_Start_DMA+0x464>)
 8012e32:	4013      	ands	r3, r2
 8012e34:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e36:	693b      	ldr	r3, [r7, #16]
 8012e38:	2b06      	cmp	r3, #6
 8012e3a:	d015      	beq.n	8012e68 <HAL_TIM_PWM_Start_DMA+0x420>
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012e42:	d011      	beq.n	8012e68 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	681a      	ldr	r2, [r3, #0]
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	f042 0201 	orr.w	r2, r2, #1
 8012e52:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e54:	e008      	b.n	8012e68 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	681a      	ldr	r2, [r3, #0]
 8012e5c:	68fb      	ldr	r3, [r7, #12]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	f042 0201 	orr.w	r2, r2, #1
 8012e64:	601a      	str	r2, [r3, #0]
 8012e66:	e000      	b.n	8012e6a <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012e68:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8012e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3718      	adds	r7, #24
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}
 8012e74:	08013a57 	.word	0x08013a57
 8012e78:	08013aff 	.word	0x08013aff
 8012e7c:	080139c5 	.word	0x080139c5
 8012e80:	40010000 	.word	0x40010000
 8012e84:	40010400 	.word	0x40010400
 8012e88:	40014000 	.word	0x40014000
 8012e8c:	40014400 	.word	0x40014400
 8012e90:	40014800 	.word	0x40014800
 8012e94:	40000400 	.word	0x40000400
 8012e98:	40000800 	.word	0x40000800
 8012e9c:	40000c00 	.word	0x40000c00
 8012ea0:	40001800 	.word	0x40001800
 8012ea4:	4000e000 	.word	0x4000e000
 8012ea8:	4000e400 	.word	0x4000e400
 8012eac:	00010007 	.word	0x00010007

08012eb0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b084      	sub	sp, #16
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8012ebe:	683b      	ldr	r3, [r7, #0]
 8012ec0:	2b0c      	cmp	r3, #12
 8012ec2:	d855      	bhi.n	8012f70 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8012ec4:	a201      	add	r2, pc, #4	; (adr r2, 8012ecc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8012ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012eca:	bf00      	nop
 8012ecc:	08012f01 	.word	0x08012f01
 8012ed0:	08012f71 	.word	0x08012f71
 8012ed4:	08012f71 	.word	0x08012f71
 8012ed8:	08012f71 	.word	0x08012f71
 8012edc:	08012f1d 	.word	0x08012f1d
 8012ee0:	08012f71 	.word	0x08012f71
 8012ee4:	08012f71 	.word	0x08012f71
 8012ee8:	08012f71 	.word	0x08012f71
 8012eec:	08012f39 	.word	0x08012f39
 8012ef0:	08012f71 	.word	0x08012f71
 8012ef4:	08012f71 	.word	0x08012f71
 8012ef8:	08012f71 	.word	0x08012f71
 8012efc:	08012f55 	.word	0x08012f55
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	68da      	ldr	r2, [r3, #12]
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8012f0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7f8 f885 	bl	800b024 <HAL_DMA_Abort_IT>
      break;
 8012f1a:	e02c      	b.n	8012f76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	68da      	ldr	r2, [r3, #12]
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012f2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7f8 f877 	bl	800b024 <HAL_DMA_Abort_IT>
      break;
 8012f36:	e01e      	b.n	8012f76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	68da      	ldr	r2, [r3, #12]
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012f46:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f7f8 f869 	bl	800b024 <HAL_DMA_Abort_IT>
      break;
 8012f52:	e010      	b.n	8012f76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	68da      	ldr	r2, [r3, #12]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012f62:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f7f8 f85b 	bl	800b024 <HAL_DMA_Abort_IT>
      break;
 8012f6e:	e002      	b.n	8012f76 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8012f70:	2301      	movs	r3, #1
 8012f72:	73fb      	strb	r3, [r7, #15]
      break;
 8012f74:	bf00      	nop
  }

  if (status == HAL_OK)
 8012f76:	7bfb      	ldrb	r3, [r7, #15]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	f040 8081 	bne.w	8013080 <HAL_TIM_PWM_Stop_DMA+0x1d0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	2200      	movs	r2, #0
 8012f84:	6839      	ldr	r1, [r7, #0]
 8012f86:	4618      	mov	r0, r3
 8012f88:	f001 fa08 	bl	801439c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	4a3e      	ldr	r2, [pc, #248]	; (801308c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d013      	beq.n	8012fbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	4a3d      	ldr	r2, [pc, #244]	; (8013090 <HAL_TIM_PWM_Stop_DMA+0x1e0>)
 8012f9c:	4293      	cmp	r3, r2
 8012f9e:	d00e      	beq.n	8012fbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	4a3b      	ldr	r2, [pc, #236]	; (8013094 <HAL_TIM_PWM_Stop_DMA+0x1e4>)
 8012fa6:	4293      	cmp	r3, r2
 8012fa8:	d009      	beq.n	8012fbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	4a3a      	ldr	r2, [pc, #232]	; (8013098 <HAL_TIM_PWM_Stop_DMA+0x1e8>)
 8012fb0:	4293      	cmp	r3, r2
 8012fb2:	d004      	beq.n	8012fbe <HAL_TIM_PWM_Stop_DMA+0x10e>
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	4a38      	ldr	r2, [pc, #224]	; (801309c <HAL_TIM_PWM_Stop_DMA+0x1ec>)
 8012fba:	4293      	cmp	r3, r2
 8012fbc:	d101      	bne.n	8012fc2 <HAL_TIM_PWM_Stop_DMA+0x112>
 8012fbe:	2301      	movs	r3, #1
 8012fc0:	e000      	b.n	8012fc4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d017      	beq.n	8012ff8 <HAL_TIM_PWM_Stop_DMA+0x148>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	6a1a      	ldr	r2, [r3, #32]
 8012fce:	f241 1311 	movw	r3, #4369	; 0x1111
 8012fd2:	4013      	ands	r3, r2
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d10f      	bne.n	8012ff8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	6a1a      	ldr	r2, [r3, #32]
 8012fde:	f240 4344 	movw	r3, #1092	; 0x444
 8012fe2:	4013      	ands	r3, r2
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d107      	bne.n	8012ff8 <HAL_TIM_PWM_Stop_DMA+0x148>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8012ff6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	6a1a      	ldr	r2, [r3, #32]
 8012ffe:	f241 1311 	movw	r3, #4369	; 0x1111
 8013002:	4013      	ands	r3, r2
 8013004:	2b00      	cmp	r3, #0
 8013006:	d10f      	bne.n	8013028 <HAL_TIM_PWM_Stop_DMA+0x178>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	6a1a      	ldr	r2, [r3, #32]
 801300e:	f240 4344 	movw	r3, #1092	; 0x444
 8013012:	4013      	ands	r3, r2
 8013014:	2b00      	cmp	r3, #0
 8013016:	d107      	bne.n	8013028 <HAL_TIM_PWM_Stop_DMA+0x178>
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	681a      	ldr	r2, [r3, #0]
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	f022 0201 	bic.w	r2, r2, #1
 8013026:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8013028:	683b      	ldr	r3, [r7, #0]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d104      	bne.n	8013038 <HAL_TIM_PWM_Stop_DMA+0x188>
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2201      	movs	r2, #1
 8013032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013036:	e023      	b.n	8013080 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	2b04      	cmp	r3, #4
 801303c:	d104      	bne.n	8013048 <HAL_TIM_PWM_Stop_DMA+0x198>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2201      	movs	r2, #1
 8013042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013046:	e01b      	b.n	8013080 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	2b08      	cmp	r3, #8
 801304c:	d104      	bne.n	8013058 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	2201      	movs	r2, #1
 8013052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013056:	e013      	b.n	8013080 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	2b0c      	cmp	r3, #12
 801305c:	d104      	bne.n	8013068 <HAL_TIM_PWM_Stop_DMA+0x1b8>
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2201      	movs	r2, #1
 8013062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013066:	e00b      	b.n	8013080 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	2b10      	cmp	r3, #16
 801306c:	d104      	bne.n	8013078 <HAL_TIM_PWM_Stop_DMA+0x1c8>
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	2201      	movs	r2, #1
 8013072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013076:	e003      	b.n	8013080 <HAL_TIM_PWM_Stop_DMA+0x1d0>
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	2201      	movs	r2, #1
 801307c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8013080:	7bfb      	ldrb	r3, [r7, #15]
}
 8013082:	4618      	mov	r0, r3
 8013084:	3710      	adds	r7, #16
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
 801308a:	bf00      	nop
 801308c:	40010000 	.word	0x40010000
 8013090:	40010400 	.word	0x40010400
 8013094:	40014000 	.word	0x40014000
 8013098:	40014400 	.word	0x40014400
 801309c:	40014800 	.word	0x40014800

080130a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80130a0:	b580      	push	{r7, lr}
 80130a2:	b086      	sub	sp, #24
 80130a4:	af00      	add	r7, sp, #0
 80130a6:	6078      	str	r0, [r7, #4]
 80130a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d101      	bne.n	80130b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80130b0:	2301      	movs	r3, #1
 80130b2:	e08f      	b.n	80131d4 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80130ba:	b2db      	uxtb	r3, r3
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d106      	bne.n	80130ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2200      	movs	r2, #0
 80130c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f7f3 fc65 	bl	8006998 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2202      	movs	r2, #2
 80130d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	6899      	ldr	r1, [r3, #8]
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	681a      	ldr	r2, [r3, #0]
 80130e0:	4b3e      	ldr	r3, [pc, #248]	; (80131dc <HAL_TIM_Encoder_Init+0x13c>)
 80130e2:	400b      	ands	r3, r1
 80130e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	681a      	ldr	r2, [r3, #0]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	3304      	adds	r3, #4
 80130ee:	4619      	mov	r1, r3
 80130f0:	4610      	mov	r0, r2
 80130f2:	f000 fd39 	bl	8013b68 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	689b      	ldr	r3, [r3, #8]
 80130fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	681b      	ldr	r3, [r3, #0]
 8013102:	699b      	ldr	r3, [r3, #24]
 8013104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	6a1b      	ldr	r3, [r3, #32]
 801310c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	697a      	ldr	r2, [r7, #20]
 8013114:	4313      	orrs	r3, r2
 8013116:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8013118:	693a      	ldr	r2, [r7, #16]
 801311a:	4b31      	ldr	r3, [pc, #196]	; (80131e0 <HAL_TIM_Encoder_Init+0x140>)
 801311c:	4013      	ands	r3, r2
 801311e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8013120:	683b      	ldr	r3, [r7, #0]
 8013122:	689a      	ldr	r2, [r3, #8]
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	699b      	ldr	r3, [r3, #24]
 8013128:	021b      	lsls	r3, r3, #8
 801312a:	4313      	orrs	r3, r2
 801312c:	693a      	ldr	r2, [r7, #16]
 801312e:	4313      	orrs	r3, r2
 8013130:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8013132:	693a      	ldr	r2, [r7, #16]
 8013134:	4b2b      	ldr	r3, [pc, #172]	; (80131e4 <HAL_TIM_Encoder_Init+0x144>)
 8013136:	4013      	ands	r3, r2
 8013138:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801313a:	693a      	ldr	r2, [r7, #16]
 801313c:	4b2a      	ldr	r3, [pc, #168]	; (80131e8 <HAL_TIM_Encoder_Init+0x148>)
 801313e:	4013      	ands	r3, r2
 8013140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8013142:	683b      	ldr	r3, [r7, #0]
 8013144:	68da      	ldr	r2, [r3, #12]
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	69db      	ldr	r3, [r3, #28]
 801314a:	021b      	lsls	r3, r3, #8
 801314c:	4313      	orrs	r3, r2
 801314e:	693a      	ldr	r2, [r7, #16]
 8013150:	4313      	orrs	r3, r2
 8013152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	691b      	ldr	r3, [r3, #16]
 8013158:	011a      	lsls	r2, r3, #4
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	6a1b      	ldr	r3, [r3, #32]
 801315e:	031b      	lsls	r3, r3, #12
 8013160:	4313      	orrs	r3, r2
 8013162:	693a      	ldr	r2, [r7, #16]
 8013164:	4313      	orrs	r3, r2
 8013166:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 801316e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8013176:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	685a      	ldr	r2, [r3, #4]
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	695b      	ldr	r3, [r3, #20]
 8013180:	011b      	lsls	r3, r3, #4
 8013182:	4313      	orrs	r3, r2
 8013184:	68fa      	ldr	r2, [r7, #12]
 8013186:	4313      	orrs	r3, r2
 8013188:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	697a      	ldr	r2, [r7, #20]
 8013190:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	693a      	ldr	r2, [r7, #16]
 8013198:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	68fa      	ldr	r2, [r7, #12]
 80131a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2201      	movs	r2, #1
 80131a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	2201      	movs	r2, #1
 80131ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	2201      	movs	r2, #1
 80131b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	2201      	movs	r2, #1
 80131be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	2201      	movs	r2, #1
 80131c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	2201      	movs	r2, #1
 80131ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80131d2:	2300      	movs	r3, #0
}
 80131d4:	4618      	mov	r0, r3
 80131d6:	3718      	adds	r7, #24
 80131d8:	46bd      	mov	sp, r7
 80131da:	bd80      	pop	{r7, pc}
 80131dc:	fffebff8 	.word	0xfffebff8
 80131e0:	fffffcfc 	.word	0xfffffcfc
 80131e4:	fffff3f3 	.word	0xfffff3f3
 80131e8:	ffff0f0f 	.word	0xffff0f0f

080131ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80131fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013204:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801320c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013214:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d110      	bne.n	801323e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 801321c:	7bfb      	ldrb	r3, [r7, #15]
 801321e:	2b01      	cmp	r3, #1
 8013220:	d102      	bne.n	8013228 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8013222:	7b7b      	ldrb	r3, [r7, #13]
 8013224:	2b01      	cmp	r3, #1
 8013226:	d001      	beq.n	801322c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8013228:	2301      	movs	r3, #1
 801322a:	e069      	b.n	8013300 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2202      	movs	r2, #2
 8013230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2202      	movs	r2, #2
 8013238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801323c:	e031      	b.n	80132a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	2b04      	cmp	r3, #4
 8013242:	d110      	bne.n	8013266 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8013244:	7bbb      	ldrb	r3, [r7, #14]
 8013246:	2b01      	cmp	r3, #1
 8013248:	d102      	bne.n	8013250 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 801324a:	7b3b      	ldrb	r3, [r7, #12]
 801324c:	2b01      	cmp	r3, #1
 801324e:	d001      	beq.n	8013254 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8013250:	2301      	movs	r3, #1
 8013252:	e055      	b.n	8013300 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2202      	movs	r2, #2
 8013258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2202      	movs	r2, #2
 8013260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013264:	e01d      	b.n	80132a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8013266:	7bfb      	ldrb	r3, [r7, #15]
 8013268:	2b01      	cmp	r3, #1
 801326a:	d108      	bne.n	801327e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 801326c:	7bbb      	ldrb	r3, [r7, #14]
 801326e:	2b01      	cmp	r3, #1
 8013270:	d105      	bne.n	801327e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8013272:	7b7b      	ldrb	r3, [r7, #13]
 8013274:	2b01      	cmp	r3, #1
 8013276:	d102      	bne.n	801327e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8013278:	7b3b      	ldrb	r3, [r7, #12]
 801327a:	2b01      	cmp	r3, #1
 801327c:	d001      	beq.n	8013282 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 801327e:	2301      	movs	r3, #1
 8013280:	e03e      	b.n	8013300 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2202      	movs	r2, #2
 8013286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	2202      	movs	r2, #2
 801328e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	2202      	movs	r2, #2
 8013296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2202      	movs	r2, #2
 801329e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80132a2:	683b      	ldr	r3, [r7, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d003      	beq.n	80132b0 <HAL_TIM_Encoder_Start+0xc4>
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	2b04      	cmp	r3, #4
 80132ac:	d008      	beq.n	80132c0 <HAL_TIM_Encoder_Start+0xd4>
 80132ae:	e00f      	b.n	80132d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	2201      	movs	r2, #1
 80132b6:	2100      	movs	r1, #0
 80132b8:	4618      	mov	r0, r3
 80132ba:	f001 f86f 	bl	801439c <TIM_CCxChannelCmd>
      break;
 80132be:	e016      	b.n	80132ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	2201      	movs	r2, #1
 80132c6:	2104      	movs	r1, #4
 80132c8:	4618      	mov	r0, r3
 80132ca:	f001 f867 	bl	801439c <TIM_CCxChannelCmd>
      break;
 80132ce:	e00e      	b.n	80132ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	2201      	movs	r2, #1
 80132d6:	2100      	movs	r1, #0
 80132d8:	4618      	mov	r0, r3
 80132da:	f001 f85f 	bl	801439c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	2201      	movs	r2, #1
 80132e4:	2104      	movs	r1, #4
 80132e6:	4618      	mov	r0, r3
 80132e8:	f001 f858 	bl	801439c <TIM_CCxChannelCmd>
      break;
 80132ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	681a      	ldr	r2, [r3, #0]
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	f042 0201 	orr.w	r2, r2, #1
 80132fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80132fe:	2300      	movs	r3, #0
}
 8013300:	4618      	mov	r0, r3
 8013302:	3710      	adds	r7, #16
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	691b      	ldr	r3, [r3, #16]
 8013316:	f003 0302 	and.w	r3, r3, #2
 801331a:	2b02      	cmp	r3, #2
 801331c:	d122      	bne.n	8013364 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	68db      	ldr	r3, [r3, #12]
 8013324:	f003 0302 	and.w	r3, r3, #2
 8013328:	2b02      	cmp	r3, #2
 801332a:	d11b      	bne.n	8013364 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	f06f 0202 	mvn.w	r2, #2
 8013334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	2201      	movs	r2, #1
 801333a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	699b      	ldr	r3, [r3, #24]
 8013342:	f003 0303 	and.w	r3, r3, #3
 8013346:	2b00      	cmp	r3, #0
 8013348:	d003      	beq.n	8013352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f000 fb12 	bl	8013974 <HAL_TIM_IC_CaptureCallback>
 8013350:	e005      	b.n	801335e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8013352:	6878      	ldr	r0, [r7, #4]
 8013354:	f000 fb04 	bl	8013960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013358:	6878      	ldr	r0, [r7, #4]
 801335a:	f7f0 f9c1 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	2200      	movs	r2, #0
 8013362:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	691b      	ldr	r3, [r3, #16]
 801336a:	f003 0304 	and.w	r3, r3, #4
 801336e:	2b04      	cmp	r3, #4
 8013370:	d122      	bne.n	80133b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	68db      	ldr	r3, [r3, #12]
 8013378:	f003 0304 	and.w	r3, r3, #4
 801337c:	2b04      	cmp	r3, #4
 801337e:	d11b      	bne.n	80133b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	f06f 0204 	mvn.w	r2, #4
 8013388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	2202      	movs	r2, #2
 801338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	699b      	ldr	r3, [r3, #24]
 8013396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801339a:	2b00      	cmp	r3, #0
 801339c:	d003      	beq.n	80133a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801339e:	6878      	ldr	r0, [r7, #4]
 80133a0:	f000 fae8 	bl	8013974 <HAL_TIM_IC_CaptureCallback>
 80133a4:	e005      	b.n	80133b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f000 fada 	bl	8013960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f7f0 f997 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2200      	movs	r2, #0
 80133b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	691b      	ldr	r3, [r3, #16]
 80133be:	f003 0308 	and.w	r3, r3, #8
 80133c2:	2b08      	cmp	r3, #8
 80133c4:	d122      	bne.n	801340c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	68db      	ldr	r3, [r3, #12]
 80133cc:	f003 0308 	and.w	r3, r3, #8
 80133d0:	2b08      	cmp	r3, #8
 80133d2:	d11b      	bne.n	801340c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	681b      	ldr	r3, [r3, #0]
 80133d8:	f06f 0208 	mvn.w	r2, #8
 80133dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	2204      	movs	r2, #4
 80133e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	69db      	ldr	r3, [r3, #28]
 80133ea:	f003 0303 	and.w	r3, r3, #3
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d003      	beq.n	80133fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80133f2:	6878      	ldr	r0, [r7, #4]
 80133f4:	f000 fabe 	bl	8013974 <HAL_TIM_IC_CaptureCallback>
 80133f8:	e005      	b.n	8013406 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80133fa:	6878      	ldr	r0, [r7, #4]
 80133fc:	f000 fab0 	bl	8013960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013400:	6878      	ldr	r0, [r7, #4]
 8013402:	f7f0 f96d 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	2200      	movs	r2, #0
 801340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	691b      	ldr	r3, [r3, #16]
 8013412:	f003 0310 	and.w	r3, r3, #16
 8013416:	2b10      	cmp	r3, #16
 8013418:	d122      	bne.n	8013460 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	68db      	ldr	r3, [r3, #12]
 8013420:	f003 0310 	and.w	r3, r3, #16
 8013424:	2b10      	cmp	r3, #16
 8013426:	d11b      	bne.n	8013460 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	f06f 0210 	mvn.w	r2, #16
 8013430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	2208      	movs	r2, #8
 8013436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	69db      	ldr	r3, [r3, #28]
 801343e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013442:	2b00      	cmp	r3, #0
 8013444:	d003      	beq.n	801344e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8013446:	6878      	ldr	r0, [r7, #4]
 8013448:	f000 fa94 	bl	8013974 <HAL_TIM_IC_CaptureCallback>
 801344c:	e005      	b.n	801345a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f000 fa86 	bl	8013960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f7f0 f943 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	2200      	movs	r2, #0
 801345e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	691b      	ldr	r3, [r3, #16]
 8013466:	f003 0301 	and.w	r3, r3, #1
 801346a:	2b01      	cmp	r3, #1
 801346c:	d10e      	bne.n	801348c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	68db      	ldr	r3, [r3, #12]
 8013474:	f003 0301 	and.w	r3, r3, #1
 8013478:	2b01      	cmp	r3, #1
 801347a:	d107      	bne.n	801348c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	f06f 0201 	mvn.w	r2, #1
 8013484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f7f0 f976 	bl	8003778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	691b      	ldr	r3, [r3, #16]
 8013492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013496:	2b80      	cmp	r3, #128	; 0x80
 8013498:	d10e      	bne.n	80134b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	681b      	ldr	r3, [r3, #0]
 801349e:	68db      	ldr	r3, [r3, #12]
 80134a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134a4:	2b80      	cmp	r3, #128	; 0x80
 80134a6:	d107      	bne.n	80134b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80134b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	f001 f8de 	bl	8014674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	691b      	ldr	r3, [r3, #16]
 80134be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80134c6:	d10e      	bne.n	80134e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	68db      	ldr	r3, [r3, #12]
 80134ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134d2:	2b80      	cmp	r3, #128	; 0x80
 80134d4:	d107      	bne.n	80134e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80134de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80134e0:	6878      	ldr	r0, [r7, #4]
 80134e2:	f001 f8d1 	bl	8014688 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	691b      	ldr	r3, [r3, #16]
 80134ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134f0:	2b40      	cmp	r3, #64	; 0x40
 80134f2:	d10e      	bne.n	8013512 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	68db      	ldr	r3, [r3, #12]
 80134fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134fe:	2b40      	cmp	r3, #64	; 0x40
 8013500:	d107      	bne.n	8013512 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801350a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f000 fa45 	bl	801399c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	691b      	ldr	r3, [r3, #16]
 8013518:	f003 0320 	and.w	r3, r3, #32
 801351c:	2b20      	cmp	r3, #32
 801351e:	d10e      	bne.n	801353e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	68db      	ldr	r3, [r3, #12]
 8013526:	f003 0320 	and.w	r3, r3, #32
 801352a:	2b20      	cmp	r3, #32
 801352c:	d107      	bne.n	801353e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	f06f 0220 	mvn.w	r2, #32
 8013536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f001 f891 	bl	8014660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801353e:	bf00      	nop
 8013540:	3708      	adds	r7, #8
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}
	...

08013548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b086      	sub	sp, #24
 801354c:	af00      	add	r7, sp, #0
 801354e:	60f8      	str	r0, [r7, #12]
 8013550:	60b9      	str	r1, [r7, #8]
 8013552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013554:	2300      	movs	r3, #0
 8013556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801355e:	2b01      	cmp	r3, #1
 8013560:	d101      	bne.n	8013566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8013562:	2302      	movs	r3, #2
 8013564:	e0ff      	b.n	8013766 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	2201      	movs	r2, #1
 801356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	2b14      	cmp	r3, #20
 8013572:	f200 80f0 	bhi.w	8013756 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8013576:	a201      	add	r2, pc, #4	; (adr r2, 801357c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8013578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801357c:	080135d1 	.word	0x080135d1
 8013580:	08013757 	.word	0x08013757
 8013584:	08013757 	.word	0x08013757
 8013588:	08013757 	.word	0x08013757
 801358c:	08013611 	.word	0x08013611
 8013590:	08013757 	.word	0x08013757
 8013594:	08013757 	.word	0x08013757
 8013598:	08013757 	.word	0x08013757
 801359c:	08013653 	.word	0x08013653
 80135a0:	08013757 	.word	0x08013757
 80135a4:	08013757 	.word	0x08013757
 80135a8:	08013757 	.word	0x08013757
 80135ac:	08013693 	.word	0x08013693
 80135b0:	08013757 	.word	0x08013757
 80135b4:	08013757 	.word	0x08013757
 80135b8:	08013757 	.word	0x08013757
 80135bc:	080136d5 	.word	0x080136d5
 80135c0:	08013757 	.word	0x08013757
 80135c4:	08013757 	.word	0x08013757
 80135c8:	08013757 	.word	0x08013757
 80135cc:	08013715 	.word	0x08013715
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	68b9      	ldr	r1, [r7, #8]
 80135d6:	4618      	mov	r0, r3
 80135d8:	f000 fb6c 	bl	8013cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	699a      	ldr	r2, [r3, #24]
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	f042 0208 	orr.w	r2, r2, #8
 80135ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	699a      	ldr	r2, [r3, #24]
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	f022 0204 	bic.w	r2, r2, #4
 80135fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	6999      	ldr	r1, [r3, #24]
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	691a      	ldr	r2, [r3, #16]
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	430a      	orrs	r2, r1
 801360c:	619a      	str	r2, [r3, #24]
      break;
 801360e:	e0a5      	b.n	801375c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	68b9      	ldr	r1, [r7, #8]
 8013616:	4618      	mov	r0, r3
 8013618:	f000 fbdc 	bl	8013dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	699a      	ldr	r2, [r3, #24]
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801362a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	699a      	ldr	r2, [r3, #24]
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801363a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	6999      	ldr	r1, [r3, #24]
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	691b      	ldr	r3, [r3, #16]
 8013646:	021a      	lsls	r2, r3, #8
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	430a      	orrs	r2, r1
 801364e:	619a      	str	r2, [r3, #24]
      break;
 8013650:	e084      	b.n	801375c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	68b9      	ldr	r1, [r7, #8]
 8013658:	4618      	mov	r0, r3
 801365a:	f000 fc45 	bl	8013ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	69da      	ldr	r2, [r3, #28]
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	f042 0208 	orr.w	r2, r2, #8
 801366c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	69da      	ldr	r2, [r3, #28]
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	f022 0204 	bic.w	r2, r2, #4
 801367c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	69d9      	ldr	r1, [r3, #28]
 8013684:	68bb      	ldr	r3, [r7, #8]
 8013686:	691a      	ldr	r2, [r3, #16]
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	430a      	orrs	r2, r1
 801368e:	61da      	str	r2, [r3, #28]
      break;
 8013690:	e064      	b.n	801375c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	68b9      	ldr	r1, [r7, #8]
 8013698:	4618      	mov	r0, r3
 801369a:	f000 fcad 	bl	8013ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	69da      	ldr	r2, [r3, #28]
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80136ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	69da      	ldr	r2, [r3, #28]
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80136bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	69d9      	ldr	r1, [r3, #28]
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	691b      	ldr	r3, [r3, #16]
 80136c8:	021a      	lsls	r2, r3, #8
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	430a      	orrs	r2, r1
 80136d0:	61da      	str	r2, [r3, #28]
      break;
 80136d2:	e043      	b.n	801375c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	68b9      	ldr	r1, [r7, #8]
 80136da:	4618      	mov	r0, r3
 80136dc:	f000 fcf6 	bl	80140cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	f042 0208 	orr.w	r2, r2, #8
 80136ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	f022 0204 	bic.w	r2, r2, #4
 80136fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	681b      	ldr	r3, [r3, #0]
 8013704:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	691a      	ldr	r2, [r3, #16]
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	430a      	orrs	r2, r1
 8013710:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013712:	e023      	b.n	801375c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	68b9      	ldr	r1, [r7, #8]
 801371a:	4618      	mov	r0, r3
 801371c:	f000 fd3a 	bl	8014194 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801372e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801373e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	691b      	ldr	r3, [r3, #16]
 801374a:	021a      	lsls	r2, r3, #8
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	430a      	orrs	r2, r1
 8013752:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8013754:	e002      	b.n	801375c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8013756:	2301      	movs	r3, #1
 8013758:	75fb      	strb	r3, [r7, #23]
      break;
 801375a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	2200      	movs	r2, #0
 8013760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013764:	7dfb      	ldrb	r3, [r7, #23]
}
 8013766:	4618      	mov	r0, r3
 8013768:	3718      	adds	r7, #24
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}
 801376e:	bf00      	nop

08013770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8013770:	b580      	push	{r7, lr}
 8013772:	b084      	sub	sp, #16
 8013774:	af00      	add	r7, sp, #0
 8013776:	6078      	str	r0, [r7, #4]
 8013778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801377a:	2300      	movs	r3, #0
 801377c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013784:	2b01      	cmp	r3, #1
 8013786:	d101      	bne.n	801378c <HAL_TIM_ConfigClockSource+0x1c>
 8013788:	2302      	movs	r3, #2
 801378a:	e0dc      	b.n	8013946 <HAL_TIM_ConfigClockSource+0x1d6>
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2201      	movs	r2, #1
 8013790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	2202      	movs	r2, #2
 8013798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	689b      	ldr	r3, [r3, #8]
 80137a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80137a4:	68ba      	ldr	r2, [r7, #8]
 80137a6:	4b6a      	ldr	r3, [pc, #424]	; (8013950 <HAL_TIM_ConfigClockSource+0x1e0>)
 80137a8:	4013      	ands	r3, r2
 80137aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80137b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	68ba      	ldr	r2, [r7, #8]
 80137ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80137bc:	683b      	ldr	r3, [r7, #0]
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4a64      	ldr	r2, [pc, #400]	; (8013954 <HAL_TIM_ConfigClockSource+0x1e4>)
 80137c2:	4293      	cmp	r3, r2
 80137c4:	f000 80a9 	beq.w	801391a <HAL_TIM_ConfigClockSource+0x1aa>
 80137c8:	4a62      	ldr	r2, [pc, #392]	; (8013954 <HAL_TIM_ConfigClockSource+0x1e4>)
 80137ca:	4293      	cmp	r3, r2
 80137cc:	f200 80ae 	bhi.w	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 80137d0:	4a61      	ldr	r2, [pc, #388]	; (8013958 <HAL_TIM_ConfigClockSource+0x1e8>)
 80137d2:	4293      	cmp	r3, r2
 80137d4:	f000 80a1 	beq.w	801391a <HAL_TIM_ConfigClockSource+0x1aa>
 80137d8:	4a5f      	ldr	r2, [pc, #380]	; (8013958 <HAL_TIM_ConfigClockSource+0x1e8>)
 80137da:	4293      	cmp	r3, r2
 80137dc:	f200 80a6 	bhi.w	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 80137e0:	4a5e      	ldr	r2, [pc, #376]	; (801395c <HAL_TIM_ConfigClockSource+0x1ec>)
 80137e2:	4293      	cmp	r3, r2
 80137e4:	f000 8099 	beq.w	801391a <HAL_TIM_ConfigClockSource+0x1aa>
 80137e8:	4a5c      	ldr	r2, [pc, #368]	; (801395c <HAL_TIM_ConfigClockSource+0x1ec>)
 80137ea:	4293      	cmp	r3, r2
 80137ec:	f200 809e 	bhi.w	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 80137f0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80137f4:	f000 8091 	beq.w	801391a <HAL_TIM_ConfigClockSource+0x1aa>
 80137f8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80137fc:	f200 8096 	bhi.w	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 8013800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013804:	f000 8089 	beq.w	801391a <HAL_TIM_ConfigClockSource+0x1aa>
 8013808:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801380c:	f200 808e 	bhi.w	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 8013810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013814:	d03e      	beq.n	8013894 <HAL_TIM_ConfigClockSource+0x124>
 8013816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801381a:	f200 8087 	bhi.w	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 801381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013822:	f000 8086 	beq.w	8013932 <HAL_TIM_ConfigClockSource+0x1c2>
 8013826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801382a:	d87f      	bhi.n	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 801382c:	2b70      	cmp	r3, #112	; 0x70
 801382e:	d01a      	beq.n	8013866 <HAL_TIM_ConfigClockSource+0xf6>
 8013830:	2b70      	cmp	r3, #112	; 0x70
 8013832:	d87b      	bhi.n	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 8013834:	2b60      	cmp	r3, #96	; 0x60
 8013836:	d050      	beq.n	80138da <HAL_TIM_ConfigClockSource+0x16a>
 8013838:	2b60      	cmp	r3, #96	; 0x60
 801383a:	d877      	bhi.n	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 801383c:	2b50      	cmp	r3, #80	; 0x50
 801383e:	d03c      	beq.n	80138ba <HAL_TIM_ConfigClockSource+0x14a>
 8013840:	2b50      	cmp	r3, #80	; 0x50
 8013842:	d873      	bhi.n	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 8013844:	2b40      	cmp	r3, #64	; 0x40
 8013846:	d058      	beq.n	80138fa <HAL_TIM_ConfigClockSource+0x18a>
 8013848:	2b40      	cmp	r3, #64	; 0x40
 801384a:	d86f      	bhi.n	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 801384c:	2b30      	cmp	r3, #48	; 0x30
 801384e:	d064      	beq.n	801391a <HAL_TIM_ConfigClockSource+0x1aa>
 8013850:	2b30      	cmp	r3, #48	; 0x30
 8013852:	d86b      	bhi.n	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 8013854:	2b20      	cmp	r3, #32
 8013856:	d060      	beq.n	801391a <HAL_TIM_ConfigClockSource+0x1aa>
 8013858:	2b20      	cmp	r3, #32
 801385a:	d867      	bhi.n	801392c <HAL_TIM_ConfigClockSource+0x1bc>
 801385c:	2b00      	cmp	r3, #0
 801385e:	d05c      	beq.n	801391a <HAL_TIM_ConfigClockSource+0x1aa>
 8013860:	2b10      	cmp	r3, #16
 8013862:	d05a      	beq.n	801391a <HAL_TIM_ConfigClockSource+0x1aa>
 8013864:	e062      	b.n	801392c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6818      	ldr	r0, [r3, #0]
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	6899      	ldr	r1, [r3, #8]
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	685a      	ldr	r2, [r3, #4]
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	68db      	ldr	r3, [r3, #12]
 8013876:	f000 fd71 	bl	801435c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	689b      	ldr	r3, [r3, #8]
 8013880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8013882:	68bb      	ldr	r3, [r7, #8]
 8013884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	681b      	ldr	r3, [r3, #0]
 801388e:	68ba      	ldr	r2, [r7, #8]
 8013890:	609a      	str	r2, [r3, #8]
      break;
 8013892:	e04f      	b.n	8013934 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	6818      	ldr	r0, [r3, #0]
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	6899      	ldr	r1, [r3, #8]
 801389c:	683b      	ldr	r3, [r7, #0]
 801389e:	685a      	ldr	r2, [r3, #4]
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	68db      	ldr	r3, [r3, #12]
 80138a4:	f000 fd5a 	bl	801435c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	689a      	ldr	r2, [r3, #8]
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80138b6:	609a      	str	r2, [r3, #8]
      break;
 80138b8:	e03c      	b.n	8013934 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6818      	ldr	r0, [r3, #0]
 80138be:	683b      	ldr	r3, [r7, #0]
 80138c0:	6859      	ldr	r1, [r3, #4]
 80138c2:	683b      	ldr	r3, [r7, #0]
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	461a      	mov	r2, r3
 80138c8:	f000 fcca 	bl	8014260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	2150      	movs	r1, #80	; 0x50
 80138d2:	4618      	mov	r0, r3
 80138d4:	f000 fd24 	bl	8014320 <TIM_ITRx_SetConfig>
      break;
 80138d8:	e02c      	b.n	8013934 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	6818      	ldr	r0, [r3, #0]
 80138de:	683b      	ldr	r3, [r7, #0]
 80138e0:	6859      	ldr	r1, [r3, #4]
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	68db      	ldr	r3, [r3, #12]
 80138e6:	461a      	mov	r2, r3
 80138e8:	f000 fce9 	bl	80142be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	2160      	movs	r1, #96	; 0x60
 80138f2:	4618      	mov	r0, r3
 80138f4:	f000 fd14 	bl	8014320 <TIM_ITRx_SetConfig>
      break;
 80138f8:	e01c      	b.n	8013934 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	6818      	ldr	r0, [r3, #0]
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	6859      	ldr	r1, [r3, #4]
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	68db      	ldr	r3, [r3, #12]
 8013906:	461a      	mov	r2, r3
 8013908:	f000 fcaa 	bl	8014260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	2140      	movs	r1, #64	; 0x40
 8013912:	4618      	mov	r0, r3
 8013914:	f000 fd04 	bl	8014320 <TIM_ITRx_SetConfig>
      break;
 8013918:	e00c      	b.n	8013934 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681a      	ldr	r2, [r3, #0]
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	4619      	mov	r1, r3
 8013924:	4610      	mov	r0, r2
 8013926:	f000 fcfb 	bl	8014320 <TIM_ITRx_SetConfig>
      break;
 801392a:	e003      	b.n	8013934 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801392c:	2301      	movs	r3, #1
 801392e:	73fb      	strb	r3, [r7, #15]
      break;
 8013930:	e000      	b.n	8013934 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8013932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	2201      	movs	r2, #1
 8013938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2200      	movs	r2, #0
 8013940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8013944:	7bfb      	ldrb	r3, [r7, #15]
}
 8013946:	4618      	mov	r0, r3
 8013948:	3710      	adds	r7, #16
 801394a:	46bd      	mov	sp, r7
 801394c:	bd80      	pop	{r7, pc}
 801394e:	bf00      	nop
 8013950:	ffceff88 	.word	0xffceff88
 8013954:	00100040 	.word	0x00100040
 8013958:	00100030 	.word	0x00100030
 801395c:	00100020 	.word	0x00100020

08013960 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013960:	b480      	push	{r7}
 8013962:	b083      	sub	sp, #12
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8013968:	bf00      	nop
 801396a:	370c      	adds	r7, #12
 801396c:	46bd      	mov	sp, r7
 801396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013972:	4770      	bx	lr

08013974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8013974:	b480      	push	{r7}
 8013976:	b083      	sub	sp, #12
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801397c:	bf00      	nop
 801397e:	370c      	adds	r7, #12
 8013980:	46bd      	mov	sp, r7
 8013982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013986:	4770      	bx	lr

08013988 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8013988:	b480      	push	{r7}
 801398a:	b083      	sub	sp, #12
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8013990:	bf00      	nop
 8013992:	370c      	adds	r7, #12
 8013994:	46bd      	mov	sp, r7
 8013996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399a:	4770      	bx	lr

0801399c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801399c:	b480      	push	{r7}
 801399e:	b083      	sub	sp, #12
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80139a4:	bf00      	nop
 80139a6:	370c      	adds	r7, #12
 80139a8:	46bd      	mov	sp, r7
 80139aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ae:	4770      	bx	lr

080139b0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80139b0:	b480      	push	{r7}
 80139b2:	b083      	sub	sp, #12
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80139b8:	bf00      	nop
 80139ba:	370c      	adds	r7, #12
 80139bc:	46bd      	mov	sp, r7
 80139be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c2:	4770      	bx	lr

080139c4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b084      	sub	sp, #16
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139d0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139d6:	687a      	ldr	r2, [r7, #4]
 80139d8:	429a      	cmp	r2, r3
 80139da:	d107      	bne.n	80139ec <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	2201      	movs	r2, #1
 80139e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	2201      	movs	r2, #1
 80139e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80139ea:	e02a      	b.n	8013a42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139f0:	687a      	ldr	r2, [r7, #4]
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d107      	bne.n	8013a06 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	2202      	movs	r2, #2
 80139fa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	2201      	movs	r2, #1
 8013a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013a04:	e01d      	b.n	8013a42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d107      	bne.n	8013a20 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	2204      	movs	r2, #4
 8013a14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8013a16:	68fb      	ldr	r3, [r7, #12]
 8013a18:	2201      	movs	r2, #1
 8013a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013a1e:	e010      	b.n	8013a42 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a24:	687a      	ldr	r2, [r7, #4]
 8013a26:	429a      	cmp	r2, r3
 8013a28:	d107      	bne.n	8013a3a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	2208      	movs	r2, #8
 8013a2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2201      	movs	r2, #1
 8013a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013a38:	e003      	b.n	8013a42 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2201      	movs	r2, #1
 8013a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8013a42:	68f8      	ldr	r0, [r7, #12]
 8013a44:	f7ff ffb4 	bl	80139b0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	771a      	strb	r2, [r3, #28]
}
 8013a4e:	bf00      	nop
 8013a50:	3710      	adds	r7, #16
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}

08013a56 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8013a56:	b580      	push	{r7, lr}
 8013a58:	b084      	sub	sp, #16
 8013a5a:	af00      	add	r7, sp, #0
 8013a5c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a62:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a68:	687a      	ldr	r2, [r7, #4]
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d10b      	bne.n	8013a86 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	2201      	movs	r2, #1
 8013a72:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	69db      	ldr	r3, [r3, #28]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d136      	bne.n	8013aea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	2201      	movs	r2, #1
 8013a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013a84:	e031      	b.n	8013aea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a8a:	687a      	ldr	r2, [r7, #4]
 8013a8c:	429a      	cmp	r2, r3
 8013a8e:	d10b      	bne.n	8013aa8 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	2202      	movs	r2, #2
 8013a94:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	69db      	ldr	r3, [r3, #28]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d125      	bne.n	8013aea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	2201      	movs	r2, #1
 8013aa2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013aa6:	e020      	b.n	8013aea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013aac:	687a      	ldr	r2, [r7, #4]
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d10b      	bne.n	8013aca <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	2204      	movs	r2, #4
 8013ab6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013ab8:	687b      	ldr	r3, [r7, #4]
 8013aba:	69db      	ldr	r3, [r3, #28]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d114      	bne.n	8013aea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	2201      	movs	r2, #1
 8013ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013ac8:	e00f      	b.n	8013aea <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ace:	687a      	ldr	r2, [r7, #4]
 8013ad0:	429a      	cmp	r2, r3
 8013ad2:	d10a      	bne.n	8013aea <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	2208      	movs	r2, #8
 8013ad8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	69db      	ldr	r3, [r3, #28]
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d103      	bne.n	8013aea <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	2201      	movs	r2, #1
 8013ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8013aea:	68f8      	ldr	r0, [r7, #12]
 8013aec:	f7ef fdf8 	bl	80036e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	2200      	movs	r2, #0
 8013af4:	771a      	strb	r2, [r3, #28]
}
 8013af6:	bf00      	nop
 8013af8:	3710      	adds	r7, #16
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}

08013afe <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013afe:	b580      	push	{r7, lr}
 8013b00:	b084      	sub	sp, #16
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b0a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8013b0c:	68fb      	ldr	r3, [r7, #12]
 8013b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b10:	687a      	ldr	r2, [r7, #4]
 8013b12:	429a      	cmp	r2, r3
 8013b14:	d103      	bne.n	8013b1e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	2201      	movs	r2, #1
 8013b1a:	771a      	strb	r2, [r3, #28]
 8013b1c:	e019      	b.n	8013b52 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b22:	687a      	ldr	r2, [r7, #4]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d103      	bne.n	8013b30 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	2202      	movs	r2, #2
 8013b2c:	771a      	strb	r2, [r3, #28]
 8013b2e:	e010      	b.n	8013b52 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b34:	687a      	ldr	r2, [r7, #4]
 8013b36:	429a      	cmp	r2, r3
 8013b38:	d103      	bne.n	8013b42 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	2204      	movs	r2, #4
 8013b3e:	771a      	strb	r2, [r3, #28]
 8013b40:	e007      	b.n	8013b52 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d102      	bne.n	8013b52 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	2208      	movs	r2, #8
 8013b50:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8013b52:	68f8      	ldr	r0, [r7, #12]
 8013b54:	f7ff ff18 	bl	8013988 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	771a      	strb	r2, [r3, #28]
}
 8013b5e:	bf00      	nop
 8013b60:	3710      	adds	r7, #16
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}
	...

08013b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b085      	sub	sp, #20
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	4a44      	ldr	r2, [pc, #272]	; (8013c8c <TIM_Base_SetConfig+0x124>)
 8013b7c:	4293      	cmp	r3, r2
 8013b7e:	d013      	beq.n	8013ba8 <TIM_Base_SetConfig+0x40>
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b86:	d00f      	beq.n	8013ba8 <TIM_Base_SetConfig+0x40>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	4a41      	ldr	r2, [pc, #260]	; (8013c90 <TIM_Base_SetConfig+0x128>)
 8013b8c:	4293      	cmp	r3, r2
 8013b8e:	d00b      	beq.n	8013ba8 <TIM_Base_SetConfig+0x40>
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	4a40      	ldr	r2, [pc, #256]	; (8013c94 <TIM_Base_SetConfig+0x12c>)
 8013b94:	4293      	cmp	r3, r2
 8013b96:	d007      	beq.n	8013ba8 <TIM_Base_SetConfig+0x40>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	4a3f      	ldr	r2, [pc, #252]	; (8013c98 <TIM_Base_SetConfig+0x130>)
 8013b9c:	4293      	cmp	r3, r2
 8013b9e:	d003      	beq.n	8013ba8 <TIM_Base_SetConfig+0x40>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	4a3e      	ldr	r2, [pc, #248]	; (8013c9c <TIM_Base_SetConfig+0x134>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d108      	bne.n	8013bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	685b      	ldr	r3, [r3, #4]
 8013bb4:	68fa      	ldr	r2, [r7, #12]
 8013bb6:	4313      	orrs	r3, r2
 8013bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	4a33      	ldr	r2, [pc, #204]	; (8013c8c <TIM_Base_SetConfig+0x124>)
 8013bbe:	4293      	cmp	r3, r2
 8013bc0:	d027      	beq.n	8013c12 <TIM_Base_SetConfig+0xaa>
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013bc8:	d023      	beq.n	8013c12 <TIM_Base_SetConfig+0xaa>
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	4a30      	ldr	r2, [pc, #192]	; (8013c90 <TIM_Base_SetConfig+0x128>)
 8013bce:	4293      	cmp	r3, r2
 8013bd0:	d01f      	beq.n	8013c12 <TIM_Base_SetConfig+0xaa>
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	4a2f      	ldr	r2, [pc, #188]	; (8013c94 <TIM_Base_SetConfig+0x12c>)
 8013bd6:	4293      	cmp	r3, r2
 8013bd8:	d01b      	beq.n	8013c12 <TIM_Base_SetConfig+0xaa>
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	4a2e      	ldr	r2, [pc, #184]	; (8013c98 <TIM_Base_SetConfig+0x130>)
 8013bde:	4293      	cmp	r3, r2
 8013be0:	d017      	beq.n	8013c12 <TIM_Base_SetConfig+0xaa>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	4a2d      	ldr	r2, [pc, #180]	; (8013c9c <TIM_Base_SetConfig+0x134>)
 8013be6:	4293      	cmp	r3, r2
 8013be8:	d013      	beq.n	8013c12 <TIM_Base_SetConfig+0xaa>
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	4a2c      	ldr	r2, [pc, #176]	; (8013ca0 <TIM_Base_SetConfig+0x138>)
 8013bee:	4293      	cmp	r3, r2
 8013bf0:	d00f      	beq.n	8013c12 <TIM_Base_SetConfig+0xaa>
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	4a2b      	ldr	r2, [pc, #172]	; (8013ca4 <TIM_Base_SetConfig+0x13c>)
 8013bf6:	4293      	cmp	r3, r2
 8013bf8:	d00b      	beq.n	8013c12 <TIM_Base_SetConfig+0xaa>
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	4a2a      	ldr	r2, [pc, #168]	; (8013ca8 <TIM_Base_SetConfig+0x140>)
 8013bfe:	4293      	cmp	r3, r2
 8013c00:	d007      	beq.n	8013c12 <TIM_Base_SetConfig+0xaa>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	4a29      	ldr	r2, [pc, #164]	; (8013cac <TIM_Base_SetConfig+0x144>)
 8013c06:	4293      	cmp	r3, r2
 8013c08:	d003      	beq.n	8013c12 <TIM_Base_SetConfig+0xaa>
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	4a28      	ldr	r2, [pc, #160]	; (8013cb0 <TIM_Base_SetConfig+0x148>)
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	d108      	bne.n	8013c24 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	68db      	ldr	r3, [r3, #12]
 8013c1e:	68fa      	ldr	r2, [r7, #12]
 8013c20:	4313      	orrs	r3, r2
 8013c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8013c2a:	683b      	ldr	r3, [r7, #0]
 8013c2c:	695b      	ldr	r3, [r3, #20]
 8013c2e:	4313      	orrs	r3, r2
 8013c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	68fa      	ldr	r2, [r7, #12]
 8013c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	689a      	ldr	r2, [r3, #8]
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013c40:	683b      	ldr	r3, [r7, #0]
 8013c42:	681a      	ldr	r2, [r3, #0]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	4a10      	ldr	r2, [pc, #64]	; (8013c8c <TIM_Base_SetConfig+0x124>)
 8013c4c:	4293      	cmp	r3, r2
 8013c4e:	d00f      	beq.n	8013c70 <TIM_Base_SetConfig+0x108>
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	4a12      	ldr	r2, [pc, #72]	; (8013c9c <TIM_Base_SetConfig+0x134>)
 8013c54:	4293      	cmp	r3, r2
 8013c56:	d00b      	beq.n	8013c70 <TIM_Base_SetConfig+0x108>
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	4a11      	ldr	r2, [pc, #68]	; (8013ca0 <TIM_Base_SetConfig+0x138>)
 8013c5c:	4293      	cmp	r3, r2
 8013c5e:	d007      	beq.n	8013c70 <TIM_Base_SetConfig+0x108>
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	4a10      	ldr	r2, [pc, #64]	; (8013ca4 <TIM_Base_SetConfig+0x13c>)
 8013c64:	4293      	cmp	r3, r2
 8013c66:	d003      	beq.n	8013c70 <TIM_Base_SetConfig+0x108>
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	4a0f      	ldr	r2, [pc, #60]	; (8013ca8 <TIM_Base_SetConfig+0x140>)
 8013c6c:	4293      	cmp	r3, r2
 8013c6e:	d103      	bne.n	8013c78 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	691a      	ldr	r2, [r3, #16]
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	615a      	str	r2, [r3, #20]
}
 8013c7e:	bf00      	nop
 8013c80:	3714      	adds	r7, #20
 8013c82:	46bd      	mov	sp, r7
 8013c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c88:	4770      	bx	lr
 8013c8a:	bf00      	nop
 8013c8c:	40010000 	.word	0x40010000
 8013c90:	40000400 	.word	0x40000400
 8013c94:	40000800 	.word	0x40000800
 8013c98:	40000c00 	.word	0x40000c00
 8013c9c:	40010400 	.word	0x40010400
 8013ca0:	40014000 	.word	0x40014000
 8013ca4:	40014400 	.word	0x40014400
 8013ca8:	40014800 	.word	0x40014800
 8013cac:	4000e000 	.word	0x4000e000
 8013cb0:	4000e400 	.word	0x4000e400

08013cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013cb4:	b480      	push	{r7}
 8013cb6:	b087      	sub	sp, #28
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
 8013cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	6a1b      	ldr	r3, [r3, #32]
 8013cc2:	f023 0201 	bic.w	r2, r3, #1
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	6a1b      	ldr	r3, [r3, #32]
 8013cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	685b      	ldr	r3, [r3, #4]
 8013cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	699b      	ldr	r3, [r3, #24]
 8013cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013cdc:	68fa      	ldr	r2, [r7, #12]
 8013cde:	4b37      	ldr	r3, [pc, #220]	; (8013dbc <TIM_OC1_SetConfig+0x108>)
 8013ce0:	4013      	ands	r3, r2
 8013ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	f023 0303 	bic.w	r3, r3, #3
 8013cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	68fa      	ldr	r2, [r7, #12]
 8013cf2:	4313      	orrs	r3, r2
 8013cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	f023 0302 	bic.w	r3, r3, #2
 8013cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013cfe:	683b      	ldr	r3, [r7, #0]
 8013d00:	689b      	ldr	r3, [r3, #8]
 8013d02:	697a      	ldr	r2, [r7, #20]
 8013d04:	4313      	orrs	r3, r2
 8013d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	4a2d      	ldr	r2, [pc, #180]	; (8013dc0 <TIM_OC1_SetConfig+0x10c>)
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	d00f      	beq.n	8013d30 <TIM_OC1_SetConfig+0x7c>
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	4a2c      	ldr	r2, [pc, #176]	; (8013dc4 <TIM_OC1_SetConfig+0x110>)
 8013d14:	4293      	cmp	r3, r2
 8013d16:	d00b      	beq.n	8013d30 <TIM_OC1_SetConfig+0x7c>
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	4a2b      	ldr	r2, [pc, #172]	; (8013dc8 <TIM_OC1_SetConfig+0x114>)
 8013d1c:	4293      	cmp	r3, r2
 8013d1e:	d007      	beq.n	8013d30 <TIM_OC1_SetConfig+0x7c>
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	4a2a      	ldr	r2, [pc, #168]	; (8013dcc <TIM_OC1_SetConfig+0x118>)
 8013d24:	4293      	cmp	r3, r2
 8013d26:	d003      	beq.n	8013d30 <TIM_OC1_SetConfig+0x7c>
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	4a29      	ldr	r2, [pc, #164]	; (8013dd0 <TIM_OC1_SetConfig+0x11c>)
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	d10c      	bne.n	8013d4a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	f023 0308 	bic.w	r3, r3, #8
 8013d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8013d38:	683b      	ldr	r3, [r7, #0]
 8013d3a:	68db      	ldr	r3, [r3, #12]
 8013d3c:	697a      	ldr	r2, [r7, #20]
 8013d3e:	4313      	orrs	r3, r2
 8013d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	f023 0304 	bic.w	r3, r3, #4
 8013d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	4a1c      	ldr	r2, [pc, #112]	; (8013dc0 <TIM_OC1_SetConfig+0x10c>)
 8013d4e:	4293      	cmp	r3, r2
 8013d50:	d00f      	beq.n	8013d72 <TIM_OC1_SetConfig+0xbe>
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	4a1b      	ldr	r2, [pc, #108]	; (8013dc4 <TIM_OC1_SetConfig+0x110>)
 8013d56:	4293      	cmp	r3, r2
 8013d58:	d00b      	beq.n	8013d72 <TIM_OC1_SetConfig+0xbe>
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	4a1a      	ldr	r2, [pc, #104]	; (8013dc8 <TIM_OC1_SetConfig+0x114>)
 8013d5e:	4293      	cmp	r3, r2
 8013d60:	d007      	beq.n	8013d72 <TIM_OC1_SetConfig+0xbe>
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	4a19      	ldr	r2, [pc, #100]	; (8013dcc <TIM_OC1_SetConfig+0x118>)
 8013d66:	4293      	cmp	r3, r2
 8013d68:	d003      	beq.n	8013d72 <TIM_OC1_SetConfig+0xbe>
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	4a18      	ldr	r2, [pc, #96]	; (8013dd0 <TIM_OC1_SetConfig+0x11c>)
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	d111      	bne.n	8013d96 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8013d72:	693b      	ldr	r3, [r7, #16]
 8013d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8013d82:	683b      	ldr	r3, [r7, #0]
 8013d84:	695b      	ldr	r3, [r3, #20]
 8013d86:	693a      	ldr	r2, [r7, #16]
 8013d88:	4313      	orrs	r3, r2
 8013d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	699b      	ldr	r3, [r3, #24]
 8013d90:	693a      	ldr	r2, [r7, #16]
 8013d92:	4313      	orrs	r3, r2
 8013d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	693a      	ldr	r2, [r7, #16]
 8013d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	68fa      	ldr	r2, [r7, #12]
 8013da0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	685a      	ldr	r2, [r3, #4]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	697a      	ldr	r2, [r7, #20]
 8013dae:	621a      	str	r2, [r3, #32]
}
 8013db0:	bf00      	nop
 8013db2:	371c      	adds	r7, #28
 8013db4:	46bd      	mov	sp, r7
 8013db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dba:	4770      	bx	lr
 8013dbc:	fffeff8f 	.word	0xfffeff8f
 8013dc0:	40010000 	.word	0x40010000
 8013dc4:	40010400 	.word	0x40010400
 8013dc8:	40014000 	.word	0x40014000
 8013dcc:	40014400 	.word	0x40014400
 8013dd0:	40014800 	.word	0x40014800

08013dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013dd4:	b480      	push	{r7}
 8013dd6:	b087      	sub	sp, #28
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
 8013ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	6a1b      	ldr	r3, [r3, #32]
 8013de2:	f023 0210 	bic.w	r2, r3, #16
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	6a1b      	ldr	r3, [r3, #32]
 8013dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	685b      	ldr	r3, [r3, #4]
 8013df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	699b      	ldr	r3, [r3, #24]
 8013dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8013dfc:	68fa      	ldr	r2, [r7, #12]
 8013dfe:	4b34      	ldr	r3, [pc, #208]	; (8013ed0 <TIM_OC2_SetConfig+0xfc>)
 8013e00:	4013      	ands	r3, r2
 8013e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	021b      	lsls	r3, r3, #8
 8013e12:	68fa      	ldr	r2, [r7, #12]
 8013e14:	4313      	orrs	r3, r2
 8013e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8013e18:	697b      	ldr	r3, [r7, #20]
 8013e1a:	f023 0320 	bic.w	r3, r3, #32
 8013e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013e20:	683b      	ldr	r3, [r7, #0]
 8013e22:	689b      	ldr	r3, [r3, #8]
 8013e24:	011b      	lsls	r3, r3, #4
 8013e26:	697a      	ldr	r2, [r7, #20]
 8013e28:	4313      	orrs	r3, r2
 8013e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	4a29      	ldr	r2, [pc, #164]	; (8013ed4 <TIM_OC2_SetConfig+0x100>)
 8013e30:	4293      	cmp	r3, r2
 8013e32:	d003      	beq.n	8013e3c <TIM_OC2_SetConfig+0x68>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	4a28      	ldr	r2, [pc, #160]	; (8013ed8 <TIM_OC2_SetConfig+0x104>)
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	d10d      	bne.n	8013e58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8013e3c:	697b      	ldr	r3, [r7, #20]
 8013e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8013e44:	683b      	ldr	r3, [r7, #0]
 8013e46:	68db      	ldr	r3, [r3, #12]
 8013e48:	011b      	lsls	r3, r3, #4
 8013e4a:	697a      	ldr	r2, [r7, #20]
 8013e4c:	4313      	orrs	r3, r2
 8013e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8013e50:	697b      	ldr	r3, [r7, #20]
 8013e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	4a1e      	ldr	r2, [pc, #120]	; (8013ed4 <TIM_OC2_SetConfig+0x100>)
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	d00f      	beq.n	8013e80 <TIM_OC2_SetConfig+0xac>
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	4a1d      	ldr	r2, [pc, #116]	; (8013ed8 <TIM_OC2_SetConfig+0x104>)
 8013e64:	4293      	cmp	r3, r2
 8013e66:	d00b      	beq.n	8013e80 <TIM_OC2_SetConfig+0xac>
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	4a1c      	ldr	r2, [pc, #112]	; (8013edc <TIM_OC2_SetConfig+0x108>)
 8013e6c:	4293      	cmp	r3, r2
 8013e6e:	d007      	beq.n	8013e80 <TIM_OC2_SetConfig+0xac>
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	4a1b      	ldr	r2, [pc, #108]	; (8013ee0 <TIM_OC2_SetConfig+0x10c>)
 8013e74:	4293      	cmp	r3, r2
 8013e76:	d003      	beq.n	8013e80 <TIM_OC2_SetConfig+0xac>
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	4a1a      	ldr	r2, [pc, #104]	; (8013ee4 <TIM_OC2_SetConfig+0x110>)
 8013e7c:	4293      	cmp	r3, r2
 8013e7e:	d113      	bne.n	8013ea8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8013e80:	693b      	ldr	r3, [r7, #16]
 8013e82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013e86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8013e88:	693b      	ldr	r3, [r7, #16]
 8013e8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	695b      	ldr	r3, [r3, #20]
 8013e94:	009b      	lsls	r3, r3, #2
 8013e96:	693a      	ldr	r2, [r7, #16]
 8013e98:	4313      	orrs	r3, r2
 8013e9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8013e9c:	683b      	ldr	r3, [r7, #0]
 8013e9e:	699b      	ldr	r3, [r3, #24]
 8013ea0:	009b      	lsls	r3, r3, #2
 8013ea2:	693a      	ldr	r2, [r7, #16]
 8013ea4:	4313      	orrs	r3, r2
 8013ea6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	693a      	ldr	r2, [r7, #16]
 8013eac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	68fa      	ldr	r2, [r7, #12]
 8013eb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	685a      	ldr	r2, [r3, #4]
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	697a      	ldr	r2, [r7, #20]
 8013ec0:	621a      	str	r2, [r3, #32]
}
 8013ec2:	bf00      	nop
 8013ec4:	371c      	adds	r7, #28
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ecc:	4770      	bx	lr
 8013ece:	bf00      	nop
 8013ed0:	feff8fff 	.word	0xfeff8fff
 8013ed4:	40010000 	.word	0x40010000
 8013ed8:	40010400 	.word	0x40010400
 8013edc:	40014000 	.word	0x40014000
 8013ee0:	40014400 	.word	0x40014400
 8013ee4:	40014800 	.word	0x40014800

08013ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013ee8:	b480      	push	{r7}
 8013eea:	b087      	sub	sp, #28
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	6078      	str	r0, [r7, #4]
 8013ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	6a1b      	ldr	r3, [r3, #32]
 8013ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	6a1b      	ldr	r3, [r3, #32]
 8013f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	685b      	ldr	r3, [r3, #4]
 8013f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	69db      	ldr	r3, [r3, #28]
 8013f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013f10:	68fa      	ldr	r2, [r7, #12]
 8013f12:	4b33      	ldr	r3, [pc, #204]	; (8013fe0 <TIM_OC3_SetConfig+0xf8>)
 8013f14:	4013      	ands	r3, r2
 8013f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	f023 0303 	bic.w	r3, r3, #3
 8013f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	68fa      	ldr	r2, [r7, #12]
 8013f26:	4313      	orrs	r3, r2
 8013f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	689b      	ldr	r3, [r3, #8]
 8013f36:	021b      	lsls	r3, r3, #8
 8013f38:	697a      	ldr	r2, [r7, #20]
 8013f3a:	4313      	orrs	r3, r2
 8013f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	4a28      	ldr	r2, [pc, #160]	; (8013fe4 <TIM_OC3_SetConfig+0xfc>)
 8013f42:	4293      	cmp	r3, r2
 8013f44:	d003      	beq.n	8013f4e <TIM_OC3_SetConfig+0x66>
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	4a27      	ldr	r2, [pc, #156]	; (8013fe8 <TIM_OC3_SetConfig+0x100>)
 8013f4a:	4293      	cmp	r3, r2
 8013f4c:	d10d      	bne.n	8013f6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8013f4e:	697b      	ldr	r3, [r7, #20]
 8013f50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013f54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	68db      	ldr	r3, [r3, #12]
 8013f5a:	021b      	lsls	r3, r3, #8
 8013f5c:	697a      	ldr	r2, [r7, #20]
 8013f5e:	4313      	orrs	r3, r2
 8013f60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8013f62:	697b      	ldr	r3, [r7, #20]
 8013f64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8013f68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	4a1d      	ldr	r2, [pc, #116]	; (8013fe4 <TIM_OC3_SetConfig+0xfc>)
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d00f      	beq.n	8013f92 <TIM_OC3_SetConfig+0xaa>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	4a1c      	ldr	r2, [pc, #112]	; (8013fe8 <TIM_OC3_SetConfig+0x100>)
 8013f76:	4293      	cmp	r3, r2
 8013f78:	d00b      	beq.n	8013f92 <TIM_OC3_SetConfig+0xaa>
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	4a1b      	ldr	r2, [pc, #108]	; (8013fec <TIM_OC3_SetConfig+0x104>)
 8013f7e:	4293      	cmp	r3, r2
 8013f80:	d007      	beq.n	8013f92 <TIM_OC3_SetConfig+0xaa>
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	4a1a      	ldr	r2, [pc, #104]	; (8013ff0 <TIM_OC3_SetConfig+0x108>)
 8013f86:	4293      	cmp	r3, r2
 8013f88:	d003      	beq.n	8013f92 <TIM_OC3_SetConfig+0xaa>
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	4a19      	ldr	r2, [pc, #100]	; (8013ff4 <TIM_OC3_SetConfig+0x10c>)
 8013f8e:	4293      	cmp	r3, r2
 8013f90:	d113      	bne.n	8013fba <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8013f92:	693b      	ldr	r3, [r7, #16]
 8013f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	695b      	ldr	r3, [r3, #20]
 8013fa6:	011b      	lsls	r3, r3, #4
 8013fa8:	693a      	ldr	r2, [r7, #16]
 8013faa:	4313      	orrs	r3, r2
 8013fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8013fae:	683b      	ldr	r3, [r7, #0]
 8013fb0:	699b      	ldr	r3, [r3, #24]
 8013fb2:	011b      	lsls	r3, r3, #4
 8013fb4:	693a      	ldr	r2, [r7, #16]
 8013fb6:	4313      	orrs	r3, r2
 8013fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	693a      	ldr	r2, [r7, #16]
 8013fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	68fa      	ldr	r2, [r7, #12]
 8013fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	685a      	ldr	r2, [r3, #4]
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	697a      	ldr	r2, [r7, #20]
 8013fd2:	621a      	str	r2, [r3, #32]
}
 8013fd4:	bf00      	nop
 8013fd6:	371c      	adds	r7, #28
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fde:	4770      	bx	lr
 8013fe0:	fffeff8f 	.word	0xfffeff8f
 8013fe4:	40010000 	.word	0x40010000
 8013fe8:	40010400 	.word	0x40010400
 8013fec:	40014000 	.word	0x40014000
 8013ff0:	40014400 	.word	0x40014400
 8013ff4:	40014800 	.word	0x40014800

08013ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8013ff8:	b480      	push	{r7}
 8013ffa:	b087      	sub	sp, #28
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
 8014000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	6a1b      	ldr	r3, [r3, #32]
 8014006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	6a1b      	ldr	r3, [r3, #32]
 8014012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	685b      	ldr	r3, [r3, #4]
 8014018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	69db      	ldr	r3, [r3, #28]
 801401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014020:	68fa      	ldr	r2, [r7, #12]
 8014022:	4b24      	ldr	r3, [pc, #144]	; (80140b4 <TIM_OC4_SetConfig+0xbc>)
 8014024:	4013      	ands	r3, r2
 8014026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801402e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014030:	683b      	ldr	r3, [r7, #0]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	021b      	lsls	r3, r3, #8
 8014036:	68fa      	ldr	r2, [r7, #12]
 8014038:	4313      	orrs	r3, r2
 801403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801403c:	693b      	ldr	r3, [r7, #16]
 801403e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	689b      	ldr	r3, [r3, #8]
 8014048:	031b      	lsls	r3, r3, #12
 801404a:	693a      	ldr	r2, [r7, #16]
 801404c:	4313      	orrs	r3, r2
 801404e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	4a19      	ldr	r2, [pc, #100]	; (80140b8 <TIM_OC4_SetConfig+0xc0>)
 8014054:	4293      	cmp	r3, r2
 8014056:	d00f      	beq.n	8014078 <TIM_OC4_SetConfig+0x80>
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	4a18      	ldr	r2, [pc, #96]	; (80140bc <TIM_OC4_SetConfig+0xc4>)
 801405c:	4293      	cmp	r3, r2
 801405e:	d00b      	beq.n	8014078 <TIM_OC4_SetConfig+0x80>
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	4a17      	ldr	r2, [pc, #92]	; (80140c0 <TIM_OC4_SetConfig+0xc8>)
 8014064:	4293      	cmp	r3, r2
 8014066:	d007      	beq.n	8014078 <TIM_OC4_SetConfig+0x80>
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	4a16      	ldr	r2, [pc, #88]	; (80140c4 <TIM_OC4_SetConfig+0xcc>)
 801406c:	4293      	cmp	r3, r2
 801406e:	d003      	beq.n	8014078 <TIM_OC4_SetConfig+0x80>
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	4a15      	ldr	r2, [pc, #84]	; (80140c8 <TIM_OC4_SetConfig+0xd0>)
 8014074:	4293      	cmp	r3, r2
 8014076:	d109      	bne.n	801408c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014078:	697b      	ldr	r3, [r7, #20]
 801407a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801407e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	695b      	ldr	r3, [r3, #20]
 8014084:	019b      	lsls	r3, r3, #6
 8014086:	697a      	ldr	r2, [r7, #20]
 8014088:	4313      	orrs	r3, r2
 801408a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	697a      	ldr	r2, [r7, #20]
 8014090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	68fa      	ldr	r2, [r7, #12]
 8014096:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	685a      	ldr	r2, [r3, #4]
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	693a      	ldr	r2, [r7, #16]
 80140a4:	621a      	str	r2, [r3, #32]
}
 80140a6:	bf00      	nop
 80140a8:	371c      	adds	r7, #28
 80140aa:	46bd      	mov	sp, r7
 80140ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b0:	4770      	bx	lr
 80140b2:	bf00      	nop
 80140b4:	feff8fff 	.word	0xfeff8fff
 80140b8:	40010000 	.word	0x40010000
 80140bc:	40010400 	.word	0x40010400
 80140c0:	40014000 	.word	0x40014000
 80140c4:	40014400 	.word	0x40014400
 80140c8:	40014800 	.word	0x40014800

080140cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80140cc:	b480      	push	{r7}
 80140ce:	b087      	sub	sp, #28
 80140d0:	af00      	add	r7, sp, #0
 80140d2:	6078      	str	r0, [r7, #4]
 80140d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	6a1b      	ldr	r3, [r3, #32]
 80140da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	6a1b      	ldr	r3, [r3, #32]
 80140e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	685b      	ldr	r3, [r3, #4]
 80140ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80140f4:	68fa      	ldr	r2, [r7, #12]
 80140f6:	4b21      	ldr	r3, [pc, #132]	; (801417c <TIM_OC5_SetConfig+0xb0>)
 80140f8:	4013      	ands	r3, r2
 80140fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	68fa      	ldr	r2, [r7, #12]
 8014102:	4313      	orrs	r3, r2
 8014104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8014106:	693b      	ldr	r3, [r7, #16]
 8014108:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801410c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801410e:	683b      	ldr	r3, [r7, #0]
 8014110:	689b      	ldr	r3, [r3, #8]
 8014112:	041b      	lsls	r3, r3, #16
 8014114:	693a      	ldr	r2, [r7, #16]
 8014116:	4313      	orrs	r3, r2
 8014118:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	4a18      	ldr	r2, [pc, #96]	; (8014180 <TIM_OC5_SetConfig+0xb4>)
 801411e:	4293      	cmp	r3, r2
 8014120:	d00f      	beq.n	8014142 <TIM_OC5_SetConfig+0x76>
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	4a17      	ldr	r2, [pc, #92]	; (8014184 <TIM_OC5_SetConfig+0xb8>)
 8014126:	4293      	cmp	r3, r2
 8014128:	d00b      	beq.n	8014142 <TIM_OC5_SetConfig+0x76>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	4a16      	ldr	r2, [pc, #88]	; (8014188 <TIM_OC5_SetConfig+0xbc>)
 801412e:	4293      	cmp	r3, r2
 8014130:	d007      	beq.n	8014142 <TIM_OC5_SetConfig+0x76>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	4a15      	ldr	r2, [pc, #84]	; (801418c <TIM_OC5_SetConfig+0xc0>)
 8014136:	4293      	cmp	r3, r2
 8014138:	d003      	beq.n	8014142 <TIM_OC5_SetConfig+0x76>
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	4a14      	ldr	r2, [pc, #80]	; (8014190 <TIM_OC5_SetConfig+0xc4>)
 801413e:	4293      	cmp	r3, r2
 8014140:	d109      	bne.n	8014156 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014148:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801414a:	683b      	ldr	r3, [r7, #0]
 801414c:	695b      	ldr	r3, [r3, #20]
 801414e:	021b      	lsls	r3, r3, #8
 8014150:	697a      	ldr	r2, [r7, #20]
 8014152:	4313      	orrs	r3, r2
 8014154:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	697a      	ldr	r2, [r7, #20]
 801415a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	68fa      	ldr	r2, [r7, #12]
 8014160:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8014162:	683b      	ldr	r3, [r7, #0]
 8014164:	685a      	ldr	r2, [r3, #4]
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	693a      	ldr	r2, [r7, #16]
 801416e:	621a      	str	r2, [r3, #32]
}
 8014170:	bf00      	nop
 8014172:	371c      	adds	r7, #28
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr
 801417c:	fffeff8f 	.word	0xfffeff8f
 8014180:	40010000 	.word	0x40010000
 8014184:	40010400 	.word	0x40010400
 8014188:	40014000 	.word	0x40014000
 801418c:	40014400 	.word	0x40014400
 8014190:	40014800 	.word	0x40014800

08014194 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8014194:	b480      	push	{r7}
 8014196:	b087      	sub	sp, #28
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
 801419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6a1b      	ldr	r3, [r3, #32]
 80141a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	6a1b      	ldr	r3, [r3, #32]
 80141ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	685b      	ldr	r3, [r3, #4]
 80141b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80141bc:	68fa      	ldr	r2, [r7, #12]
 80141be:	4b22      	ldr	r3, [pc, #136]	; (8014248 <TIM_OC6_SetConfig+0xb4>)
 80141c0:	4013      	ands	r3, r2
 80141c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	681b      	ldr	r3, [r3, #0]
 80141c8:	021b      	lsls	r3, r3, #8
 80141ca:	68fa      	ldr	r2, [r7, #12]
 80141cc:	4313      	orrs	r3, r2
 80141ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80141d0:	693b      	ldr	r3, [r7, #16]
 80141d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80141d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	689b      	ldr	r3, [r3, #8]
 80141dc:	051b      	lsls	r3, r3, #20
 80141de:	693a      	ldr	r2, [r7, #16]
 80141e0:	4313      	orrs	r3, r2
 80141e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	4a19      	ldr	r2, [pc, #100]	; (801424c <TIM_OC6_SetConfig+0xb8>)
 80141e8:	4293      	cmp	r3, r2
 80141ea:	d00f      	beq.n	801420c <TIM_OC6_SetConfig+0x78>
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	4a18      	ldr	r2, [pc, #96]	; (8014250 <TIM_OC6_SetConfig+0xbc>)
 80141f0:	4293      	cmp	r3, r2
 80141f2:	d00b      	beq.n	801420c <TIM_OC6_SetConfig+0x78>
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	4a17      	ldr	r2, [pc, #92]	; (8014254 <TIM_OC6_SetConfig+0xc0>)
 80141f8:	4293      	cmp	r3, r2
 80141fa:	d007      	beq.n	801420c <TIM_OC6_SetConfig+0x78>
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	4a16      	ldr	r2, [pc, #88]	; (8014258 <TIM_OC6_SetConfig+0xc4>)
 8014200:	4293      	cmp	r3, r2
 8014202:	d003      	beq.n	801420c <TIM_OC6_SetConfig+0x78>
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	4a15      	ldr	r2, [pc, #84]	; (801425c <TIM_OC6_SetConfig+0xc8>)
 8014208:	4293      	cmp	r3, r2
 801420a:	d109      	bne.n	8014220 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014212:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8014214:	683b      	ldr	r3, [r7, #0]
 8014216:	695b      	ldr	r3, [r3, #20]
 8014218:	029b      	lsls	r3, r3, #10
 801421a:	697a      	ldr	r2, [r7, #20]
 801421c:	4313      	orrs	r3, r2
 801421e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	697a      	ldr	r2, [r7, #20]
 8014224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	68fa      	ldr	r2, [r7, #12]
 801422a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	685a      	ldr	r2, [r3, #4]
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	693a      	ldr	r2, [r7, #16]
 8014238:	621a      	str	r2, [r3, #32]
}
 801423a:	bf00      	nop
 801423c:	371c      	adds	r7, #28
 801423e:	46bd      	mov	sp, r7
 8014240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014244:	4770      	bx	lr
 8014246:	bf00      	nop
 8014248:	feff8fff 	.word	0xfeff8fff
 801424c:	40010000 	.word	0x40010000
 8014250:	40010400 	.word	0x40010400
 8014254:	40014000 	.word	0x40014000
 8014258:	40014400 	.word	0x40014400
 801425c:	40014800 	.word	0x40014800

08014260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014260:	b480      	push	{r7}
 8014262:	b087      	sub	sp, #28
 8014264:	af00      	add	r7, sp, #0
 8014266:	60f8      	str	r0, [r7, #12]
 8014268:	60b9      	str	r1, [r7, #8]
 801426a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	6a1b      	ldr	r3, [r3, #32]
 8014270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	6a1b      	ldr	r3, [r3, #32]
 8014276:	f023 0201 	bic.w	r2, r3, #1
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	699b      	ldr	r3, [r3, #24]
 8014282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014284:	693b      	ldr	r3, [r7, #16]
 8014286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801428a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	011b      	lsls	r3, r3, #4
 8014290:	693a      	ldr	r2, [r7, #16]
 8014292:	4313      	orrs	r3, r2
 8014294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	f023 030a 	bic.w	r3, r3, #10
 801429c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801429e:	697a      	ldr	r2, [r7, #20]
 80142a0:	68bb      	ldr	r3, [r7, #8]
 80142a2:	4313      	orrs	r3, r2
 80142a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80142a6:	68fb      	ldr	r3, [r7, #12]
 80142a8:	693a      	ldr	r2, [r7, #16]
 80142aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	697a      	ldr	r2, [r7, #20]
 80142b0:	621a      	str	r2, [r3, #32]
}
 80142b2:	bf00      	nop
 80142b4:	371c      	adds	r7, #28
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr

080142be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80142be:	b480      	push	{r7}
 80142c0:	b087      	sub	sp, #28
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	60f8      	str	r0, [r7, #12]
 80142c6:	60b9      	str	r1, [r7, #8]
 80142c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	6a1b      	ldr	r3, [r3, #32]
 80142ce:	f023 0210 	bic.w	r2, r3, #16
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	699b      	ldr	r3, [r3, #24]
 80142da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80142dc:	68fb      	ldr	r3, [r7, #12]
 80142de:	6a1b      	ldr	r3, [r3, #32]
 80142e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80142e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	031b      	lsls	r3, r3, #12
 80142ee:	697a      	ldr	r2, [r7, #20]
 80142f0:	4313      	orrs	r3, r2
 80142f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80142f4:	693b      	ldr	r3, [r7, #16]
 80142f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80142fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	011b      	lsls	r3, r3, #4
 8014300:	693a      	ldr	r2, [r7, #16]
 8014302:	4313      	orrs	r3, r2
 8014304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	697a      	ldr	r2, [r7, #20]
 801430a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	693a      	ldr	r2, [r7, #16]
 8014310:	621a      	str	r2, [r3, #32]
}
 8014312:	bf00      	nop
 8014314:	371c      	adds	r7, #28
 8014316:	46bd      	mov	sp, r7
 8014318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431c:	4770      	bx	lr
	...

08014320 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014320:	b480      	push	{r7}
 8014322:	b085      	sub	sp, #20
 8014324:	af00      	add	r7, sp, #0
 8014326:	6078      	str	r0, [r7, #4]
 8014328:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	689b      	ldr	r3, [r3, #8]
 801432e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014330:	68fa      	ldr	r2, [r7, #12]
 8014332:	4b09      	ldr	r3, [pc, #36]	; (8014358 <TIM_ITRx_SetConfig+0x38>)
 8014334:	4013      	ands	r3, r2
 8014336:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014338:	683a      	ldr	r2, [r7, #0]
 801433a:	68fb      	ldr	r3, [r7, #12]
 801433c:	4313      	orrs	r3, r2
 801433e:	f043 0307 	orr.w	r3, r3, #7
 8014342:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	68fa      	ldr	r2, [r7, #12]
 8014348:	609a      	str	r2, [r3, #8]
}
 801434a:	bf00      	nop
 801434c:	3714      	adds	r7, #20
 801434e:	46bd      	mov	sp, r7
 8014350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014354:	4770      	bx	lr
 8014356:	bf00      	nop
 8014358:	ffcfff8f 	.word	0xffcfff8f

0801435c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801435c:	b480      	push	{r7}
 801435e:	b087      	sub	sp, #28
 8014360:	af00      	add	r7, sp, #0
 8014362:	60f8      	str	r0, [r7, #12]
 8014364:	60b9      	str	r1, [r7, #8]
 8014366:	607a      	str	r2, [r7, #4]
 8014368:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801436a:	68fb      	ldr	r3, [r7, #12]
 801436c:	689b      	ldr	r3, [r3, #8]
 801436e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014376:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	021a      	lsls	r2, r3, #8
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	431a      	orrs	r2, r3
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	4313      	orrs	r3, r2
 8014384:	697a      	ldr	r2, [r7, #20]
 8014386:	4313      	orrs	r3, r2
 8014388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	697a      	ldr	r2, [r7, #20]
 801438e:	609a      	str	r2, [r3, #8]
}
 8014390:	bf00      	nop
 8014392:	371c      	adds	r7, #28
 8014394:	46bd      	mov	sp, r7
 8014396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439a:	4770      	bx	lr

0801439c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801439c:	b480      	push	{r7}
 801439e:	b087      	sub	sp, #28
 80143a0:	af00      	add	r7, sp, #0
 80143a2:	60f8      	str	r0, [r7, #12]
 80143a4:	60b9      	str	r1, [r7, #8]
 80143a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	f003 031f 	and.w	r3, r3, #31
 80143ae:	2201      	movs	r2, #1
 80143b0:	fa02 f303 	lsl.w	r3, r2, r3
 80143b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	6a1a      	ldr	r2, [r3, #32]
 80143ba:	697b      	ldr	r3, [r7, #20]
 80143bc:	43db      	mvns	r3, r3
 80143be:	401a      	ands	r2, r3
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	6a1a      	ldr	r2, [r3, #32]
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	f003 031f 	and.w	r3, r3, #31
 80143ce:	6879      	ldr	r1, [r7, #4]
 80143d0:	fa01 f303 	lsl.w	r3, r1, r3
 80143d4:	431a      	orrs	r2, r3
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	621a      	str	r2, [r3, #32]
}
 80143da:	bf00      	nop
 80143dc:	371c      	adds	r7, #28
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr
	...

080143e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80143e8:	b480      	push	{r7}
 80143ea:	b085      	sub	sp, #20
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
 80143f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80143f8:	2b01      	cmp	r3, #1
 80143fa:	d101      	bne.n	8014400 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80143fc:	2302      	movs	r3, #2
 80143fe:	e077      	b.n	80144f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2201      	movs	r2, #1
 8014404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2202      	movs	r2, #2
 801440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	681b      	ldr	r3, [r3, #0]
 8014414:	685b      	ldr	r3, [r3, #4]
 8014416:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	689b      	ldr	r3, [r3, #8]
 801441e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	4a35      	ldr	r2, [pc, #212]	; (80144fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8014426:	4293      	cmp	r3, r2
 8014428:	d004      	beq.n	8014434 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	4a34      	ldr	r2, [pc, #208]	; (8014500 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8014430:	4293      	cmp	r3, r2
 8014432:	d108      	bne.n	8014446 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801443a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801443c:	683b      	ldr	r3, [r7, #0]
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	68fa      	ldr	r2, [r7, #12]
 8014442:	4313      	orrs	r3, r2
 8014444:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014446:	68fb      	ldr	r3, [r7, #12]
 8014448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801444c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	4313      	orrs	r3, r2
 8014456:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	68fa      	ldr	r2, [r7, #12]
 801445e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	4a25      	ldr	r2, [pc, #148]	; (80144fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8014466:	4293      	cmp	r3, r2
 8014468:	d02c      	beq.n	80144c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014472:	d027      	beq.n	80144c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	4a22      	ldr	r2, [pc, #136]	; (8014504 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801447a:	4293      	cmp	r3, r2
 801447c:	d022      	beq.n	80144c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	4a21      	ldr	r2, [pc, #132]	; (8014508 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8014484:	4293      	cmp	r3, r2
 8014486:	d01d      	beq.n	80144c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	4a1f      	ldr	r2, [pc, #124]	; (801450c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801448e:	4293      	cmp	r3, r2
 8014490:	d018      	beq.n	80144c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	4a1a      	ldr	r2, [pc, #104]	; (8014500 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8014498:	4293      	cmp	r3, r2
 801449a:	d013      	beq.n	80144c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	4a1b      	ldr	r2, [pc, #108]	; (8014510 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80144a2:	4293      	cmp	r3, r2
 80144a4:	d00e      	beq.n	80144c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	681b      	ldr	r3, [r3, #0]
 80144aa:	4a1a      	ldr	r2, [pc, #104]	; (8014514 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80144ac:	4293      	cmp	r3, r2
 80144ae:	d009      	beq.n	80144c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	4a18      	ldr	r2, [pc, #96]	; (8014518 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80144b6:	4293      	cmp	r3, r2
 80144b8:	d004      	beq.n	80144c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	4a17      	ldr	r2, [pc, #92]	; (801451c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80144c0:	4293      	cmp	r3, r2
 80144c2:	d10c      	bne.n	80144de <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80144c4:	68bb      	ldr	r3, [r7, #8]
 80144c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80144ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	689b      	ldr	r3, [r3, #8]
 80144d0:	68ba      	ldr	r2, [r7, #8]
 80144d2:	4313      	orrs	r3, r2
 80144d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	68ba      	ldr	r2, [r7, #8]
 80144dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2201      	movs	r2, #1
 80144e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2200      	movs	r2, #0
 80144ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80144ee:	2300      	movs	r3, #0
}
 80144f0:	4618      	mov	r0, r3
 80144f2:	3714      	adds	r7, #20
 80144f4:	46bd      	mov	sp, r7
 80144f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144fa:	4770      	bx	lr
 80144fc:	40010000 	.word	0x40010000
 8014500:	40010400 	.word	0x40010400
 8014504:	40000400 	.word	0x40000400
 8014508:	40000800 	.word	0x40000800
 801450c:	40000c00 	.word	0x40000c00
 8014510:	40001800 	.word	0x40001800
 8014514:	40014000 	.word	0x40014000
 8014518:	4000e000 	.word	0x4000e000
 801451c:	4000e400 	.word	0x4000e400

08014520 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8014520:	b480      	push	{r7}
 8014522:	b085      	sub	sp, #20
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801452a:	2300      	movs	r3, #0
 801452c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014534:	2b01      	cmp	r3, #1
 8014536:	d101      	bne.n	801453c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8014538:	2302      	movs	r3, #2
 801453a:	e087      	b.n	801464c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2201      	movs	r2, #1
 8014540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801454a:	683b      	ldr	r3, [r7, #0]
 801454c:	68db      	ldr	r3, [r3, #12]
 801454e:	4313      	orrs	r3, r2
 8014550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8014558:	683b      	ldr	r3, [r7, #0]
 801455a:	689b      	ldr	r3, [r3, #8]
 801455c:	4313      	orrs	r3, r2
 801455e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8014566:	683b      	ldr	r3, [r7, #0]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	4313      	orrs	r3, r2
 801456c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	4313      	orrs	r3, r2
 801457a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014582:	683b      	ldr	r3, [r7, #0]
 8014584:	691b      	ldr	r3, [r3, #16]
 8014586:	4313      	orrs	r3, r2
 8014588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8014590:	683b      	ldr	r3, [r7, #0]
 8014592:	695b      	ldr	r3, [r3, #20]
 8014594:	4313      	orrs	r3, r2
 8014596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145a2:	4313      	orrs	r3, r2
 80145a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80145a6:	68fb      	ldr	r3, [r7, #12]
 80145a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	699b      	ldr	r3, [r3, #24]
 80145b0:	041b      	lsls	r3, r3, #16
 80145b2:	4313      	orrs	r3, r2
 80145b4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	4a27      	ldr	r2, [pc, #156]	; (8014658 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80145bc:	4293      	cmp	r3, r2
 80145be:	d004      	beq.n	80145ca <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	4a25      	ldr	r2, [pc, #148]	; (801465c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80145c6:	4293      	cmp	r3, r2
 80145c8:	d106      	bne.n	80145d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	69db      	ldr	r3, [r3, #28]
 80145d4:	4313      	orrs	r3, r2
 80145d6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	4a1e      	ldr	r2, [pc, #120]	; (8014658 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80145de:	4293      	cmp	r3, r2
 80145e0:	d004      	beq.n	80145ec <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	4a1d      	ldr	r2, [pc, #116]	; (801465c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80145e8:	4293      	cmp	r3, r2
 80145ea:	d126      	bne.n	801463a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145f6:	051b      	lsls	r3, r3, #20
 80145f8:	4313      	orrs	r3, r2
 80145fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	6a1b      	ldr	r3, [r3, #32]
 8014606:	4313      	orrs	r3, r2
 8014608:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014614:	4313      	orrs	r3, r2
 8014616:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	4a0e      	ldr	r2, [pc, #56]	; (8014658 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 801461e:	4293      	cmp	r3, r2
 8014620:	d004      	beq.n	801462c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	4a0d      	ldr	r2, [pc, #52]	; (801465c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8014628:	4293      	cmp	r3, r2
 801462a:	d106      	bne.n	801463a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014636:	4313      	orrs	r3, r2
 8014638:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	68fa      	ldr	r2, [r7, #12]
 8014640:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	2200      	movs	r2, #0
 8014646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801464a:	2300      	movs	r3, #0
}
 801464c:	4618      	mov	r0, r3
 801464e:	3714      	adds	r7, #20
 8014650:	46bd      	mov	sp, r7
 8014652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014656:	4770      	bx	lr
 8014658:	40010000 	.word	0x40010000
 801465c:	40010400 	.word	0x40010400

08014660 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014660:	b480      	push	{r7}
 8014662:	b083      	sub	sp, #12
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014668:	bf00      	nop
 801466a:	370c      	adds	r7, #12
 801466c:	46bd      	mov	sp, r7
 801466e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014672:	4770      	bx	lr

08014674 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014674:	b480      	push	{r7}
 8014676:	b083      	sub	sp, #12
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801467c:	bf00      	nop
 801467e:	370c      	adds	r7, #12
 8014680:	46bd      	mov	sp, r7
 8014682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014686:	4770      	bx	lr

08014688 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014688:	b480      	push	{r7}
 801468a:	b083      	sub	sp, #12
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014690:	bf00      	nop
 8014692:	370c      	adds	r7, #12
 8014694:	46bd      	mov	sp, r7
 8014696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801469a:	4770      	bx	lr

0801469c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801469c:	b580      	push	{r7, lr}
 801469e:	b082      	sub	sp, #8
 80146a0:	af00      	add	r7, sp, #0
 80146a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d101      	bne.n	80146ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80146aa:	2301      	movs	r3, #1
 80146ac:	e042      	b.n	8014734 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d106      	bne.n	80146c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	2200      	movs	r2, #0
 80146bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f7f2 fd61 	bl	8007188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2224      	movs	r2, #36	; 0x24
 80146ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	681a      	ldr	r2, [r3, #0]
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	f022 0201 	bic.w	r2, r2, #1
 80146dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f000 fce8 	bl	80150b4 <UART_SetConfig>
 80146e4:	4603      	mov	r3, r0
 80146e6:	2b01      	cmp	r3, #1
 80146e8:	d101      	bne.n	80146ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80146ea:	2301      	movs	r3, #1
 80146ec:	e022      	b.n	8014734 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d002      	beq.n	80146fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f001 fb48 	bl	8015d8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	685a      	ldr	r2, [r3, #4]
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801470a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	689a      	ldr	r2, [r3, #8]
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801471a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	681a      	ldr	r2, [r3, #0]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	f042 0201 	orr.w	r2, r2, #1
 801472a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801472c:	6878      	ldr	r0, [r7, #4]
 801472e:	f001 fbcf 	bl	8015ed0 <UART_CheckIdleState>
 8014732:	4603      	mov	r3, r0
}
 8014734:	4618      	mov	r0, r3
 8014736:	3708      	adds	r7, #8
 8014738:	46bd      	mov	sp, r7
 801473a:	bd80      	pop	{r7, pc}

0801473c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801473c:	b480      	push	{r7}
 801473e:	b091      	sub	sp, #68	; 0x44
 8014740:	af00      	add	r7, sp, #0
 8014742:	60f8      	str	r0, [r7, #12]
 8014744:	60b9      	str	r1, [r7, #8]
 8014746:	4613      	mov	r3, r2
 8014748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014750:	2b20      	cmp	r3, #32
 8014752:	f040 808c 	bne.w	801486e <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d002      	beq.n	8014762 <HAL_UART_Transmit_IT+0x26>
 801475c:	88fb      	ldrh	r3, [r7, #6]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d101      	bne.n	8014766 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8014762:	2301      	movs	r3, #1
 8014764:	e084      	b.n	8014870 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801476c:	2b01      	cmp	r3, #1
 801476e:	d101      	bne.n	8014774 <HAL_UART_Transmit_IT+0x38>
 8014770:	2302      	movs	r3, #2
 8014772:	e07d      	b.n	8014870 <HAL_UART_Transmit_IT+0x134>
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	2201      	movs	r2, #1
 8014778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	68ba      	ldr	r2, [r7, #8]
 8014780:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	88fa      	ldrh	r2, [r7, #6]
 8014786:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	88fa      	ldrh	r2, [r7, #6]
 801478e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	2200      	movs	r2, #0
 8014796:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	2200      	movs	r2, #0
 801479c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	2221      	movs	r2, #33	; 0x21
 80147a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80147ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80147b0:	d12e      	bne.n	8014810 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	689b      	ldr	r3, [r3, #8]
 80147b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80147ba:	d107      	bne.n	80147cc <HAL_UART_Transmit_IT+0x90>
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	691b      	ldr	r3, [r3, #16]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d103      	bne.n	80147cc <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	4a2d      	ldr	r2, [pc, #180]	; (801487c <HAL_UART_Transmit_IT+0x140>)
 80147c8:	675a      	str	r2, [r3, #116]	; 0x74
 80147ca:	e002      	b.n	80147d2 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	4a2c      	ldr	r2, [pc, #176]	; (8014880 <HAL_UART_Transmit_IT+0x144>)
 80147d0:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	2200      	movs	r2, #0
 80147d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	3308      	adds	r3, #8
 80147e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80147e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147e4:	e853 3f00 	ldrex	r3, [r3]
 80147e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80147ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80147f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80147f2:	68fb      	ldr	r3, [r7, #12]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	3308      	adds	r3, #8
 80147f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147fa:	637a      	str	r2, [r7, #52]	; 0x34
 80147fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80147fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014800:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014802:	e841 2300 	strex	r3, r2, [r1]
 8014806:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8014808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801480a:	2b00      	cmp	r3, #0
 801480c:	d1e5      	bne.n	80147da <HAL_UART_Transmit_IT+0x9e>
 801480e:	e02c      	b.n	801486a <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	689b      	ldr	r3, [r3, #8]
 8014814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014818:	d107      	bne.n	801482a <HAL_UART_Transmit_IT+0xee>
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	691b      	ldr	r3, [r3, #16]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d103      	bne.n	801482a <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8014822:	68fb      	ldr	r3, [r7, #12]
 8014824:	4a17      	ldr	r2, [pc, #92]	; (8014884 <HAL_UART_Transmit_IT+0x148>)
 8014826:	675a      	str	r2, [r3, #116]	; 0x74
 8014828:	e002      	b.n	8014830 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	4a16      	ldr	r2, [pc, #88]	; (8014888 <HAL_UART_Transmit_IT+0x14c>)
 801482e:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8014830:	68fb      	ldr	r3, [r7, #12]
 8014832:	2200      	movs	r2, #0
 8014834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801483e:	697b      	ldr	r3, [r7, #20]
 8014840:	e853 3f00 	ldrex	r3, [r3]
 8014844:	613b      	str	r3, [r7, #16]
   return(result);
 8014846:	693b      	ldr	r3, [r7, #16]
 8014848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801484c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	461a      	mov	r2, r3
 8014854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014856:	623b      	str	r3, [r7, #32]
 8014858:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801485a:	69f9      	ldr	r1, [r7, #28]
 801485c:	6a3a      	ldr	r2, [r7, #32]
 801485e:	e841 2300 	strex	r3, r2, [r1]
 8014862:	61bb      	str	r3, [r7, #24]
   return(result);
 8014864:	69bb      	ldr	r3, [r7, #24]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d1e6      	bne.n	8014838 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 801486a:	2300      	movs	r3, #0
 801486c:	e000      	b.n	8014870 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 801486e:	2302      	movs	r3, #2
  }
}
 8014870:	4618      	mov	r0, r3
 8014872:	3744      	adds	r7, #68	; 0x44
 8014874:	46bd      	mov	sp, r7
 8014876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487a:	4770      	bx	lr
 801487c:	0801669f 	.word	0x0801669f
 8014880:	080165bf 	.word	0x080165bf
 8014884:	080164fd 	.word	0x080164fd
 8014888:	08016445 	.word	0x08016445

0801488c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b08a      	sub	sp, #40	; 0x28
 8014890:	af00      	add	r7, sp, #0
 8014892:	60f8      	str	r0, [r7, #12]
 8014894:	60b9      	str	r1, [r7, #8]
 8014896:	4613      	mov	r3, r2
 8014898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80148a0:	2b20      	cmp	r3, #32
 80148a2:	d142      	bne.n	801492a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d002      	beq.n	80148b0 <HAL_UART_Receive_IT+0x24>
 80148aa:	88fb      	ldrh	r3, [r7, #6]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d101      	bne.n	80148b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80148b0:	2301      	movs	r3, #1
 80148b2:	e03b      	b.n	801492c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80148ba:	2b01      	cmp	r3, #1
 80148bc:	d101      	bne.n	80148c2 <HAL_UART_Receive_IT+0x36>
 80148be:	2302      	movs	r3, #2
 80148c0:	e034      	b.n	801492c <HAL_UART_Receive_IT+0xa0>
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	2201      	movs	r2, #1
 80148c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	2200      	movs	r2, #0
 80148ce:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	4a17      	ldr	r2, [pc, #92]	; (8014934 <HAL_UART_Receive_IT+0xa8>)
 80148d6:	4293      	cmp	r3, r2
 80148d8:	d01f      	beq.n	801491a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	685b      	ldr	r3, [r3, #4]
 80148e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d018      	beq.n	801491a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80148ee:	697b      	ldr	r3, [r7, #20]
 80148f0:	e853 3f00 	ldrex	r3, [r3]
 80148f4:	613b      	str	r3, [r7, #16]
   return(result);
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80148fc:	627b      	str	r3, [r7, #36]	; 0x24
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	461a      	mov	r2, r3
 8014904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014906:	623b      	str	r3, [r7, #32]
 8014908:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801490a:	69f9      	ldr	r1, [r7, #28]
 801490c:	6a3a      	ldr	r2, [r7, #32]
 801490e:	e841 2300 	strex	r3, r2, [r1]
 8014912:	61bb      	str	r3, [r7, #24]
   return(result);
 8014914:	69bb      	ldr	r3, [r7, #24]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d1e6      	bne.n	80148e8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801491a:	88fb      	ldrh	r3, [r7, #6]
 801491c:	461a      	mov	r2, r3
 801491e:	68b9      	ldr	r1, [r7, #8]
 8014920:	68f8      	ldr	r0, [r7, #12]
 8014922:	f001 fbe9 	bl	80160f8 <UART_Start_Receive_IT>
 8014926:	4603      	mov	r3, r0
 8014928:	e000      	b.n	801492c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801492a:	2302      	movs	r3, #2
  }
}
 801492c:	4618      	mov	r0, r3
 801492e:	3728      	adds	r7, #40	; 0x28
 8014930:	46bd      	mov	sp, r7
 8014932:	bd80      	pop	{r7, pc}
 8014934:	58000c00 	.word	0x58000c00

08014938 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b0ba      	sub	sp, #232	; 0xe8
 801493c:	af00      	add	r7, sp, #0
 801493e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	69db      	ldr	r3, [r3, #28]
 8014946:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	689b      	ldr	r3, [r3, #8]
 801495a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801495e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8014962:	f640 030f 	movw	r3, #2063	; 0x80f
 8014966:	4013      	ands	r3, r2
 8014968:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801496c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014970:	2b00      	cmp	r3, #0
 8014972:	d11b      	bne.n	80149ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014978:	f003 0320 	and.w	r3, r3, #32
 801497c:	2b00      	cmp	r3, #0
 801497e:	d015      	beq.n	80149ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014984:	f003 0320 	and.w	r3, r3, #32
 8014988:	2b00      	cmp	r3, #0
 801498a:	d105      	bne.n	8014998 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801498c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014994:	2b00      	cmp	r3, #0
 8014996:	d009      	beq.n	80149ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801499c:	2b00      	cmp	r3, #0
 801499e:	f000 835a 	beq.w	8015056 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80149a6:	6878      	ldr	r0, [r7, #4]
 80149a8:	4798      	blx	r3
      }
      return;
 80149aa:	e354      	b.n	8015056 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80149ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	f000 811f 	beq.w	8014bf4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80149b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80149ba:	4b8b      	ldr	r3, [pc, #556]	; (8014be8 <HAL_UART_IRQHandler+0x2b0>)
 80149bc:	4013      	ands	r3, r2
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d106      	bne.n	80149d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80149c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80149c6:	4b89      	ldr	r3, [pc, #548]	; (8014bec <HAL_UART_IRQHandler+0x2b4>)
 80149c8:	4013      	ands	r3, r2
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	f000 8112 	beq.w	8014bf4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80149d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80149d4:	f003 0301 	and.w	r3, r3, #1
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d011      	beq.n	8014a00 <HAL_UART_IRQHandler+0xc8>
 80149dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80149e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d00b      	beq.n	8014a00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2201      	movs	r2, #1
 80149ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80149f6:	f043 0201 	orr.w	r2, r3, #1
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a04:	f003 0302 	and.w	r3, r3, #2
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d011      	beq.n	8014a30 <HAL_UART_IRQHandler+0xf8>
 8014a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a10:	f003 0301 	and.w	r3, r3, #1
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d00b      	beq.n	8014a30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	2202      	movs	r2, #2
 8014a1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014a26:	f043 0204 	orr.w	r2, r3, #4
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8014a30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a34:	f003 0304 	and.w	r3, r3, #4
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d011      	beq.n	8014a60 <HAL_UART_IRQHandler+0x128>
 8014a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014a40:	f003 0301 	and.w	r3, r3, #1
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d00b      	beq.n	8014a60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	2204      	movs	r2, #4
 8014a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014a56:	f043 0202 	orr.w	r2, r3, #2
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8014a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014a64:	f003 0308 	and.w	r3, r3, #8
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d017      	beq.n	8014a9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014a70:	f003 0320 	and.w	r3, r3, #32
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d105      	bne.n	8014a84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8014a78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8014a7c:	4b5a      	ldr	r3, [pc, #360]	; (8014be8 <HAL_UART_IRQHandler+0x2b0>)
 8014a7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d00b      	beq.n	8014a9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	2208      	movs	r2, #8
 8014a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014a92:	f043 0208 	orr.w	r2, r3, #8
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8014a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d012      	beq.n	8014ace <HAL_UART_IRQHandler+0x196>
 8014aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d00c      	beq.n	8014ace <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014abc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014ac4:	f043 0220 	orr.w	r2, r3, #32
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	f000 82c0 	beq.w	801505a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8014ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ade:	f003 0320 	and.w	r3, r3, #32
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d013      	beq.n	8014b0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8014ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014aea:	f003 0320 	and.w	r3, r3, #32
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	d105      	bne.n	8014afe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8014af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d007      	beq.n	8014b0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d003      	beq.n	8014b0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014b14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	689b      	ldr	r3, [r3, #8]
 8014b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b22:	2b40      	cmp	r3, #64	; 0x40
 8014b24:	d005      	beq.n	8014b32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8014b26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014b2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d04f      	beq.n	8014bd2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f001 fc0a 	bl	801634c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	689b      	ldr	r3, [r3, #8]
 8014b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014b42:	2b40      	cmp	r3, #64	; 0x40
 8014b44:	d141      	bne.n	8014bca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	3308      	adds	r3, #8
 8014b4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8014b54:	e853 3f00 	ldrex	r3, [r3]
 8014b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8014b5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014b60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014b64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	3308      	adds	r3, #8
 8014b6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8014b72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8014b76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8014b7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014b82:	e841 2300 	strex	r3, r2, [r1]
 8014b86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8014b8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8014b8e:	2b00      	cmp	r3, #0
 8014b90:	d1d9      	bne.n	8014b46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b96:	2b00      	cmp	r3, #0
 8014b98:	d013      	beq.n	8014bc2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014b9e:	4a14      	ldr	r2, [pc, #80]	; (8014bf0 <HAL_UART_IRQHandler+0x2b8>)
 8014ba0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7f6 fa3c 	bl	800b024 <HAL_DMA_Abort_IT>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d017      	beq.n	8014be2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014bb8:	687a      	ldr	r2, [r7, #4]
 8014bba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8014bbc:	4610      	mov	r0, r2
 8014bbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bc0:	e00f      	b.n	8014be2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f000 fa60 	bl	8015088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bc8:	e00b      	b.n	8014be2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8014bca:	6878      	ldr	r0, [r7, #4]
 8014bcc:	f000 fa5c 	bl	8015088 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014bd0:	e007      	b.n	8014be2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8014bd2:	6878      	ldr	r0, [r7, #4]
 8014bd4:	f000 fa58 	bl	8015088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8014be0:	e23b      	b.n	801505a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014be2:	bf00      	nop
    return;
 8014be4:	e239      	b.n	801505a <HAL_UART_IRQHandler+0x722>
 8014be6:	bf00      	nop
 8014be8:	10000001 	.word	0x10000001
 8014bec:	04000120 	.word	0x04000120
 8014bf0:	08016419 	.word	0x08016419

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	f040 81ce 	bne.w	8014f9a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8014bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014c02:	f003 0310 	and.w	r3, r3, #16
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	f000 81c7 	beq.w	8014f9a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8014c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014c10:	f003 0310 	and.w	r3, r3, #16
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	f000 81c0 	beq.w	8014f9a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	2210      	movs	r2, #16
 8014c20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	689b      	ldr	r3, [r3, #8]
 8014c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014c2c:	2b40      	cmp	r3, #64	; 0x40
 8014c2e:	f040 813b 	bne.w	8014ea8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	4a8b      	ldr	r2, [pc, #556]	; (8014e68 <HAL_UART_IRQHandler+0x530>)
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	d059      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	4a89      	ldr	r2, [pc, #548]	; (8014e6c <HAL_UART_IRQHandler+0x534>)
 8014c46:	4293      	cmp	r3, r2
 8014c48:	d053      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	4a87      	ldr	r2, [pc, #540]	; (8014e70 <HAL_UART_IRQHandler+0x538>)
 8014c52:	4293      	cmp	r3, r2
 8014c54:	d04d      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	4a85      	ldr	r2, [pc, #532]	; (8014e74 <HAL_UART_IRQHandler+0x53c>)
 8014c5e:	4293      	cmp	r3, r2
 8014c60:	d047      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	4a83      	ldr	r2, [pc, #524]	; (8014e78 <HAL_UART_IRQHandler+0x540>)
 8014c6a:	4293      	cmp	r3, r2
 8014c6c:	d041      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	4a81      	ldr	r2, [pc, #516]	; (8014e7c <HAL_UART_IRQHandler+0x544>)
 8014c76:	4293      	cmp	r3, r2
 8014c78:	d03b      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	4a7f      	ldr	r2, [pc, #508]	; (8014e80 <HAL_UART_IRQHandler+0x548>)
 8014c82:	4293      	cmp	r3, r2
 8014c84:	d035      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014c86:	687b      	ldr	r3, [r7, #4]
 8014c88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	4a7d      	ldr	r2, [pc, #500]	; (8014e84 <HAL_UART_IRQHandler+0x54c>)
 8014c8e:	4293      	cmp	r3, r2
 8014c90:	d02f      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	4a7b      	ldr	r2, [pc, #492]	; (8014e88 <HAL_UART_IRQHandler+0x550>)
 8014c9a:	4293      	cmp	r3, r2
 8014c9c:	d029      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	4a79      	ldr	r2, [pc, #484]	; (8014e8c <HAL_UART_IRQHandler+0x554>)
 8014ca6:	4293      	cmp	r3, r2
 8014ca8:	d023      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	4a77      	ldr	r2, [pc, #476]	; (8014e90 <HAL_UART_IRQHandler+0x558>)
 8014cb2:	4293      	cmp	r3, r2
 8014cb4:	d01d      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	4a75      	ldr	r2, [pc, #468]	; (8014e94 <HAL_UART_IRQHandler+0x55c>)
 8014cbe:	4293      	cmp	r3, r2
 8014cc0:	d017      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	4a73      	ldr	r2, [pc, #460]	; (8014e98 <HAL_UART_IRQHandler+0x560>)
 8014cca:	4293      	cmp	r3, r2
 8014ccc:	d011      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	4a71      	ldr	r2, [pc, #452]	; (8014e9c <HAL_UART_IRQHandler+0x564>)
 8014cd6:	4293      	cmp	r3, r2
 8014cd8:	d00b      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	4a6f      	ldr	r2, [pc, #444]	; (8014ea0 <HAL_UART_IRQHandler+0x568>)
 8014ce2:	4293      	cmp	r3, r2
 8014ce4:	d005      	beq.n	8014cf2 <HAL_UART_IRQHandler+0x3ba>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	4a6d      	ldr	r2, [pc, #436]	; (8014ea4 <HAL_UART_IRQHandler+0x56c>)
 8014cee:	4293      	cmp	r3, r2
 8014cf0:	d105      	bne.n	8014cfe <HAL_UART_IRQHandler+0x3c6>
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	b29b      	uxth	r3, r3
 8014cfc:	e004      	b.n	8014d08 <HAL_UART_IRQHandler+0x3d0>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	685b      	ldr	r3, [r3, #4]
 8014d06:	b29b      	uxth	r3, r3
 8014d08:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8014d0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	f000 81a4 	beq.w	801505e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014d1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014d20:	429a      	cmp	r2, r3
 8014d22:	f080 819c 	bcs.w	801505e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8014d2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014d34:	69db      	ldr	r3, [r3, #28]
 8014d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014d3a:	f000 8086 	beq.w	8014e4a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014d4a:	e853 3f00 	ldrex	r3, [r3]
 8014d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8014d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	461a      	mov	r2, r3
 8014d64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014d68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8014d6c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8014d74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8014d78:	e841 2300 	strex	r3, r2, [r1]
 8014d7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8014d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d1da      	bne.n	8014d3e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	3308      	adds	r3, #8
 8014d8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014d92:	e853 3f00 	ldrex	r3, [r3]
 8014d96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8014d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014d9a:	f023 0301 	bic.w	r3, r3, #1
 8014d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	3308      	adds	r3, #8
 8014da8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8014dac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014db0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014db2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8014db4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014db8:	e841 2300 	strex	r3, r2, [r1]
 8014dbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8014dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d1e1      	bne.n	8014d88 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	3308      	adds	r3, #8
 8014dca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014dce:	e853 3f00 	ldrex	r3, [r3]
 8014dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8014dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	3308      	adds	r3, #8
 8014de4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8014de8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8014dea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8014dee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8014df0:	e841 2300 	strex	r3, r2, [r1]
 8014df4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8014df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d1e3      	bne.n	8014dc4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	2220      	movs	r2, #32
 8014e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	2200      	movs	r2, #0
 8014e08:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014e10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e12:	e853 3f00 	ldrex	r3, [r3]
 8014e16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8014e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e1a:	f023 0310 	bic.w	r3, r3, #16
 8014e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	461a      	mov	r2, r3
 8014e28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8014e2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014e30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014e32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014e34:	e841 2300 	strex	r3, r2, [r1]
 8014e38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8014e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d1e4      	bne.n	8014e0a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e44:	4618      	mov	r0, r3
 8014e46:	f7f5 fdcf 	bl	800a9e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014e56:	b29b      	uxth	r3, r3
 8014e58:	1ad3      	subs	r3, r2, r3
 8014e5a:	b29b      	uxth	r3, r3
 8014e5c:	4619      	mov	r1, r3
 8014e5e:	6878      	ldr	r0, [r7, #4]
 8014e60:	f000 f91c 	bl	801509c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014e64:	e0fb      	b.n	801505e <HAL_UART_IRQHandler+0x726>
 8014e66:	bf00      	nop
 8014e68:	40020010 	.word	0x40020010
 8014e6c:	40020028 	.word	0x40020028
 8014e70:	40020040 	.word	0x40020040
 8014e74:	40020058 	.word	0x40020058
 8014e78:	40020070 	.word	0x40020070
 8014e7c:	40020088 	.word	0x40020088
 8014e80:	400200a0 	.word	0x400200a0
 8014e84:	400200b8 	.word	0x400200b8
 8014e88:	40020410 	.word	0x40020410
 8014e8c:	40020428 	.word	0x40020428
 8014e90:	40020440 	.word	0x40020440
 8014e94:	40020458 	.word	0x40020458
 8014e98:	40020470 	.word	0x40020470
 8014e9c:	40020488 	.word	0x40020488
 8014ea0:	400204a0 	.word	0x400204a0
 8014ea4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	1ad3      	subs	r3, r2, r3
 8014eb8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	f000 80cc 	beq.w	8015062 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8014eca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	f000 80c7 	beq.w	8015062 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014edc:	e853 3f00 	ldrex	r3, [r3]
 8014ee0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ee4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	461a      	mov	r2, r3
 8014ef2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8014ef8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014efa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014efc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014efe:	e841 2300 	strex	r3, r2, [r1]
 8014f02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d1e4      	bne.n	8014ed4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	3308      	adds	r3, #8
 8014f10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f14:	e853 3f00 	ldrex	r3, [r3]
 8014f18:	623b      	str	r3, [r7, #32]
   return(result);
 8014f1a:	6a3a      	ldr	r2, [r7, #32]
 8014f1c:	4b54      	ldr	r3, [pc, #336]	; (8015070 <HAL_UART_IRQHandler+0x738>)
 8014f1e:	4013      	ands	r3, r2
 8014f20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	3308      	adds	r3, #8
 8014f2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8014f2e:	633a      	str	r2, [r7, #48]	; 0x30
 8014f30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f36:	e841 2300 	strex	r3, r2, [r1]
 8014f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d1e3      	bne.n	8014f0a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2220      	movs	r2, #32
 8014f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2200      	movs	r2, #0
 8014f54:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014f5c:	693b      	ldr	r3, [r7, #16]
 8014f5e:	e853 3f00 	ldrex	r3, [r3]
 8014f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	f023 0310 	bic.w	r3, r3, #16
 8014f6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	681b      	ldr	r3, [r3, #0]
 8014f72:	461a      	mov	r2, r3
 8014f74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014f78:	61fb      	str	r3, [r7, #28]
 8014f7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014f7c:	69b9      	ldr	r1, [r7, #24]
 8014f7e:	69fa      	ldr	r2, [r7, #28]
 8014f80:	e841 2300 	strex	r3, r2, [r1]
 8014f84:	617b      	str	r3, [r7, #20]
   return(result);
 8014f86:	697b      	ldr	r3, [r7, #20]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d1e4      	bne.n	8014f56 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8014f8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8014f90:	4619      	mov	r1, r3
 8014f92:	6878      	ldr	r0, [r7, #4]
 8014f94:	f000 f882 	bl	801509c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8014f98:	e063      	b.n	8015062 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8014f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014fa2:	2b00      	cmp	r3, #0
 8014fa4:	d00e      	beq.n	8014fc4 <HAL_UART_IRQHandler+0x68c>
 8014fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d008      	beq.n	8014fc4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	681b      	ldr	r3, [r3, #0]
 8014fb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8014fba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8014fbc:	6878      	ldr	r0, [r7, #4]
 8014fbe:	f002 f86b 	bl	8017098 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8014fc2:	e051      	b.n	8015068 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8014fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d014      	beq.n	8014ffa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8014fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d105      	bne.n	8014fe8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8014fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d008      	beq.n	8014ffa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d03a      	beq.n	8015066 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ff4:	6878      	ldr	r0, [r7, #4]
 8014ff6:	4798      	blx	r3
    }
    return;
 8014ff8:	e035      	b.n	8015066 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8014ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015002:	2b00      	cmp	r3, #0
 8015004:	d009      	beq.n	801501a <HAL_UART_IRQHandler+0x6e2>
 8015006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801500a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801500e:	2b00      	cmp	r3, #0
 8015010:	d003      	beq.n	801501a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f001 fbb8 	bl	8016788 <UART_EndTransmit_IT>
    return;
 8015018:	e026      	b.n	8015068 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801501a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801501e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015022:	2b00      	cmp	r3, #0
 8015024:	d009      	beq.n	801503a <HAL_UART_IRQHandler+0x702>
 8015026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801502a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801502e:	2b00      	cmp	r3, #0
 8015030:	d003      	beq.n	801503a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f002 f844 	bl	80170c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015038:	e016      	b.n	8015068 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801503a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801503e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015042:	2b00      	cmp	r3, #0
 8015044:	d010      	beq.n	8015068 <HAL_UART_IRQHandler+0x730>
 8015046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801504a:	2b00      	cmp	r3, #0
 801504c:	da0c      	bge.n	8015068 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 801504e:	6878      	ldr	r0, [r7, #4]
 8015050:	f002 f82c 	bl	80170ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8015054:	e008      	b.n	8015068 <HAL_UART_IRQHandler+0x730>
      return;
 8015056:	bf00      	nop
 8015058:	e006      	b.n	8015068 <HAL_UART_IRQHandler+0x730>
    return;
 801505a:	bf00      	nop
 801505c:	e004      	b.n	8015068 <HAL_UART_IRQHandler+0x730>
      return;
 801505e:	bf00      	nop
 8015060:	e002      	b.n	8015068 <HAL_UART_IRQHandler+0x730>
      return;
 8015062:	bf00      	nop
 8015064:	e000      	b.n	8015068 <HAL_UART_IRQHandler+0x730>
    return;
 8015066:	bf00      	nop
  }
}
 8015068:	37e8      	adds	r7, #232	; 0xe8
 801506a:	46bd      	mov	sp, r7
 801506c:	bd80      	pop	{r7, pc}
 801506e:	bf00      	nop
 8015070:	effffffe 	.word	0xeffffffe

08015074 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8015074:	b480      	push	{r7}
 8015076:	b083      	sub	sp, #12
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801507c:	bf00      	nop
 801507e:	370c      	adds	r7, #12
 8015080:	46bd      	mov	sp, r7
 8015082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015086:	4770      	bx	lr

08015088 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8015088:	b480      	push	{r7}
 801508a:	b083      	sub	sp, #12
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8015090:	bf00      	nop
 8015092:	370c      	adds	r7, #12
 8015094:	46bd      	mov	sp, r7
 8015096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801509a:	4770      	bx	lr

0801509c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801509c:	b480      	push	{r7}
 801509e:	b083      	sub	sp, #12
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
 80150a4:	460b      	mov	r3, r1
 80150a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80150a8:	bf00      	nop
 80150aa:	370c      	adds	r7, #12
 80150ac:	46bd      	mov	sp, r7
 80150ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b2:	4770      	bx	lr

080150b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80150b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80150b8:	b092      	sub	sp, #72	; 0x48
 80150ba:	af00      	add	r7, sp, #0
 80150bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80150be:	2300      	movs	r3, #0
 80150c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	689a      	ldr	r2, [r3, #8]
 80150c8:	697b      	ldr	r3, [r7, #20]
 80150ca:	691b      	ldr	r3, [r3, #16]
 80150cc:	431a      	orrs	r2, r3
 80150ce:	697b      	ldr	r3, [r7, #20]
 80150d0:	695b      	ldr	r3, [r3, #20]
 80150d2:	431a      	orrs	r2, r3
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	69db      	ldr	r3, [r3, #28]
 80150d8:	4313      	orrs	r3, r2
 80150da:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80150dc:	697b      	ldr	r3, [r7, #20]
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	681a      	ldr	r2, [r3, #0]
 80150e2:	4bbe      	ldr	r3, [pc, #760]	; (80153dc <UART_SetConfig+0x328>)
 80150e4:	4013      	ands	r3, r2
 80150e6:	697a      	ldr	r2, [r7, #20]
 80150e8:	6812      	ldr	r2, [r2, #0]
 80150ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80150ec:	430b      	orrs	r3, r1
 80150ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80150f0:	697b      	ldr	r3, [r7, #20]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	685b      	ldr	r3, [r3, #4]
 80150f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80150fa:	697b      	ldr	r3, [r7, #20]
 80150fc:	68da      	ldr	r2, [r3, #12]
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	430a      	orrs	r2, r1
 8015104:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8015106:	697b      	ldr	r3, [r7, #20]
 8015108:	699b      	ldr	r3, [r3, #24]
 801510a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801510c:	697b      	ldr	r3, [r7, #20]
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	4ab3      	ldr	r2, [pc, #716]	; (80153e0 <UART_SetConfig+0x32c>)
 8015112:	4293      	cmp	r3, r2
 8015114:	d004      	beq.n	8015120 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	6a1b      	ldr	r3, [r3, #32]
 801511a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801511c:	4313      	orrs	r3, r2
 801511e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	689a      	ldr	r2, [r3, #8]
 8015126:	4baf      	ldr	r3, [pc, #700]	; (80153e4 <UART_SetConfig+0x330>)
 8015128:	4013      	ands	r3, r2
 801512a:	697a      	ldr	r2, [r7, #20]
 801512c:	6812      	ldr	r2, [r2, #0]
 801512e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015130:	430b      	orrs	r3, r1
 8015132:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8015134:	697b      	ldr	r3, [r7, #20]
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801513a:	f023 010f 	bic.w	r1, r3, #15
 801513e:	697b      	ldr	r3, [r7, #20]
 8015140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015142:	697b      	ldr	r3, [r7, #20]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	430a      	orrs	r2, r1
 8015148:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801514a:	697b      	ldr	r3, [r7, #20]
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	4aa6      	ldr	r2, [pc, #664]	; (80153e8 <UART_SetConfig+0x334>)
 8015150:	4293      	cmp	r3, r2
 8015152:	d177      	bne.n	8015244 <UART_SetConfig+0x190>
 8015154:	4ba5      	ldr	r3, [pc, #660]	; (80153ec <UART_SetConfig+0x338>)
 8015156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801515c:	2b28      	cmp	r3, #40	; 0x28
 801515e:	d86d      	bhi.n	801523c <UART_SetConfig+0x188>
 8015160:	a201      	add	r2, pc, #4	; (adr r2, 8015168 <UART_SetConfig+0xb4>)
 8015162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015166:	bf00      	nop
 8015168:	0801520d 	.word	0x0801520d
 801516c:	0801523d 	.word	0x0801523d
 8015170:	0801523d 	.word	0x0801523d
 8015174:	0801523d 	.word	0x0801523d
 8015178:	0801523d 	.word	0x0801523d
 801517c:	0801523d 	.word	0x0801523d
 8015180:	0801523d 	.word	0x0801523d
 8015184:	0801523d 	.word	0x0801523d
 8015188:	08015215 	.word	0x08015215
 801518c:	0801523d 	.word	0x0801523d
 8015190:	0801523d 	.word	0x0801523d
 8015194:	0801523d 	.word	0x0801523d
 8015198:	0801523d 	.word	0x0801523d
 801519c:	0801523d 	.word	0x0801523d
 80151a0:	0801523d 	.word	0x0801523d
 80151a4:	0801523d 	.word	0x0801523d
 80151a8:	0801521d 	.word	0x0801521d
 80151ac:	0801523d 	.word	0x0801523d
 80151b0:	0801523d 	.word	0x0801523d
 80151b4:	0801523d 	.word	0x0801523d
 80151b8:	0801523d 	.word	0x0801523d
 80151bc:	0801523d 	.word	0x0801523d
 80151c0:	0801523d 	.word	0x0801523d
 80151c4:	0801523d 	.word	0x0801523d
 80151c8:	08015225 	.word	0x08015225
 80151cc:	0801523d 	.word	0x0801523d
 80151d0:	0801523d 	.word	0x0801523d
 80151d4:	0801523d 	.word	0x0801523d
 80151d8:	0801523d 	.word	0x0801523d
 80151dc:	0801523d 	.word	0x0801523d
 80151e0:	0801523d 	.word	0x0801523d
 80151e4:	0801523d 	.word	0x0801523d
 80151e8:	0801522d 	.word	0x0801522d
 80151ec:	0801523d 	.word	0x0801523d
 80151f0:	0801523d 	.word	0x0801523d
 80151f4:	0801523d 	.word	0x0801523d
 80151f8:	0801523d 	.word	0x0801523d
 80151fc:	0801523d 	.word	0x0801523d
 8015200:	0801523d 	.word	0x0801523d
 8015204:	0801523d 	.word	0x0801523d
 8015208:	08015235 	.word	0x08015235
 801520c:	2301      	movs	r3, #1
 801520e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015212:	e326      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015214:	2304      	movs	r3, #4
 8015216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801521a:	e322      	b.n	8015862 <UART_SetConfig+0x7ae>
 801521c:	2308      	movs	r3, #8
 801521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015222:	e31e      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015224:	2310      	movs	r3, #16
 8015226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801522a:	e31a      	b.n	8015862 <UART_SetConfig+0x7ae>
 801522c:	2320      	movs	r3, #32
 801522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015232:	e316      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015234:	2340      	movs	r3, #64	; 0x40
 8015236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801523a:	e312      	b.n	8015862 <UART_SetConfig+0x7ae>
 801523c:	2380      	movs	r3, #128	; 0x80
 801523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015242:	e30e      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	4a69      	ldr	r2, [pc, #420]	; (80153f0 <UART_SetConfig+0x33c>)
 801524a:	4293      	cmp	r3, r2
 801524c:	d130      	bne.n	80152b0 <UART_SetConfig+0x1fc>
 801524e:	4b67      	ldr	r3, [pc, #412]	; (80153ec <UART_SetConfig+0x338>)
 8015250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015252:	f003 0307 	and.w	r3, r3, #7
 8015256:	2b05      	cmp	r3, #5
 8015258:	d826      	bhi.n	80152a8 <UART_SetConfig+0x1f4>
 801525a:	a201      	add	r2, pc, #4	; (adr r2, 8015260 <UART_SetConfig+0x1ac>)
 801525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015260:	08015279 	.word	0x08015279
 8015264:	08015281 	.word	0x08015281
 8015268:	08015289 	.word	0x08015289
 801526c:	08015291 	.word	0x08015291
 8015270:	08015299 	.word	0x08015299
 8015274:	080152a1 	.word	0x080152a1
 8015278:	2300      	movs	r3, #0
 801527a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801527e:	e2f0      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015280:	2304      	movs	r3, #4
 8015282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015286:	e2ec      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015288:	2308      	movs	r3, #8
 801528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801528e:	e2e8      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015290:	2310      	movs	r3, #16
 8015292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015296:	e2e4      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015298:	2320      	movs	r3, #32
 801529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801529e:	e2e0      	b.n	8015862 <UART_SetConfig+0x7ae>
 80152a0:	2340      	movs	r3, #64	; 0x40
 80152a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152a6:	e2dc      	b.n	8015862 <UART_SetConfig+0x7ae>
 80152a8:	2380      	movs	r3, #128	; 0x80
 80152aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ae:	e2d8      	b.n	8015862 <UART_SetConfig+0x7ae>
 80152b0:	697b      	ldr	r3, [r7, #20]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	4a4f      	ldr	r2, [pc, #316]	; (80153f4 <UART_SetConfig+0x340>)
 80152b6:	4293      	cmp	r3, r2
 80152b8:	d130      	bne.n	801531c <UART_SetConfig+0x268>
 80152ba:	4b4c      	ldr	r3, [pc, #304]	; (80153ec <UART_SetConfig+0x338>)
 80152bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152be:	f003 0307 	and.w	r3, r3, #7
 80152c2:	2b05      	cmp	r3, #5
 80152c4:	d826      	bhi.n	8015314 <UART_SetConfig+0x260>
 80152c6:	a201      	add	r2, pc, #4	; (adr r2, 80152cc <UART_SetConfig+0x218>)
 80152c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152cc:	080152e5 	.word	0x080152e5
 80152d0:	080152ed 	.word	0x080152ed
 80152d4:	080152f5 	.word	0x080152f5
 80152d8:	080152fd 	.word	0x080152fd
 80152dc:	08015305 	.word	0x08015305
 80152e0:	0801530d 	.word	0x0801530d
 80152e4:	2300      	movs	r3, #0
 80152e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152ea:	e2ba      	b.n	8015862 <UART_SetConfig+0x7ae>
 80152ec:	2304      	movs	r3, #4
 80152ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152f2:	e2b6      	b.n	8015862 <UART_SetConfig+0x7ae>
 80152f4:	2308      	movs	r3, #8
 80152f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80152fa:	e2b2      	b.n	8015862 <UART_SetConfig+0x7ae>
 80152fc:	2310      	movs	r3, #16
 80152fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015302:	e2ae      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015304:	2320      	movs	r3, #32
 8015306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801530a:	e2aa      	b.n	8015862 <UART_SetConfig+0x7ae>
 801530c:	2340      	movs	r3, #64	; 0x40
 801530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015312:	e2a6      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015314:	2380      	movs	r3, #128	; 0x80
 8015316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801531a:	e2a2      	b.n	8015862 <UART_SetConfig+0x7ae>
 801531c:	697b      	ldr	r3, [r7, #20]
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	4a35      	ldr	r2, [pc, #212]	; (80153f8 <UART_SetConfig+0x344>)
 8015322:	4293      	cmp	r3, r2
 8015324:	d130      	bne.n	8015388 <UART_SetConfig+0x2d4>
 8015326:	4b31      	ldr	r3, [pc, #196]	; (80153ec <UART_SetConfig+0x338>)
 8015328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801532a:	f003 0307 	and.w	r3, r3, #7
 801532e:	2b05      	cmp	r3, #5
 8015330:	d826      	bhi.n	8015380 <UART_SetConfig+0x2cc>
 8015332:	a201      	add	r2, pc, #4	; (adr r2, 8015338 <UART_SetConfig+0x284>)
 8015334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015338:	08015351 	.word	0x08015351
 801533c:	08015359 	.word	0x08015359
 8015340:	08015361 	.word	0x08015361
 8015344:	08015369 	.word	0x08015369
 8015348:	08015371 	.word	0x08015371
 801534c:	08015379 	.word	0x08015379
 8015350:	2300      	movs	r3, #0
 8015352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015356:	e284      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015358:	2304      	movs	r3, #4
 801535a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801535e:	e280      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015360:	2308      	movs	r3, #8
 8015362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015366:	e27c      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015368:	2310      	movs	r3, #16
 801536a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801536e:	e278      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015370:	2320      	movs	r3, #32
 8015372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015376:	e274      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015378:	2340      	movs	r3, #64	; 0x40
 801537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801537e:	e270      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015380:	2380      	movs	r3, #128	; 0x80
 8015382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015386:	e26c      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015388:	697b      	ldr	r3, [r7, #20]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	4a1b      	ldr	r2, [pc, #108]	; (80153fc <UART_SetConfig+0x348>)
 801538e:	4293      	cmp	r3, r2
 8015390:	d142      	bne.n	8015418 <UART_SetConfig+0x364>
 8015392:	4b16      	ldr	r3, [pc, #88]	; (80153ec <UART_SetConfig+0x338>)
 8015394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015396:	f003 0307 	and.w	r3, r3, #7
 801539a:	2b05      	cmp	r3, #5
 801539c:	d838      	bhi.n	8015410 <UART_SetConfig+0x35c>
 801539e:	a201      	add	r2, pc, #4	; (adr r2, 80153a4 <UART_SetConfig+0x2f0>)
 80153a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153a4:	080153bd 	.word	0x080153bd
 80153a8:	080153c5 	.word	0x080153c5
 80153ac:	080153cd 	.word	0x080153cd
 80153b0:	080153d5 	.word	0x080153d5
 80153b4:	08015401 	.word	0x08015401
 80153b8:	08015409 	.word	0x08015409
 80153bc:	2300      	movs	r3, #0
 80153be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153c2:	e24e      	b.n	8015862 <UART_SetConfig+0x7ae>
 80153c4:	2304      	movs	r3, #4
 80153c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153ca:	e24a      	b.n	8015862 <UART_SetConfig+0x7ae>
 80153cc:	2308      	movs	r3, #8
 80153ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153d2:	e246      	b.n	8015862 <UART_SetConfig+0x7ae>
 80153d4:	2310      	movs	r3, #16
 80153d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80153da:	e242      	b.n	8015862 <UART_SetConfig+0x7ae>
 80153dc:	cfff69f3 	.word	0xcfff69f3
 80153e0:	58000c00 	.word	0x58000c00
 80153e4:	11fff4ff 	.word	0x11fff4ff
 80153e8:	40011000 	.word	0x40011000
 80153ec:	58024400 	.word	0x58024400
 80153f0:	40004400 	.word	0x40004400
 80153f4:	40004800 	.word	0x40004800
 80153f8:	40004c00 	.word	0x40004c00
 80153fc:	40005000 	.word	0x40005000
 8015400:	2320      	movs	r3, #32
 8015402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015406:	e22c      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015408:	2340      	movs	r3, #64	; 0x40
 801540a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801540e:	e228      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015410:	2380      	movs	r3, #128	; 0x80
 8015412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015416:	e224      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015418:	697b      	ldr	r3, [r7, #20]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	4ab1      	ldr	r2, [pc, #708]	; (80156e4 <UART_SetConfig+0x630>)
 801541e:	4293      	cmp	r3, r2
 8015420:	d176      	bne.n	8015510 <UART_SetConfig+0x45c>
 8015422:	4bb1      	ldr	r3, [pc, #708]	; (80156e8 <UART_SetConfig+0x634>)
 8015424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015426:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801542a:	2b28      	cmp	r3, #40	; 0x28
 801542c:	d86c      	bhi.n	8015508 <UART_SetConfig+0x454>
 801542e:	a201      	add	r2, pc, #4	; (adr r2, 8015434 <UART_SetConfig+0x380>)
 8015430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015434:	080154d9 	.word	0x080154d9
 8015438:	08015509 	.word	0x08015509
 801543c:	08015509 	.word	0x08015509
 8015440:	08015509 	.word	0x08015509
 8015444:	08015509 	.word	0x08015509
 8015448:	08015509 	.word	0x08015509
 801544c:	08015509 	.word	0x08015509
 8015450:	08015509 	.word	0x08015509
 8015454:	080154e1 	.word	0x080154e1
 8015458:	08015509 	.word	0x08015509
 801545c:	08015509 	.word	0x08015509
 8015460:	08015509 	.word	0x08015509
 8015464:	08015509 	.word	0x08015509
 8015468:	08015509 	.word	0x08015509
 801546c:	08015509 	.word	0x08015509
 8015470:	08015509 	.word	0x08015509
 8015474:	080154e9 	.word	0x080154e9
 8015478:	08015509 	.word	0x08015509
 801547c:	08015509 	.word	0x08015509
 8015480:	08015509 	.word	0x08015509
 8015484:	08015509 	.word	0x08015509
 8015488:	08015509 	.word	0x08015509
 801548c:	08015509 	.word	0x08015509
 8015490:	08015509 	.word	0x08015509
 8015494:	080154f1 	.word	0x080154f1
 8015498:	08015509 	.word	0x08015509
 801549c:	08015509 	.word	0x08015509
 80154a0:	08015509 	.word	0x08015509
 80154a4:	08015509 	.word	0x08015509
 80154a8:	08015509 	.word	0x08015509
 80154ac:	08015509 	.word	0x08015509
 80154b0:	08015509 	.word	0x08015509
 80154b4:	080154f9 	.word	0x080154f9
 80154b8:	08015509 	.word	0x08015509
 80154bc:	08015509 	.word	0x08015509
 80154c0:	08015509 	.word	0x08015509
 80154c4:	08015509 	.word	0x08015509
 80154c8:	08015509 	.word	0x08015509
 80154cc:	08015509 	.word	0x08015509
 80154d0:	08015509 	.word	0x08015509
 80154d4:	08015501 	.word	0x08015501
 80154d8:	2301      	movs	r3, #1
 80154da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154de:	e1c0      	b.n	8015862 <UART_SetConfig+0x7ae>
 80154e0:	2304      	movs	r3, #4
 80154e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154e6:	e1bc      	b.n	8015862 <UART_SetConfig+0x7ae>
 80154e8:	2308      	movs	r3, #8
 80154ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154ee:	e1b8      	b.n	8015862 <UART_SetConfig+0x7ae>
 80154f0:	2310      	movs	r3, #16
 80154f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154f6:	e1b4      	b.n	8015862 <UART_SetConfig+0x7ae>
 80154f8:	2320      	movs	r3, #32
 80154fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154fe:	e1b0      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015500:	2340      	movs	r3, #64	; 0x40
 8015502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015506:	e1ac      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015508:	2380      	movs	r3, #128	; 0x80
 801550a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801550e:	e1a8      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015510:	697b      	ldr	r3, [r7, #20]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	4a75      	ldr	r2, [pc, #468]	; (80156ec <UART_SetConfig+0x638>)
 8015516:	4293      	cmp	r3, r2
 8015518:	d130      	bne.n	801557c <UART_SetConfig+0x4c8>
 801551a:	4b73      	ldr	r3, [pc, #460]	; (80156e8 <UART_SetConfig+0x634>)
 801551c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801551e:	f003 0307 	and.w	r3, r3, #7
 8015522:	2b05      	cmp	r3, #5
 8015524:	d826      	bhi.n	8015574 <UART_SetConfig+0x4c0>
 8015526:	a201      	add	r2, pc, #4	; (adr r2, 801552c <UART_SetConfig+0x478>)
 8015528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801552c:	08015545 	.word	0x08015545
 8015530:	0801554d 	.word	0x0801554d
 8015534:	08015555 	.word	0x08015555
 8015538:	0801555d 	.word	0x0801555d
 801553c:	08015565 	.word	0x08015565
 8015540:	0801556d 	.word	0x0801556d
 8015544:	2300      	movs	r3, #0
 8015546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801554a:	e18a      	b.n	8015862 <UART_SetConfig+0x7ae>
 801554c:	2304      	movs	r3, #4
 801554e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015552:	e186      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015554:	2308      	movs	r3, #8
 8015556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801555a:	e182      	b.n	8015862 <UART_SetConfig+0x7ae>
 801555c:	2310      	movs	r3, #16
 801555e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015562:	e17e      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015564:	2320      	movs	r3, #32
 8015566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801556a:	e17a      	b.n	8015862 <UART_SetConfig+0x7ae>
 801556c:	2340      	movs	r3, #64	; 0x40
 801556e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015572:	e176      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015574:	2380      	movs	r3, #128	; 0x80
 8015576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801557a:	e172      	b.n	8015862 <UART_SetConfig+0x7ae>
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	4a5b      	ldr	r2, [pc, #364]	; (80156f0 <UART_SetConfig+0x63c>)
 8015582:	4293      	cmp	r3, r2
 8015584:	d130      	bne.n	80155e8 <UART_SetConfig+0x534>
 8015586:	4b58      	ldr	r3, [pc, #352]	; (80156e8 <UART_SetConfig+0x634>)
 8015588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801558a:	f003 0307 	and.w	r3, r3, #7
 801558e:	2b05      	cmp	r3, #5
 8015590:	d826      	bhi.n	80155e0 <UART_SetConfig+0x52c>
 8015592:	a201      	add	r2, pc, #4	; (adr r2, 8015598 <UART_SetConfig+0x4e4>)
 8015594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015598:	080155b1 	.word	0x080155b1
 801559c:	080155b9 	.word	0x080155b9
 80155a0:	080155c1 	.word	0x080155c1
 80155a4:	080155c9 	.word	0x080155c9
 80155a8:	080155d1 	.word	0x080155d1
 80155ac:	080155d9 	.word	0x080155d9
 80155b0:	2300      	movs	r3, #0
 80155b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155b6:	e154      	b.n	8015862 <UART_SetConfig+0x7ae>
 80155b8:	2304      	movs	r3, #4
 80155ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155be:	e150      	b.n	8015862 <UART_SetConfig+0x7ae>
 80155c0:	2308      	movs	r3, #8
 80155c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155c6:	e14c      	b.n	8015862 <UART_SetConfig+0x7ae>
 80155c8:	2310      	movs	r3, #16
 80155ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155ce:	e148      	b.n	8015862 <UART_SetConfig+0x7ae>
 80155d0:	2320      	movs	r3, #32
 80155d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155d6:	e144      	b.n	8015862 <UART_SetConfig+0x7ae>
 80155d8:	2340      	movs	r3, #64	; 0x40
 80155da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155de:	e140      	b.n	8015862 <UART_SetConfig+0x7ae>
 80155e0:	2380      	movs	r3, #128	; 0x80
 80155e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80155e6:	e13c      	b.n	8015862 <UART_SetConfig+0x7ae>
 80155e8:	697b      	ldr	r3, [r7, #20]
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	4a41      	ldr	r2, [pc, #260]	; (80156f4 <UART_SetConfig+0x640>)
 80155ee:	4293      	cmp	r3, r2
 80155f0:	f040 8082 	bne.w	80156f8 <UART_SetConfig+0x644>
 80155f4:	4b3c      	ldr	r3, [pc, #240]	; (80156e8 <UART_SetConfig+0x634>)
 80155f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155f8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80155fc:	2b28      	cmp	r3, #40	; 0x28
 80155fe:	d86d      	bhi.n	80156dc <UART_SetConfig+0x628>
 8015600:	a201      	add	r2, pc, #4	; (adr r2, 8015608 <UART_SetConfig+0x554>)
 8015602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015606:	bf00      	nop
 8015608:	080156ad 	.word	0x080156ad
 801560c:	080156dd 	.word	0x080156dd
 8015610:	080156dd 	.word	0x080156dd
 8015614:	080156dd 	.word	0x080156dd
 8015618:	080156dd 	.word	0x080156dd
 801561c:	080156dd 	.word	0x080156dd
 8015620:	080156dd 	.word	0x080156dd
 8015624:	080156dd 	.word	0x080156dd
 8015628:	080156b5 	.word	0x080156b5
 801562c:	080156dd 	.word	0x080156dd
 8015630:	080156dd 	.word	0x080156dd
 8015634:	080156dd 	.word	0x080156dd
 8015638:	080156dd 	.word	0x080156dd
 801563c:	080156dd 	.word	0x080156dd
 8015640:	080156dd 	.word	0x080156dd
 8015644:	080156dd 	.word	0x080156dd
 8015648:	080156bd 	.word	0x080156bd
 801564c:	080156dd 	.word	0x080156dd
 8015650:	080156dd 	.word	0x080156dd
 8015654:	080156dd 	.word	0x080156dd
 8015658:	080156dd 	.word	0x080156dd
 801565c:	080156dd 	.word	0x080156dd
 8015660:	080156dd 	.word	0x080156dd
 8015664:	080156dd 	.word	0x080156dd
 8015668:	080156c5 	.word	0x080156c5
 801566c:	080156dd 	.word	0x080156dd
 8015670:	080156dd 	.word	0x080156dd
 8015674:	080156dd 	.word	0x080156dd
 8015678:	080156dd 	.word	0x080156dd
 801567c:	080156dd 	.word	0x080156dd
 8015680:	080156dd 	.word	0x080156dd
 8015684:	080156dd 	.word	0x080156dd
 8015688:	080156cd 	.word	0x080156cd
 801568c:	080156dd 	.word	0x080156dd
 8015690:	080156dd 	.word	0x080156dd
 8015694:	080156dd 	.word	0x080156dd
 8015698:	080156dd 	.word	0x080156dd
 801569c:	080156dd 	.word	0x080156dd
 80156a0:	080156dd 	.word	0x080156dd
 80156a4:	080156dd 	.word	0x080156dd
 80156a8:	080156d5 	.word	0x080156d5
 80156ac:	2301      	movs	r3, #1
 80156ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156b2:	e0d6      	b.n	8015862 <UART_SetConfig+0x7ae>
 80156b4:	2304      	movs	r3, #4
 80156b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156ba:	e0d2      	b.n	8015862 <UART_SetConfig+0x7ae>
 80156bc:	2308      	movs	r3, #8
 80156be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156c2:	e0ce      	b.n	8015862 <UART_SetConfig+0x7ae>
 80156c4:	2310      	movs	r3, #16
 80156c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156ca:	e0ca      	b.n	8015862 <UART_SetConfig+0x7ae>
 80156cc:	2320      	movs	r3, #32
 80156ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156d2:	e0c6      	b.n	8015862 <UART_SetConfig+0x7ae>
 80156d4:	2340      	movs	r3, #64	; 0x40
 80156d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156da:	e0c2      	b.n	8015862 <UART_SetConfig+0x7ae>
 80156dc:	2380      	movs	r3, #128	; 0x80
 80156de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80156e2:	e0be      	b.n	8015862 <UART_SetConfig+0x7ae>
 80156e4:	40011400 	.word	0x40011400
 80156e8:	58024400 	.word	0x58024400
 80156ec:	40007800 	.word	0x40007800
 80156f0:	40007c00 	.word	0x40007c00
 80156f4:	40011800 	.word	0x40011800
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	4aad      	ldr	r2, [pc, #692]	; (80159b4 <UART_SetConfig+0x900>)
 80156fe:	4293      	cmp	r3, r2
 8015700:	d176      	bne.n	80157f0 <UART_SetConfig+0x73c>
 8015702:	4bad      	ldr	r3, [pc, #692]	; (80159b8 <UART_SetConfig+0x904>)
 8015704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801570a:	2b28      	cmp	r3, #40	; 0x28
 801570c:	d86c      	bhi.n	80157e8 <UART_SetConfig+0x734>
 801570e:	a201      	add	r2, pc, #4	; (adr r2, 8015714 <UART_SetConfig+0x660>)
 8015710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015714:	080157b9 	.word	0x080157b9
 8015718:	080157e9 	.word	0x080157e9
 801571c:	080157e9 	.word	0x080157e9
 8015720:	080157e9 	.word	0x080157e9
 8015724:	080157e9 	.word	0x080157e9
 8015728:	080157e9 	.word	0x080157e9
 801572c:	080157e9 	.word	0x080157e9
 8015730:	080157e9 	.word	0x080157e9
 8015734:	080157c1 	.word	0x080157c1
 8015738:	080157e9 	.word	0x080157e9
 801573c:	080157e9 	.word	0x080157e9
 8015740:	080157e9 	.word	0x080157e9
 8015744:	080157e9 	.word	0x080157e9
 8015748:	080157e9 	.word	0x080157e9
 801574c:	080157e9 	.word	0x080157e9
 8015750:	080157e9 	.word	0x080157e9
 8015754:	080157c9 	.word	0x080157c9
 8015758:	080157e9 	.word	0x080157e9
 801575c:	080157e9 	.word	0x080157e9
 8015760:	080157e9 	.word	0x080157e9
 8015764:	080157e9 	.word	0x080157e9
 8015768:	080157e9 	.word	0x080157e9
 801576c:	080157e9 	.word	0x080157e9
 8015770:	080157e9 	.word	0x080157e9
 8015774:	080157d1 	.word	0x080157d1
 8015778:	080157e9 	.word	0x080157e9
 801577c:	080157e9 	.word	0x080157e9
 8015780:	080157e9 	.word	0x080157e9
 8015784:	080157e9 	.word	0x080157e9
 8015788:	080157e9 	.word	0x080157e9
 801578c:	080157e9 	.word	0x080157e9
 8015790:	080157e9 	.word	0x080157e9
 8015794:	080157d9 	.word	0x080157d9
 8015798:	080157e9 	.word	0x080157e9
 801579c:	080157e9 	.word	0x080157e9
 80157a0:	080157e9 	.word	0x080157e9
 80157a4:	080157e9 	.word	0x080157e9
 80157a8:	080157e9 	.word	0x080157e9
 80157ac:	080157e9 	.word	0x080157e9
 80157b0:	080157e9 	.word	0x080157e9
 80157b4:	080157e1 	.word	0x080157e1
 80157b8:	2301      	movs	r3, #1
 80157ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157be:	e050      	b.n	8015862 <UART_SetConfig+0x7ae>
 80157c0:	2304      	movs	r3, #4
 80157c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157c6:	e04c      	b.n	8015862 <UART_SetConfig+0x7ae>
 80157c8:	2308      	movs	r3, #8
 80157ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157ce:	e048      	b.n	8015862 <UART_SetConfig+0x7ae>
 80157d0:	2310      	movs	r3, #16
 80157d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157d6:	e044      	b.n	8015862 <UART_SetConfig+0x7ae>
 80157d8:	2320      	movs	r3, #32
 80157da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157de:	e040      	b.n	8015862 <UART_SetConfig+0x7ae>
 80157e0:	2340      	movs	r3, #64	; 0x40
 80157e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157e6:	e03c      	b.n	8015862 <UART_SetConfig+0x7ae>
 80157e8:	2380      	movs	r3, #128	; 0x80
 80157ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80157ee:	e038      	b.n	8015862 <UART_SetConfig+0x7ae>
 80157f0:	697b      	ldr	r3, [r7, #20]
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	4a71      	ldr	r2, [pc, #452]	; (80159bc <UART_SetConfig+0x908>)
 80157f6:	4293      	cmp	r3, r2
 80157f8:	d130      	bne.n	801585c <UART_SetConfig+0x7a8>
 80157fa:	4b6f      	ldr	r3, [pc, #444]	; (80159b8 <UART_SetConfig+0x904>)
 80157fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80157fe:	f003 0307 	and.w	r3, r3, #7
 8015802:	2b05      	cmp	r3, #5
 8015804:	d826      	bhi.n	8015854 <UART_SetConfig+0x7a0>
 8015806:	a201      	add	r2, pc, #4	; (adr r2, 801580c <UART_SetConfig+0x758>)
 8015808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801580c:	08015825 	.word	0x08015825
 8015810:	0801582d 	.word	0x0801582d
 8015814:	08015835 	.word	0x08015835
 8015818:	0801583d 	.word	0x0801583d
 801581c:	08015845 	.word	0x08015845
 8015820:	0801584d 	.word	0x0801584d
 8015824:	2302      	movs	r3, #2
 8015826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801582a:	e01a      	b.n	8015862 <UART_SetConfig+0x7ae>
 801582c:	2304      	movs	r3, #4
 801582e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015832:	e016      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015834:	2308      	movs	r3, #8
 8015836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801583a:	e012      	b.n	8015862 <UART_SetConfig+0x7ae>
 801583c:	2310      	movs	r3, #16
 801583e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015842:	e00e      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015844:	2320      	movs	r3, #32
 8015846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801584a:	e00a      	b.n	8015862 <UART_SetConfig+0x7ae>
 801584c:	2340      	movs	r3, #64	; 0x40
 801584e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8015852:	e006      	b.n	8015862 <UART_SetConfig+0x7ae>
 8015854:	2380      	movs	r3, #128	; 0x80
 8015856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801585a:	e002      	b.n	8015862 <UART_SetConfig+0x7ae>
 801585c:	2380      	movs	r3, #128	; 0x80
 801585e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	4a55      	ldr	r2, [pc, #340]	; (80159bc <UART_SetConfig+0x908>)
 8015868:	4293      	cmp	r3, r2
 801586a:	f040 80f8 	bne.w	8015a5e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801586e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015872:	2b20      	cmp	r3, #32
 8015874:	dc46      	bgt.n	8015904 <UART_SetConfig+0x850>
 8015876:	2b02      	cmp	r3, #2
 8015878:	db75      	blt.n	8015966 <UART_SetConfig+0x8b2>
 801587a:	3b02      	subs	r3, #2
 801587c:	2b1e      	cmp	r3, #30
 801587e:	d872      	bhi.n	8015966 <UART_SetConfig+0x8b2>
 8015880:	a201      	add	r2, pc, #4	; (adr r2, 8015888 <UART_SetConfig+0x7d4>)
 8015882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015886:	bf00      	nop
 8015888:	0801590b 	.word	0x0801590b
 801588c:	08015967 	.word	0x08015967
 8015890:	08015913 	.word	0x08015913
 8015894:	08015967 	.word	0x08015967
 8015898:	08015967 	.word	0x08015967
 801589c:	08015967 	.word	0x08015967
 80158a0:	08015923 	.word	0x08015923
 80158a4:	08015967 	.word	0x08015967
 80158a8:	08015967 	.word	0x08015967
 80158ac:	08015967 	.word	0x08015967
 80158b0:	08015967 	.word	0x08015967
 80158b4:	08015967 	.word	0x08015967
 80158b8:	08015967 	.word	0x08015967
 80158bc:	08015967 	.word	0x08015967
 80158c0:	08015933 	.word	0x08015933
 80158c4:	08015967 	.word	0x08015967
 80158c8:	08015967 	.word	0x08015967
 80158cc:	08015967 	.word	0x08015967
 80158d0:	08015967 	.word	0x08015967
 80158d4:	08015967 	.word	0x08015967
 80158d8:	08015967 	.word	0x08015967
 80158dc:	08015967 	.word	0x08015967
 80158e0:	08015967 	.word	0x08015967
 80158e4:	08015967 	.word	0x08015967
 80158e8:	08015967 	.word	0x08015967
 80158ec:	08015967 	.word	0x08015967
 80158f0:	08015967 	.word	0x08015967
 80158f4:	08015967 	.word	0x08015967
 80158f8:	08015967 	.word	0x08015967
 80158fc:	08015967 	.word	0x08015967
 8015900:	08015959 	.word	0x08015959
 8015904:	2b40      	cmp	r3, #64	; 0x40
 8015906:	d02a      	beq.n	801595e <UART_SetConfig+0x8aa>
 8015908:	e02d      	b.n	8015966 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801590a:	f7fb f933 	bl	8010b74 <HAL_RCCEx_GetD3PCLK1Freq>
 801590e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015910:	e02f      	b.n	8015972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015912:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015916:	4618      	mov	r0, r3
 8015918:	f7fb f942 	bl	8010ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801591c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801591e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015920:	e027      	b.n	8015972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015922:	f107 0318 	add.w	r3, r7, #24
 8015926:	4618      	mov	r0, r3
 8015928:	f7fb fa8e 	bl	8010e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801592c:	69fb      	ldr	r3, [r7, #28]
 801592e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015930:	e01f      	b.n	8015972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015932:	4b21      	ldr	r3, [pc, #132]	; (80159b8 <UART_SetConfig+0x904>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	f003 0320 	and.w	r3, r3, #32
 801593a:	2b00      	cmp	r3, #0
 801593c:	d009      	beq.n	8015952 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801593e:	4b1e      	ldr	r3, [pc, #120]	; (80159b8 <UART_SetConfig+0x904>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	08db      	lsrs	r3, r3, #3
 8015944:	f003 0303 	and.w	r3, r3, #3
 8015948:	4a1d      	ldr	r2, [pc, #116]	; (80159c0 <UART_SetConfig+0x90c>)
 801594a:	fa22 f303 	lsr.w	r3, r2, r3
 801594e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015950:	e00f      	b.n	8015972 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8015952:	4b1b      	ldr	r3, [pc, #108]	; (80159c0 <UART_SetConfig+0x90c>)
 8015954:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015956:	e00c      	b.n	8015972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015958:	4b1a      	ldr	r3, [pc, #104]	; (80159c4 <UART_SetConfig+0x910>)
 801595a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801595c:	e009      	b.n	8015972 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801595e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015964:	e005      	b.n	8015972 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8015966:	2300      	movs	r3, #0
 8015968:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801596a:	2301      	movs	r3, #1
 801596c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015970:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015974:	2b00      	cmp	r3, #0
 8015976:	f000 81ee 	beq.w	8015d56 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801597a:	697b      	ldr	r3, [r7, #20]
 801597c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801597e:	4a12      	ldr	r2, [pc, #72]	; (80159c8 <UART_SetConfig+0x914>)
 8015980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015984:	461a      	mov	r2, r3
 8015986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015988:	fbb3 f3f2 	udiv	r3, r3, r2
 801598c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	685a      	ldr	r2, [r3, #4]
 8015992:	4613      	mov	r3, r2
 8015994:	005b      	lsls	r3, r3, #1
 8015996:	4413      	add	r3, r2
 8015998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801599a:	429a      	cmp	r2, r3
 801599c:	d305      	bcc.n	80159aa <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801599e:	697b      	ldr	r3, [r7, #20]
 80159a0:	685b      	ldr	r3, [r3, #4]
 80159a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80159a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159a6:	429a      	cmp	r2, r3
 80159a8:	d910      	bls.n	80159cc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80159aa:	2301      	movs	r3, #1
 80159ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80159b0:	e1d1      	b.n	8015d56 <UART_SetConfig+0xca2>
 80159b2:	bf00      	nop
 80159b4:	40011c00 	.word	0x40011c00
 80159b8:	58024400 	.word	0x58024400
 80159bc:	58000c00 	.word	0x58000c00
 80159c0:	03d09000 	.word	0x03d09000
 80159c4:	003d0900 	.word	0x003d0900
 80159c8:	08018430 	.word	0x08018430
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80159cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159ce:	2200      	movs	r2, #0
 80159d0:	60bb      	str	r3, [r7, #8]
 80159d2:	60fa      	str	r2, [r7, #12]
 80159d4:	697b      	ldr	r3, [r7, #20]
 80159d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d8:	4ac0      	ldr	r2, [pc, #768]	; (8015cdc <UART_SetConfig+0xc28>)
 80159da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80159de:	b29b      	uxth	r3, r3
 80159e0:	2200      	movs	r2, #0
 80159e2:	603b      	str	r3, [r7, #0]
 80159e4:	607a      	str	r2, [r7, #4]
 80159e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80159ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80159ee:	f7ea fc8f 	bl	8000310 <__aeabi_uldivmod>
 80159f2:	4602      	mov	r2, r0
 80159f4:	460b      	mov	r3, r1
 80159f6:	4610      	mov	r0, r2
 80159f8:	4619      	mov	r1, r3
 80159fa:	f04f 0200 	mov.w	r2, #0
 80159fe:	f04f 0300 	mov.w	r3, #0
 8015a02:	020b      	lsls	r3, r1, #8
 8015a04:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8015a08:	0202      	lsls	r2, r0, #8
 8015a0a:	6979      	ldr	r1, [r7, #20]
 8015a0c:	6849      	ldr	r1, [r1, #4]
 8015a0e:	0849      	lsrs	r1, r1, #1
 8015a10:	2000      	movs	r0, #0
 8015a12:	460c      	mov	r4, r1
 8015a14:	4605      	mov	r5, r0
 8015a16:	eb12 0804 	adds.w	r8, r2, r4
 8015a1a:	eb43 0905 	adc.w	r9, r3, r5
 8015a1e:	697b      	ldr	r3, [r7, #20]
 8015a20:	685b      	ldr	r3, [r3, #4]
 8015a22:	2200      	movs	r2, #0
 8015a24:	469a      	mov	sl, r3
 8015a26:	4693      	mov	fp, r2
 8015a28:	4652      	mov	r2, sl
 8015a2a:	465b      	mov	r3, fp
 8015a2c:	4640      	mov	r0, r8
 8015a2e:	4649      	mov	r1, r9
 8015a30:	f7ea fc6e 	bl	8000310 <__aeabi_uldivmod>
 8015a34:	4602      	mov	r2, r0
 8015a36:	460b      	mov	r3, r1
 8015a38:	4613      	mov	r3, r2
 8015a3a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015a42:	d308      	bcc.n	8015a56 <UART_SetConfig+0x9a2>
 8015a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015a4a:	d204      	bcs.n	8015a56 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8015a4c:	697b      	ldr	r3, [r7, #20]
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a52:	60da      	str	r2, [r3, #12]
 8015a54:	e17f      	b.n	8015d56 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8015a56:	2301      	movs	r3, #1
 8015a58:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015a5c:	e17b      	b.n	8015d56 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015a5e:	697b      	ldr	r3, [r7, #20]
 8015a60:	69db      	ldr	r3, [r3, #28]
 8015a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015a66:	f040 80bd 	bne.w	8015be4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8015a6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015a6e:	2b20      	cmp	r3, #32
 8015a70:	dc48      	bgt.n	8015b04 <UART_SetConfig+0xa50>
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	db7b      	blt.n	8015b6e <UART_SetConfig+0xaba>
 8015a76:	2b20      	cmp	r3, #32
 8015a78:	d879      	bhi.n	8015b6e <UART_SetConfig+0xaba>
 8015a7a:	a201      	add	r2, pc, #4	; (adr r2, 8015a80 <UART_SetConfig+0x9cc>)
 8015a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015a80:	08015b0b 	.word	0x08015b0b
 8015a84:	08015b13 	.word	0x08015b13
 8015a88:	08015b6f 	.word	0x08015b6f
 8015a8c:	08015b6f 	.word	0x08015b6f
 8015a90:	08015b1b 	.word	0x08015b1b
 8015a94:	08015b6f 	.word	0x08015b6f
 8015a98:	08015b6f 	.word	0x08015b6f
 8015a9c:	08015b6f 	.word	0x08015b6f
 8015aa0:	08015b2b 	.word	0x08015b2b
 8015aa4:	08015b6f 	.word	0x08015b6f
 8015aa8:	08015b6f 	.word	0x08015b6f
 8015aac:	08015b6f 	.word	0x08015b6f
 8015ab0:	08015b6f 	.word	0x08015b6f
 8015ab4:	08015b6f 	.word	0x08015b6f
 8015ab8:	08015b6f 	.word	0x08015b6f
 8015abc:	08015b6f 	.word	0x08015b6f
 8015ac0:	08015b3b 	.word	0x08015b3b
 8015ac4:	08015b6f 	.word	0x08015b6f
 8015ac8:	08015b6f 	.word	0x08015b6f
 8015acc:	08015b6f 	.word	0x08015b6f
 8015ad0:	08015b6f 	.word	0x08015b6f
 8015ad4:	08015b6f 	.word	0x08015b6f
 8015ad8:	08015b6f 	.word	0x08015b6f
 8015adc:	08015b6f 	.word	0x08015b6f
 8015ae0:	08015b6f 	.word	0x08015b6f
 8015ae4:	08015b6f 	.word	0x08015b6f
 8015ae8:	08015b6f 	.word	0x08015b6f
 8015aec:	08015b6f 	.word	0x08015b6f
 8015af0:	08015b6f 	.word	0x08015b6f
 8015af4:	08015b6f 	.word	0x08015b6f
 8015af8:	08015b6f 	.word	0x08015b6f
 8015afc:	08015b6f 	.word	0x08015b6f
 8015b00:	08015b61 	.word	0x08015b61
 8015b04:	2b40      	cmp	r3, #64	; 0x40
 8015b06:	d02e      	beq.n	8015b66 <UART_SetConfig+0xab2>
 8015b08:	e031      	b.n	8015b6e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015b0a:	f7f9 fce7 	bl	800f4dc <HAL_RCC_GetPCLK1Freq>
 8015b0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015b10:	e033      	b.n	8015b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015b12:	f7f9 fcf9 	bl	800f508 <HAL_RCC_GetPCLK2Freq>
 8015b16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015b18:	e02f      	b.n	8015b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015b1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f7fb f83e 	bl	8010ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b28:	e027      	b.n	8015b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015b2a:	f107 0318 	add.w	r3, r7, #24
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f7fb f98a 	bl	8010e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015b34:	69fb      	ldr	r3, [r7, #28]
 8015b36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b38:	e01f      	b.n	8015b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015b3a:	4b69      	ldr	r3, [pc, #420]	; (8015ce0 <UART_SetConfig+0xc2c>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	f003 0320 	and.w	r3, r3, #32
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d009      	beq.n	8015b5a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015b46:	4b66      	ldr	r3, [pc, #408]	; (8015ce0 <UART_SetConfig+0xc2c>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	08db      	lsrs	r3, r3, #3
 8015b4c:	f003 0303 	and.w	r3, r3, #3
 8015b50:	4a64      	ldr	r2, [pc, #400]	; (8015ce4 <UART_SetConfig+0xc30>)
 8015b52:	fa22 f303 	lsr.w	r3, r2, r3
 8015b56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015b58:	e00f      	b.n	8015b7a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8015b5a:	4b62      	ldr	r3, [pc, #392]	; (8015ce4 <UART_SetConfig+0xc30>)
 8015b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b5e:	e00c      	b.n	8015b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015b60:	4b61      	ldr	r3, [pc, #388]	; (8015ce8 <UART_SetConfig+0xc34>)
 8015b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b64:	e009      	b.n	8015b7a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015b6c:	e005      	b.n	8015b7a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8015b6e:	2300      	movs	r3, #0
 8015b70:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015b72:	2301      	movs	r3, #1
 8015b74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015b78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8015b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	f000 80ea 	beq.w	8015d56 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b86:	4a55      	ldr	r2, [pc, #340]	; (8015cdc <UART_SetConfig+0xc28>)
 8015b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015b8c:	461a      	mov	r2, r3
 8015b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b90:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b94:	005a      	lsls	r2, r3, #1
 8015b96:	697b      	ldr	r3, [r7, #20]
 8015b98:	685b      	ldr	r3, [r3, #4]
 8015b9a:	085b      	lsrs	r3, r3, #1
 8015b9c:	441a      	add	r2, r3
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	685b      	ldr	r3, [r3, #4]
 8015ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8015ba6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015baa:	2b0f      	cmp	r3, #15
 8015bac:	d916      	bls.n	8015bdc <UART_SetConfig+0xb28>
 8015bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015bb4:	d212      	bcs.n	8015bdc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8015bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bb8:	b29b      	uxth	r3, r3
 8015bba:	f023 030f 	bic.w	r3, r3, #15
 8015bbe:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bc2:	085b      	lsrs	r3, r3, #1
 8015bc4:	b29b      	uxth	r3, r3
 8015bc6:	f003 0307 	and.w	r3, r3, #7
 8015bca:	b29a      	uxth	r2, r3
 8015bcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015bce:	4313      	orrs	r3, r2
 8015bd0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8015bd2:	697b      	ldr	r3, [r7, #20]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015bd8:	60da      	str	r2, [r3, #12]
 8015bda:	e0bc      	b.n	8015d56 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8015bdc:	2301      	movs	r3, #1
 8015bde:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8015be2:	e0b8      	b.n	8015d56 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8015be4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8015be8:	2b20      	cmp	r3, #32
 8015bea:	dc4b      	bgt.n	8015c84 <UART_SetConfig+0xbd0>
 8015bec:	2b00      	cmp	r3, #0
 8015bee:	f2c0 8087 	blt.w	8015d00 <UART_SetConfig+0xc4c>
 8015bf2:	2b20      	cmp	r3, #32
 8015bf4:	f200 8084 	bhi.w	8015d00 <UART_SetConfig+0xc4c>
 8015bf8:	a201      	add	r2, pc, #4	; (adr r2, 8015c00 <UART_SetConfig+0xb4c>)
 8015bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bfe:	bf00      	nop
 8015c00:	08015c8b 	.word	0x08015c8b
 8015c04:	08015c93 	.word	0x08015c93
 8015c08:	08015d01 	.word	0x08015d01
 8015c0c:	08015d01 	.word	0x08015d01
 8015c10:	08015c9b 	.word	0x08015c9b
 8015c14:	08015d01 	.word	0x08015d01
 8015c18:	08015d01 	.word	0x08015d01
 8015c1c:	08015d01 	.word	0x08015d01
 8015c20:	08015cab 	.word	0x08015cab
 8015c24:	08015d01 	.word	0x08015d01
 8015c28:	08015d01 	.word	0x08015d01
 8015c2c:	08015d01 	.word	0x08015d01
 8015c30:	08015d01 	.word	0x08015d01
 8015c34:	08015d01 	.word	0x08015d01
 8015c38:	08015d01 	.word	0x08015d01
 8015c3c:	08015d01 	.word	0x08015d01
 8015c40:	08015cbb 	.word	0x08015cbb
 8015c44:	08015d01 	.word	0x08015d01
 8015c48:	08015d01 	.word	0x08015d01
 8015c4c:	08015d01 	.word	0x08015d01
 8015c50:	08015d01 	.word	0x08015d01
 8015c54:	08015d01 	.word	0x08015d01
 8015c58:	08015d01 	.word	0x08015d01
 8015c5c:	08015d01 	.word	0x08015d01
 8015c60:	08015d01 	.word	0x08015d01
 8015c64:	08015d01 	.word	0x08015d01
 8015c68:	08015d01 	.word	0x08015d01
 8015c6c:	08015d01 	.word	0x08015d01
 8015c70:	08015d01 	.word	0x08015d01
 8015c74:	08015d01 	.word	0x08015d01
 8015c78:	08015d01 	.word	0x08015d01
 8015c7c:	08015d01 	.word	0x08015d01
 8015c80:	08015cf3 	.word	0x08015cf3
 8015c84:	2b40      	cmp	r3, #64	; 0x40
 8015c86:	d037      	beq.n	8015cf8 <UART_SetConfig+0xc44>
 8015c88:	e03a      	b.n	8015d00 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8015c8a:	f7f9 fc27 	bl	800f4dc <HAL_RCC_GetPCLK1Freq>
 8015c8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015c90:	e03c      	b.n	8015d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015c92:	f7f9 fc39 	bl	800f508 <HAL_RCC_GetPCLK2Freq>
 8015c96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8015c98:	e038      	b.n	8015d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8015c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7fa ff7e 	bl	8010ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015ca8:	e030      	b.n	8015d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8015caa:	f107 0318 	add.w	r3, r7, #24
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7fb f8ca 	bl	8010e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015cb4:	69fb      	ldr	r3, [r7, #28]
 8015cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015cb8:	e028      	b.n	8015d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015cba:	4b09      	ldr	r3, [pc, #36]	; (8015ce0 <UART_SetConfig+0xc2c>)
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	f003 0320 	and.w	r3, r3, #32
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d012      	beq.n	8015cec <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015cc6:	4b06      	ldr	r3, [pc, #24]	; (8015ce0 <UART_SetConfig+0xc2c>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	08db      	lsrs	r3, r3, #3
 8015ccc:	f003 0303 	and.w	r3, r3, #3
 8015cd0:	4a04      	ldr	r2, [pc, #16]	; (8015ce4 <UART_SetConfig+0xc30>)
 8015cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8015cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015cd8:	e018      	b.n	8015d0c <UART_SetConfig+0xc58>
 8015cda:	bf00      	nop
 8015cdc:	08018430 	.word	0x08018430
 8015ce0:	58024400 	.word	0x58024400
 8015ce4:	03d09000 	.word	0x03d09000
 8015ce8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8015cec:	4b24      	ldr	r3, [pc, #144]	; (8015d80 <UART_SetConfig+0xccc>)
 8015cee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015cf0:	e00c      	b.n	8015d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015cf2:	4b24      	ldr	r3, [pc, #144]	; (8015d84 <UART_SetConfig+0xcd0>)
 8015cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015cf6:	e009      	b.n	8015d0c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8015cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8015cfe:	e005      	b.n	8015d0c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8015d00:	2300      	movs	r3, #0
 8015d02:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8015d04:	2301      	movs	r3, #1
 8015d06:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8015d0a:	bf00      	nop
    }

    if (pclk != 0U)
 8015d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d021      	beq.n	8015d56 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d16:	4a1c      	ldr	r2, [pc, #112]	; (8015d88 <UART_SetConfig+0xcd4>)
 8015d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015d1c:	461a      	mov	r2, r3
 8015d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015d20:	fbb3 f2f2 	udiv	r2, r3, r2
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	685b      	ldr	r3, [r3, #4]
 8015d28:	085b      	lsrs	r3, r3, #1
 8015d2a:	441a      	add	r2, r3
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	685b      	ldr	r3, [r3, #4]
 8015d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8015d34:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8015d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d38:	2b0f      	cmp	r3, #15
 8015d3a:	d909      	bls.n	8015d50 <UART_SetConfig+0xc9c>
 8015d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d42:	d205      	bcs.n	8015d50 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d46:	b29a      	uxth	r2, r3
 8015d48:	697b      	ldr	r3, [r7, #20]
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	60da      	str	r2, [r3, #12]
 8015d4e:	e002      	b.n	8015d56 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8015d50:	2301      	movs	r3, #1
 8015d52:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015d56:	697b      	ldr	r3, [r7, #20]
 8015d58:	2201      	movs	r2, #1
 8015d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8015d5e:	697b      	ldr	r3, [r7, #20]
 8015d60:	2201      	movs	r2, #1
 8015d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015d66:	697b      	ldr	r3, [r7, #20]
 8015d68:	2200      	movs	r2, #0
 8015d6a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8015d6c:	697b      	ldr	r3, [r7, #20]
 8015d6e:	2200      	movs	r2, #0
 8015d70:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8015d72:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8015d76:	4618      	mov	r0, r3
 8015d78:	3748      	adds	r7, #72	; 0x48
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015d80:	03d09000 	.word	0x03d09000
 8015d84:	003d0900 	.word	0x003d0900
 8015d88:	08018430 	.word	0x08018430

08015d8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015d8c:	b480      	push	{r7}
 8015d8e:	b083      	sub	sp, #12
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d98:	f003 0301 	and.w	r3, r3, #1
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d00a      	beq.n	8015db6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	681b      	ldr	r3, [r3, #0]
 8015da4:	685b      	ldr	r3, [r3, #4]
 8015da6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	430a      	orrs	r2, r1
 8015db4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015dba:	f003 0302 	and.w	r3, r3, #2
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d00a      	beq.n	8015dd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	685b      	ldr	r3, [r3, #4]
 8015dc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	430a      	orrs	r2, r1
 8015dd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ddc:	f003 0304 	and.w	r3, r3, #4
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d00a      	beq.n	8015dfa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	681b      	ldr	r3, [r3, #0]
 8015de8:	685b      	ldr	r3, [r3, #4]
 8015dea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	681b      	ldr	r3, [r3, #0]
 8015df6:	430a      	orrs	r2, r1
 8015df8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015dfe:	f003 0308 	and.w	r3, r3, #8
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d00a      	beq.n	8015e1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	685b      	ldr	r3, [r3, #4]
 8015e0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	430a      	orrs	r2, r1
 8015e1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e20:	f003 0310 	and.w	r3, r3, #16
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d00a      	beq.n	8015e3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	689b      	ldr	r3, [r3, #8]
 8015e2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	430a      	orrs	r2, r1
 8015e3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e42:	f003 0320 	and.w	r3, r3, #32
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d00a      	beq.n	8015e60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	689b      	ldr	r3, [r3, #8]
 8015e50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	430a      	orrs	r2, r1
 8015e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d01a      	beq.n	8015ea2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	685b      	ldr	r3, [r3, #4]
 8015e72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	681b      	ldr	r3, [r3, #0]
 8015e7e:	430a      	orrs	r2, r1
 8015e80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015e82:	687b      	ldr	r3, [r7, #4]
 8015e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015e8a:	d10a      	bne.n	8015ea2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	681b      	ldr	r3, [r3, #0]
 8015e90:	685b      	ldr	r3, [r3, #4]
 8015e92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	430a      	orrs	r2, r1
 8015ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d00a      	beq.n	8015ec4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	685b      	ldr	r3, [r3, #4]
 8015eb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	430a      	orrs	r2, r1
 8015ec2:	605a      	str	r2, [r3, #4]
  }
}
 8015ec4:	bf00      	nop
 8015ec6:	370c      	adds	r7, #12
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ece:	4770      	bx	lr

08015ed0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015ed0:	b580      	push	{r7, lr}
 8015ed2:	b086      	sub	sp, #24
 8015ed4:	af02      	add	r7, sp, #8
 8015ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	2200      	movs	r2, #0
 8015edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015ee0:	f7f1 fb32 	bl	8007548 <HAL_GetTick>
 8015ee4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	f003 0308 	and.w	r3, r3, #8
 8015ef0:	2b08      	cmp	r3, #8
 8015ef2:	d10e      	bne.n	8015f12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015ef4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015ef8:	9300      	str	r3, [sp, #0]
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	2200      	movs	r2, #0
 8015efe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8015f02:	6878      	ldr	r0, [r7, #4]
 8015f04:	f000 f82f 	bl	8015f66 <UART_WaitOnFlagUntilTimeout>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d001      	beq.n	8015f12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015f0e:	2303      	movs	r3, #3
 8015f10:	e025      	b.n	8015f5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	f003 0304 	and.w	r3, r3, #4
 8015f1c:	2b04      	cmp	r3, #4
 8015f1e:	d10e      	bne.n	8015f3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8015f24:	9300      	str	r3, [sp, #0]
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	2200      	movs	r2, #0
 8015f2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f000 f819 	bl	8015f66 <UART_WaitOnFlagUntilTimeout>
 8015f34:	4603      	mov	r3, r0
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d001      	beq.n	8015f3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015f3a:	2303      	movs	r3, #3
 8015f3c:	e00f      	b.n	8015f5e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2220      	movs	r2, #32
 8015f42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	2220      	movs	r2, #32
 8015f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	2200      	movs	r2, #0
 8015f52:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2200      	movs	r2, #0
 8015f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8015f5c:	2300      	movs	r3, #0
}
 8015f5e:	4618      	mov	r0, r3
 8015f60:	3710      	adds	r7, #16
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bd80      	pop	{r7, pc}

08015f66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015f66:	b580      	push	{r7, lr}
 8015f68:	b09c      	sub	sp, #112	; 0x70
 8015f6a:	af00      	add	r7, sp, #0
 8015f6c:	60f8      	str	r0, [r7, #12]
 8015f6e:	60b9      	str	r1, [r7, #8]
 8015f70:	603b      	str	r3, [r7, #0]
 8015f72:	4613      	mov	r3, r2
 8015f74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015f76:	e0a9      	b.n	80160cc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f7e:	f000 80a5 	beq.w	80160cc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015f82:	f7f1 fae1 	bl	8007548 <HAL_GetTick>
 8015f86:	4602      	mov	r2, r0
 8015f88:	683b      	ldr	r3, [r7, #0]
 8015f8a:	1ad3      	subs	r3, r2, r3
 8015f8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015f8e:	429a      	cmp	r2, r3
 8015f90:	d302      	bcc.n	8015f98 <UART_WaitOnFlagUntilTimeout+0x32>
 8015f92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d140      	bne.n	801601a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fa0:	e853 3f00 	ldrex	r3, [r3]
 8015fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8015fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8015fac:	667b      	str	r3, [r7, #100]	; 0x64
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	681b      	ldr	r3, [r3, #0]
 8015fb2:	461a      	mov	r2, r3
 8015fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015fb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015fb8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015fbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015fbe:	e841 2300 	strex	r3, r2, [r1]
 8015fc2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8015fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015fc6:	2b00      	cmp	r3, #0
 8015fc8:	d1e6      	bne.n	8015f98 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	3308      	adds	r3, #8
 8015fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015fd4:	e853 3f00 	ldrex	r3, [r3]
 8015fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fdc:	f023 0301 	bic.w	r3, r3, #1
 8015fe0:	663b      	str	r3, [r7, #96]	; 0x60
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	3308      	adds	r3, #8
 8015fe8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015fea:	64ba      	str	r2, [r7, #72]	; 0x48
 8015fec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015fee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015ff2:	e841 2300 	strex	r3, r2, [r1]
 8015ff6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8015ff8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d1e5      	bne.n	8015fca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	2220      	movs	r2, #32
 8016002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	2220      	movs	r2, #32
 801600a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	2200      	movs	r2, #0
 8016012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8016016:	2303      	movs	r3, #3
 8016018:	e069      	b.n	80160ee <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	681b      	ldr	r3, [r3, #0]
 8016020:	f003 0304 	and.w	r3, r3, #4
 8016024:	2b00      	cmp	r3, #0
 8016026:	d051      	beq.n	80160cc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	69db      	ldr	r3, [r3, #28]
 801602e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016036:	d149      	bne.n	80160cc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016040:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801604a:	e853 3f00 	ldrex	r3, [r3]
 801604e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016052:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8016056:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	461a      	mov	r2, r3
 801605e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016060:	637b      	str	r3, [r7, #52]	; 0x34
 8016062:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016068:	e841 2300 	strex	r3, r2, [r1]
 801606c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801606e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016070:	2b00      	cmp	r3, #0
 8016072:	d1e6      	bne.n	8016042 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	681b      	ldr	r3, [r3, #0]
 8016078:	3308      	adds	r3, #8
 801607a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801607c:	697b      	ldr	r3, [r7, #20]
 801607e:	e853 3f00 	ldrex	r3, [r3]
 8016082:	613b      	str	r3, [r7, #16]
   return(result);
 8016084:	693b      	ldr	r3, [r7, #16]
 8016086:	f023 0301 	bic.w	r3, r3, #1
 801608a:	66bb      	str	r3, [r7, #104]	; 0x68
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	3308      	adds	r3, #8
 8016092:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016094:	623a      	str	r2, [r7, #32]
 8016096:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016098:	69f9      	ldr	r1, [r7, #28]
 801609a:	6a3a      	ldr	r2, [r7, #32]
 801609c:	e841 2300 	strex	r3, r2, [r1]
 80160a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80160a2:	69bb      	ldr	r3, [r7, #24]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d1e5      	bne.n	8016074 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	2220      	movs	r2, #32
 80160ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	2220      	movs	r2, #32
 80160b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80160b8:	68fb      	ldr	r3, [r7, #12]
 80160ba:	2220      	movs	r2, #32
 80160bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	2200      	movs	r2, #0
 80160c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80160c8:	2303      	movs	r3, #3
 80160ca:	e010      	b.n	80160ee <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	69da      	ldr	r2, [r3, #28]
 80160d2:	68bb      	ldr	r3, [r7, #8]
 80160d4:	4013      	ands	r3, r2
 80160d6:	68ba      	ldr	r2, [r7, #8]
 80160d8:	429a      	cmp	r2, r3
 80160da:	bf0c      	ite	eq
 80160dc:	2301      	moveq	r3, #1
 80160de:	2300      	movne	r3, #0
 80160e0:	b2db      	uxtb	r3, r3
 80160e2:	461a      	mov	r2, r3
 80160e4:	79fb      	ldrb	r3, [r7, #7]
 80160e6:	429a      	cmp	r2, r3
 80160e8:	f43f af46 	beq.w	8015f78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80160ec:	2300      	movs	r3, #0
}
 80160ee:	4618      	mov	r0, r3
 80160f0:	3770      	adds	r7, #112	; 0x70
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}
	...

080160f8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80160f8:	b480      	push	{r7}
 80160fa:	b0a3      	sub	sp, #140	; 0x8c
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	60f8      	str	r0, [r7, #12]
 8016100:	60b9      	str	r1, [r7, #8]
 8016102:	4613      	mov	r3, r2
 8016104:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	68ba      	ldr	r2, [r7, #8]
 801610a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	88fa      	ldrh	r2, [r7, #6]
 8016110:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	88fa      	ldrh	r2, [r7, #6]
 8016118:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	2200      	movs	r2, #0
 8016120:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	689b      	ldr	r3, [r3, #8]
 8016126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801612a:	d10e      	bne.n	801614a <UART_Start_Receive_IT+0x52>
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	691b      	ldr	r3, [r3, #16]
 8016130:	2b00      	cmp	r3, #0
 8016132:	d105      	bne.n	8016140 <UART_Start_Receive_IT+0x48>
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	f240 12ff 	movw	r2, #511	; 0x1ff
 801613a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801613e:	e02d      	b.n	801619c <UART_Start_Receive_IT+0xa4>
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	22ff      	movs	r2, #255	; 0xff
 8016144:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016148:	e028      	b.n	801619c <UART_Start_Receive_IT+0xa4>
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	689b      	ldr	r3, [r3, #8]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d10d      	bne.n	801616e <UART_Start_Receive_IT+0x76>
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	691b      	ldr	r3, [r3, #16]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d104      	bne.n	8016164 <UART_Start_Receive_IT+0x6c>
 801615a:	68fb      	ldr	r3, [r7, #12]
 801615c:	22ff      	movs	r2, #255	; 0xff
 801615e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016162:	e01b      	b.n	801619c <UART_Start_Receive_IT+0xa4>
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	227f      	movs	r2, #127	; 0x7f
 8016168:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801616c:	e016      	b.n	801619c <UART_Start_Receive_IT+0xa4>
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	689b      	ldr	r3, [r3, #8]
 8016172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016176:	d10d      	bne.n	8016194 <UART_Start_Receive_IT+0x9c>
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	691b      	ldr	r3, [r3, #16]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d104      	bne.n	801618a <UART_Start_Receive_IT+0x92>
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	227f      	movs	r2, #127	; 0x7f
 8016184:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016188:	e008      	b.n	801619c <UART_Start_Receive_IT+0xa4>
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	223f      	movs	r2, #63	; 0x3f
 801618e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8016192:	e003      	b.n	801619c <UART_Start_Receive_IT+0xa4>
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	2200      	movs	r2, #0
 8016198:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	2200      	movs	r2, #0
 80161a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	2222      	movs	r2, #34	; 0x22
 80161a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	3308      	adds	r3, #8
 80161b2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80161b6:	e853 3f00 	ldrex	r3, [r3]
 80161ba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80161bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80161be:	f043 0301 	orr.w	r3, r3, #1
 80161c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	3308      	adds	r3, #8
 80161cc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80161d0:	673a      	str	r2, [r7, #112]	; 0x70
 80161d2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161d4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80161d6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80161d8:	e841 2300 	strex	r3, r2, [r1]
 80161dc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80161de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d1e3      	bne.n	80161ac <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80161e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80161ec:	d153      	bne.n	8016296 <UART_Start_Receive_IT+0x19e>
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80161f4:	88fa      	ldrh	r2, [r7, #6]
 80161f6:	429a      	cmp	r2, r3
 80161f8:	d34d      	bcc.n	8016296 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	689b      	ldr	r3, [r3, #8]
 80161fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016202:	d107      	bne.n	8016214 <UART_Start_Receive_IT+0x11c>
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	691b      	ldr	r3, [r3, #16]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d103      	bne.n	8016214 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	4a4b      	ldr	r2, [pc, #300]	; (801633c <UART_Start_Receive_IT+0x244>)
 8016210:	671a      	str	r2, [r3, #112]	; 0x70
 8016212:	e002      	b.n	801621a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	4a4a      	ldr	r2, [pc, #296]	; (8016340 <UART_Start_Receive_IT+0x248>)
 8016218:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	2200      	movs	r2, #0
 801621e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	691b      	ldr	r3, [r3, #16]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d01a      	beq.n	8016260 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016230:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016232:	e853 3f00 	ldrex	r3, [r3]
 8016236:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016238:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801623a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801623e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	461a      	mov	r2, r3
 8016248:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801624c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801624e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016250:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016252:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016254:	e841 2300 	strex	r3, r2, [r1]
 8016258:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801625a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801625c:	2b00      	cmp	r3, #0
 801625e:	d1e4      	bne.n	801622a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	3308      	adds	r3, #8
 8016266:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801626a:	e853 3f00 	ldrex	r3, [r3]
 801626e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016276:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016278:	68fb      	ldr	r3, [r7, #12]
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	3308      	adds	r3, #8
 801627e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016280:	64ba      	str	r2, [r7, #72]	; 0x48
 8016282:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016284:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016288:	e841 2300 	strex	r3, r2, [r1]
 801628c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801628e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016290:	2b00      	cmp	r3, #0
 8016292:	d1e5      	bne.n	8016260 <UART_Start_Receive_IT+0x168>
 8016294:	e04a      	b.n	801632c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8016296:	68fb      	ldr	r3, [r7, #12]
 8016298:	689b      	ldr	r3, [r3, #8]
 801629a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801629e:	d107      	bne.n	80162b0 <UART_Start_Receive_IT+0x1b8>
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	691b      	ldr	r3, [r3, #16]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d103      	bne.n	80162b0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80162a8:	68fb      	ldr	r3, [r7, #12]
 80162aa:	4a26      	ldr	r2, [pc, #152]	; (8016344 <UART_Start_Receive_IT+0x24c>)
 80162ac:	671a      	str	r2, [r3, #112]	; 0x70
 80162ae:	e002      	b.n	80162b6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	4a25      	ldr	r2, [pc, #148]	; (8016348 <UART_Start_Receive_IT+0x250>)
 80162b4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	2200      	movs	r2, #0
 80162ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	691b      	ldr	r3, [r3, #16]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d019      	beq.n	80162fa <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80162cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162ce:	e853 3f00 	ldrex	r3, [r3]
 80162d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80162d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80162da:	677b      	str	r3, [r7, #116]	; 0x74
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	461a      	mov	r2, r3
 80162e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80162e4:	637b      	str	r3, [r7, #52]	; 0x34
 80162e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80162ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80162ec:	e841 2300 	strex	r3, r2, [r1]
 80162f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80162f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d1e6      	bne.n	80162c6 <UART_Start_Receive_IT+0x1ce>
 80162f8:	e018      	b.n	801632c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016300:	697b      	ldr	r3, [r7, #20]
 8016302:	e853 3f00 	ldrex	r3, [r3]
 8016306:	613b      	str	r3, [r7, #16]
   return(result);
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	f043 0320 	orr.w	r3, r3, #32
 801630e:	67bb      	str	r3, [r7, #120]	; 0x78
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	681b      	ldr	r3, [r3, #0]
 8016314:	461a      	mov	r2, r3
 8016316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016318:	623b      	str	r3, [r7, #32]
 801631a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801631c:	69f9      	ldr	r1, [r7, #28]
 801631e:	6a3a      	ldr	r2, [r7, #32]
 8016320:	e841 2300 	strex	r3, r2, [r1]
 8016324:	61bb      	str	r3, [r7, #24]
   return(result);
 8016326:	69bb      	ldr	r3, [r7, #24]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d1e6      	bne.n	80162fa <UART_Start_Receive_IT+0x202>
    }
  }
  return HAL_OK;
 801632c:	2300      	movs	r3, #0
}
 801632e:	4618      	mov	r0, r3
 8016330:	378c      	adds	r7, #140	; 0x8c
 8016332:	46bd      	mov	sp, r7
 8016334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016338:	4770      	bx	lr
 801633a:	bf00      	nop
 801633c:	08016d99 	.word	0x08016d99
 8016340:	08016aa1 	.word	0x08016aa1
 8016344:	0801693f 	.word	0x0801693f
 8016348:	080167df 	.word	0x080167df

0801634c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801634c:	b480      	push	{r7}
 801634e:	b095      	sub	sp, #84	; 0x54
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801635a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801635c:	e853 3f00 	ldrex	r3, [r3]
 8016360:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016364:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016368:	64fb      	str	r3, [r7, #76]	; 0x4c
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	461a      	mov	r2, r3
 8016370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016372:	643b      	str	r3, [r7, #64]	; 0x40
 8016374:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016376:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016378:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801637a:	e841 2300 	strex	r3, r2, [r1]
 801637e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016382:	2b00      	cmp	r3, #0
 8016384:	d1e6      	bne.n	8016354 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	3308      	adds	r3, #8
 801638c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801638e:	6a3b      	ldr	r3, [r7, #32]
 8016390:	e853 3f00 	ldrex	r3, [r3]
 8016394:	61fb      	str	r3, [r7, #28]
   return(result);
 8016396:	69fa      	ldr	r2, [r7, #28]
 8016398:	4b1e      	ldr	r3, [pc, #120]	; (8016414 <UART_EndRxTransfer+0xc8>)
 801639a:	4013      	ands	r3, r2
 801639c:	64bb      	str	r3, [r7, #72]	; 0x48
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	3308      	adds	r3, #8
 80163a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80163a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80163a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80163ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163ae:	e841 2300 	strex	r3, r2, [r1]
 80163b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80163b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d1e5      	bne.n	8016386 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163be:	2b01      	cmp	r3, #1
 80163c0:	d118      	bne.n	80163f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163c8:	68fb      	ldr	r3, [r7, #12]
 80163ca:	e853 3f00 	ldrex	r3, [r3]
 80163ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	f023 0310 	bic.w	r3, r3, #16
 80163d6:	647b      	str	r3, [r7, #68]	; 0x44
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	461a      	mov	r2, r3
 80163de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163e0:	61bb      	str	r3, [r7, #24]
 80163e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163e4:	6979      	ldr	r1, [r7, #20]
 80163e6:	69ba      	ldr	r2, [r7, #24]
 80163e8:	e841 2300 	strex	r3, r2, [r1]
 80163ec:	613b      	str	r3, [r7, #16]
   return(result);
 80163ee:	693b      	ldr	r3, [r7, #16]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d1e6      	bne.n	80163c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2220      	movs	r2, #32
 80163f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	2200      	movs	r2, #0
 8016400:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	2200      	movs	r2, #0
 8016406:	671a      	str	r2, [r3, #112]	; 0x70
}
 8016408:	bf00      	nop
 801640a:	3754      	adds	r7, #84	; 0x54
 801640c:	46bd      	mov	sp, r7
 801640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016412:	4770      	bx	lr
 8016414:	effffffe 	.word	0xeffffffe

08016418 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b084      	sub	sp, #16
 801641c:	af00      	add	r7, sp, #0
 801641e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016424:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	2200      	movs	r2, #0
 801642a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	2200      	movs	r2, #0
 8016432:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8016436:	68f8      	ldr	r0, [r7, #12]
 8016438:	f7fe fe26 	bl	8015088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801643c:	bf00      	nop
 801643e:	3710      	adds	r7, #16
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}

08016444 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8016444:	b480      	push	{r7}
 8016446:	b08f      	sub	sp, #60	; 0x3c
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016452:	2b21      	cmp	r3, #33	; 0x21
 8016454:	d14c      	bne.n	80164f0 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801645c:	b29b      	uxth	r3, r3
 801645e:	2b00      	cmp	r3, #0
 8016460:	d132      	bne.n	80164c8 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016468:	6a3b      	ldr	r3, [r7, #32]
 801646a:	e853 3f00 	ldrex	r3, [r3]
 801646e:	61fb      	str	r3, [r7, #28]
   return(result);
 8016470:	69fb      	ldr	r3, [r7, #28]
 8016472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016476:	637b      	str	r3, [r7, #52]	; 0x34
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	461a      	mov	r2, r3
 801647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016482:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016484:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016488:	e841 2300 	strex	r3, r2, [r1]
 801648c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016490:	2b00      	cmp	r3, #0
 8016492:	d1e6      	bne.n	8016462 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	e853 3f00 	ldrex	r3, [r3]
 80164a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80164a2:	68bb      	ldr	r3, [r7, #8]
 80164a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80164a8:	633b      	str	r3, [r7, #48]	; 0x30
 80164aa:	687b      	ldr	r3, [r7, #4]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	461a      	mov	r2, r3
 80164b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164b2:	61bb      	str	r3, [r7, #24]
 80164b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80164b6:	6979      	ldr	r1, [r7, #20]
 80164b8:	69ba      	ldr	r2, [r7, #24]
 80164ba:	e841 2300 	strex	r3, r2, [r1]
 80164be:	613b      	str	r3, [r7, #16]
   return(result);
 80164c0:	693b      	ldr	r3, [r7, #16]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d1e6      	bne.n	8016494 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80164c6:	e013      	b.n	80164f0 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164cc:	781a      	ldrb	r2, [r3, #0]
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	681b      	ldr	r3, [r3, #0]
 80164d2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80164d8:	1c5a      	adds	r2, r3, #1
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80164e4:	b29b      	uxth	r3, r3
 80164e6:	3b01      	subs	r3, #1
 80164e8:	b29a      	uxth	r2, r3
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80164f0:	bf00      	nop
 80164f2:	373c      	adds	r7, #60	; 0x3c
 80164f4:	46bd      	mov	sp, r7
 80164f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fa:	4770      	bx	lr

080164fc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80164fc:	b480      	push	{r7}
 80164fe:	b091      	sub	sp, #68	; 0x44
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801650a:	2b21      	cmp	r3, #33	; 0x21
 801650c:	d151      	bne.n	80165b2 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016514:	b29b      	uxth	r3, r3
 8016516:	2b00      	cmp	r3, #0
 8016518:	d132      	bne.n	8016580 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	681b      	ldr	r3, [r3, #0]
 801651e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016522:	e853 3f00 	ldrex	r3, [r3]
 8016526:	623b      	str	r3, [r7, #32]
   return(result);
 8016528:	6a3b      	ldr	r3, [r7, #32]
 801652a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801652e:	63bb      	str	r3, [r7, #56]	; 0x38
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	461a      	mov	r2, r3
 8016536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016538:	633b      	str	r3, [r7, #48]	; 0x30
 801653a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801653c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801653e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016540:	e841 2300 	strex	r3, r2, [r1]
 8016544:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016548:	2b00      	cmp	r3, #0
 801654a:	d1e6      	bne.n	801651a <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016552:	693b      	ldr	r3, [r7, #16]
 8016554:	e853 3f00 	ldrex	r3, [r3]
 8016558:	60fb      	str	r3, [r7, #12]
   return(result);
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016560:	637b      	str	r3, [r7, #52]	; 0x34
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	461a      	mov	r2, r3
 8016568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801656a:	61fb      	str	r3, [r7, #28]
 801656c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801656e:	69b9      	ldr	r1, [r7, #24]
 8016570:	69fa      	ldr	r2, [r7, #28]
 8016572:	e841 2300 	strex	r3, r2, [r1]
 8016576:	617b      	str	r3, [r7, #20]
   return(result);
 8016578:	697b      	ldr	r3, [r7, #20]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d1e6      	bne.n	801654c <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 801657e:	e018      	b.n	80165b2 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8016580:	687b      	ldr	r3, [r7, #4]
 8016582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016584:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8016586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016588:	881b      	ldrh	r3, [r3, #0]
 801658a:	461a      	mov	r2, r3
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016594:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801659a:	1c9a      	adds	r2, r3, #2
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80165a0:	687b      	ldr	r3, [r7, #4]
 80165a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80165a6:	b29b      	uxth	r3, r3
 80165a8:	3b01      	subs	r3, #1
 80165aa:	b29a      	uxth	r2, r3
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80165b2:	bf00      	nop
 80165b4:	3744      	adds	r7, #68	; 0x44
 80165b6:	46bd      	mov	sp, r7
 80165b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165bc:	4770      	bx	lr

080165be <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80165be:	b480      	push	{r7}
 80165c0:	b091      	sub	sp, #68	; 0x44
 80165c2:	af00      	add	r7, sp, #0
 80165c4:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80165cc:	2b21      	cmp	r3, #33	; 0x21
 80165ce:	d160      	bne.n	8016692 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80165d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80165d8:	e057      	b.n	801668a <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 80165da:	687b      	ldr	r3, [r7, #4]
 80165dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80165e0:	b29b      	uxth	r3, r3
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d133      	bne.n	801664e <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	3308      	adds	r3, #8
 80165ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80165ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165f0:	e853 3f00 	ldrex	r3, [r3]
 80165f4:	623b      	str	r3, [r7, #32]
   return(result);
 80165f6:	6a3b      	ldr	r3, [r7, #32]
 80165f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80165fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	3308      	adds	r3, #8
 8016604:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016606:	633a      	str	r2, [r7, #48]	; 0x30
 8016608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801660a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801660c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801660e:	e841 2300 	strex	r3, r2, [r1]
 8016612:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016616:	2b00      	cmp	r3, #0
 8016618:	d1e5      	bne.n	80165e6 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	681b      	ldr	r3, [r3, #0]
 801661e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016620:	693b      	ldr	r3, [r7, #16]
 8016622:	e853 3f00 	ldrex	r3, [r3]
 8016626:	60fb      	str	r3, [r7, #12]
   return(result);
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801662e:	637b      	str	r3, [r7, #52]	; 0x34
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	461a      	mov	r2, r3
 8016636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016638:	61fb      	str	r3, [r7, #28]
 801663a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801663c:	69b9      	ldr	r1, [r7, #24]
 801663e:	69fa      	ldr	r2, [r7, #28]
 8016640:	e841 2300 	strex	r3, r2, [r1]
 8016644:	617b      	str	r3, [r7, #20]
   return(result);
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d1e6      	bne.n	801661a <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801664c:	e021      	b.n	8016692 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	681b      	ldr	r3, [r3, #0]
 8016652:	69db      	ldr	r3, [r3, #28]
 8016654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016658:	2b00      	cmp	r3, #0
 801665a:	d013      	beq.n	8016684 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016660:	781a      	ldrb	r2, [r3, #0]
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801666c:	1c5a      	adds	r2, r3, #1
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016678:	b29b      	uxth	r3, r3
 801667a:	3b01      	subs	r3, #1
 801667c:	b29a      	uxth	r2, r3
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8016684:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016686:	3b01      	subs	r3, #1
 8016688:	87fb      	strh	r3, [r7, #62]	; 0x3e
 801668a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801668c:	2b00      	cmp	r3, #0
 801668e:	d1a4      	bne.n	80165da <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8016690:	e7ff      	b.n	8016692 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8016692:	bf00      	nop
 8016694:	3744      	adds	r7, #68	; 0x44
 8016696:	46bd      	mov	sp, r7
 8016698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669c:	4770      	bx	lr

0801669e <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801669e:	b480      	push	{r7}
 80166a0:	b091      	sub	sp, #68	; 0x44
 80166a2:	af00      	add	r7, sp, #0
 80166a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80166ac:	2b21      	cmp	r3, #33	; 0x21
 80166ae:	d165      	bne.n	801677c <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80166b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80166b8:	e05c      	b.n	8016774 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 80166ba:	687b      	ldr	r3, [r7, #4]
 80166bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80166c0:	b29b      	uxth	r3, r3
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d133      	bne.n	801672e <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	3308      	adds	r3, #8
 80166cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80166ce:	6a3b      	ldr	r3, [r7, #32]
 80166d0:	e853 3f00 	ldrex	r3, [r3]
 80166d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80166d6:	69fb      	ldr	r3, [r7, #28]
 80166d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80166dc:	637b      	str	r3, [r7, #52]	; 0x34
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	3308      	adds	r3, #8
 80166e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80166e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80166e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80166ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80166ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80166ee:	e841 2300 	strex	r3, r2, [r1]
 80166f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80166f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d1e5      	bne.n	80166c6 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	e853 3f00 	ldrex	r3, [r3]
 8016706:	60bb      	str	r3, [r7, #8]
   return(result);
 8016708:	68bb      	ldr	r3, [r7, #8]
 801670a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801670e:	633b      	str	r3, [r7, #48]	; 0x30
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	461a      	mov	r2, r3
 8016716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016718:	61bb      	str	r3, [r7, #24]
 801671a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801671c:	6979      	ldr	r1, [r7, #20]
 801671e:	69ba      	ldr	r2, [r7, #24]
 8016720:	e841 2300 	strex	r3, r2, [r1]
 8016724:	613b      	str	r3, [r7, #16]
   return(result);
 8016726:	693b      	ldr	r3, [r7, #16]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d1e6      	bne.n	80166fa <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 801672c:	e026      	b.n	801677c <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	69db      	ldr	r3, [r3, #28]
 8016734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016738:	2b00      	cmp	r3, #0
 801673a:	d018      	beq.n	801676e <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016740:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8016742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016744:	881b      	ldrh	r3, [r3, #0]
 8016746:	461a      	mov	r2, r3
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8016750:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016756:	1c9a      	adds	r2, r3, #2
 8016758:	687b      	ldr	r3, [r7, #4]
 801675a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 801675c:	687b      	ldr	r3, [r7, #4]
 801675e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8016762:	b29b      	uxth	r3, r3
 8016764:	3b01      	subs	r3, #1
 8016766:	b29a      	uxth	r2, r3
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 801676e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016770:	3b01      	subs	r3, #1
 8016772:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8016774:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016776:	2b00      	cmp	r3, #0
 8016778:	d19f      	bne.n	80166ba <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 801677a:	e7ff      	b.n	801677c <UART_TxISR_16BIT_FIFOEN+0xde>
 801677c:	bf00      	nop
 801677e:	3744      	adds	r7, #68	; 0x44
 8016780:	46bd      	mov	sp, r7
 8016782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016786:	4770      	bx	lr

08016788 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8016788:	b580      	push	{r7, lr}
 801678a:	b088      	sub	sp, #32
 801678c:	af00      	add	r7, sp, #0
 801678e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	e853 3f00 	ldrex	r3, [r3]
 801679c:	60bb      	str	r3, [r7, #8]
   return(result);
 801679e:	68bb      	ldr	r3, [r7, #8]
 80167a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80167a4:	61fb      	str	r3, [r7, #28]
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	461a      	mov	r2, r3
 80167ac:	69fb      	ldr	r3, [r7, #28]
 80167ae:	61bb      	str	r3, [r7, #24]
 80167b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80167b2:	6979      	ldr	r1, [r7, #20]
 80167b4:	69ba      	ldr	r2, [r7, #24]
 80167b6:	e841 2300 	strex	r3, r2, [r1]
 80167ba:	613b      	str	r3, [r7, #16]
   return(result);
 80167bc:	693b      	ldr	r3, [r7, #16]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d1e6      	bne.n	8016790 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	2220      	movs	r2, #32
 80167c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2200      	movs	r2, #0
 80167ce:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80167d0:	6878      	ldr	r0, [r7, #4]
 80167d2:	f7fe fc4f 	bl	8015074 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80167d6:	bf00      	nop
 80167d8:	3720      	adds	r7, #32
 80167da:	46bd      	mov	sp, r7
 80167dc:	bd80      	pop	{r7, pc}

080167de <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80167de:	b580      	push	{r7, lr}
 80167e0:	b096      	sub	sp, #88	; 0x58
 80167e2:	af00      	add	r7, sp, #0
 80167e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80167ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80167f6:	2b22      	cmp	r3, #34	; 0x22
 80167f8:	f040 8095 	bne.w	8016926 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016802:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016806:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801680a:	b2d9      	uxtb	r1, r3
 801680c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8016810:	b2da      	uxtb	r2, r3
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016816:	400a      	ands	r2, r1
 8016818:	b2d2      	uxtb	r2, r2
 801681a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016820:	1c5a      	adds	r2, r3, #1
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801682c:	b29b      	uxth	r3, r3
 801682e:	3b01      	subs	r3, #1
 8016830:	b29a      	uxth	r2, r3
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801683e:	b29b      	uxth	r3, r3
 8016840:	2b00      	cmp	r3, #0
 8016842:	d178      	bne.n	8016936 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801684c:	e853 3f00 	ldrex	r3, [r3]
 8016850:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016854:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016858:	653b      	str	r3, [r7, #80]	; 0x50
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	461a      	mov	r2, r3
 8016860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016862:	647b      	str	r3, [r7, #68]	; 0x44
 8016864:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016866:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801686a:	e841 2300 	strex	r3, r2, [r1]
 801686e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016872:	2b00      	cmp	r3, #0
 8016874:	d1e6      	bne.n	8016844 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	3308      	adds	r3, #8
 801687c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016880:	e853 3f00 	ldrex	r3, [r3]
 8016884:	623b      	str	r3, [r7, #32]
   return(result);
 8016886:	6a3b      	ldr	r3, [r7, #32]
 8016888:	f023 0301 	bic.w	r3, r3, #1
 801688c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	681b      	ldr	r3, [r3, #0]
 8016892:	3308      	adds	r3, #8
 8016894:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016896:	633a      	str	r2, [r7, #48]	; 0x30
 8016898:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801689a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801689c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801689e:	e841 2300 	strex	r3, r2, [r1]
 80168a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80168a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d1e5      	bne.n	8016876 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	2220      	movs	r2, #32
 80168ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2200      	movs	r2, #0
 80168b6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168bc:	2b01      	cmp	r3, #1
 80168be:	d12e      	bne.n	801691e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	2200      	movs	r2, #0
 80168c4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80168cc:	693b      	ldr	r3, [r7, #16]
 80168ce:	e853 3f00 	ldrex	r3, [r3]
 80168d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	f023 0310 	bic.w	r3, r3, #16
 80168da:	64bb      	str	r3, [r7, #72]	; 0x48
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	461a      	mov	r2, r3
 80168e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168e4:	61fb      	str	r3, [r7, #28]
 80168e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80168e8:	69b9      	ldr	r1, [r7, #24]
 80168ea:	69fa      	ldr	r2, [r7, #28]
 80168ec:	e841 2300 	strex	r3, r2, [r1]
 80168f0:	617b      	str	r3, [r7, #20]
   return(result);
 80168f2:	697b      	ldr	r3, [r7, #20]
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d1e6      	bne.n	80168c6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	69db      	ldr	r3, [r3, #28]
 80168fe:	f003 0310 	and.w	r3, r3, #16
 8016902:	2b10      	cmp	r3, #16
 8016904:	d103      	bne.n	801690e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	2210      	movs	r2, #16
 801690c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016914:	4619      	mov	r1, r3
 8016916:	6878      	ldr	r0, [r7, #4]
 8016918:	f7fe fbc0 	bl	801509c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801691c:	e00b      	b.n	8016936 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801691e:	6878      	ldr	r0, [r7, #4]
 8016920:	f7ec fec8 	bl	80036b4 <HAL_UART_RxCpltCallback>
}
 8016924:	e007      	b.n	8016936 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	699a      	ldr	r2, [r3, #24]
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	f042 0208 	orr.w	r2, r2, #8
 8016934:	619a      	str	r2, [r3, #24]
}
 8016936:	bf00      	nop
 8016938:	3758      	adds	r7, #88	; 0x58
 801693a:	46bd      	mov	sp, r7
 801693c:	bd80      	pop	{r7, pc}

0801693e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801693e:	b580      	push	{r7, lr}
 8016940:	b096      	sub	sp, #88	; 0x58
 8016942:	af00      	add	r7, sp, #0
 8016944:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801694c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016956:	2b22      	cmp	r3, #34	; 0x22
 8016958:	f040 8095 	bne.w	8016a86 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016962:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801696a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801696c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8016970:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8016974:	4013      	ands	r3, r2
 8016976:	b29a      	uxth	r2, r3
 8016978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801697a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016980:	1c9a      	adds	r2, r3, #2
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801698c:	b29b      	uxth	r3, r3
 801698e:	3b01      	subs	r3, #1
 8016990:	b29a      	uxth	r2, r3
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801699e:	b29b      	uxth	r3, r3
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d178      	bne.n	8016a96 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80169ac:	e853 3f00 	ldrex	r3, [r3]
 80169b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80169b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80169b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	461a      	mov	r2, r3
 80169c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169c2:	643b      	str	r3, [r7, #64]	; 0x40
 80169c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80169c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80169ca:	e841 2300 	strex	r3, r2, [r1]
 80169ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80169d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d1e6      	bne.n	80169a4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	681b      	ldr	r3, [r3, #0]
 80169da:	3308      	adds	r3, #8
 80169dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80169de:	6a3b      	ldr	r3, [r7, #32]
 80169e0:	e853 3f00 	ldrex	r3, [r3]
 80169e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80169e6:	69fb      	ldr	r3, [r7, #28]
 80169e8:	f023 0301 	bic.w	r3, r3, #1
 80169ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	3308      	adds	r3, #8
 80169f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80169f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80169f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80169fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80169fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80169fe:	e841 2300 	strex	r3, r2, [r1]
 8016a02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d1e5      	bne.n	80169d6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2220      	movs	r2, #32
 8016a0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	2200      	movs	r2, #0
 8016a16:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a1c:	2b01      	cmp	r3, #1
 8016a1e:	d12e      	bne.n	8016a7e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	2200      	movs	r2, #0
 8016a24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	e853 3f00 	ldrex	r3, [r3]
 8016a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8016a34:	68bb      	ldr	r3, [r7, #8]
 8016a36:	f023 0310 	bic.w	r3, r3, #16
 8016a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	461a      	mov	r2, r3
 8016a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a44:	61bb      	str	r3, [r7, #24]
 8016a46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016a48:	6979      	ldr	r1, [r7, #20]
 8016a4a:	69ba      	ldr	r2, [r7, #24]
 8016a4c:	e841 2300 	strex	r3, r2, [r1]
 8016a50:	613b      	str	r3, [r7, #16]
   return(result);
 8016a52:	693b      	ldr	r3, [r7, #16]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d1e6      	bne.n	8016a26 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	69db      	ldr	r3, [r3, #28]
 8016a5e:	f003 0310 	and.w	r3, r3, #16
 8016a62:	2b10      	cmp	r3, #16
 8016a64:	d103      	bne.n	8016a6e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	2210      	movs	r2, #16
 8016a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016a74:	4619      	mov	r1, r3
 8016a76:	6878      	ldr	r0, [r7, #4]
 8016a78:	f7fe fb10 	bl	801509c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016a7c:	e00b      	b.n	8016a96 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8016a7e:	6878      	ldr	r0, [r7, #4]
 8016a80:	f7ec fe18 	bl	80036b4 <HAL_UART_RxCpltCallback>
}
 8016a84:	e007      	b.n	8016a96 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	699a      	ldr	r2, [r3, #24]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	f042 0208 	orr.w	r2, r2, #8
 8016a94:	619a      	str	r2, [r3, #24]
}
 8016a96:	bf00      	nop
 8016a98:	3758      	adds	r7, #88	; 0x58
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bd80      	pop	{r7, pc}
	...

08016aa0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b0a6      	sub	sp, #152	; 0x98
 8016aa4:	af00      	add	r7, sp, #0
 8016aa6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016aae:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	69db      	ldr	r3, [r3, #28]
 8016ab8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	689b      	ldr	r3, [r3, #8]
 8016acc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016ad6:	2b22      	cmp	r3, #34	; 0x22
 8016ad8:	f040 814d 	bne.w	8016d76 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016ae2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016ae6:	e0f4      	b.n	8016cd2 <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aee:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8016af2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8016af6:	b2d9      	uxtb	r1, r3
 8016af8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8016afc:	b2da      	uxtb	r2, r3
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016b02:	400a      	ands	r2, r1
 8016b04:	b2d2      	uxtb	r2, r2
 8016b06:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016b0c:	1c5a      	adds	r2, r3, #1
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016b18:	b29b      	uxth	r3, r3
 8016b1a:	3b01      	subs	r3, #1
 8016b1c:	b29a      	uxth	r2, r3
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	69db      	ldr	r3, [r3, #28]
 8016b2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016b2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b32:	f003 0307 	and.w	r3, r3, #7
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d053      	beq.n	8016be2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016b3a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b3e:	f003 0301 	and.w	r3, r3, #1
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	d011      	beq.n	8016b6a <UART_RxISR_8BIT_FIFOEN+0xca>
 8016b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d00b      	beq.n	8016b6a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	2201      	movs	r2, #1
 8016b58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016b60:	f043 0201 	orr.w	r2, r3, #1
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016b6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b6e:	f003 0302 	and.w	r3, r3, #2
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d011      	beq.n	8016b9a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8016b76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016b7a:	f003 0301 	and.w	r3, r3, #1
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d00b      	beq.n	8016b9a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	2202      	movs	r2, #2
 8016b88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016b90:	f043 0204 	orr.w	r2, r3, #4
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016b9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016b9e:	f003 0304 	and.w	r3, r3, #4
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d011      	beq.n	8016bca <UART_RxISR_8BIT_FIFOEN+0x12a>
 8016ba6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016baa:	f003 0301 	and.w	r3, r3, #1
 8016bae:	2b00      	cmp	r3, #0
 8016bb0:	d00b      	beq.n	8016bca <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	2204      	movs	r2, #4
 8016bb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016bc0:	f043 0202 	orr.w	r2, r3, #2
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016bca:	687b      	ldr	r3, [r7, #4]
 8016bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d006      	beq.n	8016be2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f7fe fa57 	bl	8015088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	2200      	movs	r2, #0
 8016bde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016be8:	b29b      	uxth	r3, r3
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d171      	bne.n	8016cd2 <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016bf6:	e853 3f00 	ldrex	r3, [r3]
 8016bfa:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8016bfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016bfe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016c02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	461a      	mov	r2, r3
 8016c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016c10:	66bb      	str	r3, [r7, #104]	; 0x68
 8016c12:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c14:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8016c16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8016c18:	e841 2300 	strex	r3, r2, [r1]
 8016c1c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8016c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d1e4      	bne.n	8016bee <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	3308      	adds	r3, #8
 8016c2a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c2e:	e853 3f00 	ldrex	r3, [r3]
 8016c32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8016c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016c36:	4b56      	ldr	r3, [pc, #344]	; (8016d90 <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8016c38:	4013      	ands	r3, r2
 8016c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	681b      	ldr	r3, [r3, #0]
 8016c40:	3308      	adds	r3, #8
 8016c42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8016c44:	657a      	str	r2, [r7, #84]	; 0x54
 8016c46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c48:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016c4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016c4c:	e841 2300 	strex	r3, r2, [r1]
 8016c50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8016c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d1e5      	bne.n	8016c24 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	2220      	movs	r2, #32
 8016c5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	2200      	movs	r2, #0
 8016c64:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c6a:	2b01      	cmp	r3, #1
 8016c6c:	d12e      	bne.n	8016ccc <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	2200      	movs	r2, #0
 8016c72:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c7c:	e853 3f00 	ldrex	r3, [r3]
 8016c80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8016c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c84:	f023 0310 	bic.w	r3, r3, #16
 8016c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	461a      	mov	r2, r3
 8016c90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016c92:	643b      	str	r3, [r7, #64]	; 0x40
 8016c94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016c96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016c98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016c9a:	e841 2300 	strex	r3, r2, [r1]
 8016c9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8016ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d1e6      	bne.n	8016c74 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	69db      	ldr	r3, [r3, #28]
 8016cac:	f003 0310 	and.w	r3, r3, #16
 8016cb0:	2b10      	cmp	r3, #16
 8016cb2:	d103      	bne.n	8016cbc <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	2210      	movs	r2, #16
 8016cba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016cc2:	4619      	mov	r1, r3
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	f7fe f9e9 	bl	801509c <HAL_UARTEx_RxEventCallback>
 8016cca:	e002      	b.n	8016cd2 <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016ccc:	6878      	ldr	r0, [r7, #4]
 8016cce:	f7ec fcf1 	bl	80036b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016cd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d006      	beq.n	8016ce8 <UART_RxISR_8BIT_FIFOEN+0x248>
 8016cda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016cde:	f003 0320 	and.w	r3, r3, #32
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	f47f af00 	bne.w	8016ae8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016cee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016cf2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	d045      	beq.n	8016d86 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016d00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d23e      	bcs.n	8016d86 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	681b      	ldr	r3, [r3, #0]
 8016d0c:	3308      	adds	r3, #8
 8016d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d10:	6a3b      	ldr	r3, [r7, #32]
 8016d12:	e853 3f00 	ldrex	r3, [r3]
 8016d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8016d18:	69fb      	ldr	r3, [r7, #28]
 8016d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016d1e:	673b      	str	r3, [r7, #112]	; 0x70
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	3308      	adds	r3, #8
 8016d26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8016d28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8016d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d30:	e841 2300 	strex	r3, r2, [r1]
 8016d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8016d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d1e5      	bne.n	8016d08 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	4a15      	ldr	r2, [pc, #84]	; (8016d94 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8016d40:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	e853 3f00 	ldrex	r3, [r3]
 8016d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8016d50:	68bb      	ldr	r3, [r7, #8]
 8016d52:	f043 0320 	orr.w	r3, r3, #32
 8016d56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	461a      	mov	r2, r3
 8016d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016d60:	61bb      	str	r3, [r7, #24]
 8016d62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016d64:	6979      	ldr	r1, [r7, #20]
 8016d66:	69ba      	ldr	r2, [r7, #24]
 8016d68:	e841 2300 	strex	r3, r2, [r1]
 8016d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8016d6e:	693b      	ldr	r3, [r7, #16]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	d1e6      	bne.n	8016d42 <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8016d74:	e007      	b.n	8016d86 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	699a      	ldr	r2, [r3, #24]
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	681b      	ldr	r3, [r3, #0]
 8016d80:	f042 0208 	orr.w	r2, r2, #8
 8016d84:	619a      	str	r2, [r3, #24]
}
 8016d86:	bf00      	nop
 8016d88:	3798      	adds	r7, #152	; 0x98
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd80      	pop	{r7, pc}
 8016d8e:	bf00      	nop
 8016d90:	effffffe 	.word	0xeffffffe
 8016d94:	080167df 	.word	0x080167df

08016d98 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8016d98:	b580      	push	{r7, lr}
 8016d9a:	b0a8      	sub	sp, #160	; 0xa0
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016da6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	69db      	ldr	r3, [r3, #28]
 8016db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	689b      	ldr	r3, [r3, #8]
 8016dc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016dce:	2b22      	cmp	r3, #34	; 0x22
 8016dd0:	f040 8151 	bne.w	8017076 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016dda:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016dde:	e0f8      	b.n	8016fd2 <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016de6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016dee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8016df2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8016df6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8016dfa:	4013      	ands	r3, r2
 8016dfc:	b29a      	uxth	r2, r3
 8016dfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016e02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e08:	1c9a      	adds	r2, r3, #2
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016e14:	b29b      	uxth	r3, r3
 8016e16:	3b01      	subs	r3, #1
 8016e18:	b29a      	uxth	r2, r3
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	69db      	ldr	r3, [r3, #28]
 8016e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8016e2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e2e:	f003 0307 	and.w	r3, r3, #7
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d053      	beq.n	8016ede <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8016e36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e3a:	f003 0301 	and.w	r3, r3, #1
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d011      	beq.n	8016e66 <UART_RxISR_16BIT_FIFOEN+0xce>
 8016e42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d00b      	beq.n	8016e66 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	2201      	movs	r2, #1
 8016e54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016e5c:	f043 0201 	orr.w	r2, r3, #1
 8016e60:	687b      	ldr	r3, [r7, #4]
 8016e62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016e66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e6a:	f003 0302 	and.w	r3, r3, #2
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d011      	beq.n	8016e96 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8016e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016e76:	f003 0301 	and.w	r3, r3, #1
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d00b      	beq.n	8016e96 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	2202      	movs	r2, #2
 8016e84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016e8c:	f043 0204 	orr.w	r2, r3, #4
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8016e96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016e9a:	f003 0304 	and.w	r3, r3, #4
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d011      	beq.n	8016ec6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8016ea2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016ea6:	f003 0301 	and.w	r3, r3, #1
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d00b      	beq.n	8016ec6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	2204      	movs	r2, #4
 8016eb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016ebc:	f043 0202 	orr.w	r2, r3, #2
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d006      	beq.n	8016ede <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8016ed0:	6878      	ldr	r0, [r7, #4]
 8016ed2:	f7fe f8d9 	bl	8015088 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	2200      	movs	r2, #0
 8016eda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d173      	bne.n	8016fd2 <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	681b      	ldr	r3, [r3, #0]
 8016eee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ef0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016ef2:	e853 3f00 	ldrex	r3, [r3]
 8016ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8016ef8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016efa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016efe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	681b      	ldr	r3, [r3, #0]
 8016f06:	461a      	mov	r2, r3
 8016f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016f0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8016f0e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8016f12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8016f14:	e841 2300 	strex	r3, r2, [r1]
 8016f18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8016f1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d1e4      	bne.n	8016eea <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	3308      	adds	r3, #8
 8016f26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f2a:	e853 3f00 	ldrex	r3, [r3]
 8016f2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8016f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016f32:	4b57      	ldr	r3, [pc, #348]	; (8017090 <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8016f34:	4013      	ands	r3, r2
 8016f36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	3308      	adds	r3, #8
 8016f40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8016f44:	65ba      	str	r2, [r7, #88]	; 0x58
 8016f46:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016f4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016f4c:	e841 2300 	strex	r3, r2, [r1]
 8016f50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8016f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d1e3      	bne.n	8016f20 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	2220      	movs	r2, #32
 8016f5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	2200      	movs	r2, #0
 8016f64:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f6a:	2b01      	cmp	r3, #1
 8016f6c:	d12e      	bne.n	8016fcc <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	2200      	movs	r2, #0
 8016f72:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f7c:	e853 3f00 	ldrex	r3, [r3]
 8016f80:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f84:	f023 0310 	bic.w	r3, r3, #16
 8016f88:	67fb      	str	r3, [r7, #124]	; 0x7c
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	461a      	mov	r2, r3
 8016f90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016f92:	647b      	str	r3, [r7, #68]	; 0x44
 8016f94:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f96:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016f98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f9a:	e841 2300 	strex	r3, r2, [r1]
 8016f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d1e6      	bne.n	8016f74 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	69db      	ldr	r3, [r3, #28]
 8016fac:	f003 0310 	and.w	r3, r3, #16
 8016fb0:	2b10      	cmp	r3, #16
 8016fb2:	d103      	bne.n	8016fbc <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	2210      	movs	r2, #16
 8016fba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016fc2:	4619      	mov	r1, r3
 8016fc4:	6878      	ldr	r0, [r7, #4]
 8016fc6:	f7fe f869 	bl	801509c <HAL_UARTEx_RxEventCallback>
 8016fca:	e002      	b.n	8016fd2 <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8016fcc:	6878      	ldr	r0, [r7, #4]
 8016fce:	f7ec fb71 	bl	80036b4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8016fd2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d006      	beq.n	8016fe8 <UART_RxISR_16BIT_FIFOEN+0x250>
 8016fda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016fde:	f003 0320 	and.w	r3, r3, #32
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	f47f aefc 	bne.w	8016de0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8016fee:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8016ff2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d045      	beq.n	8017086 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017000:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8017004:	429a      	cmp	r2, r3
 8017006:	d23e      	bcs.n	8017086 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	681b      	ldr	r3, [r3, #0]
 801700c:	3308      	adds	r3, #8
 801700e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017012:	e853 3f00 	ldrex	r3, [r3]
 8017016:	623b      	str	r3, [r7, #32]
   return(result);
 8017018:	6a3b      	ldr	r3, [r7, #32]
 801701a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801701e:	677b      	str	r3, [r7, #116]	; 0x74
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	3308      	adds	r3, #8
 8017026:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8017028:	633a      	str	r2, [r7, #48]	; 0x30
 801702a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801702c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801702e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017030:	e841 2300 	strex	r3, r2, [r1]
 8017034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017038:	2b00      	cmp	r3, #0
 801703a:	d1e5      	bne.n	8017008 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	4a15      	ldr	r2, [pc, #84]	; (8017094 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8017040:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017048:	693b      	ldr	r3, [r7, #16]
 801704a:	e853 3f00 	ldrex	r3, [r3]
 801704e:	60fb      	str	r3, [r7, #12]
   return(result);
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	f043 0320 	orr.w	r3, r3, #32
 8017056:	673b      	str	r3, [r7, #112]	; 0x70
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	461a      	mov	r2, r3
 801705e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017060:	61fb      	str	r3, [r7, #28]
 8017062:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017064:	69b9      	ldr	r1, [r7, #24]
 8017066:	69fa      	ldr	r2, [r7, #28]
 8017068:	e841 2300 	strex	r3, r2, [r1]
 801706c:	617b      	str	r3, [r7, #20]
   return(result);
 801706e:	697b      	ldr	r3, [r7, #20]
 8017070:	2b00      	cmp	r3, #0
 8017072:	d1e6      	bne.n	8017042 <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017074:	e007      	b.n	8017086 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	699a      	ldr	r2, [r3, #24]
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	f042 0208 	orr.w	r2, r2, #8
 8017084:	619a      	str	r2, [r3, #24]
}
 8017086:	bf00      	nop
 8017088:	37a0      	adds	r7, #160	; 0xa0
 801708a:	46bd      	mov	sp, r7
 801708c:	bd80      	pop	{r7, pc}
 801708e:	bf00      	nop
 8017090:	effffffe 	.word	0xeffffffe
 8017094:	0801693f 	.word	0x0801693f

08017098 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8017098:	b480      	push	{r7}
 801709a:	b083      	sub	sp, #12
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80170a0:	bf00      	nop
 80170a2:	370c      	adds	r7, #12
 80170a4:	46bd      	mov	sp, r7
 80170a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170aa:	4770      	bx	lr

080170ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80170ac:	b480      	push	{r7}
 80170ae:	b083      	sub	sp, #12
 80170b0:	af00      	add	r7, sp, #0
 80170b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80170b4:	bf00      	nop
 80170b6:	370c      	adds	r7, #12
 80170b8:	46bd      	mov	sp, r7
 80170ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170be:	4770      	bx	lr

080170c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80170c0:	b480      	push	{r7}
 80170c2:	b083      	sub	sp, #12
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80170c8:	bf00      	nop
 80170ca:	370c      	adds	r7, #12
 80170cc:	46bd      	mov	sp, r7
 80170ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d2:	4770      	bx	lr

080170d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80170d4:	b480      	push	{r7}
 80170d6:	b085      	sub	sp, #20
 80170d8:	af00      	add	r7, sp, #0
 80170da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80170e2:	2b01      	cmp	r3, #1
 80170e4:	d101      	bne.n	80170ea <HAL_UARTEx_DisableFifoMode+0x16>
 80170e6:	2302      	movs	r3, #2
 80170e8:	e027      	b.n	801713a <HAL_UARTEx_DisableFifoMode+0x66>
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	2201      	movs	r2, #1
 80170ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80170f2:	687b      	ldr	r3, [r7, #4]
 80170f4:	2224      	movs	r2, #36	; 0x24
 80170f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	681a      	ldr	r2, [r3, #0]
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	681b      	ldr	r3, [r3, #0]
 801710c:	f022 0201 	bic.w	r2, r2, #1
 8017110:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8017118:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	2200      	movs	r2, #0
 801711e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	681b      	ldr	r3, [r3, #0]
 8017124:	68fa      	ldr	r2, [r7, #12]
 8017126:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	2220      	movs	r2, #32
 801712c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017130:	687b      	ldr	r3, [r7, #4]
 8017132:	2200      	movs	r2, #0
 8017134:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8017138:	2300      	movs	r3, #0
}
 801713a:	4618      	mov	r0, r3
 801713c:	3714      	adds	r7, #20
 801713e:	46bd      	mov	sp, r7
 8017140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017144:	4770      	bx	lr

08017146 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017146:	b580      	push	{r7, lr}
 8017148:	b084      	sub	sp, #16
 801714a:	af00      	add	r7, sp, #0
 801714c:	6078      	str	r0, [r7, #4]
 801714e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8017156:	2b01      	cmp	r3, #1
 8017158:	d101      	bne.n	801715e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801715a:	2302      	movs	r3, #2
 801715c:	e02d      	b.n	80171ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	2201      	movs	r2, #1
 8017162:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	2224      	movs	r2, #36	; 0x24
 801716a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	681a      	ldr	r2, [r3, #0]
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	f022 0201 	bic.w	r2, r2, #1
 8017184:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	681b      	ldr	r3, [r3, #0]
 801718a:	689b      	ldr	r3, [r3, #8]
 801718c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	683a      	ldr	r2, [r7, #0]
 8017196:	430a      	orrs	r2, r1
 8017198:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801719a:	6878      	ldr	r0, [r7, #4]
 801719c:	f000 f850 	bl	8017240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	68fa      	ldr	r2, [r7, #12]
 80171a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	2220      	movs	r2, #32
 80171ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	2200      	movs	r2, #0
 80171b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80171b8:	2300      	movs	r3, #0
}
 80171ba:	4618      	mov	r0, r3
 80171bc:	3710      	adds	r7, #16
 80171be:	46bd      	mov	sp, r7
 80171c0:	bd80      	pop	{r7, pc}

080171c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80171c2:	b580      	push	{r7, lr}
 80171c4:	b084      	sub	sp, #16
 80171c6:	af00      	add	r7, sp, #0
 80171c8:	6078      	str	r0, [r7, #4]
 80171ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80171d2:	2b01      	cmp	r3, #1
 80171d4:	d101      	bne.n	80171da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80171d6:	2302      	movs	r3, #2
 80171d8:	e02d      	b.n	8017236 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	2201      	movs	r2, #1
 80171de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	2224      	movs	r2, #36	; 0x24
 80171e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	681a      	ldr	r2, [r3, #0]
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	f022 0201 	bic.w	r2, r2, #1
 8017200:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	689b      	ldr	r3, [r3, #8]
 8017208:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	683a      	ldr	r2, [r7, #0]
 8017212:	430a      	orrs	r2, r1
 8017214:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017216:	6878      	ldr	r0, [r7, #4]
 8017218:	f000 f812 	bl	8017240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	68fa      	ldr	r2, [r7, #12]
 8017222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2220      	movs	r2, #32
 8017228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	2200      	movs	r2, #0
 8017230:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8017234:	2300      	movs	r3, #0
}
 8017236:	4618      	mov	r0, r3
 8017238:	3710      	adds	r7, #16
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
	...

08017240 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8017240:	b480      	push	{r7}
 8017242:	b085      	sub	sp, #20
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801724c:	2b00      	cmp	r3, #0
 801724e:	d108      	bne.n	8017262 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	2201      	movs	r2, #1
 8017254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	2201      	movs	r2, #1
 801725c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8017260:	e031      	b.n	80172c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8017262:	2310      	movs	r3, #16
 8017264:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8017266:	2310      	movs	r3, #16
 8017268:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	689b      	ldr	r3, [r3, #8]
 8017270:	0e5b      	lsrs	r3, r3, #25
 8017272:	b2db      	uxtb	r3, r3
 8017274:	f003 0307 	and.w	r3, r3, #7
 8017278:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	689b      	ldr	r3, [r3, #8]
 8017280:	0f5b      	lsrs	r3, r3, #29
 8017282:	b2db      	uxtb	r3, r3
 8017284:	f003 0307 	and.w	r3, r3, #7
 8017288:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801728a:	7bbb      	ldrb	r3, [r7, #14]
 801728c:	7b3a      	ldrb	r2, [r7, #12]
 801728e:	4911      	ldr	r1, [pc, #68]	; (80172d4 <UARTEx_SetNbDataToProcess+0x94>)
 8017290:	5c8a      	ldrb	r2, [r1, r2]
 8017292:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8017296:	7b3a      	ldrb	r2, [r7, #12]
 8017298:	490f      	ldr	r1, [pc, #60]	; (80172d8 <UARTEx_SetNbDataToProcess+0x98>)
 801729a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801729c:	fb93 f3f2 	sdiv	r3, r3, r2
 80172a0:	b29a      	uxth	r2, r3
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80172a8:	7bfb      	ldrb	r3, [r7, #15]
 80172aa:	7b7a      	ldrb	r2, [r7, #13]
 80172ac:	4909      	ldr	r1, [pc, #36]	; (80172d4 <UARTEx_SetNbDataToProcess+0x94>)
 80172ae:	5c8a      	ldrb	r2, [r1, r2]
 80172b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80172b4:	7b7a      	ldrb	r2, [r7, #13]
 80172b6:	4908      	ldr	r1, [pc, #32]	; (80172d8 <UARTEx_SetNbDataToProcess+0x98>)
 80172b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80172ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80172be:	b29a      	uxth	r2, r3
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80172c6:	bf00      	nop
 80172c8:	3714      	adds	r7, #20
 80172ca:	46bd      	mov	sp, r7
 80172cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172d0:	4770      	bx	lr
 80172d2:	bf00      	nop
 80172d4:	08018448 	.word	0x08018448
 80172d8:	08018450 	.word	0x08018450

080172dc <__errno>:
 80172dc:	4b01      	ldr	r3, [pc, #4]	; (80172e4 <__errno+0x8>)
 80172de:	6818      	ldr	r0, [r3, #0]
 80172e0:	4770      	bx	lr
 80172e2:	bf00      	nop
 80172e4:	20000030 	.word	0x20000030

080172e8 <__libc_init_array>:
 80172e8:	b570      	push	{r4, r5, r6, lr}
 80172ea:	4d0d      	ldr	r5, [pc, #52]	; (8017320 <__libc_init_array+0x38>)
 80172ec:	4c0d      	ldr	r4, [pc, #52]	; (8017324 <__libc_init_array+0x3c>)
 80172ee:	1b64      	subs	r4, r4, r5
 80172f0:	10a4      	asrs	r4, r4, #2
 80172f2:	2600      	movs	r6, #0
 80172f4:	42a6      	cmp	r6, r4
 80172f6:	d109      	bne.n	801730c <__libc_init_array+0x24>
 80172f8:	4d0b      	ldr	r5, [pc, #44]	; (8017328 <__libc_init_array+0x40>)
 80172fa:	4c0c      	ldr	r4, [pc, #48]	; (801732c <__libc_init_array+0x44>)
 80172fc:	f001 f846 	bl	801838c <_init>
 8017300:	1b64      	subs	r4, r4, r5
 8017302:	10a4      	asrs	r4, r4, #2
 8017304:	2600      	movs	r6, #0
 8017306:	42a6      	cmp	r6, r4
 8017308:	d105      	bne.n	8017316 <__libc_init_array+0x2e>
 801730a:	bd70      	pop	{r4, r5, r6, pc}
 801730c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017310:	4798      	blx	r3
 8017312:	3601      	adds	r6, #1
 8017314:	e7ee      	b.n	80172f4 <__libc_init_array+0xc>
 8017316:	f855 3b04 	ldr.w	r3, [r5], #4
 801731a:	4798      	blx	r3
 801731c:	3601      	adds	r6, #1
 801731e:	e7f2      	b.n	8017306 <__libc_init_array+0x1e>
 8017320:	080186a8 	.word	0x080186a8
 8017324:	080186a8 	.word	0x080186a8
 8017328:	080186a8 	.word	0x080186a8
 801732c:	080186ac 	.word	0x080186ac

08017330 <memset>:
 8017330:	4402      	add	r2, r0
 8017332:	4603      	mov	r3, r0
 8017334:	4293      	cmp	r3, r2
 8017336:	d100      	bne.n	801733a <memset+0xa>
 8017338:	4770      	bx	lr
 801733a:	f803 1b01 	strb.w	r1, [r3], #1
 801733e:	e7f9      	b.n	8017334 <memset+0x4>

08017340 <cos>:
 8017340:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017342:	eeb0 7b40 	vmov.f64	d7, d0
 8017346:	ee17 3a90 	vmov	r3, s15
 801734a:	4a21      	ldr	r2, [pc, #132]	; (80173d0 <cos+0x90>)
 801734c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017350:	4293      	cmp	r3, r2
 8017352:	dc06      	bgt.n	8017362 <cos+0x22>
 8017354:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 80173c8 <cos+0x88>
 8017358:	b005      	add	sp, #20
 801735a:	f85d eb04 	ldr.w	lr, [sp], #4
 801735e:	f000 bab7 	b.w	80178d0 <__kernel_cos>
 8017362:	4a1c      	ldr	r2, [pc, #112]	; (80173d4 <cos+0x94>)
 8017364:	4293      	cmp	r3, r2
 8017366:	dd04      	ble.n	8017372 <cos+0x32>
 8017368:	ee30 0b40 	vsub.f64	d0, d0, d0
 801736c:	b005      	add	sp, #20
 801736e:	f85d fb04 	ldr.w	pc, [sp], #4
 8017372:	4668      	mov	r0, sp
 8017374:	f000 f964 	bl	8017640 <__ieee754_rem_pio2>
 8017378:	f000 0003 	and.w	r0, r0, #3
 801737c:	2801      	cmp	r0, #1
 801737e:	d009      	beq.n	8017394 <cos+0x54>
 8017380:	2802      	cmp	r0, #2
 8017382:	d010      	beq.n	80173a6 <cos+0x66>
 8017384:	b9b0      	cbnz	r0, 80173b4 <cos+0x74>
 8017386:	ed9d 1b02 	vldr	d1, [sp, #8]
 801738a:	ed9d 0b00 	vldr	d0, [sp]
 801738e:	f000 fa9f 	bl	80178d0 <__kernel_cos>
 8017392:	e7eb      	b.n	801736c <cos+0x2c>
 8017394:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017398:	ed9d 0b00 	vldr	d0, [sp]
 801739c:	f000 fd9c 	bl	8017ed8 <__kernel_sin>
 80173a0:	eeb1 0b40 	vneg.f64	d0, d0
 80173a4:	e7e2      	b.n	801736c <cos+0x2c>
 80173a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80173aa:	ed9d 0b00 	vldr	d0, [sp]
 80173ae:	f000 fa8f 	bl	80178d0 <__kernel_cos>
 80173b2:	e7f5      	b.n	80173a0 <cos+0x60>
 80173b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80173b8:	ed9d 0b00 	vldr	d0, [sp]
 80173bc:	2001      	movs	r0, #1
 80173be:	f000 fd8b 	bl	8017ed8 <__kernel_sin>
 80173c2:	e7d3      	b.n	801736c <cos+0x2c>
 80173c4:	f3af 8000 	nop.w
	...
 80173d0:	3fe921fb 	.word	0x3fe921fb
 80173d4:	7fefffff 	.word	0x7fefffff

080173d8 <sin>:
 80173d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80173da:	eeb0 7b40 	vmov.f64	d7, d0
 80173de:	ee17 3a90 	vmov	r3, s15
 80173e2:	4a21      	ldr	r2, [pc, #132]	; (8017468 <sin+0x90>)
 80173e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80173e8:	4293      	cmp	r3, r2
 80173ea:	dc07      	bgt.n	80173fc <sin+0x24>
 80173ec:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8017460 <sin+0x88>
 80173f0:	2000      	movs	r0, #0
 80173f2:	b005      	add	sp, #20
 80173f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80173f8:	f000 bd6e 	b.w	8017ed8 <__kernel_sin>
 80173fc:	4a1b      	ldr	r2, [pc, #108]	; (801746c <sin+0x94>)
 80173fe:	4293      	cmp	r3, r2
 8017400:	dd04      	ble.n	801740c <sin+0x34>
 8017402:	ee30 0b40 	vsub.f64	d0, d0, d0
 8017406:	b005      	add	sp, #20
 8017408:	f85d fb04 	ldr.w	pc, [sp], #4
 801740c:	4668      	mov	r0, sp
 801740e:	f000 f917 	bl	8017640 <__ieee754_rem_pio2>
 8017412:	f000 0003 	and.w	r0, r0, #3
 8017416:	2801      	cmp	r0, #1
 8017418:	d00a      	beq.n	8017430 <sin+0x58>
 801741a:	2802      	cmp	r0, #2
 801741c:	d00f      	beq.n	801743e <sin+0x66>
 801741e:	b9c0      	cbnz	r0, 8017452 <sin+0x7a>
 8017420:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017424:	ed9d 0b00 	vldr	d0, [sp]
 8017428:	2001      	movs	r0, #1
 801742a:	f000 fd55 	bl	8017ed8 <__kernel_sin>
 801742e:	e7ea      	b.n	8017406 <sin+0x2e>
 8017430:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017434:	ed9d 0b00 	vldr	d0, [sp]
 8017438:	f000 fa4a 	bl	80178d0 <__kernel_cos>
 801743c:	e7e3      	b.n	8017406 <sin+0x2e>
 801743e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017442:	ed9d 0b00 	vldr	d0, [sp]
 8017446:	2001      	movs	r0, #1
 8017448:	f000 fd46 	bl	8017ed8 <__kernel_sin>
 801744c:	eeb1 0b40 	vneg.f64	d0, d0
 8017450:	e7d9      	b.n	8017406 <sin+0x2e>
 8017452:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017456:	ed9d 0b00 	vldr	d0, [sp]
 801745a:	f000 fa39 	bl	80178d0 <__kernel_cos>
 801745e:	e7f5      	b.n	801744c <sin+0x74>
	...
 8017468:	3fe921fb 	.word	0x3fe921fb
 801746c:	7fefffff 	.word	0x7fefffff

08017470 <atan2>:
 8017470:	f000 b822 	b.w	80174b8 <__ieee754_atan2>
 8017474:	0000      	movs	r0, r0
	...

08017478 <sqrt>:
 8017478:	b508      	push	{r3, lr}
 801747a:	ed2d 8b04 	vpush	{d8-d9}
 801747e:	eeb0 8b40 	vmov.f64	d8, d0
 8017482:	f000 fa21 	bl	80178c8 <__ieee754_sqrt>
 8017486:	eeb4 8b48 	vcmp.f64	d8, d8
 801748a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801748e:	d60c      	bvs.n	80174aa <sqrt+0x32>
 8017490:	ed9f 9b07 	vldr	d9, [pc, #28]	; 80174b0 <sqrt+0x38>
 8017494:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8017498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801749c:	d505      	bpl.n	80174aa <sqrt+0x32>
 801749e:	f7ff ff1d 	bl	80172dc <__errno>
 80174a2:	ee89 0b09 	vdiv.f64	d0, d9, d9
 80174a6:	2321      	movs	r3, #33	; 0x21
 80174a8:	6003      	str	r3, [r0, #0]
 80174aa:	ecbd 8b04 	vpop	{d8-d9}
 80174ae:	bd08      	pop	{r3, pc}
	...

080174b8 <__ieee754_atan2>:
 80174b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ba:	eeb0 7b40 	vmov.f64	d7, d0
 80174be:	ee11 6a10 	vmov	r6, s2
 80174c2:	ee11 0a90 	vmov	r0, s3
 80174c6:	4273      	negs	r3, r6
 80174c8:	4f59      	ldr	r7, [pc, #356]	; (8017630 <__ieee754_atan2+0x178>)
 80174ca:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80174ce:	4333      	orrs	r3, r6
 80174d0:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80174d4:	42bb      	cmp	r3, r7
 80174d6:	d80d      	bhi.n	80174f4 <__ieee754_atan2+0x3c>
 80174d8:	ee10 ca10 	vmov	ip, s0
 80174dc:	ee17 5a90 	vmov	r5, s15
 80174e0:	f1cc 0100 	rsb	r1, ip, #0
 80174e4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80174e8:	ea41 010c 	orr.w	r1, r1, ip
 80174ec:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 80174f0:	42b9      	cmp	r1, r7
 80174f2:	d904      	bls.n	80174fe <__ieee754_atan2+0x46>
 80174f4:	ee37 7b01 	vadd.f64	d7, d7, d1
 80174f8:	eeb0 0b47 	vmov.f64	d0, d7
 80174fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174fe:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 8017502:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 8017506:	4331      	orrs	r1, r6
 8017508:	d103      	bne.n	8017512 <__ieee754_atan2+0x5a>
 801750a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801750e:	f000 bd3b 	b.w	8017f88 <atan>
 8017512:	1784      	asrs	r4, r0, #30
 8017514:	f004 0402 	and.w	r4, r4, #2
 8017518:	ea53 010c 	orrs.w	r1, r3, ip
 801751c:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 8017520:	d107      	bne.n	8017532 <__ieee754_atan2+0x7a>
 8017522:	2c02      	cmp	r4, #2
 8017524:	d05d      	beq.n	80175e2 <__ieee754_atan2+0x12a>
 8017526:	ed9f 6b34 	vldr	d6, [pc, #208]	; 80175f8 <__ieee754_atan2+0x140>
 801752a:	2c03      	cmp	r4, #3
 801752c:	fe06 7b00 	vseleq.f64	d7, d6, d0
 8017530:	e7e2      	b.n	80174f8 <__ieee754_atan2+0x40>
 8017532:	ea52 0106 	orrs.w	r1, r2, r6
 8017536:	d107      	bne.n	8017548 <__ieee754_atan2+0x90>
 8017538:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8017600 <__ieee754_atan2+0x148>
 801753c:	ed9f 0b32 	vldr	d0, [pc, #200]	; 8017608 <__ieee754_atan2+0x150>
 8017540:	2d00      	cmp	r5, #0
 8017542:	fe27 7b00 	vselge.f64	d7, d7, d0
 8017546:	e7d7      	b.n	80174f8 <__ieee754_atan2+0x40>
 8017548:	42ba      	cmp	r2, r7
 801754a:	d10f      	bne.n	801756c <__ieee754_atan2+0xb4>
 801754c:	4293      	cmp	r3, r2
 801754e:	f104 34ff 	add.w	r4, r4, #4294967295
 8017552:	d107      	bne.n	8017564 <__ieee754_atan2+0xac>
 8017554:	2c02      	cmp	r4, #2
 8017556:	d847      	bhi.n	80175e8 <__ieee754_atan2+0x130>
 8017558:	4b36      	ldr	r3, [pc, #216]	; (8017634 <__ieee754_atan2+0x17c>)
 801755a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801755e:	ed94 7b00 	vldr	d7, [r4]
 8017562:	e7c9      	b.n	80174f8 <__ieee754_atan2+0x40>
 8017564:	2c02      	cmp	r4, #2
 8017566:	d842      	bhi.n	80175ee <__ieee754_atan2+0x136>
 8017568:	4b33      	ldr	r3, [pc, #204]	; (8017638 <__ieee754_atan2+0x180>)
 801756a:	e7f6      	b.n	801755a <__ieee754_atan2+0xa2>
 801756c:	42bb      	cmp	r3, r7
 801756e:	d0e3      	beq.n	8017538 <__ieee754_atan2+0x80>
 8017570:	1a9b      	subs	r3, r3, r2
 8017572:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8017576:	ea4f 5223 	mov.w	r2, r3, asr #20
 801757a:	da1a      	bge.n	80175b2 <__ieee754_atan2+0xfa>
 801757c:	2800      	cmp	r0, #0
 801757e:	da01      	bge.n	8017584 <__ieee754_atan2+0xcc>
 8017580:	323c      	adds	r2, #60	; 0x3c
 8017582:	db19      	blt.n	80175b8 <__ieee754_atan2+0x100>
 8017584:	ee87 0b01 	vdiv.f64	d0, d7, d1
 8017588:	f000 fdf8 	bl	801817c <fabs>
 801758c:	f000 fcfc 	bl	8017f88 <atan>
 8017590:	eeb0 7b40 	vmov.f64	d7, d0
 8017594:	2c01      	cmp	r4, #1
 8017596:	d012      	beq.n	80175be <__ieee754_atan2+0x106>
 8017598:	2c02      	cmp	r4, #2
 801759a:	d019      	beq.n	80175d0 <__ieee754_atan2+0x118>
 801759c:	2c00      	cmp	r4, #0
 801759e:	d0ab      	beq.n	80174f8 <__ieee754_atan2+0x40>
 80175a0:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8017610 <__ieee754_atan2+0x158>
 80175a4:	ee37 7b40 	vsub.f64	d7, d7, d0
 80175a8:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 8017618 <__ieee754_atan2+0x160>
 80175ac:	ee37 7b40 	vsub.f64	d7, d7, d0
 80175b0:	e7a2      	b.n	80174f8 <__ieee754_atan2+0x40>
 80175b2:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8017600 <__ieee754_atan2+0x148>
 80175b6:	e7ed      	b.n	8017594 <__ieee754_atan2+0xdc>
 80175b8:	ed9f 7b19 	vldr	d7, [pc, #100]	; 8017620 <__ieee754_atan2+0x168>
 80175bc:	e7ea      	b.n	8017594 <__ieee754_atan2+0xdc>
 80175be:	ee17 1a90 	vmov	r1, s15
 80175c2:	ec53 2b17 	vmov	r2, r3, d7
 80175c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80175ca:	ec43 2b17 	vmov	d7, r2, r3
 80175ce:	e793      	b.n	80174f8 <__ieee754_atan2+0x40>
 80175d0:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8017610 <__ieee754_atan2+0x158>
 80175d4:	ee37 7b40 	vsub.f64	d7, d7, d0
 80175d8:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 8017618 <__ieee754_atan2+0x160>
 80175dc:	ee30 7b47 	vsub.f64	d7, d0, d7
 80175e0:	e78a      	b.n	80174f8 <__ieee754_atan2+0x40>
 80175e2:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8017618 <__ieee754_atan2+0x160>
 80175e6:	e787      	b.n	80174f8 <__ieee754_atan2+0x40>
 80175e8:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 8017628 <__ieee754_atan2+0x170>
 80175ec:	e784      	b.n	80174f8 <__ieee754_atan2+0x40>
 80175ee:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8017620 <__ieee754_atan2+0x168>
 80175f2:	e781      	b.n	80174f8 <__ieee754_atan2+0x40>
 80175f4:	f3af 8000 	nop.w
 80175f8:	54442d18 	.word	0x54442d18
 80175fc:	c00921fb 	.word	0xc00921fb
 8017600:	54442d18 	.word	0x54442d18
 8017604:	3ff921fb 	.word	0x3ff921fb
 8017608:	54442d18 	.word	0x54442d18
 801760c:	bff921fb 	.word	0xbff921fb
 8017610:	33145c07 	.word	0x33145c07
 8017614:	3ca1a626 	.word	0x3ca1a626
 8017618:	54442d18 	.word	0x54442d18
 801761c:	400921fb 	.word	0x400921fb
	...
 8017628:	54442d18 	.word	0x54442d18
 801762c:	3fe921fb 	.word	0x3fe921fb
 8017630:	7ff00000 	.word	0x7ff00000
 8017634:	08018458 	.word	0x08018458
 8017638:	08018470 	.word	0x08018470
 801763c:	00000000 	.word	0x00000000

08017640 <__ieee754_rem_pio2>:
 8017640:	b570      	push	{r4, r5, r6, lr}
 8017642:	eeb0 7b40 	vmov.f64	d7, d0
 8017646:	ee17 5a90 	vmov	r5, s15
 801764a:	4b99      	ldr	r3, [pc, #612]	; (80178b0 <__ieee754_rem_pio2+0x270>)
 801764c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017650:	429e      	cmp	r6, r3
 8017652:	b088      	sub	sp, #32
 8017654:	4604      	mov	r4, r0
 8017656:	dc07      	bgt.n	8017668 <__ieee754_rem_pio2+0x28>
 8017658:	2200      	movs	r2, #0
 801765a:	2300      	movs	r3, #0
 801765c:	ed84 0b00 	vstr	d0, [r4]
 8017660:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017664:	2000      	movs	r0, #0
 8017666:	e01b      	b.n	80176a0 <__ieee754_rem_pio2+0x60>
 8017668:	4b92      	ldr	r3, [pc, #584]	; (80178b4 <__ieee754_rem_pio2+0x274>)
 801766a:	429e      	cmp	r6, r3
 801766c:	dc3b      	bgt.n	80176e6 <__ieee754_rem_pio2+0xa6>
 801766e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8017672:	2d00      	cmp	r5, #0
 8017674:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8017870 <__ieee754_rem_pio2+0x230>
 8017678:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801767c:	dd19      	ble.n	80176b2 <__ieee754_rem_pio2+0x72>
 801767e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8017682:	429e      	cmp	r6, r3
 8017684:	d00e      	beq.n	80176a4 <__ieee754_rem_pio2+0x64>
 8017686:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8017878 <__ieee754_rem_pio2+0x238>
 801768a:	ee37 5b46 	vsub.f64	d5, d7, d6
 801768e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8017692:	ed84 5b00 	vstr	d5, [r4]
 8017696:	ee37 7b46 	vsub.f64	d7, d7, d6
 801769a:	ed84 7b02 	vstr	d7, [r4, #8]
 801769e:	2001      	movs	r0, #1
 80176a0:	b008      	add	sp, #32
 80176a2:	bd70      	pop	{r4, r5, r6, pc}
 80176a4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017880 <__ieee754_rem_pio2+0x240>
 80176a8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80176ac:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8017888 <__ieee754_rem_pio2+0x248>
 80176b0:	e7eb      	b.n	801768a <__ieee754_rem_pio2+0x4a>
 80176b2:	429e      	cmp	r6, r3
 80176b4:	ee30 7b06 	vadd.f64	d7, d0, d6
 80176b8:	d00e      	beq.n	80176d8 <__ieee754_rem_pio2+0x98>
 80176ba:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8017878 <__ieee754_rem_pio2+0x238>
 80176be:	ee37 5b06 	vadd.f64	d5, d7, d6
 80176c2:	ee37 7b45 	vsub.f64	d7, d7, d5
 80176c6:	ed84 5b00 	vstr	d5, [r4]
 80176ca:	ee37 7b06 	vadd.f64	d7, d7, d6
 80176ce:	f04f 30ff 	mov.w	r0, #4294967295
 80176d2:	ed84 7b02 	vstr	d7, [r4, #8]
 80176d6:	e7e3      	b.n	80176a0 <__ieee754_rem_pio2+0x60>
 80176d8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017880 <__ieee754_rem_pio2+0x240>
 80176dc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80176e0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8017888 <__ieee754_rem_pio2+0x248>
 80176e4:	e7eb      	b.n	80176be <__ieee754_rem_pio2+0x7e>
 80176e6:	4b74      	ldr	r3, [pc, #464]	; (80178b8 <__ieee754_rem_pio2+0x278>)
 80176e8:	429e      	cmp	r6, r3
 80176ea:	dc70      	bgt.n	80177ce <__ieee754_rem_pio2+0x18e>
 80176ec:	f000 fd46 	bl	801817c <fabs>
 80176f0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80176f4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8017890 <__ieee754_rem_pio2+0x250>
 80176f8:	eea0 7b06 	vfma.f64	d7, d0, d6
 80176fc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8017700:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8017704:	ee17 0a90 	vmov	r0, s15
 8017708:	eeb1 4b45 	vneg.f64	d4, d5
 801770c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017870 <__ieee754_rem_pio2+0x230>
 8017710:	eea5 0b47 	vfms.f64	d0, d5, d7
 8017714:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8017878 <__ieee754_rem_pio2+0x238>
 8017718:	281f      	cmp	r0, #31
 801771a:	ee25 7b07 	vmul.f64	d7, d5, d7
 801771e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8017722:	dc08      	bgt.n	8017736 <__ieee754_rem_pio2+0xf6>
 8017724:	4b65      	ldr	r3, [pc, #404]	; (80178bc <__ieee754_rem_pio2+0x27c>)
 8017726:	1e42      	subs	r2, r0, #1
 8017728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801772c:	42b3      	cmp	r3, r6
 801772e:	d002      	beq.n	8017736 <__ieee754_rem_pio2+0xf6>
 8017730:	ed84 6b00 	vstr	d6, [r4]
 8017734:	e026      	b.n	8017784 <__ieee754_rem_pio2+0x144>
 8017736:	ee16 3a90 	vmov	r3, s13
 801773a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801773e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8017742:	2b10      	cmp	r3, #16
 8017744:	ea4f 5226 	mov.w	r2, r6, asr #20
 8017748:	ddf2      	ble.n	8017730 <__ieee754_rem_pio2+0xf0>
 801774a:	eeb0 6b40 	vmov.f64	d6, d0
 801774e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8017880 <__ieee754_rem_pio2+0x240>
 8017752:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8017888 <__ieee754_rem_pio2+0x248>
 8017756:	eea4 6b07 	vfma.f64	d6, d4, d7
 801775a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801775e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8017762:	eeb0 7b40 	vmov.f64	d7, d0
 8017766:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801776a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801776e:	ee13 3a90 	vmov	r3, s7
 8017772:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8017776:	1ad3      	subs	r3, r2, r3
 8017778:	2b31      	cmp	r3, #49	; 0x31
 801777a:	dc17      	bgt.n	80177ac <__ieee754_rem_pio2+0x16c>
 801777c:	eeb0 0b46 	vmov.f64	d0, d6
 8017780:	ed84 3b00 	vstr	d3, [r4]
 8017784:	ed94 6b00 	vldr	d6, [r4]
 8017788:	2d00      	cmp	r5, #0
 801778a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801778e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8017792:	ed84 0b02 	vstr	d0, [r4, #8]
 8017796:	da83      	bge.n	80176a0 <__ieee754_rem_pio2+0x60>
 8017798:	eeb1 6b46 	vneg.f64	d6, d6
 801779c:	eeb1 0b40 	vneg.f64	d0, d0
 80177a0:	ed84 6b00 	vstr	d6, [r4]
 80177a4:	ed84 0b02 	vstr	d0, [r4, #8]
 80177a8:	4240      	negs	r0, r0
 80177aa:	e779      	b.n	80176a0 <__ieee754_rem_pio2+0x60>
 80177ac:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8017898 <__ieee754_rem_pio2+0x258>
 80177b0:	eeb0 0b46 	vmov.f64	d0, d6
 80177b4:	eea4 0b03 	vfma.f64	d0, d4, d3
 80177b8:	ee36 7b40 	vsub.f64	d7, d6, d0
 80177bc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80178a0 <__ieee754_rem_pio2+0x260>
 80177c0:	eea4 7b03 	vfma.f64	d7, d4, d3
 80177c4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 80177c8:	ee30 6b47 	vsub.f64	d6, d0, d7
 80177cc:	e7b0      	b.n	8017730 <__ieee754_rem_pio2+0xf0>
 80177ce:	4b3c      	ldr	r3, [pc, #240]	; (80178c0 <__ieee754_rem_pio2+0x280>)
 80177d0:	429e      	cmp	r6, r3
 80177d2:	dd06      	ble.n	80177e2 <__ieee754_rem_pio2+0x1a2>
 80177d4:	ee30 7b40 	vsub.f64	d7, d0, d0
 80177d8:	ed80 7b02 	vstr	d7, [r0, #8]
 80177dc:	ed80 7b00 	vstr	d7, [r0]
 80177e0:	e740      	b.n	8017664 <__ieee754_rem_pio2+0x24>
 80177e2:	1532      	asrs	r2, r6, #20
 80177e4:	ee10 0a10 	vmov	r0, s0
 80177e8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 80177ec:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 80177f0:	ec41 0b17 	vmov	d7, r0, r1
 80177f4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 80177f8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 80178a8 <__ieee754_rem_pio2+0x268>
 80177fc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017800:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017804:	ed8d 6b02 	vstr	d6, [sp, #8]
 8017808:	ee27 7b05 	vmul.f64	d7, d7, d5
 801780c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8017810:	a902      	add	r1, sp, #8
 8017812:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8017816:	ee37 7b46 	vsub.f64	d7, d7, d6
 801781a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801781e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017822:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017826:	2603      	movs	r6, #3
 8017828:	4608      	mov	r0, r1
 801782a:	ed91 7b04 	vldr	d7, [r1, #16]
 801782e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8017832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017836:	4633      	mov	r3, r6
 8017838:	f1a1 0108 	sub.w	r1, r1, #8
 801783c:	f106 36ff 	add.w	r6, r6, #4294967295
 8017840:	d0f3      	beq.n	801782a <__ieee754_rem_pio2+0x1ea>
 8017842:	4920      	ldr	r1, [pc, #128]	; (80178c4 <__ieee754_rem_pio2+0x284>)
 8017844:	9101      	str	r1, [sp, #4]
 8017846:	2102      	movs	r1, #2
 8017848:	9100      	str	r1, [sp, #0]
 801784a:	4621      	mov	r1, r4
 801784c:	f000 f8ac 	bl	80179a8 <__kernel_rem_pio2>
 8017850:	2d00      	cmp	r5, #0
 8017852:	f6bf af25 	bge.w	80176a0 <__ieee754_rem_pio2+0x60>
 8017856:	ed94 7b00 	vldr	d7, [r4]
 801785a:	eeb1 7b47 	vneg.f64	d7, d7
 801785e:	ed84 7b00 	vstr	d7, [r4]
 8017862:	ed94 7b02 	vldr	d7, [r4, #8]
 8017866:	eeb1 7b47 	vneg.f64	d7, d7
 801786a:	ed84 7b02 	vstr	d7, [r4, #8]
 801786e:	e79b      	b.n	80177a8 <__ieee754_rem_pio2+0x168>
 8017870:	54400000 	.word	0x54400000
 8017874:	3ff921fb 	.word	0x3ff921fb
 8017878:	1a626331 	.word	0x1a626331
 801787c:	3dd0b461 	.word	0x3dd0b461
 8017880:	1a600000 	.word	0x1a600000
 8017884:	3dd0b461 	.word	0x3dd0b461
 8017888:	2e037073 	.word	0x2e037073
 801788c:	3ba3198a 	.word	0x3ba3198a
 8017890:	6dc9c883 	.word	0x6dc9c883
 8017894:	3fe45f30 	.word	0x3fe45f30
 8017898:	2e000000 	.word	0x2e000000
 801789c:	3ba3198a 	.word	0x3ba3198a
 80178a0:	252049c1 	.word	0x252049c1
 80178a4:	397b839a 	.word	0x397b839a
 80178a8:	00000000 	.word	0x00000000
 80178ac:	41700000 	.word	0x41700000
 80178b0:	3fe921fb 	.word	0x3fe921fb
 80178b4:	4002d97b 	.word	0x4002d97b
 80178b8:	413921fb 	.word	0x413921fb
 80178bc:	08018488 	.word	0x08018488
 80178c0:	7fefffff 	.word	0x7fefffff
 80178c4:	08018508 	.word	0x08018508

080178c8 <__ieee754_sqrt>:
 80178c8:	eeb1 0bc0 	vsqrt.f64	d0, d0
 80178cc:	4770      	bx	lr
	...

080178d0 <__kernel_cos>:
 80178d0:	ee10 1a90 	vmov	r1, s1
 80178d4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 80178d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80178dc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 80178e0:	da05      	bge.n	80178ee <__kernel_cos+0x1e>
 80178e2:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80178e6:	ee17 3a90 	vmov	r3, s15
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d03d      	beq.n	801796a <__kernel_cos+0x9a>
 80178ee:	ee20 3b00 	vmul.f64	d3, d0, d0
 80178f2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8017970 <__kernel_cos+0xa0>
 80178f6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017978 <__kernel_cos+0xa8>
 80178fa:	eea3 6b07 	vfma.f64	d6, d3, d7
 80178fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017980 <__kernel_cos+0xb0>
 8017902:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017906:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8017988 <__kernel_cos+0xb8>
 801790a:	eea7 6b03 	vfma.f64	d6, d7, d3
 801790e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8017990 <__kernel_cos+0xc0>
 8017912:	4b23      	ldr	r3, [pc, #140]	; (80179a0 <__kernel_cos+0xd0>)
 8017914:	eea6 7b03 	vfma.f64	d7, d6, d3
 8017918:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8017998 <__kernel_cos+0xc8>
 801791c:	4299      	cmp	r1, r3
 801791e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8017922:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017926:	ee26 5b03 	vmul.f64	d5, d6, d3
 801792a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801792e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8017932:	eea3 6b05 	vfma.f64	d6, d3, d5
 8017936:	dc04      	bgt.n	8017942 <__kernel_cos+0x72>
 8017938:	ee37 6b46 	vsub.f64	d6, d7, d6
 801793c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8017940:	4770      	bx	lr
 8017942:	4b18      	ldr	r3, [pc, #96]	; (80179a4 <__kernel_cos+0xd4>)
 8017944:	4299      	cmp	r1, r3
 8017946:	dc0d      	bgt.n	8017964 <__kernel_cos+0x94>
 8017948:	2200      	movs	r2, #0
 801794a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801794e:	ec43 2b15 	vmov	d5, r2, r3
 8017952:	ee34 0b45 	vsub.f64	d0, d4, d5
 8017956:	ee37 7b45 	vsub.f64	d7, d7, d5
 801795a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801795e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8017962:	4770      	bx	lr
 8017964:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8017968:	e7f3      	b.n	8017952 <__kernel_cos+0x82>
 801796a:	eeb0 0b44 	vmov.f64	d0, d4
 801796e:	4770      	bx	lr
 8017970:	be8838d4 	.word	0xbe8838d4
 8017974:	bda8fae9 	.word	0xbda8fae9
 8017978:	bdb4b1c4 	.word	0xbdb4b1c4
 801797c:	3e21ee9e 	.word	0x3e21ee9e
 8017980:	809c52ad 	.word	0x809c52ad
 8017984:	be927e4f 	.word	0xbe927e4f
 8017988:	19cb1590 	.word	0x19cb1590
 801798c:	3efa01a0 	.word	0x3efa01a0
 8017990:	16c15177 	.word	0x16c15177
 8017994:	bf56c16c 	.word	0xbf56c16c
 8017998:	5555554c 	.word	0x5555554c
 801799c:	3fa55555 	.word	0x3fa55555
 80179a0:	3fd33332 	.word	0x3fd33332
 80179a4:	3fe90000 	.word	0x3fe90000

080179a8 <__kernel_rem_pio2>:
 80179a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179ac:	ed2d 8b06 	vpush	{d8-d10}
 80179b0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 80179b4:	460f      	mov	r7, r1
 80179b6:	9002      	str	r0, [sp, #8]
 80179b8:	49c5      	ldr	r1, [pc, #788]	; (8017cd0 <__kernel_rem_pio2+0x328>)
 80179ba:	98a2      	ldr	r0, [sp, #648]	; 0x288
 80179bc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 80179c0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 80179c4:	9301      	str	r3, [sp, #4]
 80179c6:	f112 0f14 	cmn.w	r2, #20
 80179ca:	bfa8      	it	ge
 80179cc:	2018      	movge	r0, #24
 80179ce:	f103 31ff 	add.w	r1, r3, #4294967295
 80179d2:	bfb8      	it	lt
 80179d4:	2000      	movlt	r0, #0
 80179d6:	f06f 0417 	mvn.w	r4, #23
 80179da:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8017cb8 <__kernel_rem_pio2+0x310>
 80179de:	bfa4      	itt	ge
 80179e0:	f1a2 0a03 	subge.w	sl, r2, #3
 80179e4:	fb9a f0f0 	sdivge	r0, sl, r0
 80179e8:	fb00 4404 	mla	r4, r0, r4, r4
 80179ec:	1a46      	subs	r6, r0, r1
 80179ee:	4414      	add	r4, r2
 80179f0:	eb09 0c01 	add.w	ip, r9, r1
 80179f4:	ad1a      	add	r5, sp, #104	; 0x68
 80179f6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80179fa:	2200      	movs	r2, #0
 80179fc:	4562      	cmp	r2, ip
 80179fe:	dd10      	ble.n	8017a22 <__kernel_rem_pio2+0x7a>
 8017a00:	9a01      	ldr	r2, [sp, #4]
 8017a02:	ab1a      	add	r3, sp, #104	; 0x68
 8017a04:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8017a08:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8017a0c:	f04f 0c00 	mov.w	ip, #0
 8017a10:	45cc      	cmp	ip, r9
 8017a12:	dc26      	bgt.n	8017a62 <__kernel_rem_pio2+0xba>
 8017a14:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8017cb8 <__kernel_rem_pio2+0x310>
 8017a18:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8017a1c:	4616      	mov	r6, r2
 8017a1e:	2500      	movs	r5, #0
 8017a20:	e015      	b.n	8017a4e <__kernel_rem_pio2+0xa6>
 8017a22:	42d6      	cmn	r6, r2
 8017a24:	d409      	bmi.n	8017a3a <__kernel_rem_pio2+0x92>
 8017a26:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8017a2a:	ee07 3a90 	vmov	s15, r3
 8017a2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017a32:	eca5 7b02 	vstmia	r5!, {d7}
 8017a36:	3201      	adds	r2, #1
 8017a38:	e7e0      	b.n	80179fc <__kernel_rem_pio2+0x54>
 8017a3a:	eeb0 7b46 	vmov.f64	d7, d6
 8017a3e:	e7f8      	b.n	8017a32 <__kernel_rem_pio2+0x8a>
 8017a40:	ecb8 5b02 	vldmia	r8!, {d5}
 8017a44:	ed96 6b00 	vldr	d6, [r6]
 8017a48:	3501      	adds	r5, #1
 8017a4a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017a4e:	428d      	cmp	r5, r1
 8017a50:	f1a6 0608 	sub.w	r6, r6, #8
 8017a54:	ddf4      	ble.n	8017a40 <__kernel_rem_pio2+0x98>
 8017a56:	ecaa 7b02 	vstmia	sl!, {d7}
 8017a5a:	f10c 0c01 	add.w	ip, ip, #1
 8017a5e:	3208      	adds	r2, #8
 8017a60:	e7d6      	b.n	8017a10 <__kernel_rem_pio2+0x68>
 8017a62:	ab06      	add	r3, sp, #24
 8017a64:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8017cc0 <__kernel_rem_pio2+0x318>
 8017a68:	ed9f ab97 	vldr	d10, [pc, #604]	; 8017cc8 <__kernel_rem_pio2+0x320>
 8017a6c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8017a70:	9303      	str	r3, [sp, #12]
 8017a72:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8017a76:	464d      	mov	r5, r9
 8017a78:	00eb      	lsls	r3, r5, #3
 8017a7a:	9304      	str	r3, [sp, #16]
 8017a7c:	ab92      	add	r3, sp, #584	; 0x248
 8017a7e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8017a82:	f10d 0b18 	add.w	fp, sp, #24
 8017a86:	ab6a      	add	r3, sp, #424	; 0x1a8
 8017a88:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8017a8c:	465e      	mov	r6, fp
 8017a8e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8017a92:	4628      	mov	r0, r5
 8017a94:	2800      	cmp	r0, #0
 8017a96:	f1a2 0208 	sub.w	r2, r2, #8
 8017a9a:	dc4c      	bgt.n	8017b36 <__kernel_rem_pio2+0x18e>
 8017a9c:	4620      	mov	r0, r4
 8017a9e:	9105      	str	r1, [sp, #20]
 8017aa0:	f000 fbea 	bl	8018278 <scalbn>
 8017aa4:	eeb0 8b40 	vmov.f64	d8, d0
 8017aa8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8017aac:	ee28 0b00 	vmul.f64	d0, d8, d0
 8017ab0:	f000 fb6e 	bl	8018190 <floor>
 8017ab4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8017ab8:	eea0 8b47 	vfms.f64	d8, d0, d7
 8017abc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8017ac0:	2c00      	cmp	r4, #0
 8017ac2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8017ac6:	ee17 8a90 	vmov	r8, s15
 8017aca:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017ace:	9905      	ldr	r1, [sp, #20]
 8017ad0:	dd43      	ble.n	8017b5a <__kernel_rem_pio2+0x1b2>
 8017ad2:	1e68      	subs	r0, r5, #1
 8017ad4:	ab06      	add	r3, sp, #24
 8017ad6:	f1c4 0c18 	rsb	ip, r4, #24
 8017ada:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017ade:	fa46 f20c 	asr.w	r2, r6, ip
 8017ae2:	4490      	add	r8, r2
 8017ae4:	fa02 f20c 	lsl.w	r2, r2, ip
 8017ae8:	1ab6      	subs	r6, r6, r2
 8017aea:	f1c4 0217 	rsb	r2, r4, #23
 8017aee:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8017af2:	4116      	asrs	r6, r2
 8017af4:	2e00      	cmp	r6, #0
 8017af6:	dd3f      	ble.n	8017b78 <__kernel_rem_pio2+0x1d0>
 8017af8:	f04f 0c00 	mov.w	ip, #0
 8017afc:	f108 0801 	add.w	r8, r8, #1
 8017b00:	4660      	mov	r0, ip
 8017b02:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8017b06:	4565      	cmp	r5, ip
 8017b08:	dc6e      	bgt.n	8017be8 <__kernel_rem_pio2+0x240>
 8017b0a:	2c00      	cmp	r4, #0
 8017b0c:	dd04      	ble.n	8017b18 <__kernel_rem_pio2+0x170>
 8017b0e:	2c01      	cmp	r4, #1
 8017b10:	d07f      	beq.n	8017c12 <__kernel_rem_pio2+0x26a>
 8017b12:	2c02      	cmp	r4, #2
 8017b14:	f000 8087 	beq.w	8017c26 <__kernel_rem_pio2+0x27e>
 8017b18:	2e02      	cmp	r6, #2
 8017b1a:	d12d      	bne.n	8017b78 <__kernel_rem_pio2+0x1d0>
 8017b1c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017b20:	ee30 8b48 	vsub.f64	d8, d0, d8
 8017b24:	b340      	cbz	r0, 8017b78 <__kernel_rem_pio2+0x1d0>
 8017b26:	4620      	mov	r0, r4
 8017b28:	9105      	str	r1, [sp, #20]
 8017b2a:	f000 fba5 	bl	8018278 <scalbn>
 8017b2e:	9905      	ldr	r1, [sp, #20]
 8017b30:	ee38 8b40 	vsub.f64	d8, d8, d0
 8017b34:	e020      	b.n	8017b78 <__kernel_rem_pio2+0x1d0>
 8017b36:	ee20 7b09 	vmul.f64	d7, d0, d9
 8017b3a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017b3e:	3801      	subs	r0, #1
 8017b40:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8017b44:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8017b48:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017b4c:	eca6 0a01 	vstmia	r6!, {s0}
 8017b50:	ed92 0b00 	vldr	d0, [r2]
 8017b54:	ee37 0b00 	vadd.f64	d0, d7, d0
 8017b58:	e79c      	b.n	8017a94 <__kernel_rem_pio2+0xec>
 8017b5a:	d105      	bne.n	8017b68 <__kernel_rem_pio2+0x1c0>
 8017b5c:	1e6a      	subs	r2, r5, #1
 8017b5e:	ab06      	add	r3, sp, #24
 8017b60:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8017b64:	15f6      	asrs	r6, r6, #23
 8017b66:	e7c5      	b.n	8017af4 <__kernel_rem_pio2+0x14c>
 8017b68:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8017b6c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b74:	da36      	bge.n	8017be4 <__kernel_rem_pio2+0x23c>
 8017b76:	2600      	movs	r6, #0
 8017b78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b80:	f040 80aa 	bne.w	8017cd8 <__kernel_rem_pio2+0x330>
 8017b84:	f105 3bff 	add.w	fp, r5, #4294967295
 8017b88:	4658      	mov	r0, fp
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	4548      	cmp	r0, r9
 8017b8e:	da52      	bge.n	8017c36 <__kernel_rem_pio2+0x28e>
 8017b90:	2a00      	cmp	r2, #0
 8017b92:	f000 8081 	beq.w	8017c98 <__kernel_rem_pio2+0x2f0>
 8017b96:	ab06      	add	r3, sp, #24
 8017b98:	3c18      	subs	r4, #24
 8017b9a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	f000 8087 	beq.w	8017cb2 <__kernel_rem_pio2+0x30a>
 8017ba4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8017ba8:	4620      	mov	r0, r4
 8017baa:	f000 fb65 	bl	8018278 <scalbn>
 8017bae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8017bb2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8017cc0 <__kernel_rem_pio2+0x318>
 8017bb6:	a96a      	add	r1, sp, #424	; 0x1a8
 8017bb8:	f103 0208 	add.w	r2, r3, #8
 8017bbc:	1888      	adds	r0, r1, r2
 8017bbe:	4659      	mov	r1, fp
 8017bc0:	2900      	cmp	r1, #0
 8017bc2:	f280 80b7 	bge.w	8017d34 <__kernel_rem_pio2+0x38c>
 8017bc6:	4659      	mov	r1, fp
 8017bc8:	2900      	cmp	r1, #0
 8017bca:	f2c0 80d5 	blt.w	8017d78 <__kernel_rem_pio2+0x3d0>
 8017bce:	a86a      	add	r0, sp, #424	; 0x1a8
 8017bd0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 8017bd4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8017cb8 <__kernel_rem_pio2+0x310>
 8017bd8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8017cd4 <__kernel_rem_pio2+0x32c>
 8017bdc:	2400      	movs	r4, #0
 8017bde:	ebab 0001 	sub.w	r0, fp, r1
 8017be2:	e0be      	b.n	8017d62 <__kernel_rem_pio2+0x3ba>
 8017be4:	2602      	movs	r6, #2
 8017be6:	e787      	b.n	8017af8 <__kernel_rem_pio2+0x150>
 8017be8:	f8db 2000 	ldr.w	r2, [fp]
 8017bec:	b958      	cbnz	r0, 8017c06 <__kernel_rem_pio2+0x25e>
 8017bee:	b122      	cbz	r2, 8017bfa <__kernel_rem_pio2+0x252>
 8017bf0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8017bf4:	f8cb 2000 	str.w	r2, [fp]
 8017bf8:	2201      	movs	r2, #1
 8017bfa:	f10c 0c01 	add.w	ip, ip, #1
 8017bfe:	f10b 0b04 	add.w	fp, fp, #4
 8017c02:	4610      	mov	r0, r2
 8017c04:	e77f      	b.n	8017b06 <__kernel_rem_pio2+0x15e>
 8017c06:	ebae 0202 	sub.w	r2, lr, r2
 8017c0a:	f8cb 2000 	str.w	r2, [fp]
 8017c0e:	4602      	mov	r2, r0
 8017c10:	e7f3      	b.n	8017bfa <__kernel_rem_pio2+0x252>
 8017c12:	f105 3cff 	add.w	ip, r5, #4294967295
 8017c16:	ab06      	add	r3, sp, #24
 8017c18:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8017c1c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8017c20:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8017c24:	e778      	b.n	8017b18 <__kernel_rem_pio2+0x170>
 8017c26:	f105 3cff 	add.w	ip, r5, #4294967295
 8017c2a:	ab06      	add	r3, sp, #24
 8017c2c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8017c30:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8017c34:	e7f4      	b.n	8017c20 <__kernel_rem_pio2+0x278>
 8017c36:	ab06      	add	r3, sp, #24
 8017c38:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8017c3c:	3801      	subs	r0, #1
 8017c3e:	431a      	orrs	r2, r3
 8017c40:	e7a4      	b.n	8017b8c <__kernel_rem_pio2+0x1e4>
 8017c42:	f10c 0c01 	add.w	ip, ip, #1
 8017c46:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8017c4a:	2800      	cmp	r0, #0
 8017c4c:	d0f9      	beq.n	8017c42 <__kernel_rem_pio2+0x29a>
 8017c4e:	9b04      	ldr	r3, [sp, #16]
 8017c50:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8017c54:	eb0d 0203 	add.w	r2, sp, r3
 8017c58:	9b01      	ldr	r3, [sp, #4]
 8017c5a:	18e8      	adds	r0, r5, r3
 8017c5c:	ab1a      	add	r3, sp, #104	; 0x68
 8017c5e:	1c6e      	adds	r6, r5, #1
 8017c60:	3a98      	subs	r2, #152	; 0x98
 8017c62:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8017c66:	4465      	add	r5, ip
 8017c68:	42b5      	cmp	r5, r6
 8017c6a:	f6ff af05 	blt.w	8017a78 <__kernel_rem_pio2+0xd0>
 8017c6e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8017c72:	f8dd e008 	ldr.w	lr, [sp, #8]
 8017c76:	ee07 3a90 	vmov	s15, r3
 8017c7a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017c7e:	f04f 0c00 	mov.w	ip, #0
 8017c82:	eca0 7b02 	vstmia	r0!, {d7}
 8017c86:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8017cb8 <__kernel_rem_pio2+0x310>
 8017c8a:	4680      	mov	r8, r0
 8017c8c:	458c      	cmp	ip, r1
 8017c8e:	dd07      	ble.n	8017ca0 <__kernel_rem_pio2+0x2f8>
 8017c90:	eca2 7b02 	vstmia	r2!, {d7}
 8017c94:	3601      	adds	r6, #1
 8017c96:	e7e7      	b.n	8017c68 <__kernel_rem_pio2+0x2c0>
 8017c98:	9a03      	ldr	r2, [sp, #12]
 8017c9a:	f04f 0c01 	mov.w	ip, #1
 8017c9e:	e7d2      	b.n	8017c46 <__kernel_rem_pio2+0x29e>
 8017ca0:	ecbe 5b02 	vldmia	lr!, {d5}
 8017ca4:	ed38 6b02 	vldmdb	r8!, {d6}
 8017ca8:	f10c 0c01 	add.w	ip, ip, #1
 8017cac:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017cb0:	e7ec      	b.n	8017c8c <__kernel_rem_pio2+0x2e4>
 8017cb2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017cb6:	e76e      	b.n	8017b96 <__kernel_rem_pio2+0x1ee>
	...
 8017cc4:	3e700000 	.word	0x3e700000
 8017cc8:	00000000 	.word	0x00000000
 8017ccc:	41700000 	.word	0x41700000
 8017cd0:	08018650 	.word	0x08018650
 8017cd4:	08018610 	.word	0x08018610
 8017cd8:	4260      	negs	r0, r4
 8017cda:	eeb0 0b48 	vmov.f64	d0, d8
 8017cde:	f000 facb 	bl	8018278 <scalbn>
 8017ce2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8017ec0 <__kernel_rem_pio2+0x518>
 8017ce6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 8017cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cee:	db18      	blt.n	8017d22 <__kernel_rem_pio2+0x37a>
 8017cf0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8017ec8 <__kernel_rem_pio2+0x520>
 8017cf4:	ee20 7b07 	vmul.f64	d7, d0, d7
 8017cf8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8017cfc:	aa06      	add	r2, sp, #24
 8017cfe:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8017d02:	eea5 0b46 	vfms.f64	d0, d5, d6
 8017d06:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017d0a:	f105 0b01 	add.w	fp, r5, #1
 8017d0e:	ee10 3a10 	vmov	r3, s0
 8017d12:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017d16:	ee17 3a10 	vmov	r3, s14
 8017d1a:	3418      	adds	r4, #24
 8017d1c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8017d20:	e740      	b.n	8017ba4 <__kernel_rem_pio2+0x1fc>
 8017d22:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8017d26:	aa06      	add	r2, sp, #24
 8017d28:	ee10 3a10 	vmov	r3, s0
 8017d2c:	46ab      	mov	fp, r5
 8017d2e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8017d32:	e737      	b.n	8017ba4 <__kernel_rem_pio2+0x1fc>
 8017d34:	ac06      	add	r4, sp, #24
 8017d36:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8017d3a:	9401      	str	r4, [sp, #4]
 8017d3c:	ee07 4a90 	vmov	s15, r4
 8017d40:	3901      	subs	r1, #1
 8017d42:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8017d46:	ee27 7b00 	vmul.f64	d7, d7, d0
 8017d4a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8017d4e:	ed20 7b02 	vstmdb	r0!, {d7}
 8017d52:	e735      	b.n	8017bc0 <__kernel_rem_pio2+0x218>
 8017d54:	ecbc 5b02 	vldmia	ip!, {d5}
 8017d58:	ecb5 6b02 	vldmia	r5!, {d6}
 8017d5c:	3401      	adds	r4, #1
 8017d5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8017d62:	454c      	cmp	r4, r9
 8017d64:	dc01      	bgt.n	8017d6a <__kernel_rem_pio2+0x3c2>
 8017d66:	4284      	cmp	r4, r0
 8017d68:	ddf4      	ble.n	8017d54 <__kernel_rem_pio2+0x3ac>
 8017d6a:	ac42      	add	r4, sp, #264	; 0x108
 8017d6c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8017d70:	ed80 7b00 	vstr	d7, [r0]
 8017d74:	3901      	subs	r1, #1
 8017d76:	e727      	b.n	8017bc8 <__kernel_rem_pio2+0x220>
 8017d78:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8017d7a:	2902      	cmp	r1, #2
 8017d7c:	dc0a      	bgt.n	8017d94 <__kernel_rem_pio2+0x3ec>
 8017d7e:	2900      	cmp	r1, #0
 8017d80:	dc2c      	bgt.n	8017ddc <__kernel_rem_pio2+0x434>
 8017d82:	d045      	beq.n	8017e10 <__kernel_rem_pio2+0x468>
 8017d84:	f008 0007 	and.w	r0, r8, #7
 8017d88:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8017d8c:	ecbd 8b06 	vpop	{d8-d10}
 8017d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d94:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 8017d96:	2a03      	cmp	r2, #3
 8017d98:	d1f4      	bne.n	8017d84 <__kernel_rem_pio2+0x3dc>
 8017d9a:	aa42      	add	r2, sp, #264	; 0x108
 8017d9c:	4413      	add	r3, r2
 8017d9e:	461a      	mov	r2, r3
 8017da0:	4619      	mov	r1, r3
 8017da2:	4658      	mov	r0, fp
 8017da4:	2800      	cmp	r0, #0
 8017da6:	f1a1 0108 	sub.w	r1, r1, #8
 8017daa:	dc54      	bgt.n	8017e56 <__kernel_rem_pio2+0x4ae>
 8017dac:	4659      	mov	r1, fp
 8017dae:	2901      	cmp	r1, #1
 8017db0:	f1a2 0208 	sub.w	r2, r2, #8
 8017db4:	dc5f      	bgt.n	8017e76 <__kernel_rem_pio2+0x4ce>
 8017db6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8017ed0 <__kernel_rem_pio2+0x528>
 8017dba:	3308      	adds	r3, #8
 8017dbc:	f1bb 0f01 	cmp.w	fp, #1
 8017dc0:	dc69      	bgt.n	8017e96 <__kernel_rem_pio2+0x4ee>
 8017dc2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 8017dc6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8017dca:	2e00      	cmp	r6, #0
 8017dcc:	d16a      	bne.n	8017ea4 <__kernel_rem_pio2+0x4fc>
 8017dce:	ed87 5b00 	vstr	d5, [r7]
 8017dd2:	ed87 6b02 	vstr	d6, [r7, #8]
 8017dd6:	ed87 7b04 	vstr	d7, [r7, #16]
 8017dda:	e7d3      	b.n	8017d84 <__kernel_rem_pio2+0x3dc>
 8017ddc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8017ed0 <__kernel_rem_pio2+0x528>
 8017de0:	ab42      	add	r3, sp, #264	; 0x108
 8017de2:	441a      	add	r2, r3
 8017de4:	465b      	mov	r3, fp
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	da26      	bge.n	8017e38 <__kernel_rem_pio2+0x490>
 8017dea:	b35e      	cbz	r6, 8017e44 <__kernel_rem_pio2+0x49c>
 8017dec:	eeb1 7b46 	vneg.f64	d7, d6
 8017df0:	ed87 7b00 	vstr	d7, [r7]
 8017df4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8017df8:	aa44      	add	r2, sp, #272	; 0x110
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017e00:	459b      	cmp	fp, r3
 8017e02:	da22      	bge.n	8017e4a <__kernel_rem_pio2+0x4a2>
 8017e04:	b10e      	cbz	r6, 8017e0a <__kernel_rem_pio2+0x462>
 8017e06:	eeb1 7b47 	vneg.f64	d7, d7
 8017e0a:	ed87 7b02 	vstr	d7, [r7, #8]
 8017e0e:	e7b9      	b.n	8017d84 <__kernel_rem_pio2+0x3dc>
 8017e10:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8017ed0 <__kernel_rem_pio2+0x528>
 8017e14:	ab42      	add	r3, sp, #264	; 0x108
 8017e16:	441a      	add	r2, r3
 8017e18:	f1bb 0f00 	cmp.w	fp, #0
 8017e1c:	da05      	bge.n	8017e2a <__kernel_rem_pio2+0x482>
 8017e1e:	b10e      	cbz	r6, 8017e24 <__kernel_rem_pio2+0x47c>
 8017e20:	eeb1 7b47 	vneg.f64	d7, d7
 8017e24:	ed87 7b00 	vstr	d7, [r7]
 8017e28:	e7ac      	b.n	8017d84 <__kernel_rem_pio2+0x3dc>
 8017e2a:	ed32 6b02 	vldmdb	r2!, {d6}
 8017e2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017e32:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017e36:	e7ef      	b.n	8017e18 <__kernel_rem_pio2+0x470>
 8017e38:	ed32 7b02 	vldmdb	r2!, {d7}
 8017e3c:	3b01      	subs	r3, #1
 8017e3e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8017e42:	e7d0      	b.n	8017de6 <__kernel_rem_pio2+0x43e>
 8017e44:	eeb0 7b46 	vmov.f64	d7, d6
 8017e48:	e7d2      	b.n	8017df0 <__kernel_rem_pio2+0x448>
 8017e4a:	ecb2 6b02 	vldmia	r2!, {d6}
 8017e4e:	3301      	adds	r3, #1
 8017e50:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017e54:	e7d4      	b.n	8017e00 <__kernel_rem_pio2+0x458>
 8017e56:	ed91 7b00 	vldr	d7, [r1]
 8017e5a:	ed91 5b02 	vldr	d5, [r1, #8]
 8017e5e:	3801      	subs	r0, #1
 8017e60:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017e64:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017e68:	ed81 6b00 	vstr	d6, [r1]
 8017e6c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8017e70:	ed81 7b02 	vstr	d7, [r1, #8]
 8017e74:	e796      	b.n	8017da4 <__kernel_rem_pio2+0x3fc>
 8017e76:	ed92 7b00 	vldr	d7, [r2]
 8017e7a:	ed92 5b02 	vldr	d5, [r2, #8]
 8017e7e:	3901      	subs	r1, #1
 8017e80:	ee37 6b05 	vadd.f64	d6, d7, d5
 8017e84:	ee37 7b46 	vsub.f64	d7, d7, d6
 8017e88:	ed82 6b00 	vstr	d6, [r2]
 8017e8c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8017e90:	ed82 7b02 	vstr	d7, [r2, #8]
 8017e94:	e78b      	b.n	8017dae <__kernel_rem_pio2+0x406>
 8017e96:	ed33 6b02 	vldmdb	r3!, {d6}
 8017e9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017e9e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8017ea2:	e78b      	b.n	8017dbc <__kernel_rem_pio2+0x414>
 8017ea4:	eeb1 5b45 	vneg.f64	d5, d5
 8017ea8:	eeb1 6b46 	vneg.f64	d6, d6
 8017eac:	ed87 5b00 	vstr	d5, [r7]
 8017eb0:	eeb1 7b47 	vneg.f64	d7, d7
 8017eb4:	ed87 6b02 	vstr	d6, [r7, #8]
 8017eb8:	e78d      	b.n	8017dd6 <__kernel_rem_pio2+0x42e>
 8017eba:	bf00      	nop
 8017ebc:	f3af 8000 	nop.w
 8017ec0:	00000000 	.word	0x00000000
 8017ec4:	41700000 	.word	0x41700000
 8017ec8:	00000000 	.word	0x00000000
 8017ecc:	3e700000 	.word	0x3e700000
	...

08017ed8 <__kernel_sin>:
 8017ed8:	ee10 3a90 	vmov	r3, s1
 8017edc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017ee0:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8017ee4:	da04      	bge.n	8017ef0 <__kernel_sin+0x18>
 8017ee6:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8017eea:	ee17 3a90 	vmov	r3, s15
 8017eee:	b35b      	cbz	r3, 8017f48 <__kernel_sin+0x70>
 8017ef0:	ee20 6b00 	vmul.f64	d6, d0, d0
 8017ef4:	ee20 5b06 	vmul.f64	d5, d0, d6
 8017ef8:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8017f50 <__kernel_sin+0x78>
 8017efc:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017f58 <__kernel_sin+0x80>
 8017f00:	eea6 4b07 	vfma.f64	d4, d6, d7
 8017f04:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8017f60 <__kernel_sin+0x88>
 8017f08:	eea4 7b06 	vfma.f64	d7, d4, d6
 8017f0c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017f68 <__kernel_sin+0x90>
 8017f10:	eea7 4b06 	vfma.f64	d4, d7, d6
 8017f14:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8017f70 <__kernel_sin+0x98>
 8017f18:	eea4 7b06 	vfma.f64	d7, d4, d6
 8017f1c:	b930      	cbnz	r0, 8017f2c <__kernel_sin+0x54>
 8017f1e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8017f78 <__kernel_sin+0xa0>
 8017f22:	eea6 4b07 	vfma.f64	d4, d6, d7
 8017f26:	eea4 0b05 	vfma.f64	d0, d4, d5
 8017f2a:	4770      	bx	lr
 8017f2c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8017f30:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8017f34:	eea1 7b04 	vfma.f64	d7, d1, d4
 8017f38:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8017f3c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8017f80 <__kernel_sin+0xa8>
 8017f40:	eea5 1b07 	vfma.f64	d1, d5, d7
 8017f44:	ee30 0b41 	vsub.f64	d0, d0, d1
 8017f48:	4770      	bx	lr
 8017f4a:	bf00      	nop
 8017f4c:	f3af 8000 	nop.w
 8017f50:	5acfd57c 	.word	0x5acfd57c
 8017f54:	3de5d93a 	.word	0x3de5d93a
 8017f58:	8a2b9ceb 	.word	0x8a2b9ceb
 8017f5c:	be5ae5e6 	.word	0xbe5ae5e6
 8017f60:	57b1fe7d 	.word	0x57b1fe7d
 8017f64:	3ec71de3 	.word	0x3ec71de3
 8017f68:	19c161d5 	.word	0x19c161d5
 8017f6c:	bf2a01a0 	.word	0xbf2a01a0
 8017f70:	1110f8a6 	.word	0x1110f8a6
 8017f74:	3f811111 	.word	0x3f811111
 8017f78:	55555549 	.word	0x55555549
 8017f7c:	bfc55555 	.word	0xbfc55555
 8017f80:	55555549 	.word	0x55555549
 8017f84:	3fc55555 	.word	0x3fc55555

08017f88 <atan>:
 8017f88:	b538      	push	{r3, r4, r5, lr}
 8017f8a:	eeb0 7b40 	vmov.f64	d7, d0
 8017f8e:	ee17 5a90 	vmov	r5, s15
 8017f92:	4b73      	ldr	r3, [pc, #460]	; (8018160 <atan+0x1d8>)
 8017f94:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8017f98:	429c      	cmp	r4, r3
 8017f9a:	dd13      	ble.n	8017fc4 <atan+0x3c>
 8017f9c:	4b71      	ldr	r3, [pc, #452]	; (8018164 <atan+0x1dc>)
 8017f9e:	429c      	cmp	r4, r3
 8017fa0:	dc03      	bgt.n	8017faa <atan+0x22>
 8017fa2:	d107      	bne.n	8017fb4 <atan+0x2c>
 8017fa4:	ee10 3a10 	vmov	r3, s0
 8017fa8:	b123      	cbz	r3, 8017fb4 <atan+0x2c>
 8017faa:	ee37 7b07 	vadd.f64	d7, d7, d7
 8017fae:	eeb0 0b47 	vmov.f64	d0, d7
 8017fb2:	bd38      	pop	{r3, r4, r5, pc}
 8017fb4:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 80180f0 <atan+0x168>
 8017fb8:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 80180f8 <atan+0x170>
 8017fbc:	2d00      	cmp	r5, #0
 8017fbe:	fe36 7b07 	vselgt.f64	d7, d6, d7
 8017fc2:	e7f4      	b.n	8017fae <atan+0x26>
 8017fc4:	4b68      	ldr	r3, [pc, #416]	; (8018168 <atan+0x1e0>)
 8017fc6:	429c      	cmp	r4, r3
 8017fc8:	dc11      	bgt.n	8017fee <atan+0x66>
 8017fca:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8017fce:	429c      	cmp	r4, r3
 8017fd0:	dc0a      	bgt.n	8017fe8 <atan+0x60>
 8017fd2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8017fd6:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8018100 <atan+0x178>
 8017fda:	ee30 6b06 	vadd.f64	d6, d0, d6
 8017fde:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8017fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe6:	dce2      	bgt.n	8017fae <atan+0x26>
 8017fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8017fec:	e013      	b.n	8018016 <atan+0x8e>
 8017fee:	f000 f8c5 	bl	801817c <fabs>
 8017ff2:	4b5e      	ldr	r3, [pc, #376]	; (801816c <atan+0x1e4>)
 8017ff4:	429c      	cmp	r4, r3
 8017ff6:	dc4f      	bgt.n	8018098 <atan+0x110>
 8017ff8:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8017ffc:	429c      	cmp	r4, r3
 8017ffe:	dc41      	bgt.n	8018084 <atan+0xfc>
 8018000:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8018004:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8018008:	2300      	movs	r3, #0
 801800a:	eea0 6b07 	vfma.f64	d6, d0, d7
 801800e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018012:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8018016:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8018108 <atan+0x180>
 801801a:	ee27 4b07 	vmul.f64	d4, d7, d7
 801801e:	ee24 5b04 	vmul.f64	d5, d4, d4
 8018022:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8018110 <atan+0x188>
 8018026:	eea5 3b06 	vfma.f64	d3, d5, d6
 801802a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8018118 <atan+0x190>
 801802e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8018032:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8018120 <atan+0x198>
 8018036:	eea6 3b05 	vfma.f64	d3, d6, d5
 801803a:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8018128 <atan+0x1a0>
 801803e:	eea3 6b05 	vfma.f64	d6, d3, d5
 8018042:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 8018130 <atan+0x1a8>
 8018046:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8018138 <atan+0x1b0>
 801804a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801804e:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8018140 <atan+0x1b8>
 8018052:	eea5 2b06 	vfma.f64	d2, d5, d6
 8018056:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8018148 <atan+0x1c0>
 801805a:	eea2 6b05 	vfma.f64	d6, d2, d5
 801805e:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 8018150 <atan+0x1c8>
 8018062:	eea6 2b05 	vfma.f64	d2, d6, d5
 8018066:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8018158 <atan+0x1d0>
 801806a:	1c5a      	adds	r2, r3, #1
 801806c:	eea2 6b05 	vfma.f64	d6, d2, d5
 8018070:	ee26 6b05 	vmul.f64	d6, d6, d5
 8018074:	eea3 6b04 	vfma.f64	d6, d3, d4
 8018078:	ee27 6b06 	vmul.f64	d6, d7, d6
 801807c:	d121      	bne.n	80180c2 <atan+0x13a>
 801807e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018082:	e794      	b.n	8017fae <atan+0x26>
 8018084:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8018088:	2301      	movs	r3, #1
 801808a:	ee30 6b47 	vsub.f64	d6, d0, d7
 801808e:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018092:	ee86 7b00 	vdiv.f64	d7, d6, d0
 8018096:	e7be      	b.n	8018016 <atan+0x8e>
 8018098:	4b35      	ldr	r3, [pc, #212]	; (8018170 <atan+0x1e8>)
 801809a:	429c      	cmp	r4, r3
 801809c:	da0b      	bge.n	80180b6 <atan+0x12e>
 801809e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80180a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80180a6:	ee30 5b47 	vsub.f64	d5, d0, d7
 80180aa:	eea0 6b07 	vfma.f64	d6, d0, d7
 80180ae:	2302      	movs	r3, #2
 80180b0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80180b4:	e7af      	b.n	8018016 <atan+0x8e>
 80180b6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80180ba:	2303      	movs	r3, #3
 80180bc:	ee86 7b00 	vdiv.f64	d7, d6, d0
 80180c0:	e7a9      	b.n	8018016 <atan+0x8e>
 80180c2:	4a2c      	ldr	r2, [pc, #176]	; (8018174 <atan+0x1ec>)
 80180c4:	492c      	ldr	r1, [pc, #176]	; (8018178 <atan+0x1f0>)
 80180c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80180ca:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80180ce:	ed93 5b00 	vldr	d5, [r3]
 80180d2:	ee36 6b45 	vsub.f64	d6, d6, d5
 80180d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80180da:	ed92 6b00 	vldr	d6, [r2]
 80180de:	2d00      	cmp	r5, #0
 80180e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80180e4:	bfb8      	it	lt
 80180e6:	eeb1 7b47 	vneglt.f64	d7, d7
 80180ea:	e760      	b.n	8017fae <atan+0x26>
 80180ec:	f3af 8000 	nop.w
 80180f0:	54442d18 	.word	0x54442d18
 80180f4:	3ff921fb 	.word	0x3ff921fb
 80180f8:	54442d18 	.word	0x54442d18
 80180fc:	bff921fb 	.word	0xbff921fb
 8018100:	8800759c 	.word	0x8800759c
 8018104:	7e37e43c 	.word	0x7e37e43c
 8018108:	e322da11 	.word	0xe322da11
 801810c:	3f90ad3a 	.word	0x3f90ad3a
 8018110:	24760deb 	.word	0x24760deb
 8018114:	3fa97b4b 	.word	0x3fa97b4b
 8018118:	a0d03d51 	.word	0xa0d03d51
 801811c:	3fb10d66 	.word	0x3fb10d66
 8018120:	c54c206e 	.word	0xc54c206e
 8018124:	3fb745cd 	.word	0x3fb745cd
 8018128:	920083ff 	.word	0x920083ff
 801812c:	3fc24924 	.word	0x3fc24924
 8018130:	5555550d 	.word	0x5555550d
 8018134:	3fd55555 	.word	0x3fd55555
 8018138:	52defd9a 	.word	0x52defd9a
 801813c:	bfadde2d 	.word	0xbfadde2d
 8018140:	2c6a6c2f 	.word	0x2c6a6c2f
 8018144:	bfa2b444 	.word	0xbfa2b444
 8018148:	af749a6d 	.word	0xaf749a6d
 801814c:	bfb3b0f2 	.word	0xbfb3b0f2
 8018150:	fe231671 	.word	0xfe231671
 8018154:	bfbc71c6 	.word	0xbfbc71c6
 8018158:	9998ebc4 	.word	0x9998ebc4
 801815c:	bfc99999 	.word	0xbfc99999
 8018160:	440fffff 	.word	0x440fffff
 8018164:	7ff00000 	.word	0x7ff00000
 8018168:	3fdbffff 	.word	0x3fdbffff
 801816c:	3ff2ffff 	.word	0x3ff2ffff
 8018170:	40038000 	.word	0x40038000
 8018174:	08018660 	.word	0x08018660
 8018178:	08018680 	.word	0x08018680

0801817c <fabs>:
 801817c:	ec51 0b10 	vmov	r0, r1, d0
 8018180:	ee10 2a10 	vmov	r2, s0
 8018184:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8018188:	ec43 2b10 	vmov	d0, r2, r3
 801818c:	4770      	bx	lr
	...

08018190 <floor>:
 8018190:	ee10 1a90 	vmov	r1, s1
 8018194:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8018198:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801819c:	2b13      	cmp	r3, #19
 801819e:	b530      	push	{r4, r5, lr}
 80181a0:	ee10 0a10 	vmov	r0, s0
 80181a4:	ee10 5a10 	vmov	r5, s0
 80181a8:	dc31      	bgt.n	801820e <floor+0x7e>
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	da15      	bge.n	80181da <floor+0x4a>
 80181ae:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8018268 <floor+0xd8>
 80181b2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80181b6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80181ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181be:	dd07      	ble.n	80181d0 <floor+0x40>
 80181c0:	2900      	cmp	r1, #0
 80181c2:	da4e      	bge.n	8018262 <floor+0xd2>
 80181c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80181c8:	4318      	orrs	r0, r3
 80181ca:	d001      	beq.n	80181d0 <floor+0x40>
 80181cc:	4928      	ldr	r1, [pc, #160]	; (8018270 <floor+0xe0>)
 80181ce:	2000      	movs	r0, #0
 80181d0:	460b      	mov	r3, r1
 80181d2:	4602      	mov	r2, r0
 80181d4:	ec43 2b10 	vmov	d0, r2, r3
 80181d8:	e020      	b.n	801821c <floor+0x8c>
 80181da:	4a26      	ldr	r2, [pc, #152]	; (8018274 <floor+0xe4>)
 80181dc:	411a      	asrs	r2, r3
 80181de:	ea01 0402 	and.w	r4, r1, r2
 80181e2:	4304      	orrs	r4, r0
 80181e4:	d01a      	beq.n	801821c <floor+0x8c>
 80181e6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8018268 <floor+0xd8>
 80181ea:	ee30 0b07 	vadd.f64	d0, d0, d7
 80181ee:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80181f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181f6:	ddeb      	ble.n	80181d0 <floor+0x40>
 80181f8:	2900      	cmp	r1, #0
 80181fa:	bfbe      	ittt	lt
 80181fc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8018200:	fa40 f303 	asrlt.w	r3, r0, r3
 8018204:	18c9      	addlt	r1, r1, r3
 8018206:	ea21 0102 	bic.w	r1, r1, r2
 801820a:	2000      	movs	r0, #0
 801820c:	e7e0      	b.n	80181d0 <floor+0x40>
 801820e:	2b33      	cmp	r3, #51	; 0x33
 8018210:	dd05      	ble.n	801821e <floor+0x8e>
 8018212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018216:	d101      	bne.n	801821c <floor+0x8c>
 8018218:	ee30 0b00 	vadd.f64	d0, d0, d0
 801821c:	bd30      	pop	{r4, r5, pc}
 801821e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8018222:	f04f 32ff 	mov.w	r2, #4294967295
 8018226:	40e2      	lsrs	r2, r4
 8018228:	4202      	tst	r2, r0
 801822a:	d0f7      	beq.n	801821c <floor+0x8c>
 801822c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8018268 <floor+0xd8>
 8018230:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018234:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8018238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801823c:	ddc8      	ble.n	80181d0 <floor+0x40>
 801823e:	2900      	cmp	r1, #0
 8018240:	da02      	bge.n	8018248 <floor+0xb8>
 8018242:	2b14      	cmp	r3, #20
 8018244:	d103      	bne.n	801824e <floor+0xbe>
 8018246:	3101      	adds	r1, #1
 8018248:	ea20 0002 	bic.w	r0, r0, r2
 801824c:	e7c0      	b.n	80181d0 <floor+0x40>
 801824e:	2401      	movs	r4, #1
 8018250:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8018254:	fa04 f303 	lsl.w	r3, r4, r3
 8018258:	4418      	add	r0, r3
 801825a:	42a8      	cmp	r0, r5
 801825c:	bf38      	it	cc
 801825e:	1909      	addcc	r1, r1, r4
 8018260:	e7f2      	b.n	8018248 <floor+0xb8>
 8018262:	2000      	movs	r0, #0
 8018264:	4601      	mov	r1, r0
 8018266:	e7b3      	b.n	80181d0 <floor+0x40>
 8018268:	8800759c 	.word	0x8800759c
 801826c:	7e37e43c 	.word	0x7e37e43c
 8018270:	bff00000 	.word	0xbff00000
 8018274:	000fffff 	.word	0x000fffff

08018278 <scalbn>:
 8018278:	ee10 1a90 	vmov	r1, s1
 801827c:	b510      	push	{r4, lr}
 801827e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8018282:	b98c      	cbnz	r4, 80182a8 <scalbn+0x30>
 8018284:	ee10 3a10 	vmov	r3, s0
 8018288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801828c:	430b      	orrs	r3, r1
 801828e:	d011      	beq.n	80182b4 <scalbn+0x3c>
 8018290:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8018358 <scalbn+0xe0>
 8018294:	4b3c      	ldr	r3, [pc, #240]	; (8018388 <scalbn+0x110>)
 8018296:	ee20 0b07 	vmul.f64	d0, d0, d7
 801829a:	4298      	cmp	r0, r3
 801829c:	da0b      	bge.n	80182b6 <scalbn+0x3e>
 801829e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8018360 <scalbn+0xe8>
 80182a2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80182a6:	e005      	b.n	80182b4 <scalbn+0x3c>
 80182a8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80182ac:	429c      	cmp	r4, r3
 80182ae:	d107      	bne.n	80182c0 <scalbn+0x48>
 80182b0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80182b4:	bd10      	pop	{r4, pc}
 80182b6:	ee10 1a90 	vmov	r1, s1
 80182ba:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80182be:	3c36      	subs	r4, #54	; 0x36
 80182c0:	4404      	add	r4, r0
 80182c2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80182c6:	429c      	cmp	r4, r3
 80182c8:	dd0d      	ble.n	80182e6 <scalbn+0x6e>
 80182ca:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8018368 <scalbn+0xf0>
 80182ce:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8018370 <scalbn+0xf8>
 80182d2:	eeb0 6b47 	vmov.f64	d6, d7
 80182d6:	ee10 3a90 	vmov	r3, s1
 80182da:	2b00      	cmp	r3, #0
 80182dc:	fe27 7b05 	vselge.f64	d7, d7, d5
 80182e0:	ee27 0b06 	vmul.f64	d0, d7, d6
 80182e4:	e7e6      	b.n	80182b4 <scalbn+0x3c>
 80182e6:	2c00      	cmp	r4, #0
 80182e8:	dd0a      	ble.n	8018300 <scalbn+0x88>
 80182ea:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80182ee:	ec53 2b10 	vmov	r2, r3, d0
 80182f2:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80182f6:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80182fa:	ec43 2b10 	vmov	d0, r2, r3
 80182fe:	e7d9      	b.n	80182b4 <scalbn+0x3c>
 8018300:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8018304:	da19      	bge.n	801833a <scalbn+0xc2>
 8018306:	f24c 3350 	movw	r3, #50000	; 0xc350
 801830a:	4298      	cmp	r0, r3
 801830c:	ee10 3a90 	vmov	r3, s1
 8018310:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8018314:	dd09      	ble.n	801832a <scalbn+0xb2>
 8018316:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8018368 <scalbn+0xf0>
 801831a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8018370 <scalbn+0xf8>
 801831e:	eeb0 7b40 	vmov.f64	d7, d0
 8018322:	2b00      	cmp	r3, #0
 8018324:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8018328:	e7bb      	b.n	80182a2 <scalbn+0x2a>
 801832a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8018360 <scalbn+0xe8>
 801832e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8018378 <scalbn+0x100>
 8018332:	eeb0 7b40 	vmov.f64	d7, d0
 8018336:	2b00      	cmp	r3, #0
 8018338:	e7f4      	b.n	8018324 <scalbn+0xac>
 801833a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801833e:	ec53 2b10 	vmov	r2, r3, d0
 8018342:	3436      	adds	r4, #54	; 0x36
 8018344:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8018348:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801834c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8018380 <scalbn+0x108>
 8018350:	ec43 2b10 	vmov	d0, r2, r3
 8018354:	e7a5      	b.n	80182a2 <scalbn+0x2a>
 8018356:	bf00      	nop
 8018358:	00000000 	.word	0x00000000
 801835c:	43500000 	.word	0x43500000
 8018360:	c2f8f359 	.word	0xc2f8f359
 8018364:	01a56e1f 	.word	0x01a56e1f
 8018368:	8800759c 	.word	0x8800759c
 801836c:	7e37e43c 	.word	0x7e37e43c
 8018370:	8800759c 	.word	0x8800759c
 8018374:	fe37e43c 	.word	0xfe37e43c
 8018378:	c2f8f359 	.word	0xc2f8f359
 801837c:	81a56e1f 	.word	0x81a56e1f
 8018380:	00000000 	.word	0x00000000
 8018384:	3c900000 	.word	0x3c900000
 8018388:	ffff3cb0 	.word	0xffff3cb0

0801838c <_init>:
 801838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801838e:	bf00      	nop
 8018390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018392:	bc08      	pop	{r3}
 8018394:	469e      	mov	lr, r3
 8018396:	4770      	bx	lr

08018398 <_fini>:
 8018398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801839a:	bf00      	nop
 801839c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801839e:	bc08      	pop	{r3}
 80183a0:	469e      	mov	lr, r3
 80183a2:	4770      	bx	lr
