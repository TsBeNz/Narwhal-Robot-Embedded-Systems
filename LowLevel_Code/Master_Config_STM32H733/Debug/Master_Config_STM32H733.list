
Master_Config_STM32H733.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001431c  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080145ec  080145ec  000245ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014678  08014678  00024678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014680  08014680  00024680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014684  08014684  00024684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000184  20000000  08014688  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002634  20000184  0801480c  00030184  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200027b8  0801480c  000327b8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY
 10 .debug_info   000419e3  00000000  00000000  000301b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006284  00000000  00000000  00071b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002280  00000000  00000000  00077e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002098  00000000  00000000  0007a0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000883f  00000000  00000000  0007c138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f8ec  00000000  00000000  00084977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001716f6  00000000  00000000  000b4263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  00225959  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000956c  00000000  00000000  002259ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	20000184 	.word	0x20000184
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080145d4 	.word	0x080145d4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	20000188 	.word	0x20000188
 800030c:	080145d4 	.word	0x080145d4

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060e:	f002 fbe3 	bl	8002dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000612:	f000 f927 	bl	8000864 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000616:	f000 f99f 	bl	8000958 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  StartUp_Init_Parameter();
 800061a:	f001 fbb9 	bl	8001d90 <StartUp_Init_Parameter>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f001 f9bb 	bl	8001998 <MX_GPIO_Init>
  MX_DMA_Init();
 8000622:	f001 f999 	bl	8001958 <MX_DMA_Init>
  MX_ADC3_Init();
 8000626:	f000 f9cb 	bl	80009c0 <MX_ADC3_Init>
  MX_TIM1_Init();
 800062a:	f000 fb55 	bl	8000cd8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800062e:	f000 fc37 	bl	8000ea0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000632:	f000 fcad 	bl	8000f90 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000636:	f000 fd01 	bl	800103c <MX_TIM5_Init>
  MX_TIM8_Init();
 800063a:	f000 fd8d 	bl	8001158 <MX_TIM8_Init>
  MX_TIM13_Init();
 800063e:	f000 fde5 	bl	800120c <MX_TIM13_Init>
  MX_TIM14_Init();
 8000642:	f000 fe33 	bl	80012ac <MX_TIM14_Init>
  MX_TIM15_Init();
 8000646:	f000 fe81 	bl	800134c <MX_TIM15_Init>
  MX_TIM16_Init();
 800064a:	f000 ff07 	bl	800145c <MX_TIM16_Init>
  MX_TIM17_Init();
 800064e:	f000 ff81 	bl	8001554 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000652:	f001 f8e7 	bl	8001824 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000656:	f001 f933 	bl	80018c0 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 800065a:	f000 fa8f 	bl	8000b7c <MX_SPI3_Init>
  MX_SPI4_Init();
 800065e:	f000 fae5 	bl	8000c2c <MX_SPI4_Init>
  MX_TIM2_Init();
 8000662:	f000 fbc9 	bl	8000df8 <MX_TIM2_Init>
  MX_I2C2_Init();
 8000666:	f000 fa49 	bl	8000afc <MX_I2C2_Init>
  MX_CRC_Init();
 800066a:	f000 fa1b 	bl	8000aa4 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 800066e:	f013 fa97 	bl	8013ba0 <MX_USB_DEVICE_Init>
  MX_TIM24_Init();
 8000672:	f001 f83b 	bl	80016ec <MX_TIM24_Init>
  MX_TIM23_Init();
 8000676:	f000 ffe9 	bl	800164c <MX_TIM23_Init>
  MX_TIM6_Init();
 800067a:	f000 fd35 	bl	80010e8 <MX_TIM6_Init>
  MX_UART5_Init();
 800067e:	f001 f885 	bl	800178c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000682:	2201      	movs	r2, #1
 8000684:	2101      	movs	r1, #1
 8000686:	485d      	ldr	r0, [pc, #372]	; (80007fc <main+0x1f4>)
 8000688:	f007 fa2c 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, 1);
 800068c:	2201      	movs	r2, #1
 800068e:	2102      	movs	r1, #2
 8000690:	485a      	ldr	r0, [pc, #360]	; (80007fc <main+0x1f4>)
 8000692:	f007 fa27 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, 1);
 8000696:	2201      	movs	r2, #1
 8000698:	2104      	movs	r1, #4
 800069a:	4858      	ldr	r0, [pc, #352]	; (80007fc <main+0x1f4>)
 800069c:	f007 fa22 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, 1);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2108      	movs	r1, #8
 80006a4:	4855      	ldr	r0, [pc, #340]	; (80007fc <main+0x1f4>)
 80006a6:	f007 fa1d 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, 1);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2110      	movs	r1, #16
 80006ae:	4853      	ldr	r0, [pc, #332]	; (80007fc <main+0x1f4>)
 80006b0:	f007 fa18 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, 1);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2120      	movs	r1, #32
 80006b8:	4850      	ldr	r0, [pc, #320]	; (80007fc <main+0x1f4>)
 80006ba:	f007 fa13 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6, 1);
 80006be:	2201      	movs	r2, #1
 80006c0:	2140      	movs	r1, #64	; 0x40
 80006c2:	484e      	ldr	r0, [pc, #312]	; (80007fc <main+0x1f4>)
 80006c4:	f007 fa0e 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	484c      	ldr	r0, [pc, #304]	; (8000800 <main+0x1f8>)
 80006ce:	f007 fa09 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim24); 		// Ms delay timer
 80006d2:	484c      	ldr	r0, [pc, #304]	; (8000804 <main+0x1fc>)
 80006d4:	f00c fc68 	bl	800cfa8 <HAL_TIM_Base_Start>

	HAL_Delay(10);
 80006d8:	200a      	movs	r0, #10
 80006da:	f002 fc0f 	bl	8002efc <HAL_Delay>
//	Contorl_Flag |= 0x02; //Use QEI

	Encoder_Setup(); // Change Resolution ABI to 14 bits
 80006de:	f001 fab7 	bl	8001c50 <Encoder_Setup>

	HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 80006e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80006e6:	2100      	movs	r1, #0
 80006e8:	4847      	ldr	r0, [pc, #284]	; (8000808 <main+0x200>)
 80006ea:	f004 fbd9 	bl	8004ea0 <HAL_ADCEx_Calibration_Start>

//	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 14);
  	while (HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 14) != HAL_OK)
 80006ee:	e003      	b.n	80006f8 <main+0xf0>

	HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80006f0:	2100      	movs	r1, #0
 80006f2:	4846      	ldr	r0, [pc, #280]	; (800080c <main+0x204>)
 80006f4:	f00c fe0a 	bl	800d30c <HAL_TIM_PWM_Start>
  	while (HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 14) != HAL_OK)
 80006f8:	220e      	movs	r2, #14
 80006fa:	4945      	ldr	r1, [pc, #276]	; (8000810 <main+0x208>)
 80006fc:	4845      	ldr	r0, [pc, #276]	; (8000814 <main+0x20c>)
 80006fe:	f00e f8fd 	bl	800e8fc <HAL_UART_Receive_DMA>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d1f3      	bne.n	80006f0 <main+0xe8>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000708:	2100      	movs	r1, #0
 800070a:	4843      	ldr	r0, [pc, #268]	; (8000818 <main+0x210>)
 800070c:	f00c fdfe 	bl	800d30c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000710:	2100      	movs	r1, #0
 8000712:	4842      	ldr	r0, [pc, #264]	; (800081c <main+0x214>)
 8000714:	f00c fdfa 	bl	800d30c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000718:	2104      	movs	r1, #4
 800071a:	4840      	ldr	r0, [pc, #256]	; (800081c <main+0x214>)
 800071c:	f00c fdf6 	bl	800d30c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000720:	2100      	movs	r1, #0
 8000722:	483f      	ldr	r0, [pc, #252]	; (8000820 <main+0x218>)
 8000724:	f00c fdf2 	bl	800d30c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000728:	2100      	movs	r1, #0
 800072a:	483e      	ldr	r0, [pc, #248]	; (8000824 <main+0x21c>)
 800072c:	f00c fdee 	bl	800d30c <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000730:	213c      	movs	r1, #60	; 0x3c
 8000732:	483d      	ldr	r0, [pc, #244]	; (8000828 <main+0x220>)
 8000734:	f00c ffac 	bl	800d690 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000738:	213c      	movs	r1, #60	; 0x3c
 800073a:	483c      	ldr	r0, [pc, #240]	; (800082c <main+0x224>)
 800073c:	f00c ffa8 	bl	800d690 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000740:	213c      	movs	r1, #60	; 0x3c
 8000742:	483b      	ldr	r0, [pc, #236]	; (8000830 <main+0x228>)
 8000744:	f00c ffa4 	bl	800d690 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000748:	213c      	movs	r1, #60	; 0x3c
 800074a:	483a      	ldr	r0, [pc, #232]	; (8000834 <main+0x22c>)
 800074c:	f00c ffa0 	bl	800d690 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000750:	213c      	movs	r1, #60	; 0x3c
 8000752:	4839      	ldr	r0, [pc, #228]	; (8000838 <main+0x230>)
 8000754:	f00c ff9c 	bl	800d690 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000758:	213c      	movs	r1, #60	; 0x3c
 800075a:	4838      	ldr	r0, [pc, #224]	; (800083c <main+0x234>)
 800075c:	f00c ff98 	bl	800d690 <HAL_TIM_Encoder_Start>

	HAL_TIM_Base_Start(&htim6);			// ตัวจับเวลา
 8000760:	4837      	ldr	r0, [pc, #220]	; (8000840 <main+0x238>)
 8000762:	f00c fc21 	bl	800cfa8 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim23); 	// Interrupt Timer
 8000766:	4837      	ldr	r0, [pc, #220]	; (8000844 <main+0x23c>)
 8000768:	f00c fc9c 	bl	800d0a4 <HAL_TIM_Base_Start_IT>
//		test_encoder_QEI[3] = TIM1->CNT;
//		test_encoder_QEI[4] = TIM3->CNT;
//		test_encoder_QEI[5] = TIM2->CNT;
//		output_spi_test2 = Encoder_Position_SPI(GPIOD,GPIO_PIN_5);
//
		int a = HAL_GetTick();
 800076c:	f002 fbba 	bl	8002ee4 <HAL_GetTick>
 8000770:	4603      	mov	r3, r0
 8000772:	607b      	str	r3, [r7, #4]
		if (a - Last_Update_Time_MS >= 10) {
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4b34      	ldr	r3, [pc, #208]	; (8000848 <main+0x240>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	2b09      	cmp	r3, #9
 800077e:	d9f5      	bls.n	800076c <main+0x164>
			Last_Update_Time_MS = a;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4a31      	ldr	r2, [pc, #196]	; (8000848 <main+0x240>)
 8000784:	6013      	str	r3, [r2, #0]
			// update status of MCU
			HAL_ADC_Start_IT(&hadc3); //read temperature sensor
 8000786:	4820      	ldr	r0, [pc, #128]	; (8000808 <main+0x200>)
 8000788:	f003 f8ba 	bl	8003900 <HAL_ADC_Start_IT>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	482e      	ldr	r0, [pc, #184]	; (800084c <main+0x244>)
 8000792:	f007 f9c0 	bl	8007b16 <HAL_GPIO_TogglePin>

			TIM13->ARR += 30;
 8000796:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <main+0x248>)
 8000798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800079a:	4a2d      	ldr	r2, [pc, #180]	; (8000850 <main+0x248>)
 800079c:	331e      	adds	r3, #30
 800079e:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM13->CCR1 = TIM13->ARR/2;
 80007a0:	4b2b      	ldr	r3, [pc, #172]	; (8000850 <main+0x248>)
 80007a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a4:	4a2a      	ldr	r2, [pc, #168]	; (8000850 <main+0x248>)
 80007a6:	085b      	lsrs	r3, r3, #1
 80007a8:	6353      	str	r3, [r2, #52]	; 0x34
			TIM14->ARR += 30;
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <main+0x24c>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	4a29      	ldr	r2, [pc, #164]	; (8000854 <main+0x24c>)
 80007b0:	331e      	adds	r3, #30
 80007b2:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM14->CCR1 = TIM14->ARR/2;
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <main+0x24c>)
 80007b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b8:	4a26      	ldr	r2, [pc, #152]	; (8000854 <main+0x24c>)
 80007ba:	085b      	lsrs	r3, r3, #1
 80007bc:	6353      	str	r3, [r2, #52]	; 0x34
			TIM15->ARR += 30;
 80007be:	4b26      	ldr	r3, [pc, #152]	; (8000858 <main+0x250>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c2:	4a25      	ldr	r2, [pc, #148]	; (8000858 <main+0x250>)
 80007c4:	331e      	adds	r3, #30
 80007c6:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM15->CCR2 = TIM15->ARR/2;
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <main+0x250>)
 80007ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007cc:	4a22      	ldr	r2, [pc, #136]	; (8000858 <main+0x250>)
 80007ce:	085b      	lsrs	r3, r3, #1
 80007d0:	6393      	str	r3, [r2, #56]	; 0x38
			TIM16->ARR += 30;
 80007d2:	4b22      	ldr	r3, [pc, #136]	; (800085c <main+0x254>)
 80007d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d6:	4a21      	ldr	r2, [pc, #132]	; (800085c <main+0x254>)
 80007d8:	331e      	adds	r3, #30
 80007da:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM16->CCR1 = TIM16->ARR/2;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <main+0x254>)
 80007de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e0:	4a1e      	ldr	r2, [pc, #120]	; (800085c <main+0x254>)
 80007e2:	085b      	lsrs	r3, r3, #1
 80007e4:	6353      	str	r3, [r2, #52]	; 0x34
			TIM17->ARR += 30;
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <main+0x258>)
 80007e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ea:	4a1d      	ldr	r2, [pc, #116]	; (8000860 <main+0x258>)
 80007ec:	331e      	adds	r3, #30
 80007ee:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM17->CCR1 = TIM17->ARR/2;
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <main+0x258>)
 80007f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f4:	4a1a      	ldr	r2, [pc, #104]	; (8000860 <main+0x258>)
 80007f6:	085b      	lsrs	r3, r3, #1
 80007f8:	6353      	str	r3, [r2, #52]	; 0x34
  {
 80007fa:	e7b7      	b.n	800076c <main+0x164>
 80007fc:	58020c00 	.word	0x58020c00
 8000800:	58021000 	.word	0x58021000
 8000804:	20000670 	.word	0x20000670
 8000808:	20000ab0 	.word	0x20000ab0
 800080c:	20000b98 	.word	0x20000b98
 8000810:	20000440 	.word	0x20000440
 8000814:	20000be4 	.word	0x20000be4
 8000818:	20000e44 	.word	0x20000e44
 800081c:	200007e8 	.word	0x200007e8
 8000820:	20000e90 	.word	0x20000e90
 8000824:	200008a8 	.word	0x200008a8
 8000828:	20000d5c 	.word	0x20000d5c
 800082c:	20000da8 	.word	0x20000da8
 8000830:	20000948 	.word	0x20000948
 8000834:	2000070c 	.word	0x2000070c
 8000838:	200008fc 	.word	0x200008fc
 800083c:	200006c0 	.word	0x200006c0
 8000840:	20000d10 	.word	0x20000d10
 8000844:	20000df8 	.word	0x20000df8
 8000848:	20000438 	.word	0x20000438
 800084c:	58020800 	.word	0x58020800
 8000850:	40001c00 	.word	0x40001c00
 8000854:	40002000 	.word	0x40002000
 8000858:	40014000 	.word	0x40014000
 800085c:	40014400 	.word	0x40014400
 8000860:	40014800 	.word	0x40014800

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09c      	sub	sp, #112	; 0x70
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	224c      	movs	r2, #76	; 0x4c
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f013 fea6 	bl	80145c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2220      	movs	r2, #32
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f013 fea0 	bl	80145c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000884:	2002      	movs	r0, #2
 8000886:	f008 fc57 	bl	8009138 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <SystemClock_Config+0xec>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	4a2f      	ldr	r2, [pc, #188]	; (8000950 <SystemClock_Config+0xec>)
 8000894:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000898:	6193      	str	r3, [r2, #24]
 800089a:	4b2d      	ldr	r3, [pc, #180]	; (8000950 <SystemClock_Config+0xec>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a6:	bf00      	nop
 80008a8:	4b29      	ldr	r3, [pc, #164]	; (8000950 <SystemClock_Config+0xec>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008b4:	d1f8      	bne.n	80008a8 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008b6:	4b27      	ldr	r3, [pc, #156]	; (8000954 <SystemClock_Config+0xf0>)
 80008b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008ba:	f023 0303 	bic.w	r3, r3, #3
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <SystemClock_Config+0xf0>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80008c6:	2321      	movs	r3, #33	; 0x21
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008d0:	2301      	movs	r3, #1
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d8:	2302      	movs	r3, #2
 80008da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008dc:	2302      	movs	r3, #2
 80008de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 44;
 80008e0:	232c      	movs	r3, #44	; 0x2c
 80008e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008f0:	230c      	movs	r3, #12
 80008f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000900:	4618      	mov	r0, r3
 8000902:	f008 fc63 	bl	80091cc <HAL_RCC_OscConfig>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800090c:	f001 fb72 	bl	8001ff4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000910:	233f      	movs	r3, #63	; 0x3f
 8000912:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000914:	2303      	movs	r3, #3
 8000916:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800091c:	2308      	movs	r3, #8
 800091e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000924:	2340      	movs	r3, #64	; 0x40
 8000926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800092c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800092e:	2340      	movs	r3, #64	; 0x40
 8000930:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	2103      	movs	r1, #3
 8000936:	4618      	mov	r0, r3
 8000938:	f008 fff4 	bl	8009924 <HAL_RCC_ClockConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000942:	f001 fb57 	bl	8001ff4 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	3770      	adds	r7, #112	; 0x70
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	58024800 	.word	0x58024800
 8000954:	58024400 	.word	0x58024400

08000958 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b0ae      	sub	sp, #184	; 0xb8
 800095c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	22b4      	movs	r2, #180	; 0xb4
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f013 fe2d 	bl	80145c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI4
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <PeriphCommonClock_Config+0x64>)
 800096c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART3;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800096e:	2302      	movs	r3, #2
 8000970:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000972:	2310      	movs	r3, #16
 8000974:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000976:	2302      	movs	r3, #2
 8000978:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800097a:	2302      	movs	r3, #2
 800097c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800097e:	2302      	movs	r3, #2
 8000980:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000982:	23c0      	movs	r3, #192	; 0xc0
 8000984:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 800098e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000992:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8000994:	2301      	movs	r3, #1
 8000996:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_PLL2;
 8000998:	2308      	movs	r3, #8
 800099a:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800099c:	2300      	movs	r3, #0
 800099e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	4618      	mov	r0, r3
 80009a6:	f009 fb49 	bl	800a03c <HAL_RCCEx_PeriphCLKConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80009b0:	f001 fb20 	bl	8001ff4 <Error_Handler>
  }
}
 80009b4:	bf00      	nop
 80009b6:	37b8      	adds	r7, #184	; 0xb8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	00082003 	.word	0x00082003

080009c0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	; 0x28
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2224      	movs	r2, #36	; 0x24
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f013 fdf9 	bl	80145c4 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Common config
  */
  hadc3.Instance = ADC3;
 80009d2:	4b31      	ldr	r3, [pc, #196]	; (8000a98 <MX_ADC3_Init+0xd8>)
 80009d4:	4a31      	ldr	r2, [pc, #196]	; (8000a9c <MX_ADC3_Init+0xdc>)
 80009d6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV6;
 80009d8:	4b2f      	ldr	r3, [pc, #188]	; (8000a98 <MX_ADC3_Init+0xd8>)
 80009da:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80009de:	605a      	str	r2, [r3, #4]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80009e0:	4b2d      	ldr	r3, [pc, #180]	; (8000a98 <MX_ADC3_Init+0xd8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009e6:	4b2c      	ldr	r3, [pc, #176]	; (8000a98 <MX_ADC3_Init+0xd8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <MX_ADC3_Init+0xd8>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80009f2:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <MX_ADC3_Init+0xd8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80009f8:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <MX_ADC3_Init+0xd8>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80009fe:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a04:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a12:	4b21      	ldr	r3, [pc, #132]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8000a38:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a40:	4815      	ldr	r0, [pc, #84]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a42:	f002 fd55 	bl	80034f0 <HAL_ADC_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000a4c:	f001 fad2 	bl	8001ff4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000a50:	4b13      	ldr	r3, [pc, #76]	; (8000aa0 <MX_ADC3_Init+0xe0>)
 8000a52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a54:	2306      	movs	r3, #6
 8000a56:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_247CYCLES_5;
 8000a58:	2306      	movs	r3, #6
 8000a5a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a5c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a60:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a62:	2304      	movs	r3, #4
 8000a64:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4806      	ldr	r0, [pc, #24]	; (8000a98 <MX_ADC3_Init+0xd8>)
 8000a80:	f003 fada 	bl	8004038 <HAL_ADC_ConfigChannel>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 8000a8a:	f001 fab3 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000ab0 	.word	0x20000ab0
 8000a9c:	58026000 	.word	0x58026000
 8000aa0:	c7520000 	.word	0xc7520000

08000aa4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_CRC_Init+0x50>)
 8000aaa:	4a13      	ldr	r2, [pc, #76]	; (8000af8 <MX_CRC_Init+0x54>)
 8000aac:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_CRC_Init+0x50>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_CRC_Init+0x50>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 29;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_CRC_Init+0x50>)
 8000abc:	221d      	movs	r2, #29
 8000abe:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_CRC_Init+0x50>)
 8000ac2:	2210      	movs	r2, #16
 8000ac4:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xC4;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_CRC_Init+0x50>)
 8000ac8:	22c4      	movs	r2, #196	; 0xc4
 8000aca:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_CRC_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_CRC_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_HALFWORDS;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_CRC_Init+0x50>)
 8000ada:	2202      	movs	r2, #2
 8000adc:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_CRC_Init+0x50>)
 8000ae0:	f004 fb84 	bl	80051ec <HAL_CRC_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8000aea:	f001 fa83 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000834 	.word	0x20000834
 8000af8:	58024c00 	.word	0x58024c00

08000afc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b00:	4b1b      	ldr	r3, [pc, #108]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b02:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <MX_I2C2_Init+0x78>)
 8000b04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x60404E72;
 8000b06:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b08:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <MX_I2C2_Init+0x7c>)
 8000b0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b0c:	4b18      	ldr	r3, [pc, #96]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b36:	480e      	ldr	r0, [pc, #56]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b38:	f007 f808 	bl	8007b4c <HAL_I2C_Init>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b42:	f001 fa57 	bl	8001ff4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b4a:	f007 f88f 	bl	8007c6c <HAL_I2CEx_ConfigAnalogFilter>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b54:	f001 fa4e 	bl	8001ff4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <MX_I2C2_Init+0x74>)
 8000b5c:	f007 f8d1 	bl	8007d02 <HAL_I2CEx_ConfigDigitalFilter>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b66:	f001 fa45 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000858 	.word	0x20000858
 8000b74:	40005800 	.word	0x40005800
 8000b78:	60404e72 	.word	0x60404e72

08000b7c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b80:	4b28      	ldr	r3, [pc, #160]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000b82:	4a29      	ldr	r2, [pc, #164]	; (8000c28 <MX_SPI3_Init+0xac>)
 8000b84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b86:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000b88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000b8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b8e:	4b25      	ldr	r3, [pc, #148]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b94:	4b23      	ldr	r3, [pc, #140]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000b96:	2207      	movs	r2, #7
 8000b98:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ba0:	4b20      	ldr	r3, [pc, #128]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000ba2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000ba6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000baa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000bb0:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000bb2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000bb6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x1D;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000bcc:	221d      	movs	r2, #29
 8000bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000bd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000bde:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_SPI3_Init+0xa8>)
 8000c10:	f00b faa6 	bl	800c160 <HAL_SPI_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8000c1a:	f001 f9eb 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000998 	.word	0x20000998
 8000c28:	40003c00 	.word	0x40003c00

08000c2c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c32:	4a28      	ldr	r2, [pc, #160]	; (8000cd4 <MX_SPI4_Init+0xa8>)
 8000c34:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c38:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c3c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c46:	220f      	movs	r2, #15
 8000c48:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c58:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c5c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c5e:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c60:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c64:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c6c:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c84:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c92:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ca4:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <MX_SPI4_Init+0xa4>)
 8000cbe:	f00b fa4f 	bl	800c160 <HAL_SPI_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_SPI4_Init+0xa0>
  {
    Error_Handler();
 8000cc8:	f001 f994 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000c88 	.word	0x20000c88
 8000cd4:	40013400 	.word	0x40013400

08000cd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b098      	sub	sp, #96	; 0x60
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cfe:	1d3b      	adds	r3, r7, #4
 8000d00:	2234      	movs	r2, #52	; 0x34
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f013 fc5d 	bl	80145c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d0a:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000d0c:	4a39      	ldr	r2, [pc, #228]	; (8000df4 <MX_TIM1_Init+0x11c>)
 8000d0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000d10:	4b37      	ldr	r3, [pc, #220]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b36      	ldr	r3, [pc, #216]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d1c:	4b34      	ldr	r3, [pc, #208]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d24:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d30:	4b2f      	ldr	r3, [pc, #188]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000d36:	482e      	ldr	r0, [pc, #184]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000d38:	f00c fa3a 	bl	800d1b0 <HAL_TIM_OC_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f001 f957 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d56:	4619      	mov	r1, r3
 8000d58:	4825      	ldr	r0, [pc, #148]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000d5a:	f00d fbed 	bl	800e538 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d64:	f001 f946 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d70:	2300      	movs	r3, #0
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d88:	2200      	movs	r2, #0
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4818      	ldr	r0, [pc, #96]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000d8e:	f00c fd0d 	bl	800d7ac <HAL_TIM_OC_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d98:	f001 f92c 	bl	8001ff4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4807      	ldr	r0, [pc, #28]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000dd2:	f00d fc4d 	bl	800e670 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000ddc:	f001 f90a 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000de0:	4803      	ldr	r0, [pc, #12]	; (8000df0 <MX_TIM1_Init+0x118>)
 8000de2:	f001 fcf3 	bl	80027cc <HAL_TIM_MspPostInit>

}
 8000de6:	bf00      	nop
 8000de8:	3760      	adds	r7, #96	; 0x60
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000d5c 	.word	0x20000d5c
 8000df4:	40010000 	.word	0x40010000

08000df8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	; 0x30
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	2224      	movs	r2, #36	; 0x24
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f013 fbdc 	bl	80145c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <MX_TIM2_Init+0xa4>)
 8000e18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <MX_TIM2_Init+0xa4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_TIM2_Init+0xa4>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16383;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <MX_TIM2_Init+0xa4>)
 8000e2c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000e30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <MX_TIM2_Init+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e38:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <MX_TIM2_Init+0xa4>)
 8000e3a:	2280      	movs	r2, #128	; 0x80
 8000e3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e46:	2301      	movs	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e52:	2300      	movs	r3, #0
 8000e54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e56:	2301      	movs	r3, #1
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e62:	f107 030c 	add.w	r3, r7, #12
 8000e66:	4619      	mov	r1, r3
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_TIM2_Init+0xa4>)
 8000e6a:	f00c fb6b 	bl	800d544 <HAL_TIM_Encoder_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000e74:	f001 f8be 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e80:	463b      	mov	r3, r7
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	; (8000e9c <MX_TIM2_Init+0xa4>)
 8000e86:	f00d fb57 	bl	800e538 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000e90:	f001 f8b0 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3730      	adds	r7, #48	; 0x30
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000da8 	.word	0x20000da8

08000ea0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08e      	sub	sp, #56	; 0x38
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb4:	f107 031c 	add.w	r3, r7, #28
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ec0:	463b      	mov	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
 8000eca:	60da      	str	r2, [r3, #12]
 8000ecc:	611a      	str	r2, [r3, #16]
 8000ece:	615a      	str	r2, [r3, #20]
 8000ed0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ed2:	4b2d      	ldr	r3, [pc, #180]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000ed4:	4a2d      	ldr	r2, [pc, #180]	; (8000f8c <MX_TIM3_Init+0xec>)
 8000ed6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ed8:	4b2b      	ldr	r3, [pc, #172]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b2a      	ldr	r3, [pc, #168]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ee4:	4b28      	ldr	r3, [pc, #160]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000ee6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ef8:	4823      	ldr	r0, [pc, #140]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000efa:	f00b fffe 	bl	800cefa <HAL_TIM_Base_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000f04:	f001 f876 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f12:	4619      	mov	r1, r3
 8000f14:	481c      	ldr	r0, [pc, #112]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000f16:	f00c fdd7 	bl	800dac8 <HAL_TIM_ConfigClockSource>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000f20:	f001 f868 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f24:	4818      	ldr	r0, [pc, #96]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000f26:	f00c f99a 	bl	800d25e <HAL_TIM_PWM_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000f30:	f001 f860 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f34:	2300      	movs	r3, #0
 8000f36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f3c:	f107 031c 	add.w	r3, r7, #28
 8000f40:	4619      	mov	r1, r3
 8000f42:	4811      	ldr	r0, [pc, #68]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000f44:	f00d faf8 	bl	800e538 <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000f4e:	f001 f851 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f52:	2360      	movs	r3, #96	; 0x60
 8000f54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	4619      	mov	r1, r3
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000f6a:	f00c fc99 	bl	800d8a0 <HAL_TIM_PWM_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000f74:	f001 f83e 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <MX_TIM3_Init+0xe8>)
 8000f7a:	f001 fc27 	bl	80027cc <HAL_TIM_MspPostInit>

}
 8000f7e:	bf00      	nop
 8000f80:	3738      	adds	r7, #56	; 0x38
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000948 	.word	0x20000948
 8000f8c:	40000400 	.word	0x40000400

08000f90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	; 0x30
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f96:	f107 030c 	add.w	r3, r7, #12
 8000f9a:	2224      	movs	r2, #36	; 0x24
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f013 fb10 	bl	80145c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	463b      	mov	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <MX_TIM4_Init+0xa4>)
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <MX_TIM4_Init+0xa8>)
 8000fb2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_TIM4_Init+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <MX_TIM4_Init+0xa4>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16383;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_TIM4_Init+0xa4>)
 8000fc2:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8000fc6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_TIM4_Init+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_TIM4_Init+0xa4>)
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fec:	2301      	movs	r3, #1
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_TIM4_Init+0xa4>)
 8001000:	f00c faa0 	bl	800d544 <HAL_TIM_Encoder_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800100a:	f000 fff3 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <MX_TIM4_Init+0xa4>)
 800101c:	f00d fa8c 	bl	800e538 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001026:	f000 ffe5 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	3730      	adds	r7, #48	; 0x30
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	2000070c 	.word	0x2000070c
 8001038:	40000800 	.word	0x40000800

0800103c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	2224      	movs	r2, #36	; 0x24
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f013 faba 	bl	80145c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_TIM5_Init+0xa4>)
 800105c:	4a21      	ldr	r2, [pc, #132]	; (80010e4 <MX_TIM5_Init+0xa8>)
 800105e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001060:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_TIM5_Init+0xa4>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <MX_TIM5_Init+0xa4>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 16383;
 800106c:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_TIM5_Init+0xa4>)
 800106e:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001072:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_TIM5_Init+0xa4>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107a:	4b19      	ldr	r3, [pc, #100]	; (80010e0 <MX_TIM5_Init+0xa4>)
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001080:	2303      	movs	r3, #3
 8001082:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001084:	2300      	movs	r3, #0
 8001086:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001088:	2301      	movs	r3, #1
 800108a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001098:	2301      	movs	r3, #1
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	480d      	ldr	r0, [pc, #52]	; (80010e0 <MX_TIM5_Init+0xa4>)
 80010ac:	f00c fa4a 	bl	800d544 <HAL_TIM_Encoder_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80010b6:	f000 ff9d 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010be:	2300      	movs	r3, #0
 80010c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010c2:	463b      	mov	r3, r7
 80010c4:	4619      	mov	r1, r3
 80010c6:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_TIM5_Init+0xa4>)
 80010c8:	f00d fa36 	bl	800e538 <HAL_TIMEx_MasterConfigSynchronization>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80010d2:	f000 ff8f 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	3730      	adds	r7, #48	; 0x30
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	200008fc 	.word	0x200008fc
 80010e4:	40000c00 	.word	0x40000c00

080010e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_TIM6_Init+0x68>)
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <MX_TIM6_Init+0x6c>)
 80010fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275-1;
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_TIM6_Init+0x68>)
 8001100:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001104:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <MX_TIM6_Init+0x68>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_TIM6_Init+0x68>)
 800110e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001112:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_TIM6_Init+0x68>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_TIM6_Init+0x68>)
 800111c:	f00b feed 	bl	800cefa <HAL_TIM_Base_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001126:	f000 ff65 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <MX_TIM6_Init+0x68>)
 8001138:	f00d f9fe 	bl	800e538 <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001142:	f000 ff57 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000d10 	.word	0x20000d10
 8001154:	40001000 	.word	0x40001000

08001158 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	; 0x30
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2224      	movs	r2, #36	; 0x24
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f013 fa2c 	bl	80145c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	463b      	mov	r3, r7
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <MX_TIM8_Init+0xac>)
 8001178:	4a23      	ldr	r2, [pc, #140]	; (8001208 <MX_TIM8_Init+0xb0>)
 800117a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800117c:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_TIM8_Init+0xac>)
 800117e:	2200      	movs	r2, #0
 8001180:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_TIM8_Init+0xac>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16383;
 8001188:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_TIM8_Init+0xac>)
 800118a:	f643 72ff 	movw	r2, #16383	; 0x3fff
 800118e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_TIM8_Init+0xac>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_TIM8_Init+0xac>)
 8001198:	2200      	movs	r2, #0
 800119a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_TIM8_Init+0xac>)
 800119e:	2280      	movs	r2, #128	; 0x80
 80011a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011a2:	2303      	movs	r3, #3
 80011a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011aa:	2301      	movs	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011ba:	2301      	movs	r3, #1
 80011bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	4619      	mov	r1, r3
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <MX_TIM8_Init+0xac>)
 80011ce:	f00c f9b9 	bl	800d544 <HAL_TIM_Encoder_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80011d8:	f000 ff0c 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <MX_TIM8_Init+0xac>)
 80011ee:	f00d f9a3 	bl	800e538 <HAL_TIMEx_MasterConfigSynchronization>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80011f8:	f000 fefc 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	3730      	adds	r7, #48	; 0x30
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	200006c0 	.word	0x200006c0
 8001208:	40010400 	.word	0x40010400

0800120c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b088      	sub	sp, #32
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
 8001220:	615a      	str	r2, [r3, #20]
 8001222:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_TIM13_Init+0x98>)
 8001226:	4a20      	ldr	r2, [pc, #128]	; (80012a8 <MX_TIM13_Init+0x9c>)
 8001228:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 275-1;
 800122a:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <MX_TIM13_Init+0x98>)
 800122c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001230:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_TIM13_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_TIM13_Init+0x98>)
 800123a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800123e:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001240:	4b18      	ldr	r3, [pc, #96]	; (80012a4 <MX_TIM13_Init+0x98>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_TIM13_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800124c:	4815      	ldr	r0, [pc, #84]	; (80012a4 <MX_TIM13_Init+0x98>)
 800124e:	f00b fe54 	bl	800cefa <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM13_Init+0x50>
  {
    Error_Handler();
 8001258:	f000 fecc 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <MX_TIM13_Init+0x98>)
 800125e:	f00b fffe 	bl	800d25e <HAL_TIM_PWM_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM13_Init+0x60>
  {
    Error_Handler();
 8001268:	f000 fec4 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800126c:	2360      	movs	r3, #96	; 0x60
 800126e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001270:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	4807      	ldr	r0, [pc, #28]	; (80012a4 <MX_TIM13_Init+0x98>)
 8001286:	f00c fb0b 	bl	800d8a0 <HAL_TIM_PWM_ConfigChannel>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM13_Init+0x88>
  {
    Error_Handler();
 8001290:	f000 feb0 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <MX_TIM13_Init+0x98>)
 8001296:	f001 fa99 	bl	80027cc <HAL_TIM_MspPostInit>

}
 800129a:	bf00      	nop
 800129c:	3720      	adds	r7, #32
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000b98 	.word	0x20000b98
 80012a8:	40001c00 	.word	0x40001c00

080012ac <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
 80012c0:	615a      	str	r2, [r3, #20]
 80012c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_TIM14_Init+0x98>)
 80012c6:	4a20      	ldr	r2, [pc, #128]	; (8001348 <MX_TIM14_Init+0x9c>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 275-1;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <MX_TIM14_Init+0x98>)
 80012cc:	f44f 7289 	mov.w	r2, #274	; 0x112
 80012d0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_TIM14_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 80012d8:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_TIM14_Init+0x98>)
 80012da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012de:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_TIM14_Init+0x98>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <MX_TIM14_Init+0x98>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_TIM14_Init+0x98>)
 80012ee:	f00b fe04 	bl	800cefa <HAL_TIM_Base_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM14_Init+0x50>
  {
    Error_Handler();
 80012f8:	f000 fe7c 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80012fc:	4811      	ldr	r0, [pc, #68]	; (8001344 <MX_TIM14_Init+0x98>)
 80012fe:	f00b ffae 	bl	800d25e <HAL_TIM_PWM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM14_Init+0x60>
  {
    Error_Handler();
 8001308:	f000 fe74 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130c:	2360      	movs	r3, #96	; 0x60
 800130e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500-1;
 8001310:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001314:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <MX_TIM14_Init+0x98>)
 8001326:	f00c fabb 	bl	800d8a0 <HAL_TIM_PWM_ConfigChannel>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM14_Init+0x88>
  {
    Error_Handler();
 8001330:	f000 fe60 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <MX_TIM14_Init+0x98>)
 8001336:	f001 fa49 	bl	80027cc <HAL_TIM_MspPostInit>

}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000e44 	.word	0x20000e44
 8001348:	40002000 	.word	0x40002000

0800134c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b098      	sub	sp, #96	; 0x60
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001352:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]
 800136e:	615a      	str	r2, [r3, #20]
 8001370:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001372:	1d3b      	adds	r3, r7, #4
 8001374:	2234      	movs	r2, #52	; 0x34
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f013 f923 	bl	80145c4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800137e:	4b35      	ldr	r3, [pc, #212]	; (8001454 <MX_TIM15_Init+0x108>)
 8001380:	4a35      	ldr	r2, [pc, #212]	; (8001458 <MX_TIM15_Init+0x10c>)
 8001382:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 275-1;
 8001384:	4b33      	ldr	r3, [pc, #204]	; (8001454 <MX_TIM15_Init+0x108>)
 8001386:	f44f 7289 	mov.w	r2, #274	; 0x112
 800138a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b31      	ldr	r3, [pc, #196]	; (8001454 <MX_TIM15_Init+0x108>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8001392:	4b30      	ldr	r3, [pc, #192]	; (8001454 <MX_TIM15_Init+0x108>)
 8001394:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001398:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b2e      	ldr	r3, [pc, #184]	; (8001454 <MX_TIM15_Init+0x108>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80013a0:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <MX_TIM15_Init+0x108>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a6:	4b2b      	ldr	r3, [pc, #172]	; (8001454 <MX_TIM15_Init+0x108>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80013ac:	4829      	ldr	r0, [pc, #164]	; (8001454 <MX_TIM15_Init+0x108>)
 80013ae:	f00b ff56 	bl	800d25e <HAL_TIM_PWM_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 80013b8:	f000 fe1c 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80013c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013c8:	4619      	mov	r1, r3
 80013ca:	4822      	ldr	r0, [pc, #136]	; (8001454 <MX_TIM15_Init+0x108>)
 80013cc:	f00d f8b4 	bl	800e538 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 80013d6:	f000 fe0d 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013da:	2360      	movs	r3, #96	; 0x60
 80013dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2000-1;
 80013de:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e4:	2300      	movs	r3, #0
 80013e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	4814      	ldr	r0, [pc, #80]	; (8001454 <MX_TIM15_Init+0x108>)
 8001402:	f00c fa4d 	bl	800d8a0 <HAL_TIM_PWM_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM15_Init+0xc4>
  {
    Error_Handler();
 800140c:	f000 fdf2 	bl	8001ff4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001428:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4807      	ldr	r0, [pc, #28]	; (8001454 <MX_TIM15_Init+0x108>)
 8001438:	f00d f91a 	bl	800e670 <HAL_TIMEx_ConfigBreakDeadTime>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8001442:	f000 fdd7 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001446:	4803      	ldr	r0, [pc, #12]	; (8001454 <MX_TIM15_Init+0x108>)
 8001448:	f001 f9c0 	bl	80027cc <HAL_TIM_MspPostInit>

}
 800144c:	bf00      	nop
 800144e:	3760      	adds	r7, #96	; 0x60
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200007e8 	.word	0x200007e8
 8001458:	40014000 	.word	0x40014000

0800145c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b094      	sub	sp, #80	; 0x50
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001462:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]
 8001472:	615a      	str	r2, [r3, #20]
 8001474:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001476:	463b      	mov	r3, r7
 8001478:	2234      	movs	r2, #52	; 0x34
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f013 f8a1 	bl	80145c4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001482:	4b32      	ldr	r3, [pc, #200]	; (800154c <MX_TIM16_Init+0xf0>)
 8001484:	4a32      	ldr	r2, [pc, #200]	; (8001550 <MX_TIM16_Init+0xf4>)
 8001486:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 275-1;
 8001488:	4b30      	ldr	r3, [pc, #192]	; (800154c <MX_TIM16_Init+0xf0>)
 800148a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800148e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001490:	4b2e      	ldr	r3, [pc, #184]	; (800154c <MX_TIM16_Init+0xf0>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000-1;
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <MX_TIM16_Init+0xf0>)
 8001498:	f240 32e7 	movw	r2, #999	; 0x3e7
 800149c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149e:	4b2b      	ldr	r3, [pc, #172]	; (800154c <MX_TIM16_Init+0xf0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014a4:	4b29      	ldr	r3, [pc, #164]	; (800154c <MX_TIM16_Init+0xf0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <MX_TIM16_Init+0xf0>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014b0:	4826      	ldr	r0, [pc, #152]	; (800154c <MX_TIM16_Init+0xf0>)
 80014b2:	f00b fd22 	bl	800cefa <HAL_TIM_Base_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM16_Init+0x64>
  {
    Error_Handler();
 80014bc:	f000 fd9a 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80014c0:	4822      	ldr	r0, [pc, #136]	; (800154c <MX_TIM16_Init+0xf0>)
 80014c2:	f00b fecc 	bl	800d25e <HAL_TIM_PWM_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM16_Init+0x74>
  {
    Error_Handler();
 80014cc:	f000 fd92 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014d0:	2360      	movs	r3, #96	; 0x60
 80014d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80014d4:	f240 13f3 	movw	r3, #499	; 0x1f3
 80014d8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014da:	2300      	movs	r3, #0
 80014dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014de:	2300      	movs	r3, #0
 80014e0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014f2:	2200      	movs	r2, #0
 80014f4:	4619      	mov	r1, r3
 80014f6:	4815      	ldr	r0, [pc, #84]	; (800154c <MX_TIM16_Init+0xf0>)
 80014f8:	f00c f9d2 	bl	800d8a0 <HAL_TIM_PWM_ConfigChannel>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM16_Init+0xaa>
  {
    Error_Handler();
 8001502:	f000 fd77 	bl	8001ff4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800150a:	2300      	movs	r3, #0
 800150c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800151a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	4619      	mov	r1, r3
 800152c:	4807      	ldr	r0, [pc, #28]	; (800154c <MX_TIM16_Init+0xf0>)
 800152e:	f00d f89f 	bl	800e670 <HAL_TIMEx_ConfigBreakDeadTime>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM16_Init+0xe0>
  {
    Error_Handler();
 8001538:	f000 fd5c 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800153c:	4803      	ldr	r0, [pc, #12]	; (800154c <MX_TIM16_Init+0xf0>)
 800153e:	f001 f945 	bl	80027cc <HAL_TIM_MspPostInit>

}
 8001542:	bf00      	nop
 8001544:	3750      	adds	r7, #80	; 0x50
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000e90 	.word	0x20000e90
 8001550:	40014400 	.word	0x40014400

08001554 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b094      	sub	sp, #80	; 0x50
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800155a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]
 800156a:	615a      	str	r2, [r3, #20]
 800156c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800156e:	463b      	mov	r3, r7
 8001570:	2234      	movs	r2, #52	; 0x34
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f013 f825 	bl	80145c4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <MX_TIM17_Init+0xf0>)
 800157c:	4a32      	ldr	r2, [pc, #200]	; (8001648 <MX_TIM17_Init+0xf4>)
 800157e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 275-1;
 8001580:	4b30      	ldr	r3, [pc, #192]	; (8001644 <MX_TIM17_Init+0xf0>)
 8001582:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001586:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001588:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <MX_TIM17_Init+0xf0>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000-1;
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <MX_TIM17_Init+0xf0>)
 8001590:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001594:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <MX_TIM17_Init+0xf0>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800159c:	4b29      	ldr	r3, [pc, #164]	; (8001644 <MX_TIM17_Init+0xf0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a2:	4b28      	ldr	r3, [pc, #160]	; (8001644 <MX_TIM17_Init+0xf0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80015a8:	4826      	ldr	r0, [pc, #152]	; (8001644 <MX_TIM17_Init+0xf0>)
 80015aa:	f00b fca6 	bl	800cefa <HAL_TIM_Base_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80015b4:	f000 fd1e 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80015b8:	4822      	ldr	r0, [pc, #136]	; (8001644 <MX_TIM17_Init+0xf0>)
 80015ba:	f00b fe50 	bl	800d25e <HAL_TIM_PWM_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80015c4:	f000 fd16 	bl	8001ff4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c8:	2360      	movs	r3, #96	; 0x60
 80015ca:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 500-1;
 80015cc:	f240 13f3 	movw	r3, #499	; 0x1f3
 80015d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d2:	2300      	movs	r3, #0
 80015d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015d6:	2300      	movs	r3, #0
 80015d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	4815      	ldr	r0, [pc, #84]	; (8001644 <MX_TIM17_Init+0xf0>)
 80015f0:	f00c f956 	bl	800d8a0 <HAL_TIM_PWM_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM17_Init+0xaa>
  {
    Error_Handler();
 80015fa:	f000 fcfb 	bl	8001ff4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001616:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001618:	2300      	movs	r3, #0
 800161a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001620:	463b      	mov	r3, r7
 8001622:	4619      	mov	r1, r3
 8001624:	4807      	ldr	r0, [pc, #28]	; (8001644 <MX_TIM17_Init+0xf0>)
 8001626:	f00d f823 	bl	800e670 <HAL_TIMEx_ConfigBreakDeadTime>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM17_Init+0xe0>
  {
    Error_Handler();
 8001630:	f000 fce0 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001634:	4803      	ldr	r0, [pc, #12]	; (8001644 <MX_TIM17_Init+0xf0>)
 8001636:	f001 f8c9 	bl	80027cc <HAL_TIM_MspPostInit>

}
 800163a:	bf00      	nop
 800163c:	3750      	adds	r7, #80	; 0x50
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200008a8 	.word	0x200008a8
 8001648:	40014800 	.word	0x40014800

0800164c <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001652:	f107 0310 	add.w	r3, r7, #16
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	609a      	str	r2, [r3, #8]
 800165e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <MX_TIM23_Init+0x98>)
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <MX_TIM23_Init+0x9c>)
 800166e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_TIM23_Init+0x98>)
 8001672:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001676:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_TIM23_Init+0x98>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_TIM23_Init+0x98>)
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <MX_TIM23_Init+0x98>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <MX_TIM23_Init+0x98>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8001692:	4814      	ldr	r0, [pc, #80]	; (80016e4 <MX_TIM23_Init+0x98>)
 8001694:	f00b fc31 	bl	800cefa <HAL_TIM_Base_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 800169e:	f000 fca9 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	4619      	mov	r1, r3
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <MX_TIM23_Init+0x98>)
 80016b0:	f00c fa0a 	bl	800dac8 <HAL_TIM_ConfigClockSource>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 80016ba:	f000 fc9b 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <MX_TIM23_Init+0x98>)
 80016cc:	f00c ff34 	bl	800e538 <HAL_TIMEx_MasterConfigSynchronization>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 80016d6:	f000 fc8d 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3720      	adds	r7, #32
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000df8 	.word	0x20000df8
 80016e8:	4000e000 	.word	0x4000e000

080016ec <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b088      	sub	sp, #32
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <MX_TIM24_Init+0x98>)
 800170c:	4a1e      	ldr	r2, [pc, #120]	; (8001788 <MX_TIM24_Init+0x9c>)
 800170e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 275-1;
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_TIM24_Init+0x98>)
 8001712:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001716:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_TIM24_Init+0x98>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 4294967295;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_TIM24_Init+0x98>)
 8001720:	f04f 32ff 	mov.w	r2, #4294967295
 8001724:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_TIM24_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_TIM24_Init+0x98>)
 800172e:	2200      	movs	r2, #0
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 8001732:	4814      	ldr	r0, [pc, #80]	; (8001784 <MX_TIM24_Init+0x98>)
 8001734:	f00b fbe1 	bl	800cefa <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM24_Init+0x56>
  {
    Error_Handler();
 800173e:	f000 fc59 	bl	8001ff4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <MX_TIM24_Init+0x98>)
 8001750:	f00c f9ba 	bl	800dac8 <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM24_Init+0x72>
  {
    Error_Handler();
 800175a:	f000 fc4b 	bl	8001ff4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800175e:	2300      	movs	r3, #0
 8001760:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <MX_TIM24_Init+0x98>)
 800176c:	f00c fee4 	bl	800e538 <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM24_Init+0x8e>
  {
    Error_Handler();
 8001776:	f000 fc3d 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000670 	.word	0x20000670
 8001788:	4000e400 	.word	0x4000e400

0800178c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <MX_UART5_Init+0x90>)
 8001792:	4a23      	ldr	r2, [pc, #140]	; (8001820 <MX_UART5_Init+0x94>)
 8001794:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <MX_UART5_Init+0x90>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <MX_UART5_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <MX_UART5_Init+0x90>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_UART5_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_UART5_Init+0x90>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <MX_UART5_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_UART5_Init+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_UART5_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_UART5_Init+0x90>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_UART5_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80017d4:	4811      	ldr	r0, [pc, #68]	; (800181c <MX_UART5_Init+0x90>)
 80017d6:	f00c ffeb 	bl	800e7b0 <HAL_UART_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 80017e0:	f000 fc08 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e4:	2100      	movs	r1, #0
 80017e6:	480d      	ldr	r0, [pc, #52]	; (800181c <MX_UART5_Init+0x90>)
 80017e8:	f00f f905 	bl	80109f6 <HAL_UARTEx_SetTxFifoThreshold>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 80017f2:	f000 fbff 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f6:	2100      	movs	r1, #0
 80017f8:	4808      	ldr	r0, [pc, #32]	; (800181c <MX_UART5_Init+0x90>)
 80017fa:	f00f f93a 	bl	8010a72 <HAL_UARTEx_SetRxFifoThreshold>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001804:	f000 fbf6 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_UART5_Init+0x90>)
 800180a:	f00f f8bb 	bl	8010984 <HAL_UARTEx_DisableFifoMode>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001814:	f000 fbee 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000a20 	.word	0x20000a20
 8001820:	40005000 	.word	0x40005000

08001824 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 800182a:	4a23      	ldr	r2, [pc, #140]	; (80018b8 <MX_USART1_UART_Init+0x94>)
 800182c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2000000;
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 8001830:	4a22      	ldr	r2, [pc, #136]	; (80018bc <MX_USART1_UART_Init+0x98>)
 8001832:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001846:	4b1b      	ldr	r3, [pc, #108]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 8001848:	220c      	movs	r2, #12
 800184a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 800184e:	2200      	movs	r2, #0
 8001850:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 800185a:	2200      	movs	r2, #0
 800185c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 8001866:	2200      	movs	r2, #0
 8001868:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800186a:	4812      	ldr	r0, [pc, #72]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 800186c:	f00c ffa0 	bl	800e7b0 <HAL_UART_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001876:	f000 fbbd 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800187a:	2100      	movs	r1, #0
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 800187e:	f00f f8ba 	bl	80109f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001888:	f000 fbb4 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800188c:	2100      	movs	r1, #0
 800188e:	4809      	ldr	r0, [pc, #36]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 8001890:	f00f f8ef 	bl	8010a72 <HAL_UARTEx_SetRxFifoThreshold>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 800189a:	f000 fbab 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_USART1_UART_Init+0x90>)
 80018a0:	f00f f870 	bl	8010984 <HAL_UARTEx_DisableFifoMode>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 80018aa:	f000 fba3 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000be4 	.word	0x20000be4
 80018b8:	40011000 	.word	0x40011000
 80018bc:	001e8480 	.word	0x001e8480

080018c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018c4:	4b22      	ldr	r3, [pc, #136]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018c6:	4a23      	ldr	r2, [pc, #140]	; (8001954 <MX_USART3_UART_Init+0x94>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ca:	4b21      	ldr	r3, [pc, #132]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b1f      	ldr	r3, [pc, #124]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b1d      	ldr	r3, [pc, #116]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018de:	4b1c      	ldr	r3, [pc, #112]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b19      	ldr	r3, [pc, #100]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b17      	ldr	r3, [pc, #92]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f6:	4b16      	ldr	r3, [pc, #88]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <MX_USART3_UART_Init+0x90>)
 80018fe:	2200      	movs	r2, #0
 8001900:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001902:	4b13      	ldr	r3, [pc, #76]	; (8001950 <MX_USART3_UART_Init+0x90>)
 8001904:	2200      	movs	r2, #0
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001908:	4811      	ldr	r0, [pc, #68]	; (8001950 <MX_USART3_UART_Init+0x90>)
 800190a:	f00c ff51 	bl	800e7b0 <HAL_UART_Init>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001914:	f000 fb6e 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001918:	2100      	movs	r1, #0
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <MX_USART3_UART_Init+0x90>)
 800191c:	f00f f86b 	bl	80109f6 <HAL_UARTEx_SetTxFifoThreshold>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001926:	f000 fb65 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192a:	2100      	movs	r1, #0
 800192c:	4808      	ldr	r0, [pc, #32]	; (8001950 <MX_USART3_UART_Init+0x90>)
 800192e:	f00f f8a0 	bl	8010a72 <HAL_UARTEx_SetRxFifoThreshold>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001938:	f000 fb5c 	bl	8001ff4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_USART3_UART_Init+0x90>)
 800193e:	f00f f821 	bl	8010984 <HAL_UARTEx_DisableFifoMode>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001948:	f000 fb54 	bl	8001ff4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000758 	.word	0x20000758
 8001954:	40004800 	.word	0x40004800

08001958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <MX_DMA_Init+0x3c>)
 8001960:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001964:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <MX_DMA_Init+0x3c>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800196e:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_DMA_Init+0x3c>)
 8001970:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	200b      	movs	r0, #11
 8001982:	f003 fbfe 	bl	8005182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001986:	200b      	movs	r0, #11
 8001988:	f003 fc15 	bl	80051b6 <HAL_NVIC_EnableIRQ>

}
 800198c:	bf00      	nop
 800198e:	3708      	adds	r7, #8
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	58024400 	.word	0x58024400

08001998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	; 0x30
 800199c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ae:	4b6a      	ldr	r3, [pc, #424]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 80019b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b4:	4a68      	ldr	r2, [pc, #416]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 80019b6:	f043 0310 	orr.w	r3, r3, #16
 80019ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019be:	4b66      	ldr	r3, [pc, #408]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 80019c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019cc:	4b62      	ldr	r3, [pc, #392]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d2:	4a61      	ldr	r2, [pc, #388]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 80019d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019dc:	4b5e      	ldr	r3, [pc, #376]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ea:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	4a59      	ldr	r2, [pc, #356]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fa:	4b57      	ldr	r3, [pc, #348]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a08:	4b53      	ldr	r3, [pc, #332]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	4a52      	ldr	r2, [pc, #328]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 8001a10:	f043 0304 	orr.w	r3, r3, #4
 8001a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a18:	4b4f      	ldr	r3, [pc, #316]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	4b4c      	ldr	r3, [pc, #304]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 8001a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2c:	4a4a      	ldr	r2, [pc, #296]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 8001a2e:	f043 0302 	orr.w	r3, r3, #2
 8001a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a36:	4b48      	ldr	r3, [pc, #288]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 8001a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a44:	4b44      	ldr	r3, [pc, #272]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 8001a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4a:	4a43      	ldr	r2, [pc, #268]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 8001a4c:	f043 0308 	orr.w	r3, r3, #8
 8001a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a54:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <MX_GPIO_Init+0x1c0>)
 8001a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001a62:	2200      	movs	r2, #0
 8001a64:	f648 31df 	movw	r1, #35807	; 0x8bdf
 8001a68:	483c      	ldr	r0, [pc, #240]	; (8001b5c <MX_GPIO_Init+0x1c4>)
 8001a6a:	f006 f83b 	bl	8007ae4 <HAL_GPIO_WritePin>
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Griper0_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 7104 	mov.w	r1, #528	; 0x210
 8001a74:	483a      	ldr	r0, [pc, #232]	; (8001b60 <MX_GPIO_Init+0x1c8>)
 8001a76:	f006 f835 	bl	8007ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EMSW1_Pin|EN45_Pin|EN123_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	21c4      	movs	r1, #196	; 0xc4
 8001a7e:	4839      	ldr	r0, [pc, #228]	; (8001b64 <MX_GPIO_Init+0x1cc>)
 8001a80:	f006 f830 	bl	8007ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED4_Pin|LED3_Pin|SPI3_EN_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f24c 0140 	movw	r1, #49216	; 0xc040
 8001a8a:	4837      	ldr	r0, [pc, #220]	; (8001b68 <MX_GPIO_Init+0x1d0>)
 8001a8c:	f006 f82a 	bl	8007ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a96:	4832      	ldr	r0, [pc, #200]	; (8001b60 <MX_GPIO_Init+0x1c8>)
 8001a98:	f006 f824 	bl	8007ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI3_SS6_Pin|SPI3_SS5_Pin|SPI3_SS4_Pin|SPI3_SS3_Pin
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	213f      	movs	r1, #63	; 0x3f
 8001aa0:	4831      	ldr	r0, [pc, #196]	; (8001b68 <MX_GPIO_Init+0x1d0>)
 8001aa2:	f006 f81f 	bl	8007ae4 <HAL_GPIO_WritePin>
                          |SPI3_SS2_Pin|SPI3_SS1_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : DIR3_Pin DIR4_Pin DIR5_Pin Output_EN_Pin
                           EMSW2_Pin EMSW3_Pin EMSW4_Pin EERAM_SS_Pin
                           EERAM_HOLD_Pin DIR1_Pin DIR2_Pin */
  GPIO_InitStruct.Pin = DIR3_Pin|DIR4_Pin|DIR5_Pin|Output_EN_Pin
 8001aa6:	f648 33df 	movw	r3, #35807	; 0x8bdf
 8001aaa:	61fb      	str	r3, [r7, #28]
                          |EMSW2_Pin|EMSW3_Pin|EMSW4_Pin|EERAM_SS_Pin
                          |EERAM_HOLD_Pin|DIR1_Pin|DIR2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aac:	2301      	movs	r3, #1
 8001aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab8:	f107 031c 	add.w	r3, r7, #28
 8001abc:	4619      	mov	r1, r3
 8001abe:	4827      	ldr	r0, [pc, #156]	; (8001b5c <MX_GPIO_Init+0x1c4>)
 8001ac0:	f005 fe68 	bl	8007794 <HAL_GPIO_Init>

  /*Configure GPIO pins : Griper0_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = Griper0_Pin|LED2_Pin|LED1_Pin;
 8001ac4:	f44f 7344 	mov.w	r3, #784	; 0x310
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4820      	ldr	r0, [pc, #128]	; (8001b60 <MX_GPIO_Init+0x1c8>)
 8001ade:	f005 fe59 	bl	8007794 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMSW0_Pin */
  GPIO_InitStruct.Pin = EMSW0_Pin;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ae6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001aea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EMSW0_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	4619      	mov	r1, r3
 8001af6:	481b      	ldr	r0, [pc, #108]	; (8001b64 <MX_GPIO_Init+0x1cc>)
 8001af8:	f005 fe4c 	bl	8007794 <HAL_GPIO_Init>

  /*Configure GPIO pins : EMSW1_Pin EN45_Pin EN123_Pin */
  GPIO_InitStruct.Pin = EMSW1_Pin|EN45_Pin|EN123_Pin;
 8001afc:	23c4      	movs	r3, #196	; 0xc4
 8001afe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	4814      	ldr	r0, [pc, #80]	; (8001b64 <MX_GPIO_Init+0x1cc>)
 8001b14:	f005 fe3e 	bl	8007794 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED4_Pin LED3_Pin SPI3_SS6_Pin SPI3_SS5_Pin
                           SPI3_SS4_Pin SPI3_SS3_Pin SPI3_SS2_Pin SPI3_SS1_Pin
                           SPI3_EN_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED3_Pin|SPI3_SS6_Pin|SPI3_SS5_Pin
 8001b18:	f24c 037f 	movw	r3, #49279	; 0xc07f
 8001b1c:	61fb      	str	r3, [r7, #28]
                          |SPI3_SS4_Pin|SPI3_SS3_Pin|SPI3_SS2_Pin|SPI3_SS1_Pin
                          |SPI3_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b2a:	f107 031c 	add.w	r3, r7, #28
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480d      	ldr	r0, [pc, #52]	; (8001b68 <MX_GPIO_Init+0x1d0>)
 8001b32:	f005 fe2f 	bl	8007794 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC6I_Pin */
  GPIO_InitStruct.Pin = ENC6I_Pin;
 8001b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC6I_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4808      	ldr	r0, [pc, #32]	; (8001b6c <MX_GPIO_Init+0x1d4>)
 8001b4c:	f005 fe22 	bl	8007794 <HAL_GPIO_Init>

}
 8001b50:	bf00      	nop
 8001b52:	3730      	adds	r7, #48	; 0x30
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	58021000 	.word	0x58021000
 8001b60:	58020800 	.word	0x58020800
 8001b64:	58020400 	.word	0x58020400
 8001b68:	58020c00 	.word	0x58020c00
 8001b6c:	58020000 	.word	0x58020000

08001b70 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	Uart_Flag |= 0x01;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <HAL_UART_RxCpltCallback+0x28>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_UART_RxCpltCallback+0x28>)
 8001b84:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 14);
 8001b86:	220e      	movs	r2, #14
 8001b88:	4904      	ldr	r1, [pc, #16]	; (8001b9c <HAL_UART_RxCpltCallback+0x2c>)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <HAL_UART_RxCpltCallback+0x30>)
 8001b8c:	f00c fe60 	bl	800e850 <HAL_UART_Receive_IT>
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000434 	.word	0x20000434
 8001b9c:	20000440 	.word	0x20000440
 8001ba0:	20000be4 	.word	0x20000be4

08001ba4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
//	__HAL_UART_CLEAR_OREFLAG(huart);
//    HAL_UART_DeInit();
    HAL_UART_Receive_DMA(&huart1, UART1_rxBuffer, 14);
 8001bac:	220e      	movs	r2, #14
 8001bae:	4904      	ldr	r1, [pc, #16]	; (8001bc0 <HAL_UART_ErrorCallback+0x1c>)
 8001bb0:	4804      	ldr	r0, [pc, #16]	; (8001bc4 <HAL_UART_ErrorCallback+0x20>)
 8001bb2:	f00c fea3 	bl	800e8fc <HAL_UART_Receive_DMA>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000440 	.word	0x20000440
 8001bc4:	20000be4 	.word	0x20000be4

08001bc8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	uint32_t ADC_Output = HAL_ADC_GetValue(&hadc3);
 8001bd0:	4810      	ldr	r0, [pc, #64]	; (8001c14 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001bd2:	f001 ffd5 	bl	8003b80 <HAL_ADC_GetValue>
 8001bd6:	60f8      	str	r0, [r7, #12]
	System_Status.Temperature = Temp_Calibration * (float)((float)ADC_Output - *(unsigned short*) (0x1FF1E820)) + 30.0f;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_ADC_ConvCpltCallback+0x50>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	ee07 3a90 	vmov	s15, r3
 8001bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_ADC_ConvCpltCallback+0x54>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001c00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c04:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <HAL_ADC_ConvCpltCallback+0x58>)
 8001c06:	edc3 7a00 	vstr	s15, [r3]
//	System_Status.Vin = 0.0008056640625f*ADC_Output;
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000ab0 	.word	0x20000ab0
 8001c18:	1ff1e820 	.word	0x1ff1e820
 8001c1c:	2000043c 	.word	0x2000043c
 8001c20:	200008f4 	.word	0x200008f4

08001c24 <delay_us>:
inline uint8_t crc_uart(){
	return (uint8_t) HAL_CRC_Calculate(&hcrc, UART1_rxBuffer, 13) ^ 0xFF;
}

inline void delay_us (int us)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	TIM24->CNT = 0;
 8001c2c:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <delay_us+0x28>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24
	while ((TIM24->CNT) < us);
 8001c32:	bf00      	nop
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <delay_us+0x28>)
 8001c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d3fa      	bcc.n	8001c34 <delay_us+0x10>
}
 8001c3e:	bf00      	nop
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	4000e400 	.word	0x4000e400

08001c50 <Encoder_Setup>:
			}
		}
	}
}

void Encoder_Setup(){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	/* SETTINGS3 (0x001A) --> ABIRES R/W/P 7:5 Resolution of ABI 0x0080 for 14bits Resolution */

	Encoder_command(GPIOD, GPIO_PIN_5 ,0x001A ,0x0080);
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	221a      	movs	r2, #26
 8001c58:	2120      	movs	r1, #32
 8001c5a:	480e      	ldr	r0, [pc, #56]	; (8001c94 <Encoder_Setup+0x44>)
 8001c5c:	f000 f81c 	bl	8001c98 <Encoder_command>
	Encoder_command(GPIOD, GPIO_PIN_4 ,0x001A ,0x0080);
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	221a      	movs	r2, #26
 8001c64:	2110      	movs	r1, #16
 8001c66:	480b      	ldr	r0, [pc, #44]	; (8001c94 <Encoder_Setup+0x44>)
 8001c68:	f000 f816 	bl	8001c98 <Encoder_command>
	Encoder_command(GPIOD, GPIO_PIN_3 ,0x001A ,0x0080);
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	221a      	movs	r2, #26
 8001c70:	2108      	movs	r1, #8
 8001c72:	4808      	ldr	r0, [pc, #32]	; (8001c94 <Encoder_Setup+0x44>)
 8001c74:	f000 f810 	bl	8001c98 <Encoder_command>
	Encoder_command(GPIOD, GPIO_PIN_2 ,0x001A ,0x0080);
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	221a      	movs	r2, #26
 8001c7c:	2104      	movs	r1, #4
 8001c7e:	4805      	ldr	r0, [pc, #20]	; (8001c94 <Encoder_Setup+0x44>)
 8001c80:	f000 f80a 	bl	8001c98 <Encoder_command>
	Encoder_command(GPIOD, GPIO_PIN_1 ,0x001A ,0x0080);
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	221a      	movs	r2, #26
 8001c88:	2102      	movs	r1, #2
 8001c8a:	4802      	ldr	r0, [pc, #8]	; (8001c94 <Encoder_Setup+0x44>)
 8001c8c:	f000 f804 	bl	8001c98 <Encoder_command>
//		Joint[i].EncoderPosition[1] = Avg_Position;
//		Avg_Position = 0;
//	}

//	Encoder_command(GPIOD, GPIO_PIN_0 ,0x001A ,0x0080);  //Base Encoder
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	58020c00 	.word	0x58020c00

08001c98 <Encoder_command>:

void Encoder_command(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,uint16_t Address_input, uint16_t command_input) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af02      	add	r7, sp, #8
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	4608      	mov	r0, r1
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	817b      	strh	r3, [r7, #10]
 8001caa:	460b      	mov	r3, r1
 8001cac:	813b      	strh	r3, [r7, #8]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	80fb      	strh	r3, [r7, #6]
	uint8_t Encoder_command_buffer[3] = { 0 };
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <Encoder_command+0xe8>)
 8001cb4:	881b      	ldrh	r3, [r3, #0]
 8001cb6:	83bb      	strh	r3, [r7, #28]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	77bb      	strb	r3, [r7, #30]
	uint32_t Address[1] = {0};
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
	uint32_t data_input[1] = {0};
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
	Address[0] = (uint32_t)Address_input;
 8001cc4:	893b      	ldrh	r3, [r7, #8]
 8001cc6:	61bb      	str	r3, [r7, #24]
	data_input[0] = (uint32_t)command_input;
 8001cc8:	88fb      	ldrh	r3, [r7, #6]
 8001cca:	617b      	str	r3, [r7, #20]

	delay_us(2);
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7ff ffa9 	bl	8001c24 <delay_us>
	uint8_t crc_out = (uint8_t) HAL_CRC_Calculate(&hcrc, Address, 1) ^ 0xFF;
 8001cd2:	f107 0318 	add.w	r3, r7, #24
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4619      	mov	r1, r3
 8001cda:	482a      	ldr	r0, [pc, #168]	; (8001d84 <Encoder_command+0xec>)
 8001cdc:	f003 faea 	bl	80052b4 <HAL_CRC_Calculate>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	77fb      	strb	r3, [r7, #31]
	Encoder_command_buffer[0] = (uint8_t) (Address[0] >> 8);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	773b      	strb	r3, [r7, #28]
	Encoder_command_buffer[1] = (uint8_t) Address[0] & 0xFF;
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	777b      	strb	r3, [r7, #29]
	Encoder_command_buffer[2] = crc_out;
 8001cf6:	7ffb      	ldrb	r3, [r7, #31]
 8001cf8:	77bb      	strb	r3, [r7, #30]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);
 8001cfa:	897b      	ldrh	r3, [r7, #10]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	4619      	mov	r1, r3
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f005 feef 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, Encoder_command_buffer, 3, 1);
 8001d06:	f107 011c 	add.w	r1, r7, #28
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	481e      	ldr	r0, [pc, #120]	; (8001d88 <Encoder_command+0xf0>)
 8001d10:	f00a fb2c 	bl	800c36c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);
 8001d14:	897b      	ldrh	r3, [r7, #10]
 8001d16:	2201      	movs	r2, #1
 8001d18:	4619      	mov	r1, r3
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f005 fee2 	bl	8007ae4 <HAL_GPIO_WritePin>

	delay_us(2);
 8001d20:	2002      	movs	r0, #2
 8001d22:	f7ff ff7f 	bl	8001c24 <delay_us>
	crc_out = (uint8_t) HAL_CRC_Calculate(&hcrc, data_input, 1) ^ 0xFF;
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4815      	ldr	r0, [pc, #84]	; (8001d84 <Encoder_command+0xec>)
 8001d30:	f003 fac0 	bl	80052b4 <HAL_CRC_Calculate>
 8001d34:	4603      	mov	r3, r0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	77fb      	strb	r3, [r7, #31]
	Encoder_command_buffer[0] = (uint8_t) (data_input[0] >> 8);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	0a1b      	lsrs	r3, r3, #8
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	773b      	strb	r3, [r7, #28]
	Encoder_command_buffer[1] = (uint8_t) data_input[0] & 0xFF;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	777b      	strb	r3, [r7, #29]
	Encoder_command_buffer[2] = crc_out;
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
 8001d4c:	77bb      	strb	r3, [r7, #30]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 0);
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	2200      	movs	r2, #0
 8001d52:	4619      	mov	r1, r3
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f005 fec5 	bl	8007ae4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi3, Encoder_command_buffer, output_spi_test, 3, 1);
 8001d5a:	f107 011c 	add.w	r1, r7, #28
 8001d5e:	2301      	movs	r3, #1
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2303      	movs	r3, #3
 8001d64:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <Encoder_command+0xf4>)
 8001d66:	4808      	ldr	r0, [pc, #32]	; (8001d88 <Encoder_command+0xf0>)
 8001d68:	f00a fcf2 	bl	800c750 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, 1);
 8001d6c:	897b      	ldrh	r3, [r7, #10]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	4619      	mov	r1, r3
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f005 feb6 	bl	8007ae4 <HAL_GPIO_WritePin>
}
 8001d78:	bf00      	nop
 8001d7a:	3720      	adds	r7, #32
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	080145ec 	.word	0x080145ec
 8001d84:	20000834 	.word	0x20000834
 8001d88:	20000998 	.word	0x20000998
 8001d8c:	200006bc 	.word	0x200006bc

08001d90 <StartUp_Init_Parameter>:

void StartUp_Init_Parameter(void){
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
	// Control Parameter
	Joint[0].PositionPConstant = 1;
 8001d96:	4b88      	ldr	r3, [pc, #544]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001d98:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d9c:	619a      	str	r2, [r3, #24]
	Joint[0].VelocityPIDConstant[0] = 1;
 8001d9e:	4b86      	ldr	r3, [pc, #536]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001da0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001da4:	625a      	str	r2, [r3, #36]	; 0x24
	Joint[0].VelocityPIDConstant[1] = 0;
 8001da6:	4b84      	ldr	r3, [pc, #528]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	629a      	str	r2, [r3, #40]	; 0x28
	Joint[0].VelocityPIDConstant[2] = 0;
 8001dae:	4b82      	ldr	r3, [pc, #520]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	62da      	str	r2, [r3, #44]	; 0x2c
	Joint[0].DigitalIO_Port[0] = GPIOD;		// SPI CS
 8001db6:	4b80      	ldr	r3, [pc, #512]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001db8:	4a80      	ldr	r2, [pc, #512]	; (8001fbc <StartUp_Init_Parameter+0x22c>)
 8001dba:	671a      	str	r2, [r3, #112]	; 0x70
	Joint[0].DigitalIO_Port[1] = GPIOE;		// DIR
 8001dbc:	4b7e      	ldr	r3, [pc, #504]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001dbe:	4a80      	ldr	r2, [pc, #512]	; (8001fc0 <StartUp_Init_Parameter+0x230>)
 8001dc0:	675a      	str	r2, [r3, #116]	; 0x74
	Joint[0].DigitalIO_Pin[0] = GPIO_PIN_5;
 8001dc2:	4b7d      	ldr	r3, [pc, #500]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	Joint[0].DigitalIO_Pin[1] = GPIO_PIN_0;
 8001dca:	4b7b      	ldr	r3, [pc, #492]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	Joint[0].TIMx_PWM = TIM13;
 8001dd2:	4b79      	ldr	r3, [pc, #484]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001dd4:	4a7b      	ldr	r2, [pc, #492]	; (8001fc4 <StartUp_Init_Parameter+0x234>)
 8001dd6:	67da      	str	r2, [r3, #124]	; 0x7c
	Joint[0].TIMx_ENC = TIM5;
 8001dd8:	4b77      	ldr	r3, [pc, #476]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001dda:	4a7b      	ldr	r2, [pc, #492]	; (8001fc8 <StartUp_Init_Parameter+0x238>)
 8001ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	Joint[1].PositionPConstant = 1;
 8001de0:	4b75      	ldr	r3, [pc, #468]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001de2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001de6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	Joint[1].VelocityPIDConstant[0] = 1;
 8001dea:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001dec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001df0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	Joint[1].VelocityPIDConstant[1] = 0;
 8001df4:	4b70      	ldr	r3, [pc, #448]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	Joint[1].VelocityPIDConstant[2] = 0;
 8001dfe:	4b6e      	ldr	r3, [pc, #440]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	Joint[1].DigitalIO_Port[0] = GPIOD;		// SPI CS
 8001e08:	4b6b      	ldr	r3, [pc, #428]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e0a:	4a6c      	ldr	r2, [pc, #432]	; (8001fbc <StartUp_Init_Parameter+0x22c>)
 8001e0c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	Joint[1].DigitalIO_Port[1] = GPIOE;		// DIR
 8001e10:	4b69      	ldr	r3, [pc, #420]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e12:	4a6b      	ldr	r2, [pc, #428]	; (8001fc0 <StartUp_Init_Parameter+0x230>)
 8001e14:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	Joint[1].DigitalIO_Pin[0] = GPIO_PIN_4;
 8001e18:	4b67      	ldr	r3, [pc, #412]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	Joint[1].DigitalIO_Pin[1] = GPIO_PIN_1;
 8001e20:	4b65      	ldr	r3, [pc, #404]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e22:	2202      	movs	r2, #2
 8001e24:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe
	Joint[1].TIMx_PWM = TIM14;
 8001e28:	4b63      	ldr	r3, [pc, #396]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e2a:	4a68      	ldr	r2, [pc, #416]	; (8001fcc <StartUp_Init_Parameter+0x23c>)
 8001e2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	Joint[0].TIMx_ENC = TIM4;
 8001e30:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e32:	4a67      	ldr	r2, [pc, #412]	; (8001fd0 <StartUp_Init_Parameter+0x240>)
 8001e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	Joint[2].PositionPConstant = 1;
 8001e38:	4b5f      	ldr	r3, [pc, #380]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e3e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	Joint[2].VelocityPIDConstant[0] = 1;
 8001e42:	4b5d      	ldr	r3, [pc, #372]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e44:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e48:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	Joint[2].VelocityPIDConstant[1] = 0;
 8001e4c:	4b5a      	ldr	r3, [pc, #360]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	Joint[2].VelocityPIDConstant[2] = 0;
 8001e56:	4b58      	ldr	r3, [pc, #352]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	Joint[2].DigitalIO_Port[0] = GPIOD;		// SPI CS
 8001e60:	4b55      	ldr	r3, [pc, #340]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e62:	4a56      	ldr	r2, [pc, #344]	; (8001fbc <StartUp_Init_Parameter+0x22c>)
 8001e64:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	Joint[2].DigitalIO_Port[1] = GPIOE;		// DIR
 8001e68:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e6a:	4a55      	ldr	r2, [pc, #340]	; (8001fc0 <StartUp_Init_Parameter+0x230>)
 8001e6c:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	Joint[2].DigitalIO_Pin[0] = GPIO_PIN_3;
 8001e70:	4b51      	ldr	r3, [pc, #324]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e72:	2208      	movs	r2, #8
 8001e74:	f8a3 2180 	strh.w	r2, [r3, #384]	; 0x180
	Joint[2].DigitalIO_Pin[1] = GPIO_PIN_3;
 8001e78:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e7a:	2208      	movs	r2, #8
 8001e7c:	f8a3 2182 	strh.w	r2, [r3, #386]	; 0x182
	Joint[2].TIMx_PWM = TIM16;
 8001e80:	4b4d      	ldr	r3, [pc, #308]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e82:	4a54      	ldr	r2, [pc, #336]	; (8001fd4 <StartUp_Init_Parameter+0x244>)
 8001e84:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	Joint[0].TIMx_ENC = TIM8;
 8001e88:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e8a:	4a53      	ldr	r2, [pc, #332]	; (8001fd8 <StartUp_Init_Parameter+0x248>)
 8001e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	Joint[3].PositionPConstant = 1;
 8001e90:	4b49      	ldr	r3, [pc, #292]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e92:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001e96:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	Joint[3].VelocityPIDConstant[0] = 1;
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001e9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ea0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	Joint[3].VelocityPIDConstant[1] = 0;
 8001ea4:	4b44      	ldr	r3, [pc, #272]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	Joint[3].VelocityPIDConstant[2] = 0;
 8001eae:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
	Joint[3].DigitalIO_Port[0] = GPIOD;		// SPI CS
 8001eb8:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001eba:	4a40      	ldr	r2, [pc, #256]	; (8001fbc <StartUp_Init_Parameter+0x22c>)
 8001ebc:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
	Joint[3].DigitalIO_Port[1] = GPIOE;		// DIR
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001ec2:	4a3f      	ldr	r2, [pc, #252]	; (8001fc0 <StartUp_Init_Parameter+0x230>)
 8001ec4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	Joint[3].DigitalIO_Pin[0] = GPIO_PIN_2;
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001eca:	2204      	movs	r2, #4
 8001ecc:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
	Joint[3].DigitalIO_Pin[1] = GPIO_PIN_4;
 8001ed0:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	Joint[3].TIMx_PWM = TIM17;
 8001ed8:	4b37      	ldr	r3, [pc, #220]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001eda:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <StartUp_Init_Parameter+0x24c>)
 8001edc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
	Joint[0].TIMx_ENC = TIM1;
 8001ee0:	4b35      	ldr	r3, [pc, #212]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	; (8001fe0 <StartUp_Init_Parameter+0x250>)
 8001ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	Joint[4].PositionPConstant = 1;
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001eea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001eee:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	Joint[4].VelocityPIDConstant[0] = 1;
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001ef4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ef8:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
	Joint[4].VelocityPIDConstant[1] = 0;
 8001efc:	4b2e      	ldr	r3, [pc, #184]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
	Joint[4].VelocityPIDConstant[2] = 0;
 8001f06:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f8c3 223c 	str.w	r2, [r3, #572]	; 0x23c
	Joint[4].DigitalIO_Port[0] = GPIOD;		// SPI CS
 8001f10:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001f12:	4a2a      	ldr	r2, [pc, #168]	; (8001fbc <StartUp_Init_Parameter+0x22c>)
 8001f14:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	Joint[4].DigitalIO_Port[1] = GPIOE;		// DIR
 8001f18:	4b27      	ldr	r3, [pc, #156]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001f1a:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <StartUp_Init_Parameter+0x230>)
 8001f1c:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	Joint[4].DigitalIO_Pin[0] = GPIO_PIN_1;
 8001f20:	4b25      	ldr	r3, [pc, #148]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001f22:	2202      	movs	r2, #2
 8001f24:	f8a3 2288 	strh.w	r2, [r3, #648]	; 0x288
	Joint[4].DigitalIO_Pin[1] = GPIO_PIN_2;
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	f8a3 228a 	strh.w	r2, [r3, #650]	; 0x28a
	Joint[4].TIMx_PWM = TIM13;
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001f32:	4a24      	ldr	r2, [pc, #144]	; (8001fc4 <StartUp_Init_Parameter+0x234>)
 8001f34:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	Joint[0].TIMx_ENC = TIM3;
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <StartUp_Init_Parameter+0x254>)
 8001f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

	for (int k = 0; k < 5; k++) {
 8001f40:	2300      	movs	r3, #0
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	e015      	b.n	8001f72 <StartUp_Init_Parameter+0x1e2>
		Joint[k].ControlEnable[0] = 1;
 8001f46:	491c      	ldr	r1, [pc, #112]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	015b      	lsls	r3, r3, #5
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
		Joint[k].ControlEnable[1] = 1;
 8001f58:	4917      	ldr	r1, [pc, #92]	; (8001fb8 <StartUp_Init_Parameter+0x228>)
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	015b      	lsls	r3, r3, #5
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3301      	adds	r3, #1
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
	for (int k = 0; k < 5; k++) {
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	dde6      	ble.n	8001f46 <StartUp_Init_Parameter+0x1b6>
	}

	Temp_Calibration =
			(110.0 - 30.0)
					/ (*(unsigned short*) (0x1FF1E840)
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <StartUp_Init_Parameter+0x258>)
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
							- *(unsigned short*) (0x1FF1E820));
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <StartUp_Init_Parameter+0x25c>)
 8001f80:	881b      	ldrh	r3, [r3, #0]
 8001f82:	1ad3      	subs	r3, r2, r3
					/ (*(unsigned short*) (0x1FF1E840)
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001f8c:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8001fb0 <StartUp_Init_Parameter+0x220>
 8001f90:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
	Temp_Calibration =
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <StartUp_Init_Parameter+0x260>)
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	f3af 8000 	nop.w
 8001fb0:	00000000 	.word	0x00000000
 8001fb4:	40540000 	.word	0x40540000
 8001fb8:	200001a0 	.word	0x200001a0
 8001fbc:	58020c00 	.word	0x58020c00
 8001fc0:	58021000 	.word	0x58021000
 8001fc4:	40001c00 	.word	0x40001c00
 8001fc8:	40000c00 	.word	0x40000c00
 8001fcc:	40002000 	.word	0x40002000
 8001fd0:	40000800 	.word	0x40000800
 8001fd4:	40014400 	.word	0x40014400
 8001fd8:	40010400 	.word	0x40010400
 8001fdc:	40014800 	.word	0x40014800
 8001fe0:	40010000 	.word	0x40010000
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	1ff1e840 	.word	0x1ff1e840
 8001fec:	1ff1e820 	.word	0x1ff1e820
 8001ff0:	2000043c 	.word	0x2000043c

08001ff4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ff8:	b672      	cpsid	i
}
 8001ffa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <Error_Handler+0x8>
	...

08002000 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_MspInit+0x30>)
 8002008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800200c:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_MspInit+0x30>)
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_MspInit+0x30>)
 8002018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	58024400 	.word	0x58024400

08002034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC3)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_ADC_MspInit+0x48>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d116      	bne.n	8002074 <HAL_ADC_MspInit+0x40>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_ADC_MspInit+0x4c>)
 8002048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_ADC_MspInit+0x4c>)
 800204e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_ADC_MspInit+0x4c>)
 8002058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	207f      	movs	r0, #127	; 0x7f
 800206a:	f003 f88a 	bl	8005182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800206e:	207f      	movs	r0, #127	; 0x7f
 8002070:	f003 f8a1 	bl	80051b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	58026000 	.word	0x58026000
 8002080:	58024400 	.word	0x58024400

08002084 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <HAL_CRC_MspInit+0x3c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10e      	bne.n	80020b4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_CRC_MspInit+0x40>)
 8002098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800209c:	4a09      	ldr	r2, [pc, #36]	; (80020c4 <HAL_CRC_MspInit+0x40>)
 800209e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a6:	4b07      	ldr	r3, [pc, #28]	; (80020c4 <HAL_CRC_MspInit+0x40>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	58024c00 	.word	0x58024c00
 80020c4:	58024400 	.word	0x58024400

080020c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b0b6      	sub	sp, #216	; 0xd8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e0:	f107 0310 	add.w	r3, r7, #16
 80020e4:	22b4      	movs	r2, #180	; 0xb4
 80020e6:	2100      	movs	r1, #0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f012 fa6b 	bl	80145c4 <memset>
  if(hi2c->Instance==I2C2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a25      	ldr	r2, [pc, #148]	; (8002188 <HAL_I2C_MspInit+0xc0>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d142      	bne.n	800217e <HAL_I2C_MspInit+0xb6>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020f8:	2308      	movs	r3, #8
 80020fa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002102:	f107 0310 	add.w	r3, r7, #16
 8002106:	4618      	mov	r0, r3
 8002108:	f007 ff98 	bl	800a03c <HAL_RCCEx_PeriphCLKConfig>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002112:	f7ff ff6f 	bl	8001ff4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_I2C_MspInit+0xc4>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211c:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_I2C_MspInit+0xc4>)
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_I2C_MspInit+0xc4>)
 8002128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002134:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002138:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800213c:	2312      	movs	r3, #18
 800213e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002142:	2301      	movs	r3, #1
 8002144:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800214e:	2304      	movs	r3, #4
 8002150:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002158:	4619      	mov	r1, r3
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <HAL_I2C_MspInit+0xc8>)
 800215c:	f005 fb1a 	bl	8007794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <HAL_I2C_MspInit+0xc4>)
 8002162:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_I2C_MspInit+0xc4>)
 8002168:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800216c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_I2C_MspInit+0xc4>)
 8002172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	37d8      	adds	r7, #216	; 0xd8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40005800 	.word	0x40005800
 800218c:	58024400 	.word	0x58024400
 8002190:	58020400 	.word	0x58020400

08002194 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b0b8      	sub	sp, #224	; 0xe0
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021ac:	f107 0318 	add.w	r3, r7, #24
 80021b0:	22b4      	movs	r2, #180	; 0xb4
 80021b2:	2100      	movs	r1, #0
 80021b4:	4618      	mov	r0, r3
 80021b6:	f012 fa05 	bl	80145c4 <memset>
  if(hspi->Instance==SPI3)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a4b      	ldr	r2, [pc, #300]	; (80022ec <HAL_SPI_MspInit+0x158>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d156      	bne.n	8002272 <HAL_SPI_MspInit+0xde>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80021c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 80021ca:	2319      	movs	r3, #25
 80021cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3N = 256;
 80021ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021d2:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80021d4:	2302      	movs	r3, #2
 80021d6:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80021d8:	2302      	movs	r3, #2
 80021da:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80021dc:	2302      	movs	r3, #2
 80021de:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80021e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021e8:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80021ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f4:	f107 0318 	add.w	r3, r7, #24
 80021f8:	4618      	mov	r0, r3
 80021fa:	f007 ff1f 	bl	800a03c <HAL_RCCEx_PeriphCLKConfig>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <HAL_SPI_MspInit+0x74>
    {
      Error_Handler();
 8002204:	f7ff fef6 	bl	8001ff4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002208:	4b39      	ldr	r3, [pc, #228]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 800220a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800220e:	4a38      	ldr	r2, [pc, #224]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 8002210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002214:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 800221a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800221e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002226:	4b32      	ldr	r3, [pc, #200]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 8002228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222c:	4a30      	ldr	r2, [pc, #192]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002236:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 8002238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002244:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002248:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224c:	2302      	movs	r3, #2
 800224e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800225e:	2306      	movs	r3, #6
 8002260:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002264:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002268:	4619      	mov	r1, r3
 800226a:	4822      	ldr	r0, [pc, #136]	; (80022f4 <HAL_SPI_MspInit+0x160>)
 800226c:	f005 fa92 	bl	8007794 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002270:	e038      	b.n	80022e4 <HAL_SPI_MspInit+0x150>
  else if(hspi->Instance==SPI4)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <HAL_SPI_MspInit+0x164>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d133      	bne.n	80022e4 <HAL_SPI_MspInit+0x150>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800227c:	4b1c      	ldr	r3, [pc, #112]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 800227e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002282:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 8002284:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002288:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800228c:	4b18      	ldr	r3, [pc, #96]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 800228e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002292:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800229a:	4b15      	ldr	r3, [pc, #84]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 800229c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022a0:	4a13      	ldr	r2, [pc, #76]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 80022a2:	f043 0310 	orr.w	r3, r3, #16
 80022a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <HAL_SPI_MspInit+0x15c>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b0:	f003 0310 	and.w	r3, r3, #16
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI4_SCK_Pin|GPIO_PIN_13|GPIO_PIN_14;
 80022b8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80022bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80022d2:	2305      	movs	r3, #5
 80022d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022dc:	4619      	mov	r1, r3
 80022de:	4807      	ldr	r0, [pc, #28]	; (80022fc <HAL_SPI_MspInit+0x168>)
 80022e0:	f005 fa58 	bl	8007794 <HAL_GPIO_Init>
}
 80022e4:	bf00      	nop
 80022e6:	37e0      	adds	r7, #224	; 0xe0
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40003c00 	.word	0x40003c00
 80022f0:	58024400 	.word	0x58024400
 80022f4:	58020800 	.word	0x58020800
 80022f8:	40013400 	.word	0x40013400
 80022fc:	58021000 	.word	0x58021000

08002300 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08a      	sub	sp, #40	; 0x28
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  if(htim_oc->Instance==TIM1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_TIM_OC_MspInit+0x88>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d12e      	bne.n	8002380 <HAL_TIM_OC_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_TIM_OC_MspInit+0x8c>)
 8002324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002328:	4a18      	ldr	r2, [pc, #96]	; (800238c <HAL_TIM_OC_MspInit+0x8c>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <HAL_TIM_OC_MspInit+0x8c>)
 8002334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002340:	4b12      	ldr	r3, [pc, #72]	; (800238c <HAL_TIM_OC_MspInit+0x8c>)
 8002342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002346:	4a11      	ldr	r2, [pc, #68]	; (800238c <HAL_TIM_OC_MspInit+0x8c>)
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <HAL_TIM_OC_MspInit+0x8c>)
 8002352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC4B_Pin;
 800235e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002362:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002364:	2302      	movs	r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236c:	2300      	movs	r3, #0
 800236e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002370:	2301      	movs	r3, #1
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC4B_GPIO_Port, &GPIO_InitStruct);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4619      	mov	r1, r3
 800237a:	4805      	ldr	r0, [pc, #20]	; (8002390 <HAL_TIM_OC_MspInit+0x90>)
 800237c:	f005 fa0a 	bl	8007794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002380:	bf00      	nop
 8002382:	3728      	adds	r7, #40	; 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40010000 	.word	0x40010000
 800238c:	58024400 	.word	0x58024400
 8002390:	58020000 	.word	0x58020000

08002394 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b090      	sub	sp, #64	; 0x40
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b4:	d14e      	bne.n	8002454 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023b6:	4b77      	ldr	r3, [pc, #476]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80023b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023bc:	4a75      	ldr	r2, [pc, #468]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023c6:	4b73      	ldr	r3, [pc, #460]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80023c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80023d2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	4b6f      	ldr	r3, [pc, #444]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80023d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023da:	4a6e      	ldr	r2, [pc, #440]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023e4:	4b6b      	ldr	r3, [pc, #428]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80023e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	627b      	str	r3, [r7, #36]	; 0x24
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f2:	4b68      	ldr	r3, [pc, #416]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80023f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f8:	4a66      	ldr	r2, [pc, #408]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80023fa:	f043 0302 	orr.w	r3, r3, #2
 80023fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002402:	4b64      	ldr	r3, [pc, #400]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 8002404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	623b      	str	r3, [r7, #32]
 800240e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15(JTDI)     ------> TIM2_CH1
    PB3(JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC6A_Pin;
 8002410:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002414:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002422:	2301      	movs	r3, #1
 8002424:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC6A_GPIO_Port, &GPIO_InitStruct);
 8002426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800242a:	4619      	mov	r1, r3
 800242c:	485a      	ldr	r0, [pc, #360]	; (8002598 <HAL_TIM_Encoder_MspInit+0x204>)
 800242e:	f005 f9b1 	bl	8007794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC6B_Pin;
 8002432:	2308      	movs	r3, #8
 8002434:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	2302      	movs	r3, #2
 8002438:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243e:	2300      	movs	r3, #0
 8002440:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002442:	2301      	movs	r3, #1
 8002444:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC6B_GPIO_Port, &GPIO_InitStruct);
 8002446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800244a:	4619      	mov	r1, r3
 800244c:	4853      	ldr	r0, [pc, #332]	; (800259c <HAL_TIM_Encoder_MspInit+0x208>)
 800244e:	f005 f9a1 	bl	8007794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002452:	e09b      	b.n	800258c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM4)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a51      	ldr	r2, [pc, #324]	; (80025a0 <HAL_TIM_Encoder_MspInit+0x20c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d12f      	bne.n	80024be <HAL_TIM_Encoder_MspInit+0x12a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800245e:	4b4d      	ldr	r3, [pc, #308]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 8002460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002464:	4a4b      	ldr	r2, [pc, #300]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800246e:	4b49      	ldr	r3, [pc, #292]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 8002470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800247c:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 800247e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002482:	4a44      	ldr	r2, [pc, #272]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800248c:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 800248e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENC2A_Pin|ENC2B_Pin;
 800249a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800249e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a0:	2302      	movs	r3, #2
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a8:	2300      	movs	r3, #0
 80024aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024ac:	2302      	movs	r3, #2
 80024ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b4:	4619      	mov	r1, r3
 80024b6:	483b      	ldr	r0, [pc, #236]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x210>)
 80024b8:	f005 f96c 	bl	8007794 <HAL_GPIO_Init>
}
 80024bc:	e066      	b.n	800258c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM5)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a39      	ldr	r2, [pc, #228]	; (80025a8 <HAL_TIM_Encoder_MspInit+0x214>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d12e      	bne.n	8002526 <HAL_TIM_Encoder_MspInit+0x192>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80024c8:	4b32      	ldr	r3, [pc, #200]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80024ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024ce:	4a31      	ldr	r2, [pc, #196]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80024d0:	f043 0308 	orr.w	r3, r3, #8
 80024d4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024d8:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80024da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	617b      	str	r3, [r7, #20]
 80024e4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e6:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80024e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ec:	4a29      	ldr	r2, [pc, #164]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f6:	4b27      	ldr	r3, [pc, #156]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 80024f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 8002504:	2303      	movs	r3, #3
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002514:	2302      	movs	r3, #2
 8002516:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800251c:	4619      	mov	r1, r3
 800251e:	481e      	ldr	r0, [pc, #120]	; (8002598 <HAL_TIM_Encoder_MspInit+0x204>)
 8002520:	f005 f938 	bl	8007794 <HAL_GPIO_Init>
}
 8002524:	e032      	b.n	800258c <HAL_TIM_Encoder_MspInit+0x1f8>
  else if(htim_encoder->Instance==TIM8)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a20      	ldr	r2, [pc, #128]	; (80025ac <HAL_TIM_Encoder_MspInit+0x218>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d12d      	bne.n	800258c <HAL_TIM_Encoder_MspInit+0x1f8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002530:	4b18      	ldr	r3, [pc, #96]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 8002532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002536:	4a17      	ldr	r2, [pc, #92]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002540:	4b14      	ldr	r3, [pc, #80]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 8002542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 8002550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002554:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 8002556:	f043 0304 	orr.w	r3, r3, #4
 800255a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800255e:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_TIM_Encoder_MspInit+0x200>)
 8002560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 800256c:	23c0      	movs	r3, #192	; 0xc0
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800257c:	2303      	movs	r3, #3
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002584:	4619      	mov	r1, r3
 8002586:	480a      	ldr	r0, [pc, #40]	; (80025b0 <HAL_TIM_Encoder_MspInit+0x21c>)
 8002588:	f005 f904 	bl	8007794 <HAL_GPIO_Init>
}
 800258c:	bf00      	nop
 800258e:	3740      	adds	r7, #64	; 0x40
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	58024400 	.word	0x58024400
 8002598:	58020000 	.word	0x58020000
 800259c:	58020400 	.word	0x58020400
 80025a0:	40000800 	.word	0x40000800
 80025a4:	58020c00 	.word	0x58020c00
 80025a8:	40000c00 	.word	0x40000c00
 80025ac:	40010400 	.word	0x40010400
 80025b0:	58020800 	.word	0x58020800

080025b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b090      	sub	sp, #64	; 0x40
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a63      	ldr	r2, [pc, #396]	; (8002760 <HAL_TIM_Base_MspInit+0x1ac>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d12e      	bne.n	8002634 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80025d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025dc:	4a61      	ldr	r2, [pc, #388]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025e6:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80025e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025f2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f4:	4b5b      	ldr	r3, [pc, #364]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fa:	4a5a      	ldr	r2, [pc, #360]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002604:	4b57      	ldr	r3, [pc, #348]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 8002606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC5B_DIR_Pin;
 8002612:	2320      	movs	r3, #32
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002622:	2302      	movs	r3, #2
 8002624:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ENC5B_DIR_GPIO_Port, &GPIO_InitStruct);
 8002626:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262a:	4619      	mov	r1, r3
 800262c:	484e      	ldr	r0, [pc, #312]	; (8002768 <HAL_TIM_Base_MspInit+0x1b4>)
 800262e:	f005 f8b1 	bl	8007794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8002632:	e091      	b.n	8002758 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM6)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a4c      	ldr	r2, [pc, #304]	; (800276c <HAL_TIM_Base_MspInit+0x1b8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d10f      	bne.n	800265e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800263e:	4b49      	ldr	r3, [pc, #292]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 8002640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002644:	4a47      	ldr	r2, [pc, #284]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800264e:	4b45      	ldr	r3, [pc, #276]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 8002650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002654:	f003 0310 	and.w	r3, r3, #16
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	6a3b      	ldr	r3, [r7, #32]
}
 800265c:	e07c      	b.n	8002758 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM13)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a43      	ldr	r2, [pc, #268]	; (8002770 <HAL_TIM_Base_MspInit+0x1bc>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d10f      	bne.n	8002688 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002668:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 800266a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800266e:	4a3d      	ldr	r2, [pc, #244]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 8002670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002674:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002678:	4b3a      	ldr	r3, [pc, #232]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 800267a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	69fb      	ldr	r3, [r7, #28]
}
 8002686:	e067      	b.n	8002758 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM14)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a39      	ldr	r2, [pc, #228]	; (8002774 <HAL_TIM_Base_MspInit+0x1c0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d10f      	bne.n	80026b2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002692:	4b34      	ldr	r3, [pc, #208]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 8002694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002698:	4a32      	ldr	r2, [pc, #200]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026a2:	4b30      	ldr	r3, [pc, #192]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80026a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	69bb      	ldr	r3, [r7, #24]
}
 80026b0:	e052      	b.n	8002758 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM16)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a30      	ldr	r2, [pc, #192]	; (8002778 <HAL_TIM_Base_MspInit+0x1c4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d10f      	bne.n	80026dc <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80026bc:	4b29      	ldr	r3, [pc, #164]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80026be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026c2:	4a28      	ldr	r2, [pc, #160]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80026c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80026ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697b      	ldr	r3, [r7, #20]
}
 80026da:	e03d      	b.n	8002758 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM17)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a26      	ldr	r2, [pc, #152]	; (800277c <HAL_TIM_Base_MspInit+0x1c8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10f      	bne.n	8002706 <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80026e6:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80026e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026ec:	4a1d      	ldr	r2, [pc, #116]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80026ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 80026f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	693b      	ldr	r3, [r7, #16]
}
 8002704:	e028      	b.n	8002758 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM23)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a1d      	ldr	r2, [pc, #116]	; (8002780 <HAL_TIM_Base_MspInit+0x1cc>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d10f      	bne.n	8002730 <HAL_TIM_Base_MspInit+0x17c>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8002710:	4b14      	ldr	r3, [pc, #80]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 8002712:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002716:	4a13      	ldr	r2, [pc, #76]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 8002718:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800271c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002720:	4b10      	ldr	r3, [pc, #64]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 8002722:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
}
 800272e:	e013      	b.n	8002758 <HAL_TIM_Base_MspInit+0x1a4>
  else if(htim_base->Instance==TIM24)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a13      	ldr	r2, [pc, #76]	; (8002784 <HAL_TIM_Base_MspInit+0x1d0>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10e      	bne.n	8002758 <HAL_TIM_Base_MspInit+0x1a4>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 800273c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002740:	4a08      	ldr	r2, [pc, #32]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 8002742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002746:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_TIM_Base_MspInit+0x1b0>)
 800274c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	68bb      	ldr	r3, [r7, #8]
}
 8002758:	bf00      	nop
 800275a:	3740      	adds	r7, #64	; 0x40
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40000400 	.word	0x40000400
 8002764:	58024400 	.word	0x58024400
 8002768:	58020400 	.word	0x58020400
 800276c:	40001000 	.word	0x40001000
 8002770:	40001c00 	.word	0x40001c00
 8002774:	40002000 	.word	0x40002000
 8002778:	40014400 	.word	0x40014400
 800277c:	40014800 	.word	0x40014800
 8002780:	4000e000 	.word	0x4000e000
 8002784:	4000e400 	.word	0x4000e400

08002788 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a0b      	ldr	r2, [pc, #44]	; (80027c4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d10e      	bne.n	80027b8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800279a:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_TIM_PWM_MspInit+0x40>)
 800279c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027a0:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_TIM_PWM_MspInit+0x40>)
 80027a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <HAL_TIM_PWM_MspInit+0x40>)
 80027ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40014000 	.word	0x40014000
 80027c8:	58024400 	.word	0x58024400

080027cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08e      	sub	sp, #56	; 0x38
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a83      	ldr	r2, [pc, #524]	; (80029f8 <HAL_TIM_MspPostInit+0x22c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d120      	bne.n	8002830 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	4b83      	ldr	r3, [pc, #524]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 80027f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f4:	4a81      	ldr	r2, [pc, #516]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 80027f6:	f043 0301 	orr.w	r3, r3, #1
 80027fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027fe:	4b7f      	ldr	r3, [pc, #508]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 8002800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = ENC4A_Neopixel_Pin;
 800280c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800281e:	2301      	movs	r3, #1
 8002820:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC4A_Neopixel_GPIO_Port, &GPIO_InitStruct);
 8002822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002826:	4619      	mov	r1, r3
 8002828:	4875      	ldr	r0, [pc, #468]	; (8002a00 <HAL_TIM_MspPostInit+0x234>)
 800282a:	f004 ffb3 	bl	8007794 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800282e:	e0de      	b.n	80029ee <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM3)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a73      	ldr	r2, [pc, #460]	; (8002a04 <HAL_TIM_MspPostInit+0x238>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d11f      	bne.n	800287a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800283a:	4b70      	ldr	r3, [pc, #448]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 800283c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002840:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 8002842:	f043 0302 	orr.w	r3, r3, #2
 8002846:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800284a:	4b6c      	ldr	r3, [pc, #432]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 800284c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	61fb      	str	r3, [r7, #28]
 8002856:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC5A_StepGriper_Pin;
 8002858:	2310      	movs	r3, #16
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800285c:	2302      	movs	r3, #2
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002860:	2300      	movs	r3, #0
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2300      	movs	r3, #0
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002868:	2302      	movs	r3, #2
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC5A_StepGriper_GPIO_Port, &GPIO_InitStruct);
 800286c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002870:	4619      	mov	r1, r3
 8002872:	4865      	ldr	r0, [pc, #404]	; (8002a08 <HAL_TIM_MspPostInit+0x23c>)
 8002874:	f004 ff8e 	bl	8007794 <HAL_GPIO_Init>
}
 8002878:	e0b9      	b.n	80029ee <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM13)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a63      	ldr	r2, [pc, #396]	; (8002a0c <HAL_TIM_MspPostInit+0x240>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d11f      	bne.n	80028c4 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002884:	4b5d      	ldr	r3, [pc, #372]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 8002886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288a:	4a5c      	ldr	r2, [pc, #368]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002894:	4b59      	ldr	r3, [pc, #356]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 8002896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STEP1_Pin;
 80028a2:	2340      	movs	r3, #64	; 0x40
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a6:	2302      	movs	r3, #2
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	2300      	movs	r3, #0
 80028b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80028b2:	2309      	movs	r3, #9
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP1_GPIO_Port, &GPIO_InitStruct);
 80028b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ba:	4619      	mov	r1, r3
 80028bc:	4850      	ldr	r0, [pc, #320]	; (8002a00 <HAL_TIM_MspPostInit+0x234>)
 80028be:	f004 ff69 	bl	8007794 <HAL_GPIO_Init>
}
 80028c2:	e094      	b.n	80029ee <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM14)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a51      	ldr	r2, [pc, #324]	; (8002a10 <HAL_TIM_MspPostInit+0x244>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d11f      	bne.n	800290e <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ce:	4b4b      	ldr	r3, [pc, #300]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 80028d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d4:	4a49      	ldr	r2, [pc, #292]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028de:	4b47      	ldr	r3, [pc, #284]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 80028e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP2_Pin;
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f0:	2302      	movs	r3, #2
 80028f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f8:	2300      	movs	r3, #0
 80028fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80028fc:	2309      	movs	r3, #9
 80028fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP2_GPIO_Port, &GPIO_InitStruct);
 8002900:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002904:	4619      	mov	r1, r3
 8002906:	483e      	ldr	r0, [pc, #248]	; (8002a00 <HAL_TIM_MspPostInit+0x234>)
 8002908:	f004 ff44 	bl	8007794 <HAL_GPIO_Init>
}
 800290c:	e06f      	b.n	80029ee <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM15)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a40      	ldr	r2, [pc, #256]	; (8002a14 <HAL_TIM_MspPostInit+0x248>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d11f      	bne.n	8002958 <HAL_TIM_MspPostInit+0x18c>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002918:	4b38      	ldr	r3, [pc, #224]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 800291a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800291e:	4a37      	ldr	r2, [pc, #220]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 8002920:	f043 0310 	orr.w	r3, r3, #16
 8002924:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002928:	4b34      	ldr	r3, [pc, #208]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 800292a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	613b      	str	r3, [r7, #16]
 8002934:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP3_Pin;
 8002936:	2320      	movs	r3, #32
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8002946:	2304      	movs	r3, #4
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP3_GPIO_Port, &GPIO_InitStruct);
 800294a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294e:	4619      	mov	r1, r3
 8002950:	4831      	ldr	r0, [pc, #196]	; (8002a18 <HAL_TIM_MspPostInit+0x24c>)
 8002952:	f004 ff1f 	bl	8007794 <HAL_GPIO_Init>
}
 8002956:	e04a      	b.n	80029ee <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM16)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <HAL_TIM_MspPostInit+0x250>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d120      	bne.n	80029a4 <HAL_TIM_MspPostInit+0x1d8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	4b26      	ldr	r3, [pc, #152]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 8002964:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002968:	4a24      	ldr	r2, [pc, #144]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 800296a:	f043 0302 	orr.w	r3, r3, #2
 800296e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 8002974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP4_Pin;
 8002980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298e:	2300      	movs	r3, #0
 8002990:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002992:	2301      	movs	r3, #1
 8002994:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP4_GPIO_Port, &GPIO_InitStruct);
 8002996:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299a:	4619      	mov	r1, r3
 800299c:	481a      	ldr	r0, [pc, #104]	; (8002a08 <HAL_TIM_MspPostInit+0x23c>)
 800299e:	f004 fef9 	bl	8007794 <HAL_GPIO_Init>
}
 80029a2:	e024      	b.n	80029ee <HAL_TIM_MspPostInit+0x222>
  else if(htim->Instance==TIM17)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <HAL_TIM_MspPostInit+0x254>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d11f      	bne.n	80029ee <HAL_TIM_MspPostInit+0x222>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029ae:	4b13      	ldr	r3, [pc, #76]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 80029b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b4:	4a11      	ldr	r2, [pc, #68]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 80029b6:	f043 0302 	orr.w	r3, r3, #2
 80029ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_TIM_MspPostInit+0x230>)
 80029c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP5_Pin;
 80029cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d2:	2302      	movs	r3, #2
 80029d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d6:	2300      	movs	r3, #0
 80029d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80029de:	2301      	movs	r3, #1
 80029e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(STEP5_GPIO_Port, &GPIO_InitStruct);
 80029e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e6:	4619      	mov	r1, r3
 80029e8:	4807      	ldr	r0, [pc, #28]	; (8002a08 <HAL_TIM_MspPostInit+0x23c>)
 80029ea:	f004 fed3 	bl	8007794 <HAL_GPIO_Init>
}
 80029ee:	bf00      	nop
 80029f0:	3738      	adds	r7, #56	; 0x38
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40010000 	.word	0x40010000
 80029fc:	58024400 	.word	0x58024400
 8002a00:	58020000 	.word	0x58020000
 8002a04:	40000400 	.word	0x40000400
 8002a08:	58020400 	.word	0x58020400
 8002a0c:	40001c00 	.word	0x40001c00
 8002a10:	40002000 	.word	0x40002000
 8002a14:	40014000 	.word	0x40014000
 8002a18:	58021000 	.word	0x58021000
 8002a1c:	40014400 	.word	0x40014400
 8002a20:	40014800 	.word	0x40014800

08002a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08e      	sub	sp, #56	; 0x38
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a66      	ldr	r2, [pc, #408]	; (8002bdc <HAL_UART_MspInit+0x1b8>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d12f      	bne.n	8002aa6 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a46:	4b66      	ldr	r3, [pc, #408]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002a48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a4c:	4a64      	ldr	r2, [pc, #400]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002a4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a56:	4b62      	ldr	r3, [pc, #392]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002a58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a60:	623b      	str	r3, [r7, #32]
 8002a62:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a64:	4b5e      	ldr	r3, [pc, #376]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a6a:	4a5d      	ldr	r2, [pc, #372]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002a6c:	f043 0302 	orr.w	r3, r3, #2
 8002a70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a74:	4b5a      	ldr	r3, [pc, #360]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	61fb      	str	r3, [r7, #28]
 8002a80:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002a82:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a90:	2300      	movs	r3, #0
 8002a92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_UART5;
 8002a94:	230e      	movs	r3, #14
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4851      	ldr	r0, [pc, #324]	; (8002be4 <HAL_UART_MspInit+0x1c0>)
 8002aa0:	f004 fe78 	bl	8007794 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002aa4:	e096      	b.n	8002bd4 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART1)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a4f      	ldr	r2, [pc, #316]	; (8002be8 <HAL_UART_MspInit+0x1c4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d15d      	bne.n	8002b6c <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ab0:	4b4b      	ldr	r3, [pc, #300]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ab6:	4a4a      	ldr	r2, [pc, #296]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ac0:	4b47      	ldr	r3, [pc, #284]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002ac2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	61bb      	str	r3, [r7, #24]
 8002acc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ace:	4b44      	ldr	r3, [pc, #272]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ad4:	4a42      	ldr	r2, [pc, #264]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002ad6:	f043 0302 	orr.w	r3, r3, #2
 8002ada:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ade:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002aec:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afa:	2300      	movs	r3, #0
 8002afc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002afe:	2304      	movs	r3, #4
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b06:	4619      	mov	r1, r3
 8002b08:	4836      	ldr	r0, [pc, #216]	; (8002be4 <HAL_UART_MspInit+0x1c0>)
 8002b0a:	f004 fe43 	bl	8007794 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8002b0e:	4b37      	ldr	r3, [pc, #220]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b10:	4a37      	ldr	r2, [pc, #220]	; (8002bf0 <HAL_UART_MspInit+0x1cc>)
 8002b12:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002b14:	4b35      	ldr	r3, [pc, #212]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b16:	2229      	movs	r2, #41	; 0x29
 8002b18:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b1a:	4b34      	ldr	r3, [pc, #208]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b20:	4b32      	ldr	r3, [pc, #200]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b26:	4b31      	ldr	r3, [pc, #196]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b2e:	4b2f      	ldr	r3, [pc, #188]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b34:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002b3a:	4b2c      	ldr	r3, [pc, #176]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b40:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b42:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b48:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b4e:	4827      	ldr	r0, [pc, #156]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b50:	f002 fd4a 	bl	80055e8 <HAL_DMA_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_UART_MspInit+0x13a>
      Error_Handler();
 8002b5a:	f7ff fa4b 	bl	8001ff4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a22      	ldr	r2, [pc, #136]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b62:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b64:	4a21      	ldr	r2, [pc, #132]	; (8002bec <HAL_UART_MspInit+0x1c8>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b6a:	e033      	b.n	8002bd4 <HAL_UART_MspInit+0x1b0>
  else if(huart->Instance==USART3)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a20      	ldr	r2, [pc, #128]	; (8002bf4 <HAL_UART_MspInit+0x1d0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d12e      	bne.n	8002bd4 <HAL_UART_MspInit+0x1b0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002b78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b7c:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002b7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9a:	4a11      	ldr	r2, [pc, #68]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002b9c:	f043 0308 	orr.w	r3, r3, #8
 8002ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ba4:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <HAL_UART_MspInit+0x1bc>)
 8002ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bc4:	2307      	movs	r3, #7
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bcc:	4619      	mov	r1, r3
 8002bce:	480a      	ldr	r0, [pc, #40]	; (8002bf8 <HAL_UART_MspInit+0x1d4>)
 8002bd0:	f004 fde0 	bl	8007794 <HAL_GPIO_Init>
}
 8002bd4:	bf00      	nop
 8002bd6:	3738      	adds	r7, #56	; 0x38
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40005000 	.word	0x40005000
 8002be0:	58024400 	.word	0x58024400
 8002be4:	58020400 	.word	0x58020400
 8002be8:	40011000 	.word	0x40011000
 8002bec:	20000b20 	.word	0x20000b20
 8002bf0:	40020010 	.word	0x40020010
 8002bf4:	40004800 	.word	0x40004800
 8002bf8:	58020c00 	.word	0x58020c00

08002bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c00:	e7fe      	b.n	8002c00 <NMI_Handler+0x4>

08002c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c02:	b480      	push	{r7}
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c06:	e7fe      	b.n	8002c06 <HardFault_Handler+0x4>

08002c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c0c:	e7fe      	b.n	8002c0c <MemManage_Handler+0x4>

08002c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c12:	e7fe      	b.n	8002c12 <BusFault_Handler+0x4>

08002c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c18:	e7fe      	b.n	8002c18 <UsageFault_Handler+0x4>

08002c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr

08002c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c36:	b480      	push	{r7}
 8002c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c48:	f000 f938 	bl	8002ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c54:	4802      	ldr	r0, [pc, #8]	; (8002c60 <DMA1_Stream0_IRQHandler+0x10>)
 8002c56:	f003 fa8b 	bl	8006170 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002c5a:	bf00      	nop
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000b20 	.word	0x20000b20

08002c64 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c68:	4802      	ldr	r0, [pc, #8]	; (8002c74 <OTG_HS_IRQHandler+0x10>)
 8002c6a:	f005 f9ed 	bl	8008048 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200023b0 	.word	0x200023b0

08002c78 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002c7c:	4802      	ldr	r0, [pc, #8]	; (8002c88 <ADC3_IRQHandler+0x10>)
 8002c7e:	f000 ff8d 	bl	8003b9c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000ab0 	.word	0x20000ab0

08002c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c90:	4b34      	ldr	r3, [pc, #208]	; (8002d64 <SystemInit+0xd8>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	4a33      	ldr	r2, [pc, #204]	; (8002d64 <SystemInit+0xd8>)
 8002c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ca0:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <SystemInit+0xdc>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 030f 	and.w	r3, r3, #15
 8002ca8:	2b06      	cmp	r3, #6
 8002caa:	d807      	bhi.n	8002cbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002cac:	4b2e      	ldr	r3, [pc, #184]	; (8002d68 <SystemInit+0xdc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 030f 	bic.w	r3, r3, #15
 8002cb4:	4a2c      	ldr	r2, [pc, #176]	; (8002d68 <SystemInit+0xdc>)
 8002cb6:	f043 0307 	orr.w	r3, r3, #7
 8002cba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <SystemInit+0xe0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <SystemInit+0xe0>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002cc8:	4b28      	ldr	r3, [pc, #160]	; (8002d6c <SystemInit+0xe0>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002cce:	4b27      	ldr	r3, [pc, #156]	; (8002d6c <SystemInit+0xe0>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	4926      	ldr	r1, [pc, #152]	; (8002d6c <SystemInit+0xe0>)
 8002cd4:	4b26      	ldr	r3, [pc, #152]	; (8002d70 <SystemInit+0xe4>)
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002cda:	4b23      	ldr	r3, [pc, #140]	; (8002d68 <SystemInit+0xdc>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d007      	beq.n	8002cf6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ce6:	4b20      	ldr	r3, [pc, #128]	; (8002d68 <SystemInit+0xdc>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 030f 	bic.w	r3, r3, #15
 8002cee:	4a1e      	ldr	r2, [pc, #120]	; (8002d68 <SystemInit+0xdc>)
 8002cf0:	f043 0307 	orr.w	r3, r3, #7
 8002cf4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <SystemInit+0xe0>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <SystemInit+0xe0>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <SystemInit+0xe0>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <SystemInit+0xe0>)
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <SystemInit+0xe8>)
 8002d0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <SystemInit+0xe0>)
 8002d10:	4a19      	ldr	r2, [pc, #100]	; (8002d78 <SystemInit+0xec>)
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d14:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <SystemInit+0xe0>)
 8002d16:	4a19      	ldr	r2, [pc, #100]	; (8002d7c <SystemInit+0xf0>)
 8002d18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <SystemInit+0xe0>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <SystemInit+0xe0>)
 8002d22:	4a16      	ldr	r2, [pc, #88]	; (8002d7c <SystemInit+0xf0>)
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <SystemInit+0xe0>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <SystemInit+0xe0>)
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <SystemInit+0xf0>)
 8002d30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d32:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <SystemInit+0xe0>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d38:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <SystemInit+0xe0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	; (8002d6c <SystemInit+0xe0>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d44:	4b09      	ldr	r3, [pc, #36]	; (8002d6c <SystemInit+0xe0>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <SystemInit+0xf4>)
 8002d4c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002d50:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d52:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <SystemInit+0xd8>)
 8002d54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d58:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00
 8002d68:	52002000 	.word	0x52002000
 8002d6c:	58024400 	.word	0x58024400
 8002d70:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d74:	02020200 	.word	0x02020200
 8002d78:	01ff0000 	.word	0x01ff0000
 8002d7c:	01010280 	.word	0x01010280
 8002d80:	52004000 	.word	0x52004000

08002d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002dbc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d88:	f7ff ff80 	bl	8002c8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d8c:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d8e:	490d      	ldr	r1, [pc, #52]	; (8002dc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d90:	4a0d      	ldr	r2, [pc, #52]	; (8002dc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d94:	e002      	b.n	8002d9c <LoopCopyDataInit>

08002d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d9a:	3304      	adds	r3, #4

08002d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da0:	d3f9      	bcc.n	8002d96 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002da2:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002da4:	4c0a      	ldr	r4, [pc, #40]	; (8002dd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002da8:	e001      	b.n	8002dae <LoopFillZerobss>

08002daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dac:	3204      	adds	r2, #4

08002dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db0:	d3fb      	bcc.n	8002daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002db2:	f011 fbe3 	bl	801457c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002db6:	f7fd fc27 	bl	8000608 <main>
  bx  lr
 8002dba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002dbc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dc4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8002dc8:	08014688 	.word	0x08014688
  ldr r2, =_sbss
 8002dcc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8002dd0:	200027b8 	.word	0x200027b8

08002dd4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dd4:	e7fe      	b.n	8002dd4 <ADC_IRQHandler>
	...

08002dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dde:	2003      	movs	r0, #3
 8002de0:	f002 f9c4 	bl	800516c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002de4:	f006 ff54 	bl	8009c90 <HAL_RCC_GetSysClockFreq>
 8002de8:	4602      	mov	r2, r0
 8002dea:	4b15      	ldr	r3, [pc, #84]	; (8002e40 <HAL_Init+0x68>)
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	0a1b      	lsrs	r3, r3, #8
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	4913      	ldr	r1, [pc, #76]	; (8002e44 <HAL_Init+0x6c>)
 8002df6:	5ccb      	ldrb	r3, [r1, r3]
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002e00:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e02:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <HAL_Init+0x68>)
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <HAL_Init+0x6c>)
 8002e0c:	5cd3      	ldrb	r3, [r2, r3]
 8002e0e:	f003 031f 	and.w	r3, r3, #31
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	4a0b      	ldr	r2, [pc, #44]	; (8002e48 <HAL_Init+0x70>)
 8002e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e1c:	4a0b      	ldr	r2, [pc, #44]	; (8002e4c <HAL_Init+0x74>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e22:	2000      	movs	r0, #0
 8002e24:	f000 f814 	bl	8002e50 <HAL_InitTick>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e002      	b.n	8002e38 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e32:	f7ff f8e5 	bl	8002000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	58024400 	.word	0x58024400
 8002e44:	08014638 	.word	0x08014638
 8002e48:	20000004 	.word	0x20000004
 8002e4c:	20000000 	.word	0x20000000

08002e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e58:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <HAL_InitTick+0x60>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e021      	b.n	8002ea8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e64:	4b13      	ldr	r3, [pc, #76]	; (8002eb4 <HAL_InitTick+0x64>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_InitTick+0x60>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f002 f9a9 	bl	80051d2 <HAL_SYSTICK_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00e      	b.n	8002ea8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2b0f      	cmp	r3, #15
 8002e8e:	d80a      	bhi.n	8002ea6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e90:	2200      	movs	r2, #0
 8002e92:	6879      	ldr	r1, [r7, #4]
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	f002 f973 	bl	8005182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e9c:	4a06      	ldr	r2, [pc, #24]	; (8002eb8 <HAL_InitTick+0x68>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e000      	b.n	8002ea8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	2000000c 	.word	0x2000000c
 8002eb4:	20000000 	.word	0x20000000
 8002eb8:	20000008 	.word	0x20000008

08002ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <HAL_IncTick+0x20>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b06      	ldr	r3, [pc, #24]	; (8002ee0 <HAL_IncTick+0x24>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4413      	add	r3, r2
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HAL_IncTick+0x24>)
 8002ece:	6013      	str	r3, [r2, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	2000000c 	.word	0x2000000c
 8002ee0:	20000edc 	.word	0x20000edc

08002ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_GetTick+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000edc 	.word	0x20000edc

08002efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f04:	f7ff ffee 	bl	8002ee4 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f14:	d005      	beq.n	8002f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f16:	4b0a      	ldr	r3, [pc, #40]	; (8002f40 <HAL_Delay+0x44>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4413      	add	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f22:	bf00      	nop
 8002f24:	f7ff ffde 	bl	8002ee4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d8f7      	bhi.n	8002f24 <HAL_Delay+0x28>
  {
  }
}
 8002f34:	bf00      	nop
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	2000000c 	.word	0x2000000c

08002f44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	609a      	str	r2, [r3, #8]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b087      	sub	sp, #28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
 8002fb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	3360      	adds	r3, #96	; 0x60
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4a10      	ldr	r2, [pc, #64]	; (800300c <LL_ADC_SetOffset+0x60>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d10b      	bne.n	8002fe8 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002fe6:	e00b      	b.n	8003000 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	601a      	str	r2, [r3, #0]
}
 8003000:	bf00      	nop
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	58026000 	.word	0x58026000

08003010 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	3360      	adds	r3, #96	; 0x60
 800301e:	461a      	mov	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	611a      	str	r2, [r3, #16]
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	4a0c      	ldr	r2, [pc, #48]	; (80030b0 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d00e      	beq.n	80030a2 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3360      	adds	r3, #96	; 0x60
 8003088:	461a      	mov	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	4413      	add	r3, r2
 8003090:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	431a      	orrs	r2, r3
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	601a      	str	r2, [r3, #0]
  }
}
 80030a2:	bf00      	nop
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	58026000 	.word	0x58026000

080030b4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b087      	sub	sp, #28
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a0c      	ldr	r2, [pc, #48]	; (80030f4 <LL_ADC_SetOffsetSaturation+0x40>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10e      	bne.n	80030e6 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3360      	adds	r3, #96	; 0x60
 80030cc:	461a      	mov	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80030e6:	bf00      	nop
 80030e8:	371c      	adds	r7, #28
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	58026000 	.word	0x58026000

080030f8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <LL_ADC_SetOffsetSign+0x40>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d10e      	bne.n	800312a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	3360      	adds	r3, #96	; 0x60
 8003110:	461a      	mov	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	431a      	orrs	r2, r3
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	58026000 	.word	0x58026000

0800313c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800313c:	b480      	push	{r7}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	3360      	adds	r3, #96	; 0x60
 800314c:	461a      	mov	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4a0c      	ldr	r2, [pc, #48]	; (800318c <LL_ADC_SetOffsetState+0x50>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d108      	bne.n	8003170 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	431a      	orrs	r2, r3
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800316e:	e007      	b.n	8003180 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	431a      	orrs	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	601a      	str	r2, [r3, #0]
}
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	58026000 	.word	0x58026000

08003190 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b087      	sub	sp, #28
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3330      	adds	r3, #48	; 0x30
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	f003 030c 	and.w	r3, r3, #12
 80031d2:	4413      	add	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f003 031f 	and.w	r3, r3, #31
 80031e0:	211f      	movs	r1, #31
 80031e2:	fa01 f303 	lsl.w	r3, r1, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	401a      	ands	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	0e9b      	lsrs	r3, r3, #26
 80031ee:	f003 011f 	and.w	r1, r3, #31
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f003 031f 	and.w	r3, r3, #31
 80031f8:	fa01 f303 	lsl.w	r3, r1, r3
 80031fc:	431a      	orrs	r2, r3
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003202:	bf00      	nop
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003234:	b480      	push	{r7}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3314      	adds	r3, #20
 8003244:	461a      	mov	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	0e5b      	lsrs	r3, r3, #25
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	4413      	add	r3, r2
 8003252:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	0d1b      	lsrs	r3, r3, #20
 800325c:	f003 031f 	and.w	r3, r3, #31
 8003260:	2107      	movs	r1, #7
 8003262:	fa01 f303 	lsl.w	r3, r1, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	401a      	ands	r2, r3
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	0d1b      	lsrs	r3, r3, #20
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	431a      	orrs	r2, r3
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
	...

0800328c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <LL_ADC_SetChannelSingleDiff+0x78>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d115      	bne.n	80032cc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032ac:	43db      	mvns	r3, r3
 80032ae:	401a      	ands	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f003 0318 	and.w	r3, r3, #24
 80032b6:	4914      	ldr	r1, [pc, #80]	; (8003308 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80032b8:	40d9      	lsrs	r1, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	400b      	ands	r3, r1
 80032be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c2:	431a      	orrs	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 80032ca:	e014      	b.n	80032f6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032d8:	43db      	mvns	r3, r3
 80032da:	401a      	ands	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0318 	and.w	r3, r3, #24
 80032e2:	4909      	ldr	r1, [pc, #36]	; (8003308 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80032e4:	40d9      	lsrs	r1, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	400b      	ands	r3, r1
 80032ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032ee:	431a      	orrs	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	58026000 	.word	0x58026000
 8003308:	000fffff 	.word	0x000fffff

0800330c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 031f 	and.w	r3, r3, #31
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	4b04      	ldr	r3, [pc, #16]	; (8003364 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003352:	4013      	ands	r3, r2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	6093      	str	r3, [r2, #8]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	5fffffc0 	.word	0x5fffffc0

08003368 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800337c:	d101      	bne.n	8003382 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <LL_ADC_EnableInternalRegulator+0x24>)
 800339e:	4013      	ands	r3, r2
 80033a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	6fffffc0 	.word	0x6fffffc0

080033b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033cc:	d101      	bne.n	80033d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <LL_ADC_Enable+0x24>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	7fffffc0 	.word	0x7fffffc0

08003408 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <LL_ADC_Disable+0x24>)
 8003416:	4013      	ands	r3, r2
 8003418:	f043 0202 	orr.w	r2, r3, #2
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	7fffffc0 	.word	0x7fffffc0

08003430 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <LL_ADC_IsEnabled+0x18>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <LL_ADC_IsEnabled+0x1a>
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b02      	cmp	r3, #2
 8003468:	d101      	bne.n	800346e <LL_ADC_IsDisableOngoing+0x18>
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <LL_ADC_IsDisableOngoing+0x1a>
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <LL_ADC_REG_StartConversion+0x24>)
 800348a:	4013      	ands	r3, r2
 800348c:	f043 0204 	orr.w	r2, r3, #4
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	7fffffc0 	.word	0x7fffffc0

080034a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d101      	bne.n	80034bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80034ca:	b480      	push	{r7}
 80034cc:	b083      	sub	sp, #12
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d101      	bne.n	80034e2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b089      	sub	sp, #36	; 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e1ee      	b.n	80038e8 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003514:	2b00      	cmp	r3, #0
 8003516:	d109      	bne.n	800352c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7fe fd8b 	bl	8002034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f7ff ff19 	bl	8003368 <LL_ADC_IsDeepPowerDownEnabled>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d004      	beq.n	8003546 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff feff 	bl	8003344 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4618      	mov	r0, r3
 800354c:	f7ff ff34 	bl	80033b8 <LL_ADC_IsInternalRegulatorEnabled>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d114      	bne.n	8003580 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff ff18 	bl	8003390 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003560:	4b8e      	ldr	r3, [pc, #568]	; (800379c <HAL_ADC_Init+0x2ac>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	099b      	lsrs	r3, r3, #6
 8003566:	4a8e      	ldr	r2, [pc, #568]	; (80037a0 <HAL_ADC_Init+0x2b0>)
 8003568:	fba2 2303 	umull	r2, r3, r2, r3
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	3301      	adds	r3, #1
 8003570:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003572:	e002      	b.n	800357a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	3b01      	subs	r3, #1
 8003578:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f9      	bne.n	8003574 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff17 	bl	80033b8 <LL_ADC_IsInternalRegulatorEnabled>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10d      	bne.n	80035ac <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003594:	f043 0210 	orr.w	r2, r3, #16
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035a0:	f043 0201 	orr.w	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff77 	bl	80034a4 <LL_ADC_REG_IsConversionOngoing>
 80035b6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035bc:	f003 0310 	and.w	r3, r3, #16
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f040 8188 	bne.w	80038d6 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f040 8184 	bne.w	80038d6 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035d2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80035d6:	f043 0202 	orr.w	r2, r3, #2
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff24 	bl	8003430 <LL_ADC_IsEnabled>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d136      	bne.n	800365c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a6c      	ldr	r2, [pc, #432]	; (80037a4 <HAL_ADC_Init+0x2b4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d004      	beq.n	8003602 <HAL_ADC_Init+0x112>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6a      	ldr	r2, [pc, #424]	; (80037a8 <HAL_ADC_Init+0x2b8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d10e      	bne.n	8003620 <HAL_ADC_Init+0x130>
 8003602:	4868      	ldr	r0, [pc, #416]	; (80037a4 <HAL_ADC_Init+0x2b4>)
 8003604:	f7ff ff14 	bl	8003430 <LL_ADC_IsEnabled>
 8003608:	4604      	mov	r4, r0
 800360a:	4867      	ldr	r0, [pc, #412]	; (80037a8 <HAL_ADC_Init+0x2b8>)
 800360c:	f7ff ff10 	bl	8003430 <LL_ADC_IsEnabled>
 8003610:	4603      	mov	r3, r0
 8003612:	4323      	orrs	r3, r4
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	e008      	b.n	8003632 <HAL_ADC_Init+0x142>
 8003620:	4862      	ldr	r0, [pc, #392]	; (80037ac <HAL_ADC_Init+0x2bc>)
 8003622:	f7ff ff05 	bl	8003430 <LL_ADC_IsEnabled>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d012      	beq.n	800365c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a5a      	ldr	r2, [pc, #360]	; (80037a4 <HAL_ADC_Init+0x2b4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_ADC_Init+0x15a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_ADC_Init+0x2b8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d101      	bne.n	800364e <HAL_ADC_Init+0x15e>
 800364a:	4a59      	ldr	r2, [pc, #356]	; (80037b0 <HAL_ADC_Init+0x2c0>)
 800364c:	e000      	b.n	8003650 <HAL_ADC_Init+0x160>
 800364e:	4a59      	ldr	r2, [pc, #356]	; (80037b4 <HAL_ADC_Init+0x2c4>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f7ff fc74 	bl	8002f44 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a52      	ldr	r2, [pc, #328]	; (80037ac <HAL_ADC_Init+0x2bc>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d129      	bne.n	80036ba <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7e5b      	ldrb	r3, [r3, #25]
 800366a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003670:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003676:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d013      	beq.n	80036a8 <HAL_ADC_Init+0x1b8>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b0c      	cmp	r3, #12
 8003686:	d00d      	beq.n	80036a4 <HAL_ADC_Init+0x1b4>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b1c      	cmp	r3, #28
 800368e:	d007      	beq.n	80036a0 <HAL_ADC_Init+0x1b0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b18      	cmp	r3, #24
 8003696:	d101      	bne.n	800369c <HAL_ADC_Init+0x1ac>
 8003698:	2318      	movs	r3, #24
 800369a:	e006      	b.n	80036aa <HAL_ADC_Init+0x1ba>
 800369c:	2300      	movs	r3, #0
 800369e:	e004      	b.n	80036aa <HAL_ADC_Init+0x1ba>
 80036a0:	2310      	movs	r3, #16
 80036a2:	e002      	b.n	80036aa <HAL_ADC_Init+0x1ba>
 80036a4:	2308      	movs	r3, #8
 80036a6:	e000      	b.n	80036aa <HAL_ADC_Init+0x1ba>
 80036a8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80036aa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e00e      	b.n	80036d8 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	7e5b      	ldrb	r3, [r3, #25]
 80036be:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036c4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80036ca:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036d2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80036d4:	4313      	orrs	r3, r2
 80036d6:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d106      	bne.n	80036f0 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	3b01      	subs	r3, #1
 80036e8:	045b      	lsls	r3, r3, #17
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d009      	beq.n	800370c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a26      	ldr	r2, [pc, #152]	; (80037ac <HAL_ADC_Init+0x2bc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d115      	bne.n	8003742 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4b26      	ldr	r3, [pc, #152]	; (80037b8 <HAL_ADC_Init+0x2c8>)
 800371e:	4013      	ands	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	69b9      	ldr	r1, [r7, #24]
 8003726:	430b      	orrs	r3, r1
 8003728:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	611a      	str	r2, [r3, #16]
 8003740:	e009      	b.n	8003756 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	4b1c      	ldr	r3, [pc, #112]	; (80037bc <HAL_ADC_Init+0x2cc>)
 800374a:	4013      	ands	r3, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	69b9      	ldr	r1, [r7, #24]
 8003752:	430b      	orrs	r3, r1
 8003754:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fea2 	bl	80034a4 <LL_ADC_REG_IsConversionOngoing>
 8003760:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff feaf 	bl	80034ca <LL_ADC_INJ_IsConversionOngoing>
 800376c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	f040 808e 	bne.w	8003892 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2b00      	cmp	r3, #0
 800377a:	f040 808a 	bne.w	8003892 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a0a      	ldr	r2, [pc, #40]	; (80037ac <HAL_ADC_Init+0x2bc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d11b      	bne.n	80037c0 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	7e1b      	ldrb	r3, [r3, #24]
 800378c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003794:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e018      	b.n	80037ce <HAL_ADC_Init+0x2de>
 800379c:	20000000 	.word	0x20000000
 80037a0:	053e2d63 	.word	0x053e2d63
 80037a4:	40022000 	.word	0x40022000
 80037a8:	40022100 	.word	0x40022100
 80037ac:	58026000 	.word	0x58026000
 80037b0:	40022300 	.word	0x40022300
 80037b4:	58026300 	.word	0x58026300
 80037b8:	fff04007 	.word	0xfff04007
 80037bc:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7e1b      	ldrb	r3, [r3, #24]
 80037c4:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80037ca:	4313      	orrs	r3, r2
 80037cc:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	4b46      	ldr	r3, [pc, #280]	; (80038f0 <HAL_ADC_Init+0x400>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6812      	ldr	r2, [r2, #0]
 80037dc:	69b9      	ldr	r1, [r7, #24]
 80037de:	430b      	orrs	r3, r1
 80037e0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d137      	bne.n	800385c <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a3f      	ldr	r2, [pc, #252]	; (80038f4 <HAL_ADC_Init+0x404>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d116      	bne.n	800382a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <HAL_ADC_Init+0x408>)
 8003804:	4013      	ands	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003814:	4311      	orrs	r1, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800381a:	430a      	orrs	r2, r1
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	611a      	str	r2, [r3, #16]
 8003828:	e020      	b.n	800386c <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	4b32      	ldr	r3, [pc, #200]	; (80038fc <HAL_ADC_Init+0x40c>)
 8003832:	4013      	ands	r3, r2
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003838:	3a01      	subs	r2, #1
 800383a:	0411      	lsls	r1, r2, #16
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003840:	4311      	orrs	r1, r2
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003846:	4311      	orrs	r1, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800384c:	430a      	orrs	r2, r1
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	611a      	str	r2, [r3, #16]
 800385a:	e007      	b.n	800386c <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691a      	ldr	r2, [r3, #16]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0201 	bic.w	r2, r2, #1
 800386a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_ADC_Init+0x404>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d002      	beq.n	8003892 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f001 f9e9 	bl	8004c64 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d10c      	bne.n	80038b4 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	f023 010f 	bic.w	r1, r3, #15
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	1e5a      	subs	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	631a      	str	r2, [r3, #48]	; 0x30
 80038b2:	e007      	b.n	80038c4 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 020f 	bic.w	r2, r2, #15
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c8:	f023 0303 	bic.w	r3, r3, #3
 80038cc:	f043 0201 	orr.w	r2, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	661a      	str	r2, [r3, #96]	; 0x60
 80038d4:	e007      	b.n	80038e6 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038da:	f043 0210 	orr.w	r2, r3, #16
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80038e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3724      	adds	r7, #36	; 0x24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd90      	pop	{r4, r7, pc}
 80038f0:	ffffbffc 	.word	0xffffbffc
 80038f4:	58026000 	.word	0x58026000
 80038f8:	fc00f81f 	.word	0xfc00f81f
 80038fc:	fc00f81e 	.word	0xfc00f81e

08003900 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a97      	ldr	r2, [pc, #604]	; (8003b6c <HAL_ADC_Start_IT+0x26c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_ADC_Start_IT+0x1c>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a96      	ldr	r2, [pc, #600]	; (8003b70 <HAL_ADC_Start_IT+0x270>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d101      	bne.n	8003920 <HAL_ADC_Start_IT+0x20>
 800391c:	4b95      	ldr	r3, [pc, #596]	; (8003b74 <HAL_ADC_Start_IT+0x274>)
 800391e:	e000      	b.n	8003922 <HAL_ADC_Start_IT+0x22>
 8003920:	4b95      	ldr	r3, [pc, #596]	; (8003b78 <HAL_ADC_Start_IT+0x278>)
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fcf2 	bl	800330c <LL_ADC_GetMultimode>
 8003928:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fdb8 	bl	80034a4 <LL_ADC_REG_IsConversionOngoing>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 810f 	bne.w	8003b5a <HAL_ADC_Start_IT+0x25a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003942:	2b01      	cmp	r3, #1
 8003944:	d101      	bne.n	800394a <HAL_ADC_Start_IT+0x4a>
 8003946:	2302      	movs	r3, #2
 8003948:	e10c      	b.n	8003b64 <HAL_ADC_Start_IT+0x264>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f001 f89c 	bl	8004a90 <ADC_Enable>
 8003958:	4603      	mov	r3, r0
 800395a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 80f6 	bne.w	8003b50 <HAL_ADC_Start_IT+0x250>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003968:	4b84      	ldr	r3, [pc, #528]	; (8003b7c <HAL_ADC_Start_IT+0x27c>)
 800396a:	4013      	ands	r3, r2
 800396c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a7d      	ldr	r2, [pc, #500]	; (8003b70 <HAL_ADC_Start_IT+0x270>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d002      	beq.n	8003984 <HAL_ADC_Start_IT+0x84>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	e000      	b.n	8003986 <HAL_ADC_Start_IT+0x86>
 8003984:	4b79      	ldr	r3, [pc, #484]	; (8003b6c <HAL_ADC_Start_IT+0x26c>)
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	4293      	cmp	r3, r2
 800398c:	d002      	beq.n	8003994 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003998:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d006      	beq.n	80039ba <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039b0:	f023 0206 	bic.w	r2, r3, #6
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	665a      	str	r2, [r3, #100]	; 0x64
 80039b8:	e002      	b.n	80039c0 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	221c      	movs	r2, #28
 80039c6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 021c 	bic.w	r2, r2, #28
 80039de:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d108      	bne.n	80039fa <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0208 	orr.w	r2, r2, #8
 80039f6:	605a      	str	r2, [r3, #4]
          break;
 80039f8:	e008      	b.n	8003a0c <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f042 0204 	orr.w	r2, r2, #4
 8003a08:	605a      	str	r2, [r3, #4]
          break;
 8003a0a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d107      	bne.n	8003a24 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0210 	orr.w	r2, r2, #16
 8003a22:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a51      	ldr	r2, [pc, #324]	; (8003b70 <HAL_ADC_Start_IT+0x270>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d002      	beq.n	8003a34 <HAL_ADC_Start_IT+0x134>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	e000      	b.n	8003a36 <HAL_ADC_Start_IT+0x136>
 8003a34:	4b4d      	ldr	r3, [pc, #308]	; (8003b6c <HAL_ADC_Start_IT+0x26c>)
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d008      	beq.n	8003a50 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d005      	beq.n	8003a50 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d002      	beq.n	8003a50 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	2b09      	cmp	r3, #9
 8003a4e:	d13b      	bne.n	8003ac8 <HAL_ADC_Start_IT+0x1c8>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d02d      	beq.n	8003aba <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	d110      	bne.n	8003a98 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0220 	bic.w	r2, r2, #32
 8003a84:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a94:	605a      	str	r2, [r3, #4]
              break;
 8003a96:	e011      	b.n	8003abc <HAL_ADC_Start_IT+0x1bc>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f042 0220 	orr.w	r2, r2, #32
 8003ab6:	605a      	str	r2, [r3, #4]
              break;
 8003ab8:	e000      	b.n	8003abc <HAL_ADC_Start_IT+0x1bc>
          }
        }
 8003aba:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fcdb 	bl	800347c <LL_ADC_REG_StartConversion>
 8003ac6:	e04c      	b.n	8003b62 <HAL_ADC_Start_IT+0x262>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003acc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a25      	ldr	r2, [pc, #148]	; (8003b70 <HAL_ADC_Start_IT+0x270>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d002      	beq.n	8003ae4 <HAL_ADC_Start_IT+0x1e4>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	e000      	b.n	8003ae6 <HAL_ADC_Start_IT+0x1e6>
 8003ae4:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <HAL_ADC_Start_IT+0x26c>)
 8003ae6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d035      	beq.n	8003b60 <HAL_ADC_Start_IT+0x260>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003afc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	661a      	str	r2, [r3, #96]	; 0x60
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d110      	bne.n	8003b2e <HAL_ADC_Start_IT+0x22e>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0220 	bic.w	r2, r2, #32
 8003b1a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b2a:	605a      	str	r2, [r3, #4]
              break;
 8003b2c:	e019      	b.n	8003b62 <HAL_ADC_Start_IT+0x262>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 0220 	orr.w	r2, r2, #32
 8003b4c:	605a      	str	r2, [r3, #4]
              break;
 8003b4e:	e008      	b.n	8003b62 <HAL_ADC_Start_IT+0x262>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003b58:	e003      	b.n	8003b62 <HAL_ADC_Start_IT+0x262>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	75fb      	strb	r3, [r7, #23]
 8003b5e:	e000      	b.n	8003b62 <HAL_ADC_Start_IT+0x262>
        }
 8003b60:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8003b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3718      	adds	r7, #24
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40022000 	.word	0x40022000
 8003b70:	40022100 	.word	0x40022100
 8003b74:	40022300 	.word	0x40022300
 8003b78:	58026300 	.word	0x58026300
 8003b7c:	fffff0fe 	.word	0xfffff0fe

08003b80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	370c      	adds	r7, #12
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
	...

08003b9c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	; 0x28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a87      	ldr	r2, [pc, #540]	; (8003ddc <HAL_ADC_IRQHandler+0x240>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_ADC_IRQHandler+0x30>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a86      	ldr	r2, [pc, #536]	; (8003de0 <HAL_ADC_IRQHandler+0x244>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d101      	bne.n	8003bd0 <HAL_ADC_IRQHandler+0x34>
 8003bcc:	4b85      	ldr	r3, [pc, #532]	; (8003de4 <HAL_ADC_IRQHandler+0x248>)
 8003bce:	e000      	b.n	8003bd2 <HAL_ADC_IRQHandler+0x36>
 8003bd0:	4b85      	ldr	r3, [pc, #532]	; (8003de8 <HAL_ADC_IRQHandler+0x24c>)
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fb9a 	bl	800330c <LL_ADC_GetMultimode>
 8003bd8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d017      	beq.n	8003c14 <HAL_ADC_IRQHandler+0x78>
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d012      	beq.n	8003c14 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f001 f9d6 	bl	8004fb8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2202      	movs	r2, #2
 8003c12:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d004      	beq.n	8003c28 <HAL_ADC_IRQHandler+0x8c>
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8083 	beq.w	8003d3a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d07d      	beq.n	8003d3a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fa98 	bl	8003190 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d062      	beq.n	8003d2c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5d      	ldr	r2, [pc, #372]	; (8003de0 <HAL_ADC_IRQHandler+0x244>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d002      	beq.n	8003c76 <HAL_ADC_IRQHandler+0xda>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	e000      	b.n	8003c78 <HAL_ADC_IRQHandler+0xdc>
 8003c76:	4b59      	ldr	r3, [pc, #356]	; (8003ddc <HAL_ADC_IRQHandler+0x240>)
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d008      	beq.n	8003c92 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d005      	beq.n	8003c92 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d002      	beq.n	8003c92 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b09      	cmp	r3, #9
 8003c90:	d104      	bne.n	8003c9c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	623b      	str	r3, [r7, #32]
 8003c9a:	e00c      	b.n	8003cb6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a4f      	ldr	r2, [pc, #316]	; (8003de0 <HAL_ADC_IRQHandler+0x244>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d002      	beq.n	8003cac <HAL_ADC_IRQHandler+0x110>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	e000      	b.n	8003cae <HAL_ADC_IRQHandler+0x112>
 8003cac:	4b4b      	ldr	r3, [pc, #300]	; (8003ddc <HAL_ADC_IRQHandler+0x240>)
 8003cae:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d135      	bne.n	8003d2c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b08      	cmp	r3, #8
 8003ccc:	d12e      	bne.n	8003d2c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7ff fbe6 	bl	80034a4 <LL_ADC_REG_IsConversionOngoing>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d11a      	bne.n	8003d14 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 020c 	bic.w	r2, r2, #12
 8003cec:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d112      	bne.n	8003d2c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0a:	f043 0201 	orr.w	r2, r3, #1
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	661a      	str	r2, [r3, #96]	; 0x60
 8003d12:	e00b      	b.n	8003d2c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d18:	f043 0210 	orr.w	r2, r3, #16
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d24:	f043 0201 	orr.w	r2, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7fd ff4b 	bl	8001bc8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	220c      	movs	r2, #12
 8003d38:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <HAL_ADC_IRQHandler+0x1b2>
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d10b      	bne.n	8003d66 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80a0 	beq.w	8003e9a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 809a 	beq.w	8003e9a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d105      	bne.n	8003d7e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d76:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff fa43 	bl	800320e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003d88:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff f9fe 	bl	8003190 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d94:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a11      	ldr	r2, [pc, #68]	; (8003de0 <HAL_ADC_IRQHandler+0x244>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d002      	beq.n	8003da6 <HAL_ADC_IRQHandler+0x20a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	e000      	b.n	8003da8 <HAL_ADC_IRQHandler+0x20c>
 8003da6:	4b0d      	ldr	r3, [pc, #52]	; (8003ddc <HAL_ADC_IRQHandler+0x240>)
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d008      	beq.n	8003dc2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b06      	cmp	r3, #6
 8003dba:	d002      	beq.n	8003dc2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b07      	cmp	r3, #7
 8003dc0:	d104      	bne.n	8003dcc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	623b      	str	r3, [r7, #32]
 8003dca:	e014      	b.n	8003df6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a03      	ldr	r2, [pc, #12]	; (8003de0 <HAL_ADC_IRQHandler+0x244>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00a      	beq.n	8003dec <HAL_ADC_IRQHandler+0x250>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	e008      	b.n	8003dee <HAL_ADC_IRQHandler+0x252>
 8003ddc:	40022000 	.word	0x40022000
 8003de0:	40022100 	.word	0x40022100
 8003de4:	40022300 	.word	0x40022300
 8003de8:	58026300 	.word	0x58026300
 8003dec:	4b84      	ldr	r3, [pc, #528]	; (8004000 <HAL_ADC_IRQHandler+0x464>)
 8003dee:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d047      	beq.n	8003e8c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d007      	beq.n	8003e16 <HAL_ADC_IRQHandler+0x27a>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d03f      	beq.n	8003e8c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d13a      	bne.n	8003e8c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d133      	bne.n	8003e8c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d12e      	bne.n	8003e8c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7ff fb49 	bl	80034ca <LL_ADC_INJ_IsConversionOngoing>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d11a      	bne.n	8003e74 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e4c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d112      	bne.n	8003e8c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e6a:	f043 0201 	orr.w	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	661a      	str	r2, [r3, #96]	; 0x60
 8003e72:	e00b      	b.n	8003e8c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e78:	f043 0210 	orr.w	r2, r3, #16
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e84:	f043 0201 	orr.w	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f001 f86b 	bl	8004f68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2260      	movs	r2, #96	; 0x60
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003e9a:	69fb      	ldr	r3, [r7, #28]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d011      	beq.n	8003ec8 <HAL_ADC_IRQHandler+0x32c>
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00c      	beq.n	8003ec8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f8a8 	bl	8004010 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2280      	movs	r2, #128	; 0x80
 8003ec6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d012      	beq.n	8003ef8 <HAL_ADC_IRQHandler+0x35c>
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00d      	beq.n	8003ef8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f001 f851 	bl	8004f90 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ef6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d012      	beq.n	8003f28 <HAL_ADC_IRQHandler+0x38c>
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00d      	beq.n	8003f28 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f001 f843 	bl	8004fa4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d043      	beq.n	8003fba <HAL_ADC_IRQHandler+0x41e>
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	f003 0310 	and.w	r3, r3, #16
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d03e      	beq.n	8003fba <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003f44:	2301      	movs	r3, #1
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
 8003f48:	e021      	b.n	8003f8e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d015      	beq.n	8003f7c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2a      	ldr	r2, [pc, #168]	; (8004000 <HAL_ADC_IRQHandler+0x464>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d004      	beq.n	8003f64 <HAL_ADC_IRQHandler+0x3c8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a29      	ldr	r2, [pc, #164]	; (8004004 <HAL_ADC_IRQHandler+0x468>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d101      	bne.n	8003f68 <HAL_ADC_IRQHandler+0x3cc>
 8003f64:	4b28      	ldr	r3, [pc, #160]	; (8004008 <HAL_ADC_IRQHandler+0x46c>)
 8003f66:	e000      	b.n	8003f6a <HAL_ADC_IRQHandler+0x3ce>
 8003f68:	4b28      	ldr	r3, [pc, #160]	; (800400c <HAL_ADC_IRQHandler+0x470>)
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff f9dc 	bl	8003328 <LL_ADC_GetMultiDMATransfer>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003f76:	2301      	movs	r3, #1
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7a:	e008      	b.n	8003f8e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d10e      	bne.n	8003fb2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fa4:	f043 0202 	orr.w	r2, r3, #2
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f839 	bl	8004024 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2210      	movs	r2, #16
 8003fb8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d018      	beq.n	8003ff6 <HAL_ADC_IRQHandler+0x45a>
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d013      	beq.n	8003ff6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fd2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fde:	f043 0208 	orr.w	r2, r3, #8
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fee:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 ffc3 	bl	8004f7c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003ff6:	bf00      	nop
 8003ff8:	3728      	adds	r7, #40	; 0x28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40022000 	.word	0x40022000
 8004004:	40022100 	.word	0x40022100
 8004008:	40022300 	.word	0x40022300
 800400c:	58026300 	.word	0x58026300

08004010 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004038:	b590      	push	{r4, r7, lr}
 800403a:	b0b9      	sub	sp, #228	; 0xe4
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004042:	2300      	movs	r3, #0
 8004044:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004048:	2300      	movs	r3, #0
 800404a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004052:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	4ab3      	ldr	r2, [pc, #716]	; (8004328 <HAL_ADC_ConfigChannel+0x2f0>)
 800405a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004062:	2b01      	cmp	r3, #1
 8004064:	d102      	bne.n	800406c <HAL_ADC_ConfigChannel+0x34>
 8004066:	2302      	movs	r3, #2
 8004068:	f000 bcfa 	b.w	8004a60 <HAL_ADC_ConfigChannel+0xa28>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fa13 	bl	80034a4 <LL_ADC_REG_IsConversionOngoing>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	f040 84de 	bne.w	8004a42 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4aa8      	ldr	r2, [pc, #672]	; (800432c <HAL_ADC_ConfigChannel+0x2f4>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d033      	beq.n	80040f8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004098:	2b00      	cmp	r3, #0
 800409a:	d108      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x76>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	0e9b      	lsrs	r3, r3, #26
 80040a2:	f003 031f 	and.w	r3, r3, #31
 80040a6:	2201      	movs	r2, #1
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	e01d      	b.n	80040ea <HAL_ADC_ConfigChannel+0xb2>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040ba:	fa93 f3a3 	rbit	r3, r3
 80040be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80040c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80040d2:	2320      	movs	r3, #32
 80040d4:	e004      	b.n	80040e0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80040d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040da:	fab3 f383 	clz	r3, r3
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	f003 031f 	and.w	r3, r3, #31
 80040e4:	2201      	movs	r2, #1
 80040e6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	69d1      	ldr	r1, [r2, #28]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6818      	ldr	r0, [r3, #0]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6859      	ldr	r1, [r3, #4]
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	f7ff f856 	bl	80031b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7ff f9c8 	bl	80034a4 <LL_ADC_REG_IsConversionOngoing>
 8004114:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff f9d4 	bl	80034ca <LL_ADC_INJ_IsConversionOngoing>
 8004122:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800412a:	2b00      	cmp	r3, #0
 800412c:	f040 8270 	bne.w	8004610 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004130:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004134:	2b00      	cmp	r3, #0
 8004136:	f040 826b 	bne.w	8004610 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	6819      	ldr	r1, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	461a      	mov	r2, r3
 8004148:	f7ff f874 	bl	8003234 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a76      	ldr	r2, [pc, #472]	; (800432c <HAL_ADC_ConfigChannel+0x2f4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d10d      	bne.n	8004172 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	08db      	lsrs	r3, r3, #3
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004170:	e032      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004172:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <HAL_ADC_ConfigChannel+0x2f8>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800417a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800417e:	d10b      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x160>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	089b      	lsrs	r3, r3, #2
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	fa02 f303 	lsl.w	r3, r2, r3
 8004196:	e01d      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x19c>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0310 	and.w	r3, r3, #16
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10b      	bne.n	80041be <HAL_ADC_ConfigChannel+0x186>
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	089b      	lsrs	r3, r3, #2
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	e00a      	b.n	80041d4 <HAL_ADC_ConfigChannel+0x19c>
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	089b      	lsrs	r3, r3, #2
 80041ca:	f003 0304 	and.w	r3, r3, #4
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	2b04      	cmp	r3, #4
 80041de:	d048      	beq.n	8004272 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6919      	ldr	r1, [r3, #16]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041f0:	f7fe fedc 	bl	8002fac <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a4c      	ldr	r2, [pc, #304]	; (800432c <HAL_ADC_ConfigChannel+0x2f4>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d119      	bne.n	8004232 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6818      	ldr	r0, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	6919      	ldr	r1, [r3, #16]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	461a      	mov	r2, r3
 800420c:	f7fe ff74 	bl	80030f8 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6919      	ldr	r1, [r3, #16]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d102      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x1f0>
 8004222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004226:	e000      	b.n	800422a <HAL_ADC_ConfigChannel+0x1f2>
 8004228:	2300      	movs	r3, #0
 800422a:	461a      	mov	r2, r3
 800422c:	f7fe ff42 	bl	80030b4 <LL_ADC_SetOffsetSaturation>
 8004230:	e1ee      	b.n	8004610 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6919      	ldr	r1, [r3, #16]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004240:	2b01      	cmp	r3, #1
 8004242:	d102      	bne.n	800424a <HAL_ADC_ConfigChannel+0x212>
 8004244:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004248:	e000      	b.n	800424c <HAL_ADC_ConfigChannel+0x214>
 800424a:	2300      	movs	r3, #0
 800424c:	461a      	mov	r2, r3
 800424e:	f7fe ff0f 	bl	8003070 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6919      	ldr	r1, [r3, #16]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	7e1b      	ldrb	r3, [r3, #24]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d102      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x230>
 8004262:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004266:	e000      	b.n	800426a <HAL_ADC_ConfigChannel+0x232>
 8004268:	2300      	movs	r3, #0
 800426a:	461a      	mov	r2, r3
 800426c:	f7fe fee6 	bl	800303c <LL_ADC_SetDataRightShift>
 8004270:	e1ce      	b.n	8004610 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2d      	ldr	r2, [pc, #180]	; (800432c <HAL_ADC_ConfigChannel+0x2f4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	f040 8181 	bne.w	8004580 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe fec3 	bl	8003010 <LL_ADC_GetOffsetChannel>
 800428a:	4603      	mov	r3, r0
 800428c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x272>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe feb8 	bl	8003010 <LL_ADC_GetOffsetChannel>
 80042a0:	4603      	mov	r3, r0
 80042a2:	0e9b      	lsrs	r3, r3, #26
 80042a4:	f003 021f 	and.w	r2, r3, #31
 80042a8:	e01e      	b.n	80042e8 <HAL_ADC_ConfigChannel+0x2b0>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe fead 	bl	8003010 <LL_ADC_GetOffsetChannel>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042c0:	fa93 f3a3 	rbit	r3, r3
 80042c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80042c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80042d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80042d8:	2320      	movs	r3, #32
 80042da:	e004      	b.n	80042e6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80042dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80042e0:	fab3 f383 	clz	r3, r3
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d105      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x2c8>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	0e9b      	lsrs	r3, r3, #26
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	e01e      	b.n	800433e <HAL_ADC_ConfigChannel+0x306>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800430c:	fa93 f3a3 	rbit	r3, r3
 8004310:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004314:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004318:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800431c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004324:	2320      	movs	r3, #32
 8004326:	e00a      	b.n	800433e <HAL_ADC_ConfigChannel+0x306>
 8004328:	47ff0000 	.word	0x47ff0000
 800432c:	58026000 	.word	0x58026000
 8004330:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8004334:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004338:	fab3 f383 	clz	r3, r3
 800433c:	b2db      	uxtb	r3, r3
 800433e:	429a      	cmp	r2, r3
 8004340:	d106      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2200      	movs	r2, #0
 8004348:	2100      	movs	r1, #0
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe fef6 	bl	800313c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2101      	movs	r1, #1
 8004356:	4618      	mov	r0, r3
 8004358:	f7fe fe5a 	bl	8003010 <LL_ADC_GetOffsetChannel>
 800435c:	4603      	mov	r3, r0
 800435e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10a      	bne.n	800437c <HAL_ADC_ConfigChannel+0x344>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2101      	movs	r1, #1
 800436c:	4618      	mov	r0, r3
 800436e:	f7fe fe4f 	bl	8003010 <LL_ADC_GetOffsetChannel>
 8004372:	4603      	mov	r3, r0
 8004374:	0e9b      	lsrs	r3, r3, #26
 8004376:	f003 021f 	and.w	r2, r3, #31
 800437a:	e01e      	b.n	80043ba <HAL_ADC_ConfigChannel+0x382>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2101      	movs	r1, #1
 8004382:	4618      	mov	r0, r3
 8004384:	f7fe fe44 	bl	8003010 <LL_ADC_GetOffsetChannel>
 8004388:	4603      	mov	r3, r0
 800438a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800439a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800439e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80043a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80043aa:	2320      	movs	r3, #32
 80043ac:	e004      	b.n	80043b8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80043ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043b2:	fab3 f383 	clz	r3, r3
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d105      	bne.n	80043d2 <HAL_ADC_ConfigChannel+0x39a>
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	0e9b      	lsrs	r3, r3, #26
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	e018      	b.n	8004404 <HAL_ADC_ConfigChannel+0x3cc>
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80043de:	fa93 f3a3 	rbit	r3, r3
 80043e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80043e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80043ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80043f6:	2320      	movs	r3, #32
 80043f8:	e004      	b.n	8004404 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80043fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043fe:	fab3 f383 	clz	r3, r3
 8004402:	b2db      	uxtb	r3, r3
 8004404:	429a      	cmp	r2, r3
 8004406:	d106      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2200      	movs	r2, #0
 800440e:	2101      	movs	r1, #1
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe fe93 	bl	800313c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2102      	movs	r1, #2
 800441c:	4618      	mov	r0, r3
 800441e:	f7fe fdf7 	bl	8003010 <LL_ADC_GetOffsetChannel>
 8004422:	4603      	mov	r3, r0
 8004424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <HAL_ADC_ConfigChannel+0x40a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2102      	movs	r1, #2
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe fdec 	bl	8003010 <LL_ADC_GetOffsetChannel>
 8004438:	4603      	mov	r3, r0
 800443a:	0e9b      	lsrs	r3, r3, #26
 800443c:	f003 021f 	and.w	r2, r3, #31
 8004440:	e01e      	b.n	8004480 <HAL_ADC_ConfigChannel+0x448>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2102      	movs	r1, #2
 8004448:	4618      	mov	r0, r3
 800444a:	f7fe fde1 	bl	8003010 <LL_ADC_GetOffsetChannel>
 800444e:	4603      	mov	r3, r0
 8004450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004454:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004458:	fa93 f3a3 	rbit	r3, r3
 800445c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004464:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004468:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004470:	2320      	movs	r3, #32
 8004472:	e004      	b.n	800447e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004474:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004478:	fab3 f383 	clz	r3, r3
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x460>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	0e9b      	lsrs	r3, r3, #26
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	e014      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x48a>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044a0:	fa93 f3a3 	rbit	r3, r3
 80044a4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80044a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80044ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80044b4:	2320      	movs	r3, #32
 80044b6:	e004      	b.n	80044c2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80044b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80044bc:	fab3 f383 	clz	r3, r3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d106      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2200      	movs	r2, #0
 80044cc:	2102      	movs	r1, #2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe fe34 	bl	800313c <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2103      	movs	r1, #3
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fe fd98 	bl	8003010 <LL_ADC_GetOffsetChannel>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10a      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x4c8>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2103      	movs	r1, #3
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7fe fd8d 	bl	8003010 <LL_ADC_GetOffsetChannel>
 80044f6:	4603      	mov	r3, r0
 80044f8:	0e9b      	lsrs	r3, r3, #26
 80044fa:	f003 021f 	and.w	r2, r3, #31
 80044fe:	e017      	b.n	8004530 <HAL_ADC_ConfigChannel+0x4f8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2103      	movs	r1, #3
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fd82 	bl	8003010 <LL_ADC_GetOffsetChannel>
 800450c:	4603      	mov	r3, r0
 800450e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004512:	fa93 f3a3 	rbit	r3, r3
 8004516:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800451c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004522:	2320      	movs	r3, #32
 8004524:	e003      	b.n	800452e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004526:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	461a      	mov	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004538:	2b00      	cmp	r3, #0
 800453a:	d105      	bne.n	8004548 <HAL_ADC_ConfigChannel+0x510>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	0e9b      	lsrs	r3, r3, #26
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	e011      	b.n	800456c <HAL_ADC_ConfigChannel+0x534>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004556:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004558:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800455a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004560:	2320      	movs	r3, #32
 8004562:	e003      	b.n	800456c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
 800456c:	429a      	cmp	r2, r3
 800456e:	d14f      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	2103      	movs	r1, #3
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe fddf 	bl	800313c <LL_ADC_SetOffsetState>
 800457e:	e047      	b.n	8004610 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	069b      	lsls	r3, r3, #26
 8004590:	429a      	cmp	r2, r3
 8004592:	d107      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045a2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	069b      	lsls	r3, r3, #26
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d107      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045c6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	069b      	lsls	r3, r3, #26
 80045d8:	429a      	cmp	r2, r3
 80045da:	d107      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045ea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	069b      	lsls	r3, r3, #26
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d107      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800460e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe ff0b 	bl	8003430 <LL_ADC_IsEnabled>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 8219 	bne.w	8004a54 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6819      	ldr	r1, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	461a      	mov	r2, r3
 8004630:	f7fe fe2c 	bl	800328c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	4aa1      	ldr	r2, [pc, #644]	; (80048c0 <HAL_ADC_ConfigChannel+0x888>)
 800463a:	4293      	cmp	r3, r2
 800463c:	f040 812e 	bne.w	800489c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x630>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	0e9b      	lsrs	r3, r3, #26
 8004656:	3301      	adds	r3, #1
 8004658:	f003 031f 	and.w	r3, r3, #31
 800465c:	2b09      	cmp	r3, #9
 800465e:	bf94      	ite	ls
 8004660:	2301      	movls	r3, #1
 8004662:	2300      	movhi	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e019      	b.n	800469c <HAL_ADC_ConfigChannel+0x664>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004678:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800467a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004680:	2320      	movs	r3, #32
 8004682:	e003      	b.n	800468c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004686:	fab3 f383 	clz	r3, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	3301      	adds	r3, #1
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	2b09      	cmp	r3, #9
 8004694:	bf94      	ite	ls
 8004696:	2301      	movls	r3, #1
 8004698:	2300      	movhi	r3, #0
 800469a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800469c:	2b00      	cmp	r3, #0
 800469e:	d079      	beq.n	8004794 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d107      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x684>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0e9b      	lsrs	r3, r3, #26
 80046b2:	3301      	adds	r3, #1
 80046b4:	069b      	lsls	r3, r3, #26
 80046b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046ba:	e015      	b.n	80046e8 <HAL_ADC_ConfigChannel+0x6b0>
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c4:	fa93 f3a3 	rbit	r3, r3
 80046c8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80046ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80046ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80046d4:	2320      	movs	r3, #32
 80046d6:	e003      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80046d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	069b      	lsls	r3, r3, #26
 80046e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d109      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x6d0>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	0e9b      	lsrs	r3, r3, #26
 80046fa:	3301      	adds	r3, #1
 80046fc:	f003 031f 	and.w	r3, r3, #31
 8004700:	2101      	movs	r1, #1
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	e017      	b.n	8004738 <HAL_ADC_ConfigChannel+0x700>
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800470e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004710:	fa93 f3a3 	rbit	r3, r3
 8004714:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800471a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004720:	2320      	movs	r3, #32
 8004722:	e003      	b.n	800472c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004726:	fab3 f383 	clz	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	3301      	adds	r3, #1
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	2101      	movs	r1, #1
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	ea42 0103 	orr.w	r1, r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <HAL_ADC_ConfigChannel+0x726>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	0e9b      	lsrs	r3, r3, #26
 800474e:	3301      	adds	r3, #1
 8004750:	f003 021f 	and.w	r2, r3, #31
 8004754:	4613      	mov	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4413      	add	r3, r2
 800475a:	051b      	lsls	r3, r3, #20
 800475c:	e018      	b.n	8004790 <HAL_ADC_ConfigChannel+0x758>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800476c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004776:	2320      	movs	r3, #32
 8004778:	e003      	b.n	8004782 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	fab3 f383 	clz	r3, r3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	3301      	adds	r3, #1
 8004784:	f003 021f 	and.w	r2, r3, #31
 8004788:	4613      	mov	r3, r2
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	4413      	add	r3, r2
 800478e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004790:	430b      	orrs	r3, r1
 8004792:	e07e      	b.n	8004892 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800479c:	2b00      	cmp	r3, #0
 800479e:	d107      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x778>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	0e9b      	lsrs	r3, r3, #26
 80047a6:	3301      	adds	r3, #1
 80047a8:	069b      	lsls	r3, r3, #26
 80047aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047ae:	e015      	b.n	80047dc <HAL_ADC_ConfigChannel+0x7a4>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b8:	fa93 f3a3 	rbit	r3, r3
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80047c8:	2320      	movs	r3, #32
 80047ca:	e003      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80047cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ce:	fab3 f383 	clz	r3, r3
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3301      	adds	r3, #1
 80047d6:	069b      	lsls	r3, r3, #26
 80047d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d109      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x7c4>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	0e9b      	lsrs	r3, r3, #26
 80047ee:	3301      	adds	r3, #1
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	2101      	movs	r1, #1
 80047f6:	fa01 f303 	lsl.w	r3, r1, r3
 80047fa:	e017      	b.n	800482c <HAL_ADC_ConfigChannel+0x7f4>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	fa93 f3a3 	rbit	r3, r3
 8004808:	61bb      	str	r3, [r7, #24]
  return result;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004814:	2320      	movs	r3, #32
 8004816:	e003      	b.n	8004820 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	fab3 f383 	clz	r3, r3
 800481e:	b2db      	uxtb	r3, r3
 8004820:	3301      	adds	r3, #1
 8004822:	f003 031f 	and.w	r3, r3, #31
 8004826:	2101      	movs	r1, #1
 8004828:	fa01 f303 	lsl.w	r3, r1, r3
 800482c:	ea42 0103 	orr.w	r1, r2, r3
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10d      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x820>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	0e9b      	lsrs	r3, r3, #26
 8004842:	3301      	adds	r3, #1
 8004844:	f003 021f 	and.w	r2, r3, #31
 8004848:	4613      	mov	r3, r2
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	4413      	add	r3, r2
 800484e:	3b1e      	subs	r3, #30
 8004850:	051b      	lsls	r3, r3, #20
 8004852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004856:	e01b      	b.n	8004890 <HAL_ADC_ConfigChannel+0x858>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	fa93 f3a3 	rbit	r3, r3
 8004864:	60fb      	str	r3, [r7, #12]
  return result;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004870:	2320      	movs	r3, #32
 8004872:	e003      	b.n	800487c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	fab3 f383 	clz	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	3301      	adds	r3, #1
 800487e:	f003 021f 	and.w	r2, r3, #31
 8004882:	4613      	mov	r3, r2
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	4413      	add	r3, r2
 8004888:	3b1e      	subs	r3, #30
 800488a:	051b      	lsls	r3, r3, #20
 800488c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004890:	430b      	orrs	r3, r1
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	6892      	ldr	r2, [r2, #8]
 8004896:	4619      	mov	r1, r3
 8004898:	f7fe fccc 	bl	8003234 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f280 80d7 	bge.w	8004a54 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a06      	ldr	r2, [pc, #24]	; (80048c4 <HAL_ADC_ConfigChannel+0x88c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_ADC_ConfigChannel+0x882>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <HAL_ADC_ConfigChannel+0x890>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d10a      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x898>
 80048ba:	4b04      	ldr	r3, [pc, #16]	; (80048cc <HAL_ADC_ConfigChannel+0x894>)
 80048bc:	e009      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x89a>
 80048be:	bf00      	nop
 80048c0:	47ff0000 	.word	0x47ff0000
 80048c4:	40022000 	.word	0x40022000
 80048c8:	40022100 	.word	0x40022100
 80048cc:	40022300 	.word	0x40022300
 80048d0:	4b65      	ldr	r3, [pc, #404]	; (8004a68 <HAL_ADC_ConfigChannel+0xa30>)
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7fe fb5c 	bl	8002f90 <LL_ADC_GetCommonPathInternalCh>
 80048d8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a62      	ldr	r2, [pc, #392]	; (8004a6c <HAL_ADC_ConfigChannel+0xa34>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_ADC_ConfigChannel+0x8b8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a61      	ldr	r2, [pc, #388]	; (8004a70 <HAL_ADC_ConfigChannel+0xa38>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d10e      	bne.n	800490e <HAL_ADC_ConfigChannel+0x8d6>
 80048f0:	485e      	ldr	r0, [pc, #376]	; (8004a6c <HAL_ADC_ConfigChannel+0xa34>)
 80048f2:	f7fe fd9d 	bl	8003430 <LL_ADC_IsEnabled>
 80048f6:	4604      	mov	r4, r0
 80048f8:	485d      	ldr	r0, [pc, #372]	; (8004a70 <HAL_ADC_ConfigChannel+0xa38>)
 80048fa:	f7fe fd99 	bl	8003430 <LL_ADC_IsEnabled>
 80048fe:	4603      	mov	r3, r0
 8004900:	4323      	orrs	r3, r4
 8004902:	2b00      	cmp	r3, #0
 8004904:	bf0c      	ite	eq
 8004906:	2301      	moveq	r3, #1
 8004908:	2300      	movne	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	e008      	b.n	8004920 <HAL_ADC_ConfigChannel+0x8e8>
 800490e:	4859      	ldr	r0, [pc, #356]	; (8004a74 <HAL_ADC_ConfigChannel+0xa3c>)
 8004910:	f7fe fd8e 	bl	8003430 <LL_ADC_IsEnabled>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	bf0c      	ite	eq
 800491a:	2301      	moveq	r3, #1
 800491c:	2300      	movne	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8084 	beq.w	8004a2e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a53      	ldr	r2, [pc, #332]	; (8004a78 <HAL_ADC_ConfigChannel+0xa40>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d132      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x95e>
 8004930:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d12c      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a4c      	ldr	r2, [pc, #304]	; (8004a74 <HAL_ADC_ConfigChannel+0xa3c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	f040 8086 	bne.w	8004a54 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a47      	ldr	r2, [pc, #284]	; (8004a6c <HAL_ADC_ConfigChannel+0xa34>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <HAL_ADC_ConfigChannel+0x924>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a46      	ldr	r2, [pc, #280]	; (8004a70 <HAL_ADC_ConfigChannel+0xa38>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d101      	bne.n	8004960 <HAL_ADC_ConfigChannel+0x928>
 800495c:	4a47      	ldr	r2, [pc, #284]	; (8004a7c <HAL_ADC_ConfigChannel+0xa44>)
 800495e:	e000      	b.n	8004962 <HAL_ADC_ConfigChannel+0x92a>
 8004960:	4a41      	ldr	r2, [pc, #260]	; (8004a68 <HAL_ADC_ConfigChannel+0xa30>)
 8004962:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004966:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800496a:	4619      	mov	r1, r3
 800496c:	4610      	mov	r0, r2
 800496e:	f7fe fafc 	bl	8002f6a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004972:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <HAL_ADC_ConfigChannel+0xa48>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	099b      	lsrs	r3, r3, #6
 8004978:	4a42      	ldr	r2, [pc, #264]	; (8004a84 <HAL_ADC_ConfigChannel+0xa4c>)
 800497a:	fba2 2303 	umull	r2, r3, r2, r3
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	3301      	adds	r3, #1
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004986:	e002      	b.n	800498e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	3b01      	subs	r3, #1
 800498c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f9      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004994:	e05e      	b.n	8004a54 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a3b      	ldr	r2, [pc, #236]	; (8004a88 <HAL_ADC_ConfigChannel+0xa50>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d120      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x9aa>
 80049a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d11a      	bne.n	80049e2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a30      	ldr	r2, [pc, #192]	; (8004a74 <HAL_ADC_ConfigChannel+0xa3c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d14e      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2c      	ldr	r2, [pc, #176]	; (8004a6c <HAL_ADC_ConfigChannel+0xa34>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d004      	beq.n	80049ca <HAL_ADC_ConfigChannel+0x992>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a2a      	ldr	r2, [pc, #168]	; (8004a70 <HAL_ADC_ConfigChannel+0xa38>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x996>
 80049ca:	4a2c      	ldr	r2, [pc, #176]	; (8004a7c <HAL_ADC_ConfigChannel+0xa44>)
 80049cc:	e000      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x998>
 80049ce:	4a26      	ldr	r2, [pc, #152]	; (8004a68 <HAL_ADC_ConfigChannel+0xa30>)
 80049d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7fe fac5 	bl	8002f6a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049e0:	e038      	b.n	8004a54 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a29      	ldr	r2, [pc, #164]	; (8004a8c <HAL_ADC_ConfigChannel+0xa54>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d133      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0xa1c>
 80049ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80049f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d12d      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <HAL_ADC_ConfigChannel+0xa3c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d128      	bne.n	8004a54 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a19      	ldr	r2, [pc, #100]	; (8004a6c <HAL_ADC_ConfigChannel+0xa34>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d004      	beq.n	8004a16 <HAL_ADC_ConfigChannel+0x9de>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a17      	ldr	r2, [pc, #92]	; (8004a70 <HAL_ADC_ConfigChannel+0xa38>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d101      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x9e2>
 8004a16:	4a19      	ldr	r2, [pc, #100]	; (8004a7c <HAL_ADC_ConfigChannel+0xa44>)
 8004a18:	e000      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x9e4>
 8004a1a:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <HAL_ADC_ConfigChannel+0xa30>)
 8004a1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f7fe fa9f 	bl	8002f6a <LL_ADC_SetCommonPathInternalCh>
 8004a2c:	e012      	b.n	8004a54 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a32:	f043 0220 	orr.w	r2, r3, #32
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004a40:	e008      	b.n	8004a54 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a46:	f043 0220 	orr.w	r2, r3, #32
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004a5c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	37e4      	adds	r7, #228	; 0xe4
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd90      	pop	{r4, r7, pc}
 8004a68:	58026300 	.word	0x58026300
 8004a6c:	40022000 	.word	0x40022000
 8004a70:	40022100 	.word	0x40022100
 8004a74:	58026000 	.word	0x58026000
 8004a78:	c7520000 	.word	0xc7520000
 8004a7c:	40022300 	.word	0x40022300
 8004a80:	20000000 	.word	0x20000000
 8004a84:	053e2d63 	.word	0x053e2d63
 8004a88:	c3210000 	.word	0xc3210000
 8004a8c:	cb840000 	.word	0xcb840000

08004a90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fe fcc7 	bl	8003430 <LL_ADC_IsEnabled>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d16e      	bne.n	8004b86 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	4b38      	ldr	r3, [pc, #224]	; (8004b90 <ADC_Enable+0x100>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00d      	beq.n	8004ad2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aba:	f043 0210 	orr.w	r2, r3, #16
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ac6:	f043 0201 	orr.w	r2, r3, #1
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e05a      	b.n	8004b88 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fc82 	bl	80033e0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004adc:	f7fe fa02 	bl	8002ee4 <HAL_GetTick>
 8004ae0:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a2b      	ldr	r2, [pc, #172]	; (8004b94 <ADC_Enable+0x104>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <ADC_Enable+0x66>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a29      	ldr	r2, [pc, #164]	; (8004b98 <ADC_Enable+0x108>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d101      	bne.n	8004afa <ADC_Enable+0x6a>
 8004af6:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <ADC_Enable+0x10c>)
 8004af8:	e000      	b.n	8004afc <ADC_Enable+0x6c>
 8004afa:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <ADC_Enable+0x110>)
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7fe fc05 	bl	800330c <LL_ADC_GetMultimode>
 8004b02:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <ADC_Enable+0x108>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d002      	beq.n	8004b14 <ADC_Enable+0x84>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	e000      	b.n	8004b16 <ADC_Enable+0x86>
 8004b14:	4b1f      	ldr	r3, [pc, #124]	; (8004b94 <ADC_Enable+0x104>)
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d02c      	beq.n	8004b78 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d130      	bne.n	8004b86 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b24:	e028      	b.n	8004b78 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fc80 	bl	8003430 <LL_ADC_IsEnabled>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d104      	bne.n	8004b40 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fe fc50 	bl	80033e0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b40:	f7fe f9d0 	bl	8002ee4 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d914      	bls.n	8004b78 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d00d      	beq.n	8004b78 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b60:	f043 0210 	orr.w	r2, r3, #16
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6c:	f043 0201 	orr.w	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e007      	b.n	8004b88 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d1cf      	bne.n	8004b26 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	8000003f 	.word	0x8000003f
 8004b94:	40022000 	.word	0x40022000
 8004b98:	40022100 	.word	0x40022100
 8004b9c:	40022300 	.word	0x40022300
 8004ba0:	58026300 	.word	0x58026300

08004ba4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fe fc50 	bl	8003456 <LL_ADC_IsDisableOngoing>
 8004bb6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f7fe fc37 	bl	8003430 <LL_ADC_IsEnabled>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d047      	beq.n	8004c58 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d144      	bne.n	8004c58 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 030d 	and.w	r3, r3, #13
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d10c      	bne.n	8004bf6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe fc11 	bl	8003408 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2203      	movs	r2, #3
 8004bec:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bee:	f7fe f979 	bl	8002ee4 <HAL_GetTick>
 8004bf2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bf4:	e029      	b.n	8004c4a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bfa:	f043 0210 	orr.w	r2, r3, #16
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c06:	f043 0201 	orr.w	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e023      	b.n	8004c5a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c12:	f7fe f967 	bl	8002ee4 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d914      	bls.n	8004c4a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00d      	beq.n	8004c4a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c32:	f043 0210 	orr.w	r2, r3, #16
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c3e:	f043 0201 	orr.w	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e007      	b.n	8004c5a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1dc      	bne.n	8004c12 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a6b      	ldr	r2, [pc, #428]	; (8004e20 <ADC_ConfigureBoostMode+0x1bc>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d004      	beq.n	8004c80 <ADC_ConfigureBoostMode+0x1c>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a6a      	ldr	r2, [pc, #424]	; (8004e24 <ADC_ConfigureBoostMode+0x1c0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d109      	bne.n	8004c94 <ADC_ConfigureBoostMode+0x30>
 8004c80:	4b69      	ldr	r3, [pc, #420]	; (8004e28 <ADC_ConfigureBoostMode+0x1c4>)
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf14      	ite	ne
 8004c8c:	2301      	movne	r3, #1
 8004c8e:	2300      	moveq	r3, #0
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	e008      	b.n	8004ca6 <ADC_ConfigureBoostMode+0x42>
 8004c94:	4b65      	ldr	r3, [pc, #404]	; (8004e2c <ADC_ConfigureBoostMode+0x1c8>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d01c      	beq.n	8004ce4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004caa:	f005 f96b 	bl	8009f84 <HAL_RCC_GetHCLKFreq>
 8004cae:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cb8:	d010      	beq.n	8004cdc <ADC_ConfigureBoostMode+0x78>
 8004cba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004cbe:	d871      	bhi.n	8004da4 <ADC_ConfigureBoostMode+0x140>
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc4:	d002      	beq.n	8004ccc <ADC_ConfigureBoostMode+0x68>
 8004cc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cca:	d16b      	bne.n	8004da4 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	0c1b      	lsrs	r3, r3, #16
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	60fb      	str	r3, [r7, #12]
        break;
 8004cda:	e066      	b.n	8004daa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	089b      	lsrs	r3, r3, #2
 8004ce0:	60fb      	str	r3, [r7, #12]
        break;
 8004ce2:	e062      	b.n	8004daa <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004ce4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004ce8:	f006 f8a2 	bl	800ae30 <HAL_RCCEx_GetPeriphCLKFreq>
 8004cec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004cf6:	d051      	beq.n	8004d9c <ADC_ConfigureBoostMode+0x138>
 8004cf8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004cfc:	d854      	bhi.n	8004da8 <ADC_ConfigureBoostMode+0x144>
 8004cfe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d02:	d047      	beq.n	8004d94 <ADC_ConfigureBoostMode+0x130>
 8004d04:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d08:	d84e      	bhi.n	8004da8 <ADC_ConfigureBoostMode+0x144>
 8004d0a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d0e:	d03d      	beq.n	8004d8c <ADC_ConfigureBoostMode+0x128>
 8004d10:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d14:	d848      	bhi.n	8004da8 <ADC_ConfigureBoostMode+0x144>
 8004d16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d1a:	d033      	beq.n	8004d84 <ADC_ConfigureBoostMode+0x120>
 8004d1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d20:	d842      	bhi.n	8004da8 <ADC_ConfigureBoostMode+0x144>
 8004d22:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d26:	d029      	beq.n	8004d7c <ADC_ConfigureBoostMode+0x118>
 8004d28:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004d2c:	d83c      	bhi.n	8004da8 <ADC_ConfigureBoostMode+0x144>
 8004d2e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d32:	d01a      	beq.n	8004d6a <ADC_ConfigureBoostMode+0x106>
 8004d34:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004d38:	d836      	bhi.n	8004da8 <ADC_ConfigureBoostMode+0x144>
 8004d3a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d3e:	d014      	beq.n	8004d6a <ADC_ConfigureBoostMode+0x106>
 8004d40:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004d44:	d830      	bhi.n	8004da8 <ADC_ConfigureBoostMode+0x144>
 8004d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4a:	d00e      	beq.n	8004d6a <ADC_ConfigureBoostMode+0x106>
 8004d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d50:	d82a      	bhi.n	8004da8 <ADC_ConfigureBoostMode+0x144>
 8004d52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d56:	d008      	beq.n	8004d6a <ADC_ConfigureBoostMode+0x106>
 8004d58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004d5c:	d824      	bhi.n	8004da8 <ADC_ConfigureBoostMode+0x144>
 8004d5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d62:	d002      	beq.n	8004d6a <ADC_ConfigureBoostMode+0x106>
 8004d64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004d68:	d11e      	bne.n	8004da8 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	0c9b      	lsrs	r3, r3, #18
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d78:	60fb      	str	r3, [r7, #12]
        break;
 8004d7a:	e016      	b.n	8004daa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	091b      	lsrs	r3, r3, #4
 8004d80:	60fb      	str	r3, [r7, #12]
        break;
 8004d82:	e012      	b.n	8004daa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	095b      	lsrs	r3, r3, #5
 8004d88:	60fb      	str	r3, [r7, #12]
        break;
 8004d8a:	e00e      	b.n	8004daa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	099b      	lsrs	r3, r3, #6
 8004d90:	60fb      	str	r3, [r7, #12]
        break;
 8004d92:	e00a      	b.n	8004daa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	09db      	lsrs	r3, r3, #7
 8004d98:	60fb      	str	r3, [r7, #12]
        break;
 8004d9a:	e006      	b.n	8004daa <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	0a1b      	lsrs	r3, r3, #8
 8004da0:	60fb      	str	r3, [r7, #12]
        break;
 8004da2:	e002      	b.n	8004daa <ADC_ConfigureBoostMode+0x146>
        break;
 8004da4:	bf00      	nop
 8004da6:	e000      	b.n	8004daa <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8004da8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	085b      	lsrs	r3, r3, #1
 8004dae:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a1f      	ldr	r2, [pc, #124]	; (8004e30 <ADC_ConfigureBoostMode+0x1cc>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d808      	bhi.n	8004dca <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004dc6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004dc8:	e025      	b.n	8004e16 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <ADC_ConfigureBoostMode+0x1d0>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d80a      	bhi.n	8004de8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de4:	609a      	str	r2, [r3, #8]
}
 8004de6:	e016      	b.n	8004e16 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	4a13      	ldr	r2, [pc, #76]	; (8004e38 <ADC_ConfigureBoostMode+0x1d4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d80a      	bhi.n	8004e06 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e02:	609a      	str	r2, [r3, #8]
}
 8004e04:	e007      	b.n	8004e16 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004e14:	609a      	str	r2, [r3, #8]
}
 8004e16:	bf00      	nop
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40022000 	.word	0x40022000
 8004e24:	40022100 	.word	0x40022100
 8004e28:	40022300 	.word	0x40022300
 8004e2c:	58026300 	.word	0x58026300
 8004e30:	005f5e10 	.word	0x005f5e10
 8004e34:	00bebc20 	.word	0x00bebc20
 8004e38:	017d7840 	.word	0x017d7840

08004e3c <LL_ADC_StartCalibration>:
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <LL_ADC_StartCalibration+0x38>)
 8004e4e:	4013      	ands	r3, r2
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	609a      	str	r2, [r3, #8]
}
 8004e68:	bf00      	nop
 8004e6a:	3714      	adds	r7, #20
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr
 8004e74:	3ffeffc0 	.word	0x3ffeffc0

08004e78 <LL_ADC_IsCalibrationOnGoing>:
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e8c:	d101      	bne.n	8004e92 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e000      	b.n	8004e94 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d101      	bne.n	8004ebe <HAL_ADCEx_Calibration_Start+0x1e>
 8004eba:	2302      	movs	r3, #2
 8004ebc:	e04c      	b.n	8004f58 <HAL_ADCEx_Calibration_Start+0xb8>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004ec6:	68f8      	ldr	r0, [r7, #12]
 8004ec8:	f7ff fe6c 	bl	8004ba4 <ADC_Disable>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004ed0:	7dfb      	ldrb	r3, [r7, #23]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d135      	bne.n	8004f42 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004eda:	4b21      	ldr	r3, [pc, #132]	; (8004f60 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004edc:	4013      	ands	r3, r2
 8004ede:	f043 0202 	orr.w	r2, r3, #2
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	661a      	str	r2, [r3, #96]	; 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	68b9      	ldr	r1, [r7, #8]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff ffa4 	bl	8004e3c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004ef4:	e014      	b.n	8004f20 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d30d      	bcc.n	8004f20 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f08:	f023 0312 	bic.w	r3, r3, #18
 8004f0c:	f043 0210 	orr.w	r2, r3, #16
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e01b      	b.n	8004f58 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f7ff ffa7 	bl	8004e78 <LL_ADC_IsCalibrationOnGoing>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e2      	bne.n	8004ef6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f34:	f023 0303 	bic.w	r3, r3, #3
 8004f38:	f043 0201 	orr.w	r2, r3, #1
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	661a      	str	r2, [r3, #96]	; 0x60
 8004f40:	e005      	b.n	8004f4e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f46:	f043 0210 	orr.w	r2, r3, #16
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3718      	adds	r7, #24
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	ffffeefd 	.word	0xffffeefd
 8004f64:	25c3f800 	.word	0x25c3f800

08004f68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <__NVIC_SetPriorityGrouping+0x40>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fe2:	68ba      	ldr	r2, [r7, #8]
 8004fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fe8:	4013      	ands	r3, r2
 8004fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <__NVIC_SetPriorityGrouping+0x44>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ffa:	4a04      	ldr	r2, [pc, #16]	; (800500c <__NVIC_SetPriorityGrouping+0x40>)
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	60d3      	str	r3, [r2, #12]
}
 8005000:	bf00      	nop
 8005002:	3714      	adds	r7, #20
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	e000ed00 	.word	0xe000ed00
 8005010:	05fa0000 	.word	0x05fa0000

08005014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005014:	b480      	push	{r7}
 8005016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005018:	4b04      	ldr	r3, [pc, #16]	; (800502c <__NVIC_GetPriorityGrouping+0x18>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	0a1b      	lsrs	r3, r3, #8
 800501e:	f003 0307 	and.w	r3, r3, #7
}
 8005022:	4618      	mov	r0, r3
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	e000ed00 	.word	0xe000ed00

08005030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
 8005036:	4603      	mov	r3, r0
 8005038:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800503a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800503e:	2b00      	cmp	r3, #0
 8005040:	db0b      	blt.n	800505a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005042:	88fb      	ldrh	r3, [r7, #6]
 8005044:	f003 021f 	and.w	r2, r3, #31
 8005048:	4907      	ldr	r1, [pc, #28]	; (8005068 <__NVIC_EnableIRQ+0x38>)
 800504a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800504e:	095b      	lsrs	r3, r3, #5
 8005050:	2001      	movs	r0, #1
 8005052:	fa00 f202 	lsl.w	r2, r0, r2
 8005056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800505a:	bf00      	nop
 800505c:	370c      	adds	r7, #12
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	e000e100 	.word	0xe000e100

0800506c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	6039      	str	r1, [r7, #0]
 8005076:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005078:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800507c:	2b00      	cmp	r3, #0
 800507e:	db0a      	blt.n	8005096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	490c      	ldr	r1, [pc, #48]	; (80050b8 <__NVIC_SetPriority+0x4c>)
 8005086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800508a:	0112      	lsls	r2, r2, #4
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	440b      	add	r3, r1
 8005090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005094:	e00a      	b.n	80050ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	4908      	ldr	r1, [pc, #32]	; (80050bc <__NVIC_SetPriority+0x50>)
 800509c:	88fb      	ldrh	r3, [r7, #6]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	3b04      	subs	r3, #4
 80050a4:	0112      	lsls	r2, r2, #4
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	440b      	add	r3, r1
 80050aa:	761a      	strb	r2, [r3, #24]
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	e000e100 	.word	0xe000e100
 80050bc:	e000ed00 	.word	0xe000ed00

080050c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b089      	sub	sp, #36	; 0x24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	f1c3 0307 	rsb	r3, r3, #7
 80050da:	2b04      	cmp	r3, #4
 80050dc:	bf28      	it	cs
 80050de:	2304      	movcs	r3, #4
 80050e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	3304      	adds	r3, #4
 80050e6:	2b06      	cmp	r3, #6
 80050e8:	d902      	bls.n	80050f0 <NVIC_EncodePriority+0x30>
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3b03      	subs	r3, #3
 80050ee:	e000      	b.n	80050f2 <NVIC_EncodePriority+0x32>
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050f4:	f04f 32ff 	mov.w	r2, #4294967295
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	43da      	mvns	r2, r3
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	401a      	ands	r2, r3
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005108:	f04f 31ff 	mov.w	r1, #4294967295
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	43d9      	mvns	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005118:	4313      	orrs	r3, r2
         );
}
 800511a:	4618      	mov	r0, r3
 800511c:	3724      	adds	r7, #36	; 0x24
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
	...

08005128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3b01      	subs	r3, #1
 8005134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005138:	d301      	bcc.n	800513e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800513a:	2301      	movs	r3, #1
 800513c:	e00f      	b.n	800515e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <SysTick_Config+0x40>)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3b01      	subs	r3, #1
 8005144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005146:	210f      	movs	r1, #15
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	f7ff ff8e 	bl	800506c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <SysTick_Config+0x40>)
 8005152:	2200      	movs	r2, #0
 8005154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005156:	4b04      	ldr	r3, [pc, #16]	; (8005168 <SysTick_Config+0x40>)
 8005158:	2207      	movs	r2, #7
 800515a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	e000e010 	.word	0xe000e010

0800516c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff ff29 	bl	8004fcc <__NVIC_SetPriorityGrouping>
}
 800517a:	bf00      	nop
 800517c:	3708      	adds	r7, #8
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b086      	sub	sp, #24
 8005186:	af00      	add	r7, sp, #0
 8005188:	4603      	mov	r3, r0
 800518a:	60b9      	str	r1, [r7, #8]
 800518c:	607a      	str	r2, [r7, #4]
 800518e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005190:	f7ff ff40 	bl	8005014 <__NVIC_GetPriorityGrouping>
 8005194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	68b9      	ldr	r1, [r7, #8]
 800519a:	6978      	ldr	r0, [r7, #20]
 800519c:	f7ff ff90 	bl	80050c0 <NVIC_EncodePriority>
 80051a0:	4602      	mov	r2, r0
 80051a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051a6:	4611      	mov	r1, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff ff5f 	bl	800506c <__NVIC_SetPriority>
}
 80051ae:	bf00      	nop
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	4603      	mov	r3, r0
 80051be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7ff ff33 	bl	8005030 <__NVIC_EnableIRQ>
}
 80051ca:	bf00      	nop
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b082      	sub	sp, #8
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff ffa4 	bl	8005128 <SysTick_Config>
 80051e0:	4603      	mov	r3, r0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
	...

080051ec <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e054      	b.n	80052a8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	7f5b      	ldrb	r3, [r3, #29]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d105      	bne.n	8005214 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fc ff38 	bl	8002084 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	791b      	ldrb	r3, [r3, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10c      	bne.n	800523c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a22      	ldr	r2, [pc, #136]	; (80052b0 <HAL_CRC_Init+0xc4>)
 8005228:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0218 	bic.w	r2, r2, #24
 8005238:	609a      	str	r2, [r3, #8]
 800523a:	e00c      	b.n	8005256 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6899      	ldr	r1, [r3, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	461a      	mov	r2, r3
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f948 	bl	80054dc <HAL_CRCEx_Polynomial_Set>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e028      	b.n	80052a8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	795b      	ldrb	r3, [r3, #5]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d105      	bne.n	800526a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f04f 32ff 	mov.w	r2, #4294967295
 8005266:	611a      	str	r2, [r3, #16]
 8005268:	e004      	b.n	8005274 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6912      	ldr	r2, [r2, #16]
 8005272:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	04c11db7 	.word	0x04c11db7

080052b4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80052c0:	2300      	movs	r3, #0
 80052c2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2202      	movs	r2, #2
 80052c8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d006      	beq.n	80052f0 <HAL_CRC_Calculate+0x3c>
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d829      	bhi.n	800533a <HAL_CRC_Calculate+0x86>
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d019      	beq.n	800531e <HAL_CRC_Calculate+0x6a>
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d01e      	beq.n	800532c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80052ee:	e024      	b.n	800533a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]
 80052f4:	e00a      	b.n	800530c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	441a      	add	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	3301      	adds	r3, #1
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	429a      	cmp	r2, r3
 8005312:	d3f0      	bcc.n	80052f6 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	613b      	str	r3, [r7, #16]
      break;
 800531c:	e00e      	b.n	800533c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f812 	bl	800534c <CRC_Handle_8>
 8005328:	6138      	str	r0, [r7, #16]
      break;
 800532a:	e007      	b.n	800533c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	68b9      	ldr	r1, [r7, #8]
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f899 	bl	8005468 <CRC_Handle_16>
 8005336:	6138      	str	r0, [r7, #16]
      break;
 8005338:	e000      	b.n	800533c <HAL_CRC_Calculate+0x88>
      break;
 800533a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005342:	693b      	ldr	r3, [r7, #16]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3718      	adds	r7, #24
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800534c:	b480      	push	{r7}
 800534e:	b089      	sub	sp, #36	; 0x24
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005358:	2300      	movs	r3, #0
 800535a:	61fb      	str	r3, [r7, #28]
 800535c:	e023      	b.n	80053a6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	68ba      	ldr	r2, [r7, #8]
 8005364:	4413      	add	r3, r2
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	3301      	adds	r3, #1
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	440b      	add	r3, r1
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005378:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	3302      	adds	r3, #2
 8005380:	68b9      	ldr	r1, [r7, #8]
 8005382:	440b      	add	r3, r1
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005388:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	3303      	adds	r3, #3
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	440b      	add	r3, r1
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800539c:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800539e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	089b      	lsrs	r3, r3, #2
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d3d6      	bcc.n	800535e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d04d      	beq.n	8005456 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f003 0303 	and.w	r3, r3, #3
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d107      	bne.n	80053d4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	4413      	add	r3, r2
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d116      	bne.n	800540c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	68ba      	ldr	r2, [r7, #8]
 80053e4:	4413      	add	r3, r2
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	b21a      	sxth	r2, r3
 80053ec:	69fb      	ldr	r3, [r7, #28]
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	3301      	adds	r3, #1
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	440b      	add	r3, r1
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	b21b      	sxth	r3, r3
 80053fa:	4313      	orrs	r3, r2
 80053fc:	b21b      	sxth	r3, r3
 80053fe:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	8b7a      	ldrh	r2, [r7, #26]
 800540a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f003 0303 	and.w	r3, r3, #3
 8005412:	2b03      	cmp	r3, #3
 8005414:	d11f      	bne.n	8005456 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4413      	add	r3, r2
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	b21a      	sxth	r2, r3
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	3301      	adds	r3, #1
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	440b      	add	r3, r1
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	b21b      	sxth	r3, r3
 8005432:	4313      	orrs	r3, r2
 8005434:	b21b      	sxth	r3, r3
 8005436:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	8b7a      	ldrh	r2, [r7, #26]
 8005442:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	3302      	adds	r3, #2
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4413      	add	r3, r2
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	6812      	ldr	r2, [r2, #0]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
}
 800545c:	4618      	mov	r0, r3
 800545e:	3724      	adds	r7, #36	; 0x24
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e013      	b.n	80054a2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4413      	add	r3, r2
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	041a      	lsls	r2, r3, #16
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	3302      	adds	r3, #2
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	440b      	add	r3, r1
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	4619      	mov	r1, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	3301      	adds	r3, #1
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	085b      	lsrs	r3, r3, #1
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d3e6      	bcc.n	800547a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d009      	beq.n	80054ca <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4413      	add	r3, r2
 80054c4:	881a      	ldrh	r2, [r3, #0]
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	60f8      	str	r0, [r7, #12]
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80054ec:	231f      	movs	r3, #31
 80054ee:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80054f0:	bf00      	nop
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	1e5a      	subs	r2, r3, #1
 80054f6:	613a      	str	r2, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <HAL_CRCEx_Polynomial_Set+0x34>
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f003 031f 	and.w	r3, r3, #31
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	fa22 f303 	lsr.w	r3, r2, r3
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0f0      	beq.n	80054f2 <HAL_CRCEx_Polynomial_Set+0x16>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b18      	cmp	r3, #24
 8005514:	d846      	bhi.n	80055a4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005516:	a201      	add	r2, pc, #4	; (adr r2, 800551c <HAL_CRCEx_Polynomial_Set+0x40>)
 8005518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551c:	080055ab 	.word	0x080055ab
 8005520:	080055a5 	.word	0x080055a5
 8005524:	080055a5 	.word	0x080055a5
 8005528:	080055a5 	.word	0x080055a5
 800552c:	080055a5 	.word	0x080055a5
 8005530:	080055a5 	.word	0x080055a5
 8005534:	080055a5 	.word	0x080055a5
 8005538:	080055a5 	.word	0x080055a5
 800553c:	08005599 	.word	0x08005599
 8005540:	080055a5 	.word	0x080055a5
 8005544:	080055a5 	.word	0x080055a5
 8005548:	080055a5 	.word	0x080055a5
 800554c:	080055a5 	.word	0x080055a5
 8005550:	080055a5 	.word	0x080055a5
 8005554:	080055a5 	.word	0x080055a5
 8005558:	080055a5 	.word	0x080055a5
 800555c:	0800558d 	.word	0x0800558d
 8005560:	080055a5 	.word	0x080055a5
 8005564:	080055a5 	.word	0x080055a5
 8005568:	080055a5 	.word	0x080055a5
 800556c:	080055a5 	.word	0x080055a5
 8005570:	080055a5 	.word	0x080055a5
 8005574:	080055a5 	.word	0x080055a5
 8005578:	080055a5 	.word	0x080055a5
 800557c:	08005581 	.word	0x08005581
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2b06      	cmp	r3, #6
 8005584:	d913      	bls.n	80055ae <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800558a:	e010      	b.n	80055ae <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	2b07      	cmp	r3, #7
 8005590:	d90f      	bls.n	80055b2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005596:	e00c      	b.n	80055b2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b0f      	cmp	r3, #15
 800559c:	d90b      	bls.n	80055b6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80055a2:	e008      	b.n	80055b6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	75fb      	strb	r3, [r7, #23]
      break;
 80055a8:	e006      	b.n	80055b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80055aa:	bf00      	nop
 80055ac:	e004      	b.n	80055b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80055ae:	bf00      	nop
 80055b0:	e002      	b.n	80055b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80055b6:	bf00      	nop
  }
  if (status == HAL_OK)
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10d      	bne.n	80055da <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f023 0118 	bic.w	r1, r3, #24
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80055da:	7dfb      	ldrb	r3, [r7, #23]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80055f0:	f7fd fc78 	bl	8002ee4 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d101      	bne.n	8005600 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e314      	b.n	8005c2a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a66      	ldr	r2, [pc, #408]	; (80057a0 <HAL_DMA_Init+0x1b8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d04a      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a65      	ldr	r2, [pc, #404]	; (80057a4 <HAL_DMA_Init+0x1bc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d045      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a63      	ldr	r2, [pc, #396]	; (80057a8 <HAL_DMA_Init+0x1c0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d040      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a62      	ldr	r2, [pc, #392]	; (80057ac <HAL_DMA_Init+0x1c4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d03b      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a60      	ldr	r2, [pc, #384]	; (80057b0 <HAL_DMA_Init+0x1c8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d036      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a5f      	ldr	r2, [pc, #380]	; (80057b4 <HAL_DMA_Init+0x1cc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d031      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a5d      	ldr	r2, [pc, #372]	; (80057b8 <HAL_DMA_Init+0x1d0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d02c      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a5c      	ldr	r2, [pc, #368]	; (80057bc <HAL_DMA_Init+0x1d4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d027      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a5a      	ldr	r2, [pc, #360]	; (80057c0 <HAL_DMA_Init+0x1d8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d022      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a59      	ldr	r2, [pc, #356]	; (80057c4 <HAL_DMA_Init+0x1dc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d01d      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a57      	ldr	r2, [pc, #348]	; (80057c8 <HAL_DMA_Init+0x1e0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d018      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a56      	ldr	r2, [pc, #344]	; (80057cc <HAL_DMA_Init+0x1e4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d013      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a54      	ldr	r2, [pc, #336]	; (80057d0 <HAL_DMA_Init+0x1e8>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00e      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a53      	ldr	r2, [pc, #332]	; (80057d4 <HAL_DMA_Init+0x1ec>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d009      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a51      	ldr	r2, [pc, #324]	; (80057d8 <HAL_DMA_Init+0x1f0>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d004      	beq.n	80056a0 <HAL_DMA_Init+0xb8>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a50      	ldr	r2, [pc, #320]	; (80057dc <HAL_DMA_Init+0x1f4>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d101      	bne.n	80056a4 <HAL_DMA_Init+0xbc>
 80056a0:	2301      	movs	r3, #1
 80056a2:	e000      	b.n	80056a6 <HAL_DMA_Init+0xbe>
 80056a4:	2300      	movs	r3, #0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 813c 	beq.w	8005924 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a37      	ldr	r2, [pc, #220]	; (80057a0 <HAL_DMA_Init+0x1b8>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d04a      	beq.n	800575c <HAL_DMA_Init+0x174>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a36      	ldr	r2, [pc, #216]	; (80057a4 <HAL_DMA_Init+0x1bc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d045      	beq.n	800575c <HAL_DMA_Init+0x174>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a34      	ldr	r2, [pc, #208]	; (80057a8 <HAL_DMA_Init+0x1c0>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d040      	beq.n	800575c <HAL_DMA_Init+0x174>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a33      	ldr	r2, [pc, #204]	; (80057ac <HAL_DMA_Init+0x1c4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d03b      	beq.n	800575c <HAL_DMA_Init+0x174>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a31      	ldr	r2, [pc, #196]	; (80057b0 <HAL_DMA_Init+0x1c8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d036      	beq.n	800575c <HAL_DMA_Init+0x174>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a30      	ldr	r2, [pc, #192]	; (80057b4 <HAL_DMA_Init+0x1cc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d031      	beq.n	800575c <HAL_DMA_Init+0x174>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a2e      	ldr	r2, [pc, #184]	; (80057b8 <HAL_DMA_Init+0x1d0>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d02c      	beq.n	800575c <HAL_DMA_Init+0x174>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a2d      	ldr	r2, [pc, #180]	; (80057bc <HAL_DMA_Init+0x1d4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d027      	beq.n	800575c <HAL_DMA_Init+0x174>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a2b      	ldr	r2, [pc, #172]	; (80057c0 <HAL_DMA_Init+0x1d8>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d022      	beq.n	800575c <HAL_DMA_Init+0x174>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a2a      	ldr	r2, [pc, #168]	; (80057c4 <HAL_DMA_Init+0x1dc>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d01d      	beq.n	800575c <HAL_DMA_Init+0x174>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a28      	ldr	r2, [pc, #160]	; (80057c8 <HAL_DMA_Init+0x1e0>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d018      	beq.n	800575c <HAL_DMA_Init+0x174>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a27      	ldr	r2, [pc, #156]	; (80057cc <HAL_DMA_Init+0x1e4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <HAL_DMA_Init+0x174>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a25      	ldr	r2, [pc, #148]	; (80057d0 <HAL_DMA_Init+0x1e8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00e      	beq.n	800575c <HAL_DMA_Init+0x174>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a24      	ldr	r2, [pc, #144]	; (80057d4 <HAL_DMA_Init+0x1ec>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_DMA_Init+0x174>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a22      	ldr	r2, [pc, #136]	; (80057d8 <HAL_DMA_Init+0x1f0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_DMA_Init+0x174>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a21      	ldr	r2, [pc, #132]	; (80057dc <HAL_DMA_Init+0x1f4>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d108      	bne.n	800576e <HAL_DMA_Init+0x186>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	e007      	b.n	800577e <HAL_DMA_Init+0x196>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 0201 	bic.w	r2, r2, #1
 800577c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800577e:	e02f      	b.n	80057e0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005780:	f7fd fbb0 	bl	8002ee4 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b05      	cmp	r3, #5
 800578c:	d928      	bls.n	80057e0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2220      	movs	r2, #32
 8005792:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2203      	movs	r2, #3
 8005798:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e244      	b.n	8005c2a <HAL_DMA_Init+0x642>
 80057a0:	40020010 	.word	0x40020010
 80057a4:	40020028 	.word	0x40020028
 80057a8:	40020040 	.word	0x40020040
 80057ac:	40020058 	.word	0x40020058
 80057b0:	40020070 	.word	0x40020070
 80057b4:	40020088 	.word	0x40020088
 80057b8:	400200a0 	.word	0x400200a0
 80057bc:	400200b8 	.word	0x400200b8
 80057c0:	40020410 	.word	0x40020410
 80057c4:	40020428 	.word	0x40020428
 80057c8:	40020440 	.word	0x40020440
 80057cc:	40020458 	.word	0x40020458
 80057d0:	40020470 	.word	0x40020470
 80057d4:	40020488 	.word	0x40020488
 80057d8:	400204a0 	.word	0x400204a0
 80057dc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1c8      	bne.n	8005780 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	4b84      	ldr	r3, [pc, #528]	; (8005a0c <HAL_DMA_Init+0x424>)
 80057fa:	4013      	ands	r3, r2
 80057fc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005806:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005812:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800581e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	2b04      	cmp	r3, #4
 8005832:	d107      	bne.n	8005844 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	4313      	orrs	r3, r2
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	2b28      	cmp	r3, #40	; 0x28
 800584a:	d903      	bls.n	8005854 <HAL_DMA_Init+0x26c>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	2b2e      	cmp	r3, #46	; 0x2e
 8005852:	d91f      	bls.n	8005894 <HAL_DMA_Init+0x2ac>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	2b3e      	cmp	r3, #62	; 0x3e
 800585a:	d903      	bls.n	8005864 <HAL_DMA_Init+0x27c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	2b42      	cmp	r3, #66	; 0x42
 8005862:	d917      	bls.n	8005894 <HAL_DMA_Init+0x2ac>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2b46      	cmp	r3, #70	; 0x46
 800586a:	d903      	bls.n	8005874 <HAL_DMA_Init+0x28c>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	2b48      	cmp	r3, #72	; 0x48
 8005872:	d90f      	bls.n	8005894 <HAL_DMA_Init+0x2ac>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	2b4e      	cmp	r3, #78	; 0x4e
 800587a:	d903      	bls.n	8005884 <HAL_DMA_Init+0x29c>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b52      	cmp	r3, #82	; 0x52
 8005882:	d907      	bls.n	8005894 <HAL_DMA_Init+0x2ac>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b73      	cmp	r3, #115	; 0x73
 800588a:	d905      	bls.n	8005898 <HAL_DMA_Init+0x2b0>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2b77      	cmp	r3, #119	; 0x77
 8005892:	d801      	bhi.n	8005898 <HAL_DMA_Init+0x2b0>
 8005894:	2301      	movs	r3, #1
 8005896:	e000      	b.n	800589a <HAL_DMA_Init+0x2b2>
 8005898:	2300      	movs	r3, #0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058a4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f023 0307 	bic.w	r3, r3, #7
 80058bc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d117      	bne.n	8005900 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00e      	beq.n	8005900 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f001 fdcc 	bl	8007480 <DMA_CheckFifoParam>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d008      	beq.n	8005900 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2240      	movs	r2, #64	; 0x40
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e194      	b.n	8005c2a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f001 fd07 	bl	800731c <DMA_CalcBaseAndBitshift>
 800590e:	4603      	mov	r3, r0
 8005910:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	223f      	movs	r2, #63	; 0x3f
 800591c:	409a      	lsls	r2, r3
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	609a      	str	r2, [r3, #8]
 8005922:	e0ca      	b.n	8005aba <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a39      	ldr	r2, [pc, #228]	; (8005a10 <HAL_DMA_Init+0x428>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d022      	beq.n	8005974 <HAL_DMA_Init+0x38c>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a38      	ldr	r2, [pc, #224]	; (8005a14 <HAL_DMA_Init+0x42c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d01d      	beq.n	8005974 <HAL_DMA_Init+0x38c>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a36      	ldr	r2, [pc, #216]	; (8005a18 <HAL_DMA_Init+0x430>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d018      	beq.n	8005974 <HAL_DMA_Init+0x38c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a35      	ldr	r2, [pc, #212]	; (8005a1c <HAL_DMA_Init+0x434>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d013      	beq.n	8005974 <HAL_DMA_Init+0x38c>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a33      	ldr	r2, [pc, #204]	; (8005a20 <HAL_DMA_Init+0x438>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00e      	beq.n	8005974 <HAL_DMA_Init+0x38c>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a32      	ldr	r2, [pc, #200]	; (8005a24 <HAL_DMA_Init+0x43c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d009      	beq.n	8005974 <HAL_DMA_Init+0x38c>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a30      	ldr	r2, [pc, #192]	; (8005a28 <HAL_DMA_Init+0x440>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d004      	beq.n	8005974 <HAL_DMA_Init+0x38c>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a2f      	ldr	r2, [pc, #188]	; (8005a2c <HAL_DMA_Init+0x444>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d101      	bne.n	8005978 <HAL_DMA_Init+0x390>
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <HAL_DMA_Init+0x392>
 8005978:	2300      	movs	r3, #0
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8094 	beq.w	8005aa8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a22      	ldr	r2, [pc, #136]	; (8005a10 <HAL_DMA_Init+0x428>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d021      	beq.n	80059ce <HAL_DMA_Init+0x3e6>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a21      	ldr	r2, [pc, #132]	; (8005a14 <HAL_DMA_Init+0x42c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d01c      	beq.n	80059ce <HAL_DMA_Init+0x3e6>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1f      	ldr	r2, [pc, #124]	; (8005a18 <HAL_DMA_Init+0x430>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d017      	beq.n	80059ce <HAL_DMA_Init+0x3e6>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a1e      	ldr	r2, [pc, #120]	; (8005a1c <HAL_DMA_Init+0x434>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d012      	beq.n	80059ce <HAL_DMA_Init+0x3e6>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a1c      	ldr	r2, [pc, #112]	; (8005a20 <HAL_DMA_Init+0x438>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d00d      	beq.n	80059ce <HAL_DMA_Init+0x3e6>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a1b      	ldr	r2, [pc, #108]	; (8005a24 <HAL_DMA_Init+0x43c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d008      	beq.n	80059ce <HAL_DMA_Init+0x3e6>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a19      	ldr	r2, [pc, #100]	; (8005a28 <HAL_DMA_Init+0x440>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d003      	beq.n	80059ce <HAL_DMA_Init+0x3e6>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a18      	ldr	r2, [pc, #96]	; (8005a2c <HAL_DMA_Init+0x444>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2202      	movs	r2, #2
 80059d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	4b11      	ldr	r3, [pc, #68]	; (8005a30 <HAL_DMA_Init+0x448>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b40      	cmp	r3, #64	; 0x40
 80059f6:	d01d      	beq.n	8005a34 <HAL_DMA_Init+0x44c>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b80      	cmp	r3, #128	; 0x80
 80059fe:	d102      	bne.n	8005a06 <HAL_DMA_Init+0x41e>
 8005a00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a04:	e017      	b.n	8005a36 <HAL_DMA_Init+0x44e>
 8005a06:	2300      	movs	r3, #0
 8005a08:	e015      	b.n	8005a36 <HAL_DMA_Init+0x44e>
 8005a0a:	bf00      	nop
 8005a0c:	fe10803f 	.word	0xfe10803f
 8005a10:	58025408 	.word	0x58025408
 8005a14:	5802541c 	.word	0x5802541c
 8005a18:	58025430 	.word	0x58025430
 8005a1c:	58025444 	.word	0x58025444
 8005a20:	58025458 	.word	0x58025458
 8005a24:	5802546c 	.word	0x5802546c
 8005a28:	58025480 	.word	0x58025480
 8005a2c:	58025494 	.word	0x58025494
 8005a30:	fffe000f 	.word	0xfffe000f
 8005a34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	68d2      	ldr	r2, [r2, #12]
 8005a3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005a44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005a4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005a54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005a5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005a64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4b6e      	ldr	r3, [pc, #440]	; (8005c34 <HAL_DMA_Init+0x64c>)
 8005a7c:	4413      	add	r3, r2
 8005a7e:	4a6e      	ldr	r2, [pc, #440]	; (8005c38 <HAL_DMA_Init+0x650>)
 8005a80:	fba2 2303 	umull	r2, r3, r2, r3
 8005a84:	091b      	lsrs	r3, r3, #4
 8005a86:	009a      	lsls	r2, r3, #2
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f001 fc45 	bl	800731c <DMA_CalcBaseAndBitshift>
 8005a92:	4603      	mov	r3, r0
 8005a94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9a:	f003 031f 	and.w	r3, r3, #31
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	409a      	lsls	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	605a      	str	r2, [r3, #4]
 8005aa6:	e008      	b.n	8005aba <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2240      	movs	r2, #64	; 0x40
 8005aac:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e0b7      	b.n	8005c2a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a5f      	ldr	r2, [pc, #380]	; (8005c3c <HAL_DMA_Init+0x654>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d072      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a5d      	ldr	r2, [pc, #372]	; (8005c40 <HAL_DMA_Init+0x658>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d06d      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a5c      	ldr	r2, [pc, #368]	; (8005c44 <HAL_DMA_Init+0x65c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d068      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a5a      	ldr	r2, [pc, #360]	; (8005c48 <HAL_DMA_Init+0x660>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d063      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a59      	ldr	r2, [pc, #356]	; (8005c4c <HAL_DMA_Init+0x664>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d05e      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a57      	ldr	r2, [pc, #348]	; (8005c50 <HAL_DMA_Init+0x668>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d059      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a56      	ldr	r2, [pc, #344]	; (8005c54 <HAL_DMA_Init+0x66c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d054      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a54      	ldr	r2, [pc, #336]	; (8005c58 <HAL_DMA_Init+0x670>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d04f      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a53      	ldr	r2, [pc, #332]	; (8005c5c <HAL_DMA_Init+0x674>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d04a      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a51      	ldr	r2, [pc, #324]	; (8005c60 <HAL_DMA_Init+0x678>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d045      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a50      	ldr	r2, [pc, #320]	; (8005c64 <HAL_DMA_Init+0x67c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d040      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a4e      	ldr	r2, [pc, #312]	; (8005c68 <HAL_DMA_Init+0x680>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d03b      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a4d      	ldr	r2, [pc, #308]	; (8005c6c <HAL_DMA_Init+0x684>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d036      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a4b      	ldr	r2, [pc, #300]	; (8005c70 <HAL_DMA_Init+0x688>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d031      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a4a      	ldr	r2, [pc, #296]	; (8005c74 <HAL_DMA_Init+0x68c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d02c      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a48      	ldr	r2, [pc, #288]	; (8005c78 <HAL_DMA_Init+0x690>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d027      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a47      	ldr	r2, [pc, #284]	; (8005c7c <HAL_DMA_Init+0x694>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d022      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a45      	ldr	r2, [pc, #276]	; (8005c80 <HAL_DMA_Init+0x698>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01d      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a44      	ldr	r2, [pc, #272]	; (8005c84 <HAL_DMA_Init+0x69c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d018      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a42      	ldr	r2, [pc, #264]	; (8005c88 <HAL_DMA_Init+0x6a0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a41      	ldr	r2, [pc, #260]	; (8005c8c <HAL_DMA_Init+0x6a4>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a3f      	ldr	r2, [pc, #252]	; (8005c90 <HAL_DMA_Init+0x6a8>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a3e      	ldr	r2, [pc, #248]	; (8005c94 <HAL_DMA_Init+0x6ac>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_DMA_Init+0x5c2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a3c      	ldr	r2, [pc, #240]	; (8005c98 <HAL_DMA_Init+0x6b0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <HAL_DMA_Init+0x5c6>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <HAL_DMA_Init+0x5c8>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d032      	beq.n	8005c1a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 fcdf 	bl	8007578 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	2b80      	cmp	r3, #128	; 0x80
 8005bc0:	d102      	bne.n	8005bc8 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685a      	ldr	r2, [r3, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bdc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d010      	beq.n	8005c08 <HAL_DMA_Init+0x620>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2b08      	cmp	r3, #8
 8005bec:	d80c      	bhi.n	8005c08 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f001 fd5c 	bl	80076ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c04:	605a      	str	r2, [r3, #4]
 8005c06:	e008      	b.n	8005c1a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	a7fdabf8 	.word	0xa7fdabf8
 8005c38:	cccccccd 	.word	0xcccccccd
 8005c3c:	40020010 	.word	0x40020010
 8005c40:	40020028 	.word	0x40020028
 8005c44:	40020040 	.word	0x40020040
 8005c48:	40020058 	.word	0x40020058
 8005c4c:	40020070 	.word	0x40020070
 8005c50:	40020088 	.word	0x40020088
 8005c54:	400200a0 	.word	0x400200a0
 8005c58:	400200b8 	.word	0x400200b8
 8005c5c:	40020410 	.word	0x40020410
 8005c60:	40020428 	.word	0x40020428
 8005c64:	40020440 	.word	0x40020440
 8005c68:	40020458 	.word	0x40020458
 8005c6c:	40020470 	.word	0x40020470
 8005c70:	40020488 	.word	0x40020488
 8005c74:	400204a0 	.word	0x400204a0
 8005c78:	400204b8 	.word	0x400204b8
 8005c7c:	58025408 	.word	0x58025408
 8005c80:	5802541c 	.word	0x5802541c
 8005c84:	58025430 	.word	0x58025430
 8005c88:	58025444 	.word	0x58025444
 8005c8c:	58025458 	.word	0x58025458
 8005c90:	5802546c 	.word	0x5802546c
 8005c94:	58025480 	.word	0x58025480
 8005c98:	58025494 	.word	0x58025494

08005c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e226      	b.n	8006106 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_DMA_Start_IT+0x2a>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e21f      	b.n	8006106 <HAL_DMA_Start_IT+0x46a>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	f040 820a 	bne.w	80060f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a68      	ldr	r2, [pc, #416]	; (8005e90 <HAL_DMA_Start_IT+0x1f4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d04a      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a66      	ldr	r2, [pc, #408]	; (8005e94 <HAL_DMA_Start_IT+0x1f8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d045      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a65      	ldr	r2, [pc, #404]	; (8005e98 <HAL_DMA_Start_IT+0x1fc>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d040      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a63      	ldr	r2, [pc, #396]	; (8005e9c <HAL_DMA_Start_IT+0x200>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d03b      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a62      	ldr	r2, [pc, #392]	; (8005ea0 <HAL_DMA_Start_IT+0x204>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d036      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a60      	ldr	r2, [pc, #384]	; (8005ea4 <HAL_DMA_Start_IT+0x208>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d031      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a5f      	ldr	r2, [pc, #380]	; (8005ea8 <HAL_DMA_Start_IT+0x20c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d02c      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a5d      	ldr	r2, [pc, #372]	; (8005eac <HAL_DMA_Start_IT+0x210>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d027      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a5c      	ldr	r2, [pc, #368]	; (8005eb0 <HAL_DMA_Start_IT+0x214>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a5a      	ldr	r2, [pc, #360]	; (8005eb4 <HAL_DMA_Start_IT+0x218>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01d      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a59      	ldr	r2, [pc, #356]	; (8005eb8 <HAL_DMA_Start_IT+0x21c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a57      	ldr	r2, [pc, #348]	; (8005ebc <HAL_DMA_Start_IT+0x220>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a56      	ldr	r2, [pc, #344]	; (8005ec0 <HAL_DMA_Start_IT+0x224>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a54      	ldr	r2, [pc, #336]	; (8005ec4 <HAL_DMA_Start_IT+0x228>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a53      	ldr	r2, [pc, #332]	; (8005ec8 <HAL_DMA_Start_IT+0x22c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_DMA_Start_IT+0xee>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a51      	ldr	r2, [pc, #324]	; (8005ecc <HAL_DMA_Start_IT+0x230>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d108      	bne.n	8005d9c <HAL_DMA_Start_IT+0x100>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0201 	bic.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	e007      	b.n	8005dac <HAL_DMA_Start_IT+0x110>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0201 	bic.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68b9      	ldr	r1, [r7, #8]
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f001 f906 	bl	8006fc4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a34      	ldr	r2, [pc, #208]	; (8005e90 <HAL_DMA_Start_IT+0x1f4>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d04a      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a33      	ldr	r2, [pc, #204]	; (8005e94 <HAL_DMA_Start_IT+0x1f8>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d045      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a31      	ldr	r2, [pc, #196]	; (8005e98 <HAL_DMA_Start_IT+0x1fc>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d040      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a30      	ldr	r2, [pc, #192]	; (8005e9c <HAL_DMA_Start_IT+0x200>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d03b      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a2e      	ldr	r2, [pc, #184]	; (8005ea0 <HAL_DMA_Start_IT+0x204>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d036      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2d      	ldr	r2, [pc, #180]	; (8005ea4 <HAL_DMA_Start_IT+0x208>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d031      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a2b      	ldr	r2, [pc, #172]	; (8005ea8 <HAL_DMA_Start_IT+0x20c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d02c      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a2a      	ldr	r2, [pc, #168]	; (8005eac <HAL_DMA_Start_IT+0x210>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d027      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a28      	ldr	r2, [pc, #160]	; (8005eb0 <HAL_DMA_Start_IT+0x214>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d022      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a27      	ldr	r2, [pc, #156]	; (8005eb4 <HAL_DMA_Start_IT+0x218>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d01d      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a25      	ldr	r2, [pc, #148]	; (8005eb8 <HAL_DMA_Start_IT+0x21c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d018      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a24      	ldr	r2, [pc, #144]	; (8005ebc <HAL_DMA_Start_IT+0x220>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d013      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a22      	ldr	r2, [pc, #136]	; (8005ec0 <HAL_DMA_Start_IT+0x224>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d00e      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a21      	ldr	r2, [pc, #132]	; (8005ec4 <HAL_DMA_Start_IT+0x228>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1f      	ldr	r2, [pc, #124]	; (8005ec8 <HAL_DMA_Start_IT+0x22c>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_DMA_Start_IT+0x1bc>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1e      	ldr	r2, [pc, #120]	; (8005ecc <HAL_DMA_Start_IT+0x230>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d101      	bne.n	8005e5c <HAL_DMA_Start_IT+0x1c0>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <HAL_DMA_Start_IT+0x1c2>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d036      	beq.n	8005ed0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f023 021e 	bic.w	r2, r3, #30
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f042 0216 	orr.w	r2, r2, #22
 8005e74:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d03e      	beq.n	8005efc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0208 	orr.w	r2, r2, #8
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e035      	b.n	8005efc <HAL_DMA_Start_IT+0x260>
 8005e90:	40020010 	.word	0x40020010
 8005e94:	40020028 	.word	0x40020028
 8005e98:	40020040 	.word	0x40020040
 8005e9c:	40020058 	.word	0x40020058
 8005ea0:	40020070 	.word	0x40020070
 8005ea4:	40020088 	.word	0x40020088
 8005ea8:	400200a0 	.word	0x400200a0
 8005eac:	400200b8 	.word	0x400200b8
 8005eb0:	40020410 	.word	0x40020410
 8005eb4:	40020428 	.word	0x40020428
 8005eb8:	40020440 	.word	0x40020440
 8005ebc:	40020458 	.word	0x40020458
 8005ec0:	40020470 	.word	0x40020470
 8005ec4:	40020488 	.word	0x40020488
 8005ec8:	400204a0 	.word	0x400204a0
 8005ecc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f023 020e 	bic.w	r2, r3, #14
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f042 020a 	orr.w	r2, r2, #10
 8005ee2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d007      	beq.n	8005efc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0204 	orr.w	r2, r2, #4
 8005efa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a83      	ldr	r2, [pc, #524]	; (8006110 <HAL_DMA_Start_IT+0x474>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d072      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a82      	ldr	r2, [pc, #520]	; (8006114 <HAL_DMA_Start_IT+0x478>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d06d      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a80      	ldr	r2, [pc, #512]	; (8006118 <HAL_DMA_Start_IT+0x47c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d068      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a7f      	ldr	r2, [pc, #508]	; (800611c <HAL_DMA_Start_IT+0x480>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d063      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a7d      	ldr	r2, [pc, #500]	; (8006120 <HAL_DMA_Start_IT+0x484>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d05e      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a7c      	ldr	r2, [pc, #496]	; (8006124 <HAL_DMA_Start_IT+0x488>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d059      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a7a      	ldr	r2, [pc, #488]	; (8006128 <HAL_DMA_Start_IT+0x48c>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d054      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a79      	ldr	r2, [pc, #484]	; (800612c <HAL_DMA_Start_IT+0x490>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d04f      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a77      	ldr	r2, [pc, #476]	; (8006130 <HAL_DMA_Start_IT+0x494>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d04a      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a76      	ldr	r2, [pc, #472]	; (8006134 <HAL_DMA_Start_IT+0x498>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d045      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a74      	ldr	r2, [pc, #464]	; (8006138 <HAL_DMA_Start_IT+0x49c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d040      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a73      	ldr	r2, [pc, #460]	; (800613c <HAL_DMA_Start_IT+0x4a0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d03b      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a71      	ldr	r2, [pc, #452]	; (8006140 <HAL_DMA_Start_IT+0x4a4>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d036      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a70      	ldr	r2, [pc, #448]	; (8006144 <HAL_DMA_Start_IT+0x4a8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d031      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a6e      	ldr	r2, [pc, #440]	; (8006148 <HAL_DMA_Start_IT+0x4ac>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d02c      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a6d      	ldr	r2, [pc, #436]	; (800614c <HAL_DMA_Start_IT+0x4b0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d027      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a6b      	ldr	r2, [pc, #428]	; (8006150 <HAL_DMA_Start_IT+0x4b4>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d022      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a6a      	ldr	r2, [pc, #424]	; (8006154 <HAL_DMA_Start_IT+0x4b8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d01d      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a68      	ldr	r2, [pc, #416]	; (8006158 <HAL_DMA_Start_IT+0x4bc>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d018      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a67      	ldr	r2, [pc, #412]	; (800615c <HAL_DMA_Start_IT+0x4c0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a65      	ldr	r2, [pc, #404]	; (8006160 <HAL_DMA_Start_IT+0x4c4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00e      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a64      	ldr	r2, [pc, #400]	; (8006164 <HAL_DMA_Start_IT+0x4c8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a62      	ldr	r2, [pc, #392]	; (8006168 <HAL_DMA_Start_IT+0x4cc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_DMA_Start_IT+0x350>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a61      	ldr	r2, [pc, #388]	; (800616c <HAL_DMA_Start_IT+0x4d0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d101      	bne.n	8005ff0 <HAL_DMA_Start_IT+0x354>
 8005fec:	2301      	movs	r3, #1
 8005fee:	e000      	b.n	8005ff2 <HAL_DMA_Start_IT+0x356>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01a      	beq.n	800602c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d007      	beq.n	8006014 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006012:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800602a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a37      	ldr	r2, [pc, #220]	; (8006110 <HAL_DMA_Start_IT+0x474>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d04a      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a36      	ldr	r2, [pc, #216]	; (8006114 <HAL_DMA_Start_IT+0x478>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d045      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a34      	ldr	r2, [pc, #208]	; (8006118 <HAL_DMA_Start_IT+0x47c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d040      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a33      	ldr	r2, [pc, #204]	; (800611c <HAL_DMA_Start_IT+0x480>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d03b      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a31      	ldr	r2, [pc, #196]	; (8006120 <HAL_DMA_Start_IT+0x484>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d036      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a30      	ldr	r2, [pc, #192]	; (8006124 <HAL_DMA_Start_IT+0x488>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d031      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2e      	ldr	r2, [pc, #184]	; (8006128 <HAL_DMA_Start_IT+0x48c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d02c      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a2d      	ldr	r2, [pc, #180]	; (800612c <HAL_DMA_Start_IT+0x490>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d027      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a2b      	ldr	r2, [pc, #172]	; (8006130 <HAL_DMA_Start_IT+0x494>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d022      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a2a      	ldr	r2, [pc, #168]	; (8006134 <HAL_DMA_Start_IT+0x498>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d01d      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a28      	ldr	r2, [pc, #160]	; (8006138 <HAL_DMA_Start_IT+0x49c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d018      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a27      	ldr	r2, [pc, #156]	; (800613c <HAL_DMA_Start_IT+0x4a0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a25      	ldr	r2, [pc, #148]	; (8006140 <HAL_DMA_Start_IT+0x4a4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d00e      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a24      	ldr	r2, [pc, #144]	; (8006144 <HAL_DMA_Start_IT+0x4a8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d009      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a22      	ldr	r2, [pc, #136]	; (8006148 <HAL_DMA_Start_IT+0x4ac>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d004      	beq.n	80060cc <HAL_DMA_Start_IT+0x430>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a21      	ldr	r2, [pc, #132]	; (800614c <HAL_DMA_Start_IT+0x4b0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d108      	bne.n	80060de <HAL_DMA_Start_IT+0x442>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	601a      	str	r2, [r3, #0]
 80060dc:	e012      	b.n	8006104 <HAL_DMA_Start_IT+0x468>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
 80060ee:	e009      	b.n	8006104 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006104:	7dfb      	ldrb	r3, [r7, #23]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	40020010 	.word	0x40020010
 8006114:	40020028 	.word	0x40020028
 8006118:	40020040 	.word	0x40020040
 800611c:	40020058 	.word	0x40020058
 8006120:	40020070 	.word	0x40020070
 8006124:	40020088 	.word	0x40020088
 8006128:	400200a0 	.word	0x400200a0
 800612c:	400200b8 	.word	0x400200b8
 8006130:	40020410 	.word	0x40020410
 8006134:	40020428 	.word	0x40020428
 8006138:	40020440 	.word	0x40020440
 800613c:	40020458 	.word	0x40020458
 8006140:	40020470 	.word	0x40020470
 8006144:	40020488 	.word	0x40020488
 8006148:	400204a0 	.word	0x400204a0
 800614c:	400204b8 	.word	0x400204b8
 8006150:	58025408 	.word	0x58025408
 8006154:	5802541c 	.word	0x5802541c
 8006158:	58025430 	.word	0x58025430
 800615c:	58025444 	.word	0x58025444
 8006160:	58025458 	.word	0x58025458
 8006164:	5802546c 	.word	0x5802546c
 8006168:	58025480 	.word	0x58025480
 800616c:	58025494 	.word	0x58025494

08006170 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800617c:	4b67      	ldr	r3, [pc, #412]	; (800631c <HAL_DMA_IRQHandler+0x1ac>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a67      	ldr	r2, [pc, #412]	; (8006320 <HAL_DMA_IRQHandler+0x1b0>)
 8006182:	fba2 2303 	umull	r2, r3, r2, r3
 8006186:	0a9b      	lsrs	r3, r3, #10
 8006188:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006194:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a5f      	ldr	r2, [pc, #380]	; (8006324 <HAL_DMA_IRQHandler+0x1b4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d04a      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a5d      	ldr	r2, [pc, #372]	; (8006328 <HAL_DMA_IRQHandler+0x1b8>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d045      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a5c      	ldr	r2, [pc, #368]	; (800632c <HAL_DMA_IRQHandler+0x1bc>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d040      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a5a      	ldr	r2, [pc, #360]	; (8006330 <HAL_DMA_IRQHandler+0x1c0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d03b      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a59      	ldr	r2, [pc, #356]	; (8006334 <HAL_DMA_IRQHandler+0x1c4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d036      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a57      	ldr	r2, [pc, #348]	; (8006338 <HAL_DMA_IRQHandler+0x1c8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d031      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a56      	ldr	r2, [pc, #344]	; (800633c <HAL_DMA_IRQHandler+0x1cc>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d02c      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a54      	ldr	r2, [pc, #336]	; (8006340 <HAL_DMA_IRQHandler+0x1d0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d027      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a53      	ldr	r2, [pc, #332]	; (8006344 <HAL_DMA_IRQHandler+0x1d4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d022      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a51      	ldr	r2, [pc, #324]	; (8006348 <HAL_DMA_IRQHandler+0x1d8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d01d      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a50      	ldr	r2, [pc, #320]	; (800634c <HAL_DMA_IRQHandler+0x1dc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d018      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a4e      	ldr	r2, [pc, #312]	; (8006350 <HAL_DMA_IRQHandler+0x1e0>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d013      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a4d      	ldr	r2, [pc, #308]	; (8006354 <HAL_DMA_IRQHandler+0x1e4>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00e      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a4b      	ldr	r2, [pc, #300]	; (8006358 <HAL_DMA_IRQHandler+0x1e8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d009      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a4a      	ldr	r2, [pc, #296]	; (800635c <HAL_DMA_IRQHandler+0x1ec>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d004      	beq.n	8006242 <HAL_DMA_IRQHandler+0xd2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a48      	ldr	r2, [pc, #288]	; (8006360 <HAL_DMA_IRQHandler+0x1f0>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d101      	bne.n	8006246 <HAL_DMA_IRQHandler+0xd6>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <HAL_DMA_IRQHandler+0xd8>
 8006246:	2300      	movs	r3, #0
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 842b 	beq.w	8006aa4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006252:	f003 031f 	and.w	r3, r3, #31
 8006256:	2208      	movs	r2, #8
 8006258:	409a      	lsls	r2, r3
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	4013      	ands	r3, r2
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80a2 	beq.w	80063a8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a2e      	ldr	r2, [pc, #184]	; (8006324 <HAL_DMA_IRQHandler+0x1b4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d04a      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a2d      	ldr	r2, [pc, #180]	; (8006328 <HAL_DMA_IRQHandler+0x1b8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d045      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a2b      	ldr	r2, [pc, #172]	; (800632c <HAL_DMA_IRQHandler+0x1bc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d040      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a2a      	ldr	r2, [pc, #168]	; (8006330 <HAL_DMA_IRQHandler+0x1c0>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d03b      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a28      	ldr	r2, [pc, #160]	; (8006334 <HAL_DMA_IRQHandler+0x1c4>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d036      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a27      	ldr	r2, [pc, #156]	; (8006338 <HAL_DMA_IRQHandler+0x1c8>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d031      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a25      	ldr	r2, [pc, #148]	; (800633c <HAL_DMA_IRQHandler+0x1cc>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d02c      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a24      	ldr	r2, [pc, #144]	; (8006340 <HAL_DMA_IRQHandler+0x1d0>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d027      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a22      	ldr	r2, [pc, #136]	; (8006344 <HAL_DMA_IRQHandler+0x1d4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d022      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a21      	ldr	r2, [pc, #132]	; (8006348 <HAL_DMA_IRQHandler+0x1d8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d01d      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1f      	ldr	r2, [pc, #124]	; (800634c <HAL_DMA_IRQHandler+0x1dc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d018      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1e      	ldr	r2, [pc, #120]	; (8006350 <HAL_DMA_IRQHandler+0x1e0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d013      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1c      	ldr	r2, [pc, #112]	; (8006354 <HAL_DMA_IRQHandler+0x1e4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00e      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1b      	ldr	r2, [pc, #108]	; (8006358 <HAL_DMA_IRQHandler+0x1e8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d009      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a19      	ldr	r2, [pc, #100]	; (800635c <HAL_DMA_IRQHandler+0x1ec>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d004      	beq.n	8006304 <HAL_DMA_IRQHandler+0x194>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a18      	ldr	r2, [pc, #96]	; (8006360 <HAL_DMA_IRQHandler+0x1f0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d12f      	bne.n	8006364 <HAL_DMA_IRQHandler+0x1f4>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	bf14      	ite	ne
 8006312:	2301      	movne	r3, #1
 8006314:	2300      	moveq	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	e02e      	b.n	8006378 <HAL_DMA_IRQHandler+0x208>
 800631a:	bf00      	nop
 800631c:	20000000 	.word	0x20000000
 8006320:	1b4e81b5 	.word	0x1b4e81b5
 8006324:	40020010 	.word	0x40020010
 8006328:	40020028 	.word	0x40020028
 800632c:	40020040 	.word	0x40020040
 8006330:	40020058 	.word	0x40020058
 8006334:	40020070 	.word	0x40020070
 8006338:	40020088 	.word	0x40020088
 800633c:	400200a0 	.word	0x400200a0
 8006340:	400200b8 	.word	0x400200b8
 8006344:	40020410 	.word	0x40020410
 8006348:	40020428 	.word	0x40020428
 800634c:	40020440 	.word	0x40020440
 8006350:	40020458 	.word	0x40020458
 8006354:	40020470 	.word	0x40020470
 8006358:	40020488 	.word	0x40020488
 800635c:	400204a0 	.word	0x400204a0
 8006360:	400204b8 	.word	0x400204b8
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0308 	and.w	r3, r3, #8
 800636e:	2b00      	cmp	r3, #0
 8006370:	bf14      	ite	ne
 8006372:	2301      	movne	r3, #1
 8006374:	2300      	moveq	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d015      	beq.n	80063a8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f022 0204 	bic.w	r2, r2, #4
 800638a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006390:	f003 031f 	and.w	r3, r3, #31
 8006394:	2208      	movs	r2, #8
 8006396:	409a      	lsls	r2, r3
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a0:	f043 0201 	orr.w	r2, r3, #1
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ac:	f003 031f 	and.w	r3, r3, #31
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	fa22 f303 	lsr.w	r3, r2, r3
 80063b6:	f003 0301 	and.w	r3, r3, #1
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d06e      	beq.n	800649c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a69      	ldr	r2, [pc, #420]	; (8006568 <HAL_DMA_IRQHandler+0x3f8>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d04a      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a67      	ldr	r2, [pc, #412]	; (800656c <HAL_DMA_IRQHandler+0x3fc>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d045      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a66      	ldr	r2, [pc, #408]	; (8006570 <HAL_DMA_IRQHandler+0x400>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d040      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a64      	ldr	r2, [pc, #400]	; (8006574 <HAL_DMA_IRQHandler+0x404>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d03b      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a63      	ldr	r2, [pc, #396]	; (8006578 <HAL_DMA_IRQHandler+0x408>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d036      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a61      	ldr	r2, [pc, #388]	; (800657c <HAL_DMA_IRQHandler+0x40c>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d031      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a60      	ldr	r2, [pc, #384]	; (8006580 <HAL_DMA_IRQHandler+0x410>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d02c      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a5e      	ldr	r2, [pc, #376]	; (8006584 <HAL_DMA_IRQHandler+0x414>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d027      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a5d      	ldr	r2, [pc, #372]	; (8006588 <HAL_DMA_IRQHandler+0x418>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d022      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a5b      	ldr	r2, [pc, #364]	; (800658c <HAL_DMA_IRQHandler+0x41c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d01d      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a5a      	ldr	r2, [pc, #360]	; (8006590 <HAL_DMA_IRQHandler+0x420>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d018      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a58      	ldr	r2, [pc, #352]	; (8006594 <HAL_DMA_IRQHandler+0x424>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d013      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a57      	ldr	r2, [pc, #348]	; (8006598 <HAL_DMA_IRQHandler+0x428>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00e      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a55      	ldr	r2, [pc, #340]	; (800659c <HAL_DMA_IRQHandler+0x42c>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d009      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a54      	ldr	r2, [pc, #336]	; (80065a0 <HAL_DMA_IRQHandler+0x430>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d004      	beq.n	800645e <HAL_DMA_IRQHandler+0x2ee>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a52      	ldr	r2, [pc, #328]	; (80065a4 <HAL_DMA_IRQHandler+0x434>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d10a      	bne.n	8006474 <HAL_DMA_IRQHandler+0x304>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006468:	2b00      	cmp	r3, #0
 800646a:	bf14      	ite	ne
 800646c:	2301      	movne	r3, #1
 800646e:	2300      	moveq	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	e003      	b.n	800647c <HAL_DMA_IRQHandler+0x30c>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2300      	movs	r3, #0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00d      	beq.n	800649c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	2201      	movs	r2, #1
 800648a:	409a      	lsls	r2, r3
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006494:	f043 0202 	orr.w	r2, r3, #2
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a0:	f003 031f 	and.w	r3, r3, #31
 80064a4:	2204      	movs	r2, #4
 80064a6:	409a      	lsls	r2, r3
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	4013      	ands	r3, r2
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 808f 	beq.w	80065d0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a2c      	ldr	r2, [pc, #176]	; (8006568 <HAL_DMA_IRQHandler+0x3f8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d04a      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a2a      	ldr	r2, [pc, #168]	; (800656c <HAL_DMA_IRQHandler+0x3fc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d045      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a29      	ldr	r2, [pc, #164]	; (8006570 <HAL_DMA_IRQHandler+0x400>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d040      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a27      	ldr	r2, [pc, #156]	; (8006574 <HAL_DMA_IRQHandler+0x404>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d03b      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a26      	ldr	r2, [pc, #152]	; (8006578 <HAL_DMA_IRQHandler+0x408>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d036      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a24      	ldr	r2, [pc, #144]	; (800657c <HAL_DMA_IRQHandler+0x40c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d031      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a23      	ldr	r2, [pc, #140]	; (8006580 <HAL_DMA_IRQHandler+0x410>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d02c      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a21      	ldr	r2, [pc, #132]	; (8006584 <HAL_DMA_IRQHandler+0x414>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d027      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a20      	ldr	r2, [pc, #128]	; (8006588 <HAL_DMA_IRQHandler+0x418>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d022      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1e      	ldr	r2, [pc, #120]	; (800658c <HAL_DMA_IRQHandler+0x41c>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01d      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1d      	ldr	r2, [pc, #116]	; (8006590 <HAL_DMA_IRQHandler+0x420>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d018      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1b      	ldr	r2, [pc, #108]	; (8006594 <HAL_DMA_IRQHandler+0x424>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d013      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1a      	ldr	r2, [pc, #104]	; (8006598 <HAL_DMA_IRQHandler+0x428>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00e      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a18      	ldr	r2, [pc, #96]	; (800659c <HAL_DMA_IRQHandler+0x42c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d009      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a17      	ldr	r2, [pc, #92]	; (80065a0 <HAL_DMA_IRQHandler+0x430>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d004      	beq.n	8006552 <HAL_DMA_IRQHandler+0x3e2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a15      	ldr	r2, [pc, #84]	; (80065a4 <HAL_DMA_IRQHandler+0x434>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d12a      	bne.n	80065a8 <HAL_DMA_IRQHandler+0x438>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	bf14      	ite	ne
 8006560:	2301      	movne	r3, #1
 8006562:	2300      	moveq	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	e023      	b.n	80065b0 <HAL_DMA_IRQHandler+0x440>
 8006568:	40020010 	.word	0x40020010
 800656c:	40020028 	.word	0x40020028
 8006570:	40020040 	.word	0x40020040
 8006574:	40020058 	.word	0x40020058
 8006578:	40020070 	.word	0x40020070
 800657c:	40020088 	.word	0x40020088
 8006580:	400200a0 	.word	0x400200a0
 8006584:	400200b8 	.word	0x400200b8
 8006588:	40020410 	.word	0x40020410
 800658c:	40020428 	.word	0x40020428
 8006590:	40020440 	.word	0x40020440
 8006594:	40020458 	.word	0x40020458
 8006598:	40020470 	.word	0x40020470
 800659c:	40020488 	.word	0x40020488
 80065a0:	400204a0 	.word	0x400204a0
 80065a4:	400204b8 	.word	0x400204b8
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2300      	movs	r3, #0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00d      	beq.n	80065d0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b8:	f003 031f 	and.w	r3, r3, #31
 80065bc:	2204      	movs	r2, #4
 80065be:	409a      	lsls	r2, r3
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065c8:	f043 0204 	orr.w	r2, r3, #4
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	2210      	movs	r2, #16
 80065da:	409a      	lsls	r2, r3
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	4013      	ands	r3, r2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 80a6 	beq.w	8006732 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a85      	ldr	r2, [pc, #532]	; (8006800 <HAL_DMA_IRQHandler+0x690>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d04a      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a83      	ldr	r2, [pc, #524]	; (8006804 <HAL_DMA_IRQHandler+0x694>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d045      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a82      	ldr	r2, [pc, #520]	; (8006808 <HAL_DMA_IRQHandler+0x698>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d040      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a80      	ldr	r2, [pc, #512]	; (800680c <HAL_DMA_IRQHandler+0x69c>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d03b      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a7f      	ldr	r2, [pc, #508]	; (8006810 <HAL_DMA_IRQHandler+0x6a0>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d036      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a7d      	ldr	r2, [pc, #500]	; (8006814 <HAL_DMA_IRQHandler+0x6a4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d031      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a7c      	ldr	r2, [pc, #496]	; (8006818 <HAL_DMA_IRQHandler+0x6a8>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d02c      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a7a      	ldr	r2, [pc, #488]	; (800681c <HAL_DMA_IRQHandler+0x6ac>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d027      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a79      	ldr	r2, [pc, #484]	; (8006820 <HAL_DMA_IRQHandler+0x6b0>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d022      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a77      	ldr	r2, [pc, #476]	; (8006824 <HAL_DMA_IRQHandler+0x6b4>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d01d      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a76      	ldr	r2, [pc, #472]	; (8006828 <HAL_DMA_IRQHandler+0x6b8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d018      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a74      	ldr	r2, [pc, #464]	; (800682c <HAL_DMA_IRQHandler+0x6bc>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d013      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a73      	ldr	r2, [pc, #460]	; (8006830 <HAL_DMA_IRQHandler+0x6c0>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a71      	ldr	r2, [pc, #452]	; (8006834 <HAL_DMA_IRQHandler+0x6c4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a70      	ldr	r2, [pc, #448]	; (8006838 <HAL_DMA_IRQHandler+0x6c8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_DMA_IRQHandler+0x516>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a6e      	ldr	r2, [pc, #440]	; (800683c <HAL_DMA_IRQHandler+0x6cc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d10a      	bne.n	800669c <HAL_DMA_IRQHandler+0x52c>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b00      	cmp	r3, #0
 8006692:	bf14      	ite	ne
 8006694:	2301      	movne	r3, #1
 8006696:	2300      	moveq	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	e009      	b.n	80066b0 <HAL_DMA_IRQHandler+0x540>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bf14      	ite	ne
 80066aa:	2301      	movne	r3, #1
 80066ac:	2300      	moveq	r3, #0
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d03e      	beq.n	8006732 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	2210      	movs	r2, #16
 80066be:	409a      	lsls	r2, r3
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d018      	beq.n	8006704 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d108      	bne.n	80066f2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d024      	beq.n	8006732 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	4798      	blx	r3
 80066f0:	e01f      	b.n	8006732 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d01b      	beq.n	8006732 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	4798      	blx	r3
 8006702:	e016      	b.n	8006732 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800670e:	2b00      	cmp	r3, #0
 8006710:	d107      	bne.n	8006722 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0208 	bic.w	r2, r2, #8
 8006720:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006736:	f003 031f 	and.w	r3, r3, #31
 800673a:	2220      	movs	r2, #32
 800673c:	409a      	lsls	r2, r3
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	4013      	ands	r3, r2
 8006742:	2b00      	cmp	r3, #0
 8006744:	f000 8110 	beq.w	8006968 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a2c      	ldr	r2, [pc, #176]	; (8006800 <HAL_DMA_IRQHandler+0x690>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d04a      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a2b      	ldr	r2, [pc, #172]	; (8006804 <HAL_DMA_IRQHandler+0x694>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d045      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a29      	ldr	r2, [pc, #164]	; (8006808 <HAL_DMA_IRQHandler+0x698>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d040      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a28      	ldr	r2, [pc, #160]	; (800680c <HAL_DMA_IRQHandler+0x69c>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d03b      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a26      	ldr	r2, [pc, #152]	; (8006810 <HAL_DMA_IRQHandler+0x6a0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d036      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a25      	ldr	r2, [pc, #148]	; (8006814 <HAL_DMA_IRQHandler+0x6a4>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d031      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a23      	ldr	r2, [pc, #140]	; (8006818 <HAL_DMA_IRQHandler+0x6a8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d02c      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a22      	ldr	r2, [pc, #136]	; (800681c <HAL_DMA_IRQHandler+0x6ac>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d027      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a20      	ldr	r2, [pc, #128]	; (8006820 <HAL_DMA_IRQHandler+0x6b0>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d022      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a1f      	ldr	r2, [pc, #124]	; (8006824 <HAL_DMA_IRQHandler+0x6b4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d01d      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a1d      	ldr	r2, [pc, #116]	; (8006828 <HAL_DMA_IRQHandler+0x6b8>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d018      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1c      	ldr	r2, [pc, #112]	; (800682c <HAL_DMA_IRQHandler+0x6bc>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d013      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1a      	ldr	r2, [pc, #104]	; (8006830 <HAL_DMA_IRQHandler+0x6c0>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00e      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a19      	ldr	r2, [pc, #100]	; (8006834 <HAL_DMA_IRQHandler+0x6c4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d009      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a17      	ldr	r2, [pc, #92]	; (8006838 <HAL_DMA_IRQHandler+0x6c8>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d004      	beq.n	80067e8 <HAL_DMA_IRQHandler+0x678>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a16      	ldr	r2, [pc, #88]	; (800683c <HAL_DMA_IRQHandler+0x6cc>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d12b      	bne.n	8006840 <HAL_DMA_IRQHandler+0x6d0>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0310 	and.w	r3, r3, #16
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	bf14      	ite	ne
 80067f6:	2301      	movne	r3, #1
 80067f8:	2300      	moveq	r3, #0
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	e02a      	b.n	8006854 <HAL_DMA_IRQHandler+0x6e4>
 80067fe:	bf00      	nop
 8006800:	40020010 	.word	0x40020010
 8006804:	40020028 	.word	0x40020028
 8006808:	40020040 	.word	0x40020040
 800680c:	40020058 	.word	0x40020058
 8006810:	40020070 	.word	0x40020070
 8006814:	40020088 	.word	0x40020088
 8006818:	400200a0 	.word	0x400200a0
 800681c:	400200b8 	.word	0x400200b8
 8006820:	40020410 	.word	0x40020410
 8006824:	40020428 	.word	0x40020428
 8006828:	40020440 	.word	0x40020440
 800682c:	40020458 	.word	0x40020458
 8006830:	40020470 	.word	0x40020470
 8006834:	40020488 	.word	0x40020488
 8006838:	400204a0 	.word	0x400204a0
 800683c:	400204b8 	.word	0x400204b8
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0302 	and.w	r3, r3, #2
 800684a:	2b00      	cmp	r3, #0
 800684c:	bf14      	ite	ne
 800684e:	2301      	movne	r3, #1
 8006850:	2300      	moveq	r3, #0
 8006852:	b2db      	uxtb	r3, r3
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8087 	beq.w	8006968 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800685e:	f003 031f 	and.w	r3, r3, #31
 8006862:	2220      	movs	r2, #32
 8006864:	409a      	lsls	r2, r3
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b04      	cmp	r3, #4
 8006874:	d139      	bne.n	80068ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f022 0216 	bic.w	r2, r2, #22
 8006884:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695a      	ldr	r2, [r3, #20]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006894:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d103      	bne.n	80068a6 <HAL_DMA_IRQHandler+0x736>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d007      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f022 0208 	bic.w	r2, r2, #8
 80068b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	223f      	movs	r2, #63	; 0x3f
 80068c0:	409a      	lsls	r2, r3
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068da:	2b00      	cmp	r3, #0
 80068dc:	f000 834a 	beq.w	8006f74 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
          }
          return;
 80068e8:	e344      	b.n	8006f74 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d018      	beq.n	800692a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006902:	2b00      	cmp	r3, #0
 8006904:	d108      	bne.n	8006918 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690a:	2b00      	cmp	r3, #0
 800690c:	d02c      	beq.n	8006968 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
 8006916:	e027      	b.n	8006968 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d023      	beq.n	8006968 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	4798      	blx	r3
 8006928:	e01e      	b.n	8006968 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10f      	bne.n	8006958 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0210 	bic.w	r2, r2, #16
 8006946:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 8306 	beq.w	8006f7e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8088 	beq.w	8006a90 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2204      	movs	r2, #4
 8006984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a7a      	ldr	r2, [pc, #488]	; (8006b78 <HAL_DMA_IRQHandler+0xa08>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d04a      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a79      	ldr	r2, [pc, #484]	; (8006b7c <HAL_DMA_IRQHandler+0xa0c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d045      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a77      	ldr	r2, [pc, #476]	; (8006b80 <HAL_DMA_IRQHandler+0xa10>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d040      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a76      	ldr	r2, [pc, #472]	; (8006b84 <HAL_DMA_IRQHandler+0xa14>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d03b      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a74      	ldr	r2, [pc, #464]	; (8006b88 <HAL_DMA_IRQHandler+0xa18>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d036      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a73      	ldr	r2, [pc, #460]	; (8006b8c <HAL_DMA_IRQHandler+0xa1c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d031      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a71      	ldr	r2, [pc, #452]	; (8006b90 <HAL_DMA_IRQHandler+0xa20>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d02c      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a70      	ldr	r2, [pc, #448]	; (8006b94 <HAL_DMA_IRQHandler+0xa24>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d027      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a6e      	ldr	r2, [pc, #440]	; (8006b98 <HAL_DMA_IRQHandler+0xa28>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d022      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a6d      	ldr	r2, [pc, #436]	; (8006b9c <HAL_DMA_IRQHandler+0xa2c>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d01d      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a6b      	ldr	r2, [pc, #428]	; (8006ba0 <HAL_DMA_IRQHandler+0xa30>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d018      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a6a      	ldr	r2, [pc, #424]	; (8006ba4 <HAL_DMA_IRQHandler+0xa34>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d013      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a68      	ldr	r2, [pc, #416]	; (8006ba8 <HAL_DMA_IRQHandler+0xa38>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d00e      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a67      	ldr	r2, [pc, #412]	; (8006bac <HAL_DMA_IRQHandler+0xa3c>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d009      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a65      	ldr	r2, [pc, #404]	; (8006bb0 <HAL_DMA_IRQHandler+0xa40>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d004      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x8b8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a64      	ldr	r2, [pc, #400]	; (8006bb4 <HAL_DMA_IRQHandler+0xa44>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d108      	bne.n	8006a3a <HAL_DMA_IRQHandler+0x8ca>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0201 	bic.w	r2, r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	e007      	b.n	8006a4a <HAL_DMA_IRQHandler+0x8da>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f022 0201 	bic.w	r2, r2, #1
 8006a48:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
 8006a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d307      	bcc.n	8006a66 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1f2      	bne.n	8006a4a <HAL_DMA_IRQHandler+0x8da>
 8006a64:	e000      	b.n	8006a68 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006a66:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d004      	beq.n	8006a80 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2203      	movs	r2, #3
 8006a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006a7e:	e003      	b.n	8006a88 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f000 8272 	beq.w	8006f7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	4798      	blx	r3
 8006aa2:	e26c      	b.n	8006f7e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a43      	ldr	r2, [pc, #268]	; (8006bb8 <HAL_DMA_IRQHandler+0xa48>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d022      	beq.n	8006af4 <HAL_DMA_IRQHandler+0x984>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a42      	ldr	r2, [pc, #264]	; (8006bbc <HAL_DMA_IRQHandler+0xa4c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d01d      	beq.n	8006af4 <HAL_DMA_IRQHandler+0x984>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a40      	ldr	r2, [pc, #256]	; (8006bc0 <HAL_DMA_IRQHandler+0xa50>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d018      	beq.n	8006af4 <HAL_DMA_IRQHandler+0x984>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a3f      	ldr	r2, [pc, #252]	; (8006bc4 <HAL_DMA_IRQHandler+0xa54>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <HAL_DMA_IRQHandler+0x984>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a3d      	ldr	r2, [pc, #244]	; (8006bc8 <HAL_DMA_IRQHandler+0xa58>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d00e      	beq.n	8006af4 <HAL_DMA_IRQHandler+0x984>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a3c      	ldr	r2, [pc, #240]	; (8006bcc <HAL_DMA_IRQHandler+0xa5c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d009      	beq.n	8006af4 <HAL_DMA_IRQHandler+0x984>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a3a      	ldr	r2, [pc, #232]	; (8006bd0 <HAL_DMA_IRQHandler+0xa60>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d004      	beq.n	8006af4 <HAL_DMA_IRQHandler+0x984>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a39      	ldr	r2, [pc, #228]	; (8006bd4 <HAL_DMA_IRQHandler+0xa64>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d101      	bne.n	8006af8 <HAL_DMA_IRQHandler+0x988>
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <HAL_DMA_IRQHandler+0x98a>
 8006af8:	2300      	movs	r3, #0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 823f 	beq.w	8006f7e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b0c:	f003 031f 	and.w	r3, r3, #31
 8006b10:	2204      	movs	r2, #4
 8006b12:	409a      	lsls	r2, r3
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	4013      	ands	r3, r2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 80cd 	beq.w	8006cb8 <HAL_DMA_IRQHandler+0xb48>
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 80c7 	beq.w	8006cb8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b2e:	f003 031f 	and.w	r3, r3, #31
 8006b32:	2204      	movs	r2, #4
 8006b34:	409a      	lsls	r2, r3
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d049      	beq.n	8006bd8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	f000 8210 	beq.w	8006f78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b60:	e20a      	b.n	8006f78 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 8206 	beq.w	8006f78 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b74:	e200      	b.n	8006f78 <HAL_DMA_IRQHandler+0xe08>
 8006b76:	bf00      	nop
 8006b78:	40020010 	.word	0x40020010
 8006b7c:	40020028 	.word	0x40020028
 8006b80:	40020040 	.word	0x40020040
 8006b84:	40020058 	.word	0x40020058
 8006b88:	40020070 	.word	0x40020070
 8006b8c:	40020088 	.word	0x40020088
 8006b90:	400200a0 	.word	0x400200a0
 8006b94:	400200b8 	.word	0x400200b8
 8006b98:	40020410 	.word	0x40020410
 8006b9c:	40020428 	.word	0x40020428
 8006ba0:	40020440 	.word	0x40020440
 8006ba4:	40020458 	.word	0x40020458
 8006ba8:	40020470 	.word	0x40020470
 8006bac:	40020488 	.word	0x40020488
 8006bb0:	400204a0 	.word	0x400204a0
 8006bb4:	400204b8 	.word	0x400204b8
 8006bb8:	58025408 	.word	0x58025408
 8006bbc:	5802541c 	.word	0x5802541c
 8006bc0:	58025430 	.word	0x58025430
 8006bc4:	58025444 	.word	0x58025444
 8006bc8:	58025458 	.word	0x58025458
 8006bcc:	5802546c 	.word	0x5802546c
 8006bd0:	58025480 	.word	0x58025480
 8006bd4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d160      	bne.n	8006ca4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a8c      	ldr	r2, [pc, #560]	; (8006e18 <HAL_DMA_IRQHandler+0xca8>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d04a      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a8a      	ldr	r2, [pc, #552]	; (8006e1c <HAL_DMA_IRQHandler+0xcac>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d045      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a89      	ldr	r2, [pc, #548]	; (8006e20 <HAL_DMA_IRQHandler+0xcb0>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d040      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a87      	ldr	r2, [pc, #540]	; (8006e24 <HAL_DMA_IRQHandler+0xcb4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d03b      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a86      	ldr	r2, [pc, #536]	; (8006e28 <HAL_DMA_IRQHandler+0xcb8>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d036      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a84      	ldr	r2, [pc, #528]	; (8006e2c <HAL_DMA_IRQHandler+0xcbc>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d031      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a83      	ldr	r2, [pc, #524]	; (8006e30 <HAL_DMA_IRQHandler+0xcc0>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d02c      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a81      	ldr	r2, [pc, #516]	; (8006e34 <HAL_DMA_IRQHandler+0xcc4>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d027      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a80      	ldr	r2, [pc, #512]	; (8006e38 <HAL_DMA_IRQHandler+0xcc8>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d022      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a7e      	ldr	r2, [pc, #504]	; (8006e3c <HAL_DMA_IRQHandler+0xccc>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d01d      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a7d      	ldr	r2, [pc, #500]	; (8006e40 <HAL_DMA_IRQHandler+0xcd0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d018      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a7b      	ldr	r2, [pc, #492]	; (8006e44 <HAL_DMA_IRQHandler+0xcd4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d013      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a7a      	ldr	r2, [pc, #488]	; (8006e48 <HAL_DMA_IRQHandler+0xcd8>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d00e      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a78      	ldr	r2, [pc, #480]	; (8006e4c <HAL_DMA_IRQHandler+0xcdc>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d009      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a77      	ldr	r2, [pc, #476]	; (8006e50 <HAL_DMA_IRQHandler+0xce0>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d004      	beq.n	8006c82 <HAL_DMA_IRQHandler+0xb12>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a75      	ldr	r2, [pc, #468]	; (8006e54 <HAL_DMA_IRQHandler+0xce4>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d108      	bne.n	8006c94 <HAL_DMA_IRQHandler+0xb24>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0208 	bic.w	r2, r2, #8
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	e007      	b.n	8006ca4 <HAL_DMA_IRQHandler+0xb34>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0204 	bic.w	r2, r2, #4
 8006ca2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 8165 	beq.w	8006f78 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cb6:	e15f      	b.n	8006f78 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	409a      	lsls	r2, r3
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 80c5 	beq.w	8006e58 <HAL_DMA_IRQHandler+0xce8>
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80bf 	beq.w	8006e58 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	409a      	lsls	r2, r3
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d018      	beq.n	8006d26 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d109      	bne.n	8006d12 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 813a 	beq.w	8006f7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d10:	e134      	b.n	8006f7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 8130 	beq.w	8006f7c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d24:	e12a      	b.n	8006f7c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	f003 0320 	and.w	r3, r3, #32
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d168      	bne.n	8006e02 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a38      	ldr	r2, [pc, #224]	; (8006e18 <HAL_DMA_IRQHandler+0xca8>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d04a      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a37      	ldr	r2, [pc, #220]	; (8006e1c <HAL_DMA_IRQHandler+0xcac>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d045      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a35      	ldr	r2, [pc, #212]	; (8006e20 <HAL_DMA_IRQHandler+0xcb0>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d040      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a34      	ldr	r2, [pc, #208]	; (8006e24 <HAL_DMA_IRQHandler+0xcb4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d03b      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a32      	ldr	r2, [pc, #200]	; (8006e28 <HAL_DMA_IRQHandler+0xcb8>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d036      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a31      	ldr	r2, [pc, #196]	; (8006e2c <HAL_DMA_IRQHandler+0xcbc>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d031      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a2f      	ldr	r2, [pc, #188]	; (8006e30 <HAL_DMA_IRQHandler+0xcc0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d02c      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a2e      	ldr	r2, [pc, #184]	; (8006e34 <HAL_DMA_IRQHandler+0xcc4>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d027      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a2c      	ldr	r2, [pc, #176]	; (8006e38 <HAL_DMA_IRQHandler+0xcc8>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d022      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a2b      	ldr	r2, [pc, #172]	; (8006e3c <HAL_DMA_IRQHandler+0xccc>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d01d      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a29      	ldr	r2, [pc, #164]	; (8006e40 <HAL_DMA_IRQHandler+0xcd0>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d018      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a28      	ldr	r2, [pc, #160]	; (8006e44 <HAL_DMA_IRQHandler+0xcd4>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d013      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a26      	ldr	r2, [pc, #152]	; (8006e48 <HAL_DMA_IRQHandler+0xcd8>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d00e      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a25      	ldr	r2, [pc, #148]	; (8006e4c <HAL_DMA_IRQHandler+0xcdc>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d009      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a23      	ldr	r2, [pc, #140]	; (8006e50 <HAL_DMA_IRQHandler+0xce0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d004      	beq.n	8006dd0 <HAL_DMA_IRQHandler+0xc60>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a22      	ldr	r2, [pc, #136]	; (8006e54 <HAL_DMA_IRQHandler+0xce4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d108      	bne.n	8006de2 <HAL_DMA_IRQHandler+0xc72>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0214 	bic.w	r2, r2, #20
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	e007      	b.n	8006df2 <HAL_DMA_IRQHandler+0xc82>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 020a 	bic.w	r2, r2, #10
 8006df0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	f000 80b8 	beq.w	8006f7c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e14:	e0b2      	b.n	8006f7c <HAL_DMA_IRQHandler+0xe0c>
 8006e16:	bf00      	nop
 8006e18:	40020010 	.word	0x40020010
 8006e1c:	40020028 	.word	0x40020028
 8006e20:	40020040 	.word	0x40020040
 8006e24:	40020058 	.word	0x40020058
 8006e28:	40020070 	.word	0x40020070
 8006e2c:	40020088 	.word	0x40020088
 8006e30:	400200a0 	.word	0x400200a0
 8006e34:	400200b8 	.word	0x400200b8
 8006e38:	40020410 	.word	0x40020410
 8006e3c:	40020428 	.word	0x40020428
 8006e40:	40020440 	.word	0x40020440
 8006e44:	40020458 	.word	0x40020458
 8006e48:	40020470 	.word	0x40020470
 8006e4c:	40020488 	.word	0x40020488
 8006e50:	400204a0 	.word	0x400204a0
 8006e54:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e5c:	f003 031f 	and.w	r3, r3, #31
 8006e60:	2208      	movs	r2, #8
 8006e62:	409a      	lsls	r2, r3
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	4013      	ands	r3, r2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 8088 	beq.w	8006f7e <HAL_DMA_IRQHandler+0xe0e>
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f003 0308 	and.w	r3, r3, #8
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 8082 	beq.w	8006f7e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a41      	ldr	r2, [pc, #260]	; (8006f84 <HAL_DMA_IRQHandler+0xe14>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d04a      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a3f      	ldr	r2, [pc, #252]	; (8006f88 <HAL_DMA_IRQHandler+0xe18>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d045      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a3e      	ldr	r2, [pc, #248]	; (8006f8c <HAL_DMA_IRQHandler+0xe1c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d040      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a3c      	ldr	r2, [pc, #240]	; (8006f90 <HAL_DMA_IRQHandler+0xe20>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d03b      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a3b      	ldr	r2, [pc, #236]	; (8006f94 <HAL_DMA_IRQHandler+0xe24>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d036      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a39      	ldr	r2, [pc, #228]	; (8006f98 <HAL_DMA_IRQHandler+0xe28>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d031      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a38      	ldr	r2, [pc, #224]	; (8006f9c <HAL_DMA_IRQHandler+0xe2c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d02c      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a36      	ldr	r2, [pc, #216]	; (8006fa0 <HAL_DMA_IRQHandler+0xe30>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d027      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a35      	ldr	r2, [pc, #212]	; (8006fa4 <HAL_DMA_IRQHandler+0xe34>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d022      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a33      	ldr	r2, [pc, #204]	; (8006fa8 <HAL_DMA_IRQHandler+0xe38>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01d      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a32      	ldr	r2, [pc, #200]	; (8006fac <HAL_DMA_IRQHandler+0xe3c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d018      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a30      	ldr	r2, [pc, #192]	; (8006fb0 <HAL_DMA_IRQHandler+0xe40>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a2f      	ldr	r2, [pc, #188]	; (8006fb4 <HAL_DMA_IRQHandler+0xe44>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d00e      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a2d      	ldr	r2, [pc, #180]	; (8006fb8 <HAL_DMA_IRQHandler+0xe48>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d009      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <HAL_DMA_IRQHandler+0xe4c>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d004      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xdaa>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a2a      	ldr	r2, [pc, #168]	; (8006fc0 <HAL_DMA_IRQHandler+0xe50>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d108      	bne.n	8006f2c <HAL_DMA_IRQHandler+0xdbc>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f022 021c 	bic.w	r2, r2, #28
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	e007      	b.n	8006f3c <HAL_DMA_IRQHandler+0xdcc>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 020e 	bic.w	r2, r2, #14
 8006f3a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f40:	f003 031f 	and.w	r3, r3, #31
 8006f44:	2201      	movs	r2, #1
 8006f46:	409a      	lsls	r2, r3
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	4798      	blx	r3
 8006f72:	e004      	b.n	8006f7e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006f74:	bf00      	nop
 8006f76:	e002      	b.n	8006f7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f78:	bf00      	nop
 8006f7a:	e000      	b.n	8006f7e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f7c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f7e:	3728      	adds	r7, #40	; 0x28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}
 8006f84:	40020010 	.word	0x40020010
 8006f88:	40020028 	.word	0x40020028
 8006f8c:	40020040 	.word	0x40020040
 8006f90:	40020058 	.word	0x40020058
 8006f94:	40020070 	.word	0x40020070
 8006f98:	40020088 	.word	0x40020088
 8006f9c:	400200a0 	.word	0x400200a0
 8006fa0:	400200b8 	.word	0x400200b8
 8006fa4:	40020410 	.word	0x40020410
 8006fa8:	40020428 	.word	0x40020428
 8006fac:	40020440 	.word	0x40020440
 8006fb0:	40020458 	.word	0x40020458
 8006fb4:	40020470 	.word	0x40020470
 8006fb8:	40020488 	.word	0x40020488
 8006fbc:	400204a0 	.word	0x400204a0
 8006fc0:	400204b8 	.word	0x400204b8

08006fc4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
 8006fd0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fdc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a84      	ldr	r2, [pc, #528]	; (80071f4 <DMA_SetConfig+0x230>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d072      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a82      	ldr	r2, [pc, #520]	; (80071f8 <DMA_SetConfig+0x234>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d06d      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a81      	ldr	r2, [pc, #516]	; (80071fc <DMA_SetConfig+0x238>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d068      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a7f      	ldr	r2, [pc, #508]	; (8007200 <DMA_SetConfig+0x23c>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d063      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a7e      	ldr	r2, [pc, #504]	; (8007204 <DMA_SetConfig+0x240>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d05e      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a7c      	ldr	r2, [pc, #496]	; (8007208 <DMA_SetConfig+0x244>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d059      	beq.n	80070ce <DMA_SetConfig+0x10a>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a7b      	ldr	r2, [pc, #492]	; (800720c <DMA_SetConfig+0x248>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d054      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a79      	ldr	r2, [pc, #484]	; (8007210 <DMA_SetConfig+0x24c>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d04f      	beq.n	80070ce <DMA_SetConfig+0x10a>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a78      	ldr	r2, [pc, #480]	; (8007214 <DMA_SetConfig+0x250>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d04a      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a76      	ldr	r2, [pc, #472]	; (8007218 <DMA_SetConfig+0x254>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d045      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a75      	ldr	r2, [pc, #468]	; (800721c <DMA_SetConfig+0x258>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d040      	beq.n	80070ce <DMA_SetConfig+0x10a>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a73      	ldr	r2, [pc, #460]	; (8007220 <DMA_SetConfig+0x25c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d03b      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a72      	ldr	r2, [pc, #456]	; (8007224 <DMA_SetConfig+0x260>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d036      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a70      	ldr	r2, [pc, #448]	; (8007228 <DMA_SetConfig+0x264>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d031      	beq.n	80070ce <DMA_SetConfig+0x10a>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a6f      	ldr	r2, [pc, #444]	; (800722c <DMA_SetConfig+0x268>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d02c      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a6d      	ldr	r2, [pc, #436]	; (8007230 <DMA_SetConfig+0x26c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d027      	beq.n	80070ce <DMA_SetConfig+0x10a>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a6c      	ldr	r2, [pc, #432]	; (8007234 <DMA_SetConfig+0x270>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d022      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a6a      	ldr	r2, [pc, #424]	; (8007238 <DMA_SetConfig+0x274>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d01d      	beq.n	80070ce <DMA_SetConfig+0x10a>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a69      	ldr	r2, [pc, #420]	; (800723c <DMA_SetConfig+0x278>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d018      	beq.n	80070ce <DMA_SetConfig+0x10a>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	4a67      	ldr	r2, [pc, #412]	; (8007240 <DMA_SetConfig+0x27c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d013      	beq.n	80070ce <DMA_SetConfig+0x10a>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a66      	ldr	r2, [pc, #408]	; (8007244 <DMA_SetConfig+0x280>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d00e      	beq.n	80070ce <DMA_SetConfig+0x10a>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a64      	ldr	r2, [pc, #400]	; (8007248 <DMA_SetConfig+0x284>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d009      	beq.n	80070ce <DMA_SetConfig+0x10a>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a63      	ldr	r2, [pc, #396]	; (800724c <DMA_SetConfig+0x288>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d004      	beq.n	80070ce <DMA_SetConfig+0x10a>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a61      	ldr	r2, [pc, #388]	; (8007250 <DMA_SetConfig+0x28c>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d101      	bne.n	80070d2 <DMA_SetConfig+0x10e>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <DMA_SetConfig+0x110>
 80070d2:	2300      	movs	r3, #0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d00d      	beq.n	80070f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80070e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d004      	beq.n	80070f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80070f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a3e      	ldr	r2, [pc, #248]	; (80071f4 <DMA_SetConfig+0x230>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d04a      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a3d      	ldr	r2, [pc, #244]	; (80071f8 <DMA_SetConfig+0x234>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d045      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a3b      	ldr	r2, [pc, #236]	; (80071fc <DMA_SetConfig+0x238>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d040      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a3a      	ldr	r2, [pc, #232]	; (8007200 <DMA_SetConfig+0x23c>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d03b      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a38      	ldr	r2, [pc, #224]	; (8007204 <DMA_SetConfig+0x240>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d036      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a37      	ldr	r2, [pc, #220]	; (8007208 <DMA_SetConfig+0x244>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d031      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a35      	ldr	r2, [pc, #212]	; (800720c <DMA_SetConfig+0x248>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d02c      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a34      	ldr	r2, [pc, #208]	; (8007210 <DMA_SetConfig+0x24c>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d027      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a32      	ldr	r2, [pc, #200]	; (8007214 <DMA_SetConfig+0x250>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d022      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a31      	ldr	r2, [pc, #196]	; (8007218 <DMA_SetConfig+0x254>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d01d      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a2f      	ldr	r2, [pc, #188]	; (800721c <DMA_SetConfig+0x258>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d018      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a2e      	ldr	r2, [pc, #184]	; (8007220 <DMA_SetConfig+0x25c>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d013      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a2c      	ldr	r2, [pc, #176]	; (8007224 <DMA_SetConfig+0x260>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00e      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a2b      	ldr	r2, [pc, #172]	; (8007228 <DMA_SetConfig+0x264>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d009      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a29      	ldr	r2, [pc, #164]	; (800722c <DMA_SetConfig+0x268>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d004      	beq.n	8007194 <DMA_SetConfig+0x1d0>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a28      	ldr	r2, [pc, #160]	; (8007230 <DMA_SetConfig+0x26c>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d101      	bne.n	8007198 <DMA_SetConfig+0x1d4>
 8007194:	2301      	movs	r3, #1
 8007196:	e000      	b.n	800719a <DMA_SetConfig+0x1d6>
 8007198:	2300      	movs	r3, #0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d05a      	beq.n	8007254 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a2:	f003 031f 	and.w	r3, r3, #31
 80071a6:	223f      	movs	r2, #63	; 0x3f
 80071a8:	409a      	lsls	r2, r3
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2b40      	cmp	r3, #64	; 0x40
 80071cc:	d108      	bne.n	80071e0 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68ba      	ldr	r2, [r7, #8]
 80071dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80071de:	e087      	b.n	80072f0 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	687a      	ldr	r2, [r7, #4]
 80071ee:	60da      	str	r2, [r3, #12]
}
 80071f0:	e07e      	b.n	80072f0 <DMA_SetConfig+0x32c>
 80071f2:	bf00      	nop
 80071f4:	40020010 	.word	0x40020010
 80071f8:	40020028 	.word	0x40020028
 80071fc:	40020040 	.word	0x40020040
 8007200:	40020058 	.word	0x40020058
 8007204:	40020070 	.word	0x40020070
 8007208:	40020088 	.word	0x40020088
 800720c:	400200a0 	.word	0x400200a0
 8007210:	400200b8 	.word	0x400200b8
 8007214:	40020410 	.word	0x40020410
 8007218:	40020428 	.word	0x40020428
 800721c:	40020440 	.word	0x40020440
 8007220:	40020458 	.word	0x40020458
 8007224:	40020470 	.word	0x40020470
 8007228:	40020488 	.word	0x40020488
 800722c:	400204a0 	.word	0x400204a0
 8007230:	400204b8 	.word	0x400204b8
 8007234:	58025408 	.word	0x58025408
 8007238:	5802541c 	.word	0x5802541c
 800723c:	58025430 	.word	0x58025430
 8007240:	58025444 	.word	0x58025444
 8007244:	58025458 	.word	0x58025458
 8007248:	5802546c 	.word	0x5802546c
 800724c:	58025480 	.word	0x58025480
 8007250:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a28      	ldr	r2, [pc, #160]	; (80072fc <DMA_SetConfig+0x338>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d022      	beq.n	80072a4 <DMA_SetConfig+0x2e0>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a27      	ldr	r2, [pc, #156]	; (8007300 <DMA_SetConfig+0x33c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d01d      	beq.n	80072a4 <DMA_SetConfig+0x2e0>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a25      	ldr	r2, [pc, #148]	; (8007304 <DMA_SetConfig+0x340>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d018      	beq.n	80072a4 <DMA_SetConfig+0x2e0>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a24      	ldr	r2, [pc, #144]	; (8007308 <DMA_SetConfig+0x344>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d013      	beq.n	80072a4 <DMA_SetConfig+0x2e0>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a22      	ldr	r2, [pc, #136]	; (800730c <DMA_SetConfig+0x348>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00e      	beq.n	80072a4 <DMA_SetConfig+0x2e0>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a21      	ldr	r2, [pc, #132]	; (8007310 <DMA_SetConfig+0x34c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d009      	beq.n	80072a4 <DMA_SetConfig+0x2e0>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1f      	ldr	r2, [pc, #124]	; (8007314 <DMA_SetConfig+0x350>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d004      	beq.n	80072a4 <DMA_SetConfig+0x2e0>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1e      	ldr	r2, [pc, #120]	; (8007318 <DMA_SetConfig+0x354>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d101      	bne.n	80072a8 <DMA_SetConfig+0x2e4>
 80072a4:	2301      	movs	r3, #1
 80072a6:	e000      	b.n	80072aa <DMA_SetConfig+0x2e6>
 80072a8:	2300      	movs	r3, #0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d020      	beq.n	80072f0 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	2201      	movs	r2, #1
 80072b8:	409a      	lsls	r2, r3
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2b40      	cmp	r3, #64	; 0x40
 80072cc:	d108      	bne.n	80072e0 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68ba      	ldr	r2, [r7, #8]
 80072dc:	60da      	str	r2, [r3, #12]
}
 80072de:	e007      	b.n	80072f0 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	60da      	str	r2, [r3, #12]
}
 80072f0:	bf00      	nop
 80072f2:	371c      	adds	r7, #28
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	58025408 	.word	0x58025408
 8007300:	5802541c 	.word	0x5802541c
 8007304:	58025430 	.word	0x58025430
 8007308:	58025444 	.word	0x58025444
 800730c:	58025458 	.word	0x58025458
 8007310:	5802546c 	.word	0x5802546c
 8007314:	58025480 	.word	0x58025480
 8007318:	58025494 	.word	0x58025494

0800731c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a42      	ldr	r2, [pc, #264]	; (8007434 <DMA_CalcBaseAndBitshift+0x118>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d04a      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a41      	ldr	r2, [pc, #260]	; (8007438 <DMA_CalcBaseAndBitshift+0x11c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d045      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a3f      	ldr	r2, [pc, #252]	; (800743c <DMA_CalcBaseAndBitshift+0x120>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d040      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a3e      	ldr	r2, [pc, #248]	; (8007440 <DMA_CalcBaseAndBitshift+0x124>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d03b      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a3c      	ldr	r2, [pc, #240]	; (8007444 <DMA_CalcBaseAndBitshift+0x128>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d036      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a3b      	ldr	r2, [pc, #236]	; (8007448 <DMA_CalcBaseAndBitshift+0x12c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d031      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a39      	ldr	r2, [pc, #228]	; (800744c <DMA_CalcBaseAndBitshift+0x130>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d02c      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a38      	ldr	r2, [pc, #224]	; (8007450 <DMA_CalcBaseAndBitshift+0x134>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d027      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a36      	ldr	r2, [pc, #216]	; (8007454 <DMA_CalcBaseAndBitshift+0x138>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d022      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a35      	ldr	r2, [pc, #212]	; (8007458 <DMA_CalcBaseAndBitshift+0x13c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d01d      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a33      	ldr	r2, [pc, #204]	; (800745c <DMA_CalcBaseAndBitshift+0x140>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d018      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a32      	ldr	r2, [pc, #200]	; (8007460 <DMA_CalcBaseAndBitshift+0x144>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d013      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a30      	ldr	r2, [pc, #192]	; (8007464 <DMA_CalcBaseAndBitshift+0x148>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d00e      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a2f      	ldr	r2, [pc, #188]	; (8007468 <DMA_CalcBaseAndBitshift+0x14c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d009      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a2d      	ldr	r2, [pc, #180]	; (800746c <DMA_CalcBaseAndBitshift+0x150>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d004      	beq.n	80073c4 <DMA_CalcBaseAndBitshift+0xa8>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2c      	ldr	r2, [pc, #176]	; (8007470 <DMA_CalcBaseAndBitshift+0x154>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d101      	bne.n	80073c8 <DMA_CalcBaseAndBitshift+0xac>
 80073c4:	2301      	movs	r3, #1
 80073c6:	e000      	b.n	80073ca <DMA_CalcBaseAndBitshift+0xae>
 80073c8:	2300      	movs	r3, #0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d024      	beq.n	8007418 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	b2db      	uxtb	r3, r3
 80073d4:	3b10      	subs	r3, #16
 80073d6:	4a27      	ldr	r2, [pc, #156]	; (8007474 <DMA_CalcBaseAndBitshift+0x158>)
 80073d8:	fba2 2303 	umull	r2, r3, r2, r3
 80073dc:	091b      	lsrs	r3, r3, #4
 80073de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f003 0307 	and.w	r3, r3, #7
 80073e6:	4a24      	ldr	r2, [pc, #144]	; (8007478 <DMA_CalcBaseAndBitshift+0x15c>)
 80073e8:	5cd3      	ldrb	r3, [r2, r3]
 80073ea:	461a      	mov	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2b03      	cmp	r3, #3
 80073f4:	d908      	bls.n	8007408 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	4b1f      	ldr	r3, [pc, #124]	; (800747c <DMA_CalcBaseAndBitshift+0x160>)
 80073fe:	4013      	ands	r3, r2
 8007400:	1d1a      	adds	r2, r3, #4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	659a      	str	r2, [r3, #88]	; 0x58
 8007406:	e00d      	b.n	8007424 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	4b1b      	ldr	r3, [pc, #108]	; (800747c <DMA_CalcBaseAndBitshift+0x160>)
 8007410:	4013      	ands	r3, r2
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	6593      	str	r3, [r2, #88]	; 0x58
 8007416:	e005      	b.n	8007424 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007428:	4618      	mov	r0, r3
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	40020010 	.word	0x40020010
 8007438:	40020028 	.word	0x40020028
 800743c:	40020040 	.word	0x40020040
 8007440:	40020058 	.word	0x40020058
 8007444:	40020070 	.word	0x40020070
 8007448:	40020088 	.word	0x40020088
 800744c:	400200a0 	.word	0x400200a0
 8007450:	400200b8 	.word	0x400200b8
 8007454:	40020410 	.word	0x40020410
 8007458:	40020428 	.word	0x40020428
 800745c:	40020440 	.word	0x40020440
 8007460:	40020458 	.word	0x40020458
 8007464:	40020470 	.word	0x40020470
 8007468:	40020488 	.word	0x40020488
 800746c:	400204a0 	.word	0x400204a0
 8007470:	400204b8 	.word	0x400204b8
 8007474:	aaaaaaab 	.word	0xaaaaaaab
 8007478:	08014648 	.word	0x08014648
 800747c:	fffffc00 	.word	0xfffffc00

08007480 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007488:	2300      	movs	r3, #0
 800748a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	699b      	ldr	r3, [r3, #24]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d120      	bne.n	80074d6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	2b03      	cmp	r3, #3
 800749a:	d858      	bhi.n	800754e <DMA_CheckFifoParam+0xce>
 800749c:	a201      	add	r2, pc, #4	; (adr r2, 80074a4 <DMA_CheckFifoParam+0x24>)
 800749e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074a2:	bf00      	nop
 80074a4:	080074b5 	.word	0x080074b5
 80074a8:	080074c7 	.word	0x080074c7
 80074ac:	080074b5 	.word	0x080074b5
 80074b0:	0800754f 	.word	0x0800754f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d048      	beq.n	8007552 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074c4:	e045      	b.n	8007552 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074ce:	d142      	bne.n	8007556 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80074d4:	e03f      	b.n	8007556 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074de:	d123      	bne.n	8007528 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d838      	bhi.n	800755a <DMA_CheckFifoParam+0xda>
 80074e8:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <DMA_CheckFifoParam+0x70>)
 80074ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ee:	bf00      	nop
 80074f0:	08007501 	.word	0x08007501
 80074f4:	08007507 	.word	0x08007507
 80074f8:	08007501 	.word	0x08007501
 80074fc:	08007519 	.word	0x08007519
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	73fb      	strb	r3, [r7, #15]
        break;
 8007504:	e030      	b.n	8007568 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800750e:	2b00      	cmp	r3, #0
 8007510:	d025      	beq.n	800755e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007516:	e022      	b.n	800755e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007520:	d11f      	bne.n	8007562 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007526:	e01c      	b.n	8007562 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752c:	2b02      	cmp	r3, #2
 800752e:	d902      	bls.n	8007536 <DMA_CheckFifoParam+0xb6>
 8007530:	2b03      	cmp	r3, #3
 8007532:	d003      	beq.n	800753c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007534:	e018      	b.n	8007568 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	73fb      	strb	r3, [r7, #15]
        break;
 800753a:	e015      	b.n	8007568 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00e      	beq.n	8007566 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	73fb      	strb	r3, [r7, #15]
    break;
 800754c:	e00b      	b.n	8007566 <DMA_CheckFifoParam+0xe6>
        break;
 800754e:	bf00      	nop
 8007550:	e00a      	b.n	8007568 <DMA_CheckFifoParam+0xe8>
        break;
 8007552:	bf00      	nop
 8007554:	e008      	b.n	8007568 <DMA_CheckFifoParam+0xe8>
        break;
 8007556:	bf00      	nop
 8007558:	e006      	b.n	8007568 <DMA_CheckFifoParam+0xe8>
        break;
 800755a:	bf00      	nop
 800755c:	e004      	b.n	8007568 <DMA_CheckFifoParam+0xe8>
        break;
 800755e:	bf00      	nop
 8007560:	e002      	b.n	8007568 <DMA_CheckFifoParam+0xe8>
        break;
 8007562:	bf00      	nop
 8007564:	e000      	b.n	8007568 <DMA_CheckFifoParam+0xe8>
    break;
 8007566:	bf00      	nop
    }
  }

  return status;
 8007568:	7bfb      	ldrb	r3, [r7, #15]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3714      	adds	r7, #20
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop

08007578 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a38      	ldr	r2, [pc, #224]	; (800766c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d022      	beq.n	80075d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a36      	ldr	r2, [pc, #216]	; (8007670 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d01d      	beq.n	80075d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a35      	ldr	r2, [pc, #212]	; (8007674 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d018      	beq.n	80075d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a33      	ldr	r2, [pc, #204]	; (8007678 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d013      	beq.n	80075d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a32      	ldr	r2, [pc, #200]	; (800767c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d00e      	beq.n	80075d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a30      	ldr	r2, [pc, #192]	; (8007680 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d009      	beq.n	80075d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a2f      	ldr	r2, [pc, #188]	; (8007684 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d004      	beq.n	80075d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a2d      	ldr	r2, [pc, #180]	; (8007688 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d101      	bne.n	80075da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e000      	b.n	80075dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80075da:	2300      	movs	r3, #0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d01a      	beq.n	8007616 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	3b08      	subs	r3, #8
 80075e8:	4a28      	ldr	r2, [pc, #160]	; (800768c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80075ea:	fba2 2303 	umull	r2, r3, r2, r3
 80075ee:	091b      	lsrs	r3, r3, #4
 80075f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	4b26      	ldr	r3, [pc, #152]	; (8007690 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	461a      	mov	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a24      	ldr	r2, [pc, #144]	; (8007694 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007604:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f003 031f 	and.w	r3, r3, #31
 800760c:	2201      	movs	r2, #1
 800760e:	409a      	lsls	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007614:	e024      	b.n	8007660 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	b2db      	uxtb	r3, r3
 800761c:	3b10      	subs	r3, #16
 800761e:	4a1e      	ldr	r2, [pc, #120]	; (8007698 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007620:	fba2 2303 	umull	r2, r3, r2, r3
 8007624:	091b      	lsrs	r3, r3, #4
 8007626:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	4a1c      	ldr	r2, [pc, #112]	; (800769c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d806      	bhi.n	800763e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	4a1b      	ldr	r2, [pc, #108]	; (80076a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d902      	bls.n	800763e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	3308      	adds	r3, #8
 800763c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4b18      	ldr	r3, [pc, #96]	; (80076a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007642:	4413      	add	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	461a      	mov	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a16      	ldr	r2, [pc, #88]	; (80076a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007650:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f003 031f 	and.w	r3, r3, #31
 8007658:	2201      	movs	r2, #1
 800765a:	409a      	lsls	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007660:	bf00      	nop
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	58025408 	.word	0x58025408
 8007670:	5802541c 	.word	0x5802541c
 8007674:	58025430 	.word	0x58025430
 8007678:	58025444 	.word	0x58025444
 800767c:	58025458 	.word	0x58025458
 8007680:	5802546c 	.word	0x5802546c
 8007684:	58025480 	.word	0x58025480
 8007688:	58025494 	.word	0x58025494
 800768c:	cccccccd 	.word	0xcccccccd
 8007690:	16009600 	.word	0x16009600
 8007694:	58025880 	.word	0x58025880
 8007698:	aaaaaaab 	.word	0xaaaaaaab
 800769c:	400204b8 	.word	0x400204b8
 80076a0:	4002040f 	.word	0x4002040f
 80076a4:	10008200 	.word	0x10008200
 80076a8:	40020880 	.word	0x40020880

080076ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b085      	sub	sp, #20
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d04a      	beq.n	8007758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d847      	bhi.n	8007758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a25      	ldr	r2, [pc, #148]	; (8007764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d022      	beq.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a24      	ldr	r2, [pc, #144]	; (8007768 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d01d      	beq.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a22      	ldr	r2, [pc, #136]	; (800776c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d018      	beq.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a21      	ldr	r2, [pc, #132]	; (8007770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d013      	beq.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a1f      	ldr	r2, [pc, #124]	; (8007774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00e      	beq.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a1e      	ldr	r2, [pc, #120]	; (8007778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d009      	beq.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1c      	ldr	r2, [pc, #112]	; (800777c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d004      	beq.n	8007718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a1b      	ldr	r2, [pc, #108]	; (8007780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d101      	bne.n	800771c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007718:	2301      	movs	r3, #1
 800771a:	e000      	b.n	800771e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800771c:	2300      	movs	r3, #0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00a      	beq.n	8007738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	4b17      	ldr	r3, [pc, #92]	; (8007784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007726:	4413      	add	r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	461a      	mov	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a15      	ldr	r2, [pc, #84]	; (8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007734:	671a      	str	r2, [r3, #112]	; 0x70
 8007736:	e009      	b.n	800774c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007738:	68fa      	ldr	r2, [r7, #12]
 800773a:	4b14      	ldr	r3, [pc, #80]	; (800778c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800773c:	4413      	add	r3, r2
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	461a      	mov	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a11      	ldr	r2, [pc, #68]	; (8007790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800774a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	3b01      	subs	r3, #1
 8007750:	2201      	movs	r2, #1
 8007752:	409a      	lsls	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007758:	bf00      	nop
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	58025408 	.word	0x58025408
 8007768:	5802541c 	.word	0x5802541c
 800776c:	58025430 	.word	0x58025430
 8007770:	58025444 	.word	0x58025444
 8007774:	58025458 	.word	0x58025458
 8007778:	5802546c 	.word	0x5802546c
 800777c:	58025480 	.word	0x58025480
 8007780:	58025494 	.word	0x58025494
 8007784:	1600963f 	.word	0x1600963f
 8007788:	58025940 	.word	0x58025940
 800778c:	1000823f 	.word	0x1000823f
 8007790:	40020940 	.word	0x40020940

08007794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007794:	b480      	push	{r7}
 8007796:	b089      	sub	sp, #36	; 0x24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800779e:	2300      	movs	r3, #0
 80077a0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80077a2:	4b86      	ldr	r3, [pc, #536]	; (80079bc <HAL_GPIO_Init+0x228>)
 80077a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077a6:	e18c      	b.n	8007ac2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	2101      	movs	r1, #1
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	fa01 f303 	lsl.w	r3, r1, r3
 80077b4:	4013      	ands	r3, r2
 80077b6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 817e 	beq.w	8007abc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f003 0303 	and.w	r3, r3, #3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d005      	beq.n	80077d8 <HAL_GPIO_Init+0x44>
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	f003 0303 	and.w	r3, r3, #3
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d130      	bne.n	800783a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	2203      	movs	r2, #3
 80077e4:	fa02 f303 	lsl.w	r3, r2, r3
 80077e8:	43db      	mvns	r3, r3
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	4013      	ands	r3, r2
 80077ee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68da      	ldr	r2, [r3, #12]
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	fa02 f303 	lsl.w	r3, r2, r3
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	4313      	orrs	r3, r2
 8007800:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800780e:	2201      	movs	r2, #1
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	fa02 f303 	lsl.w	r3, r2, r3
 8007816:	43db      	mvns	r3, r3
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	4013      	ands	r3, r2
 800781c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	091b      	lsrs	r3, r3, #4
 8007824:	f003 0201 	and.w	r2, r3, #1
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	fa02 f303 	lsl.w	r3, r2, r3
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	4313      	orrs	r3, r2
 8007832:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f003 0303 	and.w	r3, r3, #3
 8007842:	2b03      	cmp	r3, #3
 8007844:	d017      	beq.n	8007876 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	2203      	movs	r2, #3
 8007852:	fa02 f303 	lsl.w	r3, r2, r3
 8007856:	43db      	mvns	r3, r3
 8007858:	69ba      	ldr	r2, [r7, #24]
 800785a:	4013      	ands	r3, r2
 800785c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	fa02 f303 	lsl.w	r3, r2, r3
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	4313      	orrs	r3, r2
 800786e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	69ba      	ldr	r2, [r7, #24]
 8007874:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	2b02      	cmp	r3, #2
 8007880:	d123      	bne.n	80078ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	08da      	lsrs	r2, r3, #3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	3208      	adds	r2, #8
 800788a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f003 0307 	and.w	r3, r3, #7
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	220f      	movs	r2, #15
 800789a:	fa02 f303 	lsl.w	r3, r2, r3
 800789e:	43db      	mvns	r3, r3
 80078a0:	69ba      	ldr	r2, [r7, #24]
 80078a2:	4013      	ands	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	691a      	ldr	r2, [r3, #16]
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	f003 0307 	and.w	r3, r3, #7
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	fa02 f303 	lsl.w	r3, r2, r3
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	08da      	lsrs	r2, r3, #3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	3208      	adds	r2, #8
 80078c4:	69b9      	ldr	r1, [r7, #24]
 80078c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	2203      	movs	r2, #3
 80078d6:	fa02 f303 	lsl.w	r3, r2, r3
 80078da:	43db      	mvns	r3, r3
 80078dc:	69ba      	ldr	r2, [r7, #24]
 80078de:	4013      	ands	r3, r2
 80078e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	685b      	ldr	r3, [r3, #4]
 80078e6:	f003 0203 	and.w	r2, r3, #3
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	fa02 f303 	lsl.w	r3, r2, r3
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	4313      	orrs	r3, r2
 80078f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	69ba      	ldr	r2, [r7, #24]
 80078fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 80d8 	beq.w	8007abc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800790c:	4b2c      	ldr	r3, [pc, #176]	; (80079c0 <HAL_GPIO_Init+0x22c>)
 800790e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007912:	4a2b      	ldr	r2, [pc, #172]	; (80079c0 <HAL_GPIO_Init+0x22c>)
 8007914:	f043 0302 	orr.w	r3, r3, #2
 8007918:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800791c:	4b28      	ldr	r3, [pc, #160]	; (80079c0 <HAL_GPIO_Init+0x22c>)
 800791e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800792a:	4a26      	ldr	r2, [pc, #152]	; (80079c4 <HAL_GPIO_Init+0x230>)
 800792c:	69fb      	ldr	r3, [r7, #28]
 800792e:	089b      	lsrs	r3, r3, #2
 8007930:	3302      	adds	r3, #2
 8007932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f003 0303 	and.w	r3, r3, #3
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	220f      	movs	r2, #15
 8007942:	fa02 f303 	lsl.w	r3, r2, r3
 8007946:	43db      	mvns	r3, r3
 8007948:	69ba      	ldr	r2, [r7, #24]
 800794a:	4013      	ands	r3, r2
 800794c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a1d      	ldr	r2, [pc, #116]	; (80079c8 <HAL_GPIO_Init+0x234>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d04a      	beq.n	80079ec <HAL_GPIO_Init+0x258>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a1c      	ldr	r2, [pc, #112]	; (80079cc <HAL_GPIO_Init+0x238>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d02b      	beq.n	80079b6 <HAL_GPIO_Init+0x222>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1b      	ldr	r2, [pc, #108]	; (80079d0 <HAL_GPIO_Init+0x23c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d025      	beq.n	80079b2 <HAL_GPIO_Init+0x21e>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a1a      	ldr	r2, [pc, #104]	; (80079d4 <HAL_GPIO_Init+0x240>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d01f      	beq.n	80079ae <HAL_GPIO_Init+0x21a>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a19      	ldr	r2, [pc, #100]	; (80079d8 <HAL_GPIO_Init+0x244>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d019      	beq.n	80079aa <HAL_GPIO_Init+0x216>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a18      	ldr	r2, [pc, #96]	; (80079dc <HAL_GPIO_Init+0x248>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d013      	beq.n	80079a6 <HAL_GPIO_Init+0x212>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a17      	ldr	r2, [pc, #92]	; (80079e0 <HAL_GPIO_Init+0x24c>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00d      	beq.n	80079a2 <HAL_GPIO_Init+0x20e>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a16      	ldr	r2, [pc, #88]	; (80079e4 <HAL_GPIO_Init+0x250>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d007      	beq.n	800799e <HAL_GPIO_Init+0x20a>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a15      	ldr	r2, [pc, #84]	; (80079e8 <HAL_GPIO_Init+0x254>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d101      	bne.n	800799a <HAL_GPIO_Init+0x206>
 8007996:	2309      	movs	r3, #9
 8007998:	e029      	b.n	80079ee <HAL_GPIO_Init+0x25a>
 800799a:	230a      	movs	r3, #10
 800799c:	e027      	b.n	80079ee <HAL_GPIO_Init+0x25a>
 800799e:	2307      	movs	r3, #7
 80079a0:	e025      	b.n	80079ee <HAL_GPIO_Init+0x25a>
 80079a2:	2306      	movs	r3, #6
 80079a4:	e023      	b.n	80079ee <HAL_GPIO_Init+0x25a>
 80079a6:	2305      	movs	r3, #5
 80079a8:	e021      	b.n	80079ee <HAL_GPIO_Init+0x25a>
 80079aa:	2304      	movs	r3, #4
 80079ac:	e01f      	b.n	80079ee <HAL_GPIO_Init+0x25a>
 80079ae:	2303      	movs	r3, #3
 80079b0:	e01d      	b.n	80079ee <HAL_GPIO_Init+0x25a>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e01b      	b.n	80079ee <HAL_GPIO_Init+0x25a>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e019      	b.n	80079ee <HAL_GPIO_Init+0x25a>
 80079ba:	bf00      	nop
 80079bc:	58000080 	.word	0x58000080
 80079c0:	58024400 	.word	0x58024400
 80079c4:	58000400 	.word	0x58000400
 80079c8:	58020000 	.word	0x58020000
 80079cc:	58020400 	.word	0x58020400
 80079d0:	58020800 	.word	0x58020800
 80079d4:	58020c00 	.word	0x58020c00
 80079d8:	58021000 	.word	0x58021000
 80079dc:	58021400 	.word	0x58021400
 80079e0:	58021800 	.word	0x58021800
 80079e4:	58021c00 	.word	0x58021c00
 80079e8:	58022400 	.word	0x58022400
 80079ec:	2300      	movs	r3, #0
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	f002 0203 	and.w	r2, r2, #3
 80079f4:	0092      	lsls	r2, r2, #2
 80079f6:	4093      	lsls	r3, r2
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079fe:	4938      	ldr	r1, [pc, #224]	; (8007ae0 <HAL_GPIO_Init+0x34c>)
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	089b      	lsrs	r3, r3, #2
 8007a04:	3302      	adds	r3, #2
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	43db      	mvns	r3, r3
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	43db      	mvns	r3, r3
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007a58:	69ba      	ldr	r2, [r7, #24]
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	43db      	mvns	r3, r3
 8007a72:	69ba      	ldr	r2, [r7, #24]
 8007a74:	4013      	ands	r3, r2
 8007a76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d003      	beq.n	8007a8c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007a84:	69ba      	ldr	r2, [r7, #24]
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	69ba      	ldr	r2, [r7, #24]
 8007a90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	43db      	mvns	r3, r3
 8007a9c:	69ba      	ldr	r2, [r7, #24]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	69ba      	ldr	r2, [r7, #24]
 8007aba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f47f ae6b 	bne.w	80077a8 <HAL_GPIO_Init+0x14>
  }
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	3724      	adds	r7, #36	; 0x24
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	58000400 	.word	0x58000400

08007ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	807b      	strh	r3, [r7, #2]
 8007af0:	4613      	mov	r3, r2
 8007af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007af4:	787b      	ldrb	r3, [r7, #1]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007afa:	887a      	ldrh	r2, [r7, #2]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b00:	e003      	b.n	8007b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b02:	887b      	ldrh	r3, [r7, #2]
 8007b04:	041a      	lsls	r2, r3, #16
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	619a      	str	r2, [r3, #24]
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b28:	887a      	ldrh	r2, [r7, #2]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	041a      	lsls	r2, r3, #16
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	43d9      	mvns	r1, r3
 8007b34:	887b      	ldrh	r3, [r7, #2]
 8007b36:	400b      	ands	r3, r1
 8007b38:	431a      	orrs	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	619a      	str	r2, [r3, #24]
}
 8007b3e:	bf00      	nop
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
	...

08007b4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b082      	sub	sp, #8
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e07f      	b.n	8007c5e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fa faa8 	bl	80020c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2224      	movs	r2, #36	; 0x24
 8007b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d107      	bne.n	8007bc6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bc2:	609a      	str	r2, [r3, #8]
 8007bc4:	e006      	b.n	8007bd4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	689a      	ldr	r2, [r3, #8]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007bd2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d104      	bne.n	8007be6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007be4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	6859      	ldr	r1, [r3, #4]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	4b1d      	ldr	r3, [pc, #116]	; (8007c68 <HAL_I2C_Init+0x11c>)
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68da      	ldr	r2, [r3, #12]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007c04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69d9      	ldr	r1, [r3, #28]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a1a      	ldr	r2, [r3, #32]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f042 0201 	orr.w	r2, r2, #1
 8007c3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2220      	movs	r2, #32
 8007c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	02008000 	.word	0x02008000

08007c6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	d138      	bne.n	8007cf4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d101      	bne.n	8007c90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c8c:	2302      	movs	r3, #2
 8007c8e:	e032      	b.n	8007cf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2224      	movs	r2, #36	; 0x24
 8007c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f022 0201 	bic.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007cbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6819      	ldr	r1, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	683a      	ldr	r2, [r7, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f042 0201 	orr.w	r2, r2, #1
 8007cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	e000      	b.n	8007cf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cf4:	2302      	movs	r3, #2
  }
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b085      	sub	sp, #20
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	d139      	bne.n	8007d8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d101      	bne.n	8007d26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d22:	2302      	movs	r3, #2
 8007d24:	e033      	b.n	8007d8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2224      	movs	r2, #36	; 0x24
 8007d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 0201 	bic.w	r2, r2, #1
 8007d44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	021b      	lsls	r3, r3, #8
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	e000      	b.n	8007d8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d8c:	2302      	movs	r3, #2
  }
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007d9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d9c:	b08f      	sub	sp, #60	; 0x3c
 8007d9e:	af0a      	add	r7, sp, #40	; 0x28
 8007da0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e116      	b.n	8007fda <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f00c f8cc 	bl	8013f64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2203      	movs	r2, #3
 8007dd0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d102      	bne.n	8007de6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4618      	mov	r0, r3
 8007dec:	f008 ffef 	bl	8010dce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	603b      	str	r3, [r7, #0]
 8007df6:	687e      	ldr	r6, [r7, #4]
 8007df8:	466d      	mov	r5, sp
 8007dfa:	f106 0410 	add.w	r4, r6, #16
 8007dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e0a:	e885 0003 	stmia.w	r5, {r0, r1}
 8007e0e:	1d33      	adds	r3, r6, #4
 8007e10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e12:	6838      	ldr	r0, [r7, #0]
 8007e14:	f008 feba 	bl	8010b8c <USB_CoreInit>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d005      	beq.n	8007e2a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2202      	movs	r2, #2
 8007e22:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e0d7      	b.n	8007fda <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	2100      	movs	r1, #0
 8007e30:	4618      	mov	r0, r3
 8007e32:	f008 ffdd 	bl	8010df0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]
 8007e3a:	e04a      	b.n	8007ed2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007e3c:	7bfa      	ldrb	r2, [r7, #15]
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	4613      	mov	r3, r2
 8007e42:	00db      	lsls	r3, r3, #3
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	440b      	add	r3, r1
 8007e4a:	333d      	adds	r3, #61	; 0x3d
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007e50:	7bfa      	ldrb	r2, [r7, #15]
 8007e52:	6879      	ldr	r1, [r7, #4]
 8007e54:	4613      	mov	r3, r2
 8007e56:	00db      	lsls	r3, r3, #3
 8007e58:	1a9b      	subs	r3, r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	440b      	add	r3, r1
 8007e5e:	333c      	adds	r3, #60	; 0x3c
 8007e60:	7bfa      	ldrb	r2, [r7, #15]
 8007e62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007e64:	7bfa      	ldrb	r2, [r7, #15]
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	b298      	uxth	r0, r3
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	1a9b      	subs	r3, r3, r2
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	440b      	add	r3, r1
 8007e76:	3342      	adds	r3, #66	; 0x42
 8007e78:	4602      	mov	r2, r0
 8007e7a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007e7c:	7bfa      	ldrb	r2, [r7, #15]
 8007e7e:	6879      	ldr	r1, [r7, #4]
 8007e80:	4613      	mov	r3, r2
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	1a9b      	subs	r3, r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	440b      	add	r3, r1
 8007e8a:	333f      	adds	r3, #63	; 0x3f
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007e90:	7bfa      	ldrb	r2, [r7, #15]
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	4613      	mov	r3, r2
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	1a9b      	subs	r3, r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	3344      	adds	r3, #68	; 0x44
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007ea4:	7bfa      	ldrb	r2, [r7, #15]
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	00db      	lsls	r3, r3, #3
 8007eac:	1a9b      	subs	r3, r3, r2
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	440b      	add	r3, r1
 8007eb2:	3348      	adds	r3, #72	; 0x48
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007eb8:	7bfa      	ldrb	r2, [r7, #15]
 8007eba:	6879      	ldr	r1, [r7, #4]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	1a9b      	subs	r3, r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	440b      	add	r3, r1
 8007ec6:	3350      	adds	r3, #80	; 0x50
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ecc:	7bfb      	ldrb	r3, [r7, #15]
 8007ece:	3301      	adds	r3, #1
 8007ed0:	73fb      	strb	r3, [r7, #15]
 8007ed2:	7bfa      	ldrb	r2, [r7, #15]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d3af      	bcc.n	8007e3c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007edc:	2300      	movs	r3, #0
 8007ede:	73fb      	strb	r3, [r7, #15]
 8007ee0:	e044      	b.n	8007f6c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007ee2:	7bfa      	ldrb	r2, [r7, #15]
 8007ee4:	6879      	ldr	r1, [r7, #4]
 8007ee6:	4613      	mov	r3, r2
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	440b      	add	r3, r1
 8007ef0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007ef8:	7bfa      	ldrb	r2, [r7, #15]
 8007efa:	6879      	ldr	r1, [r7, #4]
 8007efc:	4613      	mov	r3, r2
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	440b      	add	r3, r1
 8007f06:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007f0a:	7bfa      	ldrb	r2, [r7, #15]
 8007f0c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007f0e:	7bfa      	ldrb	r2, [r7, #15]
 8007f10:	6879      	ldr	r1, [r7, #4]
 8007f12:	4613      	mov	r3, r2
 8007f14:	00db      	lsls	r3, r3, #3
 8007f16:	1a9b      	subs	r3, r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007f20:	2200      	movs	r2, #0
 8007f22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007f24:	7bfa      	ldrb	r2, [r7, #15]
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	00db      	lsls	r3, r3, #3
 8007f2c:	1a9b      	subs	r3, r3, r2
 8007f2e:	009b      	lsls	r3, r3, #2
 8007f30:	440b      	add	r3, r1
 8007f32:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007f36:	2200      	movs	r2, #0
 8007f38:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007f3a:	7bfa      	ldrb	r2, [r7, #15]
 8007f3c:	6879      	ldr	r1, [r7, #4]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	1a9b      	subs	r3, r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	440b      	add	r3, r1
 8007f48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007f50:	7bfa      	ldrb	r2, [r7, #15]
 8007f52:	6879      	ldr	r1, [r7, #4]
 8007f54:	4613      	mov	r3, r2
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	1a9b      	subs	r3, r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007f62:	2200      	movs	r2, #0
 8007f64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f66:	7bfb      	ldrb	r3, [r7, #15]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	73fb      	strb	r3, [r7, #15]
 8007f6c:	7bfa      	ldrb	r2, [r7, #15]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d3b5      	bcc.n	8007ee2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	687e      	ldr	r6, [r7, #4]
 8007f7e:	466d      	mov	r5, sp
 8007f80:	f106 0410 	add.w	r4, r6, #16
 8007f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007f8c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007f90:	e885 0003 	stmia.w	r5, {r0, r1}
 8007f94:	1d33      	adds	r3, r6, #4
 8007f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f98:	6838      	ldr	r0, [r7, #0]
 8007f9a:	f008 ff75 	bl	8010e88 <USB_DevInit>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d005      	beq.n	8007fb0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e014      	b.n	8007fda <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d102      	bne.n	8007fce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f001 f885 	bl	80090d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f00a f80d 	bl	8011ff2 <USB_DevDisconnect>

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3714      	adds	r7, #20
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007fe2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b084      	sub	sp, #16
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <HAL_PCD_Start+0x1c>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e020      	b.n	8008040 <HAL_PCD_Start+0x5e>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800a:	2b01      	cmp	r3, #1
 800800c:	d109      	bne.n	8008022 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008012:	2b01      	cmp	r3, #1
 8008014:	d005      	beq.n	8008022 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4618      	mov	r0, r3
 8008028:	f008 fec0 	bl	8010dac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4618      	mov	r0, r3
 8008032:	f009 ffbd 	bl	8011fb0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800803e:	2300      	movs	r3, #0
}
 8008040:	4618      	mov	r0, r3
 8008042:	3710      	adds	r7, #16
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b08d      	sub	sp, #52	; 0x34
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4618      	mov	r0, r3
 8008060:	f00a f87b 	bl	801215a <USB_GetMode>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	f040 83be 	bne.w	80087e8 <HAL_PCD_IRQHandler+0x7a0>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4618      	mov	r0, r3
 8008072:	f009 ffdf 	bl	8012034 <USB_ReadInterrupts>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 83b4 	beq.w	80087e6 <HAL_PCD_IRQHandler+0x79e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4618      	mov	r0, r3
 8008084:	f009 ffd6 	bl	8012034 <USB_ReadInterrupts>
 8008088:	4603      	mov	r3, r0
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b02      	cmp	r3, #2
 8008090:	d107      	bne.n	80080a2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	695a      	ldr	r2, [r3, #20]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f002 0202 	and.w	r2, r2, #2
 80080a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f009 ffc4 	bl	8012034 <USB_ReadInterrupts>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f003 0310 	and.w	r3, r3, #16
 80080b2:	2b10      	cmp	r3, #16
 80080b4:	d161      	bne.n	800817a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	699a      	ldr	r2, [r3, #24]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0210 	bic.w	r2, r2, #16
 80080c4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	f003 020f 	and.w	r2, r3, #15
 80080d2:	4613      	mov	r3, r2
 80080d4:	00db      	lsls	r3, r3, #3
 80080d6:	1a9b      	subs	r3, r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4413      	add	r3, r2
 80080e2:	3304      	adds	r3, #4
 80080e4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	0c5b      	lsrs	r3, r3, #17
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d124      	bne.n	800813c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80080f8:	4013      	ands	r3, r2
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d035      	beq.n	800816a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008102:	69bb      	ldr	r3, [r7, #24]
 8008104:	091b      	lsrs	r3, r3, #4
 8008106:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800810c:	b29b      	uxth	r3, r3
 800810e:	461a      	mov	r2, r3
 8008110:	6a38      	ldr	r0, [r7, #32]
 8008112:	f009 fdfb 	bl	8011d0c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	68da      	ldr	r2, [r3, #12]
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	091b      	lsrs	r3, r3, #4
 800811e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008122:	441a      	add	r2, r3
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	699a      	ldr	r2, [r3, #24]
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	091b      	lsrs	r3, r3, #4
 8008130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008134:	441a      	add	r2, r3
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	619a      	str	r2, [r3, #24]
 800813a:	e016      	b.n	800816a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	0c5b      	lsrs	r3, r3, #17
 8008140:	f003 030f 	and.w	r3, r3, #15
 8008144:	2b06      	cmp	r3, #6
 8008146:	d110      	bne.n	800816a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800814e:	2208      	movs	r2, #8
 8008150:	4619      	mov	r1, r3
 8008152:	6a38      	ldr	r0, [r7, #32]
 8008154:	f009 fdda 	bl	8011d0c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	699a      	ldr	r2, [r3, #24]
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	091b      	lsrs	r3, r3, #4
 8008160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008164:	441a      	add	r2, r3
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	699a      	ldr	r2, [r3, #24]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f042 0210 	orr.w	r2, r2, #16
 8008178:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f009 ff58 	bl	8012034 <USB_ReadInterrupts>
 8008184:	4603      	mov	r3, r0
 8008186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800818a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800818e:	d16e      	bne.n	800826e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4618      	mov	r0, r3
 800819a:	f009 ff5e 	bl	801205a <USB_ReadDevAllOutEpInterrupt>
 800819e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80081a0:	e062      	b.n	8008268 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80081a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d057      	beq.n	800825c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081b2:	b2d2      	uxtb	r2, r2
 80081b4:	4611      	mov	r1, r2
 80081b6:	4618      	mov	r0, r3
 80081b8:	f009 ff83 	bl	80120c2 <USB_ReadDevOutEPInterrupt>
 80081bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00c      	beq.n	80081e2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d4:	461a      	mov	r2, r3
 80081d6:	2301      	movs	r3, #1
 80081d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80081da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fdd1 	bl	8008d84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f003 0308 	and.w	r3, r3, #8
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00c      	beq.n	8008206 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f8:	461a      	mov	r2, r3
 80081fa:	2308      	movs	r3, #8
 80081fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80081fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 fecb 	bl	8008f9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f003 0310 	and.w	r3, r3, #16
 800820c:	2b00      	cmp	r3, #0
 800820e:	d008      	beq.n	8008222 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008212:	015a      	lsls	r2, r3, #5
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	4413      	add	r3, r2
 8008218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821c:	461a      	mov	r2, r3
 800821e:	2310      	movs	r3, #16
 8008220:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f003 0320 	and.w	r3, r3, #32
 8008228:	2b00      	cmp	r3, #0
 800822a:	d008      	beq.n	800823e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008238:	461a      	mov	r2, r3
 800823a:	2320      	movs	r3, #32
 800823c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d009      	beq.n	800825c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008254:	461a      	mov	r2, r3
 8008256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800825a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800825c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825e:	3301      	adds	r3, #1
 8008260:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008264:	085b      	lsrs	r3, r3, #1
 8008266:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826a:	2b00      	cmp	r3, #0
 800826c:	d199      	bne.n	80081a2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4618      	mov	r0, r3
 8008274:	f009 fede 	bl	8012034 <USB_ReadInterrupts>
 8008278:	4603      	mov	r3, r0
 800827a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800827e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008282:	f040 80c4 	bne.w	800840e <HAL_PCD_IRQHandler+0x3c6>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f009 feff 	bl	801208e <USB_ReadDevAllInEpInterrupt>
 8008290:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008292:	2300      	movs	r3, #0
 8008294:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008296:	e0b6      	b.n	8008406 <HAL_PCD_IRQHandler+0x3be>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f000 80ab 	beq.w	80083fa <HAL_PCD_IRQHandler+0x3b2>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082aa:	b2d2      	uxtb	r2, r2
 80082ac:	4611      	mov	r1, r2
 80082ae:	4618      	mov	r0, r3
 80082b0:	f009 ff25 	bl	80120fe <USB_ReadDevInEPInterrupt>
 80082b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d057      	beq.n	8008370 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c2:	f003 030f 	and.w	r3, r3, #15
 80082c6:	2201      	movs	r2, #1
 80082c8:	fa02 f303 	lsl.w	r3, r2, r3
 80082cc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	43db      	mvns	r3, r3
 80082da:	69f9      	ldr	r1, [r7, #28]
 80082dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082e0:	4013      	ands	r3, r2
 80082e2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80082e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f0:	461a      	mov	r2, r3
 80082f2:	2301      	movs	r3, #1
 80082f4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d132      	bne.n	8008364 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80082fe:	6879      	ldr	r1, [r7, #4]
 8008300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008302:	4613      	mov	r3, r2
 8008304:	00db      	lsls	r3, r3, #3
 8008306:	1a9b      	subs	r3, r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	440b      	add	r3, r1
 800830c:	3348      	adds	r3, #72	; 0x48
 800830e:	6819      	ldr	r1, [r3, #0]
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008314:	4613      	mov	r3, r2
 8008316:	00db      	lsls	r3, r3, #3
 8008318:	1a9b      	subs	r3, r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4403      	add	r3, r0
 800831e:	3344      	adds	r3, #68	; 0x44
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4419      	add	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008328:	4613      	mov	r3, r2
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	1a9b      	subs	r3, r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4403      	add	r3, r0
 8008332:	3348      	adds	r3, #72	; 0x48
 8008334:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	2b00      	cmp	r3, #0
 800833a:	d113      	bne.n	8008364 <HAL_PCD_IRQHandler+0x31c>
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008340:	4613      	mov	r3, r2
 8008342:	00db      	lsls	r3, r3, #3
 8008344:	1a9b      	subs	r3, r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	440b      	add	r3, r1
 800834a:	3350      	adds	r3, #80	; 0x50
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d108      	bne.n	8008364 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6818      	ldr	r0, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800835c:	461a      	mov	r2, r3
 800835e:	2101      	movs	r1, #1
 8008360:	f009 ff2e 	bl	80121c0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	b2db      	uxtb	r3, r3
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f00b fe69 	bl	8014042 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f003 0308 	and.w	r3, r3, #8
 8008376:	2b00      	cmp	r3, #0
 8008378:	d008      	beq.n	800838c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800837a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	69fb      	ldr	r3, [r7, #28]
 8008380:	4413      	add	r3, r2
 8008382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008386:	461a      	mov	r2, r3
 8008388:	2308      	movs	r3, #8
 800838a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	f003 0310 	and.w	r3, r3, #16
 8008392:	2b00      	cmp	r3, #0
 8008394:	d008      	beq.n	80083a8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008398:	015a      	lsls	r2, r3, #5
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	4413      	add	r3, r2
 800839e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a2:	461a      	mov	r2, r3
 80083a4:	2310      	movs	r3, #16
 80083a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d008      	beq.n	80083c4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083be:	461a      	mov	r2, r3
 80083c0:	2340      	movs	r3, #64	; 0x40
 80083c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00c      	beq.n	80083e8 <HAL_PCD_IRQHandler+0x3a0>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80083ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083d0:	6a38      	ldr	r0, [r7, #32]
 80083d2:	f008 feb7 	bl	8011144 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	015a      	lsls	r2, r3, #5
 80083da:	69fb      	ldr	r3, [r7, #28]
 80083dc:	4413      	add	r3, r2
 80083de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e2:	461a      	mov	r2, r3
 80083e4:	2302      	movs	r3, #2
 80083e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d003      	beq.n	80083fa <HAL_PCD_IRQHandler+0x3b2>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80083f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fc38 	bl	8008c6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	3301      	adds	r3, #1
 80083fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008402:	085b      	lsrs	r3, r3, #1
 8008404:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	2b00      	cmp	r3, #0
 800840a:	f47f af45 	bne.w	8008298 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4618      	mov	r0, r3
 8008414:	f009 fe0e 	bl	8012034 <USB_ReadInterrupts>
 8008418:	4603      	mov	r3, r0
 800841a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800841e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008422:	d122      	bne.n	800846a <HAL_PCD_IRQHandler+0x422>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	69fa      	ldr	r2, [r7, #28]
 800842e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008432:	f023 0301 	bic.w	r3, r3, #1
 8008436:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800843e:	2b01      	cmp	r3, #1
 8008440:	d108      	bne.n	8008454 <HAL_PCD_IRQHandler+0x40c>
      {
        hpcd->LPM_State = LPM_L0;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800844a:	2100      	movs	r1, #0
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 fe67 	bl	8009120 <HAL_PCDEx_LPM_Callback>
 8008452:	e002      	b.n	800845a <HAL_PCD_IRQHandler+0x412>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f00b fe6b 	bl	8014130 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	695a      	ldr	r2, [r3, #20]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f009 fde0 	bl	8012034 <USB_ReadInterrupts>
 8008474:	4603      	mov	r3, r0
 8008476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800847a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800847e:	d112      	bne.n	80084a6 <HAL_PCD_IRQHandler+0x45e>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b01      	cmp	r3, #1
 800848e:	d102      	bne.n	8008496 <HAL_PCD_IRQHandler+0x44e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f00b fe27 	bl	80140e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	695a      	ldr	r2, [r3, #20]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80084a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f009 fdc2 	bl	8012034 <USB_ReadInterrupts>
 80084b0:	4603      	mov	r3, r0
 80084b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084ba:	d121      	bne.n	8008500 <HAL_PCD_IRQHandler+0x4b8>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	695a      	ldr	r2, [r3, #20]
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80084ca:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d111      	bne.n	80084fa <HAL_PCD_IRQHandler+0x4b2>
      {
        hpcd->LPM_State = LPM_L1;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e4:	089b      	lsrs	r3, r3, #2
 80084e6:	f003 020f 	and.w	r2, r3, #15
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80084f0:	2101      	movs	r1, #1
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fe14 	bl	8009120 <HAL_PCDEx_LPM_Callback>
 80084f8:	e002      	b.n	8008500 <HAL_PCD_IRQHandler+0x4b8>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f00b fdf2 	bl	80140e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4618      	mov	r0, r3
 8008506:	f009 fd95 	bl	8012034 <USB_ReadInterrupts>
 800850a:	4603      	mov	r3, r0
 800850c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008514:	f040 80b7 	bne.w	8008686 <HAL_PCD_IRQHandler+0x63e>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	69fa      	ldr	r2, [r7, #28]
 8008522:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008526:	f023 0301 	bic.w	r3, r3, #1
 800852a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2110      	movs	r1, #16
 8008532:	4618      	mov	r0, r3
 8008534:	f008 fe06 	bl	8011144 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008538:	2300      	movs	r3, #0
 800853a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800853c:	e046      	b.n	80085cc <HAL_PCD_IRQHandler+0x584>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800853e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008540:	015a      	lsls	r2, r3, #5
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	4413      	add	r3, r2
 8008546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800854a:	461a      	mov	r2, r3
 800854c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008550:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	015a      	lsls	r2, r3, #5
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	4413      	add	r3, r2
 800855a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008562:	0151      	lsls	r1, r2, #5
 8008564:	69fa      	ldr	r2, [r7, #28]
 8008566:	440a      	add	r2, r1
 8008568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800856c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008570:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857e:	461a      	mov	r2, r3
 8008580:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008584:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008596:	0151      	lsls	r1, r2, #5
 8008598:	69fa      	ldr	r2, [r7, #28]
 800859a:	440a      	add	r2, r1
 800859c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80085a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c8:	3301      	adds	r3, #1
 80085ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d3b3      	bcc.n	800853e <HAL_PCD_IRQHandler+0x4f6>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	69fa      	ldr	r2, [r7, #28]
 80085e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80085e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d016      	beq.n	8008620 <HAL_PCD_IRQHandler+0x5d8>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085fc:	69fa      	ldr	r2, [r7, #28]
 80085fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008602:	f043 030b 	orr.w	r3, r3, #11
 8008606:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008612:	69fa      	ldr	r2, [r7, #28]
 8008614:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008618:	f043 030b 	orr.w	r3, r3, #11
 800861c:	6453      	str	r3, [r2, #68]	; 0x44
 800861e:	e015      	b.n	800864c <HAL_PCD_IRQHandler+0x604>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008626:	695a      	ldr	r2, [r3, #20]
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800862e:	4619      	mov	r1, r3
 8008630:	f242 032b 	movw	r3, #8235	; 0x202b
 8008634:	4313      	orrs	r3, r2
 8008636:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863e:	691b      	ldr	r3, [r3, #16]
 8008640:	69fa      	ldr	r2, [r7, #28]
 8008642:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008646:	f043 030b 	orr.w	r3, r3, #11
 800864a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	69fa      	ldr	r2, [r7, #28]
 8008656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800865a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800865e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008670:	461a      	mov	r2, r3
 8008672:	f009 fda5 	bl	80121c0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	695a      	ldr	r2, [r3, #20]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4618      	mov	r0, r3
 800868c:	f009 fcd2 	bl	8012034 <USB_ReadInterrupts>
 8008690:	4603      	mov	r3, r0
 8008692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008696:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800869a:	d124      	bne.n	80086e6 <HAL_PCD_IRQHandler+0x69e>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f009 fd69 	bl	8012178 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f008 fdc3 	bl	8011236 <USB_GetDevSpeed>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681c      	ldr	r4, [r3, #0]
 80086bc:	f001 fc62 	bl	8009f84 <HAL_RCC_GetHCLKFreq>
 80086c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	461a      	mov	r2, r3
 80086ca:	4620      	mov	r0, r4
 80086cc:	f008 facc 	bl	8010c68 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f00b fcde 	bl	8014092 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	695a      	ldr	r2, [r3, #20]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80086e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f009 fca2 	bl	8012034 <USB_ReadInterrupts>
 80086f0:	4603      	mov	r3, r0
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	d10a      	bne.n	8008710 <HAL_PCD_IRQHandler+0x6c8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f00b fcbb 	bl	8014076 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	695a      	ldr	r2, [r3, #20]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f002 0208 	and.w	r2, r2, #8
 800870e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f009 fc8d 	bl	8012034 <USB_ReadInterrupts>
 800871a:	4603      	mov	r3, r0
 800871c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008720:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008724:	d10f      	bne.n	8008746 <HAL_PCD_IRQHandler+0x6fe>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	b2db      	uxtb	r3, r3
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f00b fd1d 	bl	8014170 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695a      	ldr	r2, [r3, #20]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4618      	mov	r0, r3
 800874c:	f009 fc72 	bl	8012034 <USB_ReadInterrupts>
 8008750:	4603      	mov	r3, r0
 8008752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008756:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800875a:	d10f      	bne.n	800877c <HAL_PCD_IRQHandler+0x734>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008762:	b2db      	uxtb	r3, r3
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f00b fcf0 	bl	801414c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	695a      	ldr	r2, [r3, #20]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800877a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4618      	mov	r0, r3
 8008782:	f009 fc57 	bl	8012034 <USB_ReadInterrupts>
 8008786:	4603      	mov	r3, r0
 8008788:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800878c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008790:	d10a      	bne.n	80087a8 <HAL_PCD_IRQHandler+0x760>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f00b fcfe 	bl	8014194 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	695a      	ldr	r2, [r3, #20]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80087a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4618      	mov	r0, r3
 80087ae:	f009 fc41 	bl	8012034 <USB_ReadInterrupts>
 80087b2:	4603      	mov	r3, r0
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b04      	cmp	r3, #4
 80087ba:	d115      	bne.n	80087e8 <HAL_PCD_IRQHandler+0x7a0>
    {
      temp = hpcd->Instance->GOTGINT;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	f003 0304 	and.w	r3, r3, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d002      	beq.n	80087d4 <HAL_PCD_IRQHandler+0x78c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f00b fcee 	bl	80141b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6859      	ldr	r1, [r3, #4]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69ba      	ldr	r2, [r7, #24]
 80087e0:	430a      	orrs	r2, r1
 80087e2:	605a      	str	r2, [r3, #4]
 80087e4:	e000      	b.n	80087e8 <HAL_PCD_IRQHandler+0x7a0>
      return;
 80087e6:	bf00      	nop
    }
  }
}
 80087e8:	3734      	adds	r7, #52	; 0x34
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd90      	pop	{r4, r7, pc}

080087ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b082      	sub	sp, #8
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	460b      	mov	r3, r1
 80087f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008800:	2b01      	cmp	r3, #1
 8008802:	d101      	bne.n	8008808 <HAL_PCD_SetAddress+0x1a>
 8008804:	2302      	movs	r3, #2
 8008806:	e013      	b.n	8008830 <HAL_PCD_SetAddress+0x42>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	78fa      	ldrb	r2, [r7, #3]
 8008814:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	78fa      	ldrb	r2, [r7, #3]
 800881e:	4611      	mov	r1, r2
 8008820:	4618      	mov	r0, r3
 8008822:	f009 fb9f 	bl	8011f64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800882e:	2300      	movs	r3, #0
}
 8008830:	4618      	mov	r0, r3
 8008832:	3708      	adds	r7, #8
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}

08008838 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	4608      	mov	r0, r1
 8008842:	4611      	mov	r1, r2
 8008844:	461a      	mov	r2, r3
 8008846:	4603      	mov	r3, r0
 8008848:	70fb      	strb	r3, [r7, #3]
 800884a:	460b      	mov	r3, r1
 800884c:	803b      	strh	r3, [r7, #0]
 800884e:	4613      	mov	r3, r2
 8008850:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008856:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800885a:	2b00      	cmp	r3, #0
 800885c:	da0f      	bge.n	800887e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	f003 020f 	and.w	r2, r3, #15
 8008864:	4613      	mov	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	3338      	adds	r3, #56	; 0x38
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	4413      	add	r3, r2
 8008872:	3304      	adds	r3, #4
 8008874:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2201      	movs	r2, #1
 800887a:	705a      	strb	r2, [r3, #1]
 800887c:	e00f      	b.n	800889e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800887e:	78fb      	ldrb	r3, [r7, #3]
 8008880:	f003 020f 	and.w	r2, r3, #15
 8008884:	4613      	mov	r3, r2
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	1a9b      	subs	r3, r3, r2
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	4413      	add	r3, r2
 8008894:	3304      	adds	r3, #4
 8008896:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800889e:	78fb      	ldrb	r3, [r7, #3]
 80088a0:	f003 030f 	and.w	r3, r3, #15
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80088aa:	883a      	ldrh	r2, [r7, #0]
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	78ba      	ldrb	r2, [r7, #2]
 80088b4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	785b      	ldrb	r3, [r3, #1]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d004      	beq.n	80088c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80088c8:	78bb      	ldrb	r3, [r7, #2]
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d102      	bne.n	80088d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80088da:	2b01      	cmp	r3, #1
 80088dc:	d101      	bne.n	80088e2 <HAL_PCD_EP_Open+0xaa>
 80088de:	2302      	movs	r3, #2
 80088e0:	e00e      	b.n	8008900 <HAL_PCD_EP_Open+0xc8>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2201      	movs	r2, #1
 80088e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	68f9      	ldr	r1, [r7, #12]
 80088f0:	4618      	mov	r0, r3
 80088f2:	f008 fcc5 	bl	8011280 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80088fe:	7afb      	ldrb	r3, [r7, #11]
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008918:	2b00      	cmp	r3, #0
 800891a:	da0f      	bge.n	800893c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800891c:	78fb      	ldrb	r3, [r7, #3]
 800891e:	f003 020f 	and.w	r2, r3, #15
 8008922:	4613      	mov	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	1a9b      	subs	r3, r3, r2
 8008928:	009b      	lsls	r3, r3, #2
 800892a:	3338      	adds	r3, #56	; 0x38
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	4413      	add	r3, r2
 8008930:	3304      	adds	r3, #4
 8008932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2201      	movs	r2, #1
 8008938:	705a      	strb	r2, [r3, #1]
 800893a:	e00f      	b.n	800895c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	f003 020f 	and.w	r2, r3, #15
 8008942:	4613      	mov	r3, r2
 8008944:	00db      	lsls	r3, r3, #3
 8008946:	1a9b      	subs	r3, r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	3304      	adds	r3, #4
 8008954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800895c:	78fb      	ldrb	r3, [r7, #3]
 800895e:	f003 030f 	and.w	r3, r3, #15
 8008962:	b2da      	uxtb	r2, r3
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800896e:	2b01      	cmp	r3, #1
 8008970:	d101      	bne.n	8008976 <HAL_PCD_EP_Close+0x6e>
 8008972:	2302      	movs	r3, #2
 8008974:	e00e      	b.n	8008994 <HAL_PCD_EP_Close+0x8c>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2201      	movs	r2, #1
 800897a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68f9      	ldr	r1, [r7, #12]
 8008984:	4618      	mov	r0, r3
 8008986:	f008 fd03 	bl	8011390 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b086      	sub	sp, #24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	607a      	str	r2, [r7, #4]
 80089a6:	603b      	str	r3, [r7, #0]
 80089a8:	460b      	mov	r3, r1
 80089aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089ac:	7afb      	ldrb	r3, [r7, #11]
 80089ae:	f003 020f 	and.w	r2, r3, #15
 80089b2:	4613      	mov	r3, r2
 80089b4:	00db      	lsls	r3, r3, #3
 80089b6:	1a9b      	subs	r3, r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4413      	add	r3, r2
 80089c2:	3304      	adds	r3, #4
 80089c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	2200      	movs	r2, #0
 80089d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	2200      	movs	r2, #0
 80089dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80089de:	7afb      	ldrb	r3, [r7, #11]
 80089e0:	f003 030f 	and.w	r3, r3, #15
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d102      	bne.n	80089f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80089f8:	7afb      	ldrb	r3, [r7, #11]
 80089fa:	f003 030f 	and.w	r3, r3, #15
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d109      	bne.n	8008a16 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6979      	ldr	r1, [r7, #20]
 8008a10:	f008 ffe6 	bl	80119e0 <USB_EP0StartXfer>
 8008a14:	e008      	b.n	8008a28 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	461a      	mov	r2, r3
 8008a22:	6979      	ldr	r1, [r7, #20]
 8008a24:	f008 fd90 	bl	8011548 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3718      	adds	r7, #24
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008a3e:	78fb      	ldrb	r3, [r7, #3]
 8008a40:	f003 020f 	and.w	r2, r3, #15
 8008a44:	6879      	ldr	r1, [r7, #4]
 8008a46:	4613      	mov	r3, r2
 8008a48:	00db      	lsls	r3, r3, #3
 8008a4a:	1a9b      	subs	r3, r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	440b      	add	r3, r1
 8008a50:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008a54:	681b      	ldr	r3, [r3, #0]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	370c      	adds	r7, #12
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr

08008a62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b086      	sub	sp, #24
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	60f8      	str	r0, [r7, #12]
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	603b      	str	r3, [r7, #0]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a72:	7afb      	ldrb	r3, [r7, #11]
 8008a74:	f003 020f 	and.w	r2, r3, #15
 8008a78:	4613      	mov	r3, r2
 8008a7a:	00db      	lsls	r3, r3, #3
 8008a7c:	1a9b      	subs	r3, r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	3338      	adds	r3, #56	; 0x38
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	4413      	add	r3, r2
 8008a86:	3304      	adds	r3, #4
 8008a88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008aa2:	7afb      	ldrb	r3, [r7, #11]
 8008aa4:	f003 030f 	and.w	r3, r3, #15
 8008aa8:	b2da      	uxtb	r2, r3
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d102      	bne.n	8008abc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	f003 030f 	and.w	r3, r3, #15
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d109      	bne.n	8008ada <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	691b      	ldr	r3, [r3, #16]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6979      	ldr	r1, [r7, #20]
 8008ad4:	f008 ff84 	bl	80119e0 <USB_EP0StartXfer>
 8008ad8:	e008      	b.n	8008aec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	6818      	ldr	r0, [r3, #0]
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	6979      	ldr	r1, [r7, #20]
 8008ae8:	f008 fd2e 	bl	8011548 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3718      	adds	r7, #24
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008af6:	b580      	push	{r7, lr}
 8008af8:	b084      	sub	sp, #16
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	460b      	mov	r3, r1
 8008b00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008b02:	78fb      	ldrb	r3, [r7, #3]
 8008b04:	f003 020f 	and.w	r2, r3, #15
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d901      	bls.n	8008b14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e050      	b.n	8008bb6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	da0f      	bge.n	8008b3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	f003 020f 	and.w	r2, r3, #15
 8008b22:	4613      	mov	r3, r2
 8008b24:	00db      	lsls	r3, r3, #3
 8008b26:	1a9b      	subs	r3, r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	3338      	adds	r3, #56	; 0x38
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	4413      	add	r3, r2
 8008b30:	3304      	adds	r3, #4
 8008b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	705a      	strb	r2, [r3, #1]
 8008b3a:	e00d      	b.n	8008b58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008b3c:	78fa      	ldrb	r2, [r7, #3]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	00db      	lsls	r3, r3, #3
 8008b42:	1a9b      	subs	r3, r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	3304      	adds	r3, #4
 8008b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b5e:	78fb      	ldrb	r3, [r7, #3]
 8008b60:	f003 030f 	and.w	r3, r3, #15
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d101      	bne.n	8008b78 <HAL_PCD_EP_SetStall+0x82>
 8008b74:	2302      	movs	r3, #2
 8008b76:	e01e      	b.n	8008bb6 <HAL_PCD_EP_SetStall+0xc0>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68f9      	ldr	r1, [r7, #12]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f009 f918 	bl	8011dbc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b8c:	78fb      	ldrb	r3, [r7, #3]
 8008b8e:	f003 030f 	and.w	r3, r3, #15
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10a      	bne.n	8008bac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6818      	ldr	r0, [r3, #0]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	b2d9      	uxtb	r1, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ba6:	461a      	mov	r2, r3
 8008ba8:	f009 fb0a 	bl	80121c0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bbe:	b580      	push	{r7, lr}
 8008bc0:	b084      	sub	sp, #16
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008bca:	78fb      	ldrb	r3, [r7, #3]
 8008bcc:	f003 020f 	and.w	r2, r3, #15
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d901      	bls.n	8008bdc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	e042      	b.n	8008c62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da0f      	bge.n	8008c04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	f003 020f 	and.w	r2, r3, #15
 8008bea:	4613      	mov	r3, r2
 8008bec:	00db      	lsls	r3, r3, #3
 8008bee:	1a9b      	subs	r3, r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	3338      	adds	r3, #56	; 0x38
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	3304      	adds	r3, #4
 8008bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	705a      	strb	r2, [r3, #1]
 8008c02:	e00f      	b.n	8008c24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	f003 020f 	and.w	r2, r3, #15
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	4413      	add	r3, r2
 8008c1a:	3304      	adds	r3, #4
 8008c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c2a:	78fb      	ldrb	r3, [r7, #3]
 8008c2c:	f003 030f 	and.w	r3, r3, #15
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d101      	bne.n	8008c44 <HAL_PCD_EP_ClrStall+0x86>
 8008c40:	2302      	movs	r3, #2
 8008c42:	e00e      	b.n	8008c62 <HAL_PCD_EP_ClrStall+0xa4>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68f9      	ldr	r1, [r7, #12]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f009 f920 	bl	8011e98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3710      	adds	r7, #16
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b08a      	sub	sp, #40	; 0x28
 8008c6e:	af02      	add	r7, sp, #8
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	4613      	mov	r3, r2
 8008c82:	00db      	lsls	r3, r3, #3
 8008c84:	1a9b      	subs	r3, r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	3338      	adds	r3, #56	; 0x38
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	3304      	adds	r3, #4
 8008c90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	699a      	ldr	r2, [r3, #24]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d901      	bls.n	8008ca2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e06c      	b.n	8008d7c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	695a      	ldr	r2, [r3, #20]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d902      	bls.n	8008cbe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	3303      	adds	r3, #3
 8008cc2:	089b      	lsrs	r3, r3, #2
 8008cc4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008cc6:	e02b      	b.n	8008d20 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	695a      	ldr	r2, [r3, #20]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	699b      	ldr	r3, [r3, #24]
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d902      	bls.n	8008ce4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	3303      	adds	r3, #3
 8008ce8:	089b      	lsrs	r3, r3, #2
 8008cea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	68d9      	ldr	r1, [r3, #12]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	b2da      	uxtb	r2, r3
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	4603      	mov	r3, r0
 8008d02:	6978      	ldr	r0, [r7, #20]
 8008d04:	f008 ffc4 	bl	8011c90 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	441a      	add	r2, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	699a      	ldr	r2, [r3, #24]
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	441a      	add	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d809      	bhi.n	8008d4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	699a      	ldr	r2, [r3, #24]
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d203      	bcs.n	8008d4a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1be      	bne.n	8008cc8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	695a      	ldr	r2, [r3, #20]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	699b      	ldr	r3, [r3, #24]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d811      	bhi.n	8008d7a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	f003 030f 	and.w	r3, r3, #15
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d62:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	43db      	mvns	r3, r3
 8008d70:	6939      	ldr	r1, [r7, #16]
 8008d72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d76:	4013      	ands	r3, r2
 8008d78:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3720      	adds	r7, #32
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b086      	sub	sp, #24
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	333c      	adds	r3, #60	; 0x3c
 8008d9c:	3304      	adds	r3, #4
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	f040 80a0 	bne.w	8008efc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d015      	beq.n	8008df2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4a72      	ldr	r2, [pc, #456]	; (8008f94 <PCD_EP_OutXfrComplete_int+0x210>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	f240 80dd 	bls.w	8008f8a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	f000 80d7 	beq.w	8008f8a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de8:	461a      	mov	r2, r3
 8008dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008dee:	6093      	str	r3, [r2, #8]
 8008df0:	e0cb      	b.n	8008f8a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d009      	beq.n	8008e10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e08:	461a      	mov	r2, r3
 8008e0a:	2320      	movs	r3, #32
 8008e0c:	6093      	str	r3, [r2, #8]
 8008e0e:	e0bc      	b.n	8008f8a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f040 80b7 	bne.w	8008f8a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4a5d      	ldr	r2, [pc, #372]	; (8008f94 <PCD_EP_OutXfrComplete_int+0x210>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d90f      	bls.n	8008e44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e40:	6093      	str	r3, [r2, #8]
 8008e42:	e0a2      	b.n	8008f8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008e44:	6879      	ldr	r1, [r7, #4]
 8008e46:	683a      	ldr	r2, [r7, #0]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	440b      	add	r3, r1
 8008e52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008e56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	0159      	lsls	r1, r3, #5
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	440b      	add	r3, r1
 8008e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008e6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	683a      	ldr	r2, [r7, #0]
 8008e70:	4613      	mov	r3, r2
 8008e72:	00db      	lsls	r3, r3, #3
 8008e74:	1a9b      	subs	r3, r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4403      	add	r3, r0
 8008e7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008e7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4613      	mov	r3, r2
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	440b      	add	r3, r1
 8008e8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e92:	6819      	ldr	r1, [r3, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	00db      	lsls	r3, r3, #3
 8008e9c:	1a9b      	subs	r3, r3, r2
 8008e9e:	009b      	lsls	r3, r3, #2
 8008ea0:	4403      	add	r3, r0
 8008ea2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4419      	add	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	683a      	ldr	r2, [r7, #0]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	1a9b      	subs	r3, r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	4403      	add	r3, r0
 8008eb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ebc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d114      	bne.n	8008eee <PCD_EP_OutXfrComplete_int+0x16a>
 8008ec4:	6879      	ldr	r1, [r7, #4]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	4613      	mov	r3, r2
 8008eca:	00db      	lsls	r3, r3, #3
 8008ecc:	1a9b      	subs	r3, r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	440b      	add	r3, r1
 8008ed2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d108      	bne.n	8008eee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6818      	ldr	r0, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	2101      	movs	r1, #1
 8008eea:	f009 f969 	bl	80121c0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f00b f889 	bl	801400c <HAL_PCD_DataOutStageCallback>
 8008efa:	e046      	b.n	8008f8a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4a26      	ldr	r2, [pc, #152]	; (8008f98 <PCD_EP_OutXfrComplete_int+0x214>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d124      	bne.n	8008f4e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00a      	beq.n	8008f24 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f20:	6093      	str	r3, [r2, #8]
 8008f22:	e032      	b.n	8008f8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f003 0320 	and.w	r3, r3, #32
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d008      	beq.n	8008f40 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	2320      	movs	r3, #32
 8008f3e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	4619      	mov	r1, r3
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f00b f860 	bl	801400c <HAL_PCD_DataOutStageCallback>
 8008f4c:	e01d      	b.n	8008f8a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d114      	bne.n	8008f7e <PCD_EP_OutXfrComplete_int+0x1fa>
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	4613      	mov	r3, r2
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	1a9b      	subs	r3, r3, r2
 8008f5e:	009b      	lsls	r3, r3, #2
 8008f60:	440b      	add	r3, r1
 8008f62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d108      	bne.n	8008f7e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6818      	ldr	r0, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f76:	461a      	mov	r2, r3
 8008f78:	2100      	movs	r1, #0
 8008f7a:	f009 f921 	bl	80121c0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f00b f841 	bl	801400c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3718      	adds	r7, #24
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}
 8008f94:	4f54300a 	.word	0x4f54300a
 8008f98:	4f54310a 	.word	0x4f54310a

08008f9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	333c      	adds	r3, #60	; 0x3c
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4a15      	ldr	r2, [pc, #84]	; (8009024 <PCD_EP_OutSetupPacket_int+0x88>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d90e      	bls.n	8008ff0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d009      	beq.n	8008ff0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f00a fff9 	bl	8013fe8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4a0a      	ldr	r2, [pc, #40]	; (8009024 <PCD_EP_OutSetupPacket_int+0x88>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d90c      	bls.n	8009018 <PCD_EP_OutSetupPacket_int+0x7c>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d108      	bne.n	8009018 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009010:	461a      	mov	r2, r3
 8009012:	2101      	movs	r1, #1
 8009014:	f009 f8d4 	bl	80121c0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	4f54300a 	.word	0x4f54300a

08009028 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
 8009034:	4613      	mov	r3, r2
 8009036:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d107      	bne.n	8009056 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009046:	883b      	ldrh	r3, [r7, #0]
 8009048:	0419      	lsls	r1, r3, #16
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	430a      	orrs	r2, r1
 8009052:	629a      	str	r2, [r3, #40]	; 0x28
 8009054:	e028      	b.n	80090a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905c:	0c1b      	lsrs	r3, r3, #16
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	4413      	add	r3, r2
 8009062:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009064:	2300      	movs	r3, #0
 8009066:	73fb      	strb	r3, [r7, #15]
 8009068:	e00d      	b.n	8009086 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	3340      	adds	r3, #64	; 0x40
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	0c1b      	lsrs	r3, r3, #16
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	4413      	add	r3, r2
 800907e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	3301      	adds	r3, #1
 8009084:	73fb      	strb	r3, [r7, #15]
 8009086:	7bfa      	ldrb	r2, [r7, #15]
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	3b01      	subs	r3, #1
 800908c:	429a      	cmp	r2, r3
 800908e:	d3ec      	bcc.n	800906a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009090:	883b      	ldrh	r3, [r7, #0]
 8009092:	0418      	lsls	r0, r3, #16
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6819      	ldr	r1, [r3, #0]
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	3b01      	subs	r3, #1
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	4302      	orrs	r2, r0
 80090a0:	3340      	adds	r3, #64	; 0x40
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	440b      	add	r3, r1
 80090a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	460b      	mov	r3, r1
 80090c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	887a      	ldrh	r2, [r7, #2]
 80090c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80090d8:	b480      	push	{r7}
 80090da:	b085      	sub	sp, #20
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009106:	4b05      	ldr	r3, [pc, #20]	; (800911c <HAL_PCDEx_ActivateLPM+0x44>)
 8009108:	4313      	orrs	r3, r2
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	10000003 	.word	0x10000003

08009120 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b084      	sub	sp, #16
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009140:	4b19      	ldr	r3, [pc, #100]	; (80091a8 <HAL_PWREx_ConfigSupply+0x70>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f003 0304 	and.w	r3, r3, #4
 8009148:	2b04      	cmp	r3, #4
 800914a:	d00a      	beq.n	8009162 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800914c:	4b16      	ldr	r3, [pc, #88]	; (80091a8 <HAL_PWREx_ConfigSupply+0x70>)
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	f003 0307 	and.w	r3, r3, #7
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	429a      	cmp	r2, r3
 8009158:	d001      	beq.n	800915e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e01f      	b.n	800919e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	e01d      	b.n	800919e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009162:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <HAL_PWREx_ConfigSupply+0x70>)
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	f023 0207 	bic.w	r2, r3, #7
 800916a:	490f      	ldr	r1, [pc, #60]	; (80091a8 <HAL_PWREx_ConfigSupply+0x70>)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4313      	orrs	r3, r2
 8009170:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009172:	f7f9 feb7 	bl	8002ee4 <HAL_GetTick>
 8009176:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009178:	e009      	b.n	800918e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800917a:	f7f9 feb3 	bl	8002ee4 <HAL_GetTick>
 800917e:	4602      	mov	r2, r0
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	1ad3      	subs	r3, r2, r3
 8009184:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009188:	d901      	bls.n	800918e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e007      	b.n	800919e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800918e:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <HAL_PWREx_ConfigSupply+0x70>)
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800919a:	d1ee      	bne.n	800917a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	58024800 	.word	0x58024800

080091ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80091b0:	4b05      	ldr	r3, [pc, #20]	; (80091c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80091b2:	68db      	ldr	r3, [r3, #12]
 80091b4:	4a04      	ldr	r2, [pc, #16]	; (80091c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80091b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80091ba:	60d3      	str	r3, [r2, #12]
}
 80091bc:	bf00      	nop
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr
 80091c6:	bf00      	nop
 80091c8:	58024800 	.word	0x58024800

080091cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08c      	sub	sp, #48	; 0x30
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d101      	bne.n	80091de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e397      	b.n	800990e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f000 8087 	beq.w	80092fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091ec:	4b9e      	ldr	r3, [pc, #632]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80091f6:	4b9c      	ldr	r3, [pc, #624]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 80091f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091fa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80091fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fe:	2b10      	cmp	r3, #16
 8009200:	d007      	beq.n	8009212 <HAL_RCC_OscConfig+0x46>
 8009202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009204:	2b18      	cmp	r3, #24
 8009206:	d110      	bne.n	800922a <HAL_RCC_OscConfig+0x5e>
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	f003 0303 	and.w	r3, r3, #3
 800920e:	2b02      	cmp	r3, #2
 8009210:	d10b      	bne.n	800922a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009212:	4b95      	ldr	r3, [pc, #596]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d06c      	beq.n	80092f8 <HAL_RCC_OscConfig+0x12c>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d168      	bne.n	80092f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e371      	b.n	800990e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009232:	d106      	bne.n	8009242 <HAL_RCC_OscConfig+0x76>
 8009234:	4b8c      	ldr	r3, [pc, #560]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a8b      	ldr	r2, [pc, #556]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 800923a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800923e:	6013      	str	r3, [r2, #0]
 8009240:	e02e      	b.n	80092a0 <HAL_RCC_OscConfig+0xd4>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10c      	bne.n	8009264 <HAL_RCC_OscConfig+0x98>
 800924a:	4b87      	ldr	r3, [pc, #540]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a86      	ldr	r2, [pc, #536]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009254:	6013      	str	r3, [r2, #0]
 8009256:	4b84      	ldr	r3, [pc, #528]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a83      	ldr	r2, [pc, #524]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 800925c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	e01d      	b.n	80092a0 <HAL_RCC_OscConfig+0xd4>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800926c:	d10c      	bne.n	8009288 <HAL_RCC_OscConfig+0xbc>
 800926e:	4b7e      	ldr	r3, [pc, #504]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a7d      	ldr	r2, [pc, #500]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009274:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009278:	6013      	str	r3, [r2, #0]
 800927a:	4b7b      	ldr	r3, [pc, #492]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a7a      	ldr	r2, [pc, #488]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009284:	6013      	str	r3, [r2, #0]
 8009286:	e00b      	b.n	80092a0 <HAL_RCC_OscConfig+0xd4>
 8009288:	4b77      	ldr	r3, [pc, #476]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a76      	ldr	r2, [pc, #472]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 800928e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009292:	6013      	str	r3, [r2, #0]
 8009294:	4b74      	ldr	r3, [pc, #464]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a73      	ldr	r2, [pc, #460]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 800929a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800929e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d013      	beq.n	80092d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a8:	f7f9 fe1c 	bl	8002ee4 <HAL_GetTick>
 80092ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092ae:	e008      	b.n	80092c2 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092b0:	f7f9 fe18 	bl	8002ee4 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b64      	cmp	r3, #100	; 0x64
 80092bc:	d901      	bls.n	80092c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e325      	b.n	800990e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092c2:	4b69      	ldr	r3, [pc, #420]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d0f0      	beq.n	80092b0 <HAL_RCC_OscConfig+0xe4>
 80092ce:	e014      	b.n	80092fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d0:	f7f9 fe08 	bl	8002ee4 <HAL_GetTick>
 80092d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80092d6:	e008      	b.n	80092ea <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092d8:	f7f9 fe04 	bl	8002ee4 <HAL_GetTick>
 80092dc:	4602      	mov	r2, r0
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	2b64      	cmp	r3, #100	; 0x64
 80092e4:	d901      	bls.n	80092ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80092e6:	2303      	movs	r3, #3
 80092e8:	e311      	b.n	800990e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80092ea:	4b5f      	ldr	r3, [pc, #380]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1f0      	bne.n	80092d8 <HAL_RCC_OscConfig+0x10c>
 80092f6:	e000      	b.n	80092fa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80092f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 808a 	beq.w	800941c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009308:	4b57      	ldr	r3, [pc, #348]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009310:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009312:	4b55      	ldr	r3, [pc, #340]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009316:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d007      	beq.n	800932e <HAL_RCC_OscConfig+0x162>
 800931e:	6a3b      	ldr	r3, [r7, #32]
 8009320:	2b18      	cmp	r3, #24
 8009322:	d137      	bne.n	8009394 <HAL_RCC_OscConfig+0x1c8>
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	f003 0303 	and.w	r3, r3, #3
 800932a:	2b00      	cmp	r3, #0
 800932c:	d132      	bne.n	8009394 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800932e:	4b4e      	ldr	r3, [pc, #312]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f003 0304 	and.w	r3, r3, #4
 8009336:	2b00      	cmp	r3, #0
 8009338:	d005      	beq.n	8009346 <HAL_RCC_OscConfig+0x17a>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d101      	bne.n	8009346 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e2e3      	b.n	800990e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009346:	4b48      	ldr	r3, [pc, #288]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f023 0219 	bic.w	r2, r3, #25
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	4945      	ldr	r1, [pc, #276]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009354:	4313      	orrs	r3, r2
 8009356:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009358:	f7f9 fdc4 	bl	8002ee4 <HAL_GetTick>
 800935c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800935e:	e008      	b.n	8009372 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009360:	f7f9 fdc0 	bl	8002ee4 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	2b02      	cmp	r3, #2
 800936c:	d901      	bls.n	8009372 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800936e:	2303      	movs	r3, #3
 8009370:	e2cd      	b.n	800990e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009372:	4b3d      	ldr	r3, [pc, #244]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0304 	and.w	r3, r3, #4
 800937a:	2b00      	cmp	r3, #0
 800937c:	d0f0      	beq.n	8009360 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800937e:	4b3a      	ldr	r3, [pc, #232]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	061b      	lsls	r3, r3, #24
 800938c:	4936      	ldr	r1, [pc, #216]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 800938e:	4313      	orrs	r3, r2
 8009390:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009392:	e043      	b.n	800941c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d026      	beq.n	80093ea <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800939c:	4b32      	ldr	r3, [pc, #200]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f023 0219 	bic.w	r2, r3, #25
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	492f      	ldr	r1, [pc, #188]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ae:	f7f9 fd99 	bl	8002ee4 <HAL_GetTick>
 80093b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093b4:	e008      	b.n	80093c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093b6:	f7f9 fd95 	bl	8002ee4 <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d901      	bls.n	80093c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e2a2      	b.n	800990e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093c8:	4b27      	ldr	r3, [pc, #156]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0f0      	beq.n	80093b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80093d4:	4b24      	ldr	r3, [pc, #144]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	691b      	ldr	r3, [r3, #16]
 80093e0:	061b      	lsls	r3, r3, #24
 80093e2:	4921      	ldr	r1, [pc, #132]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	604b      	str	r3, [r1, #4]
 80093e8:	e018      	b.n	800941c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093ea:	4b1f      	ldr	r3, [pc, #124]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a1e      	ldr	r2, [pc, #120]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 80093f0:	f023 0301 	bic.w	r3, r3, #1
 80093f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f6:	f7f9 fd75 	bl	8002ee4 <HAL_GetTick>
 80093fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80093fc:	e008      	b.n	8009410 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093fe:	f7f9 fd71 	bl	8002ee4 <HAL_GetTick>
 8009402:	4602      	mov	r2, r0
 8009404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009406:	1ad3      	subs	r3, r2, r3
 8009408:	2b02      	cmp	r3, #2
 800940a:	d901      	bls.n	8009410 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	e27e      	b.n	800990e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009410:	4b15      	ldr	r3, [pc, #84]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f003 0304 	and.w	r3, r3, #4
 8009418:	2b00      	cmp	r3, #0
 800941a:	d1f0      	bne.n	80093fe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f003 0310 	and.w	r3, r3, #16
 8009424:	2b00      	cmp	r3, #0
 8009426:	d06d      	beq.n	8009504 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009428:	4b0f      	ldr	r3, [pc, #60]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009430:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009432:	4b0d      	ldr	r3, [pc, #52]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009436:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	2b08      	cmp	r3, #8
 800943c:	d007      	beq.n	800944e <HAL_RCC_OscConfig+0x282>
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	2b18      	cmp	r3, #24
 8009442:	d11e      	bne.n	8009482 <HAL_RCC_OscConfig+0x2b6>
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f003 0303 	and.w	r3, r3, #3
 800944a:	2b01      	cmp	r3, #1
 800944c:	d119      	bne.n	8009482 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800944e:	4b06      	ldr	r3, [pc, #24]	; (8009468 <HAL_RCC_OscConfig+0x29c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009456:	2b00      	cmp	r3, #0
 8009458:	d008      	beq.n	800946c <HAL_RCC_OscConfig+0x2a0>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	69db      	ldr	r3, [r3, #28]
 800945e:	2b80      	cmp	r3, #128	; 0x80
 8009460:	d004      	beq.n	800946c <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e253      	b.n	800990e <HAL_RCC_OscConfig+0x742>
 8009466:	bf00      	nop
 8009468:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800946c:	4ba3      	ldr	r3, [pc, #652]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a1b      	ldr	r3, [r3, #32]
 8009478:	061b      	lsls	r3, r3, #24
 800947a:	49a0      	ldr	r1, [pc, #640]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 800947c:	4313      	orrs	r3, r2
 800947e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009480:	e040      	b.n	8009504 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	69db      	ldr	r3, [r3, #28]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d023      	beq.n	80094d2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800948a:	4b9c      	ldr	r3, [pc, #624]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a9b      	ldr	r2, [pc, #620]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009494:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009496:	f7f9 fd25 	bl	8002ee4 <HAL_GetTick>
 800949a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800949c:	e008      	b.n	80094b0 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800949e:	f7f9 fd21 	bl	8002ee4 <HAL_GetTick>
 80094a2:	4602      	mov	r2, r0
 80094a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d901      	bls.n	80094b0 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80094ac:	2303      	movs	r3, #3
 80094ae:	e22e      	b.n	800990e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094b0:	4b92      	ldr	r3, [pc, #584]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d0f0      	beq.n	800949e <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094bc:	4b8f      	ldr	r3, [pc, #572]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a1b      	ldr	r3, [r3, #32]
 80094c8:	061b      	lsls	r3, r3, #24
 80094ca:	498c      	ldr	r1, [pc, #560]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80094cc:	4313      	orrs	r3, r2
 80094ce:	60cb      	str	r3, [r1, #12]
 80094d0:	e018      	b.n	8009504 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80094d2:	4b8a      	ldr	r3, [pc, #552]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a89      	ldr	r2, [pc, #548]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80094d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094de:	f7f9 fd01 	bl	8002ee4 <HAL_GetTick>
 80094e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80094e4:	e008      	b.n	80094f8 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80094e6:	f7f9 fcfd 	bl	8002ee4 <HAL_GetTick>
 80094ea:	4602      	mov	r2, r0
 80094ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	d901      	bls.n	80094f8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e20a      	b.n	800990e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80094f8:	4b80      	ldr	r3, [pc, #512]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009500:	2b00      	cmp	r3, #0
 8009502:	d1f0      	bne.n	80094e6 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 0308 	and.w	r3, r3, #8
 800950c:	2b00      	cmp	r3, #0
 800950e:	d036      	beq.n	800957e <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d019      	beq.n	800954c <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009518:	4b78      	ldr	r3, [pc, #480]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 800951a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800951c:	4a77      	ldr	r2, [pc, #476]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 800951e:	f043 0301 	orr.w	r3, r3, #1
 8009522:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009524:	f7f9 fcde 	bl	8002ee4 <HAL_GetTick>
 8009528:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800952a:	e008      	b.n	800953e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800952c:	f7f9 fcda 	bl	8002ee4 <HAL_GetTick>
 8009530:	4602      	mov	r2, r0
 8009532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009534:	1ad3      	subs	r3, r2, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d901      	bls.n	800953e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800953a:	2303      	movs	r3, #3
 800953c:	e1e7      	b.n	800990e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800953e:	4b6f      	ldr	r3, [pc, #444]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d0f0      	beq.n	800952c <HAL_RCC_OscConfig+0x360>
 800954a:	e018      	b.n	800957e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800954c:	4b6b      	ldr	r3, [pc, #428]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 800954e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009550:	4a6a      	ldr	r2, [pc, #424]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009552:	f023 0301 	bic.w	r3, r3, #1
 8009556:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009558:	f7f9 fcc4 	bl	8002ee4 <HAL_GetTick>
 800955c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800955e:	e008      	b.n	8009572 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009560:	f7f9 fcc0 	bl	8002ee4 <HAL_GetTick>
 8009564:	4602      	mov	r2, r0
 8009566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009568:	1ad3      	subs	r3, r2, r3
 800956a:	2b02      	cmp	r3, #2
 800956c:	d901      	bls.n	8009572 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e1cd      	b.n	800990e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009572:	4b62      	ldr	r3, [pc, #392]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009576:	f003 0302 	and.w	r3, r3, #2
 800957a:	2b00      	cmp	r3, #0
 800957c:	d1f0      	bne.n	8009560 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f003 0320 	and.w	r3, r3, #32
 8009586:	2b00      	cmp	r3, #0
 8009588:	d036      	beq.n	80095f8 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d019      	beq.n	80095c6 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009592:	4b5a      	ldr	r3, [pc, #360]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a59      	ldr	r2, [pc, #356]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800959c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800959e:	f7f9 fca1 	bl	8002ee4 <HAL_GetTick>
 80095a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095a4:	e008      	b.n	80095b8 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80095a6:	f7f9 fc9d 	bl	8002ee4 <HAL_GetTick>
 80095aa:	4602      	mov	r2, r0
 80095ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	2b02      	cmp	r3, #2
 80095b2:	d901      	bls.n	80095b8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80095b4:	2303      	movs	r3, #3
 80095b6:	e1aa      	b.n	800990e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095b8:	4b50      	ldr	r3, [pc, #320]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d0f0      	beq.n	80095a6 <HAL_RCC_OscConfig+0x3da>
 80095c4:	e018      	b.n	80095f8 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80095c6:	4b4d      	ldr	r3, [pc, #308]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a4c      	ldr	r2, [pc, #304]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80095cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80095d2:	f7f9 fc87 	bl	8002ee4 <HAL_GetTick>
 80095d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80095d8:	e008      	b.n	80095ec <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80095da:	f7f9 fc83 	bl	8002ee4 <HAL_GetTick>
 80095de:	4602      	mov	r2, r0
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	2b02      	cmp	r3, #2
 80095e6:	d901      	bls.n	80095ec <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80095e8:	2303      	movs	r3, #3
 80095ea:	e190      	b.n	800990e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80095ec:	4b43      	ldr	r3, [pc, #268]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1f0      	bne.n	80095da <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0304 	and.w	r3, r3, #4
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 8085 	beq.w	8009710 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009606:	4b3e      	ldr	r3, [pc, #248]	; (8009700 <HAL_RCC_OscConfig+0x534>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a3d      	ldr	r2, [pc, #244]	; (8009700 <HAL_RCC_OscConfig+0x534>)
 800960c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009610:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009612:	f7f9 fc67 	bl	8002ee4 <HAL_GetTick>
 8009616:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009618:	e008      	b.n	800962c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800961a:	f7f9 fc63 	bl	8002ee4 <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	2b64      	cmp	r3, #100	; 0x64
 8009626:	d901      	bls.n	800962c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e170      	b.n	800990e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800962c:	4b34      	ldr	r3, [pc, #208]	; (8009700 <HAL_RCC_OscConfig+0x534>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009634:	2b00      	cmp	r3, #0
 8009636:	d0f0      	beq.n	800961a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d106      	bne.n	800964e <HAL_RCC_OscConfig+0x482>
 8009640:	4b2e      	ldr	r3, [pc, #184]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009644:	4a2d      	ldr	r2, [pc, #180]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	6713      	str	r3, [r2, #112]	; 0x70
 800964c:	e02d      	b.n	80096aa <HAL_RCC_OscConfig+0x4de>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10c      	bne.n	8009670 <HAL_RCC_OscConfig+0x4a4>
 8009656:	4b29      	ldr	r3, [pc, #164]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800965a:	4a28      	ldr	r2, [pc, #160]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 800965c:	f023 0301 	bic.w	r3, r3, #1
 8009660:	6713      	str	r3, [r2, #112]	; 0x70
 8009662:	4b26      	ldr	r3, [pc, #152]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009666:	4a25      	ldr	r2, [pc, #148]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009668:	f023 0304 	bic.w	r3, r3, #4
 800966c:	6713      	str	r3, [r2, #112]	; 0x70
 800966e:	e01c      	b.n	80096aa <HAL_RCC_OscConfig+0x4de>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	2b05      	cmp	r3, #5
 8009676:	d10c      	bne.n	8009692 <HAL_RCC_OscConfig+0x4c6>
 8009678:	4b20      	ldr	r3, [pc, #128]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 800967a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967c:	4a1f      	ldr	r2, [pc, #124]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 800967e:	f043 0304 	orr.w	r3, r3, #4
 8009682:	6713      	str	r3, [r2, #112]	; 0x70
 8009684:	4b1d      	ldr	r3, [pc, #116]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009688:	4a1c      	ldr	r2, [pc, #112]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 800968a:	f043 0301 	orr.w	r3, r3, #1
 800968e:	6713      	str	r3, [r2, #112]	; 0x70
 8009690:	e00b      	b.n	80096aa <HAL_RCC_OscConfig+0x4de>
 8009692:	4b1a      	ldr	r3, [pc, #104]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009696:	4a19      	ldr	r2, [pc, #100]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 8009698:	f023 0301 	bic.w	r3, r3, #1
 800969c:	6713      	str	r3, [r2, #112]	; 0x70
 800969e:	4b17      	ldr	r3, [pc, #92]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80096a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a2:	4a16      	ldr	r2, [pc, #88]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80096a4:	f023 0304 	bic.w	r3, r3, #4
 80096a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d015      	beq.n	80096de <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096b2:	f7f9 fc17 	bl	8002ee4 <HAL_GetTick>
 80096b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096b8:	e00a      	b.n	80096d0 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096ba:	f7f9 fc13 	bl	8002ee4 <HAL_GetTick>
 80096be:	4602      	mov	r2, r0
 80096c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c2:	1ad3      	subs	r3, r2, r3
 80096c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d901      	bls.n	80096d0 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e11e      	b.n	800990e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096d0:	4b0a      	ldr	r3, [pc, #40]	; (80096fc <HAL_RCC_OscConfig+0x530>)
 80096d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d4:	f003 0302 	and.w	r3, r3, #2
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0ee      	beq.n	80096ba <HAL_RCC_OscConfig+0x4ee>
 80096dc:	e018      	b.n	8009710 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096de:	f7f9 fc01 	bl	8002ee4 <HAL_GetTick>
 80096e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80096e4:	e00e      	b.n	8009704 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096e6:	f7f9 fbfd 	bl	8002ee4 <HAL_GetTick>
 80096ea:	4602      	mov	r2, r0
 80096ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d905      	bls.n	8009704 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80096f8:	2303      	movs	r3, #3
 80096fa:	e108      	b.n	800990e <HAL_RCC_OscConfig+0x742>
 80096fc:	58024400 	.word	0x58024400
 8009700:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009704:	4b84      	ldr	r3, [pc, #528]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009708:	f003 0302 	and.w	r3, r3, #2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1ea      	bne.n	80096e6 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 80f9 	beq.w	800990c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800971a:	4b7f      	ldr	r3, [pc, #508]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009722:	2b18      	cmp	r3, #24
 8009724:	f000 80b4 	beq.w	8009890 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	2b02      	cmp	r3, #2
 800972e:	f040 8095 	bne.w	800985c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009732:	4b79      	ldr	r3, [pc, #484]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a78      	ldr	r2, [pc, #480]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009738:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800973c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800973e:	f7f9 fbd1 	bl	8002ee4 <HAL_GetTick>
 8009742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009744:	e008      	b.n	8009758 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009746:	f7f9 fbcd 	bl	8002ee4 <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	2b02      	cmp	r3, #2
 8009752:	d901      	bls.n	8009758 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009754:	2303      	movs	r3, #3
 8009756:	e0da      	b.n	800990e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009758:	4b6f      	ldr	r3, [pc, #444]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1f0      	bne.n	8009746 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009764:	4b6c      	ldr	r3, [pc, #432]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009768:	4b6c      	ldr	r3, [pc, #432]	; (800991c <HAL_RCC_OscConfig+0x750>)
 800976a:	4013      	ands	r3, r2
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009774:	0112      	lsls	r2, r2, #4
 8009776:	430a      	orrs	r2, r1
 8009778:	4967      	ldr	r1, [pc, #412]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 800977a:	4313      	orrs	r3, r2
 800977c:	628b      	str	r3, [r1, #40]	; 0x28
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009782:	3b01      	subs	r3, #1
 8009784:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800978c:	3b01      	subs	r3, #1
 800978e:	025b      	lsls	r3, r3, #9
 8009790:	b29b      	uxth	r3, r3
 8009792:	431a      	orrs	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009798:	3b01      	subs	r3, #1
 800979a:	041b      	lsls	r3, r3, #16
 800979c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097a0:	431a      	orrs	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a6:	3b01      	subs	r3, #1
 80097a8:	061b      	lsls	r3, r3, #24
 80097aa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097ae:	495a      	ldr	r1, [pc, #360]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 80097b0:	4313      	orrs	r3, r2
 80097b2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80097b4:	4b58      	ldr	r3, [pc, #352]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 80097b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b8:	4a57      	ldr	r2, [pc, #348]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 80097ba:	f023 0301 	bic.w	r3, r3, #1
 80097be:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80097c0:	4b55      	ldr	r3, [pc, #340]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 80097c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097c4:	4b56      	ldr	r3, [pc, #344]	; (8009920 <HAL_RCC_OscConfig+0x754>)
 80097c6:	4013      	ands	r3, r2
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80097cc:	00d2      	lsls	r2, r2, #3
 80097ce:	4952      	ldr	r1, [pc, #328]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 80097d0:	4313      	orrs	r3, r2
 80097d2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80097d4:	4b50      	ldr	r3, [pc, #320]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 80097d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d8:	f023 020c 	bic.w	r2, r3, #12
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e0:	494d      	ldr	r1, [pc, #308]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 80097e2:	4313      	orrs	r3, r2
 80097e4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80097e6:	4b4c      	ldr	r3, [pc, #304]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 80097e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ea:	f023 0202 	bic.w	r2, r3, #2
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f2:	4949      	ldr	r1, [pc, #292]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 80097f4:	4313      	orrs	r3, r2
 80097f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80097f8:	4b47      	ldr	r3, [pc, #284]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 80097fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097fc:	4a46      	ldr	r2, [pc, #280]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 80097fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009802:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009804:	4b44      	ldr	r3, [pc, #272]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009808:	4a43      	ldr	r2, [pc, #268]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 800980a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800980e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009810:	4b41      	ldr	r3, [pc, #260]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	4a40      	ldr	r2, [pc, #256]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009816:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800981a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800981c:	4b3e      	ldr	r3, [pc, #248]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	4a3d      	ldr	r2, [pc, #244]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009822:	f043 0301 	orr.w	r3, r3, #1
 8009826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009828:	4b3b      	ldr	r3, [pc, #236]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	4a3a      	ldr	r2, [pc, #232]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 800982e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009834:	f7f9 fb56 	bl	8002ee4 <HAL_GetTick>
 8009838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800983a:	e008      	b.n	800984e <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800983c:	f7f9 fb52 	bl	8002ee4 <HAL_GetTick>
 8009840:	4602      	mov	r2, r0
 8009842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	2b02      	cmp	r3, #2
 8009848:	d901      	bls.n	800984e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800984a:	2303      	movs	r3, #3
 800984c:	e05f      	b.n	800990e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800984e:	4b32      	ldr	r3, [pc, #200]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d0f0      	beq.n	800983c <HAL_RCC_OscConfig+0x670>
 800985a:	e057      	b.n	800990c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800985c:	4b2e      	ldr	r3, [pc, #184]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a2d      	ldr	r2, [pc, #180]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009868:	f7f9 fb3c 	bl	8002ee4 <HAL_GetTick>
 800986c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800986e:	e008      	b.n	8009882 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009870:	f7f9 fb38 	bl	8002ee4 <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	2b02      	cmp	r3, #2
 800987c:	d901      	bls.n	8009882 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800987e:	2303      	movs	r3, #3
 8009880:	e045      	b.n	800990e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009882:	4b25      	ldr	r3, [pc, #148]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1f0      	bne.n	8009870 <HAL_RCC_OscConfig+0x6a4>
 800988e:	e03d      	b.n	800990c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009890:	4b21      	ldr	r3, [pc, #132]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009894:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009896:	4b20      	ldr	r3, [pc, #128]	; (8009918 <HAL_RCC_OscConfig+0x74c>)
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d031      	beq.n	8009908 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	f003 0203 	and.w	r2, r3, #3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d12a      	bne.n	8009908 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	091b      	lsrs	r3, r3, #4
 80098b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098be:	429a      	cmp	r2, r3
 80098c0:	d122      	bne.n	8009908 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d11a      	bne.n	8009908 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	0a5b      	lsrs	r3, r3, #9
 80098d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098de:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d111      	bne.n	8009908 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	0c1b      	lsrs	r3, r3, #16
 80098e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d108      	bne.n	8009908 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	0e1b      	lsrs	r3, r3, #24
 80098fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009902:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009904:	429a      	cmp	r2, r3
 8009906:	d001      	beq.n	800990c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e000      	b.n	800990e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3730      	adds	r7, #48	; 0x30
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	58024400 	.word	0x58024400
 800991c:	fffffc0c 	.word	0xfffffc0c
 8009920:	ffff0007 	.word	0xffff0007

08009924 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d101      	bne.n	8009938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e19c      	b.n	8009c72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009938:	4b8a      	ldr	r3, [pc, #552]	; (8009b64 <HAL_RCC_ClockConfig+0x240>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 030f 	and.w	r3, r3, #15
 8009940:	683a      	ldr	r2, [r7, #0]
 8009942:	429a      	cmp	r2, r3
 8009944:	d910      	bls.n	8009968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009946:	4b87      	ldr	r3, [pc, #540]	; (8009b64 <HAL_RCC_ClockConfig+0x240>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f023 020f 	bic.w	r2, r3, #15
 800994e:	4985      	ldr	r1, [pc, #532]	; (8009b64 <HAL_RCC_ClockConfig+0x240>)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	4313      	orrs	r3, r2
 8009954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009956:	4b83      	ldr	r3, [pc, #524]	; (8009b64 <HAL_RCC_ClockConfig+0x240>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f003 030f 	and.w	r3, r3, #15
 800995e:	683a      	ldr	r2, [r7, #0]
 8009960:	429a      	cmp	r2, r3
 8009962:	d001      	beq.n	8009968 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e184      	b.n	8009c72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b00      	cmp	r3, #0
 8009972:	d010      	beq.n	8009996 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	691a      	ldr	r2, [r3, #16]
 8009978:	4b7b      	ldr	r3, [pc, #492]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 800997a:	699b      	ldr	r3, [r3, #24]
 800997c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009980:	429a      	cmp	r2, r3
 8009982:	d908      	bls.n	8009996 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009984:	4b78      	ldr	r3, [pc, #480]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009986:	699b      	ldr	r3, [r3, #24]
 8009988:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	4975      	ldr	r1, [pc, #468]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009992:	4313      	orrs	r3, r2
 8009994:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0308 	and.w	r3, r3, #8
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d010      	beq.n	80099c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	695a      	ldr	r2, [r3, #20]
 80099a6:	4b70      	ldr	r3, [pc, #448]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d908      	bls.n	80099c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80099b2:	4b6d      	ldr	r3, [pc, #436]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	695b      	ldr	r3, [r3, #20]
 80099be:	496a      	ldr	r1, [pc, #424]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0310 	and.w	r3, r3, #16
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d010      	beq.n	80099f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699a      	ldr	r2, [r3, #24]
 80099d4:	4b64      	ldr	r3, [pc, #400]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 80099d6:	69db      	ldr	r3, [r3, #28]
 80099d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099dc:	429a      	cmp	r2, r3
 80099de:	d908      	bls.n	80099f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80099e0:	4b61      	ldr	r3, [pc, #388]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 80099e2:	69db      	ldr	r3, [r3, #28]
 80099e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	495e      	ldr	r1, [pc, #376]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0320 	and.w	r3, r3, #32
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d010      	beq.n	8009a20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	69da      	ldr	r2, [r3, #28]
 8009a02:	4b59      	ldr	r3, [pc, #356]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d908      	bls.n	8009a20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009a0e:	4b56      	ldr	r3, [pc, #344]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009a10:	6a1b      	ldr	r3, [r3, #32]
 8009a12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	69db      	ldr	r3, [r3, #28]
 8009a1a:	4953      	ldr	r1, [pc, #332]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d010      	beq.n	8009a4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	68da      	ldr	r2, [r3, #12]
 8009a30:	4b4d      	ldr	r3, [pc, #308]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	f003 030f 	and.w	r3, r3, #15
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d908      	bls.n	8009a4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a3c:	4b4a      	ldr	r3, [pc, #296]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	f023 020f 	bic.w	r2, r3, #15
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	4947      	ldr	r1, [pc, #284]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 0301 	and.w	r3, r3, #1
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d055      	beq.n	8009b06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009a5a:	4b43      	ldr	r3, [pc, #268]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009a5c:	699b      	ldr	r3, [r3, #24]
 8009a5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	4940      	ldr	r1, [pc, #256]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d107      	bne.n	8009a84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a74:	4b3c      	ldr	r3, [pc, #240]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d121      	bne.n	8009ac4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e0f6      	b.n	8009c72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	2b03      	cmp	r3, #3
 8009a8a:	d107      	bne.n	8009a9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009a8c:	4b36      	ldr	r3, [pc, #216]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d115      	bne.n	8009ac4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	e0ea      	b.n	8009c72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d107      	bne.n	8009ab4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009aa4:	4b30      	ldr	r3, [pc, #192]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d109      	bne.n	8009ac4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e0de      	b.n	8009c72 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ab4:	4b2c      	ldr	r3, [pc, #176]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f003 0304 	and.w	r3, r3, #4
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e0d6      	b.n	8009c72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ac4:	4b28      	ldr	r3, [pc, #160]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	f023 0207 	bic.w	r2, r3, #7
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	4925      	ldr	r1, [pc, #148]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ad6:	f7f9 fa05 	bl	8002ee4 <HAL_GetTick>
 8009ada:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009adc:	e00a      	b.n	8009af4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ade:	f7f9 fa01 	bl	8002ee4 <HAL_GetTick>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	1ad3      	subs	r3, r2, r3
 8009ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d901      	bls.n	8009af4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e0be      	b.n	8009c72 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009af4:	4b1c      	ldr	r3, [pc, #112]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	00db      	lsls	r3, r3, #3
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d1eb      	bne.n	8009ade <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f003 0302 	and.w	r3, r3, #2
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d010      	beq.n	8009b34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68da      	ldr	r2, [r3, #12]
 8009b16:	4b14      	ldr	r3, [pc, #80]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009b18:	699b      	ldr	r3, [r3, #24]
 8009b1a:	f003 030f 	and.w	r3, r3, #15
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d208      	bcs.n	8009b34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b22:	4b11      	ldr	r3, [pc, #68]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	f023 020f 	bic.w	r2, r3, #15
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	490e      	ldr	r1, [pc, #56]	; (8009b68 <HAL_RCC_ClockConfig+0x244>)
 8009b30:	4313      	orrs	r3, r2
 8009b32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b34:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <HAL_RCC_ClockConfig+0x240>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 030f 	and.w	r3, r3, #15
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d214      	bcs.n	8009b6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b42:	4b08      	ldr	r3, [pc, #32]	; (8009b64 <HAL_RCC_ClockConfig+0x240>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f023 020f 	bic.w	r2, r3, #15
 8009b4a:	4906      	ldr	r1, [pc, #24]	; (8009b64 <HAL_RCC_ClockConfig+0x240>)
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b52:	4b04      	ldr	r3, [pc, #16]	; (8009b64 <HAL_RCC_ClockConfig+0x240>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f003 030f 	and.w	r3, r3, #15
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d005      	beq.n	8009b6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e086      	b.n	8009c72 <HAL_RCC_ClockConfig+0x34e>
 8009b64:	52002000 	.word	0x52002000
 8009b68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0304 	and.w	r3, r3, #4
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d010      	beq.n	8009b9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	691a      	ldr	r2, [r3, #16]
 8009b7c:	4b3f      	ldr	r3, [pc, #252]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b84:	429a      	cmp	r2, r3
 8009b86:	d208      	bcs.n	8009b9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b88:	4b3c      	ldr	r3, [pc, #240]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	4939      	ldr	r1, [pc, #228]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009b96:	4313      	orrs	r3, r2
 8009b98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f003 0308 	and.w	r3, r3, #8
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d010      	beq.n	8009bc8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	695a      	ldr	r2, [r3, #20]
 8009baa:	4b34      	ldr	r3, [pc, #208]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d208      	bcs.n	8009bc8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009bb6:	4b31      	ldr	r3, [pc, #196]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009bb8:	69db      	ldr	r3, [r3, #28]
 8009bba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	492e      	ldr	r1, [pc, #184]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0310 	and.w	r3, r3, #16
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d010      	beq.n	8009bf6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	699a      	ldr	r2, [r3, #24]
 8009bd8:	4b28      	ldr	r3, [pc, #160]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009bda:	69db      	ldr	r3, [r3, #28]
 8009bdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d208      	bcs.n	8009bf6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009be4:	4b25      	ldr	r3, [pc, #148]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	699b      	ldr	r3, [r3, #24]
 8009bf0:	4922      	ldr	r1, [pc, #136]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0320 	and.w	r3, r3, #32
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d010      	beq.n	8009c24 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	69da      	ldr	r2, [r3, #28]
 8009c06:	4b1d      	ldr	r3, [pc, #116]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009c08:	6a1b      	ldr	r3, [r3, #32]
 8009c0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d208      	bcs.n	8009c24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009c12:	4b1a      	ldr	r3, [pc, #104]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009c14:	6a1b      	ldr	r3, [r3, #32]
 8009c16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	4917      	ldr	r1, [pc, #92]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009c24:	f000 f834 	bl	8009c90 <HAL_RCC_GetSysClockFreq>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	4b14      	ldr	r3, [pc, #80]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	0a1b      	lsrs	r3, r3, #8
 8009c30:	f003 030f 	and.w	r3, r3, #15
 8009c34:	4912      	ldr	r1, [pc, #72]	; (8009c80 <HAL_RCC_ClockConfig+0x35c>)
 8009c36:	5ccb      	ldrb	r3, [r1, r3]
 8009c38:	f003 031f 	and.w	r3, r3, #31
 8009c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c42:	4b0e      	ldr	r3, [pc, #56]	; (8009c7c <HAL_RCC_ClockConfig+0x358>)
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	4a0d      	ldr	r2, [pc, #52]	; (8009c80 <HAL_RCC_ClockConfig+0x35c>)
 8009c4c:	5cd3      	ldrb	r3, [r2, r3]
 8009c4e:	f003 031f 	and.w	r3, r3, #31
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	fa22 f303 	lsr.w	r3, r2, r3
 8009c58:	4a0a      	ldr	r2, [pc, #40]	; (8009c84 <HAL_RCC_ClockConfig+0x360>)
 8009c5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009c5c:	4a0a      	ldr	r2, [pc, #40]	; (8009c88 <HAL_RCC_ClockConfig+0x364>)
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009c62:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <HAL_RCC_ClockConfig+0x368>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7f9 f8f2 	bl	8002e50 <HAL_InitTick>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3718      	adds	r7, #24
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	bf00      	nop
 8009c7c:	58024400 	.word	0x58024400
 8009c80:	08014638 	.word	0x08014638
 8009c84:	20000004 	.word	0x20000004
 8009c88:	20000000 	.word	0x20000000
 8009c8c:	20000008 	.word	0x20000008

08009c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b089      	sub	sp, #36	; 0x24
 8009c94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009c96:	4bb3      	ldr	r3, [pc, #716]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c98:	691b      	ldr	r3, [r3, #16]
 8009c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c9e:	2b18      	cmp	r3, #24
 8009ca0:	f200 8155 	bhi.w	8009f4e <HAL_RCC_GetSysClockFreq+0x2be>
 8009ca4:	a201      	add	r2, pc, #4	; (adr r2, 8009cac <HAL_RCC_GetSysClockFreq+0x1c>)
 8009ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009caa:	bf00      	nop
 8009cac:	08009d11 	.word	0x08009d11
 8009cb0:	08009f4f 	.word	0x08009f4f
 8009cb4:	08009f4f 	.word	0x08009f4f
 8009cb8:	08009f4f 	.word	0x08009f4f
 8009cbc:	08009f4f 	.word	0x08009f4f
 8009cc0:	08009f4f 	.word	0x08009f4f
 8009cc4:	08009f4f 	.word	0x08009f4f
 8009cc8:	08009f4f 	.word	0x08009f4f
 8009ccc:	08009d37 	.word	0x08009d37
 8009cd0:	08009f4f 	.word	0x08009f4f
 8009cd4:	08009f4f 	.word	0x08009f4f
 8009cd8:	08009f4f 	.word	0x08009f4f
 8009cdc:	08009f4f 	.word	0x08009f4f
 8009ce0:	08009f4f 	.word	0x08009f4f
 8009ce4:	08009f4f 	.word	0x08009f4f
 8009ce8:	08009f4f 	.word	0x08009f4f
 8009cec:	08009d3d 	.word	0x08009d3d
 8009cf0:	08009f4f 	.word	0x08009f4f
 8009cf4:	08009f4f 	.word	0x08009f4f
 8009cf8:	08009f4f 	.word	0x08009f4f
 8009cfc:	08009f4f 	.word	0x08009f4f
 8009d00:	08009f4f 	.word	0x08009f4f
 8009d04:	08009f4f 	.word	0x08009f4f
 8009d08:	08009f4f 	.word	0x08009f4f
 8009d0c:	08009d43 	.word	0x08009d43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d10:	4b94      	ldr	r3, [pc, #592]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 0320 	and.w	r3, r3, #32
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d009      	beq.n	8009d30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d1c:	4b91      	ldr	r3, [pc, #580]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	08db      	lsrs	r3, r3, #3
 8009d22:	f003 0303 	and.w	r3, r3, #3
 8009d26:	4a90      	ldr	r2, [pc, #576]	; (8009f68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009d28:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009d2e:	e111      	b.n	8009f54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009d30:	4b8d      	ldr	r3, [pc, #564]	; (8009f68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009d32:	61bb      	str	r3, [r7, #24]
    break;
 8009d34:	e10e      	b.n	8009f54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009d36:	4b8d      	ldr	r3, [pc, #564]	; (8009f6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d38:	61bb      	str	r3, [r7, #24]
    break;
 8009d3a:	e10b      	b.n	8009f54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009d3c:	4b8c      	ldr	r3, [pc, #560]	; (8009f70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009d3e:	61bb      	str	r3, [r7, #24]
    break;
 8009d40:	e108      	b.n	8009f54 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d42:	4b88      	ldr	r3, [pc, #544]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d46:	f003 0303 	and.w	r3, r3, #3
 8009d4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009d4c:	4b85      	ldr	r3, [pc, #532]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d50:	091b      	lsrs	r3, r3, #4
 8009d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009d58:	4b82      	ldr	r3, [pc, #520]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d5c:	f003 0301 	and.w	r3, r3, #1
 8009d60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d62:	4b80      	ldr	r3, [pc, #512]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d66:	08db      	lsrs	r3, r3, #3
 8009d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d6c:	68fa      	ldr	r2, [r7, #12]
 8009d6e:	fb02 f303 	mul.w	r3, r2, r3
 8009d72:	ee07 3a90 	vmov	s15, r3
 8009d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f000 80e1 	beq.w	8009f48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	2b02      	cmp	r3, #2
 8009d8a:	f000 8083 	beq.w	8009e94 <HAL_RCC_GetSysClockFreq+0x204>
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	2b02      	cmp	r3, #2
 8009d92:	f200 80a1 	bhi.w	8009ed8 <HAL_RCC_GetSysClockFreq+0x248>
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <HAL_RCC_GetSysClockFreq+0x114>
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d056      	beq.n	8009e50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009da2:	e099      	b.n	8009ed8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009da4:	4b6f      	ldr	r3, [pc, #444]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f003 0320 	and.w	r3, r3, #32
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d02d      	beq.n	8009e0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009db0:	4b6c      	ldr	r3, [pc, #432]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	08db      	lsrs	r3, r3, #3
 8009db6:	f003 0303 	and.w	r3, r3, #3
 8009dba:	4a6b      	ldr	r2, [pc, #428]	; (8009f68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8009dc0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	ee07 3a90 	vmov	s15, r3
 8009dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dda:	4b62      	ldr	r3, [pc, #392]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009de2:	ee07 3a90 	vmov	s15, r3
 8009de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8009dee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009f74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009e0a:	e087      	b.n	8009f1c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	ee07 3a90 	vmov	s15, r3
 8009e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009f78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e1e:	4b51      	ldr	r3, [pc, #324]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e26:	ee07 3a90 	vmov	s15, r3
 8009e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009f74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e4e:	e065      	b.n	8009f1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009f7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e62:	4b40      	ldr	r3, [pc, #256]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e6a:	ee07 3a90 	vmov	s15, r3
 8009e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e72:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009f74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e92:	e043      	b.n	8009f1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	ee07 3a90 	vmov	s15, r3
 8009e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009f80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ea6:	4b2f      	ldr	r3, [pc, #188]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009eba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009f74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ed6:	e021      	b.n	8009f1c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	ee07 3a90 	vmov	s15, r3
 8009ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009f7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eea:	4b1e      	ldr	r3, [pc, #120]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ef2:	ee07 3a90 	vmov	s15, r3
 8009ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8009efe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009f74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f1a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009f1c:	4b11      	ldr	r3, [pc, #68]	; (8009f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f20:	0a5b      	lsrs	r3, r3, #9
 8009f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f26:	3301      	adds	r3, #1
 8009f28:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	ee07 3a90 	vmov	s15, r3
 8009f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009f34:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f40:	ee17 3a90 	vmov	r3, s15
 8009f44:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009f46:	e005      	b.n	8009f54 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	61bb      	str	r3, [r7, #24]
    break;
 8009f4c:	e002      	b.n	8009f54 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009f4e:	4b07      	ldr	r3, [pc, #28]	; (8009f6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009f50:	61bb      	str	r3, [r7, #24]
    break;
 8009f52:	bf00      	nop
  }

  return sysclockfreq;
 8009f54:	69bb      	ldr	r3, [r7, #24]
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3724      	adds	r7, #36	; 0x24
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	58024400 	.word	0x58024400
 8009f68:	03d09000 	.word	0x03d09000
 8009f6c:	003d0900 	.word	0x003d0900
 8009f70:	017d7840 	.word	0x017d7840
 8009f74:	46000000 	.word	0x46000000
 8009f78:	4c742400 	.word	0x4c742400
 8009f7c:	4a742400 	.word	0x4a742400
 8009f80:	4bbebc20 	.word	0x4bbebc20

08009f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009f8a:	f7ff fe81 	bl	8009c90 <HAL_RCC_GetSysClockFreq>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	4b10      	ldr	r3, [pc, #64]	; (8009fd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009f92:	699b      	ldr	r3, [r3, #24]
 8009f94:	0a1b      	lsrs	r3, r3, #8
 8009f96:	f003 030f 	and.w	r3, r3, #15
 8009f9a:	490f      	ldr	r1, [pc, #60]	; (8009fd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009f9c:	5ccb      	ldrb	r3, [r1, r3]
 8009f9e:	f003 031f 	and.w	r3, r3, #31
 8009fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009fa8:	4b0a      	ldr	r3, [pc, #40]	; (8009fd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	f003 030f 	and.w	r3, r3, #15
 8009fb0:	4a09      	ldr	r2, [pc, #36]	; (8009fd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009fb2:	5cd3      	ldrb	r3, [r2, r3]
 8009fb4:	f003 031f 	and.w	r3, r3, #31
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	fa22 f303 	lsr.w	r3, r2, r3
 8009fbe:	4a07      	ldr	r2, [pc, #28]	; (8009fdc <HAL_RCC_GetHCLKFreq+0x58>)
 8009fc0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009fc2:	4a07      	ldr	r2, [pc, #28]	; (8009fe0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009fc8:	4b04      	ldr	r3, [pc, #16]	; (8009fdc <HAL_RCC_GetHCLKFreq+0x58>)
 8009fca:	681b      	ldr	r3, [r3, #0]
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	58024400 	.word	0x58024400
 8009fd8:	08014638 	.word	0x08014638
 8009fdc:	20000004 	.word	0x20000004
 8009fe0:	20000000 	.word	0x20000000

08009fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009fe8:	f7ff ffcc 	bl	8009f84 <HAL_RCC_GetHCLKFreq>
 8009fec:	4602      	mov	r2, r0
 8009fee:	4b06      	ldr	r3, [pc, #24]	; (800a008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	091b      	lsrs	r3, r3, #4
 8009ff4:	f003 0307 	and.w	r3, r3, #7
 8009ff8:	4904      	ldr	r1, [pc, #16]	; (800a00c <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ffa:	5ccb      	ldrb	r3, [r1, r3]
 8009ffc:	f003 031f 	and.w	r3, r3, #31
 800a000:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a004:	4618      	mov	r0, r3
 800a006:	bd80      	pop	{r7, pc}
 800a008:	58024400 	.word	0x58024400
 800a00c:	08014638 	.word	0x08014638

0800a010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a014:	f7ff ffb6 	bl	8009f84 <HAL_RCC_GetHCLKFreq>
 800a018:	4602      	mov	r2, r0
 800a01a:	4b06      	ldr	r3, [pc, #24]	; (800a034 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	0a1b      	lsrs	r3, r3, #8
 800a020:	f003 0307 	and.w	r3, r3, #7
 800a024:	4904      	ldr	r1, [pc, #16]	; (800a038 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a026:	5ccb      	ldrb	r3, [r1, r3]
 800a028:	f003 031f 	and.w	r3, r3, #31
 800a02c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a030:	4618      	mov	r0, r3
 800a032:	bd80      	pop	{r7, pc}
 800a034:	58024400 	.word	0x58024400
 800a038:	08014638 	.word	0x08014638

0800a03c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a044:	2300      	movs	r3, #0
 800a046:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a048:	2300      	movs	r3, #0
 800a04a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d03f      	beq.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a05c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a060:	d02a      	beq.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a062:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a066:	d824      	bhi.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a06c:	d018      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a06e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a072:	d81e      	bhi.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a074:	2b00      	cmp	r3, #0
 800a076:	d003      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a078:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a07c:	d007      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a07e:	e018      	b.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a080:	4bab      	ldr	r3, [pc, #684]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	4aaa      	ldr	r2, [pc, #680]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a08a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a08c:	e015      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3304      	adds	r3, #4
 800a092:	2102      	movs	r1, #2
 800a094:	4618      	mov	r0, r3
 800a096:	f001 feff 	bl	800be98 <RCCEx_PLL2_Config>
 800a09a:	4603      	mov	r3, r0
 800a09c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a09e:	e00c      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	3324      	adds	r3, #36	; 0x24
 800a0a4:	2102      	movs	r1, #2
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f001 ffa8 	bl	800bffc <RCCEx_PLL3_Config>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a0b0:	e003      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a0b6:	e000      	b.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a0b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0ba:	7dfb      	ldrb	r3, [r7, #23]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d109      	bne.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a0c0:	4b9b      	ldr	r3, [pc, #620]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0cc:	4998      	ldr	r1, [pc, #608]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	650b      	str	r3, [r1, #80]	; 0x50
 800a0d2:	e001      	b.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d03d      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d826      	bhi.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a0ec:	a201      	add	r2, pc, #4	; (adr r2, 800a0f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f2:	bf00      	nop
 800a0f4:	0800a109 	.word	0x0800a109
 800a0f8:	0800a117 	.word	0x0800a117
 800a0fc:	0800a129 	.word	0x0800a129
 800a100:	0800a141 	.word	0x0800a141
 800a104:	0800a141 	.word	0x0800a141
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a108:	4b89      	ldr	r3, [pc, #548]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	4a88      	ldr	r2, [pc, #544]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a10e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a112:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a114:	e015      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	3304      	adds	r3, #4
 800a11a:	2100      	movs	r1, #0
 800a11c:	4618      	mov	r0, r3
 800a11e:	f001 febb 	bl	800be98 <RCCEx_PLL2_Config>
 800a122:	4603      	mov	r3, r0
 800a124:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a126:	e00c      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3324      	adds	r3, #36	; 0x24
 800a12c:	2100      	movs	r1, #0
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 ff64 	bl	800bffc <RCCEx_PLL3_Config>
 800a134:	4603      	mov	r3, r0
 800a136:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a138:	e003      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	75fb      	strb	r3, [r7, #23]
      break;
 800a13e:	e000      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a140:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a142:	7dfb      	ldrb	r3, [r7, #23]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d109      	bne.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a148:	4b79      	ldr	r3, [pc, #484]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a14c:	f023 0207 	bic.w	r2, r3, #7
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a154:	4976      	ldr	r1, [pc, #472]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a156:	4313      	orrs	r3, r2
 800a158:	650b      	str	r3, [r1, #80]	; 0x50
 800a15a:	e001      	b.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d051      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a172:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a176:	d036      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800a178:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a17c:	d830      	bhi.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a17e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a182:	d032      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800a184:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a188:	d82a      	bhi.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a18a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a18e:	d02e      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800a190:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a194:	d824      	bhi.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a19a:	d018      	beq.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a19c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1a0:	d81e      	bhi.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a1a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a1aa:	d007      	beq.n	800a1bc <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a1ac:	e018      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1ae:	4b60      	ldr	r3, [pc, #384]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b2:	4a5f      	ldr	r2, [pc, #380]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1ba:	e019      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3304      	adds	r3, #4
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f001 fe68 	bl	800be98 <RCCEx_PLL2_Config>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a1cc:	e010      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	3324      	adds	r3, #36	; 0x24
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f001 ff11 	bl	800bffc <RCCEx_PLL3_Config>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a1de:	e007      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a1e4:	e004      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a1e6:	bf00      	nop
 800a1e8:	e002      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a1ea:	bf00      	nop
 800a1ec:	e000      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800a1ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d10a      	bne.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a1f6:	4b4e      	ldr	r3, [pc, #312]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1fa:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a204:	494a      	ldr	r1, [pc, #296]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a206:	4313      	orrs	r3, r2
 800a208:	658b      	str	r3, [r1, #88]	; 0x58
 800a20a:	e001      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
 800a20e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d051      	beq.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a222:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a226:	d036      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800a228:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a22c:	d830      	bhi.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a22e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a232:	d032      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800a234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a238:	d82a      	bhi.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a23a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a23e:	d02e      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0x262>
 800a240:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a244:	d824      	bhi.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a246:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a24a:	d018      	beq.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x242>
 800a24c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a250:	d81e      	bhi.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800a252:	2b00      	cmp	r3, #0
 800a254:	d003      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x222>
 800a256:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a25a:	d007      	beq.n	800a26c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a25c:	e018      	b.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a25e:	4b34      	ldr	r3, [pc, #208]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a262:	4a33      	ldr	r2, [pc, #204]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a26a:	e019      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	3304      	adds	r3, #4
 800a270:	2100      	movs	r1, #0
 800a272:	4618      	mov	r0, r3
 800a274:	f001 fe10 	bl	800be98 <RCCEx_PLL2_Config>
 800a278:	4603      	mov	r3, r0
 800a27a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a27c:	e010      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	3324      	adds	r3, #36	; 0x24
 800a282:	2100      	movs	r1, #0
 800a284:	4618      	mov	r0, r3
 800a286:	f001 feb9 	bl	800bffc <RCCEx_PLL3_Config>
 800a28a:	4603      	mov	r3, r0
 800a28c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a28e:	e007      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	75fb      	strb	r3, [r7, #23]
      break;
 800a294:	e004      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a296:	bf00      	nop
 800a298:	e002      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a29a:	bf00      	nop
 800a29c:	e000      	b.n	800a2a0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800a29e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2a0:	7dfb      	ldrb	r3, [r7, #23]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d10a      	bne.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a2a6:	4b22      	ldr	r3, [pc, #136]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2aa:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a2b4:	491e      	ldr	r1, [pc, #120]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	658b      	str	r3, [r1, #88]	; 0x58
 800a2ba:	e001      	b.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d035      	beq.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2d0:	2b30      	cmp	r3, #48	; 0x30
 800a2d2:	d01c      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a2d4:	2b30      	cmp	r3, #48	; 0x30
 800a2d6:	d817      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	d00c      	beq.n	800a2f6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800a2dc:	2b20      	cmp	r3, #32
 800a2de:	d813      	bhi.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d016      	beq.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800a2e4:	2b10      	cmp	r3, #16
 800a2e6:	d10f      	bne.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2e8:	4b11      	ldr	r3, [pc, #68]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	4a10      	ldr	r2, [pc, #64]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a2f4:	e00e      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	2102      	movs	r1, #2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f001 fdcb 	bl	800be98 <RCCEx_PLL2_Config>
 800a302:	4603      	mov	r3, r0
 800a304:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800a306:	e005      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a308:	2301      	movs	r3, #1
 800a30a:	75fb      	strb	r3, [r7, #23]
      break;
 800a30c:	e002      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800a30e:	bf00      	nop
 800a310:	e000      	b.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800a312:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a314:	7dfb      	ldrb	r3, [r7, #23]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10c      	bne.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a31a:	4b05      	ldr	r3, [pc, #20]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a31c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a31e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a326:	4902      	ldr	r1, [pc, #8]	; (800a330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a328:	4313      	orrs	r3, r2
 800a32a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a32c:	e004      	b.n	800a338 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a32e:	bf00      	nop
 800a330:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a340:	2b00      	cmp	r3, #0
 800a342:	d047      	beq.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a348:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a34c:	d030      	beq.n	800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x374>
 800a34e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a352:	d82a      	bhi.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a354:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a358:	d02c      	beq.n	800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800a35a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a35e:	d824      	bhi.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a364:	d018      	beq.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a36a:	d81e      	bhi.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800a370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a374:	d007      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a376:	e018      	b.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a378:	4bac      	ldr	r3, [pc, #688]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a37c:	4aab      	ldr	r2, [pc, #684]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a37e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a382:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a384:	e017      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	3304      	adds	r3, #4
 800a38a:	2100      	movs	r1, #0
 800a38c:	4618      	mov	r0, r3
 800a38e:	f001 fd83 	bl	800be98 <RCCEx_PLL2_Config>
 800a392:	4603      	mov	r3, r0
 800a394:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a396:	e00e      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	3324      	adds	r3, #36	; 0x24
 800a39c:	2100      	movs	r1, #0
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f001 fe2c 	bl	800bffc <RCCEx_PLL3_Config>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a3a8:	e005      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a3ae:	e002      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a3b0:	bf00      	nop
 800a3b2:	e000      	b.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a3b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d109      	bne.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a3bc:	4b9b      	ldr	r3, [pc, #620]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a3be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3c0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3c8:	4998      	ldr	r1, [pc, #608]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	650b      	str	r3, [r1, #80]	; 0x50
 800a3ce:	e001      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3d0:	7dfb      	ldrb	r3, [r7, #23]
 800a3d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d049      	beq.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3e8:	d02e      	beq.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a3ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3ee:	d828      	bhi.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a3f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a3f4:	d02a      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a3f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a3fa:	d822      	bhi.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a3fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a400:	d026      	beq.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a402:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a406:	d81c      	bhi.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a408:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a40c:	d010      	beq.n	800a430 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a40e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a412:	d816      	bhi.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a414:	2b00      	cmp	r3, #0
 800a416:	d01d      	beq.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a41c:	d111      	bne.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	3304      	adds	r3, #4
 800a422:	2101      	movs	r1, #1
 800a424:	4618      	mov	r0, r3
 800a426:	f001 fd37 	bl	800be98 <RCCEx_PLL2_Config>
 800a42a:	4603      	mov	r3, r0
 800a42c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a42e:	e012      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3324      	adds	r3, #36	; 0x24
 800a434:	2101      	movs	r1, #1
 800a436:	4618      	mov	r0, r3
 800a438:	f001 fde0 	bl	800bffc <RCCEx_PLL3_Config>
 800a43c:	4603      	mov	r3, r0
 800a43e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a440:	e009      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a442:	2301      	movs	r3, #1
 800a444:	75fb      	strb	r3, [r7, #23]
      break;
 800a446:	e006      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a448:	bf00      	nop
 800a44a:	e004      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a44c:	bf00      	nop
 800a44e:	e002      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a450:	bf00      	nop
 800a452:	e000      	b.n	800a456 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a454:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a456:	7dfb      	ldrb	r3, [r7, #23]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d109      	bne.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a45c:	4b73      	ldr	r3, [pc, #460]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a45e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a460:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a468:	4970      	ldr	r1, [pc, #448]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a46a:	4313      	orrs	r3, r2
 800a46c:	650b      	str	r3, [r1, #80]	; 0x50
 800a46e:	e001      	b.n	800a474 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a470:	7dfb      	ldrb	r3, [r7, #23]
 800a472:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d04b      	beq.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a48a:	d02e      	beq.n	800a4ea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a48c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a490:	d828      	bhi.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a496:	d02a      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a49c:	d822      	bhi.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a49e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a4a2:	d026      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a4a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a4a8:	d81c      	bhi.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a4aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4ae:	d010      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a4b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4b4:	d816      	bhi.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d01d      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a4ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4be:	d111      	bne.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f001 fce6 	bl	800be98 <RCCEx_PLL2_Config>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a4d0:	e012      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	3324      	adds	r3, #36	; 0x24
 800a4d6:	2101      	movs	r1, #1
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f001 fd8f 	bl	800bffc <RCCEx_PLL3_Config>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a4e2:	e009      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4e8:	e006      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a4ea:	bf00      	nop
 800a4ec:	e004      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a4ee:	bf00      	nop
 800a4f0:	e002      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a4f2:	bf00      	nop
 800a4f4:	e000      	b.n	800a4f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a4f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4f8:	7dfb      	ldrb	r3, [r7, #23]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d10a      	bne.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a4fe:	4b4b      	ldr	r3, [pc, #300]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a502:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a50c:	4947      	ldr	r1, [pc, #284]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a50e:	4313      	orrs	r3, r2
 800a510:	658b      	str	r3, [r1, #88]	; 0x58
 800a512:	e001      	b.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a514:	7dfb      	ldrb	r3, [r7, #23]
 800a516:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a520:	2b00      	cmp	r3, #0
 800a522:	d02f      	beq.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a52c:	d00e      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a52e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a532:	d814      	bhi.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a534:	2b00      	cmp	r3, #0
 800a536:	d015      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a538:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a53c:	d10f      	bne.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a53e:	4b3b      	ldr	r3, [pc, #236]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a542:	4a3a      	ldr	r2, [pc, #232]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a548:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a54a:	e00c      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3304      	adds	r3, #4
 800a550:	2101      	movs	r1, #1
 800a552:	4618      	mov	r0, r3
 800a554:	f001 fca0 	bl	800be98 <RCCEx_PLL2_Config>
 800a558:	4603      	mov	r3, r0
 800a55a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a55c:	e003      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a55e:	2301      	movs	r3, #1
 800a560:	75fb      	strb	r3, [r7, #23]
      break;
 800a562:	e000      	b.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a564:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a566:	7dfb      	ldrb	r3, [r7, #23]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d109      	bne.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a56c:	4b2f      	ldr	r3, [pc, #188]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a56e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a570:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a578:	492c      	ldr	r1, [pc, #176]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	650b      	str	r3, [r1, #80]	; 0x50
 800a57e:	e001      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a580:	7dfb      	ldrb	r3, [r7, #23]
 800a582:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d032      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a594:	2b03      	cmp	r3, #3
 800a596:	d81b      	bhi.n	800a5d0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a598:	a201      	add	r2, pc, #4	; (adr r2, 800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59e:	bf00      	nop
 800a5a0:	0800a5d7 	.word	0x0800a5d7
 800a5a4:	0800a5b1 	.word	0x0800a5b1
 800a5a8:	0800a5bf 	.word	0x0800a5bf
 800a5ac:	0800a5d7 	.word	0x0800a5d7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5b0:	4b1e      	ldr	r3, [pc, #120]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b4:	4a1d      	ldr	r2, [pc, #116]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a5b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a5bc:	e00c      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	3304      	adds	r3, #4
 800a5c2:	2102      	movs	r1, #2
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f001 fc67 	bl	800be98 <RCCEx_PLL2_Config>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a5ce:	e003      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d4:	e000      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a5d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5d8:	7dfb      	ldrb	r3, [r7, #23]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d109      	bne.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a5de:	4b13      	ldr	r3, [pc, #76]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a5e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5e2:	f023 0203 	bic.w	r2, r3, #3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ea:	4910      	ldr	r1, [pc, #64]	; (800a62c <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a5f0:	e001      	b.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5f2:	7dfb      	ldrb	r3, [r7, #23]
 800a5f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 808a 	beq.w	800a718 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a604:	4b0a      	ldr	r3, [pc, #40]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a09      	ldr	r2, [pc, #36]	; (800a630 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800a60a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a60e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a610:	f7f8 fc68 	bl	8002ee4 <HAL_GetTick>
 800a614:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a616:	e00d      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a618:	f7f8 fc64 	bl	8002ee4 <HAL_GetTick>
 800a61c:	4602      	mov	r2, r0
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	1ad3      	subs	r3, r2, r3
 800a622:	2b64      	cmp	r3, #100	; 0x64
 800a624:	d906      	bls.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800a626:	2303      	movs	r3, #3
 800a628:	75fb      	strb	r3, [r7, #23]
        break;
 800a62a:	e009      	b.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a62c:	58024400 	.word	0x58024400
 800a630:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a634:	4bb9      	ldr	r3, [pc, #740]	; (800a91c <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d0eb      	beq.n	800a618 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 800a640:	7dfb      	ldrb	r3, [r7, #23]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d166      	bne.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a646:	4bb6      	ldr	r3, [pc, #728]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a648:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a650:	4053      	eors	r3, r2
 800a652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a656:	2b00      	cmp	r3, #0
 800a658:	d013      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a65a:	4bb1      	ldr	r3, [pc, #708]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a65c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a65e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a662:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a664:	4bae      	ldr	r3, [pc, #696]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a668:	4aad      	ldr	r2, [pc, #692]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a66a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a66e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a670:	4bab      	ldr	r3, [pc, #684]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a674:	4aaa      	ldr	r2, [pc, #680]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a67a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a67c:	4aa8      	ldr	r2, [pc, #672]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a68c:	d115      	bne.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a68e:	f7f8 fc29 	bl	8002ee4 <HAL_GetTick>
 800a692:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a694:	e00b      	b.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a696:	f7f8 fc25 	bl	8002ee4 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d902      	bls.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	75fb      	strb	r3, [r7, #23]
            break;
 800a6ac:	e005      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6ae:	4b9c      	ldr	r3, [pc, #624]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6b2:	f003 0302 	and.w	r3, r3, #2
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d0ed      	beq.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800a6ba:	7dfb      	ldrb	r3, [r7, #23]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d126      	bne.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a6c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6ce:	d10d      	bne.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 800a6d0:	4b93      	ldr	r3, [pc, #588]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a6de:	0919      	lsrs	r1, r3, #4
 800a6e0:	4b90      	ldr	r3, [pc, #576]	; (800a924 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800a6e2:	400b      	ands	r3, r1
 800a6e4:	498e      	ldr	r1, [pc, #568]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	610b      	str	r3, [r1, #16]
 800a6ea:	e005      	b.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800a6ec:	4b8c      	ldr	r3, [pc, #560]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	4a8b      	ldr	r2, [pc, #556]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a6f6:	6113      	str	r3, [r2, #16]
 800a6f8:	4b89      	ldr	r3, [pc, #548]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a6fa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a706:	4986      	ldr	r1, [pc, #536]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a708:	4313      	orrs	r3, r2
 800a70a:	670b      	str	r3, [r1, #112]	; 0x70
 800a70c:	e004      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
 800a710:	75bb      	strb	r3, [r7, #22]
 800a712:	e001      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a714:	7dfb      	ldrb	r3, [r7, #23]
 800a716:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f003 0301 	and.w	r3, r3, #1
 800a720:	2b00      	cmp	r3, #0
 800a722:	d07e      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a728:	2b28      	cmp	r3, #40	; 0x28
 800a72a:	d867      	bhi.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 800a72c:	a201      	add	r2, pc, #4	; (adr r2, 800a734 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 800a72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a732:	bf00      	nop
 800a734:	0800a803 	.word	0x0800a803
 800a738:	0800a7fd 	.word	0x0800a7fd
 800a73c:	0800a7fd 	.word	0x0800a7fd
 800a740:	0800a7fd 	.word	0x0800a7fd
 800a744:	0800a7fd 	.word	0x0800a7fd
 800a748:	0800a7fd 	.word	0x0800a7fd
 800a74c:	0800a7fd 	.word	0x0800a7fd
 800a750:	0800a7fd 	.word	0x0800a7fd
 800a754:	0800a7d9 	.word	0x0800a7d9
 800a758:	0800a7fd 	.word	0x0800a7fd
 800a75c:	0800a7fd 	.word	0x0800a7fd
 800a760:	0800a7fd 	.word	0x0800a7fd
 800a764:	0800a7fd 	.word	0x0800a7fd
 800a768:	0800a7fd 	.word	0x0800a7fd
 800a76c:	0800a7fd 	.word	0x0800a7fd
 800a770:	0800a7fd 	.word	0x0800a7fd
 800a774:	0800a7eb 	.word	0x0800a7eb
 800a778:	0800a7fd 	.word	0x0800a7fd
 800a77c:	0800a7fd 	.word	0x0800a7fd
 800a780:	0800a7fd 	.word	0x0800a7fd
 800a784:	0800a7fd 	.word	0x0800a7fd
 800a788:	0800a7fd 	.word	0x0800a7fd
 800a78c:	0800a7fd 	.word	0x0800a7fd
 800a790:	0800a7fd 	.word	0x0800a7fd
 800a794:	0800a803 	.word	0x0800a803
 800a798:	0800a7fd 	.word	0x0800a7fd
 800a79c:	0800a7fd 	.word	0x0800a7fd
 800a7a0:	0800a7fd 	.word	0x0800a7fd
 800a7a4:	0800a7fd 	.word	0x0800a7fd
 800a7a8:	0800a7fd 	.word	0x0800a7fd
 800a7ac:	0800a7fd 	.word	0x0800a7fd
 800a7b0:	0800a7fd 	.word	0x0800a7fd
 800a7b4:	0800a803 	.word	0x0800a803
 800a7b8:	0800a7fd 	.word	0x0800a7fd
 800a7bc:	0800a7fd 	.word	0x0800a7fd
 800a7c0:	0800a7fd 	.word	0x0800a7fd
 800a7c4:	0800a7fd 	.word	0x0800a7fd
 800a7c8:	0800a7fd 	.word	0x0800a7fd
 800a7cc:	0800a7fd 	.word	0x0800a7fd
 800a7d0:	0800a7fd 	.word	0x0800a7fd
 800a7d4:	0800a803 	.word	0x0800a803
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	3304      	adds	r3, #4
 800a7dc:	2101      	movs	r1, #1
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f001 fb5a 	bl	800be98 <RCCEx_PLL2_Config>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a7e8:	e00c      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	3324      	adds	r3, #36	; 0x24
 800a7ee:	2101      	movs	r1, #1
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f001 fc03 	bl	800bffc <RCCEx_PLL3_Config>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a7fa:	e003      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a800:	e000      	b.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 800a802:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a804:	7dfb      	ldrb	r3, [r7, #23]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d109      	bne.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a80a:	4b45      	ldr	r3, [pc, #276]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a80e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a816:	4942      	ldr	r1, [pc, #264]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a818:	4313      	orrs	r3, r2
 800a81a:	654b      	str	r3, [r1, #84]	; 0x54
 800a81c:	e001      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81e:	7dfb      	ldrb	r3, [r7, #23]
 800a820:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 0302 	and.w	r3, r3, #2
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d037      	beq.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a832:	2b05      	cmp	r3, #5
 800a834:	d820      	bhi.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800a836:	a201      	add	r2, pc, #4	; (adr r2, 800a83c <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800a838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83c:	0800a87f 	.word	0x0800a87f
 800a840:	0800a855 	.word	0x0800a855
 800a844:	0800a867 	.word	0x0800a867
 800a848:	0800a87f 	.word	0x0800a87f
 800a84c:	0800a87f 	.word	0x0800a87f
 800a850:	0800a87f 	.word	0x0800a87f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	3304      	adds	r3, #4
 800a858:	2101      	movs	r1, #1
 800a85a:	4618      	mov	r0, r3
 800a85c:	f001 fb1c 	bl	800be98 <RCCEx_PLL2_Config>
 800a860:	4603      	mov	r3, r0
 800a862:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a864:	e00c      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	3324      	adds	r3, #36	; 0x24
 800a86a:	2101      	movs	r1, #1
 800a86c:	4618      	mov	r0, r3
 800a86e:	f001 fbc5 	bl	800bffc <RCCEx_PLL3_Config>
 800a872:	4603      	mov	r3, r0
 800a874:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a876:	e003      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	75fb      	strb	r3, [r7, #23]
      break;
 800a87c:	e000      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800a87e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a880:	7dfb      	ldrb	r3, [r7, #23]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d109      	bne.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a886:	4b26      	ldr	r3, [pc, #152]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a88a:	f023 0207 	bic.w	r2, r3, #7
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a892:	4923      	ldr	r1, [pc, #140]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a894:	4313      	orrs	r3, r2
 800a896:	654b      	str	r3, [r1, #84]	; 0x54
 800a898:	e001      	b.n	800a89e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
 800a89c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 0304 	and.w	r3, r3, #4
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d040      	beq.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a8b0:	2b05      	cmp	r3, #5
 800a8b2:	d821      	bhi.n	800a8f8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800a8b4:	a201      	add	r2, pc, #4	; (adr r2, 800a8bc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800a8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ba:	bf00      	nop
 800a8bc:	0800a8ff 	.word	0x0800a8ff
 800a8c0:	0800a8d5 	.word	0x0800a8d5
 800a8c4:	0800a8e7 	.word	0x0800a8e7
 800a8c8:	0800a8ff 	.word	0x0800a8ff
 800a8cc:	0800a8ff 	.word	0x0800a8ff
 800a8d0:	0800a8ff 	.word	0x0800a8ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	3304      	adds	r3, #4
 800a8d8:	2101      	movs	r1, #1
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f001 fadc 	bl	800be98 <RCCEx_PLL2_Config>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a8e4:	e00c      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	3324      	adds	r3, #36	; 0x24
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f001 fb85 	bl	800bffc <RCCEx_PLL3_Config>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a8f6:	e003      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a8fc:	e000      	b.n	800a900 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800a8fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a900:	7dfb      	ldrb	r3, [r7, #23]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d110      	bne.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a906:	4b06      	ldr	r3, [pc, #24]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a90a:	f023 0207 	bic.w	r2, r3, #7
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a914:	4902      	ldr	r1, [pc, #8]	; (800a920 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800a916:	4313      	orrs	r3, r2
 800a918:	658b      	str	r3, [r1, #88]	; 0x58
 800a91a:	e007      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800a91c:	58024800 	.word	0x58024800
 800a920:	58024400 	.word	0x58024400
 800a924:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f003 0320 	and.w	r3, r3, #32
 800a934:	2b00      	cmp	r3, #0
 800a936:	d04b      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a93e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a942:	d02e      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a948:	d828      	bhi.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a94a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a94e:	d02a      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a954:	d822      	bhi.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a956:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a95a:	d026      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a95c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a960:	d81c      	bhi.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a966:	d010      	beq.n	800a98a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800a968:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a96c:	d816      	bhi.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d01d      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0x972>
 800a972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a976:	d111      	bne.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	3304      	adds	r3, #4
 800a97c:	2100      	movs	r1, #0
 800a97e:	4618      	mov	r0, r3
 800a980:	f001 fa8a 	bl	800be98 <RCCEx_PLL2_Config>
 800a984:	4603      	mov	r3, r0
 800a986:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a988:	e012      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	3324      	adds	r3, #36	; 0x24
 800a98e:	2102      	movs	r1, #2
 800a990:	4618      	mov	r0, r3
 800a992:	f001 fb33 	bl	800bffc <RCCEx_PLL3_Config>
 800a996:	4603      	mov	r3, r0
 800a998:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a99a:	e009      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	75fb      	strb	r3, [r7, #23]
      break;
 800a9a0:	e006      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a9a2:	bf00      	nop
 800a9a4:	e004      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a9a6:	bf00      	nop
 800a9a8:	e002      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a9aa:	bf00      	nop
 800a9ac:	e000      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800a9ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9b0:	7dfb      	ldrb	r3, [r7, #23]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d10a      	bne.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a9b6:	4bb2      	ldr	r3, [pc, #712]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9c4:	49ae      	ldr	r1, [pc, #696]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	654b      	str	r3, [r1, #84]	; 0x54
 800a9ca:	e001      	b.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9cc:	7dfb      	ldrb	r3, [r7, #23]
 800a9ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d04b      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a9e6:	d02e      	beq.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a9e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a9ec:	d828      	bhi.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a9ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9f2:	d02a      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a9f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9f8:	d822      	bhi.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800a9fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a9fe:	d026      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800aa00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa04:	d81c      	bhi.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800aa06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa0a:	d010      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 800aa0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa10:	d816      	bhi.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d01d      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800aa16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa1a:	d111      	bne.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	3304      	adds	r3, #4
 800aa20:	2100      	movs	r1, #0
 800aa22:	4618      	mov	r0, r3
 800aa24:	f001 fa38 	bl	800be98 <RCCEx_PLL2_Config>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800aa2c:	e012      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	3324      	adds	r3, #36	; 0x24
 800aa32:	2102      	movs	r1, #2
 800aa34:	4618      	mov	r0, r3
 800aa36:	f001 fae1 	bl	800bffc <RCCEx_PLL3_Config>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800aa3e:	e009      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa40:	2301      	movs	r3, #1
 800aa42:	75fb      	strb	r3, [r7, #23]
      break;
 800aa44:	e006      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800aa46:	bf00      	nop
 800aa48:	e004      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800aa4a:	bf00      	nop
 800aa4c:	e002      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800aa4e:	bf00      	nop
 800aa50:	e000      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 800aa52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa54:	7dfb      	ldrb	r3, [r7, #23]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d10a      	bne.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aa5a:	4b89      	ldr	r3, [pc, #548]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800aa5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa5e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa68:	4985      	ldr	r1, [pc, #532]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	658b      	str	r3, [r1, #88]	; 0x58
 800aa6e:	e001      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa70:	7dfb      	ldrb	r3, [r7, #23]
 800aa72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d04b      	beq.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aa8a:	d02e      	beq.n	800aaea <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800aa8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800aa90:	d828      	bhi.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800aa92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa96:	d02a      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800aa98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa9c:	d822      	bhi.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800aa9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aaa2:	d026      	beq.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800aaa4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800aaa8:	d81c      	bhi.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800aaaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaae:	d010      	beq.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 800aab0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aab4:	d816      	bhi.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d01d      	beq.n	800aaf6 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800aaba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aabe:	d111      	bne.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	3304      	adds	r3, #4
 800aac4:	2100      	movs	r1, #0
 800aac6:	4618      	mov	r0, r3
 800aac8:	f001 f9e6 	bl	800be98 <RCCEx_PLL2_Config>
 800aacc:	4603      	mov	r3, r0
 800aace:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800aad0:	e012      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3324      	adds	r3, #36	; 0x24
 800aad6:	2102      	movs	r1, #2
 800aad8:	4618      	mov	r0, r3
 800aada:	f001 fa8f 	bl	800bffc <RCCEx_PLL3_Config>
 800aade:	4603      	mov	r3, r0
 800aae0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800aae2:	e009      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	75fb      	strb	r3, [r7, #23]
      break;
 800aae8:	e006      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800aaea:	bf00      	nop
 800aaec:	e004      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800aaee:	bf00      	nop
 800aaf0:	e002      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800aaf2:	bf00      	nop
 800aaf4:	e000      	b.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800aaf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d10a      	bne.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aafe:	4b60      	ldr	r3, [pc, #384]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ab00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab0c:	495c      	ldr	r1, [pc, #368]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	658b      	str	r3, [r1, #88]	; 0x58
 800ab12:	e001      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab14:	7dfb      	ldrb	r3, [r7, #23]
 800ab16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f003 0308 	and.w	r3, r3, #8
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d018      	beq.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab2c:	d10a      	bne.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	3324      	adds	r3, #36	; 0x24
 800ab32:	2102      	movs	r1, #2
 800ab34:	4618      	mov	r0, r3
 800ab36:	f001 fa61 	bl	800bffc <RCCEx_PLL3_Config>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ab44:	4b4e      	ldr	r3, [pc, #312]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ab46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab48:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab50:	494b      	ldr	r1, [pc, #300]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ab52:	4313      	orrs	r3, r2
 800ab54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 0310 	and.w	r3, r3, #16
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d01a      	beq.n	800ab98 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab6c:	d10a      	bne.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	3324      	adds	r3, #36	; 0x24
 800ab72:	2102      	movs	r1, #2
 800ab74:	4618      	mov	r0, r3
 800ab76:	f001 fa41 	bl	800bffc <RCCEx_PLL3_Config>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800ab80:	2301      	movs	r3, #1
 800ab82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab84:	4b3e      	ldr	r3, [pc, #248]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ab86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab92:	493b      	ldr	r1, [pc, #236]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ab94:	4313      	orrs	r3, r2
 800ab96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d034      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800abaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abae:	d01d      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800abb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800abb4:	d817      	bhi.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800abba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abbe:	d009      	beq.n	800abd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800abc0:	e011      	b.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	3304      	adds	r3, #4
 800abc6:	2100      	movs	r1, #0
 800abc8:	4618      	mov	r0, r3
 800abca:	f001 f965 	bl	800be98 <RCCEx_PLL2_Config>
 800abce:	4603      	mov	r3, r0
 800abd0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800abd2:	e00c      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	3324      	adds	r3, #36	; 0x24
 800abd8:	2102      	movs	r1, #2
 800abda:	4618      	mov	r0, r3
 800abdc:	f001 fa0e 	bl	800bffc <RCCEx_PLL3_Config>
 800abe0:	4603      	mov	r3, r0
 800abe2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800abe4:	e003      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	75fb      	strb	r3, [r7, #23]
      break;
 800abea:	e000      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800abec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abee:	7dfb      	ldrb	r3, [r7, #23]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d10a      	bne.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800abf4:	4b22      	ldr	r3, [pc, #136]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800abf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac02:	491f      	ldr	r1, [pc, #124]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ac04:	4313      	orrs	r3, r2
 800ac06:	658b      	str	r3, [r1, #88]	; 0x58
 800ac08:	e001      	b.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac0a:	7dfb      	ldrb	r3, [r7, #23]
 800ac0c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d036      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac24:	d01c      	beq.n	800ac60 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ac26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ac2a:	d816      	bhi.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800ac2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac30:	d003      	beq.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800ac32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac36:	d007      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800ac38:	e00f      	b.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac3a:	4b11      	ldr	r3, [pc, #68]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ac3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3e:	4a10      	ldr	r2, [pc, #64]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ac40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ac46:	e00c      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	3324      	adds	r3, #36	; 0x24
 800ac4c:	2101      	movs	r1, #1
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f001 f9d4 	bl	800bffc <RCCEx_PLL3_Config>
 800ac54:	4603      	mov	r3, r0
 800ac56:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ac58:	e003      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	75fb      	strb	r3, [r7, #23]
      break;
 800ac5e:	e000      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800ac60:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac62:	7dfb      	ldrb	r3, [r7, #23]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d10d      	bne.n	800ac84 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac68:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ac6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac76:	4902      	ldr	r1, [pc, #8]	; (800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	654b      	str	r3, [r1, #84]	; 0x54
 800ac7c:	e004      	b.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 800ac7e:	bf00      	nop
 800ac80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac84:	7dfb      	ldrb	r3, [r7, #23]
 800ac86:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d029      	beq.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d003      	beq.n	800aca4 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800ac9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aca0:	d007      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800aca2:	e00f      	b.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aca4:	4b61      	ldr	r3, [pc, #388]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca8:	4a60      	ldr	r2, [pc, #384]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800acaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800acb0:	e00b      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	3304      	adds	r3, #4
 800acb6:	2102      	movs	r1, #2
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 f8ed 	bl	800be98 <RCCEx_PLL2_Config>
 800acbe:	4603      	mov	r3, r0
 800acc0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800acc2:	e002      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800acc4:	2301      	movs	r3, #1
 800acc6:	75fb      	strb	r3, [r7, #23]
      break;
 800acc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acca:	7dfb      	ldrb	r3, [r7, #23]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d109      	bne.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800acd0:	4b56      	ldr	r3, [pc, #344]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800acd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acdc:	4953      	ldr	r1, [pc, #332]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800acde:	4313      	orrs	r3, r2
 800ace0:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ace2:	e001      	b.n	800ace8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ace4:	7dfb      	ldrb	r3, [r7, #23]
 800ace6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00a      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	3324      	adds	r3, #36	; 0x24
 800acf8:	2102      	movs	r1, #2
 800acfa:	4618      	mov	r0, r3
 800acfc:	f001 f97e 	bl	800bffc <RCCEx_PLL3_Config>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d001      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d030      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad1e:	d017      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800ad20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad24:	d811      	bhi.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ad26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad2a:	d013      	beq.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 800ad2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad30:	d80b      	bhi.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d010      	beq.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800ad36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad3a:	d106      	bne.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad3c:	4b3b      	ldr	r3, [pc, #236]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad40:	4a3a      	ldr	r2, [pc, #232]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ad48:	e007      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	75fb      	strb	r3, [r7, #23]
      break;
 800ad4e:	e004      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800ad50:	bf00      	nop
 800ad52:	e002      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800ad54:	bf00      	nop
 800ad56:	e000      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800ad58:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad5a:	7dfb      	ldrb	r3, [r7, #23]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d109      	bne.n	800ad74 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad60:	4b32      	ldr	r3, [pc, #200]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad6c:	492f      	ldr	r1, [pc, #188]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	654b      	str	r3, [r1, #84]	; 0x54
 800ad72:	e001      	b.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
 800ad76:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d008      	beq.n	800ad96 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ad84:	4b29      	ldr	r3, [pc, #164]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad90:	4926      	ldr	r1, [pc, #152]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ad92:	4313      	orrs	r3, r2
 800ad94:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d008      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ada2:	4b22      	ldr	r3, [pc, #136]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ada4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ada6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adae:	491f      	ldr	r1, [pc, #124]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00d      	beq.n	800addc <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800adc0:	4b1a      	ldr	r3, [pc, #104]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800adc2:	691b      	ldr	r3, [r3, #16]
 800adc4:	4a19      	ldr	r2, [pc, #100]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800adc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adca:	6113      	str	r3, [r2, #16]
 800adcc:	4b17      	ldr	r3, [pc, #92]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800adce:	691a      	ldr	r2, [r3, #16]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800add6:	4915      	ldr	r1, [pc, #84]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800add8:	4313      	orrs	r3, r2
 800adda:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	da08      	bge.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ade4:	4b11      	ldr	r3, [pc, #68]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ade6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adf0:	490e      	ldr	r1, [pc, #56]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800adf2:	4313      	orrs	r3, r2
 800adf4:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d009      	beq.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae02:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae10:	4906      	ldr	r1, [pc, #24]	; (800ae2c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800ae12:	4313      	orrs	r3, r2
 800ae14:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800ae16:	7dbb      	ldrb	r3, [r7, #22]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d101      	bne.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	e000      	b.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800ae20:	2301      	movs	r3, #1
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3718      	adds	r7, #24
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bd80      	pop	{r7, pc}
 800ae2a:	bf00      	nop
 800ae2c:	58024400 	.word	0x58024400

0800ae30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b090      	sub	sp, #64	; 0x40
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae3e:	f040 8089 	bne.w	800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800ae42:	4b95      	ldr	r3, [pc, #596]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ae44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	633b      	str	r3, [r7, #48]	; 0x30
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	d87d      	bhi.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 800ae52:	a201      	add	r2, pc, #4	; (adr r2, 800ae58 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800ae54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae58:	0800ae6d 	.word	0x0800ae6d
 800ae5c:	0800ae91 	.word	0x0800ae91
 800ae60:	0800aeb5 	.word	0x0800aeb5
 800ae64:	0800af49 	.word	0x0800af49
 800ae68:	0800aed9 	.word	0x0800aed9

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae6c:	4b8a      	ldr	r3, [pc, #552]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae78:	d107      	bne.n	800ae8a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f000 feb8 	bl	800bbf4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae88:	e3ed      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae8e:	e3ea      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae90:	4b81      	ldr	r3, [pc, #516]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae9c:	d107      	bne.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae9e:	f107 0318 	add.w	r3, r7, #24
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 fbfe 	bl	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aeac:	e3db      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeb2:	e3d8      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aeb4:	4b78      	ldr	r3, [pc, #480]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aec0:	d107      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aec2:	f107 030c 	add.w	r3, r7, #12
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 fd40 	bl	800b94c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aed0:	e3c9      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aed6:	e3c6      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aed8:	4b6f      	ldr	r3, [pc, #444]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aeda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aedc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aee0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aee2:	4b6d      	ldr	r3, [pc, #436]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	f003 0304 	and.w	r3, r3, #4
 800aeea:	2b04      	cmp	r3, #4
 800aeec:	d10c      	bne.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800aeee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d109      	bne.n	800af08 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aef4:	4b68      	ldr	r3, [pc, #416]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	08db      	lsrs	r3, r3, #3
 800aefa:	f003 0303 	and.w	r3, r3, #3
 800aefe:	4a67      	ldr	r2, [pc, #412]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800af00:	fa22 f303 	lsr.w	r3, r2, r3
 800af04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af06:	e01e      	b.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800af08:	4b63      	ldr	r3, [pc, #396]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af14:	d106      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800af16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af1c:	d102      	bne.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800af1e:	4b60      	ldr	r3, [pc, #384]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af22:	e010      	b.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af24:	4b5c      	ldr	r3, [pc, #368]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af30:	d106      	bne.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800af32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af38:	d102      	bne.n	800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af3a:	4b5a      	ldr	r3, [pc, #360]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800af3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af3e:	e002      	b.n	800af46 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800af44:	e38f      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800af46:	e38e      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800af48:	4b57      	ldr	r3, [pc, #348]	; (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800af4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af4c:	e38b      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800af4e:	2300      	movs	r3, #0
 800af50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af52:	e388      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af5a:	f040 80a7 	bne.w	800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800af5e:	4b4e      	ldr	r3, [pc, #312]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800af60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af62:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800af66:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800af68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af6e:	d054      	beq.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af76:	f200 808b 	bhi.w	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af80:	f000 8083 	beq.w	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800af84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af86:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af8a:	f200 8081 	bhi.w	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800af8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af94:	d02f      	beq.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af9c:	d878      	bhi.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d004      	beq.n	800afae <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 800afa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afaa:	d012      	beq.n	800afd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 800afac:	e070      	b.n	800b090 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800afae:	4b3a      	ldr	r3, [pc, #232]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800afba:	d107      	bne.n	800afcc <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800afbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800afc0:	4618      	mov	r0, r3
 800afc2:	f000 fe17 	bl	800bbf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800afc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800afca:	e34c      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800afcc:	2300      	movs	r3, #0
 800afce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afd0:	e349      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800afd2:	4b31      	ldr	r3, [pc, #196]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afde:	d107      	bne.n	800aff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afe0:	f107 0318 	add.w	r3, r7, #24
 800afe4:	4618      	mov	r0, r3
 800afe6:	f000 fb5d 	bl	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800afea:	69bb      	ldr	r3, [r7, #24]
 800afec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800afee:	e33a      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aff4:	e337      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aff6:	4b28      	ldr	r3, [pc, #160]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800affe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b002:	d107      	bne.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b004:	f107 030c 	add.w	r3, r7, #12
 800b008:	4618      	mov	r0, r3
 800b00a:	f000 fc9f 	bl	800b94c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b012:	e328      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b018:	e325      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b01a:	4b1f      	ldr	r3, [pc, #124]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b01e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b022:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b024:	4b1c      	ldr	r3, [pc, #112]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 0304 	and.w	r3, r3, #4
 800b02c:	2b04      	cmp	r3, #4
 800b02e:	d10c      	bne.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800b030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b032:	2b00      	cmp	r3, #0
 800b034:	d109      	bne.n	800b04a <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b036:	4b18      	ldr	r3, [pc, #96]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	08db      	lsrs	r3, r3, #3
 800b03c:	f003 0303 	and.w	r3, r3, #3
 800b040:	4a16      	ldr	r2, [pc, #88]	; (800b09c <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 800b042:	fa22 f303 	lsr.w	r3, r2, r3
 800b046:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b048:	e01e      	b.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b04a:	4b13      	ldr	r3, [pc, #76]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b056:	d106      	bne.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b05a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b05e:	d102      	bne.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b060:	4b0f      	ldr	r3, [pc, #60]	; (800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800b062:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b064:	e010      	b.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b066:	4b0c      	ldr	r3, [pc, #48]	; (800b098 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b06e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b072:	d106      	bne.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 800b074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b07a:	d102      	bne.n	800b082 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b07c:	4b09      	ldr	r3, [pc, #36]	; (800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800b07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b080:	e002      	b.n	800b088 <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b082:	2300      	movs	r3, #0
 800b084:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b086:	e2ee      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b088:	e2ed      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b08a:	4b07      	ldr	r3, [pc, #28]	; (800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b08c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b08e:	e2ea      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b090:	2300      	movs	r3, #0
 800b092:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b094:	e2e7      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b096:	bf00      	nop
 800b098:	58024400 	.word	0x58024400
 800b09c:	03d09000 	.word	0x03d09000
 800b0a0:	003d0900 	.word	0x003d0900
 800b0a4:	017d7840 	.word	0x017d7840
 800b0a8:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b0b2:	f040 809c 	bne.w	800b1ee <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b0b6:	4b9e      	ldr	r3, [pc, #632]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b0be:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0c6:	d054      	beq.n	800b172 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b0ce:	f200 808b 	bhi.w	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0d8:	f000 8083 	beq.w	800b1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b0e2:	f200 8081 	bhi.w	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0ec:	d02f      	beq.n	800b14e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b0f4:	d878      	bhi.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d004      	beq.n	800b106 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800b0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b102:	d012      	beq.n	800b12a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b104:	e070      	b.n	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b106:	4b8a      	ldr	r3, [pc, #552]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b10e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b112:	d107      	bne.n	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b118:	4618      	mov	r0, r3
 800b11a:	f000 fd6b 	bl	800bbf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b120:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b122:	e2a0      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b124:	2300      	movs	r3, #0
 800b126:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b128:	e29d      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b12a:	4b81      	ldr	r3, [pc, #516]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b132:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b136:	d107      	bne.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b138:	f107 0318 	add.w	r3, r7, #24
 800b13c:	4618      	mov	r0, r3
 800b13e:	f000 fab1 	bl	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800b146:	e28e      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b14c:	e28b      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b14e:	4b78      	ldr	r3, [pc, #480]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b156:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b15a:	d107      	bne.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b15c:	f107 030c 	add.w	r3, r7, #12
 800b160:	4618      	mov	r0, r3
 800b162:	f000 fbf3 	bl	800b94c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b16a:	e27c      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b170:	e279      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b172:	4b6f      	ldr	r3, [pc, #444]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b176:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b17a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b17c:	4b6c      	ldr	r3, [pc, #432]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 0304 	and.w	r3, r3, #4
 800b184:	2b04      	cmp	r3, #4
 800b186:	d10c      	bne.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800b188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d109      	bne.n	800b1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b18e:	4b68      	ldr	r3, [pc, #416]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	08db      	lsrs	r3, r3, #3
 800b194:	f003 0303 	and.w	r3, r3, #3
 800b198:	4a66      	ldr	r2, [pc, #408]	; (800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b19a:	fa22 f303 	lsr.w	r3, r2, r3
 800b19e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1a0:	e01e      	b.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1a2:	4b63      	ldr	r3, [pc, #396]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1ae:	d106      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 800b1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1b6:	d102      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b1b8:	4b5f      	ldr	r3, [pc, #380]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1bc:	e010      	b.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1be:	4b5c      	ldr	r3, [pc, #368]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1ca:	d106      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 800b1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1d2:	d102      	bne.n	800b1da <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b1d4:	4b59      	ldr	r3, [pc, #356]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1d8:	e002      	b.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b1de:	e242      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b1e0:	e241      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b1e2:	4b57      	ldr	r3, [pc, #348]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b1e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1e6:	e23e      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b1ec:	e23b      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1f4:	f040 80a6 	bne.w	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b1f8:	4b4d      	ldr	r3, [pc, #308]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b1fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1fc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b200:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b208:	d054      	beq.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b210:	f200 808b 	bhi.w	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b21a:	f000 8083 	beq.w	800b324 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 800b21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b220:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b224:	f200 8081 	bhi.w	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b22e:	d02f      	beq.n	800b290 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 800b230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b236:	d878      	bhi.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d004      	beq.n	800b248 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 800b23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b244:	d012      	beq.n	800b26c <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800b246:	e070      	b.n	800b32a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b248:	4b39      	ldr	r3, [pc, #228]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b254:	d107      	bne.n	800b266 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b256:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b25a:	4618      	mov	r0, r3
 800b25c:	f000 fcca 	bl	800bbf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b262:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b264:	e1ff      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b266:	2300      	movs	r3, #0
 800b268:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b26a:	e1fc      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b26c:	4b30      	ldr	r3, [pc, #192]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b278:	d107      	bne.n	800b28a <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b27a:	f107 0318 	add.w	r3, r7, #24
 800b27e:	4618      	mov	r0, r3
 800b280:	f000 fa10 	bl	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b288:	e1ed      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b28e:	e1ea      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b290:	4b27      	ldr	r3, [pc, #156]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b29c:	d107      	bne.n	800b2ae <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b29e:	f107 030c 	add.w	r3, r7, #12
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f000 fb52 	bl	800b94c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b2ac:	e1db      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b2b2:	e1d8      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b2b4:	4b1e      	ldr	r3, [pc, #120]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b2b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2bc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2be:	4b1c      	ldr	r3, [pc, #112]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f003 0304 	and.w	r3, r3, #4
 800b2c6:	2b04      	cmp	r3, #4
 800b2c8:	d10c      	bne.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 800b2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d109      	bne.n	800b2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b2d0:	4b17      	ldr	r3, [pc, #92]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	08db      	lsrs	r3, r3, #3
 800b2d6:	f003 0303 	and.w	r3, r3, #3
 800b2da:	4a16      	ldr	r2, [pc, #88]	; (800b334 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800b2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2e2:	e01e      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2e4:	4b12      	ldr	r3, [pc, #72]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2f0:	d106      	bne.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2f8:	d102      	bne.n	800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b2fa:	4b0f      	ldr	r3, [pc, #60]	; (800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800b2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2fe:	e010      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b300:	4b0b      	ldr	r3, [pc, #44]	; (800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b30c:	d106      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800b30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b314:	d102      	bne.n	800b31c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b316:	4b09      	ldr	r3, [pc, #36]	; (800b33c <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800b318:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b31a:	e002      	b.n	800b322 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b31c:	2300      	movs	r3, #0
 800b31e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b320:	e1a1      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b322:	e1a0      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b324:	4b06      	ldr	r3, [pc, #24]	; (800b340 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800b326:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b328:	e19d      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800b32a:	2300      	movs	r3, #0
 800b32c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b32e:	e19a      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b330:	58024400 	.word	0x58024400
 800b334:	03d09000 	.word	0x03d09000
 800b338:	003d0900 	.word	0x003d0900
 800b33c:	017d7840 	.word	0x017d7840
 800b340:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b34a:	d173      	bne.n	800b434 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b34c:	4b9a      	ldr	r3, [pc, #616]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b34e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b350:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b354:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b35c:	d02f      	beq.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 800b35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b360:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b364:	d863      	bhi.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d004      	beq.n	800b376 <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 800b36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b372:	d012      	beq.n	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 800b374:	e05b      	b.n	800b42e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b376:	4b90      	ldr	r3, [pc, #576]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b37e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b382:	d107      	bne.n	800b394 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b384:	f107 0318 	add.w	r3, r7, #24
 800b388:	4618      	mov	r0, r3
 800b38a:	f000 f98b 	bl	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b392:	e168      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b394:	2300      	movs	r3, #0
 800b396:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b398:	e165      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b39a:	4b87      	ldr	r3, [pc, #540]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3a6:	d107      	bne.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3a8:	f107 030c 	add.w	r3, r7, #12
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f000 facd 	bl	800b94c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b3b6:	e156      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b3bc:	e153      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b3be:	4b7e      	ldr	r3, [pc, #504]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b3c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3c6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3c8:	4b7b      	ldr	r3, [pc, #492]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f003 0304 	and.w	r3, r3, #4
 800b3d0:	2b04      	cmp	r3, #4
 800b3d2:	d10c      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 800b3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d109      	bne.n	800b3ee <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b3da:	4b77      	ldr	r3, [pc, #476]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	08db      	lsrs	r3, r3, #3
 800b3e0:	f003 0303 	and.w	r3, r3, #3
 800b3e4:	4a75      	ldr	r2, [pc, #468]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b3ec:	e01e      	b.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3ee:	4b72      	ldr	r3, [pc, #456]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3fa:	d106      	bne.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800b3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b402:	d102      	bne.n	800b40a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800b404:	4b6e      	ldr	r3, [pc, #440]	; (800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b408:	e010      	b.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b40a:	4b6b      	ldr	r3, [pc, #428]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b412:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b416:	d106      	bne.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b41e:	d102      	bne.n	800b426 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800b420:	4b68      	ldr	r3, [pc, #416]	; (800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800b422:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b424:	e002      	b.n	800b42c <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800b426:	2300      	movs	r3, #0
 800b428:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800b42a:	e11c      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b42c:	e11b      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b42e:	2300      	movs	r3, #0
 800b430:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b432:	e118      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b43a:	d133      	bne.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b43c:	4b5e      	ldr	r3, [pc, #376]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b43e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b440:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b444:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d004      	beq.n	800b456 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800b44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b44e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b452:	d012      	beq.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 800b454:	e023      	b.n	800b49e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b456:	4b58      	ldr	r3, [pc, #352]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b45e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b462:	d107      	bne.n	800b474 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b468:	4618      	mov	r0, r3
 800b46a:	f000 fbc3 	bl	800bbf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b470:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b472:	e0f8      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b474:	2300      	movs	r3, #0
 800b476:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b478:	e0f5      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b47a:	4b4f      	ldr	r3, [pc, #316]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b482:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b486:	d107      	bne.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b488:	f107 0318 	add.w	r3, r7, #24
 800b48c:	4618      	mov	r0, r3
 800b48e:	f000 f909 	bl	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b492:	6a3b      	ldr	r3, [r7, #32]
 800b494:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b496:	e0e6      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b49c:	e0e3      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4a2:	e0e0      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b4aa:	f040 808d 	bne.w	800b5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b4ae:	4b42      	ldr	r3, [pc, #264]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b4b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4b2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b4b6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4be:	d06b      	beq.n	800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4c6:	d874      	bhi.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4ce:	d056      	beq.n	800b57e <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 800b4d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b4d6:	d86c      	bhi.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4de:	d03b      	beq.n	800b558 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b4e6:	d864      	bhi.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4ee:	d021      	beq.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4f6:	d85c      	bhi.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d004      	beq.n	800b508 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b504:	d004      	beq.n	800b510 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 800b506:	e054      	b.n	800b5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b508:	f000 f8b6 	bl	800b678 <HAL_RCCEx_GetD3PCLK1Freq>
 800b50c:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b50e:	e0aa      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b510:	4b29      	ldr	r3, [pc, #164]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b518:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b51c:	d107      	bne.n	800b52e <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b51e:	f107 0318 	add.w	r3, r7, #24
 800b522:	4618      	mov	r0, r3
 800b524:	f000 f8be 	bl	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b52c:	e09b      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b52e:	2300      	movs	r3, #0
 800b530:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b532:	e098      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b534:	4b20      	ldr	r3, [pc, #128]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b53c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b540:	d107      	bne.n	800b552 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b542:	f107 030c 	add.w	r3, r7, #12
 800b546:	4618      	mov	r0, r3
 800b548:	f000 fa00 	bl	800b94c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b550:	e089      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b556:	e086      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b558:	4b17      	ldr	r3, [pc, #92]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b04      	cmp	r3, #4
 800b562:	d109      	bne.n	800b578 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b564:	4b14      	ldr	r3, [pc, #80]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	08db      	lsrs	r3, r3, #3
 800b56a:	f003 0303 	and.w	r3, r3, #3
 800b56e:	4a13      	ldr	r2, [pc, #76]	; (800b5bc <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 800b570:	fa22 f303 	lsr.w	r3, r2, r3
 800b574:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b576:	e076      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b578:	2300      	movs	r3, #0
 800b57a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b57c:	e073      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b57e:	4b0e      	ldr	r3, [pc, #56]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b58a:	d102      	bne.n	800b592 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 800b58c:	4b0c      	ldr	r3, [pc, #48]	; (800b5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800b58e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b590:	e069      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800b592:	2300      	movs	r3, #0
 800b594:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b596:	e066      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b598:	4b07      	ldr	r3, [pc, #28]	; (800b5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5a4:	d102      	bne.n	800b5ac <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800b5a6:	4b07      	ldr	r3, [pc, #28]	; (800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800b5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b5aa:	e05c      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5b0:	e059      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5b6:	e056      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800b5b8:	58024400 	.word	0x58024400
 800b5bc:	03d09000 	.word	0x03d09000
 800b5c0:	003d0900 	.word	0x003d0900
 800b5c4:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5ce:	d148      	bne.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b5d0:	4b27      	ldr	r3, [pc, #156]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b5d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b5d8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5e0:	d02a      	beq.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5e8:	d838      	bhi.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d004      	beq.n	800b5fa <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 800b5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5f6:	d00d      	beq.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 800b5f8:	e030      	b.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b5fa:	4b1d      	ldr	r3, [pc, #116]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b602:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b606:	d102      	bne.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 800b608:	4b1a      	ldr	r3, [pc, #104]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800b60a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b60c:	e02b      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b60e:	2300      	movs	r3, #0
 800b610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b612:	e028      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b614:	4b16      	ldr	r3, [pc, #88]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b61c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b620:	d107      	bne.n	800b632 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b626:	4618      	mov	r0, r3
 800b628:	f000 fae4 	bl	800bbf4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b630:	e019      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b632:	2300      	movs	r3, #0
 800b634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b636:	e016      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b638:	4b0d      	ldr	r3, [pc, #52]	; (800b670 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b644:	d107      	bne.n	800b656 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b646:	f107 0318 	add.w	r3, r7, #24
 800b64a:	4618      	mov	r0, r3
 800b64c:	f000 f82a 	bl	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b654:	e007      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800b656:	2300      	movs	r3, #0
 800b658:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b65a:	e004      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b660:	e001      	b.n	800b666 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 800b662:	2300      	movs	r3, #0
 800b664:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3740      	adds	r7, #64	; 0x40
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	58024400 	.word	0x58024400
 800b674:	017d7840 	.word	0x017d7840

0800b678 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b67c:	f7fe fc82 	bl	8009f84 <HAL_RCC_GetHCLKFreq>
 800b680:	4602      	mov	r2, r0
 800b682:	4b06      	ldr	r3, [pc, #24]	; (800b69c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	091b      	lsrs	r3, r3, #4
 800b688:	f003 0307 	and.w	r3, r3, #7
 800b68c:	4904      	ldr	r1, [pc, #16]	; (800b6a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b68e:	5ccb      	ldrb	r3, [r1, r3]
 800b690:	f003 031f 	and.w	r3, r3, #31
 800b694:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b698:	4618      	mov	r0, r3
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	58024400 	.word	0x58024400
 800b6a0:	08014638 	.word	0x08014638

0800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b089      	sub	sp, #36	; 0x24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b6ac:	4ba1      	ldr	r3, [pc, #644]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b0:	f003 0303 	and.w	r3, r3, #3
 800b6b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b6b6:	4b9f      	ldr	r3, [pc, #636]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ba:	0b1b      	lsrs	r3, r3, #12
 800b6bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b6c2:	4b9c      	ldr	r3, [pc, #624]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c6:	091b      	lsrs	r3, r3, #4
 800b6c8:	f003 0301 	and.w	r3, r3, #1
 800b6cc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b6ce:	4b99      	ldr	r3, [pc, #612]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d2:	08db      	lsrs	r3, r3, #3
 800b6d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	fb02 f303 	mul.w	r3, r2, r3
 800b6de:	ee07 3a90 	vmov	s15, r3
 800b6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	f000 8111 	beq.w	800b914 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	2b02      	cmp	r3, #2
 800b6f6:	f000 8083 	beq.w	800b800 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b6fa:	69bb      	ldr	r3, [r7, #24]
 800b6fc:	2b02      	cmp	r3, #2
 800b6fe:	f200 80a1 	bhi.w	800b844 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b702:	69bb      	ldr	r3, [r7, #24]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d003      	beq.n	800b710 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b708:	69bb      	ldr	r3, [r7, #24]
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d056      	beq.n	800b7bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b70e:	e099      	b.n	800b844 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b710:	4b88      	ldr	r3, [pc, #544]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f003 0320 	and.w	r3, r3, #32
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d02d      	beq.n	800b778 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b71c:	4b85      	ldr	r3, [pc, #532]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	08db      	lsrs	r3, r3, #3
 800b722:	f003 0303 	and.w	r3, r3, #3
 800b726:	4a84      	ldr	r2, [pc, #528]	; (800b938 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b728:	fa22 f303 	lsr.w	r3, r2, r3
 800b72c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	ee07 3a90 	vmov	s15, r3
 800b734:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	ee07 3a90 	vmov	s15, r3
 800b73e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b746:	4b7b      	ldr	r3, [pc, #492]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b74e:	ee07 3a90 	vmov	s15, r3
 800b752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b756:	ed97 6a03 	vldr	s12, [r7, #12]
 800b75a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b75e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b76a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b76e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b772:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b776:	e087      	b.n	800b888 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	ee07 3a90 	vmov	s15, r3
 800b77e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b782:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b940 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b78a:	4b6a      	ldr	r3, [pc, #424]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b78e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b792:	ee07 3a90 	vmov	s15, r3
 800b796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b79a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b79e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7ba:	e065      	b.n	800b888 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	ee07 3a90 	vmov	s15, r3
 800b7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b7ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ce:	4b59      	ldr	r3, [pc, #356]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d6:	ee07 3a90 	vmov	s15, r3
 800b7da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7de:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7fe:	e043      	b.n	800b888 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	ee07 3a90 	vmov	s15, r3
 800b806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b80a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b80e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b812:	4b48      	ldr	r3, [pc, #288]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b81a:	ee07 3a90 	vmov	s15, r3
 800b81e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b822:	ed97 6a03 	vldr	s12, [r7, #12]
 800b826:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b82a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b82e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b832:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b83a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b83e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b842:	e021      	b.n	800b888 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	ee07 3a90 	vmov	s15, r3
 800b84a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b944 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b856:	4b37      	ldr	r3, [pc, #220]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b85e:	ee07 3a90 	vmov	s15, r3
 800b862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b866:	ed97 6a03 	vldr	s12, [r7, #12]
 800b86a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b93c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b86e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b876:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b87a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b87e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b882:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b886:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b888:	4b2a      	ldr	r3, [pc, #168]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b88c:	0a5b      	lsrs	r3, r3, #9
 800b88e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b892:	ee07 3a90 	vmov	s15, r3
 800b896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b89a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b89e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8ae:	ee17 2a90 	vmov	r2, s15
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b8b6:	4b1f      	ldr	r3, [pc, #124]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ba:	0c1b      	lsrs	r3, r3, #16
 800b8bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8c0:	ee07 3a90 	vmov	s15, r3
 800b8c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8d0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8dc:	ee17 2a90 	vmov	r2, s15
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b8e4:	4b13      	ldr	r3, [pc, #76]	; (800b934 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e8:	0e1b      	lsrs	r3, r3, #24
 800b8ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8fe:	edd7 6a07 	vldr	s13, [r7, #28]
 800b902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b90a:	ee17 2a90 	vmov	r2, s15
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b912:	e008      	b.n	800b926 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	609a      	str	r2, [r3, #8]
}
 800b926:	bf00      	nop
 800b928:	3724      	adds	r7, #36	; 0x24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	58024400 	.word	0x58024400
 800b938:	03d09000 	.word	0x03d09000
 800b93c:	46000000 	.word	0x46000000
 800b940:	4c742400 	.word	0x4c742400
 800b944:	4a742400 	.word	0x4a742400
 800b948:	4bbebc20 	.word	0x4bbebc20

0800b94c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b089      	sub	sp, #36	; 0x24
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b954:	4ba1      	ldr	r3, [pc, #644]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b958:	f003 0303 	and.w	r3, r3, #3
 800b95c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b95e:	4b9f      	ldr	r3, [pc, #636]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b962:	0d1b      	lsrs	r3, r3, #20
 800b964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b968:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b96a:	4b9c      	ldr	r3, [pc, #624]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b96e:	0a1b      	lsrs	r3, r3, #8
 800b970:	f003 0301 	and.w	r3, r3, #1
 800b974:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b976:	4b99      	ldr	r3, [pc, #612]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b97a:	08db      	lsrs	r3, r3, #3
 800b97c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	fb02 f303 	mul.w	r3, r2, r3
 800b986:	ee07 3a90 	vmov	s15, r3
 800b98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 8111 	beq.w	800bbbc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	2b02      	cmp	r3, #2
 800b99e:	f000 8083 	beq.w	800baa8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b9a2:	69bb      	ldr	r3, [r7, #24]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	f200 80a1 	bhi.w	800baec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b9aa:	69bb      	ldr	r3, [r7, #24]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d003      	beq.n	800b9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b9b0:	69bb      	ldr	r3, [r7, #24]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d056      	beq.n	800ba64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b9b6:	e099      	b.n	800baec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9b8:	4b88      	ldr	r3, [pc, #544]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0320 	and.w	r3, r3, #32
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d02d      	beq.n	800ba20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b9c4:	4b85      	ldr	r3, [pc, #532]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	08db      	lsrs	r3, r3, #3
 800b9ca:	f003 0303 	and.w	r3, r3, #3
 800b9ce:	4a84      	ldr	r2, [pc, #528]	; (800bbe0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b9d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b9d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	ee07 3a90 	vmov	s15, r3
 800b9dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	ee07 3a90 	vmov	s15, r3
 800b9e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9ee:	4b7b      	ldr	r3, [pc, #492]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9f6:	ee07 3a90 	vmov	s15, r3
 800b9fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba02:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ba1e:	e087      	b.n	800bb30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	ee07 3a90 	vmov	s15, r3
 800ba26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bbe8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ba2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba32:	4b6a      	ldr	r3, [pc, #424]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba3a:	ee07 3a90 	vmov	s15, r3
 800ba3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba46:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba62:	e065      	b.n	800bb30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	ee07 3a90 	vmov	s15, r3
 800ba6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba76:	4b59      	ldr	r3, [pc, #356]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba7e:	ee07 3a90 	vmov	s15, r3
 800ba82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baa2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baa6:	e043      	b.n	800bb30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	ee07 3a90 	vmov	s15, r3
 800baae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baba:	4b48      	ldr	r3, [pc, #288]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800babc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800babe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bac2:	ee07 3a90 	vmov	s15, r3
 800bac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baca:	ed97 6a03 	vldr	s12, [r7, #12]
 800bace:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bae6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800baea:	e021      	b.n	800bb30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	ee07 3a90 	vmov	s15, r3
 800baf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bbec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bafa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bafe:	4b37      	ldr	r3, [pc, #220]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb06:	ee07 3a90 	vmov	s15, r3
 800bb0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb12:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bbe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bb30:	4b2a      	ldr	r3, [pc, #168]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb34:	0a5b      	lsrs	r3, r3, #9
 800bb36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb3a:	ee07 3a90 	vmov	s15, r3
 800bb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb56:	ee17 2a90 	vmov	r2, s15
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800bb5e:	4b1f      	ldr	r3, [pc, #124]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb62:	0c1b      	lsrs	r3, r3, #16
 800bb64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb68:	ee07 3a90 	vmov	s15, r3
 800bb6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb78:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb84:	ee17 2a90 	vmov	r2, s15
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bb8c:	4b13      	ldr	r3, [pc, #76]	; (800bbdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb90:	0e1b      	lsrs	r3, r3, #24
 800bb92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb96:	ee07 3a90 	vmov	s15, r3
 800bb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bba6:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbb2:	ee17 2a90 	vmov	r2, s15
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bbba:	e008      	b.n	800bbce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	609a      	str	r2, [r3, #8]
}
 800bbce:	bf00      	nop
 800bbd0:	3724      	adds	r7, #36	; 0x24
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd8:	4770      	bx	lr
 800bbda:	bf00      	nop
 800bbdc:	58024400 	.word	0x58024400
 800bbe0:	03d09000 	.word	0x03d09000
 800bbe4:	46000000 	.word	0x46000000
 800bbe8:	4c742400 	.word	0x4c742400
 800bbec:	4a742400 	.word	0x4a742400
 800bbf0:	4bbebc20 	.word	0x4bbebc20

0800bbf4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b089      	sub	sp, #36	; 0x24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbfc:	4ba0      	ldr	r3, [pc, #640]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc00:	f003 0303 	and.w	r3, r3, #3
 800bc04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800bc06:	4b9e      	ldr	r3, [pc, #632]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc0a:	091b      	lsrs	r3, r3, #4
 800bc0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bc12:	4b9b      	ldr	r3, [pc, #620]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc16:	f003 0301 	and.w	r3, r3, #1
 800bc1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bc1c:	4b98      	ldr	r3, [pc, #608]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc20:	08db      	lsrs	r3, r3, #3
 800bc22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc26:	693a      	ldr	r2, [r7, #16]
 800bc28:	fb02 f303 	mul.w	r3, r2, r3
 800bc2c:	ee07 3a90 	vmov	s15, r3
 800bc30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bc38:	697b      	ldr	r3, [r7, #20]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	f000 8111 	beq.w	800be62 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	2b02      	cmp	r3, #2
 800bc44:	f000 8083 	beq.w	800bd4e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	f200 80a1 	bhi.w	800bd92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bc50:	69bb      	ldr	r3, [r7, #24]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d003      	beq.n	800bc5e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bc56:	69bb      	ldr	r3, [r7, #24]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d056      	beq.n	800bd0a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bc5c:	e099      	b.n	800bd92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc5e:	4b88      	ldr	r3, [pc, #544]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f003 0320 	and.w	r3, r3, #32
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d02d      	beq.n	800bcc6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc6a:	4b85      	ldr	r3, [pc, #532]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	08db      	lsrs	r3, r3, #3
 800bc70:	f003 0303 	and.w	r3, r3, #3
 800bc74:	4a83      	ldr	r2, [pc, #524]	; (800be84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bc76:	fa22 f303 	lsr.w	r3, r2, r3
 800bc7a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	ee07 3a90 	vmov	s15, r3
 800bc82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	ee07 3a90 	vmov	s15, r3
 800bc8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc94:	4b7a      	ldr	r3, [pc, #488]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc9c:	ee07 3a90 	vmov	s15, r3
 800bca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bca8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bcc4:	e087      	b.n	800bdd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	ee07 3a90 	vmov	s15, r3
 800bccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800be8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bcd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcd8:	4b69      	ldr	r3, [pc, #420]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce0:	ee07 3a90 	vmov	s15, r3
 800bce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcec:	eddf 5a66 	vldr	s11, [pc, #408]	; 800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bcf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd08:	e065      	b.n	800bdd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	ee07 3a90 	vmov	s15, r3
 800bd10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd14:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800be90 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bd18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd1c:	4b58      	ldr	r3, [pc, #352]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd24:	ee07 3a90 	vmov	s15, r3
 800bd28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd30:	eddf 5a55 	vldr	s11, [pc, #340]	; 800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd4c:	e043      	b.n	800bdd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	ee07 3a90 	vmov	s15, r3
 800bd54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd58:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800be94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bd5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd60:	4b47      	ldr	r3, [pc, #284]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd68:	ee07 3a90 	vmov	s15, r3
 800bd6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd70:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd74:	eddf 5a44 	vldr	s11, [pc, #272]	; 800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd90:	e021      	b.n	800bdd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	ee07 3a90 	vmov	s15, r3
 800bd98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800be8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bda0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda4:	4b36      	ldr	r3, [pc, #216]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdac:	ee07 3a90 	vmov	s15, r3
 800bdb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800be88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800bdd6:	4b2a      	ldr	r3, [pc, #168]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdda:	0a5b      	lsrs	r3, r3, #9
 800bddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bde0:	ee07 3a90 	vmov	s15, r3
 800bde4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdfc:	ee17 2a90 	vmov	r2, s15
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800be04:	4b1e      	ldr	r3, [pc, #120]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be08:	0c1b      	lsrs	r3, r3, #16
 800be0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be0e:	ee07 3a90 	vmov	s15, r3
 800be12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800be22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be2a:	ee17 2a90 	vmov	r2, s15
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800be32:	4b13      	ldr	r3, [pc, #76]	; (800be80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be36:	0e1b      	lsrs	r3, r3, #24
 800be38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be3c:	ee07 3a90 	vmov	s15, r3
 800be40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be48:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be4c:	edd7 6a07 	vldr	s13, [r7, #28]
 800be50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be58:	ee17 2a90 	vmov	r2, s15
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800be60:	e008      	b.n	800be74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2200      	movs	r2, #0
 800be66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2200      	movs	r2, #0
 800be6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2200      	movs	r2, #0
 800be72:	609a      	str	r2, [r3, #8]
}
 800be74:	bf00      	nop
 800be76:	3724      	adds	r7, #36	; 0x24
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr
 800be80:	58024400 	.word	0x58024400
 800be84:	03d09000 	.word	0x03d09000
 800be88:	46000000 	.word	0x46000000
 800be8c:	4c742400 	.word	0x4c742400
 800be90:	4a742400 	.word	0x4a742400
 800be94:	4bbebc20 	.word	0x4bbebc20

0800be98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b084      	sub	sp, #16
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bea2:	2300      	movs	r3, #0
 800bea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bea6:	4b53      	ldr	r3, [pc, #332]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beaa:	f003 0303 	and.w	r3, r3, #3
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d101      	bne.n	800beb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	e099      	b.n	800bfea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800beb6:	4b4f      	ldr	r3, [pc, #316]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	4a4e      	ldr	r2, [pc, #312]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bebc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bec2:	f7f7 f80f 	bl	8002ee4 <HAL_GetTick>
 800bec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bec8:	e008      	b.n	800bedc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800beca:	f7f7 f80b 	bl	8002ee4 <HAL_GetTick>
 800bece:	4602      	mov	r2, r0
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	2b02      	cmp	r3, #2
 800bed6:	d901      	bls.n	800bedc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bed8:	2303      	movs	r3, #3
 800beda:	e086      	b.n	800bfea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bedc:	4b45      	ldr	r3, [pc, #276]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d1f0      	bne.n	800beca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bee8:	4b42      	ldr	r3, [pc, #264]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800beea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	031b      	lsls	r3, r3, #12
 800bef6:	493f      	ldr	r1, [pc, #252]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bef8:	4313      	orrs	r3, r2
 800befa:	628b      	str	r3, [r1, #40]	; 0x28
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	3b01      	subs	r3, #1
 800bf02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	025b      	lsls	r3, r3, #9
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	431a      	orrs	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	041b      	lsls	r3, r3, #16
 800bf1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bf1e:	431a      	orrs	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	061b      	lsls	r3, r3, #24
 800bf28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bf2c:	4931      	ldr	r1, [pc, #196]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bf32:	4b30      	ldr	r3, [pc, #192]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	695b      	ldr	r3, [r3, #20]
 800bf3e:	492d      	ldr	r1, [pc, #180]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf40:	4313      	orrs	r3, r2
 800bf42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bf44:	4b2b      	ldr	r3, [pc, #172]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	f023 0220 	bic.w	r2, r3, #32
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	4928      	ldr	r1, [pc, #160]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf52:	4313      	orrs	r3, r2
 800bf54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bf56:	4b27      	ldr	r3, [pc, #156]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5a:	4a26      	ldr	r2, [pc, #152]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf5c:	f023 0310 	bic.w	r3, r3, #16
 800bf60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bf62:	4b24      	ldr	r3, [pc, #144]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf66:	4b24      	ldr	r3, [pc, #144]	; (800bff8 <RCCEx_PLL2_Config+0x160>)
 800bf68:	4013      	ands	r3, r2
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	69d2      	ldr	r2, [r2, #28]
 800bf6e:	00d2      	lsls	r2, r2, #3
 800bf70:	4920      	ldr	r1, [pc, #128]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf72:	4313      	orrs	r3, r2
 800bf74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bf76:	4b1f      	ldr	r3, [pc, #124]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf7a:	4a1e      	ldr	r2, [pc, #120]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf7c:	f043 0310 	orr.w	r3, r3, #16
 800bf80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d106      	bne.n	800bf96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bf88:	4b1a      	ldr	r3, [pc, #104]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8c:	4a19      	ldr	r2, [pc, #100]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bf92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf94:	e00f      	b.n	800bfb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d106      	bne.n	800bfaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bf9c:	4b15      	ldr	r3, [pc, #84]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa0:	4a14      	ldr	r2, [pc, #80]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bfa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bfa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bfa8:	e005      	b.n	800bfb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bfaa:	4b12      	ldr	r3, [pc, #72]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfae:	4a11      	ldr	r2, [pc, #68]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bfb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bfb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bfb6:	4b0f      	ldr	r3, [pc, #60]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4a0e      	ldr	r2, [pc, #56]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bfbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bfc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bfc2:	f7f6 ff8f 	bl	8002ee4 <HAL_GetTick>
 800bfc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfc8:	e008      	b.n	800bfdc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bfca:	f7f6 ff8b 	bl	8002ee4 <HAL_GetTick>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	1ad3      	subs	r3, r2, r3
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d901      	bls.n	800bfdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bfd8:	2303      	movs	r3, #3
 800bfda:	e006      	b.n	800bfea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bfdc:	4b05      	ldr	r3, [pc, #20]	; (800bff4 <RCCEx_PLL2_Config+0x15c>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d0f0      	beq.n	800bfca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bfe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	bf00      	nop
 800bff4:	58024400 	.word	0x58024400
 800bff8:	ffff0007 	.word	0xffff0007

0800bffc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c006:	2300      	movs	r3, #0
 800c008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c00a:	4b53      	ldr	r3, [pc, #332]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c00e:	f003 0303 	and.w	r3, r3, #3
 800c012:	2b03      	cmp	r3, #3
 800c014:	d101      	bne.n	800c01a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e099      	b.n	800c14e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c01a:	4b4f      	ldr	r3, [pc, #316]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	4a4e      	ldr	r2, [pc, #312]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c026:	f7f6 ff5d 	bl	8002ee4 <HAL_GetTick>
 800c02a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c02c:	e008      	b.n	800c040 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c02e:	f7f6 ff59 	bl	8002ee4 <HAL_GetTick>
 800c032:	4602      	mov	r2, r0
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	1ad3      	subs	r3, r2, r3
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d901      	bls.n	800c040 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e086      	b.n	800c14e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c040:	4b45      	ldr	r3, [pc, #276]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1f0      	bne.n	800c02e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c04c:	4b42      	ldr	r3, [pc, #264]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c050:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	051b      	lsls	r3, r3, #20
 800c05a:	493f      	ldr	r1, [pc, #252]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c05c:	4313      	orrs	r3, r2
 800c05e:	628b      	str	r3, [r1, #40]	; 0x28
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	3b01      	subs	r3, #1
 800c066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	3b01      	subs	r3, #1
 800c070:	025b      	lsls	r3, r3, #9
 800c072:	b29b      	uxth	r3, r3
 800c074:	431a      	orrs	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	3b01      	subs	r3, #1
 800c07c:	041b      	lsls	r3, r3, #16
 800c07e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c082:	431a      	orrs	r2, r3
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	3b01      	subs	r3, #1
 800c08a:	061b      	lsls	r3, r3, #24
 800c08c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c090:	4931      	ldr	r1, [pc, #196]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c092:	4313      	orrs	r3, r2
 800c094:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c096:	4b30      	ldr	r3, [pc, #192]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	695b      	ldr	r3, [r3, #20]
 800c0a2:	492d      	ldr	r1, [pc, #180]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c0a8:	4b2b      	ldr	r3, [pc, #172]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	699b      	ldr	r3, [r3, #24]
 800c0b4:	4928      	ldr	r1, [pc, #160]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c0ba:	4b27      	ldr	r3, [pc, #156]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0be:	4a26      	ldr	r2, [pc, #152]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c0c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c0c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c0c6:	4b24      	ldr	r3, [pc, #144]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c0c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c0ca:	4b24      	ldr	r3, [pc, #144]	; (800c15c <RCCEx_PLL3_Config+0x160>)
 800c0cc:	4013      	ands	r3, r2
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	69d2      	ldr	r2, [r2, #28]
 800c0d2:	00d2      	lsls	r2, r2, #3
 800c0d4:	4920      	ldr	r1, [pc, #128]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c0da:	4b1f      	ldr	r3, [pc, #124]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0de:	4a1e      	ldr	r2, [pc, #120]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c0e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d106      	bne.n	800c0fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c0ec:	4b1a      	ldr	r3, [pc, #104]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f0:	4a19      	ldr	r2, [pc, #100]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c0f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c0f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c0f8:	e00f      	b.n	800c11a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d106      	bne.n	800c10e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c100:	4b15      	ldr	r3, [pc, #84]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c104:	4a14      	ldr	r2, [pc, #80]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c106:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c10a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c10c:	e005      	b.n	800c11a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c10e:	4b12      	ldr	r3, [pc, #72]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c112:	4a11      	ldr	r2, [pc, #68]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c118:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c11a:	4b0f      	ldr	r3, [pc, #60]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a0e      	ldr	r2, [pc, #56]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c126:	f7f6 fedd 	bl	8002ee4 <HAL_GetTick>
 800c12a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c12c:	e008      	b.n	800c140 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c12e:	f7f6 fed9 	bl	8002ee4 <HAL_GetTick>
 800c132:	4602      	mov	r2, r0
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	1ad3      	subs	r3, r2, r3
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d901      	bls.n	800c140 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c13c:	2303      	movs	r3, #3
 800c13e:	e006      	b.n	800c14e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c140:	4b05      	ldr	r3, [pc, #20]	; (800c158 <RCCEx_PLL3_Config+0x15c>)
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d0f0      	beq.n	800c12e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	58024400 	.word	0x58024400
 800c15c:	ffff0007 	.word	0xffff0007

0800c160 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d101      	bne.n	800c172 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c16e:	2301      	movs	r3, #1
 800c170:	e0f1      	b.n	800c356 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4a78      	ldr	r2, [pc, #480]	; (800c360 <HAL_SPI_Init+0x200>)
 800c17e:	4293      	cmp	r3, r2
 800c180:	d00f      	beq.n	800c1a2 <HAL_SPI_Init+0x42>
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	4a77      	ldr	r2, [pc, #476]	; (800c364 <HAL_SPI_Init+0x204>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d00a      	beq.n	800c1a2 <HAL_SPI_Init+0x42>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a75      	ldr	r2, [pc, #468]	; (800c368 <HAL_SPI_Init+0x208>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d005      	beq.n	800c1a2 <HAL_SPI_Init+0x42>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	68db      	ldr	r3, [r3, #12]
 800c19a:	2b0f      	cmp	r3, #15
 800c19c:	d901      	bls.n	800c1a2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e0d9      	b.n	800c356 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fe8e 	bl	800cec4 <SPI_GetPacketSize>
 800c1a8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a6c      	ldr	r2, [pc, #432]	; (800c360 <HAL_SPI_Init+0x200>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d00c      	beq.n	800c1ce <HAL_SPI_Init+0x6e>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4a6a      	ldr	r2, [pc, #424]	; (800c364 <HAL_SPI_Init+0x204>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d007      	beq.n	800c1ce <HAL_SPI_Init+0x6e>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4a69      	ldr	r2, [pc, #420]	; (800c368 <HAL_SPI_Init+0x208>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d002      	beq.n	800c1ce <HAL_SPI_Init+0x6e>
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b08      	cmp	r3, #8
 800c1cc:	d811      	bhi.n	800c1f2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c1d2:	4a63      	ldr	r2, [pc, #396]	; (800c360 <HAL_SPI_Init+0x200>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d009      	beq.n	800c1ec <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a61      	ldr	r2, [pc, #388]	; (800c364 <HAL_SPI_Init+0x204>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d004      	beq.n	800c1ec <HAL_SPI_Init+0x8c>
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4a60      	ldr	r2, [pc, #384]	; (800c368 <HAL_SPI_Init+0x208>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d104      	bne.n	800c1f6 <HAL_SPI_Init+0x96>
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2b10      	cmp	r3, #16
 800c1f0:	d901      	bls.n	800c1f6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e0af      	b.n	800c356 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c1fc:	b2db      	uxtb	r3, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d106      	bne.n	800c210 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f7f5 ffc2 	bl	8002194 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2202      	movs	r2, #2
 800c214:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681a      	ldr	r2, [r3, #0]
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f022 0201 	bic.w	r2, r2, #1
 800c226:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800c232:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c23c:	d119      	bne.n	800c272 <HAL_SPI_Init+0x112>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c246:	d103      	bne.n	800c250 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d008      	beq.n	800c262 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10c      	bne.n	800c272 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c25c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c260:	d107      	bne.n	800c272 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c270:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	69da      	ldr	r2, [r3, #28]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c27a:	431a      	orrs	r2, r3
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	431a      	orrs	r2, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c284:	ea42 0103 	orr.w	r1, r2, r3
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68da      	ldr	r2, [r3, #12]
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	430a      	orrs	r2, r1
 800c292:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29c:	431a      	orrs	r2, r3
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2a2:	431a      	orrs	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	699b      	ldr	r3, [r3, #24]
 800c2a8:	431a      	orrs	r2, r3
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	431a      	orrs	r2, r3
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	695b      	ldr	r3, [r3, #20]
 800c2b4:	431a      	orrs	r2, r3
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a1b      	ldr	r3, [r3, #32]
 800c2ba:	431a      	orrs	r2, r3
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	431a      	orrs	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2c6:	431a      	orrs	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	689b      	ldr	r3, [r3, #8]
 800c2cc:	431a      	orrs	r2, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2d2:	ea42 0103 	orr.w	r1, r2, r3
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	430a      	orrs	r2, r1
 800c2e0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d113      	bne.n	800c312 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	689b      	ldr	r3, [r3, #8]
 800c2f0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c2fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	689b      	ldr	r3, [r3, #8]
 800c304:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c310:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f022 0201 	bic.w	r2, r2, #1
 800c320:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00a      	beq.n	800c344 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	430a      	orrs	r2, r1
 800c342:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	40013000 	.word	0x40013000
 800c364:	40003800 	.word	0x40003800
 800c368:	40003c00 	.word	0x40003c00

0800c36c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b08a      	sub	sp, #40	; 0x28
 800c370:	af02      	add	r7, sp, #8
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	603b      	str	r3, [r7, #0]
 800c378:	4613      	mov	r3, r2
 800c37a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	3320      	adds	r3, #32
 800c382:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d101      	bne.n	800c396 <HAL_SPI_Transmit+0x2a>
 800c392:	2302      	movs	r3, #2
 800c394:	e1d7      	b.n	800c746 <HAL_SPI_Transmit+0x3da>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c39e:	f7f6 fda1 	bl	8002ee4 <HAL_GetTick>
 800c3a2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d007      	beq.n	800c3c0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c3bc:	7efb      	ldrb	r3, [r7, #27]
 800c3be:	e1c2      	b.n	800c746 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d002      	beq.n	800c3cc <HAL_SPI_Transmit+0x60>
 800c3c6:	88fb      	ldrh	r3, [r7, #6]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d107      	bne.n	800c3dc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c3d8:	7efb      	ldrb	r3, [r7, #27]
 800c3da:	e1b4      	b.n	800c746 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2203      	movs	r2, #3
 800c3e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	68ba      	ldr	r2, [r7, #8]
 800c3f0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	88fa      	ldrh	r2, [r7, #6]
 800c3f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	88fa      	ldrh	r2, [r7, #6]
 800c3fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2200      	movs	r2, #0
 800c40c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	2200      	movs	r2, #0
 800c414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2200      	movs	r2, #0
 800c422:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c42c:	d107      	bne.n	800c43e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c43c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	685a      	ldr	r2, [r3, #4]
 800c444:	4b96      	ldr	r3, [pc, #600]	; (800c6a0 <HAL_SPI_Transmit+0x334>)
 800c446:	4013      	ands	r3, r2
 800c448:	88f9      	ldrh	r1, [r7, #6]
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	6812      	ldr	r2, [r2, #0]
 800c44e:	430b      	orrs	r3, r1
 800c450:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	f042 0201 	orr.w	r2, r2, #1
 800c460:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c46a:	d107      	bne.n	800c47c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c47a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	68db      	ldr	r3, [r3, #12]
 800c480:	2b0f      	cmp	r3, #15
 800c482:	d947      	bls.n	800c514 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c484:	e03f      	b.n	800c506 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	695b      	ldr	r3, [r3, #20]
 800c48c:	f003 0302 	and.w	r3, r3, #2
 800c490:	2b02      	cmp	r3, #2
 800c492:	d114      	bne.n	800c4be <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	6812      	ldr	r2, [r2, #0]
 800c49e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4a4:	1d1a      	adds	r2, r3, #4
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c4b0:	b29b      	uxth	r3, r3
 800c4b2:	3b01      	subs	r3, #1
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c4bc:	e023      	b.n	800c506 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c4be:	f7f6 fd11 	bl	8002ee4 <HAL_GetTick>
 800c4c2:	4602      	mov	r2, r0
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	1ad3      	subs	r3, r2, r3
 800c4c8:	683a      	ldr	r2, [r7, #0]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d803      	bhi.n	800c4d6 <HAL_SPI_Transmit+0x16a>
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d4:	d102      	bne.n	800c4dc <HAL_SPI_Transmit+0x170>
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d114      	bne.n	800c506 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f000 fc23 	bl	800cd28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c502:	2303      	movs	r3, #3
 800c504:	e11f      	b.n	800c746 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d1b9      	bne.n	800c486 <HAL_SPI_Transmit+0x11a>
 800c512:	e0f2      	b.n	800c6fa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	68db      	ldr	r3, [r3, #12]
 800c518:	2b07      	cmp	r3, #7
 800c51a:	f240 80e7 	bls.w	800c6ec <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c51e:	e05d      	b.n	800c5dc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	695b      	ldr	r3, [r3, #20]
 800c526:	f003 0302 	and.w	r3, r3, #2
 800c52a:	2b02      	cmp	r3, #2
 800c52c:	d132      	bne.n	800c594 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c534:	b29b      	uxth	r3, r3
 800c536:	2b01      	cmp	r3, #1
 800c538:	d918      	bls.n	800c56c <HAL_SPI_Transmit+0x200>
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d014      	beq.n	800c56c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	6812      	ldr	r2, [r2, #0]
 800c54c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c552:	1d1a      	adds	r2, r3, #4
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c55e:	b29b      	uxth	r3, r3
 800c560:	3b02      	subs	r3, #2
 800c562:	b29a      	uxth	r2, r3
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c56a:	e037      	b.n	800c5dc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c570:	881a      	ldrh	r2, [r3, #0]
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c57a:	1c9a      	adds	r2, r3, #2
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c586:	b29b      	uxth	r3, r3
 800c588:	3b01      	subs	r3, #1
 800c58a:	b29a      	uxth	r2, r3
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c592:	e023      	b.n	800c5dc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c594:	f7f6 fca6 	bl	8002ee4 <HAL_GetTick>
 800c598:	4602      	mov	r2, r0
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	1ad3      	subs	r3, r2, r3
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d803      	bhi.n	800c5ac <HAL_SPI_Transmit+0x240>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5aa:	d102      	bne.n	800c5b2 <HAL_SPI_Transmit+0x246>
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d114      	bne.n	800c5dc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	f000 fbb8 	bl	800cd28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e0b4      	b.n	800c746 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d19b      	bne.n	800c520 <HAL_SPI_Transmit+0x1b4>
 800c5e8:	e087      	b.n	800c6fa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	695b      	ldr	r3, [r3, #20]
 800c5f0:	f003 0302 	and.w	r3, r3, #2
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d155      	bne.n	800c6a4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	2b03      	cmp	r3, #3
 800c602:	d918      	bls.n	800c636 <HAL_SPI_Transmit+0x2ca>
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c608:	2b40      	cmp	r3, #64	; 0x40
 800c60a:	d914      	bls.n	800c636 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	6812      	ldr	r2, [r2, #0]
 800c616:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c61c:	1d1a      	adds	r2, r3, #4
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c628:	b29b      	uxth	r3, r3
 800c62a:	3b04      	subs	r3, #4
 800c62c:	b29a      	uxth	r2, r3
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c634:	e05a      	b.n	800c6ec <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d917      	bls.n	800c672 <HAL_SPI_Transmit+0x306>
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c646:	2b00      	cmp	r3, #0
 800c648:	d013      	beq.n	800c672 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c64e:	881a      	ldrh	r2, [r3, #0]
 800c650:	69fb      	ldr	r3, [r7, #28]
 800c652:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c658:	1c9a      	adds	r2, r3, #2
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c664:	b29b      	uxth	r3, r3
 800c666:	3b02      	subs	r3, #2
 800c668:	b29a      	uxth	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c670:	e03c      	b.n	800c6ec <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	3320      	adds	r3, #32
 800c67c:	7812      	ldrb	r2, [r2, #0]
 800c67e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c684:	1c5a      	adds	r2, r3, #1
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c690:	b29b      	uxth	r3, r3
 800c692:	3b01      	subs	r3, #1
 800c694:	b29a      	uxth	r2, r3
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c69c:	e026      	b.n	800c6ec <HAL_SPI_Transmit+0x380>
 800c69e:	bf00      	nop
 800c6a0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c6a4:	f7f6 fc1e 	bl	8002ee4 <HAL_GetTick>
 800c6a8:	4602      	mov	r2, r0
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	1ad3      	subs	r3, r2, r3
 800c6ae:	683a      	ldr	r2, [r7, #0]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d803      	bhi.n	800c6bc <HAL_SPI_Transmit+0x350>
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ba:	d102      	bne.n	800c6c2 <HAL_SPI_Transmit+0x356>
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d114      	bne.n	800c6ec <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c6c2:	68f8      	ldr	r0, [r7, #12]
 800c6c4:	f000 fb30 	bl	800cd28 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c6d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	e02c      	b.n	800c746 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f47f af78 	bne.w	800c5ea <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	2200      	movs	r2, #0
 800c702:	2108      	movs	r1, #8
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f000 fbaf 	bl	800ce68 <SPI_WaitOnFlagUntilTimeout>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d007      	beq.n	800c720 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c716:	f043 0220 	orr.w	r2, r3, #32
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c720:	68f8      	ldr	r0, [r7, #12]
 800c722:	f000 fb01 	bl	800cd28 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2201      	movs	r2, #1
 800c732:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c740:	2301      	movs	r3, #1
 800c742:	e000      	b.n	800c746 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c744:	7efb      	ldrb	r3, [r7, #27]
}
 800c746:	4618      	mov	r0, r3
 800c748:	3720      	adds	r7, #32
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop

0800c750 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b08e      	sub	sp, #56	; 0x38
 800c754:	af02      	add	r7, sp, #8
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
 800c75c:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c75e:	2300      	movs	r3, #0
 800c760:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	3320      	adds	r3, #32
 800c76a:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	3330      	adds	r3, #48	; 0x30
 800c772:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d101      	bne.n	800c782 <HAL_SPI_TransmitReceive+0x32>
 800c77e:	2302      	movs	r3, #2
 800c780:	e2ce      	b.n	800cd20 <HAL_SPI_TransmitReceive+0x5d0>
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	2201      	movs	r2, #1
 800c786:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c78a:	f7f6 fbab 	bl	8002ee4 <HAL_GetTick>
 800c78e:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800c790:	887b      	ldrh	r3, [r7, #2]
 800c792:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800c794:	887b      	ldrh	r3, [r7, #2]
 800c796:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c79e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c7a6:	7efb      	ldrb	r3, [r7, #27]
 800c7a8:	2b01      	cmp	r3, #1
 800c7aa:	d014      	beq.n	800c7d6 <HAL_SPI_TransmitReceive+0x86>
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c7b2:	d106      	bne.n	800c7c2 <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d102      	bne.n	800c7c2 <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 800c7bc:	7efb      	ldrb	r3, [r7, #27]
 800c7be:	2b04      	cmp	r3, #4
 800c7c0:	d009      	beq.n	800c7d6 <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 800c7c2:	2302      	movs	r3, #2
 800c7c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c7d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c7d4:	e2a4      	b.n	800cd20 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d005      	beq.n	800c7e8 <HAL_SPI_TransmitReceive+0x98>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d002      	beq.n	800c7e8 <HAL_SPI_TransmitReceive+0x98>
 800c7e2:	887b      	ldrh	r3, [r7, #2]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d109      	bne.n	800c7fc <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c7f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c7fa:	e291      	b.n	800cd20 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c802:	b2db      	uxtb	r3, r3
 800c804:	2b04      	cmp	r3, #4
 800c806:	d003      	beq.n	800c810 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2205      	movs	r2, #5
 800c80c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2200      	movs	r2, #0
 800c814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	887a      	ldrh	r2, [r7, #2]
 800c822:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	887a      	ldrh	r2, [r7, #2]
 800c82a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	887a      	ldrh	r2, [r7, #2]
 800c838:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	887a      	ldrh	r2, [r7, #2]
 800c840:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2200      	movs	r2, #0
 800c848:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	685a      	ldr	r2, [r3, #4]
 800c856:	4b9f      	ldr	r3, [pc, #636]	; (800cad4 <HAL_SPI_TransmitReceive+0x384>)
 800c858:	4013      	ands	r3, r2
 800c85a:	8879      	ldrh	r1, [r7, #2]
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	6812      	ldr	r2, [r2, #0]
 800c860:	430b      	orrs	r3, r1
 800c862:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	681a      	ldr	r2, [r3, #0]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	f042 0201 	orr.w	r2, r2, #1
 800c872:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c87c:	d107      	bne.n	800c88e <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c88c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	2b0f      	cmp	r3, #15
 800c894:	d970      	bls.n	800c978 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c896:	e068      	b.n	800c96a <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	f003 0302 	and.w	r3, r3, #2
 800c8a2:	2b02      	cmp	r3, #2
 800c8a4:	d11a      	bne.n	800c8dc <HAL_SPI_TransmitReceive+0x18c>
 800c8a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d017      	beq.n	800c8dc <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6812      	ldr	r2, [r2, #0]
 800c8b6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c8bc:	1d1a      	adds	r2, r3, #4
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8c8:	b29b      	uxth	r3, r3
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c8da:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	695a      	ldr	r2, [r3, #20]
 800c8e2:	f248 0308 	movw	r3, #32776	; 0x8008
 800c8e6:	4013      	ands	r3, r2
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d01a      	beq.n	800c922 <HAL_SPI_TransmitReceive+0x1d2>
 800c8ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d017      	beq.n	800c922 <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c8fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c902:	1d1a      	adds	r2, r3, #4
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c90e:	b29b      	uxth	r3, r3
 800c910:	3b01      	subs	r3, #1
 800c912:	b29a      	uxth	r2, r3
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800c920:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c922:	f7f6 fadf 	bl	8002ee4 <HAL_GetTick>
 800c926:	4602      	mov	r2, r0
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	1ad3      	subs	r3, r2, r3
 800c92c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c92e:	429a      	cmp	r2, r3
 800c930:	d803      	bhi.n	800c93a <HAL_SPI_TransmitReceive+0x1ea>
 800c932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c934:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c938:	d102      	bne.n	800c940 <HAL_SPI_TransmitReceive+0x1f0>
 800c93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d114      	bne.n	800c96a <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f000 f9f1 	bl	800cd28 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2200      	movs	r2, #0
 800c94a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c954:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	2201      	movs	r2, #1
 800c962:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800c966:	2303      	movs	r3, #3
 800c968:	e1da      	b.n	800cd20 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c96a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d193      	bne.n	800c898 <HAL_SPI_TransmitReceive+0x148>
 800c970:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c972:	2b00      	cmp	r3, #0
 800c974:	d190      	bne.n	800c898 <HAL_SPI_TransmitReceive+0x148>
 800c976:	e1ac      	b.n	800ccd2 <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	2b07      	cmp	r3, #7
 800c97e:	f240 81a0 	bls.w	800ccc2 <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800c982:	e0a9      	b.n	800cad8 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	f003 0302 	and.w	r3, r3, #2
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d139      	bne.n	800ca06 <HAL_SPI_TransmitReceive+0x2b6>
 800c992:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c994:	2b00      	cmp	r3, #0
 800c996:	d036      	beq.n	800ca06 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c998:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d91c      	bls.n	800c9d8 <HAL_SPI_TransmitReceive+0x288>
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d018      	beq.n	800c9d8 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	6812      	ldr	r2, [r2, #0]
 800c9b0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9b6:	1d1a      	adds	r2, r3, #4
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	3b02      	subs	r3, #2
 800c9c6:	b29a      	uxth	r2, r3
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c9d6:	e016      	b.n	800ca06 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9dc:	881a      	ldrh	r2, [r3, #0]
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9e6:	1c9a      	adds	r2, r3, #2
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c9f2:	b29b      	uxth	r3, r3
 800c9f4:	3b01      	subs	r3, #1
 800c9f6:	b29a      	uxth	r2, r3
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca04:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	695b      	ldr	r3, [r3, #20]
 800ca0c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d03a      	beq.n	800ca8a <HAL_SPI_TransmitReceive+0x33a>
 800ca14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d037      	beq.n	800ca8a <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	695b      	ldr	r3, [r3, #20]
 800ca20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d018      	beq.n	800ca5a <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ca32:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca38:	1d1a      	adds	r2, r3, #4
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	3b02      	subs	r3, #2
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca56:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800ca58:	e017      	b.n	800ca8a <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca5e:	6a3a      	ldr	r2, [r7, #32]
 800ca60:	8812      	ldrh	r2, [r2, #0]
 800ca62:	b292      	uxth	r2, r2
 800ca64:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca6a:	1c9a      	adds	r2, r3, #2
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	3b01      	subs	r3, #1
 800ca7a:	b29a      	uxth	r2, r3
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca88:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ca8a:	f7f6 fa2b 	bl	8002ee4 <HAL_GetTick>
 800ca8e:	4602      	mov	r2, r0
 800ca90:	69fb      	ldr	r3, [r7, #28]
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d803      	bhi.n	800caa2 <HAL_SPI_TransmitReceive+0x352>
 800ca9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caa0:	d102      	bne.n	800caa8 <HAL_SPI_TransmitReceive+0x358>
 800caa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d117      	bne.n	800cad8 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f000 f93d 	bl	800cd28 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	2200      	movs	r2, #0
 800cab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cabc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2201      	movs	r2, #1
 800caca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800cace:	2303      	movs	r3, #3
 800cad0:	e126      	b.n	800cd20 <HAL_SPI_TransmitReceive+0x5d0>
 800cad2:	bf00      	nop
 800cad4:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800cad8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f47f af52 	bne.w	800c984 <HAL_SPI_TransmitReceive+0x234>
 800cae0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	f47f af4e 	bne.w	800c984 <HAL_SPI_TransmitReceive+0x234>
 800cae8:	e0f3      	b.n	800ccd2 <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	695b      	ldr	r3, [r3, #20]
 800caf0:	f003 0302 	and.w	r3, r3, #2
 800caf4:	2b02      	cmp	r3, #2
 800caf6:	d15a      	bne.n	800cbae <HAL_SPI_TransmitReceive+0x45e>
 800caf8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d057      	beq.n	800cbae <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800cafe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb00:	2b03      	cmp	r3, #3
 800cb02:	d91c      	bls.n	800cb3e <HAL_SPI_TransmitReceive+0x3ee>
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb08:	2b40      	cmp	r3, #64	; 0x40
 800cb0a:	d918      	bls.n	800cb3e <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	6812      	ldr	r2, [r2, #0]
 800cb16:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb1c:	1d1a      	adds	r2, r3, #4
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	3b04      	subs	r3, #4
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cb3c:	e037      	b.n	800cbae <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800cb3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d91b      	bls.n	800cb7c <HAL_SPI_TransmitReceive+0x42c>
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d017      	beq.n	800cb7c <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb50:	881a      	ldrh	r2, [r3, #0]
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb54:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb5a:	1c9a      	adds	r2, r3, #2
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	3b02      	subs	r3, #2
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800cb7a:	e018      	b.n	800cbae <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3320      	adds	r3, #32
 800cb86:	7812      	ldrb	r2, [r2, #0]
 800cb88:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb8e:	1c5a      	adds	r2, r3, #1
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	b29a      	uxth	r2, r3
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cbac:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	695b      	ldr	r3, [r3, #20]
 800cbb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d05e      	beq.n	800cc7a <HAL_SPI_TransmitReceive+0x52a>
 800cbbc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d05b      	beq.n	800cc7a <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	695b      	ldr	r3, [r3, #20]
 800cbc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d018      	beq.n	800cc02 <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800cbda:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbe0:	1d1a      	adds	r2, r3, #4
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	3b04      	subs	r3, #4
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cbfe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cc00:	e03b      	b.n	800cc7a <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	695b      	ldr	r3, [r3, #20]
 800cc08:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800cc0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cc10:	d918      	bls.n	800cc44 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc16:	6a3a      	ldr	r2, [r7, #32]
 800cc18:	8812      	ldrh	r2, [r2, #0]
 800cc1a:	b292      	uxth	r2, r2
 800cc1c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc22:	1c9a      	adds	r2, r3, #2
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	3b02      	subs	r3, #2
 800cc32:	b29a      	uxth	r2, r3
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc40:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800cc42:	e01a      	b.n	800cc7a <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc50:	7812      	ldrb	r2, [r2, #0]
 800cc52:	b2d2      	uxtb	r2, r2
 800cc54:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cc5a:	1c5a      	adds	r2, r3, #1
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cc78:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cc7a:	f7f6 f933 	bl	8002ee4 <HAL_GetTick>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d803      	bhi.n	800cc92 <HAL_SPI_TransmitReceive+0x542>
 800cc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc90:	d102      	bne.n	800cc98 <HAL_SPI_TransmitReceive+0x548>
 800cc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d114      	bne.n	800ccc2 <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800cc98:	68f8      	ldr	r0, [r7, #12]
 800cc9a:	f000 f845 	bl	800cd28 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2201      	movs	r2, #1
 800ccba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 800ccbe:	2303      	movs	r3, #3
 800ccc0:	e02e      	b.n	800cd20 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ccc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f47f af10 	bne.w	800caea <HAL_SPI_TransmitReceive+0x39a>
 800ccca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f47f af0c 	bne.w	800caea <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800ccd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	69fb      	ldr	r3, [r7, #28]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	2108      	movs	r1, #8
 800ccdc:	68f8      	ldr	r0, [r7, #12]
 800ccde:	f000 f8c3 	bl	800ce68 <SPI_WaitOnFlagUntilTimeout>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d007      	beq.n	800ccf8 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccee:	f043 0220 	orr.w	r2, r3, #32
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ccf8:	68f8      	ldr	r0, [r7, #12]
 800ccfa:	f000 f815 	bl	800cd28 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	2201      	movs	r2, #1
 800cd0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d001      	beq.n	800cd1c <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e001      	b.n	800cd20 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800cd1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3730      	adds	r7, #48	; 0x30
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b085      	sub	sp, #20
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	695b      	ldr	r3, [r3, #20]
 800cd36:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	699a      	ldr	r2, [r3, #24]
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f042 0208 	orr.w	r2, r2, #8
 800cd46:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	699a      	ldr	r2, [r3, #24]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	f042 0210 	orr.w	r2, r2, #16
 800cd56:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f022 0201 	bic.w	r2, r2, #1
 800cd66:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	6919      	ldr	r1, [r3, #16]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	4b3c      	ldr	r3, [pc, #240]	; (800ce64 <SPI_CloseTransfer+0x13c>)
 800cd74:	400b      	ands	r3, r1
 800cd76:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	689a      	ldr	r2, [r3, #8]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800cd86:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	2b04      	cmp	r3, #4
 800cd92:	d014      	beq.n	800cdbe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f003 0320 	and.w	r3, r3, #32
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00f      	beq.n	800cdbe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cda4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	699a      	ldr	r2, [r3, #24]
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f042 0220 	orr.w	r2, r2, #32
 800cdbc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800cdc4:	b2db      	uxtb	r3, r3
 800cdc6:	2b03      	cmp	r3, #3
 800cdc8:	d014      	beq.n	800cdf4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d00f      	beq.n	800cdf4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cdda:	f043 0204 	orr.w	r2, r3, #4
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	699a      	ldr	r2, [r3, #24]
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdf2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00f      	beq.n	800ce1e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce04:	f043 0201 	orr.w	r2, r3, #1
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	699a      	ldr	r2, [r3, #24]
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ce1c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00f      	beq.n	800ce48 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce2e:	f043 0208 	orr.w	r2, r3, #8
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	699a      	ldr	r2, [r3, #24]
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce46:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2200      	movs	r2, #0
 800ce54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ce58:	bf00      	nop
 800ce5a:	3714      	adds	r7, #20
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr
 800ce64:	fffffc90 	.word	0xfffffc90

0800ce68 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	603b      	str	r3, [r7, #0]
 800ce74:	4613      	mov	r3, r2
 800ce76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ce78:	e010      	b.n	800ce9c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ce7a:	f7f6 f833 	bl	8002ee4 <HAL_GetTick>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	1ad3      	subs	r3, r2, r3
 800ce84:	69ba      	ldr	r2, [r7, #24]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d803      	bhi.n	800ce92 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce90:	d102      	bne.n	800ce98 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d101      	bne.n	800ce9c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ce98:	2303      	movs	r3, #3
 800ce9a:	e00f      	b.n	800cebc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	695a      	ldr	r2, [r3, #20]
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	4013      	ands	r3, r2
 800cea6:	68ba      	ldr	r2, [r7, #8]
 800cea8:	429a      	cmp	r2, r3
 800ceaa:	bf0c      	ite	eq
 800ceac:	2301      	moveq	r3, #1
 800ceae:	2300      	movne	r3, #0
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d0df      	beq.n	800ce7a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3710      	adds	r7, #16
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}

0800cec4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b085      	sub	sp, #20
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced0:	095b      	lsrs	r3, r3, #5
 800ced2:	3301      	adds	r3, #1
 800ced4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	3301      	adds	r3, #1
 800cedc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	3307      	adds	r3, #7
 800cee2:	08db      	lsrs	r3, r3, #3
 800cee4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800cee6:	68bb      	ldr	r3, [r7, #8]
 800cee8:	68fa      	ldr	r2, [r7, #12]
 800ceea:	fb02 f303 	mul.w	r3, r2, r3
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3714      	adds	r7, #20
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b082      	sub	sp, #8
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d101      	bne.n	800cf0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	e049      	b.n	800cfa0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d106      	bne.n	800cf26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f7f5 fb47 	bl	80025b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2202      	movs	r2, #2
 800cf2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	3304      	adds	r3, #4
 800cf36:	4619      	mov	r1, r3
 800cf38:	4610      	mov	r0, r2
 800cf3a:	f000 febd 	bl	800dcb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2201      	movs	r2, #1
 800cf4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2201      	movs	r2, #1
 800cf5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2201      	movs	r2, #1
 800cf8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2201      	movs	r2, #1
 800cf92:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	2201      	movs	r2, #1
 800cf9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b085      	sub	sp, #20
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cfb6:	b2db      	uxtb	r3, r3
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d001      	beq.n	800cfc0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e056      	b.n	800d06e <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a2b      	ldr	r2, [pc, #172]	; (800d07c <HAL_TIM_Base_Start+0xd4>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d02c      	beq.n	800d02c <HAL_TIM_Base_Start+0x84>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfda:	d027      	beq.n	800d02c <HAL_TIM_Base_Start+0x84>
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a27      	ldr	r2, [pc, #156]	; (800d080 <HAL_TIM_Base_Start+0xd8>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d022      	beq.n	800d02c <HAL_TIM_Base_Start+0x84>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	4a26      	ldr	r2, [pc, #152]	; (800d084 <HAL_TIM_Base_Start+0xdc>)
 800cfec:	4293      	cmp	r3, r2
 800cfee:	d01d      	beq.n	800d02c <HAL_TIM_Base_Start+0x84>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	4a24      	ldr	r2, [pc, #144]	; (800d088 <HAL_TIM_Base_Start+0xe0>)
 800cff6:	4293      	cmp	r3, r2
 800cff8:	d018      	beq.n	800d02c <HAL_TIM_Base_Start+0x84>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	4a23      	ldr	r2, [pc, #140]	; (800d08c <HAL_TIM_Base_Start+0xe4>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d013      	beq.n	800d02c <HAL_TIM_Base_Start+0x84>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	4a21      	ldr	r2, [pc, #132]	; (800d090 <HAL_TIM_Base_Start+0xe8>)
 800d00a:	4293      	cmp	r3, r2
 800d00c:	d00e      	beq.n	800d02c <HAL_TIM_Base_Start+0x84>
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	4a20      	ldr	r2, [pc, #128]	; (800d094 <HAL_TIM_Base_Start+0xec>)
 800d014:	4293      	cmp	r3, r2
 800d016:	d009      	beq.n	800d02c <HAL_TIM_Base_Start+0x84>
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a1e      	ldr	r2, [pc, #120]	; (800d098 <HAL_TIM_Base_Start+0xf0>)
 800d01e:	4293      	cmp	r3, r2
 800d020:	d004      	beq.n	800d02c <HAL_TIM_Base_Start+0x84>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	4a1d      	ldr	r2, [pc, #116]	; (800d09c <HAL_TIM_Base_Start+0xf4>)
 800d028:	4293      	cmp	r3, r2
 800d02a:	d115      	bne.n	800d058 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	689a      	ldr	r2, [r3, #8]
 800d032:	4b1b      	ldr	r3, [pc, #108]	; (800d0a0 <HAL_TIM_Base_Start+0xf8>)
 800d034:	4013      	ands	r3, r2
 800d036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2b06      	cmp	r3, #6
 800d03c:	d015      	beq.n	800d06a <HAL_TIM_Base_Start+0xc2>
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d044:	d011      	beq.n	800d06a <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	681a      	ldr	r2, [r3, #0]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	f042 0201 	orr.w	r2, r2, #1
 800d054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d056:	e008      	b.n	800d06a <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	f042 0201 	orr.w	r2, r2, #1
 800d066:	601a      	str	r2, [r3, #0]
 800d068:	e000      	b.n	800d06c <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d06a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d06c:	2300      	movs	r3, #0
}
 800d06e:	4618      	mov	r0, r3
 800d070:	3714      	adds	r7, #20
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
 800d07a:	bf00      	nop
 800d07c:	40010000 	.word	0x40010000
 800d080:	40000400 	.word	0x40000400
 800d084:	40000800 	.word	0x40000800
 800d088:	40000c00 	.word	0x40000c00
 800d08c:	40010400 	.word	0x40010400
 800d090:	40001800 	.word	0x40001800
 800d094:	40014000 	.word	0x40014000
 800d098:	4000e000 	.word	0x4000e000
 800d09c:	4000e400 	.word	0x4000e400
 800d0a0:	00010007 	.word	0x00010007

0800d0a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d0b2:	b2db      	uxtb	r3, r3
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d001      	beq.n	800d0bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	e05e      	b.n	800d17a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2202      	movs	r2, #2
 800d0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68da      	ldr	r2, [r3, #12]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f042 0201 	orr.w	r2, r2, #1
 800d0d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a2b      	ldr	r2, [pc, #172]	; (800d188 <HAL_TIM_Base_Start_IT+0xe4>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d02c      	beq.n	800d138 <HAL_TIM_Base_Start_IT+0x94>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0e6:	d027      	beq.n	800d138 <HAL_TIM_Base_Start_IT+0x94>
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a27      	ldr	r2, [pc, #156]	; (800d18c <HAL_TIM_Base_Start_IT+0xe8>)
 800d0ee:	4293      	cmp	r3, r2
 800d0f0:	d022      	beq.n	800d138 <HAL_TIM_Base_Start_IT+0x94>
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4a26      	ldr	r2, [pc, #152]	; (800d190 <HAL_TIM_Base_Start_IT+0xec>)
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d01d      	beq.n	800d138 <HAL_TIM_Base_Start_IT+0x94>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a24      	ldr	r2, [pc, #144]	; (800d194 <HAL_TIM_Base_Start_IT+0xf0>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d018      	beq.n	800d138 <HAL_TIM_Base_Start_IT+0x94>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a23      	ldr	r2, [pc, #140]	; (800d198 <HAL_TIM_Base_Start_IT+0xf4>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d013      	beq.n	800d138 <HAL_TIM_Base_Start_IT+0x94>
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a21      	ldr	r2, [pc, #132]	; (800d19c <HAL_TIM_Base_Start_IT+0xf8>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d00e      	beq.n	800d138 <HAL_TIM_Base_Start_IT+0x94>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4a20      	ldr	r2, [pc, #128]	; (800d1a0 <HAL_TIM_Base_Start_IT+0xfc>)
 800d120:	4293      	cmp	r3, r2
 800d122:	d009      	beq.n	800d138 <HAL_TIM_Base_Start_IT+0x94>
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a1e      	ldr	r2, [pc, #120]	; (800d1a4 <HAL_TIM_Base_Start_IT+0x100>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d004      	beq.n	800d138 <HAL_TIM_Base_Start_IT+0x94>
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a1d      	ldr	r2, [pc, #116]	; (800d1a8 <HAL_TIM_Base_Start_IT+0x104>)
 800d134:	4293      	cmp	r3, r2
 800d136:	d115      	bne.n	800d164 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	689a      	ldr	r2, [r3, #8]
 800d13e:	4b1b      	ldr	r3, [pc, #108]	; (800d1ac <HAL_TIM_Base_Start_IT+0x108>)
 800d140:	4013      	ands	r3, r2
 800d142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2b06      	cmp	r3, #6
 800d148:	d015      	beq.n	800d176 <HAL_TIM_Base_Start_IT+0xd2>
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d150:	d011      	beq.n	800d176 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f042 0201 	orr.w	r2, r2, #1
 800d160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d162:	e008      	b.n	800d176 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	f042 0201 	orr.w	r2, r2, #1
 800d172:	601a      	str	r2, [r3, #0]
 800d174:	e000      	b.n	800d178 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d176:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3714      	adds	r7, #20
 800d17e:	46bd      	mov	sp, r7
 800d180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d184:	4770      	bx	lr
 800d186:	bf00      	nop
 800d188:	40010000 	.word	0x40010000
 800d18c:	40000400 	.word	0x40000400
 800d190:	40000800 	.word	0x40000800
 800d194:	40000c00 	.word	0x40000c00
 800d198:	40010400 	.word	0x40010400
 800d19c:	40001800 	.word	0x40001800
 800d1a0:	40014000 	.word	0x40014000
 800d1a4:	4000e000 	.word	0x4000e000
 800d1a8:	4000e400 	.word	0x4000e400
 800d1ac:	00010007 	.word	0x00010007

0800d1b0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800d1b0:	b580      	push	{r7, lr}
 800d1b2:	b082      	sub	sp, #8
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d101      	bne.n	800d1c2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	e049      	b.n	800d256 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d1c8:	b2db      	uxtb	r3, r3
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d106      	bne.n	800d1dc <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7f5 f892 	bl	8002300 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2202      	movs	r2, #2
 800d1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	3304      	adds	r3, #4
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	f000 fd62 	bl	800dcb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2201      	movs	r2, #1
 800d200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2201      	movs	r2, #1
 800d210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2201      	movs	r2, #1
 800d218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	2201      	movs	r2, #1
 800d220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2201      	movs	r2, #1
 800d228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2201      	movs	r2, #1
 800d230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2201      	movs	r2, #1
 800d238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2201      	movs	r2, #1
 800d240:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d254:	2300      	movs	r3, #0
}
 800d256:	4618      	mov	r0, r3
 800d258:	3708      	adds	r7, #8
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}

0800d25e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d25e:	b580      	push	{r7, lr}
 800d260:	b082      	sub	sp, #8
 800d262:	af00      	add	r7, sp, #0
 800d264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d101      	bne.n	800d270 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
 800d26e:	e049      	b.n	800d304 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d276:	b2db      	uxtb	r3, r3
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d106      	bne.n	800d28a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f7f5 fa7f 	bl	8002788 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2202      	movs	r2, #2
 800d28e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	3304      	adds	r3, #4
 800d29a:	4619      	mov	r1, r3
 800d29c:	4610      	mov	r0, r2
 800d29e:	f000 fd0b 	bl	800dcb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	2201      	movs	r2, #1
 800d2fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d302:	2300      	movs	r3, #0
}
 800d304:	4618      	mov	r0, r3
 800d306:	3708      	adds	r7, #8
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}

0800d30c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
 800d314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d109      	bne.n	800d330 <HAL_TIM_PWM_Start+0x24>
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2b01      	cmp	r3, #1
 800d326:	bf14      	ite	ne
 800d328:	2301      	movne	r3, #1
 800d32a:	2300      	moveq	r3, #0
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	e03c      	b.n	800d3aa <HAL_TIM_PWM_Start+0x9e>
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	2b04      	cmp	r3, #4
 800d334:	d109      	bne.n	800d34a <HAL_TIM_PWM_Start+0x3e>
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	2b01      	cmp	r3, #1
 800d340:	bf14      	ite	ne
 800d342:	2301      	movne	r3, #1
 800d344:	2300      	moveq	r3, #0
 800d346:	b2db      	uxtb	r3, r3
 800d348:	e02f      	b.n	800d3aa <HAL_TIM_PWM_Start+0x9e>
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	2b08      	cmp	r3, #8
 800d34e:	d109      	bne.n	800d364 <HAL_TIM_PWM_Start+0x58>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d356:	b2db      	uxtb	r3, r3
 800d358:	2b01      	cmp	r3, #1
 800d35a:	bf14      	ite	ne
 800d35c:	2301      	movne	r3, #1
 800d35e:	2300      	moveq	r3, #0
 800d360:	b2db      	uxtb	r3, r3
 800d362:	e022      	b.n	800d3aa <HAL_TIM_PWM_Start+0x9e>
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	2b0c      	cmp	r3, #12
 800d368:	d109      	bne.n	800d37e <HAL_TIM_PWM_Start+0x72>
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d370:	b2db      	uxtb	r3, r3
 800d372:	2b01      	cmp	r3, #1
 800d374:	bf14      	ite	ne
 800d376:	2301      	movne	r3, #1
 800d378:	2300      	moveq	r3, #0
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	e015      	b.n	800d3aa <HAL_TIM_PWM_Start+0x9e>
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	2b10      	cmp	r3, #16
 800d382:	d109      	bne.n	800d398 <HAL_TIM_PWM_Start+0x8c>
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d38a:	b2db      	uxtb	r3, r3
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	bf14      	ite	ne
 800d390:	2301      	movne	r3, #1
 800d392:	2300      	moveq	r3, #0
 800d394:	b2db      	uxtb	r3, r3
 800d396:	e008      	b.n	800d3aa <HAL_TIM_PWM_Start+0x9e>
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	2b01      	cmp	r3, #1
 800d3a2:	bf14      	ite	ne
 800d3a4:	2301      	movne	r3, #1
 800d3a6:	2300      	moveq	r3, #0
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d001      	beq.n	800d3b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	e0ab      	b.n	800d50a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d104      	bne.n	800d3c2 <HAL_TIM_PWM_Start+0xb6>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2202      	movs	r2, #2
 800d3bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3c0:	e023      	b.n	800d40a <HAL_TIM_PWM_Start+0xfe>
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b04      	cmp	r3, #4
 800d3c6:	d104      	bne.n	800d3d2 <HAL_TIM_PWM_Start+0xc6>
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2202      	movs	r2, #2
 800d3cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3d0:	e01b      	b.n	800d40a <HAL_TIM_PWM_Start+0xfe>
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	2b08      	cmp	r3, #8
 800d3d6:	d104      	bne.n	800d3e2 <HAL_TIM_PWM_Start+0xd6>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2202      	movs	r2, #2
 800d3dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3e0:	e013      	b.n	800d40a <HAL_TIM_PWM_Start+0xfe>
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	2b0c      	cmp	r3, #12
 800d3e6:	d104      	bne.n	800d3f2 <HAL_TIM_PWM_Start+0xe6>
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2202      	movs	r2, #2
 800d3ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3f0:	e00b      	b.n	800d40a <HAL_TIM_PWM_Start+0xfe>
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b10      	cmp	r3, #16
 800d3f6:	d104      	bne.n	800d402 <HAL_TIM_PWM_Start+0xf6>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2202      	movs	r2, #2
 800d3fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d400:	e003      	b.n	800d40a <HAL_TIM_PWM_Start+0xfe>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2202      	movs	r2, #2
 800d406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2201      	movs	r2, #1
 800d410:	6839      	ldr	r1, [r7, #0]
 800d412:	4618      	mov	r0, r3
 800d414:	f001 f86a 	bl	800e4ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	4a3d      	ldr	r2, [pc, #244]	; (800d514 <HAL_TIM_PWM_Start+0x208>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d013      	beq.n	800d44a <HAL_TIM_PWM_Start+0x13e>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a3c      	ldr	r2, [pc, #240]	; (800d518 <HAL_TIM_PWM_Start+0x20c>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d00e      	beq.n	800d44a <HAL_TIM_PWM_Start+0x13e>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a3a      	ldr	r2, [pc, #232]	; (800d51c <HAL_TIM_PWM_Start+0x210>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d009      	beq.n	800d44a <HAL_TIM_PWM_Start+0x13e>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a39      	ldr	r2, [pc, #228]	; (800d520 <HAL_TIM_PWM_Start+0x214>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d004      	beq.n	800d44a <HAL_TIM_PWM_Start+0x13e>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	4a37      	ldr	r2, [pc, #220]	; (800d524 <HAL_TIM_PWM_Start+0x218>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d101      	bne.n	800d44e <HAL_TIM_PWM_Start+0x142>
 800d44a:	2301      	movs	r3, #1
 800d44c:	e000      	b.n	800d450 <HAL_TIM_PWM_Start+0x144>
 800d44e:	2300      	movs	r3, #0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d007      	beq.n	800d464 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d462:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a2a      	ldr	r2, [pc, #168]	; (800d514 <HAL_TIM_PWM_Start+0x208>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d02c      	beq.n	800d4c8 <HAL_TIM_PWM_Start+0x1bc>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d476:	d027      	beq.n	800d4c8 <HAL_TIM_PWM_Start+0x1bc>
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	4a2a      	ldr	r2, [pc, #168]	; (800d528 <HAL_TIM_PWM_Start+0x21c>)
 800d47e:	4293      	cmp	r3, r2
 800d480:	d022      	beq.n	800d4c8 <HAL_TIM_PWM_Start+0x1bc>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a29      	ldr	r2, [pc, #164]	; (800d52c <HAL_TIM_PWM_Start+0x220>)
 800d488:	4293      	cmp	r3, r2
 800d48a:	d01d      	beq.n	800d4c8 <HAL_TIM_PWM_Start+0x1bc>
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a27      	ldr	r2, [pc, #156]	; (800d530 <HAL_TIM_PWM_Start+0x224>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d018      	beq.n	800d4c8 <HAL_TIM_PWM_Start+0x1bc>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	4a1f      	ldr	r2, [pc, #124]	; (800d518 <HAL_TIM_PWM_Start+0x20c>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d013      	beq.n	800d4c8 <HAL_TIM_PWM_Start+0x1bc>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4a23      	ldr	r2, [pc, #140]	; (800d534 <HAL_TIM_PWM_Start+0x228>)
 800d4a6:	4293      	cmp	r3, r2
 800d4a8:	d00e      	beq.n	800d4c8 <HAL_TIM_PWM_Start+0x1bc>
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	4a1b      	ldr	r2, [pc, #108]	; (800d51c <HAL_TIM_PWM_Start+0x210>)
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d009      	beq.n	800d4c8 <HAL_TIM_PWM_Start+0x1bc>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	4a1f      	ldr	r2, [pc, #124]	; (800d538 <HAL_TIM_PWM_Start+0x22c>)
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	d004      	beq.n	800d4c8 <HAL_TIM_PWM_Start+0x1bc>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4a1e      	ldr	r2, [pc, #120]	; (800d53c <HAL_TIM_PWM_Start+0x230>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d115      	bne.n	800d4f4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	689a      	ldr	r2, [r3, #8]
 800d4ce:	4b1c      	ldr	r3, [pc, #112]	; (800d540 <HAL_TIM_PWM_Start+0x234>)
 800d4d0:	4013      	ands	r3, r2
 800d4d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	2b06      	cmp	r3, #6
 800d4d8:	d015      	beq.n	800d506 <HAL_TIM_PWM_Start+0x1fa>
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d4e0:	d011      	beq.n	800d506 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	681a      	ldr	r2, [r3, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	f042 0201 	orr.w	r2, r2, #1
 800d4f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d4f2:	e008      	b.n	800d506 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f042 0201 	orr.w	r2, r2, #1
 800d502:	601a      	str	r2, [r3, #0]
 800d504:	e000      	b.n	800d508 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d506:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d508:	2300      	movs	r3, #0
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3710      	adds	r7, #16
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	40010000 	.word	0x40010000
 800d518:	40010400 	.word	0x40010400
 800d51c:	40014000 	.word	0x40014000
 800d520:	40014400 	.word	0x40014400
 800d524:	40014800 	.word	0x40014800
 800d528:	40000400 	.word	0x40000400
 800d52c:	40000800 	.word	0x40000800
 800d530:	40000c00 	.word	0x40000c00
 800d534:	40001800 	.word	0x40001800
 800d538:	4000e000 	.word	0x4000e000
 800d53c:	4000e400 	.word	0x4000e400
 800d540:	00010007 	.word	0x00010007

0800d544 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d101      	bne.n	800d558 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	e08f      	b.n	800d678 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	2b00      	cmp	r3, #0
 800d562:	d106      	bne.n	800d572 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2200      	movs	r2, #0
 800d568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7f4 ff11 	bl	8002394 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2202      	movs	r2, #2
 800d576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6899      	ldr	r1, [r3, #8]
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	4b3e      	ldr	r3, [pc, #248]	; (800d680 <HAL_TIM_Encoder_Init+0x13c>)
 800d586:	400b      	ands	r3, r1
 800d588:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	3304      	adds	r3, #4
 800d592:	4619      	mov	r1, r3
 800d594:	4610      	mov	r0, r2
 800d596:	f000 fb8f 	bl	800dcb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	689b      	ldr	r3, [r3, #8]
 800d5a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	699b      	ldr	r3, [r3, #24]
 800d5a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	6a1b      	ldr	r3, [r3, #32]
 800d5b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	697a      	ldr	r2, [r7, #20]
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d5bc:	693a      	ldr	r2, [r7, #16]
 800d5be:	4b31      	ldr	r3, [pc, #196]	; (800d684 <HAL_TIM_Encoder_Init+0x140>)
 800d5c0:	4013      	ands	r3, r2
 800d5c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	689a      	ldr	r2, [r3, #8]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	699b      	ldr	r3, [r3, #24]
 800d5cc:	021b      	lsls	r3, r3, #8
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d5d6:	693a      	ldr	r2, [r7, #16]
 800d5d8:	4b2b      	ldr	r3, [pc, #172]	; (800d688 <HAL_TIM_Encoder_Init+0x144>)
 800d5da:	4013      	ands	r3, r2
 800d5dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d5de:	693a      	ldr	r2, [r7, #16]
 800d5e0:	4b2a      	ldr	r3, [pc, #168]	; (800d68c <HAL_TIM_Encoder_Init+0x148>)
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	68da      	ldr	r2, [r3, #12]
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	69db      	ldr	r3, [r3, #28]
 800d5ee:	021b      	lsls	r3, r3, #8
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	693a      	ldr	r2, [r7, #16]
 800d5f4:	4313      	orrs	r3, r2
 800d5f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	691b      	ldr	r3, [r3, #16]
 800d5fc:	011a      	lsls	r2, r3, #4
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	6a1b      	ldr	r3, [r3, #32]
 800d602:	031b      	lsls	r3, r3, #12
 800d604:	4313      	orrs	r3, r2
 800d606:	693a      	ldr	r2, [r7, #16]
 800d608:	4313      	orrs	r3, r2
 800d60a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d612:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d61a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	685a      	ldr	r2, [r3, #4]
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	011b      	lsls	r3, r3, #4
 800d626:	4313      	orrs	r3, r2
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	697a      	ldr	r2, [r7, #20]
 800d634:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	693a      	ldr	r2, [r7, #16]
 800d63c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	2201      	movs	r2, #1
 800d64a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2201      	movs	r2, #1
 800d652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2201      	movs	r2, #1
 800d65a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2201      	movs	r2, #1
 800d662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2201      	movs	r2, #1
 800d66a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	2201      	movs	r2, #1
 800d672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d676:	2300      	movs	r3, #0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	fffebff8 	.word	0xfffebff8
 800d684:	fffffcfc 	.word	0xfffffcfc
 800d688:	fffff3f3 	.word	0xfffff3f3
 800d68c:	ffff0f0f 	.word	0xffff0f0f

0800d690 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d6a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d6a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d6b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d6b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d110      	bne.n	800d6e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
 800d6c2:	2b01      	cmp	r3, #1
 800d6c4:	d102      	bne.n	800d6cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d6c6:	7b7b      	ldrb	r3, [r7, #13]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d001      	beq.n	800d6d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	e069      	b.n	800d7a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2202      	movs	r2, #2
 800d6d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2202      	movs	r2, #2
 800d6dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d6e0:	e031      	b.n	800d746 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	2b04      	cmp	r3, #4
 800d6e6:	d110      	bne.n	800d70a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d6e8:	7bbb      	ldrb	r3, [r7, #14]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d102      	bne.n	800d6f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d6ee:	7b3b      	ldrb	r3, [r7, #12]
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	d001      	beq.n	800d6f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	e055      	b.n	800d7a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2202      	movs	r2, #2
 800d6fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2202      	movs	r2, #2
 800d704:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d708:	e01d      	b.n	800d746 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d70a:	7bfb      	ldrb	r3, [r7, #15]
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d108      	bne.n	800d722 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d710:	7bbb      	ldrb	r3, [r7, #14]
 800d712:	2b01      	cmp	r3, #1
 800d714:	d105      	bne.n	800d722 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d716:	7b7b      	ldrb	r3, [r7, #13]
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d102      	bne.n	800d722 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d71c:	7b3b      	ldrb	r3, [r7, #12]
 800d71e:	2b01      	cmp	r3, #1
 800d720:	d001      	beq.n	800d726 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800d722:	2301      	movs	r3, #1
 800d724:	e03e      	b.n	800d7a4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2202      	movs	r2, #2
 800d72a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2202      	movs	r2, #2
 800d732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2202      	movs	r2, #2
 800d73a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2202      	movs	r2, #2
 800d742:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d003      	beq.n	800d754 <HAL_TIM_Encoder_Start+0xc4>
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	2b04      	cmp	r3, #4
 800d750:	d008      	beq.n	800d764 <HAL_TIM_Encoder_Start+0xd4>
 800d752:	e00f      	b.n	800d774 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2201      	movs	r2, #1
 800d75a:	2100      	movs	r1, #0
 800d75c:	4618      	mov	r0, r3
 800d75e:	f000 fec5 	bl	800e4ec <TIM_CCxChannelCmd>
      break;
 800d762:	e016      	b.n	800d792 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	2201      	movs	r2, #1
 800d76a:	2104      	movs	r1, #4
 800d76c:	4618      	mov	r0, r3
 800d76e:	f000 febd 	bl	800e4ec <TIM_CCxChannelCmd>
      break;
 800d772:	e00e      	b.n	800d792 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2201      	movs	r2, #1
 800d77a:	2100      	movs	r1, #0
 800d77c:	4618      	mov	r0, r3
 800d77e:	f000 feb5 	bl	800e4ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	2201      	movs	r2, #1
 800d788:	2104      	movs	r1, #4
 800d78a:	4618      	mov	r0, r3
 800d78c:	f000 feae 	bl	800e4ec <TIM_CCxChannelCmd>
      break;
 800d790:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	681a      	ldr	r2, [r3, #0]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	f042 0201 	orr.w	r2, r2, #1
 800d7a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	3710      	adds	r7, #16
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	bd80      	pop	{r7, pc}

0800d7ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b086      	sub	sp, #24
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d7b8:	2300      	movs	r3, #0
 800d7ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	d101      	bne.n	800d7ca <HAL_TIM_OC_ConfigChannel+0x1e>
 800d7c6:	2302      	movs	r3, #2
 800d7c8:	e066      	b.n	800d898 <HAL_TIM_OC_ConfigChannel+0xec>
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2b14      	cmp	r3, #20
 800d7d6:	d857      	bhi.n	800d888 <HAL_TIM_OC_ConfigChannel+0xdc>
 800d7d8:	a201      	add	r2, pc, #4	; (adr r2, 800d7e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800d7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7de:	bf00      	nop
 800d7e0:	0800d835 	.word	0x0800d835
 800d7e4:	0800d889 	.word	0x0800d889
 800d7e8:	0800d889 	.word	0x0800d889
 800d7ec:	0800d889 	.word	0x0800d889
 800d7f0:	0800d843 	.word	0x0800d843
 800d7f4:	0800d889 	.word	0x0800d889
 800d7f8:	0800d889 	.word	0x0800d889
 800d7fc:	0800d889 	.word	0x0800d889
 800d800:	0800d851 	.word	0x0800d851
 800d804:	0800d889 	.word	0x0800d889
 800d808:	0800d889 	.word	0x0800d889
 800d80c:	0800d889 	.word	0x0800d889
 800d810:	0800d85f 	.word	0x0800d85f
 800d814:	0800d889 	.word	0x0800d889
 800d818:	0800d889 	.word	0x0800d889
 800d81c:	0800d889 	.word	0x0800d889
 800d820:	0800d86d 	.word	0x0800d86d
 800d824:	0800d889 	.word	0x0800d889
 800d828:	0800d889 	.word	0x0800d889
 800d82c:	0800d889 	.word	0x0800d889
 800d830:	0800d87b 	.word	0x0800d87b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	68b9      	ldr	r1, [r7, #8]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 fae2 	bl	800de04 <TIM_OC1_SetConfig>
      break;
 800d840:	e025      	b.n	800d88e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	68b9      	ldr	r1, [r7, #8]
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 fb6b 	bl	800df24 <TIM_OC2_SetConfig>
      break;
 800d84e:	e01e      	b.n	800d88e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	68b9      	ldr	r1, [r7, #8]
 800d856:	4618      	mov	r0, r3
 800d858:	f000 fbee 	bl	800e038 <TIM_OC3_SetConfig>
      break;
 800d85c:	e017      	b.n	800d88e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	68b9      	ldr	r1, [r7, #8]
 800d864:	4618      	mov	r0, r3
 800d866:	f000 fc6f 	bl	800e148 <TIM_OC4_SetConfig>
      break;
 800d86a:	e010      	b.n	800d88e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	68b9      	ldr	r1, [r7, #8]
 800d872:	4618      	mov	r0, r3
 800d874:	f000 fcd2 	bl	800e21c <TIM_OC5_SetConfig>
      break;
 800d878:	e009      	b.n	800d88e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	68b9      	ldr	r1, [r7, #8]
 800d880:	4618      	mov	r0, r3
 800d882:	f000 fd2f 	bl	800e2e4 <TIM_OC6_SetConfig>
      break;
 800d886:	e002      	b.n	800d88e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 800d888:	2301      	movs	r3, #1
 800d88a:	75fb      	strb	r3, [r7, #23]
      break;
 800d88c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	2200      	movs	r2, #0
 800d892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d896:	7dfb      	ldrb	r3, [r7, #23]
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3718      	adds	r7, #24
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b086      	sub	sp, #24
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	60f8      	str	r0, [r7, #12]
 800d8a8:	60b9      	str	r1, [r7, #8]
 800d8aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d101      	bne.n	800d8be <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d8ba:	2302      	movs	r3, #2
 800d8bc:	e0ff      	b.n	800dabe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2201      	movs	r2, #1
 800d8c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2b14      	cmp	r3, #20
 800d8ca:	f200 80f0 	bhi.w	800daae <HAL_TIM_PWM_ConfigChannel+0x20e>
 800d8ce:	a201      	add	r2, pc, #4	; (adr r2, 800d8d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d4:	0800d929 	.word	0x0800d929
 800d8d8:	0800daaf 	.word	0x0800daaf
 800d8dc:	0800daaf 	.word	0x0800daaf
 800d8e0:	0800daaf 	.word	0x0800daaf
 800d8e4:	0800d969 	.word	0x0800d969
 800d8e8:	0800daaf 	.word	0x0800daaf
 800d8ec:	0800daaf 	.word	0x0800daaf
 800d8f0:	0800daaf 	.word	0x0800daaf
 800d8f4:	0800d9ab 	.word	0x0800d9ab
 800d8f8:	0800daaf 	.word	0x0800daaf
 800d8fc:	0800daaf 	.word	0x0800daaf
 800d900:	0800daaf 	.word	0x0800daaf
 800d904:	0800d9eb 	.word	0x0800d9eb
 800d908:	0800daaf 	.word	0x0800daaf
 800d90c:	0800daaf 	.word	0x0800daaf
 800d910:	0800daaf 	.word	0x0800daaf
 800d914:	0800da2d 	.word	0x0800da2d
 800d918:	0800daaf 	.word	0x0800daaf
 800d91c:	0800daaf 	.word	0x0800daaf
 800d920:	0800daaf 	.word	0x0800daaf
 800d924:	0800da6d 	.word	0x0800da6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	68b9      	ldr	r1, [r7, #8]
 800d92e:	4618      	mov	r0, r3
 800d930:	f000 fa68 	bl	800de04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	699a      	ldr	r2, [r3, #24]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f042 0208 	orr.w	r2, r2, #8
 800d942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	699a      	ldr	r2, [r3, #24]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f022 0204 	bic.w	r2, r2, #4
 800d952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6999      	ldr	r1, [r3, #24]
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	691a      	ldr	r2, [r3, #16]
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	430a      	orrs	r2, r1
 800d964:	619a      	str	r2, [r3, #24]
      break;
 800d966:	e0a5      	b.n	800dab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68b9      	ldr	r1, [r7, #8]
 800d96e:	4618      	mov	r0, r3
 800d970:	f000 fad8 	bl	800df24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	699a      	ldr	r2, [r3, #24]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	699a      	ldr	r2, [r3, #24]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	6999      	ldr	r1, [r3, #24]
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	021a      	lsls	r2, r3, #8
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	430a      	orrs	r2, r1
 800d9a6:	619a      	str	r2, [r3, #24]
      break;
 800d9a8:	e084      	b.n	800dab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	68b9      	ldr	r1, [r7, #8]
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f000 fb41 	bl	800e038 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	69da      	ldr	r2, [r3, #28]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	f042 0208 	orr.w	r2, r2, #8
 800d9c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	69da      	ldr	r2, [r3, #28]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f022 0204 	bic.w	r2, r2, #4
 800d9d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	69d9      	ldr	r1, [r3, #28]
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	691a      	ldr	r2, [r3, #16]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	430a      	orrs	r2, r1
 800d9e6:	61da      	str	r2, [r3, #28]
      break;
 800d9e8:	e064      	b.n	800dab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	68b9      	ldr	r1, [r7, #8]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f000 fba9 	bl	800e148 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	69da      	ldr	r2, [r3, #28]
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	69da      	ldr	r2, [r3, #28]
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	69d9      	ldr	r1, [r3, #28]
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	021a      	lsls	r2, r3, #8
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	430a      	orrs	r2, r1
 800da28:	61da      	str	r2, [r3, #28]
      break;
 800da2a:	e043      	b.n	800dab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	68b9      	ldr	r1, [r7, #8]
 800da32:	4618      	mov	r0, r3
 800da34:	f000 fbf2 	bl	800e21c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	f042 0208 	orr.w	r2, r2, #8
 800da46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f022 0204 	bic.w	r2, r2, #4
 800da56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800da5e:	68bb      	ldr	r3, [r7, #8]
 800da60:	691a      	ldr	r2, [r3, #16]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	430a      	orrs	r2, r1
 800da68:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800da6a:	e023      	b.n	800dab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	68b9      	ldr	r1, [r7, #8]
 800da72:	4618      	mov	r0, r3
 800da74:	f000 fc36 	bl	800e2e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da86:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da96:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	691b      	ldr	r3, [r3, #16]
 800daa2:	021a      	lsls	r2, r3, #8
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	430a      	orrs	r2, r1
 800daaa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800daac:	e002      	b.n	800dab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800daae:	2301      	movs	r3, #1
 800dab0:	75fb      	strb	r3, [r7, #23]
      break;
 800dab2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	2200      	movs	r2, #0
 800dab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dabc:	7dfb      	ldrb	r3, [r7, #23]
}
 800dabe:	4618      	mov	r0, r3
 800dac0:	3718      	adds	r7, #24
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop

0800dac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dad2:	2300      	movs	r3, #0
 800dad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d101      	bne.n	800dae4 <HAL_TIM_ConfigClockSource+0x1c>
 800dae0:	2302      	movs	r3, #2
 800dae2:	e0dc      	b.n	800dc9e <HAL_TIM_ConfigClockSource+0x1d6>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2202      	movs	r2, #2
 800daf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	4b6a      	ldr	r3, [pc, #424]	; (800dca8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800db00:	4013      	ands	r3, r2
 800db02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	68ba      	ldr	r2, [r7, #8]
 800db12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a64      	ldr	r2, [pc, #400]	; (800dcac <HAL_TIM_ConfigClockSource+0x1e4>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	f000 80a9 	beq.w	800dc72 <HAL_TIM_ConfigClockSource+0x1aa>
 800db20:	4a62      	ldr	r2, [pc, #392]	; (800dcac <HAL_TIM_ConfigClockSource+0x1e4>)
 800db22:	4293      	cmp	r3, r2
 800db24:	f200 80ae 	bhi.w	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800db28:	4a61      	ldr	r2, [pc, #388]	; (800dcb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800db2a:	4293      	cmp	r3, r2
 800db2c:	f000 80a1 	beq.w	800dc72 <HAL_TIM_ConfigClockSource+0x1aa>
 800db30:	4a5f      	ldr	r2, [pc, #380]	; (800dcb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800db32:	4293      	cmp	r3, r2
 800db34:	f200 80a6 	bhi.w	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800db38:	4a5e      	ldr	r2, [pc, #376]	; (800dcb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	f000 8099 	beq.w	800dc72 <HAL_TIM_ConfigClockSource+0x1aa>
 800db40:	4a5c      	ldr	r2, [pc, #368]	; (800dcb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db42:	4293      	cmp	r3, r2
 800db44:	f200 809e 	bhi.w	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800db48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db4c:	f000 8091 	beq.w	800dc72 <HAL_TIM_ConfigClockSource+0x1aa>
 800db50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db54:	f200 8096 	bhi.w	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800db58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db5c:	f000 8089 	beq.w	800dc72 <HAL_TIM_ConfigClockSource+0x1aa>
 800db60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db64:	f200 808e 	bhi.w	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800db68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db6c:	d03e      	beq.n	800dbec <HAL_TIM_ConfigClockSource+0x124>
 800db6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db72:	f200 8087 	bhi.w	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800db76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db7a:	f000 8086 	beq.w	800dc8a <HAL_TIM_ConfigClockSource+0x1c2>
 800db7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db82:	d87f      	bhi.n	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800db84:	2b70      	cmp	r3, #112	; 0x70
 800db86:	d01a      	beq.n	800dbbe <HAL_TIM_ConfigClockSource+0xf6>
 800db88:	2b70      	cmp	r3, #112	; 0x70
 800db8a:	d87b      	bhi.n	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800db8c:	2b60      	cmp	r3, #96	; 0x60
 800db8e:	d050      	beq.n	800dc32 <HAL_TIM_ConfigClockSource+0x16a>
 800db90:	2b60      	cmp	r3, #96	; 0x60
 800db92:	d877      	bhi.n	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800db94:	2b50      	cmp	r3, #80	; 0x50
 800db96:	d03c      	beq.n	800dc12 <HAL_TIM_ConfigClockSource+0x14a>
 800db98:	2b50      	cmp	r3, #80	; 0x50
 800db9a:	d873      	bhi.n	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800db9c:	2b40      	cmp	r3, #64	; 0x40
 800db9e:	d058      	beq.n	800dc52 <HAL_TIM_ConfigClockSource+0x18a>
 800dba0:	2b40      	cmp	r3, #64	; 0x40
 800dba2:	d86f      	bhi.n	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800dba4:	2b30      	cmp	r3, #48	; 0x30
 800dba6:	d064      	beq.n	800dc72 <HAL_TIM_ConfigClockSource+0x1aa>
 800dba8:	2b30      	cmp	r3, #48	; 0x30
 800dbaa:	d86b      	bhi.n	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbac:	2b20      	cmp	r3, #32
 800dbae:	d060      	beq.n	800dc72 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbb0:	2b20      	cmp	r3, #32
 800dbb2:	d867      	bhi.n	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d05c      	beq.n	800dc72 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbb8:	2b10      	cmp	r3, #16
 800dbba:	d05a      	beq.n	800dc72 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbbc:	e062      	b.n	800dc84 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6818      	ldr	r0, [r3, #0]
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	6899      	ldr	r1, [r3, #8]
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	685a      	ldr	r2, [r3, #4]
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	f000 fc6d 	bl	800e4ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dbe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	609a      	str	r2, [r3, #8]
      break;
 800dbea:	e04f      	b.n	800dc8c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6818      	ldr	r0, [r3, #0]
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	6899      	ldr	r1, [r3, #8]
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	685a      	ldr	r2, [r3, #4]
 800dbf8:	683b      	ldr	r3, [r7, #0]
 800dbfa:	68db      	ldr	r3, [r3, #12]
 800dbfc:	f000 fc56 	bl	800e4ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	689a      	ldr	r2, [r3, #8]
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dc0e:	609a      	str	r2, [r3, #8]
      break;
 800dc10:	e03c      	b.n	800dc8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6818      	ldr	r0, [r3, #0]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	6859      	ldr	r1, [r3, #4]
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	461a      	mov	r2, r3
 800dc20:	f000 fbc6 	bl	800e3b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	2150      	movs	r1, #80	; 0x50
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	f000 fc20 	bl	800e470 <TIM_ITRx_SetConfig>
      break;
 800dc30:	e02c      	b.n	800dc8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6818      	ldr	r0, [r3, #0]
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	6859      	ldr	r1, [r3, #4]
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	68db      	ldr	r3, [r3, #12]
 800dc3e:	461a      	mov	r2, r3
 800dc40:	f000 fbe5 	bl	800e40e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	2160      	movs	r1, #96	; 0x60
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f000 fc10 	bl	800e470 <TIM_ITRx_SetConfig>
      break;
 800dc50:	e01c      	b.n	800dc8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6818      	ldr	r0, [r3, #0]
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	6859      	ldr	r1, [r3, #4]
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	68db      	ldr	r3, [r3, #12]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	f000 fba6 	bl	800e3b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2140      	movs	r1, #64	; 0x40
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f000 fc00 	bl	800e470 <TIM_ITRx_SetConfig>
      break;
 800dc70:	e00c      	b.n	800dc8c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	4610      	mov	r0, r2
 800dc7e:	f000 fbf7 	bl	800e470 <TIM_ITRx_SetConfig>
      break;
 800dc82:	e003      	b.n	800dc8c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dc84:	2301      	movs	r3, #1
 800dc86:	73fb      	strb	r3, [r7, #15]
      break;
 800dc88:	e000      	b.n	800dc8c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dc8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2201      	movs	r2, #1
 800dc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2200      	movs	r2, #0
 800dc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dc9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	ffceff88 	.word	0xffceff88
 800dcac:	00100040 	.word	0x00100040
 800dcb0:	00100030 	.word	0x00100030
 800dcb4:	00100020 	.word	0x00100020

0800dcb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4a44      	ldr	r2, [pc, #272]	; (800dddc <TIM_Base_SetConfig+0x124>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d013      	beq.n	800dcf8 <TIM_Base_SetConfig+0x40>
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcd6:	d00f      	beq.n	800dcf8 <TIM_Base_SetConfig+0x40>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	4a41      	ldr	r2, [pc, #260]	; (800dde0 <TIM_Base_SetConfig+0x128>)
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	d00b      	beq.n	800dcf8 <TIM_Base_SetConfig+0x40>
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	4a40      	ldr	r2, [pc, #256]	; (800dde4 <TIM_Base_SetConfig+0x12c>)
 800dce4:	4293      	cmp	r3, r2
 800dce6:	d007      	beq.n	800dcf8 <TIM_Base_SetConfig+0x40>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	4a3f      	ldr	r2, [pc, #252]	; (800dde8 <TIM_Base_SetConfig+0x130>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d003      	beq.n	800dcf8 <TIM_Base_SetConfig+0x40>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	4a3e      	ldr	r2, [pc, #248]	; (800ddec <TIM_Base_SetConfig+0x134>)
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	d108      	bne.n	800dd0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	68fa      	ldr	r2, [r7, #12]
 800dd06:	4313      	orrs	r3, r2
 800dd08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4a33      	ldr	r2, [pc, #204]	; (800dddc <TIM_Base_SetConfig+0x124>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d027      	beq.n	800dd62 <TIM_Base_SetConfig+0xaa>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd18:	d023      	beq.n	800dd62 <TIM_Base_SetConfig+0xaa>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a30      	ldr	r2, [pc, #192]	; (800dde0 <TIM_Base_SetConfig+0x128>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d01f      	beq.n	800dd62 <TIM_Base_SetConfig+0xaa>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a2f      	ldr	r2, [pc, #188]	; (800dde4 <TIM_Base_SetConfig+0x12c>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d01b      	beq.n	800dd62 <TIM_Base_SetConfig+0xaa>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4a2e      	ldr	r2, [pc, #184]	; (800dde8 <TIM_Base_SetConfig+0x130>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d017      	beq.n	800dd62 <TIM_Base_SetConfig+0xaa>
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4a2d      	ldr	r2, [pc, #180]	; (800ddec <TIM_Base_SetConfig+0x134>)
 800dd36:	4293      	cmp	r3, r2
 800dd38:	d013      	beq.n	800dd62 <TIM_Base_SetConfig+0xaa>
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a2c      	ldr	r2, [pc, #176]	; (800ddf0 <TIM_Base_SetConfig+0x138>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d00f      	beq.n	800dd62 <TIM_Base_SetConfig+0xaa>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	4a2b      	ldr	r2, [pc, #172]	; (800ddf4 <TIM_Base_SetConfig+0x13c>)
 800dd46:	4293      	cmp	r3, r2
 800dd48:	d00b      	beq.n	800dd62 <TIM_Base_SetConfig+0xaa>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4a2a      	ldr	r2, [pc, #168]	; (800ddf8 <TIM_Base_SetConfig+0x140>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d007      	beq.n	800dd62 <TIM_Base_SetConfig+0xaa>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4a29      	ldr	r2, [pc, #164]	; (800ddfc <TIM_Base_SetConfig+0x144>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d003      	beq.n	800dd62 <TIM_Base_SetConfig+0xaa>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4a28      	ldr	r2, [pc, #160]	; (800de00 <TIM_Base_SetConfig+0x148>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d108      	bne.n	800dd74 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	68db      	ldr	r3, [r3, #12]
 800dd6e:	68fa      	ldr	r2, [r7, #12]
 800dd70:	4313      	orrs	r3, r2
 800dd72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	695b      	ldr	r3, [r3, #20]
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	68fa      	ldr	r2, [r7, #12]
 800dd86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	689a      	ldr	r2, [r3, #8]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	681a      	ldr	r2, [r3, #0]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4a10      	ldr	r2, [pc, #64]	; (800dddc <TIM_Base_SetConfig+0x124>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	d00f      	beq.n	800ddc0 <TIM_Base_SetConfig+0x108>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	4a12      	ldr	r2, [pc, #72]	; (800ddec <TIM_Base_SetConfig+0x134>)
 800dda4:	4293      	cmp	r3, r2
 800dda6:	d00b      	beq.n	800ddc0 <TIM_Base_SetConfig+0x108>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	4a11      	ldr	r2, [pc, #68]	; (800ddf0 <TIM_Base_SetConfig+0x138>)
 800ddac:	4293      	cmp	r3, r2
 800ddae:	d007      	beq.n	800ddc0 <TIM_Base_SetConfig+0x108>
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	4a10      	ldr	r2, [pc, #64]	; (800ddf4 <TIM_Base_SetConfig+0x13c>)
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d003      	beq.n	800ddc0 <TIM_Base_SetConfig+0x108>
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	4a0f      	ldr	r2, [pc, #60]	; (800ddf8 <TIM_Base_SetConfig+0x140>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d103      	bne.n	800ddc8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	691a      	ldr	r2, [r3, #16]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	615a      	str	r2, [r3, #20]
}
 800ddce:	bf00      	nop
 800ddd0:	3714      	adds	r7, #20
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop
 800dddc:	40010000 	.word	0x40010000
 800dde0:	40000400 	.word	0x40000400
 800dde4:	40000800 	.word	0x40000800
 800dde8:	40000c00 	.word	0x40000c00
 800ddec:	40010400 	.word	0x40010400
 800ddf0:	40014000 	.word	0x40014000
 800ddf4:	40014400 	.word	0x40014400
 800ddf8:	40014800 	.word	0x40014800
 800ddfc:	4000e000 	.word	0x4000e000
 800de00:	4000e400 	.word	0x4000e400

0800de04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de04:	b480      	push	{r7}
 800de06:	b087      	sub	sp, #28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6a1b      	ldr	r3, [r3, #32]
 800de12:	f023 0201 	bic.w	r2, r3, #1
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6a1b      	ldr	r3, [r3, #32]
 800de1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	699b      	ldr	r3, [r3, #24]
 800de2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	4b37      	ldr	r3, [pc, #220]	; (800df0c <TIM_OC1_SetConfig+0x108>)
 800de30:	4013      	ands	r3, r2
 800de32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f023 0303 	bic.w	r3, r3, #3
 800de3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	68fa      	ldr	r2, [r7, #12]
 800de42:	4313      	orrs	r3, r2
 800de44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	f023 0302 	bic.w	r3, r3, #2
 800de4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	689b      	ldr	r3, [r3, #8]
 800de52:	697a      	ldr	r2, [r7, #20]
 800de54:	4313      	orrs	r3, r2
 800de56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	4a2d      	ldr	r2, [pc, #180]	; (800df10 <TIM_OC1_SetConfig+0x10c>)
 800de5c:	4293      	cmp	r3, r2
 800de5e:	d00f      	beq.n	800de80 <TIM_OC1_SetConfig+0x7c>
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	4a2c      	ldr	r2, [pc, #176]	; (800df14 <TIM_OC1_SetConfig+0x110>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d00b      	beq.n	800de80 <TIM_OC1_SetConfig+0x7c>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	4a2b      	ldr	r2, [pc, #172]	; (800df18 <TIM_OC1_SetConfig+0x114>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d007      	beq.n	800de80 <TIM_OC1_SetConfig+0x7c>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a2a      	ldr	r2, [pc, #168]	; (800df1c <TIM_OC1_SetConfig+0x118>)
 800de74:	4293      	cmp	r3, r2
 800de76:	d003      	beq.n	800de80 <TIM_OC1_SetConfig+0x7c>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	4a29      	ldr	r2, [pc, #164]	; (800df20 <TIM_OC1_SetConfig+0x11c>)
 800de7c:	4293      	cmp	r3, r2
 800de7e:	d10c      	bne.n	800de9a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de80:	697b      	ldr	r3, [r7, #20]
 800de82:	f023 0308 	bic.w	r3, r3, #8
 800de86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	697a      	ldr	r2, [r7, #20]
 800de8e:	4313      	orrs	r3, r2
 800de90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	f023 0304 	bic.w	r3, r3, #4
 800de98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4a1c      	ldr	r2, [pc, #112]	; (800df10 <TIM_OC1_SetConfig+0x10c>)
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d00f      	beq.n	800dec2 <TIM_OC1_SetConfig+0xbe>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	4a1b      	ldr	r2, [pc, #108]	; (800df14 <TIM_OC1_SetConfig+0x110>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d00b      	beq.n	800dec2 <TIM_OC1_SetConfig+0xbe>
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	4a1a      	ldr	r2, [pc, #104]	; (800df18 <TIM_OC1_SetConfig+0x114>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d007      	beq.n	800dec2 <TIM_OC1_SetConfig+0xbe>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4a19      	ldr	r2, [pc, #100]	; (800df1c <TIM_OC1_SetConfig+0x118>)
 800deb6:	4293      	cmp	r3, r2
 800deb8:	d003      	beq.n	800dec2 <TIM_OC1_SetConfig+0xbe>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	4a18      	ldr	r2, [pc, #96]	; (800df20 <TIM_OC1_SetConfig+0x11c>)
 800debe:	4293      	cmp	r3, r2
 800dec0:	d111      	bne.n	800dee6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ded0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	693a      	ldr	r2, [r7, #16]
 800ded8:	4313      	orrs	r3, r2
 800deda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	699b      	ldr	r3, [r3, #24]
 800dee0:	693a      	ldr	r2, [r7, #16]
 800dee2:	4313      	orrs	r3, r2
 800dee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	693a      	ldr	r2, [r7, #16]
 800deea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	68fa      	ldr	r2, [r7, #12]
 800def0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	685a      	ldr	r2, [r3, #4]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	697a      	ldr	r2, [r7, #20]
 800defe:	621a      	str	r2, [r3, #32]
}
 800df00:	bf00      	nop
 800df02:	371c      	adds	r7, #28
 800df04:	46bd      	mov	sp, r7
 800df06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0a:	4770      	bx	lr
 800df0c:	fffeff8f 	.word	0xfffeff8f
 800df10:	40010000 	.word	0x40010000
 800df14:	40010400 	.word	0x40010400
 800df18:	40014000 	.word	0x40014000
 800df1c:	40014400 	.word	0x40014400
 800df20:	40014800 	.word	0x40014800

0800df24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df24:	b480      	push	{r7}
 800df26:	b087      	sub	sp, #28
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
 800df2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a1b      	ldr	r3, [r3, #32]
 800df32:	f023 0210 	bic.w	r2, r3, #16
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6a1b      	ldr	r3, [r3, #32]
 800df3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	699b      	ldr	r3, [r3, #24]
 800df4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df4c:	68fa      	ldr	r2, [r7, #12]
 800df4e:	4b34      	ldr	r3, [pc, #208]	; (800e020 <TIM_OC2_SetConfig+0xfc>)
 800df50:	4013      	ands	r3, r2
 800df52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	021b      	lsls	r3, r3, #8
 800df62:	68fa      	ldr	r2, [r7, #12]
 800df64:	4313      	orrs	r3, r2
 800df66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	f023 0320 	bic.w	r3, r3, #32
 800df6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	689b      	ldr	r3, [r3, #8]
 800df74:	011b      	lsls	r3, r3, #4
 800df76:	697a      	ldr	r2, [r7, #20]
 800df78:	4313      	orrs	r3, r2
 800df7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	4a29      	ldr	r2, [pc, #164]	; (800e024 <TIM_OC2_SetConfig+0x100>)
 800df80:	4293      	cmp	r3, r2
 800df82:	d003      	beq.n	800df8c <TIM_OC2_SetConfig+0x68>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	4a28      	ldr	r2, [pc, #160]	; (800e028 <TIM_OC2_SetConfig+0x104>)
 800df88:	4293      	cmp	r3, r2
 800df8a:	d10d      	bne.n	800dfa8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df8c:	697b      	ldr	r3, [r7, #20]
 800df8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	68db      	ldr	r3, [r3, #12]
 800df98:	011b      	lsls	r3, r3, #4
 800df9a:	697a      	ldr	r2, [r7, #20]
 800df9c:	4313      	orrs	r3, r2
 800df9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dfa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	4a1e      	ldr	r2, [pc, #120]	; (800e024 <TIM_OC2_SetConfig+0x100>)
 800dfac:	4293      	cmp	r3, r2
 800dfae:	d00f      	beq.n	800dfd0 <TIM_OC2_SetConfig+0xac>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	4a1d      	ldr	r2, [pc, #116]	; (800e028 <TIM_OC2_SetConfig+0x104>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d00b      	beq.n	800dfd0 <TIM_OC2_SetConfig+0xac>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	4a1c      	ldr	r2, [pc, #112]	; (800e02c <TIM_OC2_SetConfig+0x108>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d007      	beq.n	800dfd0 <TIM_OC2_SetConfig+0xac>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	4a1b      	ldr	r2, [pc, #108]	; (800e030 <TIM_OC2_SetConfig+0x10c>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d003      	beq.n	800dfd0 <TIM_OC2_SetConfig+0xac>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	4a1a      	ldr	r2, [pc, #104]	; (800e034 <TIM_OC2_SetConfig+0x110>)
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d113      	bne.n	800dff8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dfd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	695b      	ldr	r3, [r3, #20]
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	693a      	ldr	r2, [r7, #16]
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	699b      	ldr	r3, [r3, #24]
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	693a      	ldr	r2, [r7, #16]
 800dff4:	4313      	orrs	r3, r2
 800dff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	693a      	ldr	r2, [r7, #16]
 800dffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	68fa      	ldr	r2, [r7, #12]
 800e002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	685a      	ldr	r2, [r3, #4]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	621a      	str	r2, [r3, #32]
}
 800e012:	bf00      	nop
 800e014:	371c      	adds	r7, #28
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr
 800e01e:	bf00      	nop
 800e020:	feff8fff 	.word	0xfeff8fff
 800e024:	40010000 	.word	0x40010000
 800e028:	40010400 	.word	0x40010400
 800e02c:	40014000 	.word	0x40014000
 800e030:	40014400 	.word	0x40014400
 800e034:	40014800 	.word	0x40014800

0800e038 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e038:	b480      	push	{r7}
 800e03a:	b087      	sub	sp, #28
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a1b      	ldr	r3, [r3, #32]
 800e046:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a1b      	ldr	r3, [r3, #32]
 800e052:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	685b      	ldr	r3, [r3, #4]
 800e058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	69db      	ldr	r3, [r3, #28]
 800e05e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e060:	68fa      	ldr	r2, [r7, #12]
 800e062:	4b33      	ldr	r3, [pc, #204]	; (800e130 <TIM_OC3_SetConfig+0xf8>)
 800e064:	4013      	ands	r3, r2
 800e066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f023 0303 	bic.w	r3, r3, #3
 800e06e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	4313      	orrs	r3, r2
 800e078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e080:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	021b      	lsls	r3, r3, #8
 800e088:	697a      	ldr	r2, [r7, #20]
 800e08a:	4313      	orrs	r3, r2
 800e08c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4a28      	ldr	r2, [pc, #160]	; (800e134 <TIM_OC3_SetConfig+0xfc>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d003      	beq.n	800e09e <TIM_OC3_SetConfig+0x66>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4a27      	ldr	r2, [pc, #156]	; (800e138 <TIM_OC3_SetConfig+0x100>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d10d      	bne.n	800e0ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e0a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	021b      	lsls	r3, r3, #8
 800e0ac:	697a      	ldr	r2, [r7, #20]
 800e0ae:	4313      	orrs	r3, r2
 800e0b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e0b2:	697b      	ldr	r3, [r7, #20]
 800e0b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e0b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	4a1d      	ldr	r2, [pc, #116]	; (800e134 <TIM_OC3_SetConfig+0xfc>)
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	d00f      	beq.n	800e0e2 <TIM_OC3_SetConfig+0xaa>
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	4a1c      	ldr	r2, [pc, #112]	; (800e138 <TIM_OC3_SetConfig+0x100>)
 800e0c6:	4293      	cmp	r3, r2
 800e0c8:	d00b      	beq.n	800e0e2 <TIM_OC3_SetConfig+0xaa>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	4a1b      	ldr	r2, [pc, #108]	; (800e13c <TIM_OC3_SetConfig+0x104>)
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d007      	beq.n	800e0e2 <TIM_OC3_SetConfig+0xaa>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	4a1a      	ldr	r2, [pc, #104]	; (800e140 <TIM_OC3_SetConfig+0x108>)
 800e0d6:	4293      	cmp	r3, r2
 800e0d8:	d003      	beq.n	800e0e2 <TIM_OC3_SetConfig+0xaa>
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	4a19      	ldr	r2, [pc, #100]	; (800e144 <TIM_OC3_SetConfig+0x10c>)
 800e0de:	4293      	cmp	r3, r2
 800e0e0:	d113      	bne.n	800e10a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e0e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e0f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	695b      	ldr	r3, [r3, #20]
 800e0f6:	011b      	lsls	r3, r3, #4
 800e0f8:	693a      	ldr	r2, [r7, #16]
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	011b      	lsls	r3, r3, #4
 800e104:	693a      	ldr	r2, [r7, #16]
 800e106:	4313      	orrs	r3, r2
 800e108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	693a      	ldr	r2, [r7, #16]
 800e10e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	68fa      	ldr	r2, [r7, #12]
 800e114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	685a      	ldr	r2, [r3, #4]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	697a      	ldr	r2, [r7, #20]
 800e122:	621a      	str	r2, [r3, #32]
}
 800e124:	bf00      	nop
 800e126:	371c      	adds	r7, #28
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr
 800e130:	fffeff8f 	.word	0xfffeff8f
 800e134:	40010000 	.word	0x40010000
 800e138:	40010400 	.word	0x40010400
 800e13c:	40014000 	.word	0x40014000
 800e140:	40014400 	.word	0x40014400
 800e144:	40014800 	.word	0x40014800

0800e148 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e148:	b480      	push	{r7}
 800e14a:	b087      	sub	sp, #28
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6a1b      	ldr	r3, [r3, #32]
 800e156:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6a1b      	ldr	r3, [r3, #32]
 800e162:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	69db      	ldr	r3, [r3, #28]
 800e16e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e170:	68fa      	ldr	r2, [r7, #12]
 800e172:	4b24      	ldr	r3, [pc, #144]	; (800e204 <TIM_OC4_SetConfig+0xbc>)
 800e174:	4013      	ands	r3, r2
 800e176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e17e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	021b      	lsls	r3, r3, #8
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	4313      	orrs	r3, r2
 800e18a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e192:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	689b      	ldr	r3, [r3, #8]
 800e198:	031b      	lsls	r3, r3, #12
 800e19a:	693a      	ldr	r2, [r7, #16]
 800e19c:	4313      	orrs	r3, r2
 800e19e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4a19      	ldr	r2, [pc, #100]	; (800e208 <TIM_OC4_SetConfig+0xc0>)
 800e1a4:	4293      	cmp	r3, r2
 800e1a6:	d00f      	beq.n	800e1c8 <TIM_OC4_SetConfig+0x80>
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	4a18      	ldr	r2, [pc, #96]	; (800e20c <TIM_OC4_SetConfig+0xc4>)
 800e1ac:	4293      	cmp	r3, r2
 800e1ae:	d00b      	beq.n	800e1c8 <TIM_OC4_SetConfig+0x80>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	4a17      	ldr	r2, [pc, #92]	; (800e210 <TIM_OC4_SetConfig+0xc8>)
 800e1b4:	4293      	cmp	r3, r2
 800e1b6:	d007      	beq.n	800e1c8 <TIM_OC4_SetConfig+0x80>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	4a16      	ldr	r2, [pc, #88]	; (800e214 <TIM_OC4_SetConfig+0xcc>)
 800e1bc:	4293      	cmp	r3, r2
 800e1be:	d003      	beq.n	800e1c8 <TIM_OC4_SetConfig+0x80>
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	4a15      	ldr	r2, [pc, #84]	; (800e218 <TIM_OC4_SetConfig+0xd0>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d109      	bne.n	800e1dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e1ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	695b      	ldr	r3, [r3, #20]
 800e1d4:	019b      	lsls	r3, r3, #6
 800e1d6:	697a      	ldr	r2, [r7, #20]
 800e1d8:	4313      	orrs	r3, r2
 800e1da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	697a      	ldr	r2, [r7, #20]
 800e1e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	68fa      	ldr	r2, [r7, #12]
 800e1e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	685a      	ldr	r2, [r3, #4]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	693a      	ldr	r2, [r7, #16]
 800e1f4:	621a      	str	r2, [r3, #32]
}
 800e1f6:	bf00      	nop
 800e1f8:	371c      	adds	r7, #28
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e200:	4770      	bx	lr
 800e202:	bf00      	nop
 800e204:	feff8fff 	.word	0xfeff8fff
 800e208:	40010000 	.word	0x40010000
 800e20c:	40010400 	.word	0x40010400
 800e210:	40014000 	.word	0x40014000
 800e214:	40014400 	.word	0x40014400
 800e218:	40014800 	.word	0x40014800

0800e21c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e21c:	b480      	push	{r7}
 800e21e:	b087      	sub	sp, #28
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6a1b      	ldr	r3, [r3, #32]
 800e22a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6a1b      	ldr	r3, [r3, #32]
 800e236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	685b      	ldr	r3, [r3, #4]
 800e23c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e244:	68fa      	ldr	r2, [r7, #12]
 800e246:	4b21      	ldr	r3, [pc, #132]	; (800e2cc <TIM_OC5_SetConfig+0xb0>)
 800e248:	4013      	ands	r3, r2
 800e24a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	68fa      	ldr	r2, [r7, #12]
 800e252:	4313      	orrs	r3, r2
 800e254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e25c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	689b      	ldr	r3, [r3, #8]
 800e262:	041b      	lsls	r3, r3, #16
 800e264:	693a      	ldr	r2, [r7, #16]
 800e266:	4313      	orrs	r3, r2
 800e268:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	4a18      	ldr	r2, [pc, #96]	; (800e2d0 <TIM_OC5_SetConfig+0xb4>)
 800e26e:	4293      	cmp	r3, r2
 800e270:	d00f      	beq.n	800e292 <TIM_OC5_SetConfig+0x76>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4a17      	ldr	r2, [pc, #92]	; (800e2d4 <TIM_OC5_SetConfig+0xb8>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d00b      	beq.n	800e292 <TIM_OC5_SetConfig+0x76>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4a16      	ldr	r2, [pc, #88]	; (800e2d8 <TIM_OC5_SetConfig+0xbc>)
 800e27e:	4293      	cmp	r3, r2
 800e280:	d007      	beq.n	800e292 <TIM_OC5_SetConfig+0x76>
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	4a15      	ldr	r2, [pc, #84]	; (800e2dc <TIM_OC5_SetConfig+0xc0>)
 800e286:	4293      	cmp	r3, r2
 800e288:	d003      	beq.n	800e292 <TIM_OC5_SetConfig+0x76>
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	4a14      	ldr	r2, [pc, #80]	; (800e2e0 <TIM_OC5_SetConfig+0xc4>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d109      	bne.n	800e2a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e298:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	695b      	ldr	r3, [r3, #20]
 800e29e:	021b      	lsls	r3, r3, #8
 800e2a0:	697a      	ldr	r2, [r7, #20]
 800e2a2:	4313      	orrs	r3, r2
 800e2a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	697a      	ldr	r2, [r7, #20]
 800e2aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	68fa      	ldr	r2, [r7, #12]
 800e2b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	685a      	ldr	r2, [r3, #4]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	693a      	ldr	r2, [r7, #16]
 800e2be:	621a      	str	r2, [r3, #32]
}
 800e2c0:	bf00      	nop
 800e2c2:	371c      	adds	r7, #28
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr
 800e2cc:	fffeff8f 	.word	0xfffeff8f
 800e2d0:	40010000 	.word	0x40010000
 800e2d4:	40010400 	.word	0x40010400
 800e2d8:	40014000 	.word	0x40014000
 800e2dc:	40014400 	.word	0x40014400
 800e2e0:	40014800 	.word	0x40014800

0800e2e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b087      	sub	sp, #28
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6a1b      	ldr	r3, [r3, #32]
 800e2f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6a1b      	ldr	r3, [r3, #32]
 800e2fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e30a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e30c:	68fa      	ldr	r2, [r7, #12]
 800e30e:	4b22      	ldr	r3, [pc, #136]	; (800e398 <TIM_OC6_SetConfig+0xb4>)
 800e310:	4013      	ands	r3, r2
 800e312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	021b      	lsls	r3, r3, #8
 800e31a:	68fa      	ldr	r2, [r7, #12]
 800e31c:	4313      	orrs	r3, r2
 800e31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	689b      	ldr	r3, [r3, #8]
 800e32c:	051b      	lsls	r3, r3, #20
 800e32e:	693a      	ldr	r2, [r7, #16]
 800e330:	4313      	orrs	r3, r2
 800e332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	4a19      	ldr	r2, [pc, #100]	; (800e39c <TIM_OC6_SetConfig+0xb8>)
 800e338:	4293      	cmp	r3, r2
 800e33a:	d00f      	beq.n	800e35c <TIM_OC6_SetConfig+0x78>
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	4a18      	ldr	r2, [pc, #96]	; (800e3a0 <TIM_OC6_SetConfig+0xbc>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d00b      	beq.n	800e35c <TIM_OC6_SetConfig+0x78>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	4a17      	ldr	r2, [pc, #92]	; (800e3a4 <TIM_OC6_SetConfig+0xc0>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d007      	beq.n	800e35c <TIM_OC6_SetConfig+0x78>
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	4a16      	ldr	r2, [pc, #88]	; (800e3a8 <TIM_OC6_SetConfig+0xc4>)
 800e350:	4293      	cmp	r3, r2
 800e352:	d003      	beq.n	800e35c <TIM_OC6_SetConfig+0x78>
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	4a15      	ldr	r2, [pc, #84]	; (800e3ac <TIM_OC6_SetConfig+0xc8>)
 800e358:	4293      	cmp	r3, r2
 800e35a:	d109      	bne.n	800e370 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e362:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	695b      	ldr	r3, [r3, #20]
 800e368:	029b      	lsls	r3, r3, #10
 800e36a:	697a      	ldr	r2, [r7, #20]
 800e36c:	4313      	orrs	r3, r2
 800e36e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	697a      	ldr	r2, [r7, #20]
 800e374:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	685a      	ldr	r2, [r3, #4]
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	693a      	ldr	r2, [r7, #16]
 800e388:	621a      	str	r2, [r3, #32]
}
 800e38a:	bf00      	nop
 800e38c:	371c      	adds	r7, #28
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr
 800e396:	bf00      	nop
 800e398:	feff8fff 	.word	0xfeff8fff
 800e39c:	40010000 	.word	0x40010000
 800e3a0:	40010400 	.word	0x40010400
 800e3a4:	40014000 	.word	0x40014000
 800e3a8:	40014400 	.word	0x40014400
 800e3ac:	40014800 	.word	0x40014800

0800e3b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	60b9      	str	r1, [r7, #8]
 800e3ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	6a1b      	ldr	r3, [r3, #32]
 800e3c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	6a1b      	ldr	r3, [r3, #32]
 800e3c6:	f023 0201 	bic.w	r2, r3, #1
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	699b      	ldr	r3, [r3, #24]
 800e3d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e3d4:	693b      	ldr	r3, [r7, #16]
 800e3d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e3da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	011b      	lsls	r3, r3, #4
 800e3e0:	693a      	ldr	r2, [r7, #16]
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	f023 030a 	bic.w	r3, r3, #10
 800e3ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e3ee:	697a      	ldr	r2, [r7, #20]
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	4313      	orrs	r3, r2
 800e3f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	693a      	ldr	r2, [r7, #16]
 800e3fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	697a      	ldr	r2, [r7, #20]
 800e400:	621a      	str	r2, [r3, #32]
}
 800e402:	bf00      	nop
 800e404:	371c      	adds	r7, #28
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr

0800e40e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e40e:	b480      	push	{r7}
 800e410:	b087      	sub	sp, #28
 800e412:	af00      	add	r7, sp, #0
 800e414:	60f8      	str	r0, [r7, #12]
 800e416:	60b9      	str	r1, [r7, #8]
 800e418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6a1b      	ldr	r3, [r3, #32]
 800e41e:	f023 0210 	bic.w	r2, r3, #16
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	699b      	ldr	r3, [r3, #24]
 800e42a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	6a1b      	ldr	r3, [r3, #32]
 800e430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e432:	697b      	ldr	r3, [r7, #20]
 800e434:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	031b      	lsls	r3, r3, #12
 800e43e:	697a      	ldr	r2, [r7, #20]
 800e440:	4313      	orrs	r3, r2
 800e442:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e44a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	011b      	lsls	r3, r3, #4
 800e450:	693a      	ldr	r2, [r7, #16]
 800e452:	4313      	orrs	r3, r2
 800e454:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	697a      	ldr	r2, [r7, #20]
 800e45a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	693a      	ldr	r2, [r7, #16]
 800e460:	621a      	str	r2, [r3, #32]
}
 800e462:	bf00      	nop
 800e464:	371c      	adds	r7, #28
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
	...

0800e470 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e470:	b480      	push	{r7}
 800e472:	b085      	sub	sp, #20
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	689b      	ldr	r3, [r3, #8]
 800e47e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	4b09      	ldr	r3, [pc, #36]	; (800e4a8 <TIM_ITRx_SetConfig+0x38>)
 800e484:	4013      	ands	r3, r2
 800e486:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e488:	683a      	ldr	r2, [r7, #0]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	f043 0307 	orr.w	r3, r3, #7
 800e492:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	68fa      	ldr	r2, [r7, #12]
 800e498:	609a      	str	r2, [r3, #8]
}
 800e49a:	bf00      	nop
 800e49c:	3714      	adds	r7, #20
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a4:	4770      	bx	lr
 800e4a6:	bf00      	nop
 800e4a8:	ffcfff8f 	.word	0xffcfff8f

0800e4ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b087      	sub	sp, #28
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	607a      	str	r2, [r7, #4]
 800e4b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e4c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	021a      	lsls	r2, r3, #8
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	431a      	orrs	r2, r3
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	4313      	orrs	r3, r2
 800e4d4:	697a      	ldr	r2, [r7, #20]
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	697a      	ldr	r2, [r7, #20]
 800e4de:	609a      	str	r2, [r3, #8]
}
 800e4e0:	bf00      	nop
 800e4e2:	371c      	adds	r7, #28
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ea:	4770      	bx	lr

0800e4ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e4ec:	b480      	push	{r7}
 800e4ee:	b087      	sub	sp, #28
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	f003 031f 	and.w	r3, r3, #31
 800e4fe:	2201      	movs	r2, #1
 800e500:	fa02 f303 	lsl.w	r3, r2, r3
 800e504:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	6a1a      	ldr	r2, [r3, #32]
 800e50a:	697b      	ldr	r3, [r7, #20]
 800e50c:	43db      	mvns	r3, r3
 800e50e:	401a      	ands	r2, r3
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6a1a      	ldr	r2, [r3, #32]
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	f003 031f 	and.w	r3, r3, #31
 800e51e:	6879      	ldr	r1, [r7, #4]
 800e520:	fa01 f303 	lsl.w	r3, r1, r3
 800e524:	431a      	orrs	r2, r3
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	621a      	str	r2, [r3, #32]
}
 800e52a:	bf00      	nop
 800e52c:	371c      	adds	r7, #28
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr
	...

0800e538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e538:	b480      	push	{r7}
 800e53a:	b085      	sub	sp, #20
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d101      	bne.n	800e550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e54c:	2302      	movs	r3, #2
 800e54e:	e077      	b.n	800e640 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2202      	movs	r2, #2
 800e55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	685b      	ldr	r3, [r3, #4]
 800e566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	4a35      	ldr	r2, [pc, #212]	; (800e64c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e576:	4293      	cmp	r3, r2
 800e578:	d004      	beq.n	800e584 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4a34      	ldr	r2, [pc, #208]	; (800e650 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e580:	4293      	cmp	r3, r2
 800e582:	d108      	bne.n	800e596 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e58a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	685b      	ldr	r3, [r3, #4]
 800e590:	68fa      	ldr	r2, [r7, #12]
 800e592:	4313      	orrs	r3, r2
 800e594:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e59c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	68fa      	ldr	r2, [r7, #12]
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	68fa      	ldr	r2, [r7, #12]
 800e5ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a25      	ldr	r2, [pc, #148]	; (800e64c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d02c      	beq.n	800e614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5c2:	d027      	beq.n	800e614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a22      	ldr	r2, [pc, #136]	; (800e654 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d022      	beq.n	800e614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4a21      	ldr	r2, [pc, #132]	; (800e658 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d01d      	beq.n	800e614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a1f      	ldr	r2, [pc, #124]	; (800e65c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d018      	beq.n	800e614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a1a      	ldr	r2, [pc, #104]	; (800e650 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d013      	beq.n	800e614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a1b      	ldr	r2, [pc, #108]	; (800e660 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d00e      	beq.n	800e614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4a1a      	ldr	r2, [pc, #104]	; (800e664 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800e5fc:	4293      	cmp	r3, r2
 800e5fe:	d009      	beq.n	800e614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a18      	ldr	r2, [pc, #96]	; (800e668 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d004      	beq.n	800e614 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a17      	ldr	r2, [pc, #92]	; (800e66c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d10c      	bne.n	800e62e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e61a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	689b      	ldr	r3, [r3, #8]
 800e620:	68ba      	ldr	r2, [r7, #8]
 800e622:	4313      	orrs	r3, r2
 800e624:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	68ba      	ldr	r2, [r7, #8]
 800e62c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2200      	movs	r2, #0
 800e63a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e63e:	2300      	movs	r3, #0
}
 800e640:	4618      	mov	r0, r3
 800e642:	3714      	adds	r7, #20
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr
 800e64c:	40010000 	.word	0x40010000
 800e650:	40010400 	.word	0x40010400
 800e654:	40000400 	.word	0x40000400
 800e658:	40000800 	.word	0x40000800
 800e65c:	40000c00 	.word	0x40000c00
 800e660:	40001800 	.word	0x40001800
 800e664:	40014000 	.word	0x40014000
 800e668:	4000e000 	.word	0x4000e000
 800e66c:	4000e400 	.word	0x4000e400

0800e670 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e670:	b480      	push	{r7}
 800e672:	b085      	sub	sp, #20
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e67a:	2300      	movs	r3, #0
 800e67c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e684:	2b01      	cmp	r3, #1
 800e686:	d101      	bne.n	800e68c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e688:	2302      	movs	r3, #2
 800e68a:	e087      	b.n	800e79c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2201      	movs	r2, #1
 800e690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	68db      	ldr	r3, [r3, #12]
 800e69e:	4313      	orrs	r3, r2
 800e6a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	4313      	orrs	r3, r2
 800e6ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	4313      	orrs	r3, r2
 800e6bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4313      	orrs	r3, r2
 800e6ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e6d2:	683b      	ldr	r3, [r7, #0]
 800e6d4:	691b      	ldr	r3, [r3, #16]
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	695b      	ldr	r3, [r3, #20]
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6f2:	4313      	orrs	r3, r2
 800e6f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	699b      	ldr	r3, [r3, #24]
 800e700:	041b      	lsls	r3, r3, #16
 800e702:	4313      	orrs	r3, r2
 800e704:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	4a27      	ldr	r2, [pc, #156]	; (800e7a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e70c:	4293      	cmp	r3, r2
 800e70e:	d004      	beq.n	800e71a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	4a25      	ldr	r2, [pc, #148]	; (800e7ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e716:	4293      	cmp	r3, r2
 800e718:	d106      	bne.n	800e728 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	69db      	ldr	r3, [r3, #28]
 800e724:	4313      	orrs	r3, r2
 800e726:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	4a1e      	ldr	r2, [pc, #120]	; (800e7a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e72e:	4293      	cmp	r3, r2
 800e730:	d004      	beq.n	800e73c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a1d      	ldr	r2, [pc, #116]	; (800e7ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e738:	4293      	cmp	r3, r2
 800e73a:	d126      	bne.n	800e78a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e746:	051b      	lsls	r3, r3, #20
 800e748:	4313      	orrs	r3, r2
 800e74a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	6a1b      	ldr	r3, [r3, #32]
 800e756:	4313      	orrs	r3, r2
 800e758:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e764:	4313      	orrs	r3, r2
 800e766:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a0e      	ldr	r2, [pc, #56]	; (800e7a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d004      	beq.n	800e77c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	4a0d      	ldr	r2, [pc, #52]	; (800e7ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800e778:	4293      	cmp	r3, r2
 800e77a:	d106      	bne.n	800e78a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e786:	4313      	orrs	r3, r2
 800e788:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	68fa      	ldr	r2, [r7, #12]
 800e790:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2200      	movs	r2, #0
 800e796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e79a:	2300      	movs	r3, #0
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3714      	adds	r7, #20
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a6:	4770      	bx	lr
 800e7a8:	40010000 	.word	0x40010000
 800e7ac:	40010400 	.word	0x40010400

0800e7b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d101      	bne.n	800e7c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e042      	b.n	800e848 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d106      	bne.n	800e7da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f7f4 f925 	bl	8002a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2224      	movs	r2, #36	; 0x24
 800e7de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f022 0201 	bic.w	r2, r2, #1
 800e7f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 f8ee 	bl	800e9d4 <UART_SetConfig>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d101      	bne.n	800e802 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	e022      	b.n	800e848 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f000 ff40 	bl	800f690 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	685a      	ldr	r2, [r3, #4]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e81e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	689a      	ldr	r2, [r3, #8]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e82e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f042 0201 	orr.w	r2, r2, #1
 800e83e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f000 ffc7 	bl	800f7d4 <UART_CheckIdleState>
 800e846:	4603      	mov	r3, r0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b08a      	sub	sp, #40	; 0x28
 800e854:	af00      	add	r7, sp, #0
 800e856:	60f8      	str	r0, [r7, #12]
 800e858:	60b9      	str	r1, [r7, #8]
 800e85a:	4613      	mov	r3, r2
 800e85c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e864:	2b20      	cmp	r3, #32
 800e866:	d142      	bne.n	800e8ee <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d002      	beq.n	800e874 <HAL_UART_Receive_IT+0x24>
 800e86e:	88fb      	ldrh	r3, [r7, #6]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d101      	bne.n	800e878 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e874:	2301      	movs	r3, #1
 800e876:	e03b      	b.n	800e8f0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d101      	bne.n	800e886 <HAL_UART_Receive_IT+0x36>
 800e882:	2302      	movs	r3, #2
 800e884:	e034      	b.n	800e8f0 <HAL_UART_Receive_IT+0xa0>
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2201      	movs	r2, #1
 800e88a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2200      	movs	r2, #0
 800e892:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a17      	ldr	r2, [pc, #92]	; (800e8f8 <HAL_UART_Receive_IT+0xa8>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d01f      	beq.n	800e8de <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d018      	beq.n	800e8de <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b2:	697b      	ldr	r3, [r7, #20]
 800e8b4:	e853 3f00 	ldrex	r3, [r3]
 800e8b8:	613b      	str	r3, [r7, #16]
   return(result);
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e8c0:	627b      	str	r3, [r7, #36]	; 0x24
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	461a      	mov	r2, r3
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ca:	623b      	str	r3, [r7, #32]
 800e8cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ce:	69f9      	ldr	r1, [r7, #28]
 800e8d0:	6a3a      	ldr	r2, [r7, #32]
 800e8d2:	e841 2300 	strex	r3, r2, [r1]
 800e8d6:	61bb      	str	r3, [r7, #24]
   return(result);
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1e6      	bne.n	800e8ac <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e8de:	88fb      	ldrh	r3, [r7, #6]
 800e8e0:	461a      	mov	r2, r3
 800e8e2:	68b9      	ldr	r1, [r7, #8]
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f001 f889 	bl	800f9fc <UART_Start_Receive_IT>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	e000      	b.n	800e8f0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e8ee:	2302      	movs	r3, #2
  }
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3728      	adds	r7, #40	; 0x28
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}
 800e8f8:	58000c00 	.word	0x58000c00

0800e8fc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b08a      	sub	sp, #40	; 0x28
 800e900:	af00      	add	r7, sp, #0
 800e902:	60f8      	str	r0, [r7, #12]
 800e904:	60b9      	str	r1, [r7, #8]
 800e906:	4613      	mov	r3, r2
 800e908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e910:	2b20      	cmp	r3, #32
 800e912:	d142      	bne.n	800e99a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d002      	beq.n	800e920 <HAL_UART_Receive_DMA+0x24>
 800e91a:	88fb      	ldrh	r3, [r7, #6]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d101      	bne.n	800e924 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800e920:	2301      	movs	r3, #1
 800e922:	e03b      	b.n	800e99c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d101      	bne.n	800e932 <HAL_UART_Receive_DMA+0x36>
 800e92e:	2302      	movs	r3, #2
 800e930:	e034      	b.n	800e99c <HAL_UART_Receive_DMA+0xa0>
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2201      	movs	r2, #1
 800e936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	2200      	movs	r2, #0
 800e93e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	4a17      	ldr	r2, [pc, #92]	; (800e9a4 <HAL_UART_Receive_DMA+0xa8>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d01f      	beq.n	800e98a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e954:	2b00      	cmp	r3, #0
 800e956:	d018      	beq.n	800e98a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e95e:	697b      	ldr	r3, [r7, #20]
 800e960:	e853 3f00 	ldrex	r3, [r3]
 800e964:	613b      	str	r3, [r7, #16]
   return(result);
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e96c:	627b      	str	r3, [r7, #36]	; 0x24
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	461a      	mov	r2, r3
 800e974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e976:	623b      	str	r3, [r7, #32]
 800e978:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97a:	69f9      	ldr	r1, [r7, #28]
 800e97c:	6a3a      	ldr	r2, [r7, #32]
 800e97e:	e841 2300 	strex	r3, r2, [r1]
 800e982:	61bb      	str	r3, [r7, #24]
   return(result);
 800e984:	69bb      	ldr	r3, [r7, #24]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d1e6      	bne.n	800e958 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800e98a:	88fb      	ldrh	r3, [r7, #6]
 800e98c:	461a      	mov	r2, r3
 800e98e:	68b9      	ldr	r1, [r7, #8]
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f001 f95d 	bl	800fc50 <UART_Start_Receive_DMA>
 800e996:	4603      	mov	r3, r0
 800e998:	e000      	b.n	800e99c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e99a:	2302      	movs	r3, #2
  }
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3728      	adds	r7, #40	; 0x28
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}
 800e9a4:	58000c00 	.word	0x58000c00

0800e9a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b083      	sub	sp, #12
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e9b0:	bf00      	nop
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e9bc:	b480      	push	{r7}
 800e9be:	b083      	sub	sp, #12
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e9c8:	bf00      	nop
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e9d4:	b5b0      	push	{r4, r5, r7, lr}
 800e9d6:	b08e      	sub	sp, #56	; 0x38
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	689a      	ldr	r2, [r3, #8]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	691b      	ldr	r3, [r3, #16]
 800e9ea:	431a      	orrs	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	695b      	ldr	r3, [r3, #20]
 800e9f0:	431a      	orrs	r2, r3
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	69db      	ldr	r3, [r3, #28]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	4bbf      	ldr	r3, [pc, #764]	; (800ed00 <UART_SetConfig+0x32c>)
 800ea02:	4013      	ands	r3, r2
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	6812      	ldr	r2, [r2, #0]
 800ea08:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ea0a:	430b      	orrs	r3, r1
 800ea0c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	68da      	ldr	r2, [r3, #12]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	430a      	orrs	r2, r1
 800ea22:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	699b      	ldr	r3, [r3, #24]
 800ea28:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4ab5      	ldr	r2, [pc, #724]	; (800ed04 <UART_SetConfig+0x330>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d004      	beq.n	800ea3e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	6a1b      	ldr	r3, [r3, #32]
 800ea38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea3a:	4313      	orrs	r3, r2
 800ea3c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	689a      	ldr	r2, [r3, #8]
 800ea44:	4bb0      	ldr	r3, [pc, #704]	; (800ed08 <UART_SetConfig+0x334>)
 800ea46:	4013      	ands	r3, r2
 800ea48:	687a      	ldr	r2, [r7, #4]
 800ea4a:	6812      	ldr	r2, [r2, #0]
 800ea4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ea4e:	430b      	orrs	r3, r1
 800ea50:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea58:	f023 010f 	bic.w	r1, r3, #15
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	430a      	orrs	r2, r1
 800ea66:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4aa7      	ldr	r2, [pc, #668]	; (800ed0c <UART_SetConfig+0x338>)
 800ea6e:	4293      	cmp	r3, r2
 800ea70:	d176      	bne.n	800eb60 <UART_SetConfig+0x18c>
 800ea72:	4ba7      	ldr	r3, [pc, #668]	; (800ed10 <UART_SetConfig+0x33c>)
 800ea74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ea7a:	2b28      	cmp	r3, #40	; 0x28
 800ea7c:	d86c      	bhi.n	800eb58 <UART_SetConfig+0x184>
 800ea7e:	a201      	add	r2, pc, #4	; (adr r2, 800ea84 <UART_SetConfig+0xb0>)
 800ea80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea84:	0800eb29 	.word	0x0800eb29
 800ea88:	0800eb59 	.word	0x0800eb59
 800ea8c:	0800eb59 	.word	0x0800eb59
 800ea90:	0800eb59 	.word	0x0800eb59
 800ea94:	0800eb59 	.word	0x0800eb59
 800ea98:	0800eb59 	.word	0x0800eb59
 800ea9c:	0800eb59 	.word	0x0800eb59
 800eaa0:	0800eb59 	.word	0x0800eb59
 800eaa4:	0800eb31 	.word	0x0800eb31
 800eaa8:	0800eb59 	.word	0x0800eb59
 800eaac:	0800eb59 	.word	0x0800eb59
 800eab0:	0800eb59 	.word	0x0800eb59
 800eab4:	0800eb59 	.word	0x0800eb59
 800eab8:	0800eb59 	.word	0x0800eb59
 800eabc:	0800eb59 	.word	0x0800eb59
 800eac0:	0800eb59 	.word	0x0800eb59
 800eac4:	0800eb39 	.word	0x0800eb39
 800eac8:	0800eb59 	.word	0x0800eb59
 800eacc:	0800eb59 	.word	0x0800eb59
 800ead0:	0800eb59 	.word	0x0800eb59
 800ead4:	0800eb59 	.word	0x0800eb59
 800ead8:	0800eb59 	.word	0x0800eb59
 800eadc:	0800eb59 	.word	0x0800eb59
 800eae0:	0800eb59 	.word	0x0800eb59
 800eae4:	0800eb41 	.word	0x0800eb41
 800eae8:	0800eb59 	.word	0x0800eb59
 800eaec:	0800eb59 	.word	0x0800eb59
 800eaf0:	0800eb59 	.word	0x0800eb59
 800eaf4:	0800eb59 	.word	0x0800eb59
 800eaf8:	0800eb59 	.word	0x0800eb59
 800eafc:	0800eb59 	.word	0x0800eb59
 800eb00:	0800eb59 	.word	0x0800eb59
 800eb04:	0800eb49 	.word	0x0800eb49
 800eb08:	0800eb59 	.word	0x0800eb59
 800eb0c:	0800eb59 	.word	0x0800eb59
 800eb10:	0800eb59 	.word	0x0800eb59
 800eb14:	0800eb59 	.word	0x0800eb59
 800eb18:	0800eb59 	.word	0x0800eb59
 800eb1c:	0800eb59 	.word	0x0800eb59
 800eb20:	0800eb59 	.word	0x0800eb59
 800eb24:	0800eb51 	.word	0x0800eb51
 800eb28:	2301      	movs	r3, #1
 800eb2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb2e:	e326      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eb30:	2304      	movs	r3, #4
 800eb32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb36:	e322      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eb38:	2308      	movs	r3, #8
 800eb3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb3e:	e31e      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eb40:	2310      	movs	r3, #16
 800eb42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb46:	e31a      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eb48:	2320      	movs	r3, #32
 800eb4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb4e:	e316      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eb50:	2340      	movs	r3, #64	; 0x40
 800eb52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb56:	e312      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eb58:	2380      	movs	r3, #128	; 0x80
 800eb5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb5e:	e30e      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	4a6b      	ldr	r2, [pc, #428]	; (800ed14 <UART_SetConfig+0x340>)
 800eb66:	4293      	cmp	r3, r2
 800eb68:	d130      	bne.n	800ebcc <UART_SetConfig+0x1f8>
 800eb6a:	4b69      	ldr	r3, [pc, #420]	; (800ed10 <UART_SetConfig+0x33c>)
 800eb6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb6e:	f003 0307 	and.w	r3, r3, #7
 800eb72:	2b05      	cmp	r3, #5
 800eb74:	d826      	bhi.n	800ebc4 <UART_SetConfig+0x1f0>
 800eb76:	a201      	add	r2, pc, #4	; (adr r2, 800eb7c <UART_SetConfig+0x1a8>)
 800eb78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb7c:	0800eb95 	.word	0x0800eb95
 800eb80:	0800eb9d 	.word	0x0800eb9d
 800eb84:	0800eba5 	.word	0x0800eba5
 800eb88:	0800ebad 	.word	0x0800ebad
 800eb8c:	0800ebb5 	.word	0x0800ebb5
 800eb90:	0800ebbd 	.word	0x0800ebbd
 800eb94:	2300      	movs	r3, #0
 800eb96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eb9a:	e2f0      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eb9c:	2304      	movs	r3, #4
 800eb9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eba2:	e2ec      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eba4:	2308      	movs	r3, #8
 800eba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebaa:	e2e8      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ebac:	2310      	movs	r3, #16
 800ebae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebb2:	e2e4      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ebb4:	2320      	movs	r3, #32
 800ebb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebba:	e2e0      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ebbc:	2340      	movs	r3, #64	; 0x40
 800ebbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebc2:	e2dc      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ebc4:	2380      	movs	r3, #128	; 0x80
 800ebc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ebca:	e2d8      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4a51      	ldr	r2, [pc, #324]	; (800ed18 <UART_SetConfig+0x344>)
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d130      	bne.n	800ec38 <UART_SetConfig+0x264>
 800ebd6:	4b4e      	ldr	r3, [pc, #312]	; (800ed10 <UART_SetConfig+0x33c>)
 800ebd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebda:	f003 0307 	and.w	r3, r3, #7
 800ebde:	2b05      	cmp	r3, #5
 800ebe0:	d826      	bhi.n	800ec30 <UART_SetConfig+0x25c>
 800ebe2:	a201      	add	r2, pc, #4	; (adr r2, 800ebe8 <UART_SetConfig+0x214>)
 800ebe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe8:	0800ec01 	.word	0x0800ec01
 800ebec:	0800ec09 	.word	0x0800ec09
 800ebf0:	0800ec11 	.word	0x0800ec11
 800ebf4:	0800ec19 	.word	0x0800ec19
 800ebf8:	0800ec21 	.word	0x0800ec21
 800ebfc:	0800ec29 	.word	0x0800ec29
 800ec00:	2300      	movs	r3, #0
 800ec02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec06:	e2ba      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec08:	2304      	movs	r3, #4
 800ec0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec0e:	e2b6      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec10:	2308      	movs	r3, #8
 800ec12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec16:	e2b2      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec18:	2310      	movs	r3, #16
 800ec1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec1e:	e2ae      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec20:	2320      	movs	r3, #32
 800ec22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec26:	e2aa      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec28:	2340      	movs	r3, #64	; 0x40
 800ec2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec2e:	e2a6      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec30:	2380      	movs	r3, #128	; 0x80
 800ec32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec36:	e2a2      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	4a37      	ldr	r2, [pc, #220]	; (800ed1c <UART_SetConfig+0x348>)
 800ec3e:	4293      	cmp	r3, r2
 800ec40:	d130      	bne.n	800eca4 <UART_SetConfig+0x2d0>
 800ec42:	4b33      	ldr	r3, [pc, #204]	; (800ed10 <UART_SetConfig+0x33c>)
 800ec44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec46:	f003 0307 	and.w	r3, r3, #7
 800ec4a:	2b05      	cmp	r3, #5
 800ec4c:	d826      	bhi.n	800ec9c <UART_SetConfig+0x2c8>
 800ec4e:	a201      	add	r2, pc, #4	; (adr r2, 800ec54 <UART_SetConfig+0x280>)
 800ec50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec54:	0800ec6d 	.word	0x0800ec6d
 800ec58:	0800ec75 	.word	0x0800ec75
 800ec5c:	0800ec7d 	.word	0x0800ec7d
 800ec60:	0800ec85 	.word	0x0800ec85
 800ec64:	0800ec8d 	.word	0x0800ec8d
 800ec68:	0800ec95 	.word	0x0800ec95
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec72:	e284      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec74:	2304      	movs	r3, #4
 800ec76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec7a:	e280      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec7c:	2308      	movs	r3, #8
 800ec7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec82:	e27c      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec84:	2310      	movs	r3, #16
 800ec86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec8a:	e278      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec8c:	2320      	movs	r3, #32
 800ec8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec92:	e274      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec94:	2340      	movs	r3, #64	; 0x40
 800ec96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ec9a:	e270      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ec9c:	2380      	movs	r3, #128	; 0x80
 800ec9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eca2:	e26c      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a1d      	ldr	r2, [pc, #116]	; (800ed20 <UART_SetConfig+0x34c>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	d142      	bne.n	800ed34 <UART_SetConfig+0x360>
 800ecae:	4b18      	ldr	r3, [pc, #96]	; (800ed10 <UART_SetConfig+0x33c>)
 800ecb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecb2:	f003 0307 	and.w	r3, r3, #7
 800ecb6:	2b05      	cmp	r3, #5
 800ecb8:	d838      	bhi.n	800ed2c <UART_SetConfig+0x358>
 800ecba:	a201      	add	r2, pc, #4	; (adr r2, 800ecc0 <UART_SetConfig+0x2ec>)
 800ecbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc0:	0800ecd9 	.word	0x0800ecd9
 800ecc4:	0800ece1 	.word	0x0800ece1
 800ecc8:	0800ece9 	.word	0x0800ece9
 800eccc:	0800ecf1 	.word	0x0800ecf1
 800ecd0:	0800ecf9 	.word	0x0800ecf9
 800ecd4:	0800ed25 	.word	0x0800ed25
 800ecd8:	2300      	movs	r3, #0
 800ecda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecde:	e24e      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ece0:	2304      	movs	r3, #4
 800ece2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ece6:	e24a      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ece8:	2308      	movs	r3, #8
 800ecea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecee:	e246      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ecf0:	2310      	movs	r3, #16
 800ecf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecf6:	e242      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ecf8:	2320      	movs	r3, #32
 800ecfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ecfe:	e23e      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ed00:	cfff69f3 	.word	0xcfff69f3
 800ed04:	58000c00 	.word	0x58000c00
 800ed08:	11fff4ff 	.word	0x11fff4ff
 800ed0c:	40011000 	.word	0x40011000
 800ed10:	58024400 	.word	0x58024400
 800ed14:	40004400 	.word	0x40004400
 800ed18:	40004800 	.word	0x40004800
 800ed1c:	40004c00 	.word	0x40004c00
 800ed20:	40005000 	.word	0x40005000
 800ed24:	2340      	movs	r3, #64	; 0x40
 800ed26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed2a:	e228      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ed2c:	2380      	movs	r3, #128	; 0x80
 800ed2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ed32:	e224      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4ab1      	ldr	r2, [pc, #708]	; (800f000 <UART_SetConfig+0x62c>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d176      	bne.n	800ee2c <UART_SetConfig+0x458>
 800ed3e:	4bb1      	ldr	r3, [pc, #708]	; (800f004 <UART_SetConfig+0x630>)
 800ed40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ed46:	2b28      	cmp	r3, #40	; 0x28
 800ed48:	d86c      	bhi.n	800ee24 <UART_SetConfig+0x450>
 800ed4a:	a201      	add	r2, pc, #4	; (adr r2, 800ed50 <UART_SetConfig+0x37c>)
 800ed4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed50:	0800edf5 	.word	0x0800edf5
 800ed54:	0800ee25 	.word	0x0800ee25
 800ed58:	0800ee25 	.word	0x0800ee25
 800ed5c:	0800ee25 	.word	0x0800ee25
 800ed60:	0800ee25 	.word	0x0800ee25
 800ed64:	0800ee25 	.word	0x0800ee25
 800ed68:	0800ee25 	.word	0x0800ee25
 800ed6c:	0800ee25 	.word	0x0800ee25
 800ed70:	0800edfd 	.word	0x0800edfd
 800ed74:	0800ee25 	.word	0x0800ee25
 800ed78:	0800ee25 	.word	0x0800ee25
 800ed7c:	0800ee25 	.word	0x0800ee25
 800ed80:	0800ee25 	.word	0x0800ee25
 800ed84:	0800ee25 	.word	0x0800ee25
 800ed88:	0800ee25 	.word	0x0800ee25
 800ed8c:	0800ee25 	.word	0x0800ee25
 800ed90:	0800ee05 	.word	0x0800ee05
 800ed94:	0800ee25 	.word	0x0800ee25
 800ed98:	0800ee25 	.word	0x0800ee25
 800ed9c:	0800ee25 	.word	0x0800ee25
 800eda0:	0800ee25 	.word	0x0800ee25
 800eda4:	0800ee25 	.word	0x0800ee25
 800eda8:	0800ee25 	.word	0x0800ee25
 800edac:	0800ee25 	.word	0x0800ee25
 800edb0:	0800ee0d 	.word	0x0800ee0d
 800edb4:	0800ee25 	.word	0x0800ee25
 800edb8:	0800ee25 	.word	0x0800ee25
 800edbc:	0800ee25 	.word	0x0800ee25
 800edc0:	0800ee25 	.word	0x0800ee25
 800edc4:	0800ee25 	.word	0x0800ee25
 800edc8:	0800ee25 	.word	0x0800ee25
 800edcc:	0800ee25 	.word	0x0800ee25
 800edd0:	0800ee15 	.word	0x0800ee15
 800edd4:	0800ee25 	.word	0x0800ee25
 800edd8:	0800ee25 	.word	0x0800ee25
 800eddc:	0800ee25 	.word	0x0800ee25
 800ede0:	0800ee25 	.word	0x0800ee25
 800ede4:	0800ee25 	.word	0x0800ee25
 800ede8:	0800ee25 	.word	0x0800ee25
 800edec:	0800ee25 	.word	0x0800ee25
 800edf0:	0800ee1d 	.word	0x0800ee1d
 800edf4:	2301      	movs	r3, #1
 800edf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800edfa:	e1c0      	b.n	800f17e <UART_SetConfig+0x7aa>
 800edfc:	2304      	movs	r3, #4
 800edfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee02:	e1bc      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee04:	2308      	movs	r3, #8
 800ee06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee0a:	e1b8      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee0c:	2310      	movs	r3, #16
 800ee0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee12:	e1b4      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee14:	2320      	movs	r3, #32
 800ee16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee1a:	e1b0      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee1c:	2340      	movs	r3, #64	; 0x40
 800ee1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee22:	e1ac      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee24:	2380      	movs	r3, #128	; 0x80
 800ee26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee2a:	e1a8      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a75      	ldr	r2, [pc, #468]	; (800f008 <UART_SetConfig+0x634>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d130      	bne.n	800ee98 <UART_SetConfig+0x4c4>
 800ee36:	4b73      	ldr	r3, [pc, #460]	; (800f004 <UART_SetConfig+0x630>)
 800ee38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee3a:	f003 0307 	and.w	r3, r3, #7
 800ee3e:	2b05      	cmp	r3, #5
 800ee40:	d826      	bhi.n	800ee90 <UART_SetConfig+0x4bc>
 800ee42:	a201      	add	r2, pc, #4	; (adr r2, 800ee48 <UART_SetConfig+0x474>)
 800ee44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee48:	0800ee61 	.word	0x0800ee61
 800ee4c:	0800ee69 	.word	0x0800ee69
 800ee50:	0800ee71 	.word	0x0800ee71
 800ee54:	0800ee79 	.word	0x0800ee79
 800ee58:	0800ee81 	.word	0x0800ee81
 800ee5c:	0800ee89 	.word	0x0800ee89
 800ee60:	2300      	movs	r3, #0
 800ee62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee66:	e18a      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee68:	2304      	movs	r3, #4
 800ee6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee6e:	e186      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee70:	2308      	movs	r3, #8
 800ee72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee76:	e182      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee78:	2310      	movs	r3, #16
 800ee7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee7e:	e17e      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee80:	2320      	movs	r3, #32
 800ee82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee86:	e17a      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee88:	2340      	movs	r3, #64	; 0x40
 800ee8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee8e:	e176      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee90:	2380      	movs	r3, #128	; 0x80
 800ee92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ee96:	e172      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a5b      	ldr	r2, [pc, #364]	; (800f00c <UART_SetConfig+0x638>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d130      	bne.n	800ef04 <UART_SetConfig+0x530>
 800eea2:	4b58      	ldr	r3, [pc, #352]	; (800f004 <UART_SetConfig+0x630>)
 800eea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eea6:	f003 0307 	and.w	r3, r3, #7
 800eeaa:	2b05      	cmp	r3, #5
 800eeac:	d826      	bhi.n	800eefc <UART_SetConfig+0x528>
 800eeae:	a201      	add	r2, pc, #4	; (adr r2, 800eeb4 <UART_SetConfig+0x4e0>)
 800eeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb4:	0800eecd 	.word	0x0800eecd
 800eeb8:	0800eed5 	.word	0x0800eed5
 800eebc:	0800eedd 	.word	0x0800eedd
 800eec0:	0800eee5 	.word	0x0800eee5
 800eec4:	0800eeed 	.word	0x0800eeed
 800eec8:	0800eef5 	.word	0x0800eef5
 800eecc:	2300      	movs	r3, #0
 800eece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eed2:	e154      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eed4:	2304      	movs	r3, #4
 800eed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeda:	e150      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eedc:	2308      	movs	r3, #8
 800eede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eee2:	e14c      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eee4:	2310      	movs	r3, #16
 800eee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eeea:	e148      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eeec:	2320      	movs	r3, #32
 800eeee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eef2:	e144      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eef4:	2340      	movs	r3, #64	; 0x40
 800eef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eefa:	e140      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eefc:	2380      	movs	r3, #128	; 0x80
 800eefe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ef02:	e13c      	b.n	800f17e <UART_SetConfig+0x7aa>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	4a41      	ldr	r2, [pc, #260]	; (800f010 <UART_SetConfig+0x63c>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	f040 8082 	bne.w	800f014 <UART_SetConfig+0x640>
 800ef10:	4b3c      	ldr	r3, [pc, #240]	; (800f004 <UART_SetConfig+0x630>)
 800ef12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef18:	2b28      	cmp	r3, #40	; 0x28
 800ef1a:	d86d      	bhi.n	800eff8 <UART_SetConfig+0x624>
 800ef1c:	a201      	add	r2, pc, #4	; (adr r2, 800ef24 <UART_SetConfig+0x550>)
 800ef1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef22:	bf00      	nop
 800ef24:	0800efc9 	.word	0x0800efc9
 800ef28:	0800eff9 	.word	0x0800eff9
 800ef2c:	0800eff9 	.word	0x0800eff9
 800ef30:	0800eff9 	.word	0x0800eff9
 800ef34:	0800eff9 	.word	0x0800eff9
 800ef38:	0800eff9 	.word	0x0800eff9
 800ef3c:	0800eff9 	.word	0x0800eff9
 800ef40:	0800eff9 	.word	0x0800eff9
 800ef44:	0800efd1 	.word	0x0800efd1
 800ef48:	0800eff9 	.word	0x0800eff9
 800ef4c:	0800eff9 	.word	0x0800eff9
 800ef50:	0800eff9 	.word	0x0800eff9
 800ef54:	0800eff9 	.word	0x0800eff9
 800ef58:	0800eff9 	.word	0x0800eff9
 800ef5c:	0800eff9 	.word	0x0800eff9
 800ef60:	0800eff9 	.word	0x0800eff9
 800ef64:	0800efd9 	.word	0x0800efd9
 800ef68:	0800eff9 	.word	0x0800eff9
 800ef6c:	0800eff9 	.word	0x0800eff9
 800ef70:	0800eff9 	.word	0x0800eff9
 800ef74:	0800eff9 	.word	0x0800eff9
 800ef78:	0800eff9 	.word	0x0800eff9
 800ef7c:	0800eff9 	.word	0x0800eff9
 800ef80:	0800eff9 	.word	0x0800eff9
 800ef84:	0800efe1 	.word	0x0800efe1
 800ef88:	0800eff9 	.word	0x0800eff9
 800ef8c:	0800eff9 	.word	0x0800eff9
 800ef90:	0800eff9 	.word	0x0800eff9
 800ef94:	0800eff9 	.word	0x0800eff9
 800ef98:	0800eff9 	.word	0x0800eff9
 800ef9c:	0800eff9 	.word	0x0800eff9
 800efa0:	0800eff9 	.word	0x0800eff9
 800efa4:	0800efe9 	.word	0x0800efe9
 800efa8:	0800eff9 	.word	0x0800eff9
 800efac:	0800eff9 	.word	0x0800eff9
 800efb0:	0800eff9 	.word	0x0800eff9
 800efb4:	0800eff9 	.word	0x0800eff9
 800efb8:	0800eff9 	.word	0x0800eff9
 800efbc:	0800eff9 	.word	0x0800eff9
 800efc0:	0800eff9 	.word	0x0800eff9
 800efc4:	0800eff1 	.word	0x0800eff1
 800efc8:	2301      	movs	r3, #1
 800efca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efce:	e0d6      	b.n	800f17e <UART_SetConfig+0x7aa>
 800efd0:	2304      	movs	r3, #4
 800efd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efd6:	e0d2      	b.n	800f17e <UART_SetConfig+0x7aa>
 800efd8:	2308      	movs	r3, #8
 800efda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efde:	e0ce      	b.n	800f17e <UART_SetConfig+0x7aa>
 800efe0:	2310      	movs	r3, #16
 800efe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efe6:	e0ca      	b.n	800f17e <UART_SetConfig+0x7aa>
 800efe8:	2320      	movs	r3, #32
 800efea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800efee:	e0c6      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eff0:	2340      	movs	r3, #64	; 0x40
 800eff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800eff6:	e0c2      	b.n	800f17e <UART_SetConfig+0x7aa>
 800eff8:	2380      	movs	r3, #128	; 0x80
 800effa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800effe:	e0be      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f000:	40011400 	.word	0x40011400
 800f004:	58024400 	.word	0x58024400
 800f008:	40007800 	.word	0x40007800
 800f00c:	40007c00 	.word	0x40007c00
 800f010:	40011800 	.word	0x40011800
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4aad      	ldr	r2, [pc, #692]	; (800f2d0 <UART_SetConfig+0x8fc>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d176      	bne.n	800f10c <UART_SetConfig+0x738>
 800f01e:	4bad      	ldr	r3, [pc, #692]	; (800f2d4 <UART_SetConfig+0x900>)
 800f020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f026:	2b28      	cmp	r3, #40	; 0x28
 800f028:	d86c      	bhi.n	800f104 <UART_SetConfig+0x730>
 800f02a:	a201      	add	r2, pc, #4	; (adr r2, 800f030 <UART_SetConfig+0x65c>)
 800f02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f030:	0800f0d5 	.word	0x0800f0d5
 800f034:	0800f105 	.word	0x0800f105
 800f038:	0800f105 	.word	0x0800f105
 800f03c:	0800f105 	.word	0x0800f105
 800f040:	0800f105 	.word	0x0800f105
 800f044:	0800f105 	.word	0x0800f105
 800f048:	0800f105 	.word	0x0800f105
 800f04c:	0800f105 	.word	0x0800f105
 800f050:	0800f0dd 	.word	0x0800f0dd
 800f054:	0800f105 	.word	0x0800f105
 800f058:	0800f105 	.word	0x0800f105
 800f05c:	0800f105 	.word	0x0800f105
 800f060:	0800f105 	.word	0x0800f105
 800f064:	0800f105 	.word	0x0800f105
 800f068:	0800f105 	.word	0x0800f105
 800f06c:	0800f105 	.word	0x0800f105
 800f070:	0800f0e5 	.word	0x0800f0e5
 800f074:	0800f105 	.word	0x0800f105
 800f078:	0800f105 	.word	0x0800f105
 800f07c:	0800f105 	.word	0x0800f105
 800f080:	0800f105 	.word	0x0800f105
 800f084:	0800f105 	.word	0x0800f105
 800f088:	0800f105 	.word	0x0800f105
 800f08c:	0800f105 	.word	0x0800f105
 800f090:	0800f0ed 	.word	0x0800f0ed
 800f094:	0800f105 	.word	0x0800f105
 800f098:	0800f105 	.word	0x0800f105
 800f09c:	0800f105 	.word	0x0800f105
 800f0a0:	0800f105 	.word	0x0800f105
 800f0a4:	0800f105 	.word	0x0800f105
 800f0a8:	0800f105 	.word	0x0800f105
 800f0ac:	0800f105 	.word	0x0800f105
 800f0b0:	0800f0f5 	.word	0x0800f0f5
 800f0b4:	0800f105 	.word	0x0800f105
 800f0b8:	0800f105 	.word	0x0800f105
 800f0bc:	0800f105 	.word	0x0800f105
 800f0c0:	0800f105 	.word	0x0800f105
 800f0c4:	0800f105 	.word	0x0800f105
 800f0c8:	0800f105 	.word	0x0800f105
 800f0cc:	0800f105 	.word	0x0800f105
 800f0d0:	0800f0fd 	.word	0x0800f0fd
 800f0d4:	2301      	movs	r3, #1
 800f0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0da:	e050      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f0dc:	2304      	movs	r3, #4
 800f0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0e2:	e04c      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f0e4:	2308      	movs	r3, #8
 800f0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0ea:	e048      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f0ec:	2310      	movs	r3, #16
 800f0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0f2:	e044      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f0f4:	2320      	movs	r3, #32
 800f0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f0fa:	e040      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f0fc:	2340      	movs	r3, #64	; 0x40
 800f0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f102:	e03c      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f104:	2380      	movs	r3, #128	; 0x80
 800f106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f10a:	e038      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4a71      	ldr	r2, [pc, #452]	; (800f2d8 <UART_SetConfig+0x904>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d130      	bne.n	800f178 <UART_SetConfig+0x7a4>
 800f116:	4b6f      	ldr	r3, [pc, #444]	; (800f2d4 <UART_SetConfig+0x900>)
 800f118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f11a:	f003 0307 	and.w	r3, r3, #7
 800f11e:	2b05      	cmp	r3, #5
 800f120:	d826      	bhi.n	800f170 <UART_SetConfig+0x79c>
 800f122:	a201      	add	r2, pc, #4	; (adr r2, 800f128 <UART_SetConfig+0x754>)
 800f124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f128:	0800f141 	.word	0x0800f141
 800f12c:	0800f149 	.word	0x0800f149
 800f130:	0800f151 	.word	0x0800f151
 800f134:	0800f159 	.word	0x0800f159
 800f138:	0800f161 	.word	0x0800f161
 800f13c:	0800f169 	.word	0x0800f169
 800f140:	2302      	movs	r3, #2
 800f142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f146:	e01a      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f148:	2304      	movs	r3, #4
 800f14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f14e:	e016      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f150:	2308      	movs	r3, #8
 800f152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f156:	e012      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f158:	2310      	movs	r3, #16
 800f15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f15e:	e00e      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f160:	2320      	movs	r3, #32
 800f162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f166:	e00a      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f168:	2340      	movs	r3, #64	; 0x40
 800f16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f16e:	e006      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f170:	2380      	movs	r3, #128	; 0x80
 800f172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800f176:	e002      	b.n	800f17e <UART_SetConfig+0x7aa>
 800f178:	2380      	movs	r3, #128	; 0x80
 800f17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	4a55      	ldr	r2, [pc, #340]	; (800f2d8 <UART_SetConfig+0x904>)
 800f184:	4293      	cmp	r3, r2
 800f186:	f040 80f0 	bne.w	800f36a <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f18a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f18e:	2b20      	cmp	r3, #32
 800f190:	dc46      	bgt.n	800f220 <UART_SetConfig+0x84c>
 800f192:	2b02      	cmp	r3, #2
 800f194:	db75      	blt.n	800f282 <UART_SetConfig+0x8ae>
 800f196:	3b02      	subs	r3, #2
 800f198:	2b1e      	cmp	r3, #30
 800f19a:	d872      	bhi.n	800f282 <UART_SetConfig+0x8ae>
 800f19c:	a201      	add	r2, pc, #4	; (adr r2, 800f1a4 <UART_SetConfig+0x7d0>)
 800f19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1a2:	bf00      	nop
 800f1a4:	0800f227 	.word	0x0800f227
 800f1a8:	0800f283 	.word	0x0800f283
 800f1ac:	0800f22f 	.word	0x0800f22f
 800f1b0:	0800f283 	.word	0x0800f283
 800f1b4:	0800f283 	.word	0x0800f283
 800f1b8:	0800f283 	.word	0x0800f283
 800f1bc:	0800f23f 	.word	0x0800f23f
 800f1c0:	0800f283 	.word	0x0800f283
 800f1c4:	0800f283 	.word	0x0800f283
 800f1c8:	0800f283 	.word	0x0800f283
 800f1cc:	0800f283 	.word	0x0800f283
 800f1d0:	0800f283 	.word	0x0800f283
 800f1d4:	0800f283 	.word	0x0800f283
 800f1d8:	0800f283 	.word	0x0800f283
 800f1dc:	0800f24f 	.word	0x0800f24f
 800f1e0:	0800f283 	.word	0x0800f283
 800f1e4:	0800f283 	.word	0x0800f283
 800f1e8:	0800f283 	.word	0x0800f283
 800f1ec:	0800f283 	.word	0x0800f283
 800f1f0:	0800f283 	.word	0x0800f283
 800f1f4:	0800f283 	.word	0x0800f283
 800f1f8:	0800f283 	.word	0x0800f283
 800f1fc:	0800f283 	.word	0x0800f283
 800f200:	0800f283 	.word	0x0800f283
 800f204:	0800f283 	.word	0x0800f283
 800f208:	0800f283 	.word	0x0800f283
 800f20c:	0800f283 	.word	0x0800f283
 800f210:	0800f283 	.word	0x0800f283
 800f214:	0800f283 	.word	0x0800f283
 800f218:	0800f283 	.word	0x0800f283
 800f21c:	0800f275 	.word	0x0800f275
 800f220:	2b40      	cmp	r3, #64	; 0x40
 800f222:	d02a      	beq.n	800f27a <UART_SetConfig+0x8a6>
 800f224:	e02d      	b.n	800f282 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f226:	f7fc fa27 	bl	800b678 <HAL_RCCEx_GetD3PCLK1Freq>
 800f22a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f22c:	e02f      	b.n	800f28e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f22e:	f107 0314 	add.w	r3, r7, #20
 800f232:	4618      	mov	r0, r3
 800f234:	f7fc fa36 	bl	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f23c:	e027      	b.n	800f28e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f23e:	f107 0308 	add.w	r3, r7, #8
 800f242:	4618      	mov	r0, r3
 800f244:	f7fc fb82 	bl	800b94c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f24c:	e01f      	b.n	800f28e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f24e:	4b21      	ldr	r3, [pc, #132]	; (800f2d4 <UART_SetConfig+0x900>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	f003 0320 	and.w	r3, r3, #32
 800f256:	2b00      	cmp	r3, #0
 800f258:	d009      	beq.n	800f26e <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f25a:	4b1e      	ldr	r3, [pc, #120]	; (800f2d4 <UART_SetConfig+0x900>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	08db      	lsrs	r3, r3, #3
 800f260:	f003 0303 	and.w	r3, r3, #3
 800f264:	4a1d      	ldr	r2, [pc, #116]	; (800f2dc <UART_SetConfig+0x908>)
 800f266:	fa22 f303 	lsr.w	r3, r2, r3
 800f26a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f26c:	e00f      	b.n	800f28e <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800f26e:	4b1b      	ldr	r3, [pc, #108]	; (800f2dc <UART_SetConfig+0x908>)
 800f270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f272:	e00c      	b.n	800f28e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f274:	4b1a      	ldr	r3, [pc, #104]	; (800f2e0 <UART_SetConfig+0x90c>)
 800f276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f278:	e009      	b.n	800f28e <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f27a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f27e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f280:	e005      	b.n	800f28e <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800f282:	2300      	movs	r3, #0
 800f284:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f286:	2301      	movs	r3, #1
 800f288:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f28c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f290:	2b00      	cmp	r3, #0
 800f292:	f000 81e6 	beq.w	800f662 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f29a:	4a12      	ldr	r2, [pc, #72]	; (800f2e4 <UART_SetConfig+0x910>)
 800f29c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2a0:	461a      	mov	r2, r3
 800f2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2a8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	685a      	ldr	r2, [r3, #4]
 800f2ae:	4613      	mov	r3, r2
 800f2b0:	005b      	lsls	r3, r3, #1
 800f2b2:	4413      	add	r3, r2
 800f2b4:	6a3a      	ldr	r2, [r7, #32]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d305      	bcc.n	800f2c6 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2c0:	6a3a      	ldr	r2, [r7, #32]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d910      	bls.n	800f2e8 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f2cc:	e1c9      	b.n	800f662 <UART_SetConfig+0xc8e>
 800f2ce:	bf00      	nop
 800f2d0:	40011c00 	.word	0x40011c00
 800f2d4:	58024400 	.word	0x58024400
 800f2d8:	58000c00 	.word	0x58000c00
 800f2dc:	03d09000 	.word	0x03d09000
 800f2e0:	003d0900 	.word	0x003d0900
 800f2e4:	08014650 	.word	0x08014650
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f04f 0100 	mov.w	r1, #0
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2f4:	4ac1      	ldr	r2, [pc, #772]	; (800f5fc <UART_SetConfig+0xc28>)
 800f2f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2fa:	b29a      	uxth	r2, r3
 800f2fc:	f04f 0300 	mov.w	r3, #0
 800f300:	f7f1 f806 	bl	8000310 <__aeabi_uldivmod>
 800f304:	4602      	mov	r2, r0
 800f306:	460b      	mov	r3, r1
 800f308:	4610      	mov	r0, r2
 800f30a:	4619      	mov	r1, r3
 800f30c:	f04f 0200 	mov.w	r2, #0
 800f310:	f04f 0300 	mov.w	r3, #0
 800f314:	020b      	lsls	r3, r1, #8
 800f316:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f31a:	0202      	lsls	r2, r0, #8
 800f31c:	6879      	ldr	r1, [r7, #4]
 800f31e:	6849      	ldr	r1, [r1, #4]
 800f320:	0849      	lsrs	r1, r1, #1
 800f322:	4608      	mov	r0, r1
 800f324:	f04f 0100 	mov.w	r1, #0
 800f328:	1814      	adds	r4, r2, r0
 800f32a:	eb43 0501 	adc.w	r5, r3, r1
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	461a      	mov	r2, r3
 800f334:	f04f 0300 	mov.w	r3, #0
 800f338:	4620      	mov	r0, r4
 800f33a:	4629      	mov	r1, r5
 800f33c:	f7f0 ffe8 	bl	8000310 <__aeabi_uldivmod>
 800f340:	4602      	mov	r2, r0
 800f342:	460b      	mov	r3, r1
 800f344:	4613      	mov	r3, r2
 800f346:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f34a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f34e:	d308      	bcc.n	800f362 <UART_SetConfig+0x98e>
 800f350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f356:	d204      	bcs.n	800f362 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f35e:	60da      	str	r2, [r3, #12]
 800f360:	e17f      	b.n	800f662 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800f362:	2301      	movs	r3, #1
 800f364:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f368:	e17b      	b.n	800f662 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	69db      	ldr	r3, [r3, #28]
 800f36e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f372:	f040 80bd 	bne.w	800f4f0 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800f376:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f37a:	2b20      	cmp	r3, #32
 800f37c:	dc48      	bgt.n	800f410 <UART_SetConfig+0xa3c>
 800f37e:	2b00      	cmp	r3, #0
 800f380:	db7b      	blt.n	800f47a <UART_SetConfig+0xaa6>
 800f382:	2b20      	cmp	r3, #32
 800f384:	d879      	bhi.n	800f47a <UART_SetConfig+0xaa6>
 800f386:	a201      	add	r2, pc, #4	; (adr r2, 800f38c <UART_SetConfig+0x9b8>)
 800f388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f38c:	0800f417 	.word	0x0800f417
 800f390:	0800f41f 	.word	0x0800f41f
 800f394:	0800f47b 	.word	0x0800f47b
 800f398:	0800f47b 	.word	0x0800f47b
 800f39c:	0800f427 	.word	0x0800f427
 800f3a0:	0800f47b 	.word	0x0800f47b
 800f3a4:	0800f47b 	.word	0x0800f47b
 800f3a8:	0800f47b 	.word	0x0800f47b
 800f3ac:	0800f437 	.word	0x0800f437
 800f3b0:	0800f47b 	.word	0x0800f47b
 800f3b4:	0800f47b 	.word	0x0800f47b
 800f3b8:	0800f47b 	.word	0x0800f47b
 800f3bc:	0800f47b 	.word	0x0800f47b
 800f3c0:	0800f47b 	.word	0x0800f47b
 800f3c4:	0800f47b 	.word	0x0800f47b
 800f3c8:	0800f47b 	.word	0x0800f47b
 800f3cc:	0800f447 	.word	0x0800f447
 800f3d0:	0800f47b 	.word	0x0800f47b
 800f3d4:	0800f47b 	.word	0x0800f47b
 800f3d8:	0800f47b 	.word	0x0800f47b
 800f3dc:	0800f47b 	.word	0x0800f47b
 800f3e0:	0800f47b 	.word	0x0800f47b
 800f3e4:	0800f47b 	.word	0x0800f47b
 800f3e8:	0800f47b 	.word	0x0800f47b
 800f3ec:	0800f47b 	.word	0x0800f47b
 800f3f0:	0800f47b 	.word	0x0800f47b
 800f3f4:	0800f47b 	.word	0x0800f47b
 800f3f8:	0800f47b 	.word	0x0800f47b
 800f3fc:	0800f47b 	.word	0x0800f47b
 800f400:	0800f47b 	.word	0x0800f47b
 800f404:	0800f47b 	.word	0x0800f47b
 800f408:	0800f47b 	.word	0x0800f47b
 800f40c:	0800f46d 	.word	0x0800f46d
 800f410:	2b40      	cmp	r3, #64	; 0x40
 800f412:	d02e      	beq.n	800f472 <UART_SetConfig+0xa9e>
 800f414:	e031      	b.n	800f47a <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f416:	f7fa fde5 	bl	8009fe4 <HAL_RCC_GetPCLK1Freq>
 800f41a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f41c:	e033      	b.n	800f486 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f41e:	f7fa fdf7 	bl	800a010 <HAL_RCC_GetPCLK2Freq>
 800f422:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f424:	e02f      	b.n	800f486 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f426:	f107 0314 	add.w	r3, r7, #20
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fc f93a 	bl	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f430:	69bb      	ldr	r3, [r7, #24]
 800f432:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f434:	e027      	b.n	800f486 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f436:	f107 0308 	add.w	r3, r7, #8
 800f43a:	4618      	mov	r0, r3
 800f43c:	f7fc fa86 	bl	800b94c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f444:	e01f      	b.n	800f486 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f446:	4b6e      	ldr	r3, [pc, #440]	; (800f600 <UART_SetConfig+0xc2c>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f003 0320 	and.w	r3, r3, #32
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d009      	beq.n	800f466 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f452:	4b6b      	ldr	r3, [pc, #428]	; (800f600 <UART_SetConfig+0xc2c>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	08db      	lsrs	r3, r3, #3
 800f458:	f003 0303 	and.w	r3, r3, #3
 800f45c:	4a69      	ldr	r2, [pc, #420]	; (800f604 <UART_SetConfig+0xc30>)
 800f45e:	fa22 f303 	lsr.w	r3, r2, r3
 800f462:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f464:	e00f      	b.n	800f486 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800f466:	4b67      	ldr	r3, [pc, #412]	; (800f604 <UART_SetConfig+0xc30>)
 800f468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f46a:	e00c      	b.n	800f486 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f46c:	4b66      	ldr	r3, [pc, #408]	; (800f608 <UART_SetConfig+0xc34>)
 800f46e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f470:	e009      	b.n	800f486 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f476:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f478:	e005      	b.n	800f486 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800f47a:	2300      	movs	r3, #0
 800f47c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f47e:	2301      	movs	r3, #1
 800f480:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f484:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f488:	2b00      	cmp	r3, #0
 800f48a:	f000 80ea 	beq.w	800f662 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f492:	4a5a      	ldr	r2, [pc, #360]	; (800f5fc <UART_SetConfig+0xc28>)
 800f494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f498:	461a      	mov	r2, r3
 800f49a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f49c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4a0:	005a      	lsls	r2, r3, #1
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	685b      	ldr	r3, [r3, #4]
 800f4a6:	085b      	lsrs	r3, r3, #1
 800f4a8:	441a      	add	r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	2b0f      	cmp	r3, #15
 800f4b8:	d916      	bls.n	800f4e8 <UART_SetConfig+0xb14>
 800f4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4c0:	d212      	bcs.n	800f4e8 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c4:	b29b      	uxth	r3, r3
 800f4c6:	f023 030f 	bic.w	r3, r3, #15
 800f4ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ce:	085b      	lsrs	r3, r3, #1
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	f003 0307 	and.w	r3, r3, #7
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f4e4:	60da      	str	r2, [r3, #12]
 800f4e6:	e0bc      	b.n	800f662 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800f4e8:	2301      	movs	r3, #1
 800f4ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800f4ee:	e0b8      	b.n	800f662 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f4f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f4f4:	2b20      	cmp	r3, #32
 800f4f6:	dc4b      	bgt.n	800f590 <UART_SetConfig+0xbbc>
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	f2c0 8087 	blt.w	800f60c <UART_SetConfig+0xc38>
 800f4fe:	2b20      	cmp	r3, #32
 800f500:	f200 8084 	bhi.w	800f60c <UART_SetConfig+0xc38>
 800f504:	a201      	add	r2, pc, #4	; (adr r2, 800f50c <UART_SetConfig+0xb38>)
 800f506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f50a:	bf00      	nop
 800f50c:	0800f597 	.word	0x0800f597
 800f510:	0800f59f 	.word	0x0800f59f
 800f514:	0800f60d 	.word	0x0800f60d
 800f518:	0800f60d 	.word	0x0800f60d
 800f51c:	0800f5a7 	.word	0x0800f5a7
 800f520:	0800f60d 	.word	0x0800f60d
 800f524:	0800f60d 	.word	0x0800f60d
 800f528:	0800f60d 	.word	0x0800f60d
 800f52c:	0800f5b7 	.word	0x0800f5b7
 800f530:	0800f60d 	.word	0x0800f60d
 800f534:	0800f60d 	.word	0x0800f60d
 800f538:	0800f60d 	.word	0x0800f60d
 800f53c:	0800f60d 	.word	0x0800f60d
 800f540:	0800f60d 	.word	0x0800f60d
 800f544:	0800f60d 	.word	0x0800f60d
 800f548:	0800f60d 	.word	0x0800f60d
 800f54c:	0800f5c7 	.word	0x0800f5c7
 800f550:	0800f60d 	.word	0x0800f60d
 800f554:	0800f60d 	.word	0x0800f60d
 800f558:	0800f60d 	.word	0x0800f60d
 800f55c:	0800f60d 	.word	0x0800f60d
 800f560:	0800f60d 	.word	0x0800f60d
 800f564:	0800f60d 	.word	0x0800f60d
 800f568:	0800f60d 	.word	0x0800f60d
 800f56c:	0800f60d 	.word	0x0800f60d
 800f570:	0800f60d 	.word	0x0800f60d
 800f574:	0800f60d 	.word	0x0800f60d
 800f578:	0800f60d 	.word	0x0800f60d
 800f57c:	0800f60d 	.word	0x0800f60d
 800f580:	0800f60d 	.word	0x0800f60d
 800f584:	0800f60d 	.word	0x0800f60d
 800f588:	0800f60d 	.word	0x0800f60d
 800f58c:	0800f5ed 	.word	0x0800f5ed
 800f590:	2b40      	cmp	r3, #64	; 0x40
 800f592:	d02e      	beq.n	800f5f2 <UART_SetConfig+0xc1e>
 800f594:	e03a      	b.n	800f60c <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f596:	f7fa fd25 	bl	8009fe4 <HAL_RCC_GetPCLK1Freq>
 800f59a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f59c:	e03c      	b.n	800f618 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f59e:	f7fa fd37 	bl	800a010 <HAL_RCC_GetPCLK2Freq>
 800f5a2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800f5a4:	e038      	b.n	800f618 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5a6:	f107 0314 	add.w	r3, r7, #20
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fc f87a 	bl	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5b0:	69bb      	ldr	r3, [r7, #24]
 800f5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f5b4:	e030      	b.n	800f618 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5b6:	f107 0308 	add.w	r3, r7, #8
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	f7fc f9c6 	bl	800b94c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f5c4:	e028      	b.n	800f618 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5c6:	4b0e      	ldr	r3, [pc, #56]	; (800f600 <UART_SetConfig+0xc2c>)
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f003 0320 	and.w	r3, r3, #32
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d009      	beq.n	800f5e6 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5d2:	4b0b      	ldr	r3, [pc, #44]	; (800f600 <UART_SetConfig+0xc2c>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	08db      	lsrs	r3, r3, #3
 800f5d8:	f003 0303 	and.w	r3, r3, #3
 800f5dc:	4a09      	ldr	r2, [pc, #36]	; (800f604 <UART_SetConfig+0xc30>)
 800f5de:	fa22 f303 	lsr.w	r3, r2, r3
 800f5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5e4:	e018      	b.n	800f618 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800f5e6:	4b07      	ldr	r3, [pc, #28]	; (800f604 <UART_SetConfig+0xc30>)
 800f5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f5ea:	e015      	b.n	800f618 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5ec:	4b06      	ldr	r3, [pc, #24]	; (800f608 <UART_SetConfig+0xc34>)
 800f5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f5f0:	e012      	b.n	800f618 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800f5f8:	e00e      	b.n	800f618 <UART_SetConfig+0xc44>
 800f5fa:	bf00      	nop
 800f5fc:	08014650 	.word	0x08014650
 800f600:	58024400 	.word	0x58024400
 800f604:	03d09000 	.word	0x03d09000
 800f608:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800f60c:	2300      	movs	r3, #0
 800f60e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800f610:	2301      	movs	r3, #1
 800f612:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800f616:	bf00      	nop
    }

    if (pclk != 0U)
 800f618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d021      	beq.n	800f662 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f622:	4a1a      	ldr	r2, [pc, #104]	; (800f68c <UART_SetConfig+0xcb8>)
 800f624:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f628:	461a      	mov	r2, r3
 800f62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f62c:	fbb3 f2f2 	udiv	r2, r3, r2
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	685b      	ldr	r3, [r3, #4]
 800f634:	085b      	lsrs	r3, r3, #1
 800f636:	441a      	add	r2, r3
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	fbb2 f3f3 	udiv	r3, r2, r3
 800f640:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f644:	2b0f      	cmp	r3, #15
 800f646:	d909      	bls.n	800f65c <UART_SetConfig+0xc88>
 800f648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f64a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f64e:	d205      	bcs.n	800f65c <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f652:	b29a      	uxth	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	60da      	str	r2, [r3, #12]
 800f65a:	e002      	b.n	800f662 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800f65c:	2301      	movs	r3, #1
 800f65e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2201      	movs	r2, #1
 800f666:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2201      	movs	r2, #1
 800f66e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2200      	movs	r2, #0
 800f676:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	2200      	movs	r2, #0
 800f67c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f67e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800f682:	4618      	mov	r0, r3
 800f684:	3738      	adds	r7, #56	; 0x38
 800f686:	46bd      	mov	sp, r7
 800f688:	bdb0      	pop	{r4, r5, r7, pc}
 800f68a:	bf00      	nop
 800f68c:	08014650 	.word	0x08014650

0800f690 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f69c:	f003 0301 	and.w	r3, r3, #1
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d00a      	beq.n	800f6ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	430a      	orrs	r2, r1
 800f6b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6be:	f003 0302 	and.w	r3, r3, #2
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00a      	beq.n	800f6dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	430a      	orrs	r2, r1
 800f6da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6e0:	f003 0304 	and.w	r3, r3, #4
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d00a      	beq.n	800f6fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	430a      	orrs	r2, r1
 800f6fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f702:	f003 0308 	and.w	r3, r3, #8
 800f706:	2b00      	cmp	r3, #0
 800f708:	d00a      	beq.n	800f720 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	430a      	orrs	r2, r1
 800f71e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f724:	f003 0310 	and.w	r3, r3, #16
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d00a      	beq.n	800f742 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	689b      	ldr	r3, [r3, #8]
 800f732:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	430a      	orrs	r2, r1
 800f740:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f746:	f003 0320 	and.w	r3, r3, #32
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00a      	beq.n	800f764 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	689b      	ldr	r3, [r3, #8]
 800f754:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	430a      	orrs	r2, r1
 800f762:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d01a      	beq.n	800f7a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	430a      	orrs	r2, r1
 800f784:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f78a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f78e:	d10a      	bne.n	800f7a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	685b      	ldr	r3, [r3, #4]
 800f796:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	430a      	orrs	r2, r1
 800f7a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d00a      	beq.n	800f7c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	430a      	orrs	r2, r1
 800f7c6:	605a      	str	r2, [r3, #4]
  }
}
 800f7c8:	bf00      	nop
 800f7ca:	370c      	adds	r7, #12
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d2:	4770      	bx	lr

0800f7d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b086      	sub	sp, #24
 800f7d8:	af02      	add	r7, sp, #8
 800f7da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f7e4:	f7f3 fb7e 	bl	8002ee4 <HAL_GetTick>
 800f7e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f003 0308 	and.w	r3, r3, #8
 800f7f4:	2b08      	cmp	r3, #8
 800f7f6:	d10e      	bne.n	800f816 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f7f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f7fc:	9300      	str	r3, [sp, #0]
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	2200      	movs	r2, #0
 800f802:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f000 f82f 	bl	800f86a <UART_WaitOnFlagUntilTimeout>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d001      	beq.n	800f816 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f812:	2303      	movs	r3, #3
 800f814:	e025      	b.n	800f862 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f003 0304 	and.w	r3, r3, #4
 800f820:	2b04      	cmp	r3, #4
 800f822:	d10e      	bne.n	800f842 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f828:	9300      	str	r3, [sp, #0]
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2200      	movs	r2, #0
 800f82e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 f819 	bl	800f86a <UART_WaitOnFlagUntilTimeout>
 800f838:	4603      	mov	r3, r0
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d001      	beq.n	800f842 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f83e:	2303      	movs	r3, #3
 800f840:	e00f      	b.n	800f862 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	2220      	movs	r2, #32
 800f846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	2220      	movs	r2, #32
 800f84e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2200      	movs	r2, #0
 800f856:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2200      	movs	r2, #0
 800f85c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b09c      	sub	sp, #112	; 0x70
 800f86e:	af00      	add	r7, sp, #0
 800f870:	60f8      	str	r0, [r7, #12]
 800f872:	60b9      	str	r1, [r7, #8]
 800f874:	603b      	str	r3, [r7, #0]
 800f876:	4613      	mov	r3, r2
 800f878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f87a:	e0a9      	b.n	800f9d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f87c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f882:	f000 80a5 	beq.w	800f9d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f886:	f7f3 fb2d 	bl	8002ee4 <HAL_GetTick>
 800f88a:	4602      	mov	r2, r0
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	1ad3      	subs	r3, r2, r3
 800f890:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f892:	429a      	cmp	r2, r3
 800f894:	d302      	bcc.n	800f89c <UART_WaitOnFlagUntilTimeout+0x32>
 800f896:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d140      	bne.n	800f91e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8a4:	e853 3f00 	ldrex	r3, [r3]
 800f8a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f8aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f8b0:	667b      	str	r3, [r7, #100]	; 0x64
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f8c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f8c2:	e841 2300 	strex	r3, r2, [r1]
 800f8c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f8c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d1e6      	bne.n	800f89c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	3308      	adds	r3, #8
 800f8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8d8:	e853 3f00 	ldrex	r3, [r3]
 800f8dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e0:	f023 0301 	bic.w	r3, r3, #1
 800f8e4:	663b      	str	r3, [r7, #96]	; 0x60
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	3308      	adds	r3, #8
 800f8ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f8ee:	64ba      	str	r2, [r7, #72]	; 0x48
 800f8f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8f6:	e841 2300 	strex	r3, r2, [r1]
 800f8fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f8fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d1e5      	bne.n	800f8ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2220      	movs	r2, #32
 800f906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2220      	movs	r2, #32
 800f90e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2200      	movs	r2, #0
 800f916:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f91a:	2303      	movs	r3, #3
 800f91c:	e069      	b.n	800f9f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f003 0304 	and.w	r3, r3, #4
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d051      	beq.n	800f9d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	69db      	ldr	r3, [r3, #28]
 800f932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f936:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f93a:	d149      	bne.n	800f9d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f944:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f94e:	e853 3f00 	ldrex	r3, [r3]
 800f952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f956:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f95a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	461a      	mov	r2, r3
 800f962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f964:	637b      	str	r3, [r7, #52]	; 0x34
 800f966:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f96a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f96c:	e841 2300 	strex	r3, r2, [r1]
 800f970:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f974:	2b00      	cmp	r3, #0
 800f976:	d1e6      	bne.n	800f946 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	3308      	adds	r3, #8
 800f97e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	e853 3f00 	ldrex	r3, [r3]
 800f986:	613b      	str	r3, [r7, #16]
   return(result);
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	f023 0301 	bic.w	r3, r3, #1
 800f98e:	66bb      	str	r3, [r7, #104]	; 0x68
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	3308      	adds	r3, #8
 800f996:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f998:	623a      	str	r2, [r7, #32]
 800f99a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f99c:	69f9      	ldr	r1, [r7, #28]
 800f99e:	6a3a      	ldr	r2, [r7, #32]
 800f9a0:	e841 2300 	strex	r3, r2, [r1]
 800f9a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d1e5      	bne.n	800f978 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2220      	movs	r2, #32
 800f9b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2220      	movs	r2, #32
 800f9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	2220      	movs	r2, #32
 800f9c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f9cc:	2303      	movs	r3, #3
 800f9ce:	e010      	b.n	800f9f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	69da      	ldr	r2, [r3, #28]
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	4013      	ands	r3, r2
 800f9da:	68ba      	ldr	r2, [r7, #8]
 800f9dc:	429a      	cmp	r2, r3
 800f9de:	bf0c      	ite	eq
 800f9e0:	2301      	moveq	r3, #1
 800f9e2:	2300      	movne	r3, #0
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	79fb      	ldrb	r3, [r7, #7]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	f43f af46 	beq.w	800f87c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3770      	adds	r7, #112	; 0x70
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
	...

0800f9fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b0a3      	sub	sp, #140	; 0x8c
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	4613      	mov	r3, r2
 800fa08:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	68ba      	ldr	r2, [r7, #8]
 800fa0e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	88fa      	ldrh	r2, [r7, #6]
 800fa14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	88fa      	ldrh	r2, [r7, #6]
 800fa1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2200      	movs	r2, #0
 800fa24:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	689b      	ldr	r3, [r3, #8]
 800fa2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fa2e:	d10e      	bne.n	800fa4e <UART_Start_Receive_IT+0x52>
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	691b      	ldr	r3, [r3, #16]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d105      	bne.n	800fa44 <UART_Start_Receive_IT+0x48>
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fa3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa42:	e02d      	b.n	800faa0 <UART_Start_Receive_IT+0xa4>
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	22ff      	movs	r2, #255	; 0xff
 800fa48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa4c:	e028      	b.n	800faa0 <UART_Start_Receive_IT+0xa4>
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d10d      	bne.n	800fa72 <UART_Start_Receive_IT+0x76>
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	691b      	ldr	r3, [r3, #16]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d104      	bne.n	800fa68 <UART_Start_Receive_IT+0x6c>
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	22ff      	movs	r2, #255	; 0xff
 800fa62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa66:	e01b      	b.n	800faa0 <UART_Start_Receive_IT+0xa4>
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	227f      	movs	r2, #127	; 0x7f
 800fa6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa70:	e016      	b.n	800faa0 <UART_Start_Receive_IT+0xa4>
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	689b      	ldr	r3, [r3, #8]
 800fa76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fa7a:	d10d      	bne.n	800fa98 <UART_Start_Receive_IT+0x9c>
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	691b      	ldr	r3, [r3, #16]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d104      	bne.n	800fa8e <UART_Start_Receive_IT+0x92>
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	227f      	movs	r2, #127	; 0x7f
 800fa88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa8c:	e008      	b.n	800faa0 <UART_Start_Receive_IT+0xa4>
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	223f      	movs	r2, #63	; 0x3f
 800fa92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fa96:	e003      	b.n	800faa0 <UART_Start_Receive_IT+0xa4>
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	2200      	movs	r2, #0
 800faa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2222      	movs	r2, #34	; 0x22
 800faac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	3308      	adds	r3, #8
 800fab6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fab8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800faba:	e853 3f00 	ldrex	r3, [r3]
 800fabe:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fac0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fac2:	f043 0301 	orr.w	r3, r3, #1
 800fac6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	3308      	adds	r3, #8
 800fad0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fad4:	673a      	str	r2, [r7, #112]	; 0x70
 800fad6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fad8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fada:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fadc:	e841 2300 	strex	r3, r2, [r1]
 800fae0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800fae2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d1e3      	bne.n	800fab0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800faec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800faf0:	d153      	bne.n	800fb9a <UART_Start_Receive_IT+0x19e>
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800faf8:	88fa      	ldrh	r2, [r7, #6]
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d34d      	bcc.n	800fb9a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	689b      	ldr	r3, [r3, #8]
 800fb02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb06:	d107      	bne.n	800fb18 <UART_Start_Receive_IT+0x11c>
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	691b      	ldr	r3, [r3, #16]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d103      	bne.n	800fb18 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	4a4b      	ldr	r2, [pc, #300]	; (800fc40 <UART_Start_Receive_IT+0x244>)
 800fb14:	671a      	str	r2, [r3, #112]	; 0x70
 800fb16:	e002      	b.n	800fb1e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	4a4a      	ldr	r2, [pc, #296]	; (800fc44 <UART_Start_Receive_IT+0x248>)
 800fb1c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2200      	movs	r2, #0
 800fb22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	691b      	ldr	r3, [r3, #16]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d01a      	beq.n	800fb64 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fb36:	e853 3f00 	ldrex	r3, [r3]
 800fb3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fb3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb50:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fb52:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb56:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fb58:	e841 2300 	strex	r3, r2, [r1]
 800fb5c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fb5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d1e4      	bne.n	800fb2e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	3308      	adds	r3, #8
 800fb6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb6e:	e853 3f00 	ldrex	r3, [r3]
 800fb72:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	3308      	adds	r3, #8
 800fb82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fb84:	64ba      	str	r2, [r7, #72]	; 0x48
 800fb86:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fb8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fb8c:	e841 2300 	strex	r3, r2, [r1]
 800fb90:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fb92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d1e5      	bne.n	800fb64 <UART_Start_Receive_IT+0x168>
 800fb98:	e04a      	b.n	800fc30 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fba2:	d107      	bne.n	800fbb4 <UART_Start_Receive_IT+0x1b8>
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	691b      	ldr	r3, [r3, #16]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d103      	bne.n	800fbb4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	4a26      	ldr	r2, [pc, #152]	; (800fc48 <UART_Start_Receive_IT+0x24c>)
 800fbb0:	671a      	str	r2, [r3, #112]	; 0x70
 800fbb2:	e002      	b.n	800fbba <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	4a25      	ldr	r2, [pc, #148]	; (800fc4c <UART_Start_Receive_IT+0x250>)
 800fbb8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2200      	movs	r2, #0
 800fbbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d019      	beq.n	800fbfe <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd2:	e853 3f00 	ldrex	r3, [r3]
 800fbd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbda:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800fbde:	677b      	str	r3, [r7, #116]	; 0x74
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	461a      	mov	r2, r3
 800fbe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbe8:	637b      	str	r3, [r7, #52]	; 0x34
 800fbea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbf0:	e841 2300 	strex	r3, r2, [r1]
 800fbf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d1e6      	bne.n	800fbca <UART_Start_Receive_IT+0x1ce>
 800fbfc:	e018      	b.n	800fc30 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	e853 3f00 	ldrex	r3, [r3]
 800fc0a:	613b      	str	r3, [r7, #16]
   return(result);
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	f043 0320 	orr.w	r3, r3, #32
 800fc12:	67bb      	str	r3, [r7, #120]	; 0x78
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	461a      	mov	r2, r3
 800fc1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc1c:	623b      	str	r3, [r7, #32]
 800fc1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc20:	69f9      	ldr	r1, [r7, #28]
 800fc22:	6a3a      	ldr	r2, [r7, #32]
 800fc24:	e841 2300 	strex	r3, r2, [r1]
 800fc28:	61bb      	str	r3, [r7, #24]
   return(result);
 800fc2a:	69bb      	ldr	r3, [r7, #24]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d1e6      	bne.n	800fbfe <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	378c      	adds	r7, #140	; 0x8c
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
 800fc3e:	bf00      	nop
 800fc40:	08010685 	.word	0x08010685
 800fc44:	0801038d 	.word	0x0801038d
 800fc48:	0801022b 	.word	0x0801022b
 800fc4c:	080100cb 	.word	0x080100cb

0800fc50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b096      	sub	sp, #88	; 0x58
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	60b9      	str	r1, [r7, #8]
 800fc5a:	4613      	mov	r3, r2
 800fc5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	68ba      	ldr	r2, [r7, #8]
 800fc62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	88fa      	ldrh	r2, [r7, #6]
 800fc68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	2222      	movs	r2, #34	; 0x22
 800fc78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d02c      	beq.n	800fcde <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc88:	4a42      	ldr	r2, [pc, #264]	; (800fd94 <UART_Start_Receive_DMA+0x144>)
 800fc8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc90:	4a41      	ldr	r2, [pc, #260]	; (800fd98 <UART_Start_Receive_DMA+0x148>)
 800fc92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc98:	4a40      	ldr	r2, [pc, #256]	; (800fd9c <UART_Start_Receive_DMA+0x14c>)
 800fc9a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fca0:	2200      	movs	r2, #0
 800fca2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	3324      	adds	r3, #36	; 0x24
 800fcae:	4619      	mov	r1, r3
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	88fb      	ldrh	r3, [r7, #6]
 800fcb8:	f7f5 fff0 	bl	8005c9c <HAL_DMA_Start_IT>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d00d      	beq.n	800fcde <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2210      	movs	r2, #16
 800fcc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	2200      	movs	r2, #0
 800fcce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	2220      	movs	r2, #32
 800fcd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800fcda:	2301      	movs	r3, #1
 800fcdc:	e055      	b.n	800fd8a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	2200      	movs	r2, #0
 800fce2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	691b      	ldr	r3, [r3, #16]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d018      	beq.n	800fd20 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcf6:	e853 3f00 	ldrex	r3, [r3]
 800fcfa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd02:	657b      	str	r3, [r7, #84]	; 0x54
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	461a      	mov	r2, r3
 800fd0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fd0e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd10:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd14:	e841 2300 	strex	r3, r2, [r1]
 800fd18:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fd1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d1e6      	bne.n	800fcee <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	3308      	adds	r3, #8
 800fd26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2a:	e853 3f00 	ldrex	r3, [r3]
 800fd2e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	f043 0301 	orr.w	r3, r3, #1
 800fd36:	653b      	str	r3, [r7, #80]	; 0x50
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	3308      	adds	r3, #8
 800fd3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fd40:	637a      	str	r2, [r7, #52]	; 0x34
 800fd42:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd48:	e841 2300 	strex	r3, r2, [r1]
 800fd4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d1e5      	bne.n	800fd20 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	3308      	adds	r3, #8
 800fd5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	e853 3f00 	ldrex	r3, [r3]
 800fd62:	613b      	str	r3, [r7, #16]
   return(result);
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	3308      	adds	r3, #8
 800fd72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd74:	623a      	str	r2, [r7, #32]
 800fd76:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd78:	69f9      	ldr	r1, [r7, #28]
 800fd7a:	6a3a      	ldr	r2, [r7, #32]
 800fd7c:	e841 2300 	strex	r3, r2, [r1]
 800fd80:	61bb      	str	r3, [r7, #24]
   return(result);
 800fd82:	69bb      	ldr	r3, [r7, #24]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d1e5      	bne.n	800fd54 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3758      	adds	r7, #88	; 0x58
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	0800fef1 	.word	0x0800fef1
 800fd98:	08010013 	.word	0x08010013
 800fd9c:	0801004b 	.word	0x0801004b

0800fda0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b08f      	sub	sp, #60	; 0x3c
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdae:	6a3b      	ldr	r3, [r7, #32]
 800fdb0:	e853 3f00 	ldrex	r3, [r3]
 800fdb4:	61fb      	str	r3, [r7, #28]
   return(result);
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800fdbc:	637b      	str	r3, [r7, #52]	; 0x34
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fdc8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fdcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdce:	e841 2300 	strex	r3, r2, [r1]
 800fdd2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d1e6      	bne.n	800fda8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	3308      	adds	r3, #8
 800fde0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	e853 3f00 	ldrex	r3, [r3]
 800fde8:	60bb      	str	r3, [r7, #8]
   return(result);
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800fdf0:	633b      	str	r3, [r7, #48]	; 0x30
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	3308      	adds	r3, #8
 800fdf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fdfa:	61ba      	str	r2, [r7, #24]
 800fdfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdfe:	6979      	ldr	r1, [r7, #20]
 800fe00:	69ba      	ldr	r2, [r7, #24]
 800fe02:	e841 2300 	strex	r3, r2, [r1]
 800fe06:	613b      	str	r3, [r7, #16]
   return(result);
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1e5      	bne.n	800fdda <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2220      	movs	r2, #32
 800fe12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800fe16:	bf00      	nop
 800fe18:	373c      	adds	r7, #60	; 0x3c
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
	...

0800fe24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe24:	b480      	push	{r7}
 800fe26:	b095      	sub	sp, #84	; 0x54
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe34:	e853 3f00 	ldrex	r3, [r3]
 800fe38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fe3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe40:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	461a      	mov	r2, r3
 800fe48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe4a:	643b      	str	r3, [r7, #64]	; 0x40
 800fe4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe52:	e841 2300 	strex	r3, r2, [r1]
 800fe56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d1e6      	bne.n	800fe2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	3308      	adds	r3, #8
 800fe64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe66:	6a3b      	ldr	r3, [r7, #32]
 800fe68:	e853 3f00 	ldrex	r3, [r3]
 800fe6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe6e:	69fa      	ldr	r2, [r7, #28]
 800fe70:	4b1e      	ldr	r3, [pc, #120]	; (800feec <UART_EndRxTransfer+0xc8>)
 800fe72:	4013      	ands	r3, r2
 800fe74:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	3308      	adds	r3, #8
 800fe7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fe80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe86:	e841 2300 	strex	r3, r2, [r1]
 800fe8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d1e5      	bne.n	800fe5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d118      	bne.n	800fecc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	e853 3f00 	ldrex	r3, [r3]
 800fea6:	60bb      	str	r3, [r7, #8]
   return(result);
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	f023 0310 	bic.w	r3, r3, #16
 800feae:	647b      	str	r3, [r7, #68]	; 0x44
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	461a      	mov	r2, r3
 800feb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800feb8:	61bb      	str	r3, [r7, #24]
 800feba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800febc:	6979      	ldr	r1, [r7, #20]
 800febe:	69ba      	ldr	r2, [r7, #24]
 800fec0:	e841 2300 	strex	r3, r2, [r1]
 800fec4:	613b      	str	r3, [r7, #16]
   return(result);
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d1e6      	bne.n	800fe9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2220      	movs	r2, #32
 800fed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2200      	movs	r2, #0
 800fed8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2200      	movs	r2, #0
 800fede:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fee0:	bf00      	nop
 800fee2:	3754      	adds	r7, #84	; 0x54
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	effffffe 	.word	0xeffffffe

0800fef0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b09c      	sub	sp, #112	; 0x70
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fefc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	69db      	ldr	r3, [r3, #28]
 800ff02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff06:	d071      	beq.n	800ffec <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ff08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ff10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff18:	e853 3f00 	ldrex	r3, [r3]
 800ff1c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ff1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ff24:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff2e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff30:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ff34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff36:	e841 2300 	strex	r3, r2, [r1]
 800ff3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ff3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d1e6      	bne.n	800ff10 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	3308      	adds	r3, #8
 800ff48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4c:	e853 3f00 	ldrex	r3, [r3]
 800ff50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ff52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff54:	f023 0301 	bic.w	r3, r3, #1
 800ff58:	667b      	str	r3, [r7, #100]	; 0x64
 800ff5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	3308      	adds	r3, #8
 800ff60:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ff62:	647a      	str	r2, [r7, #68]	; 0x44
 800ff64:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ff68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff6a:	e841 2300 	strex	r3, r2, [r1]
 800ff6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ff70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d1e5      	bne.n	800ff42 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	3308      	adds	r3, #8
 800ff7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff80:	e853 3f00 	ldrex	r3, [r3]
 800ff84:	623b      	str	r3, [r7, #32]
   return(result);
 800ff86:	6a3b      	ldr	r3, [r7, #32]
 800ff88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff8c:	663b      	str	r3, [r7, #96]	; 0x60
 800ff8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	3308      	adds	r3, #8
 800ff94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ff96:	633a      	str	r2, [r7, #48]	; 0x30
 800ff98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff9e:	e841 2300 	strex	r3, r2, [r1]
 800ffa2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ffa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d1e5      	bne.n	800ff76 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ffaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffac:	2220      	movs	r2, #32
 800ffae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffb6:	2b01      	cmp	r3, #1
 800ffb8:	d118      	bne.n	800ffec <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ffba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	e853 3f00 	ldrex	r3, [r3]
 800ffc6:	60fb      	str	r3, [r7, #12]
   return(result);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f023 0310 	bic.w	r3, r3, #16
 800ffce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ffd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ffd8:	61fb      	str	r3, [r7, #28]
 800ffda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffdc:	69b9      	ldr	r1, [r7, #24]
 800ffde:	69fa      	ldr	r2, [r7, #28]
 800ffe0:	e841 2300 	strex	r3, r2, [r1]
 800ffe4:	617b      	str	r3, [r7, #20]
   return(result);
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1e6      	bne.n	800ffba <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ffec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fff0:	2b01      	cmp	r3, #1
 800fff2:	d107      	bne.n	8010004 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fff6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fffa:	4619      	mov	r1, r3
 800fffc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fffe:	f7fe fcdd 	bl	800e9bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010002:	e002      	b.n	801000a <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 8010004:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8010006:	f7f1 fdb3 	bl	8001b70 <HAL_UART_RxCpltCallback>
}
 801000a:	bf00      	nop
 801000c:	3770      	adds	r7, #112	; 0x70
 801000e:	46bd      	mov	sp, r7
 8010010:	bd80      	pop	{r7, pc}

08010012 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010012:	b580      	push	{r7, lr}
 8010014:	b084      	sub	sp, #16
 8010016:	af00      	add	r7, sp, #0
 8010018:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801001e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010024:	2b01      	cmp	r3, #1
 8010026:	d109      	bne.n	801003c <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801002e:	085b      	lsrs	r3, r3, #1
 8010030:	b29b      	uxth	r3, r3
 8010032:	4619      	mov	r1, r3
 8010034:	68f8      	ldr	r0, [r7, #12]
 8010036:	f7fe fcc1 	bl	800e9bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801003a:	e002      	b.n	8010042 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 801003c:	68f8      	ldr	r0, [r7, #12]
 801003e:	f7fe fcb3 	bl	800e9a8 <HAL_UART_RxHalfCpltCallback>
}
 8010042:	bf00      	nop
 8010044:	3710      	adds	r7, #16
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}

0801004a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801004a:	b580      	push	{r7, lr}
 801004c:	b086      	sub	sp, #24
 801004e:	af00      	add	r7, sp, #0
 8010050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010056:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801005e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010066:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	689b      	ldr	r3, [r3, #8]
 801006e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010072:	2b80      	cmp	r3, #128	; 0x80
 8010074:	d109      	bne.n	801008a <UART_DMAError+0x40>
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	2b21      	cmp	r3, #33	; 0x21
 801007a:	d106      	bne.n	801008a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	2200      	movs	r2, #0
 8010080:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010084:	6978      	ldr	r0, [r7, #20]
 8010086:	f7ff fe8b 	bl	800fda0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	689b      	ldr	r3, [r3, #8]
 8010090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010094:	2b40      	cmp	r3, #64	; 0x40
 8010096:	d109      	bne.n	80100ac <UART_DMAError+0x62>
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2b22      	cmp	r3, #34	; 0x22
 801009c:	d106      	bne.n	80100ac <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	2200      	movs	r2, #0
 80100a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80100a6:	6978      	ldr	r0, [r7, #20]
 80100a8:	f7ff febc 	bl	800fe24 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80100b2:	f043 0210 	orr.w	r2, r3, #16
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80100bc:	6978      	ldr	r0, [r7, #20]
 80100be:	f7f1 fd71 	bl	8001ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80100c2:	bf00      	nop
 80100c4:	3718      	adds	r7, #24
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}

080100ca <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80100ca:	b580      	push	{r7, lr}
 80100cc:	b096      	sub	sp, #88	; 0x58
 80100ce:	af00      	add	r7, sp, #0
 80100d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80100d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100e2:	2b22      	cmp	r3, #34	; 0x22
 80100e4:	f040 8095 	bne.w	8010212 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ee:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80100f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80100f6:	b2d9      	uxtb	r1, r3
 80100f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80100fc:	b2da      	uxtb	r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010102:	400a      	ands	r2, r1
 8010104:	b2d2      	uxtb	r2, r2
 8010106:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801010c:	1c5a      	adds	r2, r3, #1
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010118:	b29b      	uxth	r3, r3
 801011a:	3b01      	subs	r3, #1
 801011c:	b29a      	uxth	r2, r3
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801012a:	b29b      	uxth	r3, r3
 801012c:	2b00      	cmp	r3, #0
 801012e:	d178      	bne.n	8010222 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010138:	e853 3f00 	ldrex	r3, [r3]
 801013c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801013e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010144:	653b      	str	r3, [r7, #80]	; 0x50
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	461a      	mov	r2, r3
 801014c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801014e:	647b      	str	r3, [r7, #68]	; 0x44
 8010150:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010152:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010154:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010156:	e841 2300 	strex	r3, r2, [r1]
 801015a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801015c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801015e:	2b00      	cmp	r3, #0
 8010160:	d1e6      	bne.n	8010130 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	3308      	adds	r3, #8
 8010168:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801016a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016c:	e853 3f00 	ldrex	r3, [r3]
 8010170:	623b      	str	r3, [r7, #32]
   return(result);
 8010172:	6a3b      	ldr	r3, [r7, #32]
 8010174:	f023 0301 	bic.w	r3, r3, #1
 8010178:	64fb      	str	r3, [r7, #76]	; 0x4c
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	3308      	adds	r3, #8
 8010180:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010182:	633a      	str	r2, [r7, #48]	; 0x30
 8010184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801018a:	e841 2300 	strex	r3, r2, [r1]
 801018e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010192:	2b00      	cmp	r3, #0
 8010194:	d1e5      	bne.n	8010162 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2220      	movs	r2, #32
 801019a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2200      	movs	r2, #0
 80101a2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101a8:	2b01      	cmp	r3, #1
 80101aa:	d12e      	bne.n	801020a <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2200      	movs	r2, #0
 80101b0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	e853 3f00 	ldrex	r3, [r3]
 80101be:	60fb      	str	r3, [r7, #12]
   return(result);
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f023 0310 	bic.w	r3, r3, #16
 80101c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	461a      	mov	r2, r3
 80101ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101d0:	61fb      	str	r3, [r7, #28]
 80101d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101d4:	69b9      	ldr	r1, [r7, #24]
 80101d6:	69fa      	ldr	r2, [r7, #28]
 80101d8:	e841 2300 	strex	r3, r2, [r1]
 80101dc:	617b      	str	r3, [r7, #20]
   return(result);
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d1e6      	bne.n	80101b2 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	69db      	ldr	r3, [r3, #28]
 80101ea:	f003 0310 	and.w	r3, r3, #16
 80101ee:	2b10      	cmp	r3, #16
 80101f0:	d103      	bne.n	80101fa <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	2210      	movs	r2, #16
 80101f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010200:	4619      	mov	r1, r3
 8010202:	6878      	ldr	r0, [r7, #4]
 8010204:	f7fe fbda 	bl	800e9bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010208:	e00b      	b.n	8010222 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f7f1 fcb0 	bl	8001b70 <HAL_UART_RxCpltCallback>
}
 8010210:	e007      	b.n	8010222 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	699a      	ldr	r2, [r3, #24]
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	681b      	ldr	r3, [r3, #0]
 801021c:	f042 0208 	orr.w	r2, r2, #8
 8010220:	619a      	str	r2, [r3, #24]
}
 8010222:	bf00      	nop
 8010224:	3758      	adds	r7, #88	; 0x58
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}

0801022a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801022a:	b580      	push	{r7, lr}
 801022c:	b096      	sub	sp, #88	; 0x58
 801022e:	af00      	add	r7, sp, #0
 8010230:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010238:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010242:	2b22      	cmp	r3, #34	; 0x22
 8010244:	f040 8095 	bne.w	8010372 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801024e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010256:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010258:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801025c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010260:	4013      	ands	r3, r2
 8010262:	b29a      	uxth	r2, r3
 8010264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010266:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801026c:	1c9a      	adds	r2, r3, #2
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010278:	b29b      	uxth	r3, r3
 801027a:	3b01      	subs	r3, #1
 801027c:	b29a      	uxth	r2, r3
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801028a:	b29b      	uxth	r3, r3
 801028c:	2b00      	cmp	r3, #0
 801028e:	d178      	bne.n	8010382 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010298:	e853 3f00 	ldrex	r3, [r3]
 801029c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801029e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80102a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	461a      	mov	r2, r3
 80102ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102ae:	643b      	str	r3, [r7, #64]	; 0x40
 80102b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80102b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102b6:	e841 2300 	strex	r3, r2, [r1]
 80102ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80102bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d1e6      	bne.n	8010290 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	3308      	adds	r3, #8
 80102c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102ca:	6a3b      	ldr	r3, [r7, #32]
 80102cc:	e853 3f00 	ldrex	r3, [r3]
 80102d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80102d2:	69fb      	ldr	r3, [r7, #28]
 80102d4:	f023 0301 	bic.w	r3, r3, #1
 80102d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	3308      	adds	r3, #8
 80102e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80102e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80102e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102ea:	e841 2300 	strex	r3, r2, [r1]
 80102ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80102f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1e5      	bne.n	80102c2 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2220      	movs	r2, #32
 80102fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2200      	movs	r2, #0
 8010302:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010308:	2b01      	cmp	r3, #1
 801030a:	d12e      	bne.n	801036a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	e853 3f00 	ldrex	r3, [r3]
 801031e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	f023 0310 	bic.w	r3, r3, #16
 8010326:	647b      	str	r3, [r7, #68]	; 0x44
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	461a      	mov	r2, r3
 801032e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010330:	61bb      	str	r3, [r7, #24]
 8010332:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010334:	6979      	ldr	r1, [r7, #20]
 8010336:	69ba      	ldr	r2, [r7, #24]
 8010338:	e841 2300 	strex	r3, r2, [r1]
 801033c:	613b      	str	r3, [r7, #16]
   return(result);
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	2b00      	cmp	r3, #0
 8010342:	d1e6      	bne.n	8010312 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	69db      	ldr	r3, [r3, #28]
 801034a:	f003 0310 	and.w	r3, r3, #16
 801034e:	2b10      	cmp	r3, #16
 8010350:	d103      	bne.n	801035a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	2210      	movs	r2, #16
 8010358:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010360:	4619      	mov	r1, r3
 8010362:	6878      	ldr	r0, [r7, #4]
 8010364:	f7fe fb2a 	bl	800e9bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010368:	e00b      	b.n	8010382 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f7f1 fc00 	bl	8001b70 <HAL_UART_RxCpltCallback>
}
 8010370:	e007      	b.n	8010382 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	699a      	ldr	r2, [r3, #24]
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	f042 0208 	orr.w	r2, r2, #8
 8010380:	619a      	str	r2, [r3, #24]
}
 8010382:	bf00      	nop
 8010384:	3758      	adds	r7, #88	; 0x58
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}
	...

0801038c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b0a6      	sub	sp, #152	; 0x98
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801039a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	69db      	ldr	r3, [r3, #28]
 80103a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80103c2:	2b22      	cmp	r3, #34	; 0x22
 80103c4:	f040 814d 	bne.w	8010662 <UART_RxISR_8BIT_FIFOEN+0x2d6>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80103ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80103d2:	e0f4      	b.n	80105be <UART_RxISR_8BIT_FIFOEN+0x232>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103da:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80103de:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80103e2:	b2d9      	uxtb	r1, r3
 80103e4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80103e8:	b2da      	uxtb	r2, r3
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ee:	400a      	ands	r2, r1
 80103f0:	b2d2      	uxtb	r2, r2
 80103f2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103f8:	1c5a      	adds	r2, r3, #1
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010404:	b29b      	uxth	r3, r3
 8010406:	3b01      	subs	r3, #1
 8010408:	b29a      	uxth	r2, r3
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	69db      	ldr	r3, [r3, #28]
 8010416:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801041a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801041e:	f003 0307 	and.w	r3, r3, #7
 8010422:	2b00      	cmp	r3, #0
 8010424:	d053      	beq.n	80104ce <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010426:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801042a:	f003 0301 	and.w	r3, r3, #1
 801042e:	2b00      	cmp	r3, #0
 8010430:	d011      	beq.n	8010456 <UART_RxISR_8BIT_FIFOEN+0xca>
 8010432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801043a:	2b00      	cmp	r3, #0
 801043c:	d00b      	beq.n	8010456 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2201      	movs	r2, #1
 8010444:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801044c:	f043 0201 	orr.w	r2, r3, #1
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010456:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801045a:	f003 0302 	and.w	r3, r3, #2
 801045e:	2b00      	cmp	r3, #0
 8010460:	d011      	beq.n	8010486 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8010462:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010466:	f003 0301 	and.w	r3, r3, #1
 801046a:	2b00      	cmp	r3, #0
 801046c:	d00b      	beq.n	8010486 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2202      	movs	r2, #2
 8010474:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801047c:	f043 0204 	orr.w	r2, r3, #4
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010486:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801048a:	f003 0304 	and.w	r3, r3, #4
 801048e:	2b00      	cmp	r3, #0
 8010490:	d011      	beq.n	80104b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8010492:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010496:	f003 0301 	and.w	r3, r3, #1
 801049a:	2b00      	cmp	r3, #0
 801049c:	d00b      	beq.n	80104b6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	2204      	movs	r2, #4
 80104a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104ac:	f043 0202 	orr.w	r2, r3, #2
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d006      	beq.n	80104ce <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80104c0:	6878      	ldr	r0, [r7, #4]
 80104c2:	f7f1 fb6f 	bl	8001ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d171      	bne.n	80105be <UART_RxISR_8BIT_FIFOEN+0x232>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104e2:	e853 3f00 	ldrex	r3, [r3]
 80104e6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80104e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80104ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80104ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	461a      	mov	r2, r3
 80104f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80104fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80104fe:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010500:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010502:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010504:	e841 2300 	strex	r3, r2, [r1]
 8010508:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801050a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801050c:	2b00      	cmp	r3, #0
 801050e:	d1e4      	bne.n	80104da <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	3308      	adds	r3, #8
 8010516:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801051a:	e853 3f00 	ldrex	r3, [r3]
 801051e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8010520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010522:	4b56      	ldr	r3, [pc, #344]	; (801067c <UART_RxISR_8BIT_FIFOEN+0x2f0>)
 8010524:	4013      	ands	r3, r2
 8010526:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	3308      	adds	r3, #8
 801052e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010530:	657a      	str	r2, [r7, #84]	; 0x54
 8010532:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010534:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010536:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010538:	e841 2300 	strex	r3, r2, [r1]
 801053c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801053e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010540:	2b00      	cmp	r3, #0
 8010542:	d1e5      	bne.n	8010510 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2220      	movs	r2, #32
 8010548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2200      	movs	r2, #0
 8010550:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010556:	2b01      	cmp	r3, #1
 8010558:	d12e      	bne.n	80105b8 <UART_RxISR_8BIT_FIFOEN+0x22c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	2200      	movs	r2, #0
 801055e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010568:	e853 3f00 	ldrex	r3, [r3]
 801056c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010570:	f023 0310 	bic.w	r3, r3, #16
 8010574:	67bb      	str	r3, [r7, #120]	; 0x78
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	461a      	mov	r2, r3
 801057c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801057e:	643b      	str	r3, [r7, #64]	; 0x40
 8010580:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010582:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010584:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010586:	e841 2300 	strex	r3, r2, [r1]
 801058a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801058c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801058e:	2b00      	cmp	r3, #0
 8010590:	d1e6      	bne.n	8010560 <UART_RxISR_8BIT_FIFOEN+0x1d4>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	69db      	ldr	r3, [r3, #28]
 8010598:	f003 0310 	and.w	r3, r3, #16
 801059c:	2b10      	cmp	r3, #16
 801059e:	d103      	bne.n	80105a8 <UART_RxISR_8BIT_FIFOEN+0x21c>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	2210      	movs	r2, #16
 80105a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80105ae:	4619      	mov	r1, r3
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f7fe fa03 	bl	800e9bc <HAL_UARTEx_RxEventCallback>
 80105b6:	e002      	b.n	80105be <UART_RxISR_8BIT_FIFOEN+0x232>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f7f1 fad9 	bl	8001b70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80105be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d006      	beq.n	80105d4 <UART_RxISR_8BIT_FIFOEN+0x248>
 80105c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80105ca:	f003 0320 	and.w	r3, r3, #32
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	f47f af00 	bne.w	80103d4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80105da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80105de:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d045      	beq.n	8010672 <UART_RxISR_8BIT_FIFOEN+0x2e6>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80105ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d23e      	bcs.n	8010672 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	3308      	adds	r3, #8
 80105fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105fc:	6a3b      	ldr	r3, [r7, #32]
 80105fe:	e853 3f00 	ldrex	r3, [r3]
 8010602:	61fb      	str	r3, [r7, #28]
   return(result);
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801060a:	673b      	str	r3, [r7, #112]	; 0x70
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	3308      	adds	r3, #8
 8010612:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010614:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801061a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801061c:	e841 2300 	strex	r3, r2, [r1]
 8010620:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010624:	2b00      	cmp	r3, #0
 8010626:	d1e5      	bne.n	80105f4 <UART_RxISR_8BIT_FIFOEN+0x268>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	4a15      	ldr	r2, [pc, #84]	; (8010680 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 801062c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	e853 3f00 	ldrex	r3, [r3]
 801063a:	60bb      	str	r3, [r7, #8]
   return(result);
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	f043 0320 	orr.w	r3, r3, #32
 8010642:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	461a      	mov	r2, r3
 801064a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801064c:	61bb      	str	r3, [r7, #24]
 801064e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010650:	6979      	ldr	r1, [r7, #20]
 8010652:	69ba      	ldr	r2, [r7, #24]
 8010654:	e841 2300 	strex	r3, r2, [r1]
 8010658:	613b      	str	r3, [r7, #16]
   return(result);
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d1e6      	bne.n	801062e <UART_RxISR_8BIT_FIFOEN+0x2a2>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010660:	e007      	b.n	8010672 <UART_RxISR_8BIT_FIFOEN+0x2e6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	699a      	ldr	r2, [r3, #24]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f042 0208 	orr.w	r2, r2, #8
 8010670:	619a      	str	r2, [r3, #24]
}
 8010672:	bf00      	nop
 8010674:	3798      	adds	r7, #152	; 0x98
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	effffffe 	.word	0xeffffffe
 8010680:	080100cb 	.word	0x080100cb

08010684 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010684:	b580      	push	{r7, lr}
 8010686:	b0a8      	sub	sp, #160	; 0xa0
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010692:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	69db      	ldr	r3, [r3, #28]
 801069c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	689b      	ldr	r3, [r3, #8]
 80106b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106ba:	2b22      	cmp	r3, #34	; 0x22
 80106bc:	f040 8151 	bne.w	8010962 <UART_RxISR_16BIT_FIFOEN+0x2de>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80106c6:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80106ca:	e0f8      	b.n	80108be <UART_RxISR_16BIT_FIFOEN+0x23a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80106de:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80106e2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80106e6:	4013      	ands	r3, r2
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80106ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106f4:	1c9a      	adds	r2, r3, #2
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010700:	b29b      	uxth	r3, r3
 8010702:	3b01      	subs	r3, #1
 8010704:	b29a      	uxth	r2, r3
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	69db      	ldr	r3, [r3, #28]
 8010712:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801071a:	f003 0307 	and.w	r3, r3, #7
 801071e:	2b00      	cmp	r3, #0
 8010720:	d053      	beq.n	80107ca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010722:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010726:	f003 0301 	and.w	r3, r3, #1
 801072a:	2b00      	cmp	r3, #0
 801072c:	d011      	beq.n	8010752 <UART_RxISR_16BIT_FIFOEN+0xce>
 801072e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010736:	2b00      	cmp	r3, #0
 8010738:	d00b      	beq.n	8010752 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	2201      	movs	r2, #1
 8010740:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010748:	f043 0201 	orr.w	r2, r3, #1
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010752:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010756:	f003 0302 	and.w	r3, r3, #2
 801075a:	2b00      	cmp	r3, #0
 801075c:	d011      	beq.n	8010782 <UART_RxISR_16BIT_FIFOEN+0xfe>
 801075e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010762:	f003 0301 	and.w	r3, r3, #1
 8010766:	2b00      	cmp	r3, #0
 8010768:	d00b      	beq.n	8010782 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	2202      	movs	r2, #2
 8010770:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010778:	f043 0204 	orr.w	r2, r3, #4
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010782:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010786:	f003 0304 	and.w	r3, r3, #4
 801078a:	2b00      	cmp	r3, #0
 801078c:	d011      	beq.n	80107b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 801078e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010792:	f003 0301 	and.w	r3, r3, #1
 8010796:	2b00      	cmp	r3, #0
 8010798:	d00b      	beq.n	80107b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	2204      	movs	r2, #4
 80107a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80107a8:	f043 0202 	orr.w	r2, r3, #2
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d006      	beq.n	80107ca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f7f1 f9f1 	bl	8001ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2200      	movs	r2, #0
 80107c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d173      	bne.n	80108be <UART_RxISR_16BIT_FIFOEN+0x23a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80107de:	e853 3f00 	ldrex	r3, [r3]
 80107e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80107e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80107e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80107ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	461a      	mov	r2, r3
 80107f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80107f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80107fa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80107fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010800:	e841 2300 	strex	r3, r2, [r1]
 8010804:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010806:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010808:	2b00      	cmp	r3, #0
 801080a:	d1e4      	bne.n	80107d6 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	3308      	adds	r3, #8
 8010812:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010816:	e853 3f00 	ldrex	r3, [r3]
 801081a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801081c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801081e:	4b57      	ldr	r3, [pc, #348]	; (801097c <UART_RxISR_16BIT_FIFOEN+0x2f8>)
 8010820:	4013      	ands	r3, r2
 8010822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	3308      	adds	r3, #8
 801082c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010830:	65ba      	str	r2, [r7, #88]	; 0x58
 8010832:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010838:	e841 2300 	strex	r3, r2, [r1]
 801083c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801083e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010840:	2b00      	cmp	r3, #0
 8010842:	d1e3      	bne.n	801080c <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	2220      	movs	r2, #32
 8010848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2200      	movs	r2, #0
 8010850:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010856:	2b01      	cmp	r3, #1
 8010858:	d12e      	bne.n	80108b8 <UART_RxISR_16BIT_FIFOEN+0x234>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2200      	movs	r2, #0
 801085e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010868:	e853 3f00 	ldrex	r3, [r3]
 801086c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801086e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010870:	f023 0310 	bic.w	r3, r3, #16
 8010874:	67fb      	str	r3, [r7, #124]	; 0x7c
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	461a      	mov	r2, r3
 801087c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801087e:	647b      	str	r3, [r7, #68]	; 0x44
 8010880:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010882:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010884:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010886:	e841 2300 	strex	r3, r2, [r1]
 801088a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801088c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801088e:	2b00      	cmp	r3, #0
 8010890:	d1e6      	bne.n	8010860 <UART_RxISR_16BIT_FIFOEN+0x1dc>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	69db      	ldr	r3, [r3, #28]
 8010898:	f003 0310 	and.w	r3, r3, #16
 801089c:	2b10      	cmp	r3, #16
 801089e:	d103      	bne.n	80108a8 <UART_RxISR_16BIT_FIFOEN+0x224>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	2210      	movs	r2, #16
 80108a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80108ae:	4619      	mov	r1, r3
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f7fe f883 	bl	800e9bc <HAL_UARTEx_RxEventCallback>
 80108b6:	e002      	b.n	80108be <UART_RxISR_16BIT_FIFOEN+0x23a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f7f1 f959 	bl	8001b70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80108be:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d006      	beq.n	80108d4 <UART_RxISR_16BIT_FIFOEN+0x250>
 80108c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80108ca:	f003 0320 	and.w	r3, r3, #32
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	f47f aefc 	bne.w	80106cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80108da:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80108de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d045      	beq.n	8010972 <UART_RxISR_16BIT_FIFOEN+0x2ee>
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80108ec:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d23e      	bcs.n	8010972 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	3308      	adds	r3, #8
 80108fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fe:	e853 3f00 	ldrex	r3, [r3]
 8010902:	623b      	str	r3, [r7, #32]
   return(result);
 8010904:	6a3b      	ldr	r3, [r7, #32]
 8010906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801090a:	677b      	str	r3, [r7, #116]	; 0x74
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	3308      	adds	r3, #8
 8010912:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010914:	633a      	str	r2, [r7, #48]	; 0x30
 8010916:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010918:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801091a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801091c:	e841 2300 	strex	r3, r2, [r1]
 8010920:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010924:	2b00      	cmp	r3, #0
 8010926:	d1e5      	bne.n	80108f4 <UART_RxISR_16BIT_FIFOEN+0x270>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	4a15      	ldr	r2, [pc, #84]	; (8010980 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 801092c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	e853 3f00 	ldrex	r3, [r3]
 801093a:	60fb      	str	r3, [r7, #12]
   return(result);
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	f043 0320 	orr.w	r3, r3, #32
 8010942:	673b      	str	r3, [r7, #112]	; 0x70
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	461a      	mov	r2, r3
 801094a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801094c:	61fb      	str	r3, [r7, #28]
 801094e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010950:	69b9      	ldr	r1, [r7, #24]
 8010952:	69fa      	ldr	r2, [r7, #28]
 8010954:	e841 2300 	strex	r3, r2, [r1]
 8010958:	617b      	str	r3, [r7, #20]
   return(result);
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d1e6      	bne.n	801092e <UART_RxISR_16BIT_FIFOEN+0x2aa>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010960:	e007      	b.n	8010972 <UART_RxISR_16BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	699a      	ldr	r2, [r3, #24]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	f042 0208 	orr.w	r2, r2, #8
 8010970:	619a      	str	r2, [r3, #24]
}
 8010972:	bf00      	nop
 8010974:	37a0      	adds	r7, #160	; 0xa0
 8010976:	46bd      	mov	sp, r7
 8010978:	bd80      	pop	{r7, pc}
 801097a:	bf00      	nop
 801097c:	effffffe 	.word	0xeffffffe
 8010980:	0801022b 	.word	0x0801022b

08010984 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010984:	b480      	push	{r7}
 8010986:	b085      	sub	sp, #20
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010992:	2b01      	cmp	r3, #1
 8010994:	d101      	bne.n	801099a <HAL_UARTEx_DisableFifoMode+0x16>
 8010996:	2302      	movs	r3, #2
 8010998:	e027      	b.n	80109ea <HAL_UARTEx_DisableFifoMode+0x66>
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	2201      	movs	r2, #1
 801099e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2224      	movs	r2, #36	; 0x24
 80109a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f022 0201 	bic.w	r2, r2, #1
 80109c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80109c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	2200      	movs	r2, #0
 80109ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	68fa      	ldr	r2, [r7, #12]
 80109d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2220      	movs	r2, #32
 80109dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2200      	movs	r2, #0
 80109e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80109e8:	2300      	movs	r3, #0
}
 80109ea:	4618      	mov	r0, r3
 80109ec:	3714      	adds	r7, #20
 80109ee:	46bd      	mov	sp, r7
 80109f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109f4:	4770      	bx	lr

080109f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80109f6:	b580      	push	{r7, lr}
 80109f8:	b084      	sub	sp, #16
 80109fa:	af00      	add	r7, sp, #0
 80109fc:	6078      	str	r0, [r7, #4]
 80109fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	d101      	bne.n	8010a0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010a0a:	2302      	movs	r3, #2
 8010a0c:	e02d      	b.n	8010a6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2201      	movs	r2, #1
 8010a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2224      	movs	r2, #36	; 0x24
 8010a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	681a      	ldr	r2, [r3, #0]
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	f022 0201 	bic.w	r2, r2, #1
 8010a34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	689b      	ldr	r3, [r3, #8]
 8010a3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	683a      	ldr	r2, [r7, #0]
 8010a46:	430a      	orrs	r2, r1
 8010a48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f000 f850 	bl	8010af0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	68fa      	ldr	r2, [r7, #12]
 8010a56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2220      	movs	r2, #32
 8010a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2200      	movs	r2, #0
 8010a64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010a68:	2300      	movs	r3, #0
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3710      	adds	r7, #16
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b084      	sub	sp, #16
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
 8010a7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010a82:	2b01      	cmp	r3, #1
 8010a84:	d101      	bne.n	8010a8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010a86:	2302      	movs	r3, #2
 8010a88:	e02d      	b.n	8010ae6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	2201      	movs	r2, #1
 8010a8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	2224      	movs	r2, #36	; 0x24
 8010a96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	681a      	ldr	r2, [r3, #0]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	f022 0201 	bic.w	r2, r2, #1
 8010ab0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	689b      	ldr	r3, [r3, #8]
 8010ab8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	683a      	ldr	r2, [r7, #0]
 8010ac2:	430a      	orrs	r2, r1
 8010ac4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 f812 	bl	8010af0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	68fa      	ldr	r2, [r7, #12]
 8010ad2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	2220      	movs	r2, #32
 8010ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	2200      	movs	r2, #0
 8010ae0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010ae4:	2300      	movs	r3, #0
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3710      	adds	r7, #16
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
	...

08010af0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010af0:	b480      	push	{r7}
 8010af2:	b085      	sub	sp, #20
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d108      	bne.n	8010b12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2201      	movs	r2, #1
 8010b04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010b10:	e031      	b.n	8010b76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010b12:	2310      	movs	r3, #16
 8010b14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010b16:	2310      	movs	r3, #16
 8010b18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	689b      	ldr	r3, [r3, #8]
 8010b20:	0e5b      	lsrs	r3, r3, #25
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	f003 0307 	and.w	r3, r3, #7
 8010b28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	689b      	ldr	r3, [r3, #8]
 8010b30:	0f5b      	lsrs	r3, r3, #29
 8010b32:	b2db      	uxtb	r3, r3
 8010b34:	f003 0307 	and.w	r3, r3, #7
 8010b38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b3a:	7bbb      	ldrb	r3, [r7, #14]
 8010b3c:	7b3a      	ldrb	r2, [r7, #12]
 8010b3e:	4911      	ldr	r1, [pc, #68]	; (8010b84 <UARTEx_SetNbDataToProcess+0x94>)
 8010b40:	5c8a      	ldrb	r2, [r1, r2]
 8010b42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010b46:	7b3a      	ldrb	r2, [r7, #12]
 8010b48:	490f      	ldr	r1, [pc, #60]	; (8010b88 <UARTEx_SetNbDataToProcess+0x98>)
 8010b4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010b4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b50:	b29a      	uxth	r2, r3
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b58:	7bfb      	ldrb	r3, [r7, #15]
 8010b5a:	7b7a      	ldrb	r2, [r7, #13]
 8010b5c:	4909      	ldr	r1, [pc, #36]	; (8010b84 <UARTEx_SetNbDataToProcess+0x94>)
 8010b5e:	5c8a      	ldrb	r2, [r1, r2]
 8010b60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010b64:	7b7a      	ldrb	r2, [r7, #13]
 8010b66:	4908      	ldr	r1, [pc, #32]	; (8010b88 <UARTEx_SetNbDataToProcess+0x98>)
 8010b68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010b6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010b6e:	b29a      	uxth	r2, r3
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010b76:	bf00      	nop
 8010b78:	3714      	adds	r7, #20
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop
 8010b84:	08014668 	.word	0x08014668
 8010b88:	08014670 	.word	0x08014670

08010b8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010b8c:	b084      	sub	sp, #16
 8010b8e:	b580      	push	{r7, lr}
 8010b90:	b084      	sub	sp, #16
 8010b92:	af00      	add	r7, sp, #0
 8010b94:	6078      	str	r0, [r7, #4]
 8010b96:	f107 001c 	add.w	r0, r7, #28
 8010b9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ba0:	2b01      	cmp	r3, #1
 8010ba2:	d120      	bne.n	8010be6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ba8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	68da      	ldr	r2, [r3, #12]
 8010bb4:	4b2a      	ldr	r3, [pc, #168]	; (8010c60 <USB_CoreInit+0xd4>)
 8010bb6:	4013      	ands	r3, r2
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	68db      	ldr	r3, [r3, #12]
 8010bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d105      	bne.n	8010bda <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	68db      	ldr	r3, [r3, #12]
 8010bd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f001 fb4e 	bl	801227c <USB_CoreReset>
 8010be0:	4603      	mov	r3, r0
 8010be2:	73fb      	strb	r3, [r7, #15]
 8010be4:	e01a      	b.n	8010c1c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	68db      	ldr	r3, [r3, #12]
 8010bea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f001 fb42 	bl	801227c <USB_CoreReset>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d106      	bne.n	8010c10 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	639a      	str	r2, [r3, #56]	; 0x38
 8010c0e:	e005      	b.n	8010c1c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c1e:	2b01      	cmp	r3, #1
 8010c20:	d116      	bne.n	8010c50 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c26:	b29a      	uxth	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010c30:	4b0c      	ldr	r3, [pc, #48]	; (8010c64 <USB_CoreInit+0xd8>)
 8010c32:	4313      	orrs	r3, r2
 8010c34:	687a      	ldr	r2, [r7, #4]
 8010c36:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	689b      	ldr	r3, [r3, #8]
 8010c3c:	f043 0206 	orr.w	r2, r3, #6
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	689b      	ldr	r3, [r3, #8]
 8010c48:	f043 0220 	orr.w	r2, r3, #32
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3710      	adds	r7, #16
 8010c56:	46bd      	mov	sp, r7
 8010c58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010c5c:	b004      	add	sp, #16
 8010c5e:	4770      	bx	lr
 8010c60:	ffbdffbf 	.word	0xffbdffbf
 8010c64:	03ee0000 	.word	0x03ee0000

08010c68 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b087      	sub	sp, #28
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60f8      	str	r0, [r7, #12]
 8010c70:	60b9      	str	r1, [r7, #8]
 8010c72:	4613      	mov	r3, r2
 8010c74:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8010c76:	79fb      	ldrb	r3, [r7, #7]
 8010c78:	2b02      	cmp	r3, #2
 8010c7a:	d165      	bne.n	8010d48 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	4a41      	ldr	r2, [pc, #260]	; (8010d84 <USB_SetTurnaroundTime+0x11c>)
 8010c80:	4293      	cmp	r3, r2
 8010c82:	d906      	bls.n	8010c92 <USB_SetTurnaroundTime+0x2a>
 8010c84:	68bb      	ldr	r3, [r7, #8]
 8010c86:	4a40      	ldr	r2, [pc, #256]	; (8010d88 <USB_SetTurnaroundTime+0x120>)
 8010c88:	4293      	cmp	r3, r2
 8010c8a:	d202      	bcs.n	8010c92 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010c8c:	230f      	movs	r3, #15
 8010c8e:	617b      	str	r3, [r7, #20]
 8010c90:	e062      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	4a3c      	ldr	r2, [pc, #240]	; (8010d88 <USB_SetTurnaroundTime+0x120>)
 8010c96:	4293      	cmp	r3, r2
 8010c98:	d306      	bcc.n	8010ca8 <USB_SetTurnaroundTime+0x40>
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	4a3b      	ldr	r2, [pc, #236]	; (8010d8c <USB_SetTurnaroundTime+0x124>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d202      	bcs.n	8010ca8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010ca2:	230e      	movs	r3, #14
 8010ca4:	617b      	str	r3, [r7, #20]
 8010ca6:	e057      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	4a38      	ldr	r2, [pc, #224]	; (8010d8c <USB_SetTurnaroundTime+0x124>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d306      	bcc.n	8010cbe <USB_SetTurnaroundTime+0x56>
 8010cb0:	68bb      	ldr	r3, [r7, #8]
 8010cb2:	4a37      	ldr	r2, [pc, #220]	; (8010d90 <USB_SetTurnaroundTime+0x128>)
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d202      	bcs.n	8010cbe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010cb8:	230d      	movs	r3, #13
 8010cba:	617b      	str	r3, [r7, #20]
 8010cbc:	e04c      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	4a33      	ldr	r2, [pc, #204]	; (8010d90 <USB_SetTurnaroundTime+0x128>)
 8010cc2:	4293      	cmp	r3, r2
 8010cc4:	d306      	bcc.n	8010cd4 <USB_SetTurnaroundTime+0x6c>
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	4a32      	ldr	r2, [pc, #200]	; (8010d94 <USB_SetTurnaroundTime+0x12c>)
 8010cca:	4293      	cmp	r3, r2
 8010ccc:	d802      	bhi.n	8010cd4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010cce:	230c      	movs	r3, #12
 8010cd0:	617b      	str	r3, [r7, #20]
 8010cd2:	e041      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	4a2f      	ldr	r2, [pc, #188]	; (8010d94 <USB_SetTurnaroundTime+0x12c>)
 8010cd8:	4293      	cmp	r3, r2
 8010cda:	d906      	bls.n	8010cea <USB_SetTurnaroundTime+0x82>
 8010cdc:	68bb      	ldr	r3, [r7, #8]
 8010cde:	4a2e      	ldr	r2, [pc, #184]	; (8010d98 <USB_SetTurnaroundTime+0x130>)
 8010ce0:	4293      	cmp	r3, r2
 8010ce2:	d802      	bhi.n	8010cea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010ce4:	230b      	movs	r3, #11
 8010ce6:	617b      	str	r3, [r7, #20]
 8010ce8:	e036      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	4a2a      	ldr	r2, [pc, #168]	; (8010d98 <USB_SetTurnaroundTime+0x130>)
 8010cee:	4293      	cmp	r3, r2
 8010cf0:	d906      	bls.n	8010d00 <USB_SetTurnaroundTime+0x98>
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	4a29      	ldr	r2, [pc, #164]	; (8010d9c <USB_SetTurnaroundTime+0x134>)
 8010cf6:	4293      	cmp	r3, r2
 8010cf8:	d802      	bhi.n	8010d00 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010cfa:	230a      	movs	r3, #10
 8010cfc:	617b      	str	r3, [r7, #20]
 8010cfe:	e02b      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010d00:	68bb      	ldr	r3, [r7, #8]
 8010d02:	4a26      	ldr	r2, [pc, #152]	; (8010d9c <USB_SetTurnaroundTime+0x134>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d906      	bls.n	8010d16 <USB_SetTurnaroundTime+0xae>
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	4a25      	ldr	r2, [pc, #148]	; (8010da0 <USB_SetTurnaroundTime+0x138>)
 8010d0c:	4293      	cmp	r3, r2
 8010d0e:	d202      	bcs.n	8010d16 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010d10:	2309      	movs	r3, #9
 8010d12:	617b      	str	r3, [r7, #20]
 8010d14:	e020      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	4a21      	ldr	r2, [pc, #132]	; (8010da0 <USB_SetTurnaroundTime+0x138>)
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d306      	bcc.n	8010d2c <USB_SetTurnaroundTime+0xc4>
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	4a20      	ldr	r2, [pc, #128]	; (8010da4 <USB_SetTurnaroundTime+0x13c>)
 8010d22:	4293      	cmp	r3, r2
 8010d24:	d802      	bhi.n	8010d2c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8010d26:	2308      	movs	r3, #8
 8010d28:	617b      	str	r3, [r7, #20]
 8010d2a:	e015      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	4a1d      	ldr	r2, [pc, #116]	; (8010da4 <USB_SetTurnaroundTime+0x13c>)
 8010d30:	4293      	cmp	r3, r2
 8010d32:	d906      	bls.n	8010d42 <USB_SetTurnaroundTime+0xda>
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	4a1c      	ldr	r2, [pc, #112]	; (8010da8 <USB_SetTurnaroundTime+0x140>)
 8010d38:	4293      	cmp	r3, r2
 8010d3a:	d202      	bcs.n	8010d42 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010d3c:	2307      	movs	r3, #7
 8010d3e:	617b      	str	r3, [r7, #20]
 8010d40:	e00a      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010d42:	2306      	movs	r3, #6
 8010d44:	617b      	str	r3, [r7, #20]
 8010d46:	e007      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8010d48:	79fb      	ldrb	r3, [r7, #7]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d102      	bne.n	8010d54 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010d4e:	2309      	movs	r3, #9
 8010d50:	617b      	str	r3, [r7, #20]
 8010d52:	e001      	b.n	8010d58 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010d54:	2309      	movs	r3, #9
 8010d56:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	68da      	ldr	r2, [r3, #12]
 8010d68:	697b      	ldr	r3, [r7, #20]
 8010d6a:	029b      	lsls	r3, r3, #10
 8010d6c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8010d70:	431a      	orrs	r2, r3
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8010d76:	2300      	movs	r3, #0
}
 8010d78:	4618      	mov	r0, r3
 8010d7a:	371c      	adds	r7, #28
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr
 8010d84:	00d8acbf 	.word	0x00d8acbf
 8010d88:	00e4e1c0 	.word	0x00e4e1c0
 8010d8c:	00f42400 	.word	0x00f42400
 8010d90:	01067380 	.word	0x01067380
 8010d94:	011a499f 	.word	0x011a499f
 8010d98:	01312cff 	.word	0x01312cff
 8010d9c:	014ca43f 	.word	0x014ca43f
 8010da0:	016e3600 	.word	0x016e3600
 8010da4:	01a6ab1f 	.word	0x01a6ab1f
 8010da8:	01e84800 	.word	0x01e84800

08010dac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dac:	b480      	push	{r7}
 8010dae:	b083      	sub	sp, #12
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	689b      	ldr	r3, [r3, #8]
 8010db8:	f043 0201 	orr.w	r2, r3, #1
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010dc0:	2300      	movs	r3, #0
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	370c      	adds	r7, #12
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dce:	b480      	push	{r7}
 8010dd0:	b083      	sub	sp, #12
 8010dd2:	af00      	add	r7, sp, #0
 8010dd4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	689b      	ldr	r3, [r3, #8]
 8010dda:	f023 0201 	bic.w	r2, r3, #1
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010de2:	2300      	movs	r3, #0
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	370c      	adds	r7, #12
 8010de8:	46bd      	mov	sp, r7
 8010dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dee:	4770      	bx	lr

08010df0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010df0:	b580      	push	{r7, lr}
 8010df2:	b084      	sub	sp, #16
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	6078      	str	r0, [r7, #4]
 8010df8:	460b      	mov	r3, r1
 8010dfa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010e0c:	78fb      	ldrb	r3, [r7, #3]
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d115      	bne.n	8010e3e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	68db      	ldr	r3, [r3, #12]
 8010e16:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010e1e:	2001      	movs	r0, #1
 8010e20:	f7f2 f86c 	bl	8002efc <HAL_Delay>
      ms++;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	3301      	adds	r3, #1
 8010e28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	f001 f995 	bl	801215a <USB_GetMode>
 8010e30:	4603      	mov	r3, r0
 8010e32:	2b01      	cmp	r3, #1
 8010e34:	d01e      	beq.n	8010e74 <USB_SetCurrentMode+0x84>
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	2b31      	cmp	r3, #49	; 0x31
 8010e3a:	d9f0      	bls.n	8010e1e <USB_SetCurrentMode+0x2e>
 8010e3c:	e01a      	b.n	8010e74 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010e3e:	78fb      	ldrb	r3, [r7, #3]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d115      	bne.n	8010e70 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	68db      	ldr	r3, [r3, #12]
 8010e48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010e50:	2001      	movs	r0, #1
 8010e52:	f7f2 f853 	bl	8002efc <HAL_Delay>
      ms++;
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	3301      	adds	r3, #1
 8010e5a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f001 f97c 	bl	801215a <USB_GetMode>
 8010e62:	4603      	mov	r3, r0
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d005      	beq.n	8010e74 <USB_SetCurrentMode+0x84>
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	2b31      	cmp	r3, #49	; 0x31
 8010e6c:	d9f0      	bls.n	8010e50 <USB_SetCurrentMode+0x60>
 8010e6e:	e001      	b.n	8010e74 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010e70:	2301      	movs	r3, #1
 8010e72:	e005      	b.n	8010e80 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	2b32      	cmp	r3, #50	; 0x32
 8010e78:	d101      	bne.n	8010e7e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	e000      	b.n	8010e80 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010e7e:	2300      	movs	r3, #0
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3710      	adds	r7, #16
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010e88:	b084      	sub	sp, #16
 8010e8a:	b580      	push	{r7, lr}
 8010e8c:	b086      	sub	sp, #24
 8010e8e:	af00      	add	r7, sp, #0
 8010e90:	6078      	str	r0, [r7, #4]
 8010e92:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010ea2:	2300      	movs	r3, #0
 8010ea4:	613b      	str	r3, [r7, #16]
 8010ea6:	e009      	b.n	8010ebc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010ea8:	687a      	ldr	r2, [r7, #4]
 8010eaa:	693b      	ldr	r3, [r7, #16]
 8010eac:	3340      	adds	r3, #64	; 0x40
 8010eae:	009b      	lsls	r3, r3, #2
 8010eb0:	4413      	add	r3, r2
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	3301      	adds	r3, #1
 8010eba:	613b      	str	r3, [r7, #16]
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	2b0e      	cmp	r3, #14
 8010ec0:	d9f2      	bls.n	8010ea8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d11c      	bne.n	8010f02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	68fa      	ldr	r2, [r7, #12]
 8010ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ed6:	f043 0302 	orr.w	r3, r3, #2
 8010eda:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ee0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	601a      	str	r2, [r3, #0]
 8010f00:	e005      	b.n	8010f0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010f14:	461a      	mov	r2, r3
 8010f16:	2300      	movs	r3, #0
 8010f18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f20:	4619      	mov	r1, r3
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f28:	461a      	mov	r2, r3
 8010f2a:	680b      	ldr	r3, [r1, #0]
 8010f2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f30:	2b01      	cmp	r3, #1
 8010f32:	d10c      	bne.n	8010f4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d104      	bne.n	8010f44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010f3a:	2100      	movs	r1, #0
 8010f3c:	6878      	ldr	r0, [r7, #4]
 8010f3e:	f000 f961 	bl	8011204 <USB_SetDevSpeed>
 8010f42:	e008      	b.n	8010f56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010f44:	2101      	movs	r1, #1
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f000 f95c 	bl	8011204 <USB_SetDevSpeed>
 8010f4c:	e003      	b.n	8010f56 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010f4e:	2103      	movs	r1, #3
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 f957 	bl	8011204 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010f56:	2110      	movs	r1, #16
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f000 f8f3 	bl	8011144 <USB_FlushTxFifo>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d001      	beq.n	8010f68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010f64:	2301      	movs	r3, #1
 8010f66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010f68:	6878      	ldr	r0, [r7, #4]
 8010f6a:	f000 f91d 	bl	80111a8 <USB_FlushRxFifo>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d001      	beq.n	8010f78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010f74:	2301      	movs	r3, #1
 8010f76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f7e:	461a      	mov	r2, r3
 8010f80:	2300      	movs	r3, #0
 8010f82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010f96:	461a      	mov	r2, r3
 8010f98:	2300      	movs	r3, #0
 8010f9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010f9c:	2300      	movs	r3, #0
 8010f9e:	613b      	str	r3, [r7, #16]
 8010fa0:	e043      	b.n	801102a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	015a      	lsls	r2, r3, #5
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	4413      	add	r3, r2
 8010faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fb8:	d118      	bne.n	8010fec <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d10a      	bne.n	8010fd6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	015a      	lsls	r2, r3, #5
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fcc:	461a      	mov	r2, r3
 8010fce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010fd2:	6013      	str	r3, [r2, #0]
 8010fd4:	e013      	b.n	8010ffe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	015a      	lsls	r2, r3, #5
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	4413      	add	r3, r2
 8010fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010fe2:	461a      	mov	r2, r3
 8010fe4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010fe8:	6013      	str	r3, [r2, #0]
 8010fea:	e008      	b.n	8010ffe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	015a      	lsls	r2, r3, #5
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	4413      	add	r3, r2
 8010ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ff8:	461a      	mov	r2, r3
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	015a      	lsls	r2, r3, #5
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	4413      	add	r3, r2
 8011006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801100a:	461a      	mov	r2, r3
 801100c:	2300      	movs	r3, #0
 801100e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	015a      	lsls	r2, r3, #5
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	4413      	add	r3, r2
 8011018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801101c:	461a      	mov	r2, r3
 801101e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011022:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011024:	693b      	ldr	r3, [r7, #16]
 8011026:	3301      	adds	r3, #1
 8011028:	613b      	str	r3, [r7, #16]
 801102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102c:	693a      	ldr	r2, [r7, #16]
 801102e:	429a      	cmp	r2, r3
 8011030:	d3b7      	bcc.n	8010fa2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011032:	2300      	movs	r3, #0
 8011034:	613b      	str	r3, [r7, #16]
 8011036:	e043      	b.n	80110c0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	015a      	lsls	r2, r3, #5
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	4413      	add	r3, r2
 8011040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801104a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801104e:	d118      	bne.n	8011082 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011050:	693b      	ldr	r3, [r7, #16]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d10a      	bne.n	801106c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011056:	693b      	ldr	r3, [r7, #16]
 8011058:	015a      	lsls	r2, r3, #5
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	4413      	add	r3, r2
 801105e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011062:	461a      	mov	r2, r3
 8011064:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011068:	6013      	str	r3, [r2, #0]
 801106a:	e013      	b.n	8011094 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801106c:	693b      	ldr	r3, [r7, #16]
 801106e:	015a      	lsls	r2, r3, #5
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	4413      	add	r3, r2
 8011074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011078:	461a      	mov	r2, r3
 801107a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801107e:	6013      	str	r3, [r2, #0]
 8011080:	e008      	b.n	8011094 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	015a      	lsls	r2, r3, #5
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	4413      	add	r3, r2
 801108a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801108e:	461a      	mov	r2, r3
 8011090:	2300      	movs	r3, #0
 8011092:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011094:	693b      	ldr	r3, [r7, #16]
 8011096:	015a      	lsls	r2, r3, #5
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	4413      	add	r3, r2
 801109c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110a0:	461a      	mov	r2, r3
 80110a2:	2300      	movs	r3, #0
 80110a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80110a6:	693b      	ldr	r3, [r7, #16]
 80110a8:	015a      	lsls	r2, r3, #5
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	4413      	add	r3, r2
 80110ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110b2:	461a      	mov	r2, r3
 80110b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80110b8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	3301      	adds	r3, #1
 80110be:	613b      	str	r3, [r7, #16]
 80110c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110c2:	693a      	ldr	r2, [r7, #16]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d3b7      	bcc.n	8011038 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80110ce:	691b      	ldr	r3, [r3, #16]
 80110d0:	68fa      	ldr	r2, [r7, #12]
 80110d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80110d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80110da:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	2200      	movs	r2, #0
 80110e0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80110e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80110ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d105      	bne.n	80110fc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	699b      	ldr	r3, [r3, #24]
 80110f4:	f043 0210 	orr.w	r2, r3, #16
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	699a      	ldr	r2, [r3, #24]
 8011100:	4b0e      	ldr	r3, [pc, #56]	; (801113c <USB_DevInit+0x2b4>)
 8011102:	4313      	orrs	r3, r2
 8011104:	687a      	ldr	r2, [r7, #4]
 8011106:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8011108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801110a:	2b00      	cmp	r3, #0
 801110c:	d005      	beq.n	801111a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	699b      	ldr	r3, [r3, #24]
 8011112:	f043 0208 	orr.w	r2, r3, #8
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801111a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801111c:	2b01      	cmp	r3, #1
 801111e:	d105      	bne.n	801112c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	699a      	ldr	r2, [r3, #24]
 8011124:	4b06      	ldr	r3, [pc, #24]	; (8011140 <USB_DevInit+0x2b8>)
 8011126:	4313      	orrs	r3, r2
 8011128:	687a      	ldr	r2, [r7, #4]
 801112a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801112c:	7dfb      	ldrb	r3, [r7, #23]
}
 801112e:	4618      	mov	r0, r3
 8011130:	3718      	adds	r7, #24
 8011132:	46bd      	mov	sp, r7
 8011134:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011138:	b004      	add	sp, #16
 801113a:	4770      	bx	lr
 801113c:	803c3800 	.word	0x803c3800
 8011140:	40000004 	.word	0x40000004

08011144 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8011144:	b480      	push	{r7}
 8011146:	b085      	sub	sp, #20
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801114e:	2300      	movs	r3, #0
 8011150:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3301      	adds	r3, #1
 8011156:	60fb      	str	r3, [r7, #12]
 8011158:	4a12      	ldr	r2, [pc, #72]	; (80111a4 <USB_FlushTxFifo+0x60>)
 801115a:	4293      	cmp	r3, r2
 801115c:	d901      	bls.n	8011162 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801115e:	2303      	movs	r3, #3
 8011160:	e01a      	b.n	8011198 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	691b      	ldr	r3, [r3, #16]
 8011166:	2b00      	cmp	r3, #0
 8011168:	daf3      	bge.n	8011152 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801116a:	2300      	movs	r3, #0
 801116c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	019b      	lsls	r3, r3, #6
 8011172:	f043 0220 	orr.w	r2, r3, #32
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	3301      	adds	r3, #1
 801117e:	60fb      	str	r3, [r7, #12]
 8011180:	4a08      	ldr	r2, [pc, #32]	; (80111a4 <USB_FlushTxFifo+0x60>)
 8011182:	4293      	cmp	r3, r2
 8011184:	d901      	bls.n	801118a <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8011186:	2303      	movs	r3, #3
 8011188:	e006      	b.n	8011198 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	691b      	ldr	r3, [r3, #16]
 801118e:	f003 0320 	and.w	r3, r3, #32
 8011192:	2b20      	cmp	r3, #32
 8011194:	d0f1      	beq.n	801117a <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8011196:	2300      	movs	r3, #0
}
 8011198:	4618      	mov	r0, r3
 801119a:	3714      	adds	r7, #20
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr
 80111a4:	00030d40 	.word	0x00030d40

080111a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80111a8:	b480      	push	{r7}
 80111aa:	b085      	sub	sp, #20
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80111b0:	2300      	movs	r3, #0
 80111b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	3301      	adds	r3, #1
 80111b8:	60fb      	str	r3, [r7, #12]
 80111ba:	4a11      	ldr	r2, [pc, #68]	; (8011200 <USB_FlushRxFifo+0x58>)
 80111bc:	4293      	cmp	r3, r2
 80111be:	d901      	bls.n	80111c4 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 80111c0:	2303      	movs	r3, #3
 80111c2:	e017      	b.n	80111f4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	691b      	ldr	r3, [r3, #16]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	daf3      	bge.n	80111b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80111cc:	2300      	movs	r3, #0
 80111ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	2210      	movs	r2, #16
 80111d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	3301      	adds	r3, #1
 80111da:	60fb      	str	r3, [r7, #12]
 80111dc:	4a08      	ldr	r2, [pc, #32]	; (8011200 <USB_FlushRxFifo+0x58>)
 80111de:	4293      	cmp	r3, r2
 80111e0:	d901      	bls.n	80111e6 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80111e2:	2303      	movs	r3, #3
 80111e4:	e006      	b.n	80111f4 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	691b      	ldr	r3, [r3, #16]
 80111ea:	f003 0310 	and.w	r3, r3, #16
 80111ee:	2b10      	cmp	r3, #16
 80111f0:	d0f1      	beq.n	80111d6 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80111f2:	2300      	movs	r3, #0
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3714      	adds	r7, #20
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr
 8011200:	00030d40 	.word	0x00030d40

08011204 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8011204:	b480      	push	{r7}
 8011206:	b085      	sub	sp, #20
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	460b      	mov	r3, r1
 801120e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	78fb      	ldrb	r3, [r7, #3]
 801121e:	68f9      	ldr	r1, [r7, #12]
 8011220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011224:	4313      	orrs	r3, r2
 8011226:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	3714      	adds	r7, #20
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr

08011236 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8011236:	b480      	push	{r7}
 8011238:	b087      	sub	sp, #28
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011242:	693b      	ldr	r3, [r7, #16]
 8011244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011248:	689b      	ldr	r3, [r3, #8]
 801124a:	f003 0306 	and.w	r3, r3, #6
 801124e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	2b00      	cmp	r3, #0
 8011254:	d102      	bne.n	801125c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8011256:	2300      	movs	r3, #0
 8011258:	75fb      	strb	r3, [r7, #23]
 801125a:	e00a      	b.n	8011272 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2b02      	cmp	r3, #2
 8011260:	d002      	beq.n	8011268 <USB_GetDevSpeed+0x32>
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2b06      	cmp	r3, #6
 8011266:	d102      	bne.n	801126e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011268:	2302      	movs	r3, #2
 801126a:	75fb      	strb	r3, [r7, #23]
 801126c:	e001      	b.n	8011272 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801126e:	230f      	movs	r3, #15
 8011270:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011272:	7dfb      	ldrb	r3, [r7, #23]
}
 8011274:	4618      	mov	r0, r3
 8011276:	371c      	adds	r7, #28
 8011278:	46bd      	mov	sp, r7
 801127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127e:	4770      	bx	lr

08011280 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011280:	b480      	push	{r7}
 8011282:	b085      	sub	sp, #20
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801128e:	683b      	ldr	r3, [r7, #0]
 8011290:	781b      	ldrb	r3, [r3, #0]
 8011292:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011294:	683b      	ldr	r3, [r7, #0]
 8011296:	785b      	ldrb	r3, [r3, #1]
 8011298:	2b01      	cmp	r3, #1
 801129a:	d139      	bne.n	8011310 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112a2:	69da      	ldr	r2, [r3, #28]
 80112a4:	683b      	ldr	r3, [r7, #0]
 80112a6:	781b      	ldrb	r3, [r3, #0]
 80112a8:	f003 030f 	and.w	r3, r3, #15
 80112ac:	2101      	movs	r1, #1
 80112ae:	fa01 f303 	lsl.w	r3, r1, r3
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	68f9      	ldr	r1, [r7, #12]
 80112b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80112ba:	4313      	orrs	r3, r2
 80112bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	015a      	lsls	r2, r3, #5
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	4413      	add	r3, r2
 80112c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d153      	bne.n	801137c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	015a      	lsls	r2, r3, #5
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	4413      	add	r3, r2
 80112dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	689b      	ldr	r3, [r3, #8]
 80112e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	78db      	ldrb	r3, [r3, #3]
 80112ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80112f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	059b      	lsls	r3, r3, #22
 80112f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80112f8:	431a      	orrs	r2, r3
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	0159      	lsls	r1, r3, #5
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	440b      	add	r3, r1
 8011302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011306:	4619      	mov	r1, r3
 8011308:	4b20      	ldr	r3, [pc, #128]	; (801138c <USB_ActivateEndpoint+0x10c>)
 801130a:	4313      	orrs	r3, r2
 801130c:	600b      	str	r3, [r1, #0]
 801130e:	e035      	b.n	801137c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011316:	69da      	ldr	r2, [r3, #28]
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	f003 030f 	and.w	r3, r3, #15
 8011320:	2101      	movs	r1, #1
 8011322:	fa01 f303 	lsl.w	r3, r1, r3
 8011326:	041b      	lsls	r3, r3, #16
 8011328:	68f9      	ldr	r1, [r7, #12]
 801132a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801132e:	4313      	orrs	r3, r2
 8011330:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011332:	68bb      	ldr	r3, [r7, #8]
 8011334:	015a      	lsls	r2, r3, #5
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	4413      	add	r3, r2
 801133a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011344:	2b00      	cmp	r3, #0
 8011346:	d119      	bne.n	801137c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	015a      	lsls	r2, r3, #5
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	4413      	add	r3, r2
 8011350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011354:	681a      	ldr	r2, [r3, #0]
 8011356:	683b      	ldr	r3, [r7, #0]
 8011358:	689b      	ldr	r3, [r3, #8]
 801135a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801135e:	683b      	ldr	r3, [r7, #0]
 8011360:	78db      	ldrb	r3, [r3, #3]
 8011362:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011364:	430b      	orrs	r3, r1
 8011366:	431a      	orrs	r2, r3
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	0159      	lsls	r1, r3, #5
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	440b      	add	r3, r1
 8011370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011374:	4619      	mov	r1, r3
 8011376:	4b05      	ldr	r3, [pc, #20]	; (801138c <USB_ActivateEndpoint+0x10c>)
 8011378:	4313      	orrs	r3, r2
 801137a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801137c:	2300      	movs	r3, #0
}
 801137e:	4618      	mov	r0, r3
 8011380:	3714      	adds	r7, #20
 8011382:	46bd      	mov	sp, r7
 8011384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011388:	4770      	bx	lr
 801138a:	bf00      	nop
 801138c:	10008000 	.word	0x10008000

08011390 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011390:	b480      	push	{r7}
 8011392:	b085      	sub	sp, #20
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
 8011398:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	781b      	ldrb	r3, [r3, #0]
 80113a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	785b      	ldrb	r3, [r3, #1]
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d161      	bne.n	8011470 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	015a      	lsls	r2, r3, #5
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	4413      	add	r3, r2
 80113b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80113be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80113c2:	d11f      	bne.n	8011404 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	015a      	lsls	r2, r3, #5
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	4413      	add	r3, r2
 80113cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	68ba      	ldr	r2, [r7, #8]
 80113d4:	0151      	lsls	r1, r2, #5
 80113d6:	68fa      	ldr	r2, [r7, #12]
 80113d8:	440a      	add	r2, r1
 80113da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80113e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	015a      	lsls	r2, r3, #5
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	4413      	add	r3, r2
 80113ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	68ba      	ldr	r2, [r7, #8]
 80113f4:	0151      	lsls	r1, r2, #5
 80113f6:	68fa      	ldr	r2, [r7, #12]
 80113f8:	440a      	add	r2, r1
 80113fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80113fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011402:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801140a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	f003 030f 	and.w	r3, r3, #15
 8011414:	2101      	movs	r1, #1
 8011416:	fa01 f303 	lsl.w	r3, r1, r3
 801141a:	b29b      	uxth	r3, r3
 801141c:	43db      	mvns	r3, r3
 801141e:	68f9      	ldr	r1, [r7, #12]
 8011420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011424:	4013      	ands	r3, r2
 8011426:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801142e:	69da      	ldr	r2, [r3, #28]
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	781b      	ldrb	r3, [r3, #0]
 8011434:	f003 030f 	and.w	r3, r3, #15
 8011438:	2101      	movs	r1, #1
 801143a:	fa01 f303 	lsl.w	r3, r1, r3
 801143e:	b29b      	uxth	r3, r3
 8011440:	43db      	mvns	r3, r3
 8011442:	68f9      	ldr	r1, [r7, #12]
 8011444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011448:	4013      	ands	r3, r2
 801144a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	015a      	lsls	r2, r3, #5
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	4413      	add	r3, r2
 8011454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	0159      	lsls	r1, r3, #5
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	440b      	add	r3, r1
 8011462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011466:	4619      	mov	r1, r3
 8011468:	4b35      	ldr	r3, [pc, #212]	; (8011540 <USB_DeactivateEndpoint+0x1b0>)
 801146a:	4013      	ands	r3, r2
 801146c:	600b      	str	r3, [r1, #0]
 801146e:	e060      	b.n	8011532 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	015a      	lsls	r2, r3, #5
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	4413      	add	r3, r2
 8011478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011482:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011486:	d11f      	bne.n	80114c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	015a      	lsls	r2, r3, #5
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	4413      	add	r3, r2
 8011490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	68ba      	ldr	r2, [r7, #8]
 8011498:	0151      	lsls	r1, r2, #5
 801149a:	68fa      	ldr	r2, [r7, #12]
 801149c:	440a      	add	r2, r1
 801149e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80114a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80114a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	015a      	lsls	r2, r3, #5
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	4413      	add	r3, r2
 80114b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	68ba      	ldr	r2, [r7, #8]
 80114b8:	0151      	lsls	r1, r2, #5
 80114ba:	68fa      	ldr	r2, [r7, #12]
 80114bc:	440a      	add	r2, r1
 80114be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80114c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80114c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	781b      	ldrb	r3, [r3, #0]
 80114d4:	f003 030f 	and.w	r3, r3, #15
 80114d8:	2101      	movs	r1, #1
 80114da:	fa01 f303 	lsl.w	r3, r1, r3
 80114de:	041b      	lsls	r3, r3, #16
 80114e0:	43db      	mvns	r3, r3
 80114e2:	68f9      	ldr	r1, [r7, #12]
 80114e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80114e8:	4013      	ands	r3, r2
 80114ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114f2:	69da      	ldr	r2, [r3, #28]
 80114f4:	683b      	ldr	r3, [r7, #0]
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	f003 030f 	and.w	r3, r3, #15
 80114fc:	2101      	movs	r1, #1
 80114fe:	fa01 f303 	lsl.w	r3, r1, r3
 8011502:	041b      	lsls	r3, r3, #16
 8011504:	43db      	mvns	r3, r3
 8011506:	68f9      	ldr	r1, [r7, #12]
 8011508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801150c:	4013      	ands	r3, r2
 801150e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	015a      	lsls	r2, r3, #5
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	4413      	add	r3, r2
 8011518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801151c:	681a      	ldr	r2, [r3, #0]
 801151e:	68bb      	ldr	r3, [r7, #8]
 8011520:	0159      	lsls	r1, r3, #5
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	440b      	add	r3, r1
 8011526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801152a:	4619      	mov	r1, r3
 801152c:	4b05      	ldr	r3, [pc, #20]	; (8011544 <USB_DeactivateEndpoint+0x1b4>)
 801152e:	4013      	ands	r3, r2
 8011530:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011532:	2300      	movs	r3, #0
}
 8011534:	4618      	mov	r0, r3
 8011536:	3714      	adds	r7, #20
 8011538:	46bd      	mov	sp, r7
 801153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801153e:	4770      	bx	lr
 8011540:	ec337800 	.word	0xec337800
 8011544:	eff37800 	.word	0xeff37800

08011548 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b08a      	sub	sp, #40	; 0x28
 801154c:	af02      	add	r7, sp, #8
 801154e:	60f8      	str	r0, [r7, #12]
 8011550:	60b9      	str	r1, [r7, #8]
 8011552:	4613      	mov	r3, r2
 8011554:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	781b      	ldrb	r3, [r3, #0]
 801155e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	785b      	ldrb	r3, [r3, #1]
 8011564:	2b01      	cmp	r3, #1
 8011566:	f040 8163 	bne.w	8011830 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	695b      	ldr	r3, [r3, #20]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d132      	bne.n	80115d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011572:	69bb      	ldr	r3, [r7, #24]
 8011574:	015a      	lsls	r2, r3, #5
 8011576:	69fb      	ldr	r3, [r7, #28]
 8011578:	4413      	add	r3, r2
 801157a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801157e:	691a      	ldr	r2, [r3, #16]
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	0159      	lsls	r1, r3, #5
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	440b      	add	r3, r1
 8011588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801158c:	4619      	mov	r1, r3
 801158e:	4ba5      	ldr	r3, [pc, #660]	; (8011824 <USB_EPStartXfer+0x2dc>)
 8011590:	4013      	ands	r3, r2
 8011592:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011594:	69bb      	ldr	r3, [r7, #24]
 8011596:	015a      	lsls	r2, r3, #5
 8011598:	69fb      	ldr	r3, [r7, #28]
 801159a:	4413      	add	r3, r2
 801159c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115a0:	691b      	ldr	r3, [r3, #16]
 80115a2:	69ba      	ldr	r2, [r7, #24]
 80115a4:	0151      	lsls	r1, r2, #5
 80115a6:	69fa      	ldr	r2, [r7, #28]
 80115a8:	440a      	add	r2, r1
 80115aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80115ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80115b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80115b4:	69bb      	ldr	r3, [r7, #24]
 80115b6:	015a      	lsls	r2, r3, #5
 80115b8:	69fb      	ldr	r3, [r7, #28]
 80115ba:	4413      	add	r3, r2
 80115bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115c0:	691a      	ldr	r2, [r3, #16]
 80115c2:	69bb      	ldr	r3, [r7, #24]
 80115c4:	0159      	lsls	r1, r3, #5
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	440b      	add	r3, r1
 80115ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115ce:	4619      	mov	r1, r3
 80115d0:	4b95      	ldr	r3, [pc, #596]	; (8011828 <USB_EPStartXfer+0x2e0>)
 80115d2:	4013      	ands	r3, r2
 80115d4:	610b      	str	r3, [r1, #16]
 80115d6:	e074      	b.n	80116c2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80115d8:	69bb      	ldr	r3, [r7, #24]
 80115da:	015a      	lsls	r2, r3, #5
 80115dc:	69fb      	ldr	r3, [r7, #28]
 80115de:	4413      	add	r3, r2
 80115e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115e4:	691a      	ldr	r2, [r3, #16]
 80115e6:	69bb      	ldr	r3, [r7, #24]
 80115e8:	0159      	lsls	r1, r3, #5
 80115ea:	69fb      	ldr	r3, [r7, #28]
 80115ec:	440b      	add	r3, r1
 80115ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115f2:	4619      	mov	r1, r3
 80115f4:	4b8c      	ldr	r3, [pc, #560]	; (8011828 <USB_EPStartXfer+0x2e0>)
 80115f6:	4013      	ands	r3, r2
 80115f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80115fa:	69bb      	ldr	r3, [r7, #24]
 80115fc:	015a      	lsls	r2, r3, #5
 80115fe:	69fb      	ldr	r3, [r7, #28]
 8011600:	4413      	add	r3, r2
 8011602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011606:	691a      	ldr	r2, [r3, #16]
 8011608:	69bb      	ldr	r3, [r7, #24]
 801160a:	0159      	lsls	r1, r3, #5
 801160c:	69fb      	ldr	r3, [r7, #28]
 801160e:	440b      	add	r3, r1
 8011610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011614:	4619      	mov	r1, r3
 8011616:	4b83      	ldr	r3, [pc, #524]	; (8011824 <USB_EPStartXfer+0x2dc>)
 8011618:	4013      	ands	r3, r2
 801161a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801161c:	69bb      	ldr	r3, [r7, #24]
 801161e:	015a      	lsls	r2, r3, #5
 8011620:	69fb      	ldr	r3, [r7, #28]
 8011622:	4413      	add	r3, r2
 8011624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011628:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	6959      	ldr	r1, [r3, #20]
 801162e:	68bb      	ldr	r3, [r7, #8]
 8011630:	689b      	ldr	r3, [r3, #8]
 8011632:	440b      	add	r3, r1
 8011634:	1e59      	subs	r1, r3, #1
 8011636:	68bb      	ldr	r3, [r7, #8]
 8011638:	689b      	ldr	r3, [r3, #8]
 801163a:	fbb1 f3f3 	udiv	r3, r1, r3
 801163e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011640:	4b7a      	ldr	r3, [pc, #488]	; (801182c <USB_EPStartXfer+0x2e4>)
 8011642:	400b      	ands	r3, r1
 8011644:	69b9      	ldr	r1, [r7, #24]
 8011646:	0148      	lsls	r0, r1, #5
 8011648:	69f9      	ldr	r1, [r7, #28]
 801164a:	4401      	add	r1, r0
 801164c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011650:	4313      	orrs	r3, r2
 8011652:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011654:	69bb      	ldr	r3, [r7, #24]
 8011656:	015a      	lsls	r2, r3, #5
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	4413      	add	r3, r2
 801165c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011660:	691a      	ldr	r2, [r3, #16]
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	695b      	ldr	r3, [r3, #20]
 8011666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801166a:	69b9      	ldr	r1, [r7, #24]
 801166c:	0148      	lsls	r0, r1, #5
 801166e:	69f9      	ldr	r1, [r7, #28]
 8011670:	4401      	add	r1, r0
 8011672:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011676:	4313      	orrs	r3, r2
 8011678:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	78db      	ldrb	r3, [r3, #3]
 801167e:	2b01      	cmp	r3, #1
 8011680:	d11f      	bne.n	80116c2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	015a      	lsls	r2, r3, #5
 8011686:	69fb      	ldr	r3, [r7, #28]
 8011688:	4413      	add	r3, r2
 801168a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801168e:	691b      	ldr	r3, [r3, #16]
 8011690:	69ba      	ldr	r2, [r7, #24]
 8011692:	0151      	lsls	r1, r2, #5
 8011694:	69fa      	ldr	r2, [r7, #28]
 8011696:	440a      	add	r2, r1
 8011698:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801169c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80116a0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	015a      	lsls	r2, r3, #5
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	4413      	add	r3, r2
 80116aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116ae:	691b      	ldr	r3, [r3, #16]
 80116b0:	69ba      	ldr	r2, [r7, #24]
 80116b2:	0151      	lsls	r1, r2, #5
 80116b4:	69fa      	ldr	r2, [r7, #28]
 80116b6:	440a      	add	r2, r1
 80116b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80116bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80116c0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80116c2:	79fb      	ldrb	r3, [r7, #7]
 80116c4:	2b01      	cmp	r3, #1
 80116c6:	d14b      	bne.n	8011760 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d009      	beq.n	80116e4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80116d0:	69bb      	ldr	r3, [r7, #24]
 80116d2:	015a      	lsls	r2, r3, #5
 80116d4:	69fb      	ldr	r3, [r7, #28]
 80116d6:	4413      	add	r3, r2
 80116d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80116dc:	461a      	mov	r2, r3
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	691b      	ldr	r3, [r3, #16]
 80116e2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	78db      	ldrb	r3, [r3, #3]
 80116e8:	2b01      	cmp	r3, #1
 80116ea:	d128      	bne.n	801173e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116f2:	689b      	ldr	r3, [r3, #8]
 80116f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d110      	bne.n	801171e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80116fc:	69bb      	ldr	r3, [r7, #24]
 80116fe:	015a      	lsls	r2, r3, #5
 8011700:	69fb      	ldr	r3, [r7, #28]
 8011702:	4413      	add	r3, r2
 8011704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	69ba      	ldr	r2, [r7, #24]
 801170c:	0151      	lsls	r1, r2, #5
 801170e:	69fa      	ldr	r2, [r7, #28]
 8011710:	440a      	add	r2, r1
 8011712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011716:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801171a:	6013      	str	r3, [r2, #0]
 801171c:	e00f      	b.n	801173e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801171e:	69bb      	ldr	r3, [r7, #24]
 8011720:	015a      	lsls	r2, r3, #5
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	4413      	add	r3, r2
 8011726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	69ba      	ldr	r2, [r7, #24]
 801172e:	0151      	lsls	r1, r2, #5
 8011730:	69fa      	ldr	r2, [r7, #28]
 8011732:	440a      	add	r2, r1
 8011734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801173c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	015a      	lsls	r2, r3, #5
 8011742:	69fb      	ldr	r3, [r7, #28]
 8011744:	4413      	add	r3, r2
 8011746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	69ba      	ldr	r2, [r7, #24]
 801174e:	0151      	lsls	r1, r2, #5
 8011750:	69fa      	ldr	r2, [r7, #28]
 8011752:	440a      	add	r2, r1
 8011754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011758:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801175c:	6013      	str	r3, [r2, #0]
 801175e:	e133      	b.n	80119c8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	015a      	lsls	r2, r3, #5
 8011764:	69fb      	ldr	r3, [r7, #28]
 8011766:	4413      	add	r3, r2
 8011768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	69ba      	ldr	r2, [r7, #24]
 8011770:	0151      	lsls	r1, r2, #5
 8011772:	69fa      	ldr	r2, [r7, #28]
 8011774:	440a      	add	r2, r1
 8011776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801177a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801177e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011780:	68bb      	ldr	r3, [r7, #8]
 8011782:	78db      	ldrb	r3, [r3, #3]
 8011784:	2b01      	cmp	r3, #1
 8011786:	d015      	beq.n	80117b4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	695b      	ldr	r3, [r3, #20]
 801178c:	2b00      	cmp	r3, #0
 801178e:	f000 811b 	beq.w	80119c8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011792:	69fb      	ldr	r3, [r7, #28]
 8011794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011798:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	781b      	ldrb	r3, [r3, #0]
 801179e:	f003 030f 	and.w	r3, r3, #15
 80117a2:	2101      	movs	r1, #1
 80117a4:	fa01 f303 	lsl.w	r3, r1, r3
 80117a8:	69f9      	ldr	r1, [r7, #28]
 80117aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80117ae:	4313      	orrs	r3, r2
 80117b0:	634b      	str	r3, [r1, #52]	; 0x34
 80117b2:	e109      	b.n	80119c8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80117b4:	69fb      	ldr	r3, [r7, #28]
 80117b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80117ba:	689b      	ldr	r3, [r3, #8]
 80117bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d110      	bne.n	80117e6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80117c4:	69bb      	ldr	r3, [r7, #24]
 80117c6:	015a      	lsls	r2, r3, #5
 80117c8:	69fb      	ldr	r3, [r7, #28]
 80117ca:	4413      	add	r3, r2
 80117cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	69ba      	ldr	r2, [r7, #24]
 80117d4:	0151      	lsls	r1, r2, #5
 80117d6:	69fa      	ldr	r2, [r7, #28]
 80117d8:	440a      	add	r2, r1
 80117da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80117de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80117e2:	6013      	str	r3, [r2, #0]
 80117e4:	e00f      	b.n	8011806 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80117e6:	69bb      	ldr	r3, [r7, #24]
 80117e8:	015a      	lsls	r2, r3, #5
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	4413      	add	r3, r2
 80117ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	69ba      	ldr	r2, [r7, #24]
 80117f6:	0151      	lsls	r1, r2, #5
 80117f8:	69fa      	ldr	r2, [r7, #28]
 80117fa:	440a      	add	r2, r1
 80117fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011804:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	68d9      	ldr	r1, [r3, #12]
 801180a:	68bb      	ldr	r3, [r7, #8]
 801180c:	781a      	ldrb	r2, [r3, #0]
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	695b      	ldr	r3, [r3, #20]
 8011812:	b298      	uxth	r0, r3
 8011814:	79fb      	ldrb	r3, [r7, #7]
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	4603      	mov	r3, r0
 801181a:	68f8      	ldr	r0, [r7, #12]
 801181c:	f000 fa38 	bl	8011c90 <USB_WritePacket>
 8011820:	e0d2      	b.n	80119c8 <USB_EPStartXfer+0x480>
 8011822:	bf00      	nop
 8011824:	e007ffff 	.word	0xe007ffff
 8011828:	fff80000 	.word	0xfff80000
 801182c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011830:	69bb      	ldr	r3, [r7, #24]
 8011832:	015a      	lsls	r2, r3, #5
 8011834:	69fb      	ldr	r3, [r7, #28]
 8011836:	4413      	add	r3, r2
 8011838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801183c:	691a      	ldr	r2, [r3, #16]
 801183e:	69bb      	ldr	r3, [r7, #24]
 8011840:	0159      	lsls	r1, r3, #5
 8011842:	69fb      	ldr	r3, [r7, #28]
 8011844:	440b      	add	r3, r1
 8011846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801184a:	4619      	mov	r1, r3
 801184c:	4b61      	ldr	r3, [pc, #388]	; (80119d4 <USB_EPStartXfer+0x48c>)
 801184e:	4013      	ands	r3, r2
 8011850:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011852:	69bb      	ldr	r3, [r7, #24]
 8011854:	015a      	lsls	r2, r3, #5
 8011856:	69fb      	ldr	r3, [r7, #28]
 8011858:	4413      	add	r3, r2
 801185a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801185e:	691a      	ldr	r2, [r3, #16]
 8011860:	69bb      	ldr	r3, [r7, #24]
 8011862:	0159      	lsls	r1, r3, #5
 8011864:	69fb      	ldr	r3, [r7, #28]
 8011866:	440b      	add	r3, r1
 8011868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801186c:	4619      	mov	r1, r3
 801186e:	4b5a      	ldr	r3, [pc, #360]	; (80119d8 <USB_EPStartXfer+0x490>)
 8011870:	4013      	ands	r3, r2
 8011872:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	695b      	ldr	r3, [r3, #20]
 8011878:	2b00      	cmp	r3, #0
 801187a:	d123      	bne.n	80118c4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801187c:	69bb      	ldr	r3, [r7, #24]
 801187e:	015a      	lsls	r2, r3, #5
 8011880:	69fb      	ldr	r3, [r7, #28]
 8011882:	4413      	add	r3, r2
 8011884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011888:	691a      	ldr	r2, [r3, #16]
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	689b      	ldr	r3, [r3, #8]
 801188e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011892:	69b9      	ldr	r1, [r7, #24]
 8011894:	0148      	lsls	r0, r1, #5
 8011896:	69f9      	ldr	r1, [r7, #28]
 8011898:	4401      	add	r1, r0
 801189a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801189e:	4313      	orrs	r3, r2
 80118a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	015a      	lsls	r2, r3, #5
 80118a6:	69fb      	ldr	r3, [r7, #28]
 80118a8:	4413      	add	r3, r2
 80118aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118ae:	691b      	ldr	r3, [r3, #16]
 80118b0:	69ba      	ldr	r2, [r7, #24]
 80118b2:	0151      	lsls	r1, r2, #5
 80118b4:	69fa      	ldr	r2, [r7, #28]
 80118b6:	440a      	add	r2, r1
 80118b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80118bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80118c0:	6113      	str	r3, [r2, #16]
 80118c2:	e033      	b.n	801192c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	695a      	ldr	r2, [r3, #20]
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	689b      	ldr	r3, [r3, #8]
 80118cc:	4413      	add	r3, r2
 80118ce:	1e5a      	subs	r2, r3, #1
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	689b      	ldr	r3, [r3, #8]
 80118d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80118d8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80118da:	69bb      	ldr	r3, [r7, #24]
 80118dc:	015a      	lsls	r2, r3, #5
 80118de:	69fb      	ldr	r3, [r7, #28]
 80118e0:	4413      	add	r3, r2
 80118e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80118e6:	691a      	ldr	r2, [r3, #16]
 80118e8:	8afb      	ldrh	r3, [r7, #22]
 80118ea:	04d9      	lsls	r1, r3, #19
 80118ec:	4b3b      	ldr	r3, [pc, #236]	; (80119dc <USB_EPStartXfer+0x494>)
 80118ee:	400b      	ands	r3, r1
 80118f0:	69b9      	ldr	r1, [r7, #24]
 80118f2:	0148      	lsls	r0, r1, #5
 80118f4:	69f9      	ldr	r1, [r7, #28]
 80118f6:	4401      	add	r1, r0
 80118f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80118fc:	4313      	orrs	r3, r2
 80118fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011900:	69bb      	ldr	r3, [r7, #24]
 8011902:	015a      	lsls	r2, r3, #5
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	4413      	add	r3, r2
 8011908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801190c:	691a      	ldr	r2, [r3, #16]
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	689b      	ldr	r3, [r3, #8]
 8011912:	8af9      	ldrh	r1, [r7, #22]
 8011914:	fb01 f303 	mul.w	r3, r1, r3
 8011918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801191c:	69b9      	ldr	r1, [r7, #24]
 801191e:	0148      	lsls	r0, r1, #5
 8011920:	69f9      	ldr	r1, [r7, #28]
 8011922:	4401      	add	r1, r0
 8011924:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011928:	4313      	orrs	r3, r2
 801192a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801192c:	79fb      	ldrb	r3, [r7, #7]
 801192e:	2b01      	cmp	r3, #1
 8011930:	d10d      	bne.n	801194e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	68db      	ldr	r3, [r3, #12]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d009      	beq.n	801194e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801193a:	68bb      	ldr	r3, [r7, #8]
 801193c:	68d9      	ldr	r1, [r3, #12]
 801193e:	69bb      	ldr	r3, [r7, #24]
 8011940:	015a      	lsls	r2, r3, #5
 8011942:	69fb      	ldr	r3, [r7, #28]
 8011944:	4413      	add	r3, r2
 8011946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801194a:	460a      	mov	r2, r1
 801194c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	78db      	ldrb	r3, [r3, #3]
 8011952:	2b01      	cmp	r3, #1
 8011954:	d128      	bne.n	80119a8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011956:	69fb      	ldr	r3, [r7, #28]
 8011958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801195c:	689b      	ldr	r3, [r3, #8]
 801195e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011962:	2b00      	cmp	r3, #0
 8011964:	d110      	bne.n	8011988 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011966:	69bb      	ldr	r3, [r7, #24]
 8011968:	015a      	lsls	r2, r3, #5
 801196a:	69fb      	ldr	r3, [r7, #28]
 801196c:	4413      	add	r3, r2
 801196e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	69ba      	ldr	r2, [r7, #24]
 8011976:	0151      	lsls	r1, r2, #5
 8011978:	69fa      	ldr	r2, [r7, #28]
 801197a:	440a      	add	r2, r1
 801197c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011980:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011984:	6013      	str	r3, [r2, #0]
 8011986:	e00f      	b.n	80119a8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011988:	69bb      	ldr	r3, [r7, #24]
 801198a:	015a      	lsls	r2, r3, #5
 801198c:	69fb      	ldr	r3, [r7, #28]
 801198e:	4413      	add	r3, r2
 8011990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	69ba      	ldr	r2, [r7, #24]
 8011998:	0151      	lsls	r1, r2, #5
 801199a:	69fa      	ldr	r2, [r7, #28]
 801199c:	440a      	add	r2, r1
 801199e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80119a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80119a8:	69bb      	ldr	r3, [r7, #24]
 80119aa:	015a      	lsls	r2, r3, #5
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	4413      	add	r3, r2
 80119b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	69ba      	ldr	r2, [r7, #24]
 80119b8:	0151      	lsls	r1, r2, #5
 80119ba:	69fa      	ldr	r2, [r7, #28]
 80119bc:	440a      	add	r2, r1
 80119be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80119c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80119c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80119c8:	2300      	movs	r3, #0
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3720      	adds	r7, #32
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	fff80000 	.word	0xfff80000
 80119d8:	e007ffff 	.word	0xe007ffff
 80119dc:	1ff80000 	.word	0x1ff80000

080119e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b087      	sub	sp, #28
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	60b9      	str	r1, [r7, #8]
 80119ea:	4613      	mov	r3, r2
 80119ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	785b      	ldrb	r3, [r3, #1]
 80119fc:	2b01      	cmp	r3, #1
 80119fe:	f040 80cd 	bne.w	8011b9c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	695b      	ldr	r3, [r3, #20]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d132      	bne.n	8011a70 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011a0a:	693b      	ldr	r3, [r7, #16]
 8011a0c:	015a      	lsls	r2, r3, #5
 8011a0e:	697b      	ldr	r3, [r7, #20]
 8011a10:	4413      	add	r3, r2
 8011a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a16:	691a      	ldr	r2, [r3, #16]
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	0159      	lsls	r1, r3, #5
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	440b      	add	r3, r1
 8011a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a24:	4619      	mov	r1, r3
 8011a26:	4b98      	ldr	r3, [pc, #608]	; (8011c88 <USB_EP0StartXfer+0x2a8>)
 8011a28:	4013      	ands	r3, r2
 8011a2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011a2c:	693b      	ldr	r3, [r7, #16]
 8011a2e:	015a      	lsls	r2, r3, #5
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	4413      	add	r3, r2
 8011a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a38:	691b      	ldr	r3, [r3, #16]
 8011a3a:	693a      	ldr	r2, [r7, #16]
 8011a3c:	0151      	lsls	r1, r2, #5
 8011a3e:	697a      	ldr	r2, [r7, #20]
 8011a40:	440a      	add	r2, r1
 8011a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011a46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011a4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	015a      	lsls	r2, r3, #5
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	4413      	add	r3, r2
 8011a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a58:	691a      	ldr	r2, [r3, #16]
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	0159      	lsls	r1, r3, #5
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	440b      	add	r3, r1
 8011a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a66:	4619      	mov	r1, r3
 8011a68:	4b88      	ldr	r3, [pc, #544]	; (8011c8c <USB_EP0StartXfer+0x2ac>)
 8011a6a:	4013      	ands	r3, r2
 8011a6c:	610b      	str	r3, [r1, #16]
 8011a6e:	e04e      	b.n	8011b0e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	015a      	lsls	r2, r3, #5
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	4413      	add	r3, r2
 8011a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a7c:	691a      	ldr	r2, [r3, #16]
 8011a7e:	693b      	ldr	r3, [r7, #16]
 8011a80:	0159      	lsls	r1, r3, #5
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	440b      	add	r3, r1
 8011a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a8a:	4619      	mov	r1, r3
 8011a8c:	4b7f      	ldr	r3, [pc, #508]	; (8011c8c <USB_EP0StartXfer+0x2ac>)
 8011a8e:	4013      	ands	r3, r2
 8011a90:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	015a      	lsls	r2, r3, #5
 8011a96:	697b      	ldr	r3, [r7, #20]
 8011a98:	4413      	add	r3, r2
 8011a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a9e:	691a      	ldr	r2, [r3, #16]
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	0159      	lsls	r1, r3, #5
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	440b      	add	r3, r1
 8011aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011aac:	4619      	mov	r1, r3
 8011aae:	4b76      	ldr	r3, [pc, #472]	; (8011c88 <USB_EP0StartXfer+0x2a8>)
 8011ab0:	4013      	ands	r3, r2
 8011ab2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8011ab4:	68bb      	ldr	r3, [r7, #8]
 8011ab6:	695a      	ldr	r2, [r3, #20]
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	689b      	ldr	r3, [r3, #8]
 8011abc:	429a      	cmp	r2, r3
 8011abe:	d903      	bls.n	8011ac8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8011ac0:	68bb      	ldr	r3, [r7, #8]
 8011ac2:	689a      	ldr	r2, [r3, #8]
 8011ac4:	68bb      	ldr	r3, [r7, #8]
 8011ac6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011ac8:	693b      	ldr	r3, [r7, #16]
 8011aca:	015a      	lsls	r2, r3, #5
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	4413      	add	r3, r2
 8011ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ad4:	691b      	ldr	r3, [r3, #16]
 8011ad6:	693a      	ldr	r2, [r7, #16]
 8011ad8:	0151      	lsls	r1, r2, #5
 8011ada:	697a      	ldr	r2, [r7, #20]
 8011adc:	440a      	add	r2, r1
 8011ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ae2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011ae6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	015a      	lsls	r2, r3, #5
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	4413      	add	r3, r2
 8011af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011af4:	691a      	ldr	r2, [r3, #16]
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	695b      	ldr	r3, [r3, #20]
 8011afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011afe:	6939      	ldr	r1, [r7, #16]
 8011b00:	0148      	lsls	r0, r1, #5
 8011b02:	6979      	ldr	r1, [r7, #20]
 8011b04:	4401      	add	r1, r0
 8011b06:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011b0a:	4313      	orrs	r3, r2
 8011b0c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011b0e:	79fb      	ldrb	r3, [r7, #7]
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	d11e      	bne.n	8011b52 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011b14:	68bb      	ldr	r3, [r7, #8]
 8011b16:	691b      	ldr	r3, [r3, #16]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d009      	beq.n	8011b30 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	015a      	lsls	r2, r3, #5
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	4413      	add	r3, r2
 8011b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b28:	461a      	mov	r2, r3
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	691b      	ldr	r3, [r3, #16]
 8011b2e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	015a      	lsls	r2, r3, #5
 8011b34:	697b      	ldr	r3, [r7, #20]
 8011b36:	4413      	add	r3, r2
 8011b38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	693a      	ldr	r2, [r7, #16]
 8011b40:	0151      	lsls	r1, r2, #5
 8011b42:	697a      	ldr	r2, [r7, #20]
 8011b44:	440a      	add	r2, r1
 8011b46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011b4e:	6013      	str	r3, [r2, #0]
 8011b50:	e092      	b.n	8011c78 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011b52:	693b      	ldr	r3, [r7, #16]
 8011b54:	015a      	lsls	r2, r3, #5
 8011b56:	697b      	ldr	r3, [r7, #20]
 8011b58:	4413      	add	r3, r2
 8011b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b5e:	681b      	ldr	r3, [r3, #0]
 8011b60:	693a      	ldr	r2, [r7, #16]
 8011b62:	0151      	lsls	r1, r2, #5
 8011b64:	697a      	ldr	r2, [r7, #20]
 8011b66:	440a      	add	r2, r1
 8011b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b6c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011b70:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	695b      	ldr	r3, [r3, #20]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d07e      	beq.n	8011c78 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011b7a:	697b      	ldr	r3, [r7, #20]
 8011b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b82:	68bb      	ldr	r3, [r7, #8]
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	f003 030f 	and.w	r3, r3, #15
 8011b8a:	2101      	movs	r1, #1
 8011b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8011b90:	6979      	ldr	r1, [r7, #20]
 8011b92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011b96:	4313      	orrs	r3, r2
 8011b98:	634b      	str	r3, [r1, #52]	; 0x34
 8011b9a:	e06d      	b.n	8011c78 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	015a      	lsls	r2, r3, #5
 8011ba0:	697b      	ldr	r3, [r7, #20]
 8011ba2:	4413      	add	r3, r2
 8011ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ba8:	691a      	ldr	r2, [r3, #16]
 8011baa:	693b      	ldr	r3, [r7, #16]
 8011bac:	0159      	lsls	r1, r3, #5
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	440b      	add	r3, r1
 8011bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	4b34      	ldr	r3, [pc, #208]	; (8011c8c <USB_EP0StartXfer+0x2ac>)
 8011bba:	4013      	ands	r3, r2
 8011bbc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	015a      	lsls	r2, r3, #5
 8011bc2:	697b      	ldr	r3, [r7, #20]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bca:	691a      	ldr	r2, [r3, #16]
 8011bcc:	693b      	ldr	r3, [r7, #16]
 8011bce:	0159      	lsls	r1, r3, #5
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	440b      	add	r3, r1
 8011bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bd8:	4619      	mov	r1, r3
 8011bda:	4b2b      	ldr	r3, [pc, #172]	; (8011c88 <USB_EP0StartXfer+0x2a8>)
 8011bdc:	4013      	ands	r3, r2
 8011bde:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8011be0:	68bb      	ldr	r3, [r7, #8]
 8011be2:	695b      	ldr	r3, [r3, #20]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d003      	beq.n	8011bf0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	689a      	ldr	r2, [r3, #8]
 8011bec:	68bb      	ldr	r3, [r7, #8]
 8011bee:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	015a      	lsls	r2, r3, #5
 8011bf4:	697b      	ldr	r3, [r7, #20]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011bfc:	691b      	ldr	r3, [r3, #16]
 8011bfe:	693a      	ldr	r2, [r7, #16]
 8011c00:	0151      	lsls	r1, r2, #5
 8011c02:	697a      	ldr	r2, [r7, #20]
 8011c04:	440a      	add	r2, r1
 8011c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011c0e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	015a      	lsls	r2, r3, #5
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	4413      	add	r3, r2
 8011c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c1c:	691a      	ldr	r2, [r3, #16]
 8011c1e:	68bb      	ldr	r3, [r7, #8]
 8011c20:	689b      	ldr	r3, [r3, #8]
 8011c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011c26:	6939      	ldr	r1, [r7, #16]
 8011c28:	0148      	lsls	r0, r1, #5
 8011c2a:	6979      	ldr	r1, [r7, #20]
 8011c2c:	4401      	add	r1, r0
 8011c2e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8011c32:	4313      	orrs	r3, r2
 8011c34:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8011c36:	79fb      	ldrb	r3, [r7, #7]
 8011c38:	2b01      	cmp	r3, #1
 8011c3a:	d10d      	bne.n	8011c58 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	68db      	ldr	r3, [r3, #12]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d009      	beq.n	8011c58 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	68d9      	ldr	r1, [r3, #12]
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	015a      	lsls	r2, r3, #5
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	4413      	add	r3, r2
 8011c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c54:	460a      	mov	r2, r1
 8011c56:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	015a      	lsls	r2, r3, #5
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	4413      	add	r3, r2
 8011c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	693a      	ldr	r2, [r7, #16]
 8011c68:	0151      	lsls	r1, r2, #5
 8011c6a:	697a      	ldr	r2, [r7, #20]
 8011c6c:	440a      	add	r2, r1
 8011c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011c76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011c78:	2300      	movs	r3, #0
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	371c      	adds	r7, #28
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop
 8011c88:	e007ffff 	.word	0xe007ffff
 8011c8c:	fff80000 	.word	0xfff80000

08011c90 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011c90:	b480      	push	{r7}
 8011c92:	b089      	sub	sp, #36	; 0x24
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	60f8      	str	r0, [r7, #12]
 8011c98:	60b9      	str	r1, [r7, #8]
 8011c9a:	4611      	mov	r1, r2
 8011c9c:	461a      	mov	r2, r3
 8011c9e:	460b      	mov	r3, r1
 8011ca0:	71fb      	strb	r3, [r7, #7]
 8011ca2:	4613      	mov	r3, r2
 8011ca4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011cae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d123      	bne.n	8011cfe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011cb6:	88bb      	ldrh	r3, [r7, #4]
 8011cb8:	3303      	adds	r3, #3
 8011cba:	089b      	lsrs	r3, r3, #2
 8011cbc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	61bb      	str	r3, [r7, #24]
 8011cc2:	e018      	b.n	8011cf6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011cc4:	79fb      	ldrb	r3, [r7, #7]
 8011cc6:	031a      	lsls	r2, r3, #12
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	4413      	add	r3, r2
 8011ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	69fb      	ldr	r3, [r7, #28]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011cd8:	69fb      	ldr	r3, [r7, #28]
 8011cda:	3301      	adds	r3, #1
 8011cdc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011cde:	69fb      	ldr	r3, [r7, #28]
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011cea:	69fb      	ldr	r3, [r7, #28]
 8011cec:	3301      	adds	r3, #1
 8011cee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011cf0:	69bb      	ldr	r3, [r7, #24]
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	61bb      	str	r3, [r7, #24]
 8011cf6:	69ba      	ldr	r2, [r7, #24]
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d3e2      	bcc.n	8011cc4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011cfe:	2300      	movs	r3, #0
}
 8011d00:	4618      	mov	r0, r3
 8011d02:	3724      	adds	r7, #36	; 0x24
 8011d04:	46bd      	mov	sp, r7
 8011d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0a:	4770      	bx	lr

08011d0c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b08b      	sub	sp, #44	; 0x2c
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	60f8      	str	r0, [r7, #12]
 8011d14:	60b9      	str	r1, [r7, #8]
 8011d16:	4613      	mov	r3, r2
 8011d18:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8011d1e:	68bb      	ldr	r3, [r7, #8]
 8011d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8011d22:	88fb      	ldrh	r3, [r7, #6]
 8011d24:	089b      	lsrs	r3, r3, #2
 8011d26:	b29b      	uxth	r3, r3
 8011d28:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011d2a:	88fb      	ldrh	r3, [r7, #6]
 8011d2c:	f003 0303 	and.w	r3, r3, #3
 8011d30:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8011d32:	2300      	movs	r3, #0
 8011d34:	623b      	str	r3, [r7, #32]
 8011d36:	e014      	b.n	8011d62 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d3e:	681a      	ldr	r2, [r3, #0]
 8011d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d42:	601a      	str	r2, [r3, #0]
    pDest++;
 8011d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d46:	3301      	adds	r3, #1
 8011d48:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d52:	3301      	adds	r3, #1
 8011d54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d58:	3301      	adds	r3, #1
 8011d5a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011d5c:	6a3b      	ldr	r3, [r7, #32]
 8011d5e:	3301      	adds	r3, #1
 8011d60:	623b      	str	r3, [r7, #32]
 8011d62:	6a3a      	ldr	r2, [r7, #32]
 8011d64:	697b      	ldr	r3, [r7, #20]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	d3e6      	bcc.n	8011d38 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011d6a:	8bfb      	ldrh	r3, [r7, #30]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d01e      	beq.n	8011dae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011d70:	2300      	movs	r3, #0
 8011d72:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011d74:	69bb      	ldr	r3, [r7, #24]
 8011d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	f107 0310 	add.w	r3, r7, #16
 8011d80:	6812      	ldr	r2, [r2, #0]
 8011d82:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011d84:	693a      	ldr	r2, [r7, #16]
 8011d86:	6a3b      	ldr	r3, [r7, #32]
 8011d88:	b2db      	uxtb	r3, r3
 8011d8a:	00db      	lsls	r3, r3, #3
 8011d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8011d90:	b2da      	uxtb	r2, r3
 8011d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d94:	701a      	strb	r2, [r3, #0]
      i++;
 8011d96:	6a3b      	ldr	r3, [r7, #32]
 8011d98:	3301      	adds	r3, #1
 8011d9a:	623b      	str	r3, [r7, #32]
      pDest++;
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d9e:	3301      	adds	r3, #1
 8011da0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8011da2:	8bfb      	ldrh	r3, [r7, #30]
 8011da4:	3b01      	subs	r3, #1
 8011da6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011da8:	8bfb      	ldrh	r3, [r7, #30]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d1ea      	bne.n	8011d84 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	372c      	adds	r7, #44	; 0x2c
 8011db4:	46bd      	mov	sp, r7
 8011db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dba:	4770      	bx	lr

08011dbc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011dbc:	b480      	push	{r7}
 8011dbe:	b085      	sub	sp, #20
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
 8011dc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	785b      	ldrb	r3, [r3, #1]
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d12c      	bne.n	8011e32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	015a      	lsls	r2, r3, #5
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	4413      	add	r3, r2
 8011de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	db12      	blt.n	8011e10 <USB_EPSetStall+0x54>
 8011dea:	68bb      	ldr	r3, [r7, #8]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d00f      	beq.n	8011e10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	015a      	lsls	r2, r3, #5
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	4413      	add	r3, r2
 8011df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	68ba      	ldr	r2, [r7, #8]
 8011e00:	0151      	lsls	r1, r2, #5
 8011e02:	68fa      	ldr	r2, [r7, #12]
 8011e04:	440a      	add	r2, r1
 8011e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011e0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	015a      	lsls	r2, r3, #5
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	4413      	add	r3, r2
 8011e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	68ba      	ldr	r2, [r7, #8]
 8011e20:	0151      	lsls	r1, r2, #5
 8011e22:	68fa      	ldr	r2, [r7, #12]
 8011e24:	440a      	add	r2, r1
 8011e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011e2e:	6013      	str	r3, [r2, #0]
 8011e30:	e02b      	b.n	8011e8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	015a      	lsls	r2, r3, #5
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	4413      	add	r3, r2
 8011e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	db12      	blt.n	8011e6a <USB_EPSetStall+0xae>
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d00f      	beq.n	8011e6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	015a      	lsls	r2, r3, #5
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	4413      	add	r3, r2
 8011e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	68ba      	ldr	r2, [r7, #8]
 8011e5a:	0151      	lsls	r1, r2, #5
 8011e5c:	68fa      	ldr	r2, [r7, #12]
 8011e5e:	440a      	add	r2, r1
 8011e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011e68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011e6a:	68bb      	ldr	r3, [r7, #8]
 8011e6c:	015a      	lsls	r2, r3, #5
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	4413      	add	r3, r2
 8011e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	68ba      	ldr	r2, [r7, #8]
 8011e7a:	0151      	lsls	r1, r2, #5
 8011e7c:	68fa      	ldr	r2, [r7, #12]
 8011e7e:	440a      	add	r2, r1
 8011e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011e84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011e88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011e8a:	2300      	movs	r3, #0
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3714      	adds	r7, #20
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b085      	sub	sp, #20
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	785b      	ldrb	r3, [r3, #1]
 8011eb0:	2b01      	cmp	r3, #1
 8011eb2:	d128      	bne.n	8011f06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	015a      	lsls	r2, r3, #5
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	4413      	add	r3, r2
 8011ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	68ba      	ldr	r2, [r7, #8]
 8011ec4:	0151      	lsls	r1, r2, #5
 8011ec6:	68fa      	ldr	r2, [r7, #12]
 8011ec8:	440a      	add	r2, r1
 8011eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011ed2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	78db      	ldrb	r3, [r3, #3]
 8011ed8:	2b03      	cmp	r3, #3
 8011eda:	d003      	beq.n	8011ee4 <USB_EPClearStall+0x4c>
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	78db      	ldrb	r3, [r3, #3]
 8011ee0:	2b02      	cmp	r3, #2
 8011ee2:	d138      	bne.n	8011f56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	015a      	lsls	r2, r3, #5
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	4413      	add	r3, r2
 8011eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	68ba      	ldr	r2, [r7, #8]
 8011ef4:	0151      	lsls	r1, r2, #5
 8011ef6:	68fa      	ldr	r2, [r7, #12]
 8011ef8:	440a      	add	r2, r1
 8011efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f02:	6013      	str	r3, [r2, #0]
 8011f04:	e027      	b.n	8011f56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	015a      	lsls	r2, r3, #5
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	4413      	add	r3, r2
 8011f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	68ba      	ldr	r2, [r7, #8]
 8011f16:	0151      	lsls	r1, r2, #5
 8011f18:	68fa      	ldr	r2, [r7, #12]
 8011f1a:	440a      	add	r2, r1
 8011f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011f24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	78db      	ldrb	r3, [r3, #3]
 8011f2a:	2b03      	cmp	r3, #3
 8011f2c:	d003      	beq.n	8011f36 <USB_EPClearStall+0x9e>
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	78db      	ldrb	r3, [r3, #3]
 8011f32:	2b02      	cmp	r3, #2
 8011f34:	d10f      	bne.n	8011f56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	015a      	lsls	r2, r3, #5
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	4413      	add	r3, r2
 8011f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	68ba      	ldr	r2, [r7, #8]
 8011f46:	0151      	lsls	r1, r2, #5
 8011f48:	68fa      	ldr	r2, [r7, #12]
 8011f4a:	440a      	add	r2, r1
 8011f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011f56:	2300      	movs	r3, #0
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3714      	adds	r7, #20
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f62:	4770      	bx	lr

08011f64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011f64:	b480      	push	{r7}
 8011f66:	b085      	sub	sp, #20
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
 8011f6c:	460b      	mov	r3, r1
 8011f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	68fa      	ldr	r2, [r7, #12]
 8011f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011f86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f8e:	681a      	ldr	r2, [r3, #0]
 8011f90:	78fb      	ldrb	r3, [r7, #3]
 8011f92:	011b      	lsls	r3, r3, #4
 8011f94:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011f98:	68f9      	ldr	r1, [r7, #12]
 8011f9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011f9e:	4313      	orrs	r3, r2
 8011fa0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011fa2:	2300      	movs	r3, #0
}
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	3714      	adds	r7, #20
 8011fa8:	46bd      	mov	sp, r7
 8011faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fae:	4770      	bx	lr

08011fb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011fb0:	b480      	push	{r7}
 8011fb2:	b085      	sub	sp, #20
 8011fb4:	af00      	add	r7, sp, #0
 8011fb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	68fa      	ldr	r2, [r7, #12]
 8011fc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011fca:	f023 0303 	bic.w	r3, r3, #3
 8011fce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fd6:	685b      	ldr	r3, [r3, #4]
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011fde:	f023 0302 	bic.w	r3, r3, #2
 8011fe2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011fe4:	2300      	movs	r3, #0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3714      	adds	r7, #20
 8011fea:	46bd      	mov	sp, r7
 8011fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff0:	4770      	bx	lr

08011ff2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011ff2:	b480      	push	{r7}
 8011ff4:	b085      	sub	sp, #20
 8011ff6:	af00      	add	r7, sp, #0
 8011ff8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	68fa      	ldr	r2, [r7, #12]
 8012008:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801200c:	f023 0303 	bic.w	r3, r3, #3
 8012010:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012018:	685b      	ldr	r3, [r3, #4]
 801201a:	68fa      	ldr	r2, [r7, #12]
 801201c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012020:	f043 0302 	orr.w	r3, r3, #2
 8012024:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012026:	2300      	movs	r3, #0
}
 8012028:	4618      	mov	r0, r3
 801202a:	3714      	adds	r7, #20
 801202c:	46bd      	mov	sp, r7
 801202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012032:	4770      	bx	lr

08012034 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012034:	b480      	push	{r7}
 8012036:	b085      	sub	sp, #20
 8012038:	af00      	add	r7, sp, #0
 801203a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	695b      	ldr	r3, [r3, #20]
 8012040:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	699b      	ldr	r3, [r3, #24]
 8012046:	68fa      	ldr	r2, [r7, #12]
 8012048:	4013      	ands	r3, r2
 801204a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801204c:	68fb      	ldr	r3, [r7, #12]
}
 801204e:	4618      	mov	r0, r3
 8012050:	3714      	adds	r7, #20
 8012052:	46bd      	mov	sp, r7
 8012054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012058:	4770      	bx	lr

0801205a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801205a:	b480      	push	{r7}
 801205c:	b085      	sub	sp, #20
 801205e:	af00      	add	r7, sp, #0
 8012060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801206c:	699b      	ldr	r3, [r3, #24]
 801206e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012076:	69db      	ldr	r3, [r3, #28]
 8012078:	68ba      	ldr	r2, [r7, #8]
 801207a:	4013      	ands	r3, r2
 801207c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801207e:	68bb      	ldr	r3, [r7, #8]
 8012080:	0c1b      	lsrs	r3, r3, #16
}
 8012082:	4618      	mov	r0, r3
 8012084:	3714      	adds	r7, #20
 8012086:	46bd      	mov	sp, r7
 8012088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801208c:	4770      	bx	lr

0801208e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801208e:	b480      	push	{r7}
 8012090:	b085      	sub	sp, #20
 8012092:	af00      	add	r7, sp, #0
 8012094:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120a0:	699b      	ldr	r3, [r3, #24]
 80120a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120aa:	69db      	ldr	r3, [r3, #28]
 80120ac:	68ba      	ldr	r2, [r7, #8]
 80120ae:	4013      	ands	r3, r2
 80120b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80120b2:	68bb      	ldr	r3, [r7, #8]
 80120b4:	b29b      	uxth	r3, r3
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3714      	adds	r7, #20
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr

080120c2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80120c2:	b480      	push	{r7}
 80120c4:	b085      	sub	sp, #20
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
 80120ca:	460b      	mov	r3, r1
 80120cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80120d2:	78fb      	ldrb	r3, [r7, #3]
 80120d4:	015a      	lsls	r2, r3, #5
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	4413      	add	r3, r2
 80120da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120de:	689b      	ldr	r3, [r3, #8]
 80120e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80120e8:	695b      	ldr	r3, [r3, #20]
 80120ea:	68ba      	ldr	r2, [r7, #8]
 80120ec:	4013      	ands	r3, r2
 80120ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80120f0:	68bb      	ldr	r3, [r7, #8]
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	3714      	adds	r7, #20
 80120f6:	46bd      	mov	sp, r7
 80120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fc:	4770      	bx	lr

080120fe <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80120fe:	b480      	push	{r7}
 8012100:	b087      	sub	sp, #28
 8012102:	af00      	add	r7, sp, #0
 8012104:	6078      	str	r0, [r7, #4]
 8012106:	460b      	mov	r3, r1
 8012108:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012114:	691b      	ldr	r3, [r3, #16]
 8012116:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801211e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012120:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012122:	78fb      	ldrb	r3, [r7, #3]
 8012124:	f003 030f 	and.w	r3, r3, #15
 8012128:	68fa      	ldr	r2, [r7, #12]
 801212a:	fa22 f303 	lsr.w	r3, r2, r3
 801212e:	01db      	lsls	r3, r3, #7
 8012130:	b2db      	uxtb	r3, r3
 8012132:	693a      	ldr	r2, [r7, #16]
 8012134:	4313      	orrs	r3, r2
 8012136:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012138:	78fb      	ldrb	r3, [r7, #3]
 801213a:	015a      	lsls	r2, r3, #5
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	4413      	add	r3, r2
 8012140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012144:	689b      	ldr	r3, [r3, #8]
 8012146:	693a      	ldr	r2, [r7, #16]
 8012148:	4013      	ands	r3, r2
 801214a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801214c:	68bb      	ldr	r3, [r7, #8]
}
 801214e:	4618      	mov	r0, r3
 8012150:	371c      	adds	r7, #28
 8012152:	46bd      	mov	sp, r7
 8012154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012158:	4770      	bx	lr

0801215a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801215a:	b480      	push	{r7}
 801215c:	b083      	sub	sp, #12
 801215e:	af00      	add	r7, sp, #0
 8012160:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	695b      	ldr	r3, [r3, #20]
 8012166:	f003 0301 	and.w	r3, r3, #1
}
 801216a:	4618      	mov	r0, r3
 801216c:	370c      	adds	r7, #12
 801216e:	46bd      	mov	sp, r7
 8012170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012174:	4770      	bx	lr
	...

08012178 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012178:	b480      	push	{r7}
 801217a:	b085      	sub	sp, #20
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801218a:	681a      	ldr	r2, [r3, #0]
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012192:	4619      	mov	r1, r3
 8012194:	4b09      	ldr	r3, [pc, #36]	; (80121bc <USB_ActivateSetup+0x44>)
 8012196:	4013      	ands	r3, r2
 8012198:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	68fa      	ldr	r2, [r7, #12]
 80121a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80121a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80121ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80121ae:	2300      	movs	r3, #0
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	3714      	adds	r7, #20
 80121b4:	46bd      	mov	sp, r7
 80121b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ba:	4770      	bx	lr
 80121bc:	fffff800 	.word	0xfffff800

080121c0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80121c0:	b480      	push	{r7}
 80121c2:	b087      	sub	sp, #28
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	60f8      	str	r0, [r7, #12]
 80121c8:	460b      	mov	r3, r1
 80121ca:	607a      	str	r2, [r7, #4]
 80121cc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	333c      	adds	r3, #60	; 0x3c
 80121d6:	3304      	adds	r3, #4
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	4a26      	ldr	r2, [pc, #152]	; (8012278 <USB_EP0_OutStart+0xb8>)
 80121e0:	4293      	cmp	r3, r2
 80121e2:	d90a      	bls.n	80121fa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80121e4:	697b      	ldr	r3, [r7, #20]
 80121e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80121f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80121f4:	d101      	bne.n	80121fa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80121f6:	2300      	movs	r3, #0
 80121f8:	e037      	b.n	801226a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012200:	461a      	mov	r2, r3
 8012202:	2300      	movs	r3, #0
 8012204:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012206:	697b      	ldr	r3, [r7, #20]
 8012208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801220c:	691b      	ldr	r3, [r3, #16]
 801220e:	697a      	ldr	r2, [r7, #20]
 8012210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012214:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012218:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012220:	691b      	ldr	r3, [r3, #16]
 8012222:	697a      	ldr	r2, [r7, #20]
 8012224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012228:	f043 0318 	orr.w	r3, r3, #24
 801222c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801222e:	697b      	ldr	r3, [r7, #20]
 8012230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012234:	691b      	ldr	r3, [r3, #16]
 8012236:	697a      	ldr	r2, [r7, #20]
 8012238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801223c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012240:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012242:	7afb      	ldrb	r3, [r7, #11]
 8012244:	2b01      	cmp	r3, #1
 8012246:	d10f      	bne.n	8012268 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801224e:	461a      	mov	r2, r3
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012254:	697b      	ldr	r3, [r7, #20]
 8012256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	697a      	ldr	r2, [r7, #20]
 801225e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012262:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012268:	2300      	movs	r3, #0
}
 801226a:	4618      	mov	r0, r3
 801226c:	371c      	adds	r7, #28
 801226e:	46bd      	mov	sp, r7
 8012270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012274:	4770      	bx	lr
 8012276:	bf00      	nop
 8012278:	4f54300a 	.word	0x4f54300a

0801227c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801227c:	b480      	push	{r7}
 801227e:	b085      	sub	sp, #20
 8012280:	af00      	add	r7, sp, #0
 8012282:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012284:	2300      	movs	r3, #0
 8012286:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	3301      	adds	r3, #1
 801228c:	60fb      	str	r3, [r7, #12]
 801228e:	4a13      	ldr	r2, [pc, #76]	; (80122dc <USB_CoreReset+0x60>)
 8012290:	4293      	cmp	r3, r2
 8012292:	d901      	bls.n	8012298 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8012294:	2303      	movs	r3, #3
 8012296:	e01a      	b.n	80122ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	691b      	ldr	r3, [r3, #16]
 801229c:	2b00      	cmp	r3, #0
 801229e:	daf3      	bge.n	8012288 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80122a0:	2300      	movs	r3, #0
 80122a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	691b      	ldr	r3, [r3, #16]
 80122a8:	f043 0201 	orr.w	r2, r3, #1
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	3301      	adds	r3, #1
 80122b4:	60fb      	str	r3, [r7, #12]
 80122b6:	4a09      	ldr	r2, [pc, #36]	; (80122dc <USB_CoreReset+0x60>)
 80122b8:	4293      	cmp	r3, r2
 80122ba:	d901      	bls.n	80122c0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80122bc:	2303      	movs	r3, #3
 80122be:	e006      	b.n	80122ce <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	691b      	ldr	r3, [r3, #16]
 80122c4:	f003 0301 	and.w	r3, r3, #1
 80122c8:	2b01      	cmp	r3, #1
 80122ca:	d0f1      	beq.n	80122b0 <USB_CoreReset+0x34>

  return HAL_OK;
 80122cc:	2300      	movs	r3, #0
}
 80122ce:	4618      	mov	r0, r3
 80122d0:	3714      	adds	r7, #20
 80122d2:	46bd      	mov	sp, r7
 80122d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d8:	4770      	bx	lr
 80122da:	bf00      	nop
 80122dc:	00030d40 	.word	0x00030d40

080122e0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
 80122e8:	460b      	mov	r3, r1
 80122ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80122ec:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80122f0:	f002 f900 	bl	80144f4 <USBD_static_malloc>
 80122f4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d105      	bne.n	8012308 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2200      	movs	r2, #0
 8012300:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012304:	2302      	movs	r3, #2
 8012306:	e066      	b.n	80123d6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	68fa      	ldr	r2, [r7, #12]
 801230c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	7c1b      	ldrb	r3, [r3, #16]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d119      	bne.n	801234c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012318:	f44f 7300 	mov.w	r3, #512	; 0x200
 801231c:	2202      	movs	r2, #2
 801231e:	2181      	movs	r1, #129	; 0x81
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f001 ffc4 	bl	80142ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	2201      	movs	r2, #1
 801232a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801232c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012330:	2202      	movs	r2, #2
 8012332:	2101      	movs	r1, #1
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f001 ffba 	bl	80142ae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	2201      	movs	r2, #1
 801233e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2210      	movs	r2, #16
 8012346:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 801234a:	e016      	b.n	801237a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801234c:	2340      	movs	r3, #64	; 0x40
 801234e:	2202      	movs	r2, #2
 8012350:	2181      	movs	r1, #129	; 0x81
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f001 ffab 	bl	80142ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2201      	movs	r2, #1
 801235c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801235e:	2340      	movs	r3, #64	; 0x40
 8012360:	2202      	movs	r2, #2
 8012362:	2101      	movs	r1, #1
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f001 ffa2 	bl	80142ae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	2201      	movs	r2, #1
 801236e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2210      	movs	r2, #16
 8012376:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801237a:	2308      	movs	r3, #8
 801237c:	2203      	movs	r2, #3
 801237e:	2182      	movs	r1, #130	; 0x82
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f001 ff94 	bl	80142ae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2201      	movs	r2, #1
 801238a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2200      	movs	r2, #0
 801239c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	2200      	movs	r2, #0
 80123a4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	7c1b      	ldrb	r3, [r3, #16]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d109      	bne.n	80123c4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80123b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80123ba:	2101      	movs	r1, #1
 80123bc:	6878      	ldr	r0, [r7, #4]
 80123be:	f002 f865 	bl	801448c <USBD_LL_PrepareReceive>
 80123c2:	e007      	b.n	80123d4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80123ca:	2340      	movs	r3, #64	; 0x40
 80123cc:	2101      	movs	r1, #1
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f002 f85c 	bl	801448c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80123d4:	2300      	movs	r3, #0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3710      	adds	r7, #16
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}

080123de <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b082      	sub	sp, #8
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
 80123e6:	460b      	mov	r3, r1
 80123e8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80123ea:	2181      	movs	r1, #129	; 0x81
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f001 ff84 	bl	80142fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2200      	movs	r2, #0
 80123f6:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80123f8:	2101      	movs	r1, #1
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f001 ff7d 	bl	80142fa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	2200      	movs	r2, #0
 8012404:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012408:	2182      	movs	r1, #130	; 0x82
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f001 ff75 	bl	80142fa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	2200      	movs	r2, #0
 8012414:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	2200      	movs	r2, #0
 801241c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012426:	2b00      	cmp	r3, #0
 8012428:	d00e      	beq.n	8012448 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012430:	685b      	ldr	r3, [r3, #4]
 8012432:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801243a:	4618      	mov	r0, r3
 801243c:	f002 f868 	bl	8014510 <USBD_static_free>
    pdev->pClassData = NULL;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2200      	movs	r2, #0
 8012444:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012448:	2300      	movs	r3, #0
}
 801244a:	4618      	mov	r0, r3
 801244c:	3708      	adds	r7, #8
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
	...

08012454 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b086      	sub	sp, #24
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]
 801245c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012464:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8012466:	2300      	movs	r3, #0
 8012468:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801246a:	2300      	movs	r3, #0
 801246c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801246e:	2300      	movs	r3, #0
 8012470:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d101      	bne.n	801247c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8012478:	2303      	movs	r3, #3
 801247a:	e0af      	b.n	80125dc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012484:	2b00      	cmp	r3, #0
 8012486:	d03f      	beq.n	8012508 <USBD_CDC_Setup+0xb4>
 8012488:	2b20      	cmp	r3, #32
 801248a:	f040 809f 	bne.w	80125cc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	88db      	ldrh	r3, [r3, #6]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d02e      	beq.n	80124f4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	781b      	ldrb	r3, [r3, #0]
 801249a:	b25b      	sxtb	r3, r3
 801249c:	2b00      	cmp	r3, #0
 801249e:	da16      	bge.n	80124ce <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80124a6:	689b      	ldr	r3, [r3, #8]
 80124a8:	683a      	ldr	r2, [r7, #0]
 80124aa:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80124ac:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80124ae:	683a      	ldr	r2, [r7, #0]
 80124b0:	88d2      	ldrh	r2, [r2, #6]
 80124b2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	88db      	ldrh	r3, [r3, #6]
 80124b8:	2b07      	cmp	r3, #7
 80124ba:	bf28      	it	cs
 80124bc:	2307      	movcs	r3, #7
 80124be:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80124c0:	693b      	ldr	r3, [r7, #16]
 80124c2:	89fa      	ldrh	r2, [r7, #14]
 80124c4:	4619      	mov	r1, r3
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f001 fae9 	bl	8013a9e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80124cc:	e085      	b.n	80125da <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80124ce:	683b      	ldr	r3, [r7, #0]
 80124d0:	785a      	ldrb	r2, [r3, #1]
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	88db      	ldrh	r3, [r3, #6]
 80124dc:	b2da      	uxtb	r2, r3
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80124e4:	6939      	ldr	r1, [r7, #16]
 80124e6:	683b      	ldr	r3, [r7, #0]
 80124e8:	88db      	ldrh	r3, [r3, #6]
 80124ea:	461a      	mov	r2, r3
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f001 fb02 	bl	8013af6 <USBD_CtlPrepareRx>
      break;
 80124f2:	e072      	b.n	80125da <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80124fa:	689b      	ldr	r3, [r3, #8]
 80124fc:	683a      	ldr	r2, [r7, #0]
 80124fe:	7850      	ldrb	r0, [r2, #1]
 8012500:	2200      	movs	r2, #0
 8012502:	6839      	ldr	r1, [r7, #0]
 8012504:	4798      	blx	r3
      break;
 8012506:	e068      	b.n	80125da <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	785b      	ldrb	r3, [r3, #1]
 801250c:	2b0b      	cmp	r3, #11
 801250e:	d852      	bhi.n	80125b6 <USBD_CDC_Setup+0x162>
 8012510:	a201      	add	r2, pc, #4	; (adr r2, 8012518 <USBD_CDC_Setup+0xc4>)
 8012512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012516:	bf00      	nop
 8012518:	08012549 	.word	0x08012549
 801251c:	080125c5 	.word	0x080125c5
 8012520:	080125b7 	.word	0x080125b7
 8012524:	080125b7 	.word	0x080125b7
 8012528:	080125b7 	.word	0x080125b7
 801252c:	080125b7 	.word	0x080125b7
 8012530:	080125b7 	.word	0x080125b7
 8012534:	080125b7 	.word	0x080125b7
 8012538:	080125b7 	.word	0x080125b7
 801253c:	080125b7 	.word	0x080125b7
 8012540:	08012573 	.word	0x08012573
 8012544:	0801259d 	.word	0x0801259d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801254e:	b2db      	uxtb	r3, r3
 8012550:	2b03      	cmp	r3, #3
 8012552:	d107      	bne.n	8012564 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012554:	f107 030a 	add.w	r3, r7, #10
 8012558:	2202      	movs	r2, #2
 801255a:	4619      	mov	r1, r3
 801255c:	6878      	ldr	r0, [r7, #4]
 801255e:	f001 fa9e 	bl	8013a9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012562:	e032      	b.n	80125ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8012564:	6839      	ldr	r1, [r7, #0]
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f001 fa28 	bl	80139bc <USBD_CtlError>
            ret = USBD_FAIL;
 801256c:	2303      	movs	r3, #3
 801256e:	75fb      	strb	r3, [r7, #23]
          break;
 8012570:	e02b      	b.n	80125ca <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012578:	b2db      	uxtb	r3, r3
 801257a:	2b03      	cmp	r3, #3
 801257c:	d107      	bne.n	801258e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801257e:	f107 030d 	add.w	r3, r7, #13
 8012582:	2201      	movs	r2, #1
 8012584:	4619      	mov	r1, r3
 8012586:	6878      	ldr	r0, [r7, #4]
 8012588:	f001 fa89 	bl	8013a9e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801258c:	e01d      	b.n	80125ca <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801258e:	6839      	ldr	r1, [r7, #0]
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f001 fa13 	bl	80139bc <USBD_CtlError>
            ret = USBD_FAIL;
 8012596:	2303      	movs	r3, #3
 8012598:	75fb      	strb	r3, [r7, #23]
          break;
 801259a:	e016      	b.n	80125ca <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125a2:	b2db      	uxtb	r3, r3
 80125a4:	2b03      	cmp	r3, #3
 80125a6:	d00f      	beq.n	80125c8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80125a8:	6839      	ldr	r1, [r7, #0]
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f001 fa06 	bl	80139bc <USBD_CtlError>
            ret = USBD_FAIL;
 80125b0:	2303      	movs	r3, #3
 80125b2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80125b4:	e008      	b.n	80125c8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80125b6:	6839      	ldr	r1, [r7, #0]
 80125b8:	6878      	ldr	r0, [r7, #4]
 80125ba:	f001 f9ff 	bl	80139bc <USBD_CtlError>
          ret = USBD_FAIL;
 80125be:	2303      	movs	r3, #3
 80125c0:	75fb      	strb	r3, [r7, #23]
          break;
 80125c2:	e002      	b.n	80125ca <USBD_CDC_Setup+0x176>
          break;
 80125c4:	bf00      	nop
 80125c6:	e008      	b.n	80125da <USBD_CDC_Setup+0x186>
          break;
 80125c8:	bf00      	nop
      }
      break;
 80125ca:	e006      	b.n	80125da <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80125cc:	6839      	ldr	r1, [r7, #0]
 80125ce:	6878      	ldr	r0, [r7, #4]
 80125d0:	f001 f9f4 	bl	80139bc <USBD_CtlError>
      ret = USBD_FAIL;
 80125d4:	2303      	movs	r3, #3
 80125d6:	75fb      	strb	r3, [r7, #23]
      break;
 80125d8:	bf00      	nop
  }

  return (uint8_t)ret;
 80125da:	7dfb      	ldrb	r3, [r7, #23]
}
 80125dc:	4618      	mov	r0, r3
 80125de:	3718      	adds	r7, #24
 80125e0:	46bd      	mov	sp, r7
 80125e2:	bd80      	pop	{r7, pc}

080125e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80125e4:	b580      	push	{r7, lr}
 80125e6:	b084      	sub	sp, #16
 80125e8:	af00      	add	r7, sp, #0
 80125ea:	6078      	str	r0, [r7, #4]
 80125ec:	460b      	mov	r3, r1
 80125ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80125f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d101      	bne.n	8012606 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012602:	2303      	movs	r3, #3
 8012604:	e04f      	b.n	80126a6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801260c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801260e:	78fa      	ldrb	r2, [r7, #3]
 8012610:	6879      	ldr	r1, [r7, #4]
 8012612:	4613      	mov	r3, r2
 8012614:	009b      	lsls	r3, r3, #2
 8012616:	4413      	add	r3, r2
 8012618:	009b      	lsls	r3, r3, #2
 801261a:	440b      	add	r3, r1
 801261c:	3318      	adds	r3, #24
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d029      	beq.n	8012678 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8012624:	78fa      	ldrb	r2, [r7, #3]
 8012626:	6879      	ldr	r1, [r7, #4]
 8012628:	4613      	mov	r3, r2
 801262a:	009b      	lsls	r3, r3, #2
 801262c:	4413      	add	r3, r2
 801262e:	009b      	lsls	r3, r3, #2
 8012630:	440b      	add	r3, r1
 8012632:	3318      	adds	r3, #24
 8012634:	681a      	ldr	r2, [r3, #0]
 8012636:	78f9      	ldrb	r1, [r7, #3]
 8012638:	68f8      	ldr	r0, [r7, #12]
 801263a:	460b      	mov	r3, r1
 801263c:	00db      	lsls	r3, r3, #3
 801263e:	1a5b      	subs	r3, r3, r1
 8012640:	009b      	lsls	r3, r3, #2
 8012642:	4403      	add	r3, r0
 8012644:	3344      	adds	r3, #68	; 0x44
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	fbb2 f1f3 	udiv	r1, r2, r3
 801264c:	fb03 f301 	mul.w	r3, r3, r1
 8012650:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012652:	2b00      	cmp	r3, #0
 8012654:	d110      	bne.n	8012678 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8012656:	78fa      	ldrb	r2, [r7, #3]
 8012658:	6879      	ldr	r1, [r7, #4]
 801265a:	4613      	mov	r3, r2
 801265c:	009b      	lsls	r3, r3, #2
 801265e:	4413      	add	r3, r2
 8012660:	009b      	lsls	r3, r3, #2
 8012662:	440b      	add	r3, r1
 8012664:	3318      	adds	r3, #24
 8012666:	2200      	movs	r2, #0
 8012668:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801266a:	78f9      	ldrb	r1, [r7, #3]
 801266c:	2300      	movs	r3, #0
 801266e:	2200      	movs	r2, #0
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f001 feea 	bl	801444a <USBD_LL_Transmit>
 8012676:	e015      	b.n	80126a4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	2200      	movs	r2, #0
 801267c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012686:	691b      	ldr	r3, [r3, #16]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d00b      	beq.n	80126a4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012692:	691b      	ldr	r3, [r3, #16]
 8012694:	68ba      	ldr	r2, [r7, #8]
 8012696:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801269a:	68ba      	ldr	r2, [r7, #8]
 801269c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80126a0:	78fa      	ldrb	r2, [r7, #3]
 80126a2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80126a4:	2300      	movs	r3, #0
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3710      	adds	r7, #16
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}

080126ae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80126ae:	b580      	push	{r7, lr}
 80126b0:	b084      	sub	sp, #16
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	6078      	str	r0, [r7, #4]
 80126b6:	460b      	mov	r3, r1
 80126b8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80126c0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d101      	bne.n	80126d0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80126cc:	2303      	movs	r3, #3
 80126ce:	e015      	b.n	80126fc <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80126d0:	78fb      	ldrb	r3, [r7, #3]
 80126d2:	4619      	mov	r1, r3
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f001 fefa 	bl	80144ce <USBD_LL_GetRxDataSize>
 80126da:	4602      	mov	r2, r0
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80126e8:	68db      	ldr	r3, [r3, #12]
 80126ea:	68fa      	ldr	r2, [r7, #12]
 80126ec:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80126f0:	68fa      	ldr	r2, [r7, #12]
 80126f2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80126f6:	4611      	mov	r1, r2
 80126f8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80126fa:	2300      	movs	r3, #0
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	3710      	adds	r7, #16
 8012700:	46bd      	mov	sp, r7
 8012702:	bd80      	pop	{r7, pc}

08012704 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012712:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d101      	bne.n	801271e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801271a:	2303      	movs	r3, #3
 801271c:	e01b      	b.n	8012756 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012724:	2b00      	cmp	r3, #0
 8012726:	d015      	beq.n	8012754 <USBD_CDC_EP0_RxReady+0x50>
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801272e:	2bff      	cmp	r3, #255	; 0xff
 8012730:	d010      	beq.n	8012754 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012738:	689b      	ldr	r3, [r3, #8]
 801273a:	68fa      	ldr	r2, [r7, #12]
 801273c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8012740:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8012742:	68fa      	ldr	r2, [r7, #12]
 8012744:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012748:	b292      	uxth	r2, r2
 801274a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	22ff      	movs	r2, #255	; 0xff
 8012750:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8012754:	2300      	movs	r3, #0
}
 8012756:	4618      	mov	r0, r3
 8012758:	3710      	adds	r7, #16
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
	...

08012760 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2243      	movs	r2, #67	; 0x43
 801276c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801276e:	4b03      	ldr	r3, [pc, #12]	; (801277c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8012770:	4618      	mov	r0, r3
 8012772:	370c      	adds	r7, #12
 8012774:	46bd      	mov	sp, r7
 8012776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277a:	4770      	bx	lr
 801277c:	20000098 	.word	0x20000098

08012780 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012780:	b480      	push	{r7}
 8012782:	b083      	sub	sp, #12
 8012784:	af00      	add	r7, sp, #0
 8012786:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2243      	movs	r2, #67	; 0x43
 801278c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801278e:	4b03      	ldr	r3, [pc, #12]	; (801279c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8012790:	4618      	mov	r0, r3
 8012792:	370c      	adds	r7, #12
 8012794:	46bd      	mov	sp, r7
 8012796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279a:	4770      	bx	lr
 801279c:	20000054 	.word	0x20000054

080127a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80127a0:	b480      	push	{r7}
 80127a2:	b083      	sub	sp, #12
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2243      	movs	r2, #67	; 0x43
 80127ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80127ae:	4b03      	ldr	r3, [pc, #12]	; (80127bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80127b0:	4618      	mov	r0, r3
 80127b2:	370c      	adds	r7, #12
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr
 80127bc:	200000dc 	.word	0x200000dc

080127c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	220a      	movs	r2, #10
 80127cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80127ce:	4b03      	ldr	r3, [pc, #12]	; (80127dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80127d0:	4618      	mov	r0, r3
 80127d2:	370c      	adds	r7, #12
 80127d4:	46bd      	mov	sp, r7
 80127d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127da:	4770      	bx	lr
 80127dc:	20000010 	.word	0x20000010

080127e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80127e0:	b480      	push	{r7}
 80127e2:	b083      	sub	sp, #12
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d101      	bne.n	80127f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80127f0:	2303      	movs	r3, #3
 80127f2:	e004      	b.n	80127fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	683a      	ldr	r2, [r7, #0]
 80127f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80127fc:	2300      	movs	r3, #0
}
 80127fe:	4618      	mov	r0, r3
 8012800:	370c      	adds	r7, #12
 8012802:	46bd      	mov	sp, r7
 8012804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012808:	4770      	bx	lr

0801280a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801280a:	b480      	push	{r7}
 801280c:	b087      	sub	sp, #28
 801280e:	af00      	add	r7, sp, #0
 8012810:	60f8      	str	r0, [r7, #12]
 8012812:	60b9      	str	r1, [r7, #8]
 8012814:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801281c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d101      	bne.n	8012828 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8012824:	2303      	movs	r3, #3
 8012826:	e008      	b.n	801283a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	687a      	ldr	r2, [r7, #4]
 8012834:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8012838:	2300      	movs	r3, #0
}
 801283a:	4618      	mov	r0, r3
 801283c:	371c      	adds	r7, #28
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr

08012846 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012846:	b480      	push	{r7}
 8012848:	b085      	sub	sp, #20
 801284a:	af00      	add	r7, sp, #0
 801284c:	6078      	str	r0, [r7, #4]
 801284e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012856:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d101      	bne.n	8012862 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 801285e:	2303      	movs	r3, #3
 8012860:	e004      	b.n	801286c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	683a      	ldr	r2, [r7, #0]
 8012866:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801286a:	2300      	movs	r3, #0
}
 801286c:	4618      	mov	r0, r3
 801286e:	3714      	adds	r7, #20
 8012870:	46bd      	mov	sp, r7
 8012872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012876:	4770      	bx	lr

08012878 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b084      	sub	sp, #16
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012886:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801288e:	2b00      	cmp	r3, #0
 8012890:	d101      	bne.n	8012896 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8012892:	2303      	movs	r3, #3
 8012894:	e016      	b.n	80128c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	7c1b      	ldrb	r3, [r3, #16]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d109      	bne.n	80128b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80128a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80128a8:	2101      	movs	r1, #1
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f001 fdee 	bl	801448c <USBD_LL_PrepareReceive>
 80128b0:	e007      	b.n	80128c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80128b8:	2340      	movs	r3, #64	; 0x40
 80128ba:	2101      	movs	r1, #1
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f001 fde5 	bl	801448c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80128c2:	2300      	movs	r3, #0
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	3710      	adds	r7, #16
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd80      	pop	{r7, pc}

080128cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b086      	sub	sp, #24
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	60f8      	str	r0, [r7, #12]
 80128d4:	60b9      	str	r1, [r7, #8]
 80128d6:	4613      	mov	r3, r2
 80128d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d101      	bne.n	80128e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80128e0:	2303      	movs	r3, #3
 80128e2:	e01f      	b.n	8012924 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	2200      	movs	r2, #0
 80128e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2200      	movs	r2, #0
 80128f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	2200      	movs	r2, #0
 80128f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d003      	beq.n	801290a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	68ba      	ldr	r2, [r7, #8]
 8012906:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2201      	movs	r2, #1
 801290e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	79fa      	ldrb	r2, [r7, #7]
 8012916:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012918:	68f8      	ldr	r0, [r7, #12]
 801291a:	f001 fc57 	bl	80141cc <USBD_LL_Init>
 801291e:	4603      	mov	r3, r0
 8012920:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012922:	7dfb      	ldrb	r3, [r7, #23]
}
 8012924:	4618      	mov	r0, r3
 8012926:	3718      	adds	r7, #24
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b084      	sub	sp, #16
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012936:	2300      	movs	r3, #0
 8012938:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801293a:	683b      	ldr	r3, [r7, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d101      	bne.n	8012944 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8012940:	2303      	movs	r3, #3
 8012942:	e016      	b.n	8012972 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	683a      	ldr	r2, [r7, #0]
 8012948:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012954:	2b00      	cmp	r3, #0
 8012956:	d00b      	beq.n	8012970 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012960:	f107 020e 	add.w	r2, r7, #14
 8012964:	4610      	mov	r0, r2
 8012966:	4798      	blx	r3
 8012968:	4602      	mov	r2, r0
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8012970:	2300      	movs	r3, #0
}
 8012972:	4618      	mov	r0, r3
 8012974:	3710      	adds	r7, #16
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}

0801297a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801297a:	b580      	push	{r7, lr}
 801297c:	b082      	sub	sp, #8
 801297e:	af00      	add	r7, sp, #0
 8012980:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f001 fc78 	bl	8014278 <USBD_LL_Start>
 8012988:	4603      	mov	r3, r0
}
 801298a:	4618      	mov	r0, r3
 801298c:	3708      	adds	r7, #8
 801298e:	46bd      	mov	sp, r7
 8012990:	bd80      	pop	{r7, pc}

08012992 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012992:	b480      	push	{r7}
 8012994:	b083      	sub	sp, #12
 8012996:	af00      	add	r7, sp, #0
 8012998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801299a:	2300      	movs	r3, #0
}
 801299c:	4618      	mov	r0, r3
 801299e:	370c      	adds	r7, #12
 80129a0:	46bd      	mov	sp, r7
 80129a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a6:	4770      	bx	lr

080129a8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b084      	sub	sp, #16
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	460b      	mov	r3, r1
 80129b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80129b4:	2303      	movs	r3, #3
 80129b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d009      	beq.n	80129d6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	78fa      	ldrb	r2, [r7, #3]
 80129cc:	4611      	mov	r1, r2
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	4798      	blx	r3
 80129d2:	4603      	mov	r3, r0
 80129d4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80129d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3710      	adds	r7, #16
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}

080129e0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b082      	sub	sp, #8
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
 80129e8:	460b      	mov	r3, r1
 80129ea:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d007      	beq.n	8012a06 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	78fa      	ldrb	r2, [r7, #3]
 8012a00:	4611      	mov	r1, r2
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	4798      	blx	r3
  }

  return USBD_OK;
 8012a06:	2300      	movs	r3, #0
}
 8012a08:	4618      	mov	r0, r3
 8012a0a:	3708      	adds	r7, #8
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}

08012a10 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012a10:	b580      	push	{r7, lr}
 8012a12:	b084      	sub	sp, #16
 8012a14:	af00      	add	r7, sp, #0
 8012a16:	6078      	str	r0, [r7, #4]
 8012a18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012a20:	6839      	ldr	r1, [r7, #0]
 8012a22:	4618      	mov	r0, r3
 8012a24:	f000 ff90 	bl	8013948 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	2201      	movs	r2, #1
 8012a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8012a36:	461a      	mov	r2, r3
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012a44:	f003 031f 	and.w	r3, r3, #31
 8012a48:	2b02      	cmp	r3, #2
 8012a4a:	d01a      	beq.n	8012a82 <USBD_LL_SetupStage+0x72>
 8012a4c:	2b02      	cmp	r3, #2
 8012a4e:	d822      	bhi.n	8012a96 <USBD_LL_SetupStage+0x86>
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d002      	beq.n	8012a5a <USBD_LL_SetupStage+0x4a>
 8012a54:	2b01      	cmp	r3, #1
 8012a56:	d00a      	beq.n	8012a6e <USBD_LL_SetupStage+0x5e>
 8012a58:	e01d      	b.n	8012a96 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012a60:	4619      	mov	r1, r3
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f000 fa62 	bl	8012f2c <USBD_StdDevReq>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8012a6c:	e020      	b.n	8012ab0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012a74:	4619      	mov	r1, r3
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f000 fac6 	bl	8013008 <USBD_StdItfReq>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	73fb      	strb	r3, [r7, #15]
      break;
 8012a80:	e016      	b.n	8012ab0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012a88:	4619      	mov	r1, r3
 8012a8a:	6878      	ldr	r0, [r7, #4]
 8012a8c:	f000 fb05 	bl	801309a <USBD_StdEPReq>
 8012a90:	4603      	mov	r3, r0
 8012a92:	73fb      	strb	r3, [r7, #15]
      break;
 8012a94:	e00c      	b.n	8012ab0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012a9c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012aa0:	b2db      	uxtb	r3, r3
 8012aa2:	4619      	mov	r1, r3
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f001 fc47 	bl	8014338 <USBD_LL_StallEP>
 8012aaa:	4603      	mov	r3, r0
 8012aac:	73fb      	strb	r3, [r7, #15]
      break;
 8012aae:	bf00      	nop
  }

  return ret;
 8012ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3710      	adds	r7, #16
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}

08012aba <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012aba:	b580      	push	{r7, lr}
 8012abc:	b086      	sub	sp, #24
 8012abe:	af00      	add	r7, sp, #0
 8012ac0:	60f8      	str	r0, [r7, #12]
 8012ac2:	460b      	mov	r3, r1
 8012ac4:	607a      	str	r2, [r7, #4]
 8012ac6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012ac8:	7afb      	ldrb	r3, [r7, #11]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d138      	bne.n	8012b40 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012ad4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012adc:	2b03      	cmp	r3, #3
 8012ade:	d14a      	bne.n	8012b76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8012ae0:	693b      	ldr	r3, [r7, #16]
 8012ae2:	689a      	ldr	r2, [r3, #8]
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	68db      	ldr	r3, [r3, #12]
 8012ae8:	429a      	cmp	r2, r3
 8012aea:	d913      	bls.n	8012b14 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	689a      	ldr	r2, [r3, #8]
 8012af0:	693b      	ldr	r3, [r7, #16]
 8012af2:	68db      	ldr	r3, [r3, #12]
 8012af4:	1ad2      	subs	r2, r2, r3
 8012af6:	693b      	ldr	r3, [r7, #16]
 8012af8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012afa:	693b      	ldr	r3, [r7, #16]
 8012afc:	68da      	ldr	r2, [r3, #12]
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	689b      	ldr	r3, [r3, #8]
 8012b02:	4293      	cmp	r3, r2
 8012b04:	bf28      	it	cs
 8012b06:	4613      	movcs	r3, r2
 8012b08:	461a      	mov	r2, r3
 8012b0a:	6879      	ldr	r1, [r7, #4]
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	f001 f80f 	bl	8013b30 <USBD_CtlContinueRx>
 8012b12:	e030      	b.n	8012b76 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	2b03      	cmp	r3, #3
 8012b1e:	d10b      	bne.n	8012b38 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b26:	691b      	ldr	r3, [r3, #16]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d005      	beq.n	8012b38 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b32:	691b      	ldr	r3, [r3, #16]
 8012b34:	68f8      	ldr	r0, [r7, #12]
 8012b36:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012b38:	68f8      	ldr	r0, [r7, #12]
 8012b3a:	f001 f80a 	bl	8013b52 <USBD_CtlSendStatus>
 8012b3e:	e01a      	b.n	8012b76 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	2b03      	cmp	r3, #3
 8012b4a:	d114      	bne.n	8012b76 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b52:	699b      	ldr	r3, [r3, #24]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d00e      	beq.n	8012b76 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b5e:	699b      	ldr	r3, [r3, #24]
 8012b60:	7afa      	ldrb	r2, [r7, #11]
 8012b62:	4611      	mov	r1, r2
 8012b64:	68f8      	ldr	r0, [r7, #12]
 8012b66:	4798      	blx	r3
 8012b68:	4603      	mov	r3, r0
 8012b6a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012b6c:	7dfb      	ldrb	r3, [r7, #23]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d001      	beq.n	8012b76 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8012b72:	7dfb      	ldrb	r3, [r7, #23]
 8012b74:	e000      	b.n	8012b78 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8012b76:	2300      	movs	r3, #0
}
 8012b78:	4618      	mov	r0, r3
 8012b7a:	3718      	adds	r7, #24
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	bd80      	pop	{r7, pc}

08012b80 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b086      	sub	sp, #24
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	60f8      	str	r0, [r7, #12]
 8012b88:	460b      	mov	r3, r1
 8012b8a:	607a      	str	r2, [r7, #4]
 8012b8c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012b8e:	7afb      	ldrb	r3, [r7, #11]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d16b      	bne.n	8012c6c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	3314      	adds	r3, #20
 8012b98:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012ba0:	2b02      	cmp	r3, #2
 8012ba2:	d156      	bne.n	8012c52 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	689a      	ldr	r2, [r3, #8]
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	68db      	ldr	r3, [r3, #12]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d914      	bls.n	8012bda <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	689a      	ldr	r2, [r3, #8]
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	1ad2      	subs	r2, r2, r3
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	689b      	ldr	r3, [r3, #8]
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	6879      	ldr	r1, [r7, #4]
 8012bc6:	68f8      	ldr	r0, [r7, #12]
 8012bc8:	f000 ff84 	bl	8013ad4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012bcc:	2300      	movs	r3, #0
 8012bce:	2200      	movs	r2, #0
 8012bd0:	2100      	movs	r1, #0
 8012bd2:	68f8      	ldr	r0, [r7, #12]
 8012bd4:	f001 fc5a 	bl	801448c <USBD_LL_PrepareReceive>
 8012bd8:	e03b      	b.n	8012c52 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	68da      	ldr	r2, [r3, #12]
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	689b      	ldr	r3, [r3, #8]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d11c      	bne.n	8012c20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	685a      	ldr	r2, [r3, #4]
 8012bea:	693b      	ldr	r3, [r7, #16]
 8012bec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	d316      	bcc.n	8012c20 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	685a      	ldr	r2, [r3, #4]
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d20f      	bcs.n	8012c20 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012c00:	2200      	movs	r2, #0
 8012c02:	2100      	movs	r1, #0
 8012c04:	68f8      	ldr	r0, [r7, #12]
 8012c06:	f000 ff65 	bl	8013ad4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c12:	2300      	movs	r3, #0
 8012c14:	2200      	movs	r2, #0
 8012c16:	2100      	movs	r1, #0
 8012c18:	68f8      	ldr	r0, [r7, #12]
 8012c1a:	f001 fc37 	bl	801448c <USBD_LL_PrepareReceive>
 8012c1e:	e018      	b.n	8012c52 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c26:	b2db      	uxtb	r3, r3
 8012c28:	2b03      	cmp	r3, #3
 8012c2a:	d10b      	bne.n	8012c44 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c32:	68db      	ldr	r3, [r3, #12]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d005      	beq.n	8012c44 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c3e:	68db      	ldr	r3, [r3, #12]
 8012c40:	68f8      	ldr	r0, [r7, #12]
 8012c42:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012c44:	2180      	movs	r1, #128	; 0x80
 8012c46:	68f8      	ldr	r0, [r7, #12]
 8012c48:	f001 fb76 	bl	8014338 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012c4c:	68f8      	ldr	r0, [r7, #12]
 8012c4e:	f000 ff93 	bl	8013b78 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012c58:	2b01      	cmp	r3, #1
 8012c5a:	d122      	bne.n	8012ca2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8012c5c:	68f8      	ldr	r0, [r7, #12]
 8012c5e:	f7ff fe98 	bl	8012992 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	2200      	movs	r2, #0
 8012c66:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012c6a:	e01a      	b.n	8012ca2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c72:	b2db      	uxtb	r3, r3
 8012c74:	2b03      	cmp	r3, #3
 8012c76:	d114      	bne.n	8012ca2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c7e:	695b      	ldr	r3, [r3, #20]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d00e      	beq.n	8012ca2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c8a:	695b      	ldr	r3, [r3, #20]
 8012c8c:	7afa      	ldrb	r2, [r7, #11]
 8012c8e:	4611      	mov	r1, r2
 8012c90:	68f8      	ldr	r0, [r7, #12]
 8012c92:	4798      	blx	r3
 8012c94:	4603      	mov	r3, r0
 8012c96:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012c98:	7dfb      	ldrb	r3, [r7, #23]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d001      	beq.n	8012ca2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012c9e:	7dfb      	ldrb	r3, [r7, #23]
 8012ca0:	e000      	b.n	8012ca4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8012ca2:	2300      	movs	r3, #0
}
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	3718      	adds	r7, #24
 8012ca8:	46bd      	mov	sp, r7
 8012caa:	bd80      	pop	{r7, pc}

08012cac <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b082      	sub	sp, #8
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2201      	movs	r2, #1
 8012cb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d101      	bne.n	8012ce0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012cdc:	2303      	movs	r3, #3
 8012cde:	e02f      	b.n	8012d40 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d00f      	beq.n	8012d0a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d009      	beq.n	8012d0a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	6852      	ldr	r2, [r2, #4]
 8012d02:	b2d2      	uxtb	r2, r2
 8012d04:	4611      	mov	r1, r2
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012d0a:	2340      	movs	r3, #64	; 0x40
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	2100      	movs	r1, #0
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f001 facc 	bl	80142ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2201      	movs	r2, #1
 8012d1a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	2240      	movs	r2, #64	; 0x40
 8012d22:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012d26:	2340      	movs	r3, #64	; 0x40
 8012d28:	2200      	movs	r2, #0
 8012d2a:	2180      	movs	r1, #128	; 0x80
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f001 fabe 	bl	80142ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2201      	movs	r2, #1
 8012d36:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2240      	movs	r2, #64	; 0x40
 8012d3c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8012d3e:	2300      	movs	r3, #0
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3708      	adds	r7, #8
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	460b      	mov	r3, r1
 8012d52:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	78fa      	ldrb	r2, [r7, #3]
 8012d58:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012d5a:	2300      	movs	r3, #0
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	370c      	adds	r7, #12
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr

08012d68 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012d68:	b480      	push	{r7}
 8012d6a:	b083      	sub	sp, #12
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d76:	b2da      	uxtb	r2, r3
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2204      	movs	r2, #4
 8012d82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012d86:	2300      	movs	r3, #0
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	370c      	adds	r7, #12
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d92:	4770      	bx	lr

08012d94 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012d94:	b480      	push	{r7}
 8012d96:	b083      	sub	sp, #12
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012da2:	b2db      	uxtb	r3, r3
 8012da4:	2b04      	cmp	r3, #4
 8012da6:	d106      	bne.n	8012db6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012dae:	b2da      	uxtb	r2, r3
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012db6:	2300      	movs	r3, #0
}
 8012db8:	4618      	mov	r0, r3
 8012dba:	370c      	adds	r7, #12
 8012dbc:	46bd      	mov	sp, r7
 8012dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc2:	4770      	bx	lr

08012dc4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d101      	bne.n	8012dda <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012dd6:	2303      	movs	r3, #3
 8012dd8:	e012      	b.n	8012e00 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012de0:	b2db      	uxtb	r3, r3
 8012de2:	2b03      	cmp	r3, #3
 8012de4:	d10b      	bne.n	8012dfe <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dec:	69db      	ldr	r3, [r3, #28]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d005      	beq.n	8012dfe <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012df8:	69db      	ldr	r3, [r3, #28]
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012dfe:	2300      	movs	r3, #0
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3708      	adds	r7, #8
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b082      	sub	sp, #8
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	460b      	mov	r3, r1
 8012e12:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d101      	bne.n	8012e22 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012e1e:	2303      	movs	r3, #3
 8012e20:	e014      	b.n	8012e4c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e28:	b2db      	uxtb	r3, r3
 8012e2a:	2b03      	cmp	r3, #3
 8012e2c:	d10d      	bne.n	8012e4a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e34:	6a1b      	ldr	r3, [r3, #32]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d007      	beq.n	8012e4a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e40:	6a1b      	ldr	r3, [r3, #32]
 8012e42:	78fa      	ldrb	r2, [r7, #3]
 8012e44:	4611      	mov	r1, r2
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012e4a:	2300      	movs	r3, #0
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3708      	adds	r7, #8
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}

08012e54 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
 8012e5c:	460b      	mov	r3, r1
 8012e5e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d101      	bne.n	8012e6e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8012e6a:	2303      	movs	r3, #3
 8012e6c:	e014      	b.n	8012e98 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e74:	b2db      	uxtb	r3, r3
 8012e76:	2b03      	cmp	r3, #3
 8012e78:	d10d      	bne.n	8012e96 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d007      	beq.n	8012e96 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e8e:	78fa      	ldrb	r2, [r7, #3]
 8012e90:	4611      	mov	r1, r2
 8012e92:	6878      	ldr	r0, [r7, #4]
 8012e94:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012e96:	2300      	movs	r3, #0
}
 8012e98:	4618      	mov	r0, r3
 8012e9a:	3708      	adds	r7, #8
 8012e9c:	46bd      	mov	sp, r7
 8012e9e:	bd80      	pop	{r7, pc}

08012ea0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012ea0:	b480      	push	{r7}
 8012ea2:	b083      	sub	sp, #12
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012ea8:	2300      	movs	r3, #0
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	370c      	adds	r7, #12
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb4:	4770      	bx	lr

08012eb6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012eb6:	b580      	push	{r7, lr}
 8012eb8:	b082      	sub	sp, #8
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2201      	movs	r2, #1
 8012ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d009      	beq.n	8012ee4 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	687a      	ldr	r2, [r7, #4]
 8012eda:	6852      	ldr	r2, [r2, #4]
 8012edc:	b2d2      	uxtb	r2, r2
 8012ede:	4611      	mov	r1, r2
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	4798      	blx	r3
  }

  return USBD_OK;
 8012ee4:	2300      	movs	r3, #0
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3708      	adds	r7, #8
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}

08012eee <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012eee:	b480      	push	{r7}
 8012ef0:	b087      	sub	sp, #28
 8012ef2:	af00      	add	r7, sp, #0
 8012ef4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	781b      	ldrb	r3, [r3, #0]
 8012efe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012f00:	697b      	ldr	r3, [r7, #20]
 8012f02:	3301      	adds	r3, #1
 8012f04:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012f0c:	8a3b      	ldrh	r3, [r7, #16]
 8012f0e:	021b      	lsls	r3, r3, #8
 8012f10:	b21a      	sxth	r2, r3
 8012f12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012f16:	4313      	orrs	r3, r2
 8012f18:	b21b      	sxth	r3, r3
 8012f1a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012f1c:	89fb      	ldrh	r3, [r7, #14]
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	371c      	adds	r7, #28
 8012f22:	46bd      	mov	sp, r7
 8012f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f28:	4770      	bx	lr
	...

08012f2c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f2c:	b580      	push	{r7, lr}
 8012f2e:	b084      	sub	sp, #16
 8012f30:	af00      	add	r7, sp, #0
 8012f32:	6078      	str	r0, [r7, #4]
 8012f34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012f36:	2300      	movs	r3, #0
 8012f38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012f42:	2b40      	cmp	r3, #64	; 0x40
 8012f44:	d005      	beq.n	8012f52 <USBD_StdDevReq+0x26>
 8012f46:	2b40      	cmp	r3, #64	; 0x40
 8012f48:	d853      	bhi.n	8012ff2 <USBD_StdDevReq+0xc6>
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d00b      	beq.n	8012f66 <USBD_StdDevReq+0x3a>
 8012f4e:	2b20      	cmp	r3, #32
 8012f50:	d14f      	bne.n	8012ff2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f58:	689b      	ldr	r3, [r3, #8]
 8012f5a:	6839      	ldr	r1, [r7, #0]
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	4798      	blx	r3
 8012f60:	4603      	mov	r3, r0
 8012f62:	73fb      	strb	r3, [r7, #15]
      break;
 8012f64:	e04a      	b.n	8012ffc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	785b      	ldrb	r3, [r3, #1]
 8012f6a:	2b09      	cmp	r3, #9
 8012f6c:	d83b      	bhi.n	8012fe6 <USBD_StdDevReq+0xba>
 8012f6e:	a201      	add	r2, pc, #4	; (adr r2, 8012f74 <USBD_StdDevReq+0x48>)
 8012f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f74:	08012fc9 	.word	0x08012fc9
 8012f78:	08012fdd 	.word	0x08012fdd
 8012f7c:	08012fe7 	.word	0x08012fe7
 8012f80:	08012fd3 	.word	0x08012fd3
 8012f84:	08012fe7 	.word	0x08012fe7
 8012f88:	08012fa7 	.word	0x08012fa7
 8012f8c:	08012f9d 	.word	0x08012f9d
 8012f90:	08012fe7 	.word	0x08012fe7
 8012f94:	08012fbf 	.word	0x08012fbf
 8012f98:	08012fb1 	.word	0x08012fb1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012f9c:	6839      	ldr	r1, [r7, #0]
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f000 f9de 	bl	8013360 <USBD_GetDescriptor>
          break;
 8012fa4:	e024      	b.n	8012ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012fa6:	6839      	ldr	r1, [r7, #0]
 8012fa8:	6878      	ldr	r0, [r7, #4]
 8012faa:	f000 fb43 	bl	8013634 <USBD_SetAddress>
          break;
 8012fae:	e01f      	b.n	8012ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012fb0:	6839      	ldr	r1, [r7, #0]
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f000 fb82 	bl	80136bc <USBD_SetConfig>
 8012fb8:	4603      	mov	r3, r0
 8012fba:	73fb      	strb	r3, [r7, #15]
          break;
 8012fbc:	e018      	b.n	8012ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012fbe:	6839      	ldr	r1, [r7, #0]
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f000 fc21 	bl	8013808 <USBD_GetConfig>
          break;
 8012fc6:	e013      	b.n	8012ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012fc8:	6839      	ldr	r1, [r7, #0]
 8012fca:	6878      	ldr	r0, [r7, #4]
 8012fcc:	f000 fc52 	bl	8013874 <USBD_GetStatus>
          break;
 8012fd0:	e00e      	b.n	8012ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012fd2:	6839      	ldr	r1, [r7, #0]
 8012fd4:	6878      	ldr	r0, [r7, #4]
 8012fd6:	f000 fc81 	bl	80138dc <USBD_SetFeature>
          break;
 8012fda:	e009      	b.n	8012ff0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012fdc:	6839      	ldr	r1, [r7, #0]
 8012fde:	6878      	ldr	r0, [r7, #4]
 8012fe0:	f000 fc90 	bl	8013904 <USBD_ClrFeature>
          break;
 8012fe4:	e004      	b.n	8012ff0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8012fe6:	6839      	ldr	r1, [r7, #0]
 8012fe8:	6878      	ldr	r0, [r7, #4]
 8012fea:	f000 fce7 	bl	80139bc <USBD_CtlError>
          break;
 8012fee:	bf00      	nop
      }
      break;
 8012ff0:	e004      	b.n	8012ffc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8012ff2:	6839      	ldr	r1, [r7, #0]
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f000 fce1 	bl	80139bc <USBD_CtlError>
      break;
 8012ffa:	bf00      	nop
  }

  return ret;
 8012ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3710      	adds	r7, #16
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}
 8013006:	bf00      	nop

08013008 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
 801300e:	6078      	str	r0, [r7, #4]
 8013010:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013012:	2300      	movs	r3, #0
 8013014:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013016:	683b      	ldr	r3, [r7, #0]
 8013018:	781b      	ldrb	r3, [r3, #0]
 801301a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801301e:	2b40      	cmp	r3, #64	; 0x40
 8013020:	d005      	beq.n	801302e <USBD_StdItfReq+0x26>
 8013022:	2b40      	cmp	r3, #64	; 0x40
 8013024:	d82f      	bhi.n	8013086 <USBD_StdItfReq+0x7e>
 8013026:	2b00      	cmp	r3, #0
 8013028:	d001      	beq.n	801302e <USBD_StdItfReq+0x26>
 801302a:	2b20      	cmp	r3, #32
 801302c:	d12b      	bne.n	8013086 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013034:	b2db      	uxtb	r3, r3
 8013036:	3b01      	subs	r3, #1
 8013038:	2b02      	cmp	r3, #2
 801303a:	d81d      	bhi.n	8013078 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801303c:	683b      	ldr	r3, [r7, #0]
 801303e:	889b      	ldrh	r3, [r3, #4]
 8013040:	b2db      	uxtb	r3, r3
 8013042:	2b01      	cmp	r3, #1
 8013044:	d813      	bhi.n	801306e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801304c:	689b      	ldr	r3, [r3, #8]
 801304e:	6839      	ldr	r1, [r7, #0]
 8013050:	6878      	ldr	r0, [r7, #4]
 8013052:	4798      	blx	r3
 8013054:	4603      	mov	r3, r0
 8013056:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013058:	683b      	ldr	r3, [r7, #0]
 801305a:	88db      	ldrh	r3, [r3, #6]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d110      	bne.n	8013082 <USBD_StdItfReq+0x7a>
 8013060:	7bfb      	ldrb	r3, [r7, #15]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d10d      	bne.n	8013082 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f000 fd73 	bl	8013b52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801306c:	e009      	b.n	8013082 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801306e:	6839      	ldr	r1, [r7, #0]
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f000 fca3 	bl	80139bc <USBD_CtlError>
          break;
 8013076:	e004      	b.n	8013082 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013078:	6839      	ldr	r1, [r7, #0]
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f000 fc9e 	bl	80139bc <USBD_CtlError>
          break;
 8013080:	e000      	b.n	8013084 <USBD_StdItfReq+0x7c>
          break;
 8013082:	bf00      	nop
      }
      break;
 8013084:	e004      	b.n	8013090 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8013086:	6839      	ldr	r1, [r7, #0]
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f000 fc97 	bl	80139bc <USBD_CtlError>
      break;
 801308e:	bf00      	nop
  }

  return ret;
 8013090:	7bfb      	ldrb	r3, [r7, #15]
}
 8013092:	4618      	mov	r0, r3
 8013094:	3710      	adds	r7, #16
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801309a:	b580      	push	{r7, lr}
 801309c:	b084      	sub	sp, #16
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
 80130a2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80130a4:	2300      	movs	r3, #0
 80130a6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	889b      	ldrh	r3, [r3, #4]
 80130ac:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80130b6:	2b40      	cmp	r3, #64	; 0x40
 80130b8:	d007      	beq.n	80130ca <USBD_StdEPReq+0x30>
 80130ba:	2b40      	cmp	r3, #64	; 0x40
 80130bc:	f200 8145 	bhi.w	801334a <USBD_StdEPReq+0x2b0>
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d00c      	beq.n	80130de <USBD_StdEPReq+0x44>
 80130c4:	2b20      	cmp	r3, #32
 80130c6:	f040 8140 	bne.w	801334a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130d0:	689b      	ldr	r3, [r3, #8]
 80130d2:	6839      	ldr	r1, [r7, #0]
 80130d4:	6878      	ldr	r0, [r7, #4]
 80130d6:	4798      	blx	r3
 80130d8:	4603      	mov	r3, r0
 80130da:	73fb      	strb	r3, [r7, #15]
      break;
 80130dc:	e13a      	b.n	8013354 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	785b      	ldrb	r3, [r3, #1]
 80130e2:	2b03      	cmp	r3, #3
 80130e4:	d007      	beq.n	80130f6 <USBD_StdEPReq+0x5c>
 80130e6:	2b03      	cmp	r3, #3
 80130e8:	f300 8129 	bgt.w	801333e <USBD_StdEPReq+0x2a4>
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d07f      	beq.n	80131f0 <USBD_StdEPReq+0x156>
 80130f0:	2b01      	cmp	r3, #1
 80130f2:	d03c      	beq.n	801316e <USBD_StdEPReq+0xd4>
 80130f4:	e123      	b.n	801333e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130fc:	b2db      	uxtb	r3, r3
 80130fe:	2b02      	cmp	r3, #2
 8013100:	d002      	beq.n	8013108 <USBD_StdEPReq+0x6e>
 8013102:	2b03      	cmp	r3, #3
 8013104:	d016      	beq.n	8013134 <USBD_StdEPReq+0x9a>
 8013106:	e02c      	b.n	8013162 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013108:	7bbb      	ldrb	r3, [r7, #14]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d00d      	beq.n	801312a <USBD_StdEPReq+0x90>
 801310e:	7bbb      	ldrb	r3, [r7, #14]
 8013110:	2b80      	cmp	r3, #128	; 0x80
 8013112:	d00a      	beq.n	801312a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013114:	7bbb      	ldrb	r3, [r7, #14]
 8013116:	4619      	mov	r1, r3
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f001 f90d 	bl	8014338 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801311e:	2180      	movs	r1, #128	; 0x80
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f001 f909 	bl	8014338 <USBD_LL_StallEP>
 8013126:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013128:	e020      	b.n	801316c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801312a:	6839      	ldr	r1, [r7, #0]
 801312c:	6878      	ldr	r0, [r7, #4]
 801312e:	f000 fc45 	bl	80139bc <USBD_CtlError>
              break;
 8013132:	e01b      	b.n	801316c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	885b      	ldrh	r3, [r3, #2]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d10e      	bne.n	801315a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801313c:	7bbb      	ldrb	r3, [r7, #14]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d00b      	beq.n	801315a <USBD_StdEPReq+0xc0>
 8013142:	7bbb      	ldrb	r3, [r7, #14]
 8013144:	2b80      	cmp	r3, #128	; 0x80
 8013146:	d008      	beq.n	801315a <USBD_StdEPReq+0xc0>
 8013148:	683b      	ldr	r3, [r7, #0]
 801314a:	88db      	ldrh	r3, [r3, #6]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d104      	bne.n	801315a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013150:	7bbb      	ldrb	r3, [r7, #14]
 8013152:	4619      	mov	r1, r3
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f001 f8ef 	bl	8014338 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f000 fcf9 	bl	8013b52 <USBD_CtlSendStatus>

              break;
 8013160:	e004      	b.n	801316c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8013162:	6839      	ldr	r1, [r7, #0]
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f000 fc29 	bl	80139bc <USBD_CtlError>
              break;
 801316a:	bf00      	nop
          }
          break;
 801316c:	e0ec      	b.n	8013348 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013174:	b2db      	uxtb	r3, r3
 8013176:	2b02      	cmp	r3, #2
 8013178:	d002      	beq.n	8013180 <USBD_StdEPReq+0xe6>
 801317a:	2b03      	cmp	r3, #3
 801317c:	d016      	beq.n	80131ac <USBD_StdEPReq+0x112>
 801317e:	e030      	b.n	80131e2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013180:	7bbb      	ldrb	r3, [r7, #14]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d00d      	beq.n	80131a2 <USBD_StdEPReq+0x108>
 8013186:	7bbb      	ldrb	r3, [r7, #14]
 8013188:	2b80      	cmp	r3, #128	; 0x80
 801318a:	d00a      	beq.n	80131a2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801318c:	7bbb      	ldrb	r3, [r7, #14]
 801318e:	4619      	mov	r1, r3
 8013190:	6878      	ldr	r0, [r7, #4]
 8013192:	f001 f8d1 	bl	8014338 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013196:	2180      	movs	r1, #128	; 0x80
 8013198:	6878      	ldr	r0, [r7, #4]
 801319a:	f001 f8cd 	bl	8014338 <USBD_LL_StallEP>
 801319e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80131a0:	e025      	b.n	80131ee <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 80131a2:	6839      	ldr	r1, [r7, #0]
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f000 fc09 	bl	80139bc <USBD_CtlError>
              break;
 80131aa:	e020      	b.n	80131ee <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80131ac:	683b      	ldr	r3, [r7, #0]
 80131ae:	885b      	ldrh	r3, [r3, #2]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d11b      	bne.n	80131ec <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80131b4:	7bbb      	ldrb	r3, [r7, #14]
 80131b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d004      	beq.n	80131c8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80131be:	7bbb      	ldrb	r3, [r7, #14]
 80131c0:	4619      	mov	r1, r3
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f001 f8d7 	bl	8014376 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80131c8:	6878      	ldr	r0, [r7, #4]
 80131ca:	f000 fcc2 	bl	8013b52 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131d4:	689b      	ldr	r3, [r3, #8]
 80131d6:	6839      	ldr	r1, [r7, #0]
 80131d8:	6878      	ldr	r0, [r7, #4]
 80131da:	4798      	blx	r3
 80131dc:	4603      	mov	r3, r0
 80131de:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80131e0:	e004      	b.n	80131ec <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80131e2:	6839      	ldr	r1, [r7, #0]
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f000 fbe9 	bl	80139bc <USBD_CtlError>
              break;
 80131ea:	e000      	b.n	80131ee <USBD_StdEPReq+0x154>
              break;
 80131ec:	bf00      	nop
          }
          break;
 80131ee:	e0ab      	b.n	8013348 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80131f6:	b2db      	uxtb	r3, r3
 80131f8:	2b02      	cmp	r3, #2
 80131fa:	d002      	beq.n	8013202 <USBD_StdEPReq+0x168>
 80131fc:	2b03      	cmp	r3, #3
 80131fe:	d032      	beq.n	8013266 <USBD_StdEPReq+0x1cc>
 8013200:	e097      	b.n	8013332 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013202:	7bbb      	ldrb	r3, [r7, #14]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d007      	beq.n	8013218 <USBD_StdEPReq+0x17e>
 8013208:	7bbb      	ldrb	r3, [r7, #14]
 801320a:	2b80      	cmp	r3, #128	; 0x80
 801320c:	d004      	beq.n	8013218 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801320e:	6839      	ldr	r1, [r7, #0]
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f000 fbd3 	bl	80139bc <USBD_CtlError>
                break;
 8013216:	e091      	b.n	801333c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801321c:	2b00      	cmp	r3, #0
 801321e:	da0b      	bge.n	8013238 <USBD_StdEPReq+0x19e>
 8013220:	7bbb      	ldrb	r3, [r7, #14]
 8013222:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013226:	4613      	mov	r3, r2
 8013228:	009b      	lsls	r3, r3, #2
 801322a:	4413      	add	r3, r2
 801322c:	009b      	lsls	r3, r3, #2
 801322e:	3310      	adds	r3, #16
 8013230:	687a      	ldr	r2, [r7, #4]
 8013232:	4413      	add	r3, r2
 8013234:	3304      	adds	r3, #4
 8013236:	e00b      	b.n	8013250 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013238:	7bbb      	ldrb	r3, [r7, #14]
 801323a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801323e:	4613      	mov	r3, r2
 8013240:	009b      	lsls	r3, r3, #2
 8013242:	4413      	add	r3, r2
 8013244:	009b      	lsls	r3, r3, #2
 8013246:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801324a:	687a      	ldr	r2, [r7, #4]
 801324c:	4413      	add	r3, r2
 801324e:	3304      	adds	r3, #4
 8013250:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	2200      	movs	r2, #0
 8013256:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	2202      	movs	r2, #2
 801325c:	4619      	mov	r1, r3
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f000 fc1d 	bl	8013a9e <USBD_CtlSendData>
              break;
 8013264:	e06a      	b.n	801333c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013266:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801326a:	2b00      	cmp	r3, #0
 801326c:	da11      	bge.n	8013292 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801326e:	7bbb      	ldrb	r3, [r7, #14]
 8013270:	f003 020f 	and.w	r2, r3, #15
 8013274:	6879      	ldr	r1, [r7, #4]
 8013276:	4613      	mov	r3, r2
 8013278:	009b      	lsls	r3, r3, #2
 801327a:	4413      	add	r3, r2
 801327c:	009b      	lsls	r3, r3, #2
 801327e:	440b      	add	r3, r1
 8013280:	3324      	adds	r3, #36	; 0x24
 8013282:	881b      	ldrh	r3, [r3, #0]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d117      	bne.n	80132b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013288:	6839      	ldr	r1, [r7, #0]
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f000 fb96 	bl	80139bc <USBD_CtlError>
                  break;
 8013290:	e054      	b.n	801333c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013292:	7bbb      	ldrb	r3, [r7, #14]
 8013294:	f003 020f 	and.w	r2, r3, #15
 8013298:	6879      	ldr	r1, [r7, #4]
 801329a:	4613      	mov	r3, r2
 801329c:	009b      	lsls	r3, r3, #2
 801329e:	4413      	add	r3, r2
 80132a0:	009b      	lsls	r3, r3, #2
 80132a2:	440b      	add	r3, r1
 80132a4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80132a8:	881b      	ldrh	r3, [r3, #0]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d104      	bne.n	80132b8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80132ae:	6839      	ldr	r1, [r7, #0]
 80132b0:	6878      	ldr	r0, [r7, #4]
 80132b2:	f000 fb83 	bl	80139bc <USBD_CtlError>
                  break;
 80132b6:	e041      	b.n	801333c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80132b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	da0b      	bge.n	80132d8 <USBD_StdEPReq+0x23e>
 80132c0:	7bbb      	ldrb	r3, [r7, #14]
 80132c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80132c6:	4613      	mov	r3, r2
 80132c8:	009b      	lsls	r3, r3, #2
 80132ca:	4413      	add	r3, r2
 80132cc:	009b      	lsls	r3, r3, #2
 80132ce:	3310      	adds	r3, #16
 80132d0:	687a      	ldr	r2, [r7, #4]
 80132d2:	4413      	add	r3, r2
 80132d4:	3304      	adds	r3, #4
 80132d6:	e00b      	b.n	80132f0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80132d8:	7bbb      	ldrb	r3, [r7, #14]
 80132da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80132de:	4613      	mov	r3, r2
 80132e0:	009b      	lsls	r3, r3, #2
 80132e2:	4413      	add	r3, r2
 80132e4:	009b      	lsls	r3, r3, #2
 80132e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80132ea:	687a      	ldr	r2, [r7, #4]
 80132ec:	4413      	add	r3, r2
 80132ee:	3304      	adds	r3, #4
 80132f0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80132f2:	7bbb      	ldrb	r3, [r7, #14]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d002      	beq.n	80132fe <USBD_StdEPReq+0x264>
 80132f8:	7bbb      	ldrb	r3, [r7, #14]
 80132fa:	2b80      	cmp	r3, #128	; 0x80
 80132fc:	d103      	bne.n	8013306 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	2200      	movs	r2, #0
 8013302:	601a      	str	r2, [r3, #0]
 8013304:	e00e      	b.n	8013324 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013306:	7bbb      	ldrb	r3, [r7, #14]
 8013308:	4619      	mov	r1, r3
 801330a:	6878      	ldr	r0, [r7, #4]
 801330c:	f001 f852 	bl	80143b4 <USBD_LL_IsStallEP>
 8013310:	4603      	mov	r3, r0
 8013312:	2b00      	cmp	r3, #0
 8013314:	d003      	beq.n	801331e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	2201      	movs	r2, #1
 801331a:	601a      	str	r2, [r3, #0]
 801331c:	e002      	b.n	8013324 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801331e:	68bb      	ldr	r3, [r7, #8]
 8013320:	2200      	movs	r2, #0
 8013322:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	2202      	movs	r2, #2
 8013328:	4619      	mov	r1, r3
 801332a:	6878      	ldr	r0, [r7, #4]
 801332c:	f000 fbb7 	bl	8013a9e <USBD_CtlSendData>
              break;
 8013330:	e004      	b.n	801333c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8013332:	6839      	ldr	r1, [r7, #0]
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f000 fb41 	bl	80139bc <USBD_CtlError>
              break;
 801333a:	bf00      	nop
          }
          break;
 801333c:	e004      	b.n	8013348 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801333e:	6839      	ldr	r1, [r7, #0]
 8013340:	6878      	ldr	r0, [r7, #4]
 8013342:	f000 fb3b 	bl	80139bc <USBD_CtlError>
          break;
 8013346:	bf00      	nop
      }
      break;
 8013348:	e004      	b.n	8013354 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801334a:	6839      	ldr	r1, [r7, #0]
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f000 fb35 	bl	80139bc <USBD_CtlError>
      break;
 8013352:	bf00      	nop
  }

  return ret;
 8013354:	7bfb      	ldrb	r3, [r7, #15]
}
 8013356:	4618      	mov	r0, r3
 8013358:	3710      	adds	r7, #16
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}
	...

08013360 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b084      	sub	sp, #16
 8013364:	af00      	add	r7, sp, #0
 8013366:	6078      	str	r0, [r7, #4]
 8013368:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801336a:	2300      	movs	r3, #0
 801336c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801336e:	2300      	movs	r3, #0
 8013370:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013372:	2300      	movs	r3, #0
 8013374:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013376:	683b      	ldr	r3, [r7, #0]
 8013378:	885b      	ldrh	r3, [r3, #2]
 801337a:	0a1b      	lsrs	r3, r3, #8
 801337c:	b29b      	uxth	r3, r3
 801337e:	3b01      	subs	r3, #1
 8013380:	2b06      	cmp	r3, #6
 8013382:	f200 8128 	bhi.w	80135d6 <USBD_GetDescriptor+0x276>
 8013386:	a201      	add	r2, pc, #4	; (adr r2, 801338c <USBD_GetDescriptor+0x2c>)
 8013388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801338c:	080133a9 	.word	0x080133a9
 8013390:	080133c1 	.word	0x080133c1
 8013394:	08013401 	.word	0x08013401
 8013398:	080135d7 	.word	0x080135d7
 801339c:	080135d7 	.word	0x080135d7
 80133a0:	08013577 	.word	0x08013577
 80133a4:	080135a3 	.word	0x080135a3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	687a      	ldr	r2, [r7, #4]
 80133b2:	7c12      	ldrb	r2, [r2, #16]
 80133b4:	f107 0108 	add.w	r1, r7, #8
 80133b8:	4610      	mov	r0, r2
 80133ba:	4798      	blx	r3
 80133bc:	60f8      	str	r0, [r7, #12]
      break;
 80133be:	e112      	b.n	80135e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	7c1b      	ldrb	r3, [r3, #16]
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d10d      	bne.n	80133e4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133d0:	f107 0208 	add.w	r2, r7, #8
 80133d4:	4610      	mov	r0, r2
 80133d6:	4798      	blx	r3
 80133d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	3301      	adds	r3, #1
 80133de:	2202      	movs	r2, #2
 80133e0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80133e2:	e100      	b.n	80135e6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80133ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ec:	f107 0208 	add.w	r2, r7, #8
 80133f0:	4610      	mov	r0, r2
 80133f2:	4798      	blx	r3
 80133f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	3301      	adds	r3, #1
 80133fa:	2202      	movs	r2, #2
 80133fc:	701a      	strb	r2, [r3, #0]
      break;
 80133fe:	e0f2      	b.n	80135e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	885b      	ldrh	r3, [r3, #2]
 8013404:	b2db      	uxtb	r3, r3
 8013406:	2b05      	cmp	r3, #5
 8013408:	f200 80ac 	bhi.w	8013564 <USBD_GetDescriptor+0x204>
 801340c:	a201      	add	r2, pc, #4	; (adr r2, 8013414 <USBD_GetDescriptor+0xb4>)
 801340e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013412:	bf00      	nop
 8013414:	0801342d 	.word	0x0801342d
 8013418:	08013461 	.word	0x08013461
 801341c:	08013495 	.word	0x08013495
 8013420:	080134c9 	.word	0x080134c9
 8013424:	080134fd 	.word	0x080134fd
 8013428:	08013531 	.word	0x08013531
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d00b      	beq.n	8013450 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801343e:	685b      	ldr	r3, [r3, #4]
 8013440:	687a      	ldr	r2, [r7, #4]
 8013442:	7c12      	ldrb	r2, [r2, #16]
 8013444:	f107 0108 	add.w	r1, r7, #8
 8013448:	4610      	mov	r0, r2
 801344a:	4798      	blx	r3
 801344c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801344e:	e091      	b.n	8013574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013450:	6839      	ldr	r1, [r7, #0]
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	f000 fab2 	bl	80139bc <USBD_CtlError>
            err++;
 8013458:	7afb      	ldrb	r3, [r7, #11]
 801345a:	3301      	adds	r3, #1
 801345c:	72fb      	strb	r3, [r7, #11]
          break;
 801345e:	e089      	b.n	8013574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013466:	689b      	ldr	r3, [r3, #8]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d00b      	beq.n	8013484 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013472:	689b      	ldr	r3, [r3, #8]
 8013474:	687a      	ldr	r2, [r7, #4]
 8013476:	7c12      	ldrb	r2, [r2, #16]
 8013478:	f107 0108 	add.w	r1, r7, #8
 801347c:	4610      	mov	r0, r2
 801347e:	4798      	blx	r3
 8013480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013482:	e077      	b.n	8013574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013484:	6839      	ldr	r1, [r7, #0]
 8013486:	6878      	ldr	r0, [r7, #4]
 8013488:	f000 fa98 	bl	80139bc <USBD_CtlError>
            err++;
 801348c:	7afb      	ldrb	r3, [r7, #11]
 801348e:	3301      	adds	r3, #1
 8013490:	72fb      	strb	r3, [r7, #11]
          break;
 8013492:	e06f      	b.n	8013574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801349a:	68db      	ldr	r3, [r3, #12]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d00b      	beq.n	80134b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80134a6:	68db      	ldr	r3, [r3, #12]
 80134a8:	687a      	ldr	r2, [r7, #4]
 80134aa:	7c12      	ldrb	r2, [r2, #16]
 80134ac:	f107 0108 	add.w	r1, r7, #8
 80134b0:	4610      	mov	r0, r2
 80134b2:	4798      	blx	r3
 80134b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80134b6:	e05d      	b.n	8013574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80134b8:	6839      	ldr	r1, [r7, #0]
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f000 fa7e 	bl	80139bc <USBD_CtlError>
            err++;
 80134c0:	7afb      	ldrb	r3, [r7, #11]
 80134c2:	3301      	adds	r3, #1
 80134c4:	72fb      	strb	r3, [r7, #11]
          break;
 80134c6:	e055      	b.n	8013574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80134ce:	691b      	ldr	r3, [r3, #16]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d00b      	beq.n	80134ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80134da:	691b      	ldr	r3, [r3, #16]
 80134dc:	687a      	ldr	r2, [r7, #4]
 80134de:	7c12      	ldrb	r2, [r2, #16]
 80134e0:	f107 0108 	add.w	r1, r7, #8
 80134e4:	4610      	mov	r0, r2
 80134e6:	4798      	blx	r3
 80134e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80134ea:	e043      	b.n	8013574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80134ec:	6839      	ldr	r1, [r7, #0]
 80134ee:	6878      	ldr	r0, [r7, #4]
 80134f0:	f000 fa64 	bl	80139bc <USBD_CtlError>
            err++;
 80134f4:	7afb      	ldrb	r3, [r7, #11]
 80134f6:	3301      	adds	r3, #1
 80134f8:	72fb      	strb	r3, [r7, #11]
          break;
 80134fa:	e03b      	b.n	8013574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013502:	695b      	ldr	r3, [r3, #20]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d00b      	beq.n	8013520 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801350e:	695b      	ldr	r3, [r3, #20]
 8013510:	687a      	ldr	r2, [r7, #4]
 8013512:	7c12      	ldrb	r2, [r2, #16]
 8013514:	f107 0108 	add.w	r1, r7, #8
 8013518:	4610      	mov	r0, r2
 801351a:	4798      	blx	r3
 801351c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801351e:	e029      	b.n	8013574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013520:	6839      	ldr	r1, [r7, #0]
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f000 fa4a 	bl	80139bc <USBD_CtlError>
            err++;
 8013528:	7afb      	ldrb	r3, [r7, #11]
 801352a:	3301      	adds	r3, #1
 801352c:	72fb      	strb	r3, [r7, #11]
          break;
 801352e:	e021      	b.n	8013574 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013536:	699b      	ldr	r3, [r3, #24]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d00b      	beq.n	8013554 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013542:	699b      	ldr	r3, [r3, #24]
 8013544:	687a      	ldr	r2, [r7, #4]
 8013546:	7c12      	ldrb	r2, [r2, #16]
 8013548:	f107 0108 	add.w	r1, r7, #8
 801354c:	4610      	mov	r0, r2
 801354e:	4798      	blx	r3
 8013550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013552:	e00f      	b.n	8013574 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013554:	6839      	ldr	r1, [r7, #0]
 8013556:	6878      	ldr	r0, [r7, #4]
 8013558:	f000 fa30 	bl	80139bc <USBD_CtlError>
            err++;
 801355c:	7afb      	ldrb	r3, [r7, #11]
 801355e:	3301      	adds	r3, #1
 8013560:	72fb      	strb	r3, [r7, #11]
          break;
 8013562:	e007      	b.n	8013574 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013564:	6839      	ldr	r1, [r7, #0]
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	f000 fa28 	bl	80139bc <USBD_CtlError>
          err++;
 801356c:	7afb      	ldrb	r3, [r7, #11]
 801356e:	3301      	adds	r3, #1
 8013570:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8013572:	bf00      	nop
      }
      break;
 8013574:	e037      	b.n	80135e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	7c1b      	ldrb	r3, [r3, #16]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d109      	bne.n	8013592 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013586:	f107 0208 	add.w	r2, r7, #8
 801358a:	4610      	mov	r0, r2
 801358c:	4798      	blx	r3
 801358e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013590:	e029      	b.n	80135e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013592:	6839      	ldr	r1, [r7, #0]
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f000 fa11 	bl	80139bc <USBD_CtlError>
        err++;
 801359a:	7afb      	ldrb	r3, [r7, #11]
 801359c:	3301      	adds	r3, #1
 801359e:	72fb      	strb	r3, [r7, #11]
      break;
 80135a0:	e021      	b.n	80135e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	7c1b      	ldrb	r3, [r3, #16]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d10d      	bne.n	80135c6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80135b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135b2:	f107 0208 	add.w	r2, r7, #8
 80135b6:	4610      	mov	r0, r2
 80135b8:	4798      	blx	r3
 80135ba:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	3301      	adds	r3, #1
 80135c0:	2207      	movs	r2, #7
 80135c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80135c4:	e00f      	b.n	80135e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80135c6:	6839      	ldr	r1, [r7, #0]
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f000 f9f7 	bl	80139bc <USBD_CtlError>
        err++;
 80135ce:	7afb      	ldrb	r3, [r7, #11]
 80135d0:	3301      	adds	r3, #1
 80135d2:	72fb      	strb	r3, [r7, #11]
      break;
 80135d4:	e007      	b.n	80135e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80135d6:	6839      	ldr	r1, [r7, #0]
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f000 f9ef 	bl	80139bc <USBD_CtlError>
      err++;
 80135de:	7afb      	ldrb	r3, [r7, #11]
 80135e0:	3301      	adds	r3, #1
 80135e2:	72fb      	strb	r3, [r7, #11]
      break;
 80135e4:	bf00      	nop
  }

  if (err != 0U)
 80135e6:	7afb      	ldrb	r3, [r7, #11]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d11e      	bne.n	801362a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	88db      	ldrh	r3, [r3, #6]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d016      	beq.n	8013622 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80135f4:	893b      	ldrh	r3, [r7, #8]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d00e      	beq.n	8013618 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	88da      	ldrh	r2, [r3, #6]
 80135fe:	893b      	ldrh	r3, [r7, #8]
 8013600:	4293      	cmp	r3, r2
 8013602:	bf28      	it	cs
 8013604:	4613      	movcs	r3, r2
 8013606:	b29b      	uxth	r3, r3
 8013608:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801360a:	893b      	ldrh	r3, [r7, #8]
 801360c:	461a      	mov	r2, r3
 801360e:	68f9      	ldr	r1, [r7, #12]
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f000 fa44 	bl	8013a9e <USBD_CtlSendData>
 8013616:	e009      	b.n	801362c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013618:	6839      	ldr	r1, [r7, #0]
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f000 f9ce 	bl	80139bc <USBD_CtlError>
 8013620:	e004      	b.n	801362c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f000 fa95 	bl	8013b52 <USBD_CtlSendStatus>
 8013628:	e000      	b.n	801362c <USBD_GetDescriptor+0x2cc>
    return;
 801362a:	bf00      	nop
  }
}
 801362c:	3710      	adds	r7, #16
 801362e:	46bd      	mov	sp, r7
 8013630:	bd80      	pop	{r7, pc}
 8013632:	bf00      	nop

08013634 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b084      	sub	sp, #16
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	889b      	ldrh	r3, [r3, #4]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d131      	bne.n	80136aa <USBD_SetAddress+0x76>
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	88db      	ldrh	r3, [r3, #6]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d12d      	bne.n	80136aa <USBD_SetAddress+0x76>
 801364e:	683b      	ldr	r3, [r7, #0]
 8013650:	885b      	ldrh	r3, [r3, #2]
 8013652:	2b7f      	cmp	r3, #127	; 0x7f
 8013654:	d829      	bhi.n	80136aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	885b      	ldrh	r3, [r3, #2]
 801365a:	b2db      	uxtb	r3, r3
 801365c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013660:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013668:	b2db      	uxtb	r3, r3
 801366a:	2b03      	cmp	r3, #3
 801366c:	d104      	bne.n	8013678 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801366e:	6839      	ldr	r1, [r7, #0]
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f000 f9a3 	bl	80139bc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013676:	e01d      	b.n	80136b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	7bfa      	ldrb	r2, [r7, #15]
 801367c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013680:	7bfb      	ldrb	r3, [r7, #15]
 8013682:	4619      	mov	r1, r3
 8013684:	6878      	ldr	r0, [r7, #4]
 8013686:	f000 fec1 	bl	801440c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801368a:	6878      	ldr	r0, [r7, #4]
 801368c:	f000 fa61 	bl	8013b52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013690:	7bfb      	ldrb	r3, [r7, #15]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d004      	beq.n	80136a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	2202      	movs	r2, #2
 801369a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801369e:	e009      	b.n	80136b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2201      	movs	r2, #1
 80136a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136a8:	e004      	b.n	80136b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80136aa:	6839      	ldr	r1, [r7, #0]
 80136ac:	6878      	ldr	r0, [r7, #4]
 80136ae:	f000 f985 	bl	80139bc <USBD_CtlError>
  }
}
 80136b2:	bf00      	nop
 80136b4:	bf00      	nop
 80136b6:	3710      	adds	r7, #16
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
 80136c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80136c6:	2300      	movs	r3, #0
 80136c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80136ca:	683b      	ldr	r3, [r7, #0]
 80136cc:	885b      	ldrh	r3, [r3, #2]
 80136ce:	b2da      	uxtb	r2, r3
 80136d0:	4b4c      	ldr	r3, [pc, #304]	; (8013804 <USBD_SetConfig+0x148>)
 80136d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80136d4:	4b4b      	ldr	r3, [pc, #300]	; (8013804 <USBD_SetConfig+0x148>)
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	2b01      	cmp	r3, #1
 80136da:	d905      	bls.n	80136e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80136dc:	6839      	ldr	r1, [r7, #0]
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f000 f96c 	bl	80139bc <USBD_CtlError>
    return USBD_FAIL;
 80136e4:	2303      	movs	r3, #3
 80136e6:	e088      	b.n	80137fa <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136ee:	b2db      	uxtb	r3, r3
 80136f0:	2b02      	cmp	r3, #2
 80136f2:	d002      	beq.n	80136fa <USBD_SetConfig+0x3e>
 80136f4:	2b03      	cmp	r3, #3
 80136f6:	d025      	beq.n	8013744 <USBD_SetConfig+0x88>
 80136f8:	e071      	b.n	80137de <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80136fa:	4b42      	ldr	r3, [pc, #264]	; (8013804 <USBD_SetConfig+0x148>)
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d01c      	beq.n	801373c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8013702:	4b40      	ldr	r3, [pc, #256]	; (8013804 <USBD_SetConfig+0x148>)
 8013704:	781b      	ldrb	r3, [r3, #0]
 8013706:	461a      	mov	r2, r3
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801370c:	4b3d      	ldr	r3, [pc, #244]	; (8013804 <USBD_SetConfig+0x148>)
 801370e:	781b      	ldrb	r3, [r3, #0]
 8013710:	4619      	mov	r1, r3
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f7ff f948 	bl	80129a8 <USBD_SetClassConfig>
 8013718:	4603      	mov	r3, r0
 801371a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801371c:	7bfb      	ldrb	r3, [r7, #15]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d004      	beq.n	801372c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8013722:	6839      	ldr	r1, [r7, #0]
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f000 f949 	bl	80139bc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801372a:	e065      	b.n	80137f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801372c:	6878      	ldr	r0, [r7, #4]
 801372e:	f000 fa10 	bl	8013b52 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	2203      	movs	r2, #3
 8013736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801373a:	e05d      	b.n	80137f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801373c:	6878      	ldr	r0, [r7, #4]
 801373e:	f000 fa08 	bl	8013b52 <USBD_CtlSendStatus>
      break;
 8013742:	e059      	b.n	80137f8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013744:	4b2f      	ldr	r3, [pc, #188]	; (8013804 <USBD_SetConfig+0x148>)
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d112      	bne.n	8013772 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	2202      	movs	r2, #2
 8013750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013754:	4b2b      	ldr	r3, [pc, #172]	; (8013804 <USBD_SetConfig+0x148>)
 8013756:	781b      	ldrb	r3, [r3, #0]
 8013758:	461a      	mov	r2, r3
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801375e:	4b29      	ldr	r3, [pc, #164]	; (8013804 <USBD_SetConfig+0x148>)
 8013760:	781b      	ldrb	r3, [r3, #0]
 8013762:	4619      	mov	r1, r3
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f7ff f93b 	bl	80129e0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f000 f9f1 	bl	8013b52 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013770:	e042      	b.n	80137f8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8013772:	4b24      	ldr	r3, [pc, #144]	; (8013804 <USBD_SetConfig+0x148>)
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	461a      	mov	r2, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	429a      	cmp	r2, r3
 801377e:	d02a      	beq.n	80137d6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	685b      	ldr	r3, [r3, #4]
 8013784:	b2db      	uxtb	r3, r3
 8013786:	4619      	mov	r1, r3
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f7ff f929 	bl	80129e0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801378e:	4b1d      	ldr	r3, [pc, #116]	; (8013804 <USBD_SetConfig+0x148>)
 8013790:	781b      	ldrb	r3, [r3, #0]
 8013792:	461a      	mov	r2, r3
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013798:	4b1a      	ldr	r3, [pc, #104]	; (8013804 <USBD_SetConfig+0x148>)
 801379a:	781b      	ldrb	r3, [r3, #0]
 801379c:	4619      	mov	r1, r3
 801379e:	6878      	ldr	r0, [r7, #4]
 80137a0:	f7ff f902 	bl	80129a8 <USBD_SetClassConfig>
 80137a4:	4603      	mov	r3, r0
 80137a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80137a8:	7bfb      	ldrb	r3, [r7, #15]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00f      	beq.n	80137ce <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80137ae:	6839      	ldr	r1, [r7, #0]
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f000 f903 	bl	80139bc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	685b      	ldr	r3, [r3, #4]
 80137ba:	b2db      	uxtb	r3, r3
 80137bc:	4619      	mov	r1, r3
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	f7ff f90e 	bl	80129e0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	2202      	movs	r2, #2
 80137c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80137cc:	e014      	b.n	80137f8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80137ce:	6878      	ldr	r0, [r7, #4]
 80137d0:	f000 f9bf 	bl	8013b52 <USBD_CtlSendStatus>
      break;
 80137d4:	e010      	b.n	80137f8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f000 f9bb 	bl	8013b52 <USBD_CtlSendStatus>
      break;
 80137dc:	e00c      	b.n	80137f8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80137de:	6839      	ldr	r1, [r7, #0]
 80137e0:	6878      	ldr	r0, [r7, #4]
 80137e2:	f000 f8eb 	bl	80139bc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80137e6:	4b07      	ldr	r3, [pc, #28]	; (8013804 <USBD_SetConfig+0x148>)
 80137e8:	781b      	ldrb	r3, [r3, #0]
 80137ea:	4619      	mov	r1, r3
 80137ec:	6878      	ldr	r0, [r7, #4]
 80137ee:	f7ff f8f7 	bl	80129e0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80137f2:	2303      	movs	r3, #3
 80137f4:	73fb      	strb	r3, [r7, #15]
      break;
 80137f6:	bf00      	nop
  }

  return ret;
 80137f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	3710      	adds	r7, #16
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}
 8013802:	bf00      	nop
 8013804:	2000044e 	.word	0x2000044e

08013808 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b082      	sub	sp, #8
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
 8013810:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013812:	683b      	ldr	r3, [r7, #0]
 8013814:	88db      	ldrh	r3, [r3, #6]
 8013816:	2b01      	cmp	r3, #1
 8013818:	d004      	beq.n	8013824 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801381a:	6839      	ldr	r1, [r7, #0]
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f000 f8cd 	bl	80139bc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013822:	e023      	b.n	801386c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801382a:	b2db      	uxtb	r3, r3
 801382c:	2b02      	cmp	r3, #2
 801382e:	dc02      	bgt.n	8013836 <USBD_GetConfig+0x2e>
 8013830:	2b00      	cmp	r3, #0
 8013832:	dc03      	bgt.n	801383c <USBD_GetConfig+0x34>
 8013834:	e015      	b.n	8013862 <USBD_GetConfig+0x5a>
 8013836:	2b03      	cmp	r3, #3
 8013838:	d00b      	beq.n	8013852 <USBD_GetConfig+0x4a>
 801383a:	e012      	b.n	8013862 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	2200      	movs	r2, #0
 8013840:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	3308      	adds	r3, #8
 8013846:	2201      	movs	r2, #1
 8013848:	4619      	mov	r1, r3
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f000 f927 	bl	8013a9e <USBD_CtlSendData>
        break;
 8013850:	e00c      	b.n	801386c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	3304      	adds	r3, #4
 8013856:	2201      	movs	r2, #1
 8013858:	4619      	mov	r1, r3
 801385a:	6878      	ldr	r0, [r7, #4]
 801385c:	f000 f91f 	bl	8013a9e <USBD_CtlSendData>
        break;
 8013860:	e004      	b.n	801386c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013862:	6839      	ldr	r1, [r7, #0]
 8013864:	6878      	ldr	r0, [r7, #4]
 8013866:	f000 f8a9 	bl	80139bc <USBD_CtlError>
        break;
 801386a:	bf00      	nop
}
 801386c:	bf00      	nop
 801386e:	3708      	adds	r7, #8
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}

08013874 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013874:	b580      	push	{r7, lr}
 8013876:	b082      	sub	sp, #8
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
 801387c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013884:	b2db      	uxtb	r3, r3
 8013886:	3b01      	subs	r3, #1
 8013888:	2b02      	cmp	r3, #2
 801388a:	d81e      	bhi.n	80138ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	88db      	ldrh	r3, [r3, #6]
 8013890:	2b02      	cmp	r3, #2
 8013892:	d004      	beq.n	801389e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013894:	6839      	ldr	r1, [r7, #0]
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f000 f890 	bl	80139bc <USBD_CtlError>
        break;
 801389c:	e01a      	b.n	80138d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	2201      	movs	r2, #1
 80138a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d005      	beq.n	80138ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	68db      	ldr	r3, [r3, #12]
 80138b2:	f043 0202 	orr.w	r2, r3, #2
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	330c      	adds	r3, #12
 80138be:	2202      	movs	r2, #2
 80138c0:	4619      	mov	r1, r3
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f000 f8eb 	bl	8013a9e <USBD_CtlSendData>
      break;
 80138c8:	e004      	b.n	80138d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80138ca:	6839      	ldr	r1, [r7, #0]
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	f000 f875 	bl	80139bc <USBD_CtlError>
      break;
 80138d2:	bf00      	nop
  }
}
 80138d4:	bf00      	nop
 80138d6:	3708      	adds	r7, #8
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}

080138dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138dc:	b580      	push	{r7, lr}
 80138de:	b082      	sub	sp, #8
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
 80138e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80138e6:	683b      	ldr	r3, [r7, #0]
 80138e8:	885b      	ldrh	r3, [r3, #2]
 80138ea:	2b01      	cmp	r3, #1
 80138ec:	d106      	bne.n	80138fc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	2201      	movs	r2, #1
 80138f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f000 f92b 	bl	8013b52 <USBD_CtlSendStatus>
  }
}
 80138fc:	bf00      	nop
 80138fe:	3708      	adds	r7, #8
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}

08013904 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b082      	sub	sp, #8
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013914:	b2db      	uxtb	r3, r3
 8013916:	3b01      	subs	r3, #1
 8013918:	2b02      	cmp	r3, #2
 801391a:	d80b      	bhi.n	8013934 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801391c:	683b      	ldr	r3, [r7, #0]
 801391e:	885b      	ldrh	r3, [r3, #2]
 8013920:	2b01      	cmp	r3, #1
 8013922:	d10c      	bne.n	801393e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2200      	movs	r2, #0
 8013928:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f000 f910 	bl	8013b52 <USBD_CtlSendStatus>
      }
      break;
 8013932:	e004      	b.n	801393e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013934:	6839      	ldr	r1, [r7, #0]
 8013936:	6878      	ldr	r0, [r7, #4]
 8013938:	f000 f840 	bl	80139bc <USBD_CtlError>
      break;
 801393c:	e000      	b.n	8013940 <USBD_ClrFeature+0x3c>
      break;
 801393e:	bf00      	nop
  }
}
 8013940:	bf00      	nop
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}

08013948 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b084      	sub	sp, #16
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	781a      	ldrb	r2, [r3, #0]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	3301      	adds	r3, #1
 8013962:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	781a      	ldrb	r2, [r3, #0]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	3301      	adds	r3, #1
 8013970:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013972:	68f8      	ldr	r0, [r7, #12]
 8013974:	f7ff fabb 	bl	8012eee <SWAPBYTE>
 8013978:	4603      	mov	r3, r0
 801397a:	461a      	mov	r2, r3
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	3301      	adds	r3, #1
 8013984:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	3301      	adds	r3, #1
 801398a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801398c:	68f8      	ldr	r0, [r7, #12]
 801398e:	f7ff faae 	bl	8012eee <SWAPBYTE>
 8013992:	4603      	mov	r3, r0
 8013994:	461a      	mov	r2, r3
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	3301      	adds	r3, #1
 801399e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	3301      	adds	r3, #1
 80139a4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80139a6:	68f8      	ldr	r0, [r7, #12]
 80139a8:	f7ff faa1 	bl	8012eee <SWAPBYTE>
 80139ac:	4603      	mov	r3, r0
 80139ae:	461a      	mov	r2, r3
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	80da      	strh	r2, [r3, #6]
}
 80139b4:	bf00      	nop
 80139b6:	3710      	adds	r7, #16
 80139b8:	46bd      	mov	sp, r7
 80139ba:	bd80      	pop	{r7, pc}

080139bc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b082      	sub	sp, #8
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
 80139c4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80139c6:	2180      	movs	r1, #128	; 0x80
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f000 fcb5 	bl	8014338 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80139ce:	2100      	movs	r1, #0
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	f000 fcb1 	bl	8014338 <USBD_LL_StallEP>
}
 80139d6:	bf00      	nop
 80139d8:	3708      	adds	r7, #8
 80139da:	46bd      	mov	sp, r7
 80139dc:	bd80      	pop	{r7, pc}

080139de <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80139de:	b580      	push	{r7, lr}
 80139e0:	b086      	sub	sp, #24
 80139e2:	af00      	add	r7, sp, #0
 80139e4:	60f8      	str	r0, [r7, #12]
 80139e6:	60b9      	str	r1, [r7, #8]
 80139e8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80139ea:	2300      	movs	r3, #0
 80139ec:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d036      	beq.n	8013a62 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80139f8:	6938      	ldr	r0, [r7, #16]
 80139fa:	f000 f836 	bl	8013a6a <USBD_GetLen>
 80139fe:	4603      	mov	r3, r0
 8013a00:	3301      	adds	r3, #1
 8013a02:	b29b      	uxth	r3, r3
 8013a04:	005b      	lsls	r3, r3, #1
 8013a06:	b29a      	uxth	r2, r3
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013a0c:	7dfb      	ldrb	r3, [r7, #23]
 8013a0e:	68ba      	ldr	r2, [r7, #8]
 8013a10:	4413      	add	r3, r2
 8013a12:	687a      	ldr	r2, [r7, #4]
 8013a14:	7812      	ldrb	r2, [r2, #0]
 8013a16:	701a      	strb	r2, [r3, #0]
  idx++;
 8013a18:	7dfb      	ldrb	r3, [r7, #23]
 8013a1a:	3301      	adds	r3, #1
 8013a1c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013a1e:	7dfb      	ldrb	r3, [r7, #23]
 8013a20:	68ba      	ldr	r2, [r7, #8]
 8013a22:	4413      	add	r3, r2
 8013a24:	2203      	movs	r2, #3
 8013a26:	701a      	strb	r2, [r3, #0]
  idx++;
 8013a28:	7dfb      	ldrb	r3, [r7, #23]
 8013a2a:	3301      	adds	r3, #1
 8013a2c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013a2e:	e013      	b.n	8013a58 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8013a30:	7dfb      	ldrb	r3, [r7, #23]
 8013a32:	68ba      	ldr	r2, [r7, #8]
 8013a34:	4413      	add	r3, r2
 8013a36:	693a      	ldr	r2, [r7, #16]
 8013a38:	7812      	ldrb	r2, [r2, #0]
 8013a3a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013a3c:	693b      	ldr	r3, [r7, #16]
 8013a3e:	3301      	adds	r3, #1
 8013a40:	613b      	str	r3, [r7, #16]
    idx++;
 8013a42:	7dfb      	ldrb	r3, [r7, #23]
 8013a44:	3301      	adds	r3, #1
 8013a46:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013a48:	7dfb      	ldrb	r3, [r7, #23]
 8013a4a:	68ba      	ldr	r2, [r7, #8]
 8013a4c:	4413      	add	r3, r2
 8013a4e:	2200      	movs	r2, #0
 8013a50:	701a      	strb	r2, [r3, #0]
    idx++;
 8013a52:	7dfb      	ldrb	r3, [r7, #23]
 8013a54:	3301      	adds	r3, #1
 8013a56:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013a58:	693b      	ldr	r3, [r7, #16]
 8013a5a:	781b      	ldrb	r3, [r3, #0]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d1e7      	bne.n	8013a30 <USBD_GetString+0x52>
 8013a60:	e000      	b.n	8013a64 <USBD_GetString+0x86>
    return;
 8013a62:	bf00      	nop
  }
}
 8013a64:	3718      	adds	r7, #24
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd80      	pop	{r7, pc}

08013a6a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013a6a:	b480      	push	{r7}
 8013a6c:	b085      	sub	sp, #20
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013a72:	2300      	movs	r3, #0
 8013a74:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013a7a:	e005      	b.n	8013a88 <USBD_GetLen+0x1e>
  {
    len++;
 8013a7c:	7bfb      	ldrb	r3, [r7, #15]
 8013a7e:	3301      	adds	r3, #1
 8013a80:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	3301      	adds	r3, #1
 8013a86:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013a88:	68bb      	ldr	r3, [r7, #8]
 8013a8a:	781b      	ldrb	r3, [r3, #0]
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	d1f5      	bne.n	8013a7c <USBD_GetLen+0x12>
  }

  return len;
 8013a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3714      	adds	r7, #20
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr

08013a9e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013a9e:	b580      	push	{r7, lr}
 8013aa0:	b084      	sub	sp, #16
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	60f8      	str	r0, [r7, #12]
 8013aa6:	60b9      	str	r1, [r7, #8]
 8013aa8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2202      	movs	r2, #2
 8013aae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	687a      	ldr	r2, [r7, #4]
 8013ab6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	687a      	ldr	r2, [r7, #4]
 8013abc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	68ba      	ldr	r2, [r7, #8]
 8013ac2:	2100      	movs	r1, #0
 8013ac4:	68f8      	ldr	r0, [r7, #12]
 8013ac6:	f000 fcc0 	bl	801444a <USBD_LL_Transmit>

  return USBD_OK;
 8013aca:	2300      	movs	r3, #0
}
 8013acc:	4618      	mov	r0, r3
 8013ace:	3710      	adds	r7, #16
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b084      	sub	sp, #16
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	60f8      	str	r0, [r7, #12]
 8013adc:	60b9      	str	r1, [r7, #8]
 8013ade:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	68ba      	ldr	r2, [r7, #8]
 8013ae4:	2100      	movs	r1, #0
 8013ae6:	68f8      	ldr	r0, [r7, #12]
 8013ae8:	f000 fcaf 	bl	801444a <USBD_LL_Transmit>

  return USBD_OK;
 8013aec:	2300      	movs	r3, #0
}
 8013aee:	4618      	mov	r0, r3
 8013af0:	3710      	adds	r7, #16
 8013af2:	46bd      	mov	sp, r7
 8013af4:	bd80      	pop	{r7, pc}

08013af6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013af6:	b580      	push	{r7, lr}
 8013af8:	b084      	sub	sp, #16
 8013afa:	af00      	add	r7, sp, #0
 8013afc:	60f8      	str	r0, [r7, #12]
 8013afe:	60b9      	str	r1, [r7, #8]
 8013b00:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	2203      	movs	r2, #3
 8013b06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	687a      	ldr	r2, [r7, #4]
 8013b0e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	68ba      	ldr	r2, [r7, #8]
 8013b1e:	2100      	movs	r1, #0
 8013b20:	68f8      	ldr	r0, [r7, #12]
 8013b22:	f000 fcb3 	bl	801448c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013b26:	2300      	movs	r3, #0
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}

08013b30 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b084      	sub	sp, #16
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	60f8      	str	r0, [r7, #12]
 8013b38:	60b9      	str	r1, [r7, #8]
 8013b3a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	68ba      	ldr	r2, [r7, #8]
 8013b40:	2100      	movs	r1, #0
 8013b42:	68f8      	ldr	r0, [r7, #12]
 8013b44:	f000 fca2 	bl	801448c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013b48:	2300      	movs	r3, #0
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3710      	adds	r7, #16
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}

08013b52 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013b52:	b580      	push	{r7, lr}
 8013b54:	b082      	sub	sp, #8
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	2204      	movs	r2, #4
 8013b5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013b62:	2300      	movs	r3, #0
 8013b64:	2200      	movs	r2, #0
 8013b66:	2100      	movs	r1, #0
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f000 fc6e 	bl	801444a <USBD_LL_Transmit>

  return USBD_OK;
 8013b6e:	2300      	movs	r3, #0
}
 8013b70:	4618      	mov	r0, r3
 8013b72:	3708      	adds	r7, #8
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}

08013b78 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b082      	sub	sp, #8
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	2205      	movs	r2, #5
 8013b84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013b88:	2300      	movs	r3, #0
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	2100      	movs	r1, #0
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f000 fc7c 	bl	801448c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013b94:	2300      	movs	r3, #0
}
 8013b96:	4618      	mov	r0, r3
 8013b98:	3708      	adds	r7, #8
 8013b9a:	46bd      	mov	sp, r7
 8013b9c:	bd80      	pop	{r7, pc}
	...

08013ba0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8013ba4:	2201      	movs	r2, #1
 8013ba6:	4913      	ldr	r1, [pc, #76]	; (8013bf4 <MX_USB_DEVICE_Init+0x54>)
 8013ba8:	4813      	ldr	r0, [pc, #76]	; (8013bf8 <MX_USB_DEVICE_Init+0x58>)
 8013baa:	f7fe fe8f 	bl	80128cc <USBD_Init>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d001      	beq.n	8013bb8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013bb4:	f7ee fa1e 	bl	8001ff4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8013bb8:	4910      	ldr	r1, [pc, #64]	; (8013bfc <MX_USB_DEVICE_Init+0x5c>)
 8013bba:	480f      	ldr	r0, [pc, #60]	; (8013bf8 <MX_USB_DEVICE_Init+0x58>)
 8013bbc:	f7fe feb6 	bl	801292c <USBD_RegisterClass>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d001      	beq.n	8013bca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013bc6:	f7ee fa15 	bl	8001ff4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8013bca:	490d      	ldr	r1, [pc, #52]	; (8013c00 <MX_USB_DEVICE_Init+0x60>)
 8013bcc:	480a      	ldr	r0, [pc, #40]	; (8013bf8 <MX_USB_DEVICE_Init+0x58>)
 8013bce:	f7fe fe07 	bl	80127e0 <USBD_CDC_RegisterInterface>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d001      	beq.n	8013bdc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013bd8:	f7ee fa0c 	bl	8001ff4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8013bdc:	4806      	ldr	r0, [pc, #24]	; (8013bf8 <MX_USB_DEVICE_Init+0x58>)
 8013bde:	f7fe fecc 	bl	801297a <USBD_Start>
 8013be2:	4603      	mov	r3, r0
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d001      	beq.n	8013bec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013be8:	f7ee fa04 	bl	8001ff4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8013bec:	f7f5 fade 	bl	80091ac <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013bf0:	bf00      	nop
 8013bf2:	bd80      	pop	{r7, pc}
 8013bf4:	20000134 	.word	0x20000134
 8013bf8:	20000ee0 	.word	0x20000ee0
 8013bfc:	2000001c 	.word	0x2000001c
 8013c00:	20000120 	.word	0x20000120

08013c04 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8013c08:	2200      	movs	r2, #0
 8013c0a:	4905      	ldr	r1, [pc, #20]	; (8013c20 <CDC_Init_HS+0x1c>)
 8013c0c:	4805      	ldr	r0, [pc, #20]	; (8013c24 <CDC_Init_HS+0x20>)
 8013c0e:	f7fe fdfc 	bl	801280a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8013c12:	4905      	ldr	r1, [pc, #20]	; (8013c28 <CDC_Init_HS+0x24>)
 8013c14:	4803      	ldr	r0, [pc, #12]	; (8013c24 <CDC_Init_HS+0x20>)
 8013c16:	f7fe fe16 	bl	8012846 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013c1a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	bd80      	pop	{r7, pc}
 8013c20:	200019b0 	.word	0x200019b0
 8013c24:	20000ee0 	.word	0x20000ee0
 8013c28:	200011b0 	.word	0x200011b0

08013c2c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8013c2c:	b480      	push	{r7}
 8013c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8013c30:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr

08013c3c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b083      	sub	sp, #12
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	4603      	mov	r3, r0
 8013c44:	6039      	str	r1, [r7, #0]
 8013c46:	71fb      	strb	r3, [r7, #7]
 8013c48:	4613      	mov	r3, r2
 8013c4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8013c4c:	79fb      	ldrb	r3, [r7, #7]
 8013c4e:	2b23      	cmp	r3, #35	; 0x23
 8013c50:	d84a      	bhi.n	8013ce8 <CDC_Control_HS+0xac>
 8013c52:	a201      	add	r2, pc, #4	; (adr r2, 8013c58 <CDC_Control_HS+0x1c>)
 8013c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c58:	08013ce9 	.word	0x08013ce9
 8013c5c:	08013ce9 	.word	0x08013ce9
 8013c60:	08013ce9 	.word	0x08013ce9
 8013c64:	08013ce9 	.word	0x08013ce9
 8013c68:	08013ce9 	.word	0x08013ce9
 8013c6c:	08013ce9 	.word	0x08013ce9
 8013c70:	08013ce9 	.word	0x08013ce9
 8013c74:	08013ce9 	.word	0x08013ce9
 8013c78:	08013ce9 	.word	0x08013ce9
 8013c7c:	08013ce9 	.word	0x08013ce9
 8013c80:	08013ce9 	.word	0x08013ce9
 8013c84:	08013ce9 	.word	0x08013ce9
 8013c88:	08013ce9 	.word	0x08013ce9
 8013c8c:	08013ce9 	.word	0x08013ce9
 8013c90:	08013ce9 	.word	0x08013ce9
 8013c94:	08013ce9 	.word	0x08013ce9
 8013c98:	08013ce9 	.word	0x08013ce9
 8013c9c:	08013ce9 	.word	0x08013ce9
 8013ca0:	08013ce9 	.word	0x08013ce9
 8013ca4:	08013ce9 	.word	0x08013ce9
 8013ca8:	08013ce9 	.word	0x08013ce9
 8013cac:	08013ce9 	.word	0x08013ce9
 8013cb0:	08013ce9 	.word	0x08013ce9
 8013cb4:	08013ce9 	.word	0x08013ce9
 8013cb8:	08013ce9 	.word	0x08013ce9
 8013cbc:	08013ce9 	.word	0x08013ce9
 8013cc0:	08013ce9 	.word	0x08013ce9
 8013cc4:	08013ce9 	.word	0x08013ce9
 8013cc8:	08013ce9 	.word	0x08013ce9
 8013ccc:	08013ce9 	.word	0x08013ce9
 8013cd0:	08013ce9 	.word	0x08013ce9
 8013cd4:	08013ce9 	.word	0x08013ce9
 8013cd8:	08013ce9 	.word	0x08013ce9
 8013cdc:	08013ce9 	.word	0x08013ce9
 8013ce0:	08013ce9 	.word	0x08013ce9
 8013ce4:	08013ce9 	.word	0x08013ce9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013ce8:	bf00      	nop
  }

  return (USBD_OK);
 8013cea:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8013cec:	4618      	mov	r0, r3
 8013cee:	370c      	adds	r7, #12
 8013cf0:	46bd      	mov	sp, r7
 8013cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cf6:	4770      	bx	lr

08013cf8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8013d02:	6879      	ldr	r1, [r7, #4]
 8013d04:	4805      	ldr	r0, [pc, #20]	; (8013d1c <CDC_Receive_HS+0x24>)
 8013d06:	f7fe fd9e 	bl	8012846 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8013d0a:	4804      	ldr	r0, [pc, #16]	; (8013d1c <CDC_Receive_HS+0x24>)
 8013d0c:	f7fe fdb4 	bl	8012878 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013d10:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	3708      	adds	r7, #8
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}
 8013d1a:	bf00      	nop
 8013d1c:	20000ee0 	.word	0x20000ee0

08013d20 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013d20:	b480      	push	{r7}
 8013d22:	b087      	sub	sp, #28
 8013d24:	af00      	add	r7, sp, #0
 8013d26:	60f8      	str	r0, [r7, #12]
 8013d28:	60b9      	str	r1, [r7, #8]
 8013d2a:	4613      	mov	r3, r2
 8013d2c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8013d32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	371c      	adds	r7, #28
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d40:	4770      	bx	lr
	...

08013d44 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d44:	b480      	push	{r7}
 8013d46:	b083      	sub	sp, #12
 8013d48:	af00      	add	r7, sp, #0
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	6039      	str	r1, [r7, #0]
 8013d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8013d50:	683b      	ldr	r3, [r7, #0]
 8013d52:	2212      	movs	r2, #18
 8013d54:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8013d56:	4b03      	ldr	r3, [pc, #12]	; (8013d64 <USBD_HS_DeviceDescriptor+0x20>)
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	370c      	adds	r7, #12
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d62:	4770      	bx	lr
 8013d64:	20000150 	.word	0x20000150

08013d68 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d68:	b480      	push	{r7}
 8013d6a:	b083      	sub	sp, #12
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	4603      	mov	r3, r0
 8013d70:	6039      	str	r1, [r7, #0]
 8013d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	2204      	movs	r2, #4
 8013d78:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013d7a:	4b03      	ldr	r3, [pc, #12]	; (8013d88 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	370c      	adds	r7, #12
 8013d80:	46bd      	mov	sp, r7
 8013d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d86:	4770      	bx	lr
 8013d88:	20000164 	.word	0x20000164

08013d8c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	4603      	mov	r3, r0
 8013d94:	6039      	str	r1, [r7, #0]
 8013d96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013d98:	79fb      	ldrb	r3, [r7, #7]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d105      	bne.n	8013daa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8013d9e:	683a      	ldr	r2, [r7, #0]
 8013da0:	4907      	ldr	r1, [pc, #28]	; (8013dc0 <USBD_HS_ProductStrDescriptor+0x34>)
 8013da2:	4808      	ldr	r0, [pc, #32]	; (8013dc4 <USBD_HS_ProductStrDescriptor+0x38>)
 8013da4:	f7ff fe1b 	bl	80139de <USBD_GetString>
 8013da8:	e004      	b.n	8013db4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8013daa:	683a      	ldr	r2, [r7, #0]
 8013dac:	4904      	ldr	r1, [pc, #16]	; (8013dc0 <USBD_HS_ProductStrDescriptor+0x34>)
 8013dae:	4805      	ldr	r0, [pc, #20]	; (8013dc4 <USBD_HS_ProductStrDescriptor+0x38>)
 8013db0:	f7ff fe15 	bl	80139de <USBD_GetString>
  }
  return USBD_StrDesc;
 8013db4:	4b02      	ldr	r3, [pc, #8]	; (8013dc0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8013db6:	4618      	mov	r0, r3
 8013db8:	3708      	adds	r7, #8
 8013dba:	46bd      	mov	sp, r7
 8013dbc:	bd80      	pop	{r7, pc}
 8013dbe:	bf00      	nop
 8013dc0:	200021b0 	.word	0x200021b0
 8013dc4:	080145f0 	.word	0x080145f0

08013dc8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013dc8:	b580      	push	{r7, lr}
 8013dca:	b082      	sub	sp, #8
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	4603      	mov	r3, r0
 8013dd0:	6039      	str	r1, [r7, #0]
 8013dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013dd4:	683a      	ldr	r2, [r7, #0]
 8013dd6:	4904      	ldr	r1, [pc, #16]	; (8013de8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8013dd8:	4804      	ldr	r0, [pc, #16]	; (8013dec <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8013dda:	f7ff fe00 	bl	80139de <USBD_GetString>
  return USBD_StrDesc;
 8013dde:	4b02      	ldr	r3, [pc, #8]	; (8013de8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8013de0:	4618      	mov	r0, r3
 8013de2:	3708      	adds	r7, #8
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}
 8013de8:	200021b0 	.word	0x200021b0
 8013dec:	08014608 	.word	0x08014608

08013df0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013df0:	b580      	push	{r7, lr}
 8013df2:	b082      	sub	sp, #8
 8013df4:	af00      	add	r7, sp, #0
 8013df6:	4603      	mov	r3, r0
 8013df8:	6039      	str	r1, [r7, #0]
 8013dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013dfc:	683b      	ldr	r3, [r7, #0]
 8013dfe:	221a      	movs	r2, #26
 8013e00:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013e02:	f000 f843 	bl	8013e8c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8013e06:	4b02      	ldr	r3, [pc, #8]	; (8013e10 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3708      	adds	r7, #8
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}
 8013e10:	20000168 	.word	0x20000168

08013e14 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	6039      	str	r1, [r7, #0]
 8013e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013e20:	79fb      	ldrb	r3, [r7, #7]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d105      	bne.n	8013e32 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8013e26:	683a      	ldr	r2, [r7, #0]
 8013e28:	4907      	ldr	r1, [pc, #28]	; (8013e48 <USBD_HS_ConfigStrDescriptor+0x34>)
 8013e2a:	4808      	ldr	r0, [pc, #32]	; (8013e4c <USBD_HS_ConfigStrDescriptor+0x38>)
 8013e2c:	f7ff fdd7 	bl	80139de <USBD_GetString>
 8013e30:	e004      	b.n	8013e3c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8013e32:	683a      	ldr	r2, [r7, #0]
 8013e34:	4904      	ldr	r1, [pc, #16]	; (8013e48 <USBD_HS_ConfigStrDescriptor+0x34>)
 8013e36:	4805      	ldr	r0, [pc, #20]	; (8013e4c <USBD_HS_ConfigStrDescriptor+0x38>)
 8013e38:	f7ff fdd1 	bl	80139de <USBD_GetString>
  }
  return USBD_StrDesc;
 8013e3c:	4b02      	ldr	r3, [pc, #8]	; (8013e48 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8013e3e:	4618      	mov	r0, r3
 8013e40:	3708      	adds	r7, #8
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	200021b0 	.word	0x200021b0
 8013e4c:	0801461c 	.word	0x0801461c

08013e50 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	4603      	mov	r3, r0
 8013e58:	6039      	str	r1, [r7, #0]
 8013e5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013e5c:	79fb      	ldrb	r3, [r7, #7]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d105      	bne.n	8013e6e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8013e62:	683a      	ldr	r2, [r7, #0]
 8013e64:	4907      	ldr	r1, [pc, #28]	; (8013e84 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8013e66:	4808      	ldr	r0, [pc, #32]	; (8013e88 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8013e68:	f7ff fdb9 	bl	80139de <USBD_GetString>
 8013e6c:	e004      	b.n	8013e78 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8013e6e:	683a      	ldr	r2, [r7, #0]
 8013e70:	4904      	ldr	r1, [pc, #16]	; (8013e84 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8013e72:	4805      	ldr	r0, [pc, #20]	; (8013e88 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8013e74:	f7ff fdb3 	bl	80139de <USBD_GetString>
  }
  return USBD_StrDesc;
 8013e78:	4b02      	ldr	r3, [pc, #8]	; (8013e84 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	3708      	adds	r7, #8
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}
 8013e82:	bf00      	nop
 8013e84:	200021b0 	.word	0x200021b0
 8013e88:	08014628 	.word	0x08014628

08013e8c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013e8c:	b580      	push	{r7, lr}
 8013e8e:	b084      	sub	sp, #16
 8013e90:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013e92:	4b0f      	ldr	r3, [pc, #60]	; (8013ed0 <Get_SerialNum+0x44>)
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013e98:	4b0e      	ldr	r3, [pc, #56]	; (8013ed4 <Get_SerialNum+0x48>)
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013e9e:	4b0e      	ldr	r3, [pc, #56]	; (8013ed8 <Get_SerialNum+0x4c>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013ea4:	68fa      	ldr	r2, [r7, #12]
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d009      	beq.n	8013ec6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013eb2:	2208      	movs	r2, #8
 8013eb4:	4909      	ldr	r1, [pc, #36]	; (8013edc <Get_SerialNum+0x50>)
 8013eb6:	68f8      	ldr	r0, [r7, #12]
 8013eb8:	f000 f814 	bl	8013ee4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013ebc:	2204      	movs	r2, #4
 8013ebe:	4908      	ldr	r1, [pc, #32]	; (8013ee0 <Get_SerialNum+0x54>)
 8013ec0:	68b8      	ldr	r0, [r7, #8]
 8013ec2:	f000 f80f 	bl	8013ee4 <IntToUnicode>
  }
}
 8013ec6:	bf00      	nop
 8013ec8:	3710      	adds	r7, #16
 8013eca:	46bd      	mov	sp, r7
 8013ecc:	bd80      	pop	{r7, pc}
 8013ece:	bf00      	nop
 8013ed0:	1ff1e800 	.word	0x1ff1e800
 8013ed4:	1ff1e804 	.word	0x1ff1e804
 8013ed8:	1ff1e808 	.word	0x1ff1e808
 8013edc:	2000016a 	.word	0x2000016a
 8013ee0:	2000017a 	.word	0x2000017a

08013ee4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b087      	sub	sp, #28
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	60f8      	str	r0, [r7, #12]
 8013eec:	60b9      	str	r1, [r7, #8]
 8013eee:	4613      	mov	r3, r2
 8013ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	75fb      	strb	r3, [r7, #23]
 8013efa:	e027      	b.n	8013f4c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	0f1b      	lsrs	r3, r3, #28
 8013f00:	2b09      	cmp	r3, #9
 8013f02:	d80b      	bhi.n	8013f1c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	0f1b      	lsrs	r3, r3, #28
 8013f08:	b2da      	uxtb	r2, r3
 8013f0a:	7dfb      	ldrb	r3, [r7, #23]
 8013f0c:	005b      	lsls	r3, r3, #1
 8013f0e:	4619      	mov	r1, r3
 8013f10:	68bb      	ldr	r3, [r7, #8]
 8013f12:	440b      	add	r3, r1
 8013f14:	3230      	adds	r2, #48	; 0x30
 8013f16:	b2d2      	uxtb	r2, r2
 8013f18:	701a      	strb	r2, [r3, #0]
 8013f1a:	e00a      	b.n	8013f32 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	0f1b      	lsrs	r3, r3, #28
 8013f20:	b2da      	uxtb	r2, r3
 8013f22:	7dfb      	ldrb	r3, [r7, #23]
 8013f24:	005b      	lsls	r3, r3, #1
 8013f26:	4619      	mov	r1, r3
 8013f28:	68bb      	ldr	r3, [r7, #8]
 8013f2a:	440b      	add	r3, r1
 8013f2c:	3237      	adds	r2, #55	; 0x37
 8013f2e:	b2d2      	uxtb	r2, r2
 8013f30:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	011b      	lsls	r3, r3, #4
 8013f36:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013f38:	7dfb      	ldrb	r3, [r7, #23]
 8013f3a:	005b      	lsls	r3, r3, #1
 8013f3c:	3301      	adds	r3, #1
 8013f3e:	68ba      	ldr	r2, [r7, #8]
 8013f40:	4413      	add	r3, r2
 8013f42:	2200      	movs	r2, #0
 8013f44:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013f46:	7dfb      	ldrb	r3, [r7, #23]
 8013f48:	3301      	adds	r3, #1
 8013f4a:	75fb      	strb	r3, [r7, #23]
 8013f4c:	7dfa      	ldrb	r2, [r7, #23]
 8013f4e:	79fb      	ldrb	r3, [r7, #7]
 8013f50:	429a      	cmp	r2, r3
 8013f52:	d3d3      	bcc.n	8013efc <IntToUnicode+0x18>
  }
}
 8013f54:	bf00      	nop
 8013f56:	bf00      	nop
 8013f58:	371c      	adds	r7, #28
 8013f5a:	46bd      	mov	sp, r7
 8013f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f60:	4770      	bx	lr
	...

08013f64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b0b0      	sub	sp, #192	; 0xc0
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013f6c:	f107 030c 	add.w	r3, r7, #12
 8013f70:	22b4      	movs	r2, #180	; 0xb4
 8013f72:	2100      	movs	r1, #0
 8013f74:	4618      	mov	r0, r3
 8013f76:	f000 fb25 	bl	80145c4 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	4a18      	ldr	r2, [pc, #96]	; (8013fe0 <HAL_PCD_MspInit+0x7c>)
 8013f80:	4293      	cmp	r3, r2
 8013f82:	d129      	bne.n	8013fd8 <HAL_PCD_MspInit+0x74>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013f84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013f88:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013f8a:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8013f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013f92:	f107 030c 	add.w	r3, r7, #12
 8013f96:	4618      	mov	r0, r3
 8013f98:	f7f6 f850 	bl	800a03c <HAL_RCCEx_PeriphCLKConfig>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d001      	beq.n	8013fa6 <HAL_PCD_MspInit+0x42>
    {
      Error_Handler();
 8013fa2:	f7ee f827 	bl	8001ff4 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8013fa6:	f7f5 f901 	bl	80091ac <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8013faa:	4b0e      	ldr	r3, [pc, #56]	; (8013fe4 <HAL_PCD_MspInit+0x80>)
 8013fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013fb0:	4a0c      	ldr	r2, [pc, #48]	; (8013fe4 <HAL_PCD_MspInit+0x80>)
 8013fb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013fb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8013fba:	4b0a      	ldr	r3, [pc, #40]	; (8013fe4 <HAL_PCD_MspInit+0x80>)
 8013fbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013fc4:	60bb      	str	r3, [r7, #8]
 8013fc6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8013fc8:	2200      	movs	r2, #0
 8013fca:	2100      	movs	r1, #0
 8013fcc:	204d      	movs	r0, #77	; 0x4d
 8013fce:	f7f1 f8d8 	bl	8005182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8013fd2:	204d      	movs	r0, #77	; 0x4d
 8013fd4:	f7f1 f8ef 	bl	80051b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8013fd8:	bf00      	nop
 8013fda:	37c0      	adds	r7, #192	; 0xc0
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}
 8013fe0:	40040000 	.word	0x40040000
 8013fe4:	58024400 	.word	0x58024400

08013fe8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013ffc:	4619      	mov	r1, r3
 8013ffe:	4610      	mov	r0, r2
 8014000:	f7fe fd06 	bl	8012a10 <USBD_LL_SetupStage>
}
 8014004:	bf00      	nop
 8014006:	3708      	adds	r7, #8
 8014008:	46bd      	mov	sp, r7
 801400a:	bd80      	pop	{r7, pc}

0801400c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b082      	sub	sp, #8
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
 8014014:	460b      	mov	r3, r1
 8014016:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801401e:	78fa      	ldrb	r2, [r7, #3]
 8014020:	6879      	ldr	r1, [r7, #4]
 8014022:	4613      	mov	r3, r2
 8014024:	00db      	lsls	r3, r3, #3
 8014026:	1a9b      	subs	r3, r3, r2
 8014028:	009b      	lsls	r3, r3, #2
 801402a:	440b      	add	r3, r1
 801402c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014030:	681a      	ldr	r2, [r3, #0]
 8014032:	78fb      	ldrb	r3, [r7, #3]
 8014034:	4619      	mov	r1, r3
 8014036:	f7fe fd40 	bl	8012aba <USBD_LL_DataOutStage>
}
 801403a:	bf00      	nop
 801403c:	3708      	adds	r7, #8
 801403e:	46bd      	mov	sp, r7
 8014040:	bd80      	pop	{r7, pc}

08014042 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014042:	b580      	push	{r7, lr}
 8014044:	b082      	sub	sp, #8
 8014046:	af00      	add	r7, sp, #0
 8014048:	6078      	str	r0, [r7, #4]
 801404a:	460b      	mov	r3, r1
 801404c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8014054:	78fa      	ldrb	r2, [r7, #3]
 8014056:	6879      	ldr	r1, [r7, #4]
 8014058:	4613      	mov	r3, r2
 801405a:	00db      	lsls	r3, r3, #3
 801405c:	1a9b      	subs	r3, r3, r2
 801405e:	009b      	lsls	r3, r3, #2
 8014060:	440b      	add	r3, r1
 8014062:	3348      	adds	r3, #72	; 0x48
 8014064:	681a      	ldr	r2, [r3, #0]
 8014066:	78fb      	ldrb	r3, [r7, #3]
 8014068:	4619      	mov	r1, r3
 801406a:	f7fe fd89 	bl	8012b80 <USBD_LL_DataInStage>
}
 801406e:	bf00      	nop
 8014070:	3708      	adds	r7, #8
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}

08014076 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014076:	b580      	push	{r7, lr}
 8014078:	b082      	sub	sp, #8
 801407a:	af00      	add	r7, sp, #0
 801407c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014084:	4618      	mov	r0, r3
 8014086:	f7fe fe9d 	bl	8012dc4 <USBD_LL_SOF>
}
 801408a:	bf00      	nop
 801408c:	3708      	adds	r7, #8
 801408e:	46bd      	mov	sp, r7
 8014090:	bd80      	pop	{r7, pc}

08014092 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014092:	b580      	push	{r7, lr}
 8014094:	b084      	sub	sp, #16
 8014096:	af00      	add	r7, sp, #0
 8014098:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801409a:	2301      	movs	r3, #1
 801409c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	68db      	ldr	r3, [r3, #12]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d102      	bne.n	80140ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80140a6:	2300      	movs	r3, #0
 80140a8:	73fb      	strb	r3, [r7, #15]
 80140aa:	e008      	b.n	80140be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	68db      	ldr	r3, [r3, #12]
 80140b0:	2b02      	cmp	r3, #2
 80140b2:	d102      	bne.n	80140ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80140b4:	2301      	movs	r3, #1
 80140b6:	73fb      	strb	r3, [r7, #15]
 80140b8:	e001      	b.n	80140be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80140ba:	f7ed ff9b 	bl	8001ff4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80140c4:	7bfa      	ldrb	r2, [r7, #15]
 80140c6:	4611      	mov	r1, r2
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7fe fe3d 	bl	8012d48 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80140d4:	4618      	mov	r0, r3
 80140d6:	f7fe fde9 	bl	8012cac <USBD_LL_Reset>
}
 80140da:	bf00      	nop
 80140dc:	3710      	adds	r7, #16
 80140de:	46bd      	mov	sp, r7
 80140e0:	bd80      	pop	{r7, pc}
	...

080140e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80140f2:	4618      	mov	r0, r3
 80140f4:	f7fe fe38 	bl	8012d68 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	6812      	ldr	r2, [r2, #0]
 8014106:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801410a:	f043 0301 	orr.w	r3, r3, #1
 801410e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	6a1b      	ldr	r3, [r3, #32]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d005      	beq.n	8014124 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014118:	4b04      	ldr	r3, [pc, #16]	; (801412c <HAL_PCD_SuspendCallback+0x48>)
 801411a:	691b      	ldr	r3, [r3, #16]
 801411c:	4a03      	ldr	r2, [pc, #12]	; (801412c <HAL_PCD_SuspendCallback+0x48>)
 801411e:	f043 0306 	orr.w	r3, r3, #6
 8014122:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014124:	bf00      	nop
 8014126:	3708      	adds	r7, #8
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}
 801412c:	e000ed00 	.word	0xe000ed00

08014130 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b082      	sub	sp, #8
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801413e:	4618      	mov	r0, r3
 8014140:	f7fe fe28 	bl	8012d94 <USBD_LL_Resume>
}
 8014144:	bf00      	nop
 8014146:	3708      	adds	r7, #8
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}

0801414c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b082      	sub	sp, #8
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
 8014154:	460b      	mov	r3, r1
 8014156:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801415e:	78fa      	ldrb	r2, [r7, #3]
 8014160:	4611      	mov	r1, r2
 8014162:	4618      	mov	r0, r3
 8014164:	f7fe fe76 	bl	8012e54 <USBD_LL_IsoOUTIncomplete>
}
 8014168:	bf00      	nop
 801416a:	3708      	adds	r7, #8
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}

08014170 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b082      	sub	sp, #8
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
 8014178:	460b      	mov	r3, r1
 801417a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014182:	78fa      	ldrb	r2, [r7, #3]
 8014184:	4611      	mov	r1, r2
 8014186:	4618      	mov	r0, r3
 8014188:	f7fe fe3e 	bl	8012e08 <USBD_LL_IsoINIncomplete>
}
 801418c:	bf00      	nop
 801418e:	3708      	adds	r7, #8
 8014190:	46bd      	mov	sp, r7
 8014192:	bd80      	pop	{r7, pc}

08014194 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014194:	b580      	push	{r7, lr}
 8014196:	b082      	sub	sp, #8
 8014198:	af00      	add	r7, sp, #0
 801419a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7fe fe7c 	bl	8012ea0 <USBD_LL_DevConnected>
}
 80141a8:	bf00      	nop
 80141aa:	3708      	adds	r7, #8
 80141ac:	46bd      	mov	sp, r7
 80141ae:	bd80      	pop	{r7, pc}

080141b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b082      	sub	sp, #8
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80141be:	4618      	mov	r0, r3
 80141c0:	f7fe fe79 	bl	8012eb6 <USBD_LL_DevDisconnected>
}
 80141c4:	bf00      	nop
 80141c6:	3708      	adds	r7, #8
 80141c8:	46bd      	mov	sp, r7
 80141ca:	bd80      	pop	{r7, pc}

080141cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	b082      	sub	sp, #8
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	781b      	ldrb	r3, [r3, #0]
 80141d8:	2b01      	cmp	r3, #1
 80141da:	d143      	bne.n	8014264 <USBD_LL_Init+0x98>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80141dc:	4a24      	ldr	r2, [pc, #144]	; (8014270 <USBD_LL_Init+0xa4>)
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	4a22      	ldr	r2, [pc, #136]	; (8014270 <USBD_LL_Init+0xa4>)
 80141e8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80141ec:	4b20      	ldr	r3, [pc, #128]	; (8014270 <USBD_LL_Init+0xa4>)
 80141ee:	4a21      	ldr	r2, [pc, #132]	; (8014274 <USBD_LL_Init+0xa8>)
 80141f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80141f2:	4b1f      	ldr	r3, [pc, #124]	; (8014270 <USBD_LL_Init+0xa4>)
 80141f4:	2209      	movs	r2, #9
 80141f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80141f8:	4b1d      	ldr	r3, [pc, #116]	; (8014270 <USBD_LL_Init+0xa4>)
 80141fa:	2202      	movs	r2, #2
 80141fc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80141fe:	4b1c      	ldr	r3, [pc, #112]	; (8014270 <USBD_LL_Init+0xa4>)
 8014200:	2200      	movs	r2, #0
 8014202:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8014204:	4b1a      	ldr	r3, [pc, #104]	; (8014270 <USBD_LL_Init+0xa4>)
 8014206:	2202      	movs	r2, #2
 8014208:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801420a:	4b19      	ldr	r3, [pc, #100]	; (8014270 <USBD_LL_Init+0xa4>)
 801420c:	2200      	movs	r2, #0
 801420e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8014210:	4b17      	ldr	r3, [pc, #92]	; (8014270 <USBD_LL_Init+0xa4>)
 8014212:	2200      	movs	r2, #0
 8014214:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8014216:	4b16      	ldr	r3, [pc, #88]	; (8014270 <USBD_LL_Init+0xa4>)
 8014218:	2200      	movs	r2, #0
 801421a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 801421c:	4b14      	ldr	r3, [pc, #80]	; (8014270 <USBD_LL_Init+0xa4>)
 801421e:	2201      	movs	r2, #1
 8014220:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8014222:	4b13      	ldr	r3, [pc, #76]	; (8014270 <USBD_LL_Init+0xa4>)
 8014224:	2200      	movs	r2, #0
 8014226:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8014228:	4b11      	ldr	r3, [pc, #68]	; (8014270 <USBD_LL_Init+0xa4>)
 801422a:	2200      	movs	r2, #0
 801422c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801422e:	4b10      	ldr	r3, [pc, #64]	; (8014270 <USBD_LL_Init+0xa4>)
 8014230:	2200      	movs	r2, #0
 8014232:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8014234:	480e      	ldr	r0, [pc, #56]	; (8014270 <USBD_LL_Init+0xa4>)
 8014236:	f7f3 fdb0 	bl	8007d9a <HAL_PCD_Init>
 801423a:	4603      	mov	r3, r0
 801423c:	2b00      	cmp	r3, #0
 801423e:	d001      	beq.n	8014244 <USBD_LL_Init+0x78>
  {
    Error_Handler( );
 8014240:	f7ed fed8 	bl	8001ff4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8014244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8014248:	4809      	ldr	r0, [pc, #36]	; (8014270 <USBD_LL_Init+0xa4>)
 801424a:	f7f4 ff34 	bl	80090b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801424e:	2280      	movs	r2, #128	; 0x80
 8014250:	2100      	movs	r1, #0
 8014252:	4807      	ldr	r0, [pc, #28]	; (8014270 <USBD_LL_Init+0xa4>)
 8014254:	f7f4 fee8 	bl	8009028 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8014258:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801425c:	2101      	movs	r1, #1
 801425e:	4804      	ldr	r0, [pc, #16]	; (8014270 <USBD_LL_Init+0xa4>)
 8014260:	f7f4 fee2 	bl	8009028 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8014264:	2300      	movs	r3, #0
}
 8014266:	4618      	mov	r0, r3
 8014268:	3708      	adds	r7, #8
 801426a:	46bd      	mov	sp, r7
 801426c:	bd80      	pop	{r7, pc}
 801426e:	bf00      	nop
 8014270:	200023b0 	.word	0x200023b0
 8014274:	40040000 	.word	0x40040000

08014278 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b084      	sub	sp, #16
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014280:	2300      	movs	r3, #0
 8014282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014284:	2300      	movs	r3, #0
 8014286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801428e:	4618      	mov	r0, r3
 8014290:	f7f3 fea7 	bl	8007fe2 <HAL_PCD_Start>
 8014294:	4603      	mov	r3, r0
 8014296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014298:	7bfb      	ldrb	r3, [r7, #15]
 801429a:	4618      	mov	r0, r3
 801429c:	f000 f942 	bl	8014524 <USBD_Get_USB_Status>
 80142a0:	4603      	mov	r3, r0
 80142a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80142a6:	4618      	mov	r0, r3
 80142a8:	3710      	adds	r7, #16
 80142aa:	46bd      	mov	sp, r7
 80142ac:	bd80      	pop	{r7, pc}

080142ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80142ae:	b580      	push	{r7, lr}
 80142b0:	b084      	sub	sp, #16
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
 80142b6:	4608      	mov	r0, r1
 80142b8:	4611      	mov	r1, r2
 80142ba:	461a      	mov	r2, r3
 80142bc:	4603      	mov	r3, r0
 80142be:	70fb      	strb	r3, [r7, #3]
 80142c0:	460b      	mov	r3, r1
 80142c2:	70bb      	strb	r3, [r7, #2]
 80142c4:	4613      	mov	r3, r2
 80142c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142c8:	2300      	movs	r3, #0
 80142ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142cc:	2300      	movs	r3, #0
 80142ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80142d6:	78bb      	ldrb	r3, [r7, #2]
 80142d8:	883a      	ldrh	r2, [r7, #0]
 80142da:	78f9      	ldrb	r1, [r7, #3]
 80142dc:	f7f4 faac 	bl	8008838 <HAL_PCD_EP_Open>
 80142e0:	4603      	mov	r3, r0
 80142e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80142e4:	7bfb      	ldrb	r3, [r7, #15]
 80142e6:	4618      	mov	r0, r3
 80142e8:	f000 f91c 	bl	8014524 <USBD_Get_USB_Status>
 80142ec:	4603      	mov	r3, r0
 80142ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3710      	adds	r7, #16
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}

080142fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80142fa:	b580      	push	{r7, lr}
 80142fc:	b084      	sub	sp, #16
 80142fe:	af00      	add	r7, sp, #0
 8014300:	6078      	str	r0, [r7, #4]
 8014302:	460b      	mov	r3, r1
 8014304:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014306:	2300      	movs	r3, #0
 8014308:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801430a:	2300      	movs	r3, #0
 801430c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014314:	78fa      	ldrb	r2, [r7, #3]
 8014316:	4611      	mov	r1, r2
 8014318:	4618      	mov	r0, r3
 801431a:	f7f4 faf5 	bl	8008908 <HAL_PCD_EP_Close>
 801431e:	4603      	mov	r3, r0
 8014320:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014322:	7bfb      	ldrb	r3, [r7, #15]
 8014324:	4618      	mov	r0, r3
 8014326:	f000 f8fd 	bl	8014524 <USBD_Get_USB_Status>
 801432a:	4603      	mov	r3, r0
 801432c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801432e:	7bbb      	ldrb	r3, [r7, #14]
}
 8014330:	4618      	mov	r0, r3
 8014332:	3710      	adds	r7, #16
 8014334:	46bd      	mov	sp, r7
 8014336:	bd80      	pop	{r7, pc}

08014338 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b084      	sub	sp, #16
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	460b      	mov	r3, r1
 8014342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014344:	2300      	movs	r3, #0
 8014346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014348:	2300      	movs	r3, #0
 801434a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014352:	78fa      	ldrb	r2, [r7, #3]
 8014354:	4611      	mov	r1, r2
 8014356:	4618      	mov	r0, r3
 8014358:	f7f4 fbcd 	bl	8008af6 <HAL_PCD_EP_SetStall>
 801435c:	4603      	mov	r3, r0
 801435e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014360:	7bfb      	ldrb	r3, [r7, #15]
 8014362:	4618      	mov	r0, r3
 8014364:	f000 f8de 	bl	8014524 <USBD_Get_USB_Status>
 8014368:	4603      	mov	r3, r0
 801436a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801436c:	7bbb      	ldrb	r3, [r7, #14]
}
 801436e:	4618      	mov	r0, r3
 8014370:	3710      	adds	r7, #16
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}

08014376 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014376:	b580      	push	{r7, lr}
 8014378:	b084      	sub	sp, #16
 801437a:	af00      	add	r7, sp, #0
 801437c:	6078      	str	r0, [r7, #4]
 801437e:	460b      	mov	r3, r1
 8014380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014382:	2300      	movs	r3, #0
 8014384:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014386:	2300      	movs	r3, #0
 8014388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014390:	78fa      	ldrb	r2, [r7, #3]
 8014392:	4611      	mov	r1, r2
 8014394:	4618      	mov	r0, r3
 8014396:	f7f4 fc12 	bl	8008bbe <HAL_PCD_EP_ClrStall>
 801439a:	4603      	mov	r3, r0
 801439c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801439e:	7bfb      	ldrb	r3, [r7, #15]
 80143a0:	4618      	mov	r0, r3
 80143a2:	f000 f8bf 	bl	8014524 <USBD_Get_USB_Status>
 80143a6:	4603      	mov	r3, r0
 80143a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80143aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3710      	adds	r7, #16
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80143b4:	b480      	push	{r7}
 80143b6:	b085      	sub	sp, #20
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
 80143bc:	460b      	mov	r3, r1
 80143be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80143c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80143c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	da0b      	bge.n	80143e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80143d0:	78fb      	ldrb	r3, [r7, #3]
 80143d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80143d6:	68f9      	ldr	r1, [r7, #12]
 80143d8:	4613      	mov	r3, r2
 80143da:	00db      	lsls	r3, r3, #3
 80143dc:	1a9b      	subs	r3, r3, r2
 80143de:	009b      	lsls	r3, r3, #2
 80143e0:	440b      	add	r3, r1
 80143e2:	333e      	adds	r3, #62	; 0x3e
 80143e4:	781b      	ldrb	r3, [r3, #0]
 80143e6:	e00b      	b.n	8014400 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80143e8:	78fb      	ldrb	r3, [r7, #3]
 80143ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80143ee:	68f9      	ldr	r1, [r7, #12]
 80143f0:	4613      	mov	r3, r2
 80143f2:	00db      	lsls	r3, r3, #3
 80143f4:	1a9b      	subs	r3, r3, r2
 80143f6:	009b      	lsls	r3, r3, #2
 80143f8:	440b      	add	r3, r1
 80143fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80143fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014400:	4618      	mov	r0, r3
 8014402:	3714      	adds	r7, #20
 8014404:	46bd      	mov	sp, r7
 8014406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801440a:	4770      	bx	lr

0801440c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b084      	sub	sp, #16
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
 8014414:	460b      	mov	r3, r1
 8014416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014418:	2300      	movs	r3, #0
 801441a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801441c:	2300      	movs	r3, #0
 801441e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014426:	78fa      	ldrb	r2, [r7, #3]
 8014428:	4611      	mov	r1, r2
 801442a:	4618      	mov	r0, r3
 801442c:	f7f4 f9df 	bl	80087ee <HAL_PCD_SetAddress>
 8014430:	4603      	mov	r3, r0
 8014432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014434:	7bfb      	ldrb	r3, [r7, #15]
 8014436:	4618      	mov	r0, r3
 8014438:	f000 f874 	bl	8014524 <USBD_Get_USB_Status>
 801443c:	4603      	mov	r3, r0
 801443e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014440:	7bbb      	ldrb	r3, [r7, #14]
}
 8014442:	4618      	mov	r0, r3
 8014444:	3710      	adds	r7, #16
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}

0801444a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801444a:	b580      	push	{r7, lr}
 801444c:	b086      	sub	sp, #24
 801444e:	af00      	add	r7, sp, #0
 8014450:	60f8      	str	r0, [r7, #12]
 8014452:	607a      	str	r2, [r7, #4]
 8014454:	603b      	str	r3, [r7, #0]
 8014456:	460b      	mov	r3, r1
 8014458:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801445a:	2300      	movs	r3, #0
 801445c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801445e:	2300      	movs	r3, #0
 8014460:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014468:	7af9      	ldrb	r1, [r7, #11]
 801446a:	683b      	ldr	r3, [r7, #0]
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	f7f4 faf8 	bl	8008a62 <HAL_PCD_EP_Transmit>
 8014472:	4603      	mov	r3, r0
 8014474:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014476:	7dfb      	ldrb	r3, [r7, #23]
 8014478:	4618      	mov	r0, r3
 801447a:	f000 f853 	bl	8014524 <USBD_Get_USB_Status>
 801447e:	4603      	mov	r3, r0
 8014480:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8014482:	7dbb      	ldrb	r3, [r7, #22]
}
 8014484:	4618      	mov	r0, r3
 8014486:	3718      	adds	r7, #24
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}

0801448c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b086      	sub	sp, #24
 8014490:	af00      	add	r7, sp, #0
 8014492:	60f8      	str	r0, [r7, #12]
 8014494:	607a      	str	r2, [r7, #4]
 8014496:	603b      	str	r3, [r7, #0]
 8014498:	460b      	mov	r3, r1
 801449a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801449c:	2300      	movs	r3, #0
 801449e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80144a0:	2300      	movs	r3, #0
 80144a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80144aa:	7af9      	ldrb	r1, [r7, #11]
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	687a      	ldr	r2, [r7, #4]
 80144b0:	f7f4 fa74 	bl	800899c <HAL_PCD_EP_Receive>
 80144b4:	4603      	mov	r3, r0
 80144b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80144b8:	7dfb      	ldrb	r3, [r7, #23]
 80144ba:	4618      	mov	r0, r3
 80144bc:	f000 f832 	bl	8014524 <USBD_Get_USB_Status>
 80144c0:	4603      	mov	r3, r0
 80144c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80144c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80144c6:	4618      	mov	r0, r3
 80144c8:	3718      	adds	r7, #24
 80144ca:	46bd      	mov	sp, r7
 80144cc:	bd80      	pop	{r7, pc}

080144ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80144ce:	b580      	push	{r7, lr}
 80144d0:	b082      	sub	sp, #8
 80144d2:	af00      	add	r7, sp, #0
 80144d4:	6078      	str	r0, [r7, #4]
 80144d6:	460b      	mov	r3, r1
 80144d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80144e0:	78fa      	ldrb	r2, [r7, #3]
 80144e2:	4611      	mov	r1, r2
 80144e4:	4618      	mov	r0, r3
 80144e6:	f7f4 faa4 	bl	8008a32 <HAL_PCD_EP_GetRxCount>
 80144ea:	4603      	mov	r3, r0
}
 80144ec:	4618      	mov	r0, r3
 80144ee:	3708      	adds	r7, #8
 80144f0:	46bd      	mov	sp, r7
 80144f2:	bd80      	pop	{r7, pc}

080144f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80144f4:	b480      	push	{r7}
 80144f6:	b083      	sub	sp, #12
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80144fc:	4b03      	ldr	r3, [pc, #12]	; (801450c <USBD_static_malloc+0x18>)
}
 80144fe:	4618      	mov	r0, r3
 8014500:	370c      	adds	r7, #12
 8014502:	46bd      	mov	sp, r7
 8014504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014508:	4770      	bx	lr
 801450a:	bf00      	nop
 801450c:	20000450 	.word	0x20000450

08014510 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8014510:	b480      	push	{r7}
 8014512:	b083      	sub	sp, #12
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]

}
 8014518:	bf00      	nop
 801451a:	370c      	adds	r7, #12
 801451c:	46bd      	mov	sp, r7
 801451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014522:	4770      	bx	lr

08014524 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014524:	b480      	push	{r7}
 8014526:	b085      	sub	sp, #20
 8014528:	af00      	add	r7, sp, #0
 801452a:	4603      	mov	r3, r0
 801452c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801452e:	2300      	movs	r3, #0
 8014530:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014532:	79fb      	ldrb	r3, [r7, #7]
 8014534:	2b03      	cmp	r3, #3
 8014536:	d817      	bhi.n	8014568 <USBD_Get_USB_Status+0x44>
 8014538:	a201      	add	r2, pc, #4	; (adr r2, 8014540 <USBD_Get_USB_Status+0x1c>)
 801453a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801453e:	bf00      	nop
 8014540:	08014551 	.word	0x08014551
 8014544:	08014557 	.word	0x08014557
 8014548:	0801455d 	.word	0x0801455d
 801454c:	08014563 	.word	0x08014563
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8014550:	2300      	movs	r3, #0
 8014552:	73fb      	strb	r3, [r7, #15]
    break;
 8014554:	e00b      	b.n	801456e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8014556:	2303      	movs	r3, #3
 8014558:	73fb      	strb	r3, [r7, #15]
    break;
 801455a:	e008      	b.n	801456e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801455c:	2301      	movs	r3, #1
 801455e:	73fb      	strb	r3, [r7, #15]
    break;
 8014560:	e005      	b.n	801456e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8014562:	2303      	movs	r3, #3
 8014564:	73fb      	strb	r3, [r7, #15]
    break;
 8014566:	e002      	b.n	801456e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014568:	2303      	movs	r3, #3
 801456a:	73fb      	strb	r3, [r7, #15]
    break;
 801456c:	bf00      	nop
  }
  return usb_status;
 801456e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014570:	4618      	mov	r0, r3
 8014572:	3714      	adds	r7, #20
 8014574:	46bd      	mov	sp, r7
 8014576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457a:	4770      	bx	lr

0801457c <__libc_init_array>:
 801457c:	b570      	push	{r4, r5, r6, lr}
 801457e:	4d0d      	ldr	r5, [pc, #52]	; (80145b4 <__libc_init_array+0x38>)
 8014580:	4c0d      	ldr	r4, [pc, #52]	; (80145b8 <__libc_init_array+0x3c>)
 8014582:	1b64      	subs	r4, r4, r5
 8014584:	10a4      	asrs	r4, r4, #2
 8014586:	2600      	movs	r6, #0
 8014588:	42a6      	cmp	r6, r4
 801458a:	d109      	bne.n	80145a0 <__libc_init_array+0x24>
 801458c:	4d0b      	ldr	r5, [pc, #44]	; (80145bc <__libc_init_array+0x40>)
 801458e:	4c0c      	ldr	r4, [pc, #48]	; (80145c0 <__libc_init_array+0x44>)
 8014590:	f000 f820 	bl	80145d4 <_init>
 8014594:	1b64      	subs	r4, r4, r5
 8014596:	10a4      	asrs	r4, r4, #2
 8014598:	2600      	movs	r6, #0
 801459a:	42a6      	cmp	r6, r4
 801459c:	d105      	bne.n	80145aa <__libc_init_array+0x2e>
 801459e:	bd70      	pop	{r4, r5, r6, pc}
 80145a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80145a4:	4798      	blx	r3
 80145a6:	3601      	adds	r6, #1
 80145a8:	e7ee      	b.n	8014588 <__libc_init_array+0xc>
 80145aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80145ae:	4798      	blx	r3
 80145b0:	3601      	adds	r6, #1
 80145b2:	e7f2      	b.n	801459a <__libc_init_array+0x1e>
 80145b4:	08014680 	.word	0x08014680
 80145b8:	08014680 	.word	0x08014680
 80145bc:	08014680 	.word	0x08014680
 80145c0:	08014684 	.word	0x08014684

080145c4 <memset>:
 80145c4:	4402      	add	r2, r0
 80145c6:	4603      	mov	r3, r0
 80145c8:	4293      	cmp	r3, r2
 80145ca:	d100      	bne.n	80145ce <memset+0xa>
 80145cc:	4770      	bx	lr
 80145ce:	f803 1b01 	strb.w	r1, [r3], #1
 80145d2:	e7f9      	b.n	80145c8 <memset+0x4>

080145d4 <_init>:
 80145d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145d6:	bf00      	nop
 80145d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145da:	bc08      	pop	{r3}
 80145dc:	469e      	mov	lr, r3
 80145de:	4770      	bx	lr

080145e0 <_fini>:
 80145e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145e2:	bf00      	nop
 80145e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80145e6:	bc08      	pop	{r3}
 80145e8:	469e      	mov	lr, r3
 80145ea:	4770      	bx	lr
